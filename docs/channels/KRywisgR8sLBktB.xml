<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>JS/Frontend</title><link>https://www.awesome-dev.news</link><description></description><item><title>3D Layered Text: Interactivity and Dynamicism</title><link>https://css-tricks.com/3d-layered-text-interactivity-and-dynamism/</link><author>Amit Sheen</author><category>frontend</category><pubDate>Fri, 22 Aug 2025 13:14:31 +0000</pubDate><source url="https://css-tricks.com/">CSS Tricks blog</source><content:encoded><![CDATA[In the previous two chapters, we built a layered 3D text effect, added depth and color, and then brought it to life with motion. We explored static structure, animated variations, and even some clever decoration tricks. But everything so far has been hard-coded.This time, we’re going dynamic.In this final chapter, we’re stepping into the world of interactivity by adding JavaScript into the mix. We’ll start by generating the layers programmatically, giving us more flexibility and cleaner code (and we’ll never have to copy-paste divs again). Then, we’ll add some interaction. Starting with a simple  effect, and ending with a fully responsive bulging text that follows your mouse in real time. Let’s go.Before we jump into JavaScript, let us clean things up a bit. We will pause the animations for now and go back to the static example we wrapped up with in the first chapter. No need to touch the CSS just yet. Let us start with the HTML.We will strip it down to the bare essentials. All we really need is one element with the text. The class stays. It is still the right one for the job.<div class="layeredText">Lorem Ipsum</div>It is time. Let us start adding some JavaScript. Don’t worry, the impact on performance will be minimal. We’re only using JavaScript to set up the layers and define a few CSS variables. That’s it. All the actual style calculations still happen off the main thread, maintain high frames per second, and don’t stress the browser.We will begin with a simple function called . This is where all the magic of layer generation will happen. To work its magic, the function will receive the element we want to use as the container for the layers.function generateLayers(element) {
  // magic goes here
}To trigger the function, we will first create a small variable that holds all the elements with the  class. And yes, we can have more than one on the page, as we will see later. Then, we will pass each of these elements into the  function to generate the layers.const layeredElements = document.querySelectorAll('.layeredText');

layeredElements.forEach(generateLayers);Now let us dive into the  function itself and start with a small fail safe mechanism. There are situations, especially when working with frameworks or libraries that manage your DOM, where a component might get rendered more than once or a function might run multiple times. It should not happen, but we want to be ready just in case.So, before we do anything, we will check if the element already contains a  with the  class. If it does, we will simply exit the function and do nothing:function generateLayers(element) {
  if (element.querySelector('.layers')) return;
  
  // rest of the logic goes here
} In the real world, I would treat this as a chance to catch a rendering bug. Instead of silently returning, I would probably send a message back to the dev team with the relevant data and expect the issue to be fixed.One last thing we need to cover before we start building the layers is the number of layers. If you remember, we have a CSS variable called , but that will not help us here. Besides, we want this to be more dynamic than a single hardcoded value.Here is what we will do. We will define a constant in our JavaScript called . As the name suggests, this will be our default value. But we will also allow each element to override it by using an attribute like .Then we will take that number and push it back into the CSS using  on the parent element, since we rely on that variable in the styles.const DEFAULT_LAYERS_COUNT = 24;

function generateLayers(element) {  
  if (element.querySelector('.layers')) return;
  
  const layersCount = element.dataset.layers || DEFAULT_LAYERS_COUNT;
  element.style.setProperty('--layers-count', layersCount);
}Now we have everything we need, and we can finally generate the layers. We will store the original text content in a variable. Then we will build the markup, setting the  of the parent element to match the structure we used in all the previous examples. That means a  with the original content, followed by a  with the  class.Inside that , we will run a loop based on the number of layers, adding a new layer in each iteration:function generateLayers(element) {

  // previous code

  const content = element.textContent;

  element.innerHTML = `
    <span>${content}</span>
    <div class="layers" aria-hidden="true">
      ${Array.from({ length: layersCount}, (_, i) =>
        `<div class="layer" style="--i: ${i + 1};">${content}</div>`
      ).join('')}
    </div>
  `;
}And that is it. Our 3D text is ready, and all the layers are now built entirely through JavaScript. Try playing around with it. Change the text inside the  element. Add your name, your project name, your brand. Let me know how it looks. I also removed the  variable from the CSS, since it is now set dynamically with JavaScript. While I was at it, I moved the font settings out of the  element, since they should be applied globally or to a more appropriate wrapper. Just a bit of housekeeping to keep things clean.Since we already added a way to set the number of layers dynamically, let us take advantage of it.Here is an example with three different  elements, each using a different number of layers. The first one (A) has 8 layers, the second (B) has 16, and the third (C) has 24.You can clearly see the difference in height between the letters, since the total height depends on the number of layers. When it comes to color though, we used the normalized value (remember that?), so the gradient looks consistent regardless of height or layer count.We can just as easily normalize the total height of the layers. All we need to do is replace the  variable with a new one called . Instead of setting the distance between each layer, we define the total height for the full stack. That lets us multiply the normalized value by , and get a consistent size no matter how many layers we have..layeredText {
  --text-height: 36px;

  .layer {
    --n: calc(var(--i) / var(--layers-count));

    transform: translateZ(calc(var(--n) * var(--text-height)));
    color: hsl(200 30% calc(var(--n) * 100%));
  }
}We are ready to start reacting to user input. But before we do anything, we need to think about the things we do  want to interact with, and that means the extra layers.We already handled them for screen readers using , but even with regular mouse interactions, these layers can get in the way. In some cases, they might block access to clickable elements underneath.To avoid all of that, we will add  to the  element. This makes the layers completely ‘transparent’ to mouse clicks and hover effects..layers {
  pointer-events: none;
}Now we can finally start responding to user input and adding a bit of interaction. Let’s say I want to use this 3D effect on links, as a hover effect. It might be a little over the top, but we are here to have fun.We will start with this simple markup, just a paragraph of Lorem ipsum, but with two links inside. Each link has the  class. Right now, those links will already have depth and layers applied, but that is not what we want. We want the 3D effect to appear only on hover.To make that happen, we will define a new  block in  and move all the 3D related styles into it. That includes the color and shadow of the , the color and  of each , and to make it look even better, we will also animate the  of the layers..layeredText {
  &:hover {
    span {
      color: black;
      text-shadow: 0 0 0.1em #003;
    }

    .layer {
      color: hsl(200 30% calc(var(--n) * 100%));
      transform: translateZ(calc(var(--i) * var(--layer-offset) + 0.5em));
      opacity: 1;
    }
  }
}Now we need to define the base appearance, the styles that apply when there is no hover. We will give the  and the layers a soft bluish color, apply a simple , and set the layers to be fully transparent by default..layeredText {
  display: inline-block;

  span, .layer {
    color: hsl(200 100% 75%);
    transition: all 0.5s;
  }

  .layer {
    opacity: 0;
  }
}Also, I added  to the  element. This helps prevent unwanted line breaks and allows us to apply transforms to the element, if needed. The result is a hover effect that literally makes each word pop right off the page:Of course, if you are using this as a hover effect but you also have some elements that should always appear with full depth, you can easily define that in your CSS.For example, let us say we have both a heading and a link with the  class, but we want the heading to always show the full 3D effect. In this case, we can update the hover block selector to target both:.layeredText {
  &:is(h1, :hover) {
    /* full 3D styles here */
  }
}This way, links will only show the effect on hover, while the heading stays bold and dimensional all the time.Now we can start working with the mouse position in JavaScript. To do that, we need two things: the position of the mouse on the page, and the position of each element on the page.We will start with the mouse position, since that part is easy. All we need to do is add a  listener, and inside it, define two CSS variables on the :  for the horizontal mouse position, and  for the vertical position.window.addEventListener('mousemove', e => {
  document.body.style.setProperty('--mx', e.pageX);
  document.body.style.setProperty('--my', e.pageY);
});Notice that I am using  and , not  and . That is because I want the mouse position relative to the entire page, not just the viewport. This way it works correctly even when the page is scrolled.Now we need to get the position of each element, specifically the  and  values. We will define a function called  that loops through all , finds their position using a  function, and sets it to a couple of CSS custom properties.function setRects() {
  layeredElements.forEach(element => {
    const rect = element.getBoundingClientRect();
    element.style.setProperty('--top', rect.top + window.scrollY);
    element.style.setProperty('--left', rect.left + window.scrollX);
  });
}Once again, I am using  and  to get the position relative to the entire page, not just the viewport.Keep in mind that reading layout values from the DOM can be expensive in terms of performance, so we want to do it as little as possible. We will run this function once after all the layers are in place, and again only when the page is resized, since that could change the position of the elements.setRects();
window.addEventListener('resize', setRects);That is it. We are officially done writing JavaScript for this article. At this point, we have the mouse position and the position of every element stored as CSS values.Great. So, what do we do with them?Remember the examples from the previous chapter where we used ? That is the key. Let us take that same idea and use a simple radial gradient, from red to white..layer {
  background-clip: text;
  color: transparent;
  background-image: radial-gradient(circle at center, red 24px, white 0);
}But instead of placing the center of the circle in the middle of the element, we will shift it based on the mouse position. To calculate the position of the mouse relative to the element, we simply subtract the element’s position from the mouse position. Then we multiply by , since the value must be in pixels, and plug it into the  part of the gradient..layer {
  background-image:
    radial-gradient(
      circle at calc((var(--mx) - var(--left)) * 1px)
                calc((var(--my) - var(--top)) * 1px),
      red 24px,
      white 0
    );
}The result is text with depth and a small red dot that follows the movement of your mouse.Okay, a small red dot is not exactly mind blowing. But remember, you are not limited to that. Once you have the mouse position, you can use it to drive all sorts of dynamic effects. In just a bit, we will start building the bulging effect that kicked off this entire series, but in other cases, depending on your needs, you might want to normalize the mouse values first.Normalizing Mouse PositionJust like we normalized the index of each layer earlier, we can normalize the mouse position by dividing it by the total width or height of the body. This gives us a value between  and .document.body.style.setProperty('--nx', e.pageX / document.body.clientWidth);
document.body.style.setProperty('--ny', e.pageY / document.body.clientHeight);Normalizing the mouse values lets us work with relative positioning that is independent of screen size. This is perfect for things like adding a responsive tilt to the text based on the mouse position.Now we are finally ready to build the last example. The idea is very similar to the red dot example, but instead of applying the  only to the top layer, we will apply it across all the layers. The color is stored in a custom variable and used to paint the gradient..layer {
  --color: hsl(200 30% calc(var(--n) * 100%));

  color: transparent;
  background-clip: text;
  background-image:
    radial-gradient(
      circle at calc((var(--mx) - var(--left)) * 1px)
                calc((var(--my) - var(--top)) * 1px),
                var(--color) 24px,
                transparent 0
    );
}Now we get something similar to the red dot we saw earlier, but this time the effect spreads across all the layers.We are almost there. Before we go any further with the layers, I want to make the base text look a bit weaker when the hover effect is not active. That way, we create a stronger contrast when the full effect kicks in.So, we will make the  text transparent and increase the opacity of its shadow:span {
  color: transparent;
  text-shadow: 0 0 0.1em #0004;
}Keep in mind, this makes the text nearly unreadable when the hover effect is not active. That is why it is important to use a proper media query to detect whether the device supports hover. Apply this styling only when it does, and adjust it for devices that do not.@media (hover: hover) {
  /* when hover is supported */
}This is it. The only thing left is to fine tune the size of the gradient for each layer. And we are done. But I do not want the bulge to have a linear shape. Using the normalized value alone will give me evenly spaced steps across all layers. That results in a shape with straight edges, like a cone.To get a more convex appearance, we can take advantage of the new trigonometric functions available in CSS. We will take the normalized value, multiply it by 90 degrees, and pass it through a  function. Just like the normalized value, the cosine will return a number between  and , but with a very different distribution. The spacing between values is non-linear, which gives us that smooth convex curve.--cos: calc(cos(var(--n) * 90deg));Now we can use this variable inside the gradient. Instead of giving the color a fixed radius, we will multiply  by whatever size we want the effect to be. I also added an absolute value to the calculation, so that even when  is very low (close to zero), the gradient still has a minimum visible size.And, of course, we do not want sharp, distracting edges. We want a smooth fade. So, instead of giving the  a hard stop point, we will give it a larger value. The difference between the  and the  values will control how soft the transition is.background-image:
  radial-gradient(
    circle at calc((var(--mx) - var(--left)) * 1px)
              calc((var(--my) - var(--top)) * 1px),
              var(--color) calc(var(--cos) * 36px + 24px),
              transparent calc(var(--cos) * 72px)
  );And just like that, we get an interactive effect that follows the mouse and gives the impression of bulging 3D text:At this point, our 3D layered text has gone from a static stack of HTML elements to a fully interactive, mouse-responsive effect. We built dynamic layers with JavaScript, normalized depth and scale, added responsive hover effects, and used live input to shape gradients and create a bulging illusion that tracks the user’s every move.But more than anything, this chapter was about control. Controlling structure through code. Controlling behavior through input. And controlling perception through light, color, and movement. And we did it all with native web technologies.This is just the beginning. You can keep going with noise patterns, lighting, reflections, physics, or more advanced motion behaviors. Now you have the tools to explore them, and to create bold, animated, expressive typography that jumps right off the screen.Now go make something that moves.]]></content:encoded></item><item><title>We still love jQuery</title><link>https://javascriptweekly.com/issues/749</link><author></author><category>dev</category><category>frontend</category><pubDate>Fri, 22 Aug 2025 00:00:00 +0000</pubDate><source url="https://javascriptweekly.com/">Javascript Weekly</source><content:encoded><![CDATA[ — Lee, formerly of Vercel and widely recognized for his influence on Next.js and React, shares candid reflections on the React community, digging into the rise of React Server Components, the tension between commercial and non-commercial priorities, the toll of burnout, and a reminder that, above all, this is still a community of ]]></content:encoded></item><item><title>3D Layered Text: Motion and Variations</title><link>https://css-tricks.com/3d-layered-text-motion-and-variations/</link><author>Amit Sheen</author><category>frontend</category><pubDate>Wed, 20 Aug 2025 13:54:52 +0000</pubDate><source url="https://css-tricks.com/">CSS Tricks blog</source><content:encoded><![CDATA[In the previous chapter, we built a basic 3D layered text effect using nothing but HTML and CSS. It looks great and has a solid visual presence, but it’s completely static. That is about to change.In this chapter, we will explore ways to animate the effect, add transitions, and play with different variations. We will look at how motion can enhance depth, and how subtle tweaks can create a whole new vibe. This article contains multiple animated examples that may include flashing or fast moving visuals. If you are sensitive to motion, please proceed with caution.Let’s start things off with a quick animation tip that pairs perfectly with layered 3D text. Sometimes, we want to rotate the element without actually changing the orientation of the text so it stays readable. The trick here is to combine multiple rotations across two axes. First, rotate the text on the z-axis. Then, add a tilt on the x-axis. Finally, rotate the text back on the z-axis.@keyframes wobble {
  from { transform: rotate(0deg) rotateX(20deg) rotate(360deg); }
  to { transform: rotate(360deg) rotateX(20deg) rotate(0deg); }
}Since we rotate on the z-axis and then reverse that rotation, the text keeps its original orientation. But because we add a tilt on the x-axis in the middle, and the x-axis itself keeps rotating, the angle of the tilt changes as well. This creates a kind of  effect that shows off the text from every angle and emphasizes the sense of depth.If we want to take this a few steps further, we can combine the wobble with a  effect. We will animate the  slightly along the z-axis:.layers {
  animation: hover 2s infinite ease-in-out alternate;
}

@keyframes hover {
  from { transform: translateZ(0.3em); }
  to { transform: translateZ(0.6em); }
}To really sell the effect, we will leave the original span in place — like a shadowed anchor — change its color to transparent, and animate the blur factor of its :span {
  color: transparent;
  animation: shadow 2s infinite ease-in-out alternate;
}

@keyframes shadow {
  from { text-shadow: 0 0 0.1em #000; }
  to { text-shadow: 0 0 0.2em #000; }
}Syncing those two animations together gives the whole thing a more realistic feel:OK, this is starting to look a lot better now that things are moving. But the whole word is still moving as one. Can we make each letter move independently? The answer, as usual, is “yes, but…”It is absolutely possible to split each word into a separate letters and animate them individually. But it also means a lot more elements moving on the screen, and that can lead to performance issues. If you go this route, try not to animate too many letters at once, and consider reducing the number of layers.In the next example, for instance, I reduced the layer count to sixteen. There are five letters, and to place them side by side, I gave the  a , then added a small delay to each letter using :Until now, we have only been moving the text along the z-axis, but we can definitely take it further. Each layer can be moved or rotated in any direction you like, and if we base those transformations on the  variable, we can create all sorts of interesting effects. Here are a few I played with, just to give you some ideas.In the first one, I am animating the  to create a  effect:In the others, I am adding a bit of rotation. The first one is applied to the y-axis for the  effect:This next example applies rotation on the x-axis for the :And, finally, we can apply it on the z-axis for a  example:Working with separate layers does not just let us tweak the animation for each one; it also lets us adjust the  for every layer individually, which can lead to some really interesting effects. Let us take this  example:Right now, the animation is applied to the  element itself, and I am simply changing its scale:.layeredText {
  animation: pulsing 2s infinite ease-out;
}

@keyframes pulsing {
  0%, 100% { scale: 1; }
  20% { scale: 1.2; }
}But we can apply the animation to each layer separately and give each one a slight delay. Note that the  is part of the stack. It is a layer, too, and sometimes you will want to include it in the animation:.layer {
  --delay: calc(var(--n) * 0.3s);
}

:is(span, .layer) {
  animation: pulsing 2s var(--delay, 0s) infinite ease-out;
}Here I am using the  selector to target both the individual layers and the  itself with the same animation. The result is a much more lively and engaging effect:In the previous chapter, I mentioned that I usually prefer to save pseudo elements for decorative purposes. This is definitely a technique worth using. We can give each layer one or two pseudo elements, add some content, position them however we like, and the 3D effect will already be there.It can be anything from simple outlines to more playful shapes. Like , for example:Notice that I am using the  selector to include the  here, too, but sometimes we will not want to target all the layers — only a specific portion of them. In that case, we can use  to select just part of the stack. For example, if I want to target only the bottom twelve layers (out of twenty four total), the decoration only covers half the height of the text. I can do something like  , and the full selector would be::is(span, .layer:nth-child(-n + 12))::before {
  /* pseudo style */
}This is especially useful when the decoration overlaps with the text, and you do not want to cover it or make it hard to read.Of course, you can animate these pseudo elements too. So how about a 3D “” text with a built-in spinner?I made a few changes to pull this off. First, I selected twelve layers from the middle of the stack using a slightly more advanced selector: .layer:nth-child(n + 6):nth-child(-n + 18). This targets the layers from number six to eighteen.Second, to fake the shadow, I added a blur filter to the ‘s pseudo element. This creates a nice soft effect, but it can cause performance issues in some cases, so use it with care.:is(span, .layer:nth-child(n + 6):nth-child(-n + 18))::before {
  /* spinner style */
}

span {
  /* span style */

  &::before {
    filter: blur(0.1em);
  }
}But you don’t have to use pseudo elements to add some visual interest. You can also style any text with a custom pattern using . Just select the top layer with the  selector, set its text color to  so the background shows through, and use ..layer {
  /* layer style */
    
  &:last-child {
    color: transparent;
    background-clip: text;
    background-image: ... /* use your imagination */
  }
}Here is a small demo using striped  with repeating-linear-gradient, and  made with repeating-radial-gradient:And, yes, you can absolutely use an  too:Let us take the previous idea a couple of steps further. Instead of applying a pattern just to the top layer, we will apply it to all the layers, creating a full 3D pattern effect. Then we will animate it.We’ll start with the colors. First, we give all the layers a  text color. The color we used before will now be stored in a custom property called , which we will use in just a moment..layer {
  --n: calc(var(--i) / var(--layers-count));
  --color: hsl(200 30% calc(var(--n) * 100%));

  color: transparent;
}Now let’s define the background, and we’ll say we want a moving  pattern. We can create it using  with two colors. The first will be our  variable, and the second could be . But in this case, I think black with very low opacity works better.We just need to set the  to control the pattern scale, and of course, make sure to apply  here too:.layer {
  --n: calc(var(--i) / var(--layers-count));
  --color: hsl(200 30% calc(var(--n) * 100%));

  color: transparent;
  background-image:
    repeating-conic-gradient(var(--color) 0 90deg, hsl(0 0% 0% / 5%) 0 180deg);
  background-size: 0.2em 0.2em;
  background-clip: text;
  transform: translateZ(calc(var(--i) * var(--layer-offset)));
  animation: checkers 24s infinite linear;
}

@keyframes checkers {
  to { background-position: 1em 0.4em; }
}As you can see, I have already added the  property. In this case, it is very simple to animate the pattern. Just slowly move the , and that is it. Now we have text with a moving 3D pattern:So far, we have been using a single font, and as I mentioned earlier, font choice is mostly a matter of taste or brand guidelines. But since we are already working with layered text, we absolutely have to try it with variable fonts. The idea behind variable fonts is that each one includes axes you can manipulate to change its appearance. These can include width, weight, slant, or just about anything else.Here are a few examples I really like. The first one uses the  font, which has a  axis that ranges from 1979 to 2025. With each year, the letters melt slightly and shrink a bit. It is a powerful ecological statement, and when you stack the text in layers, you can actually see the changes and get a pretty striking 3D effect:Another great option is , a variable font with a classic weight axis ranging from 100 to 900. By changing the weight based on the layer index, you get a layered effect that looks like peaks rising across the text:And here is an example that might give your browser a bit of a workout. The font  includes a  axis, and adjusting it completely changes the shape of each letter. So, I figured it would be fun to animate that axis (yes,  is animatable), and add a short delay between the layers, like we saw earlier, to give the animation a more dynamic and lively feel.Before we wrap up this second chapter, I want to show you one more animation. By now you have probably noticed that there is always more than one way to do things, and sometimes it is just a matter of finding the right approach. Even the positioning of the layers, which we have been handling statically with , can be done a little differently.If we animate the layers to move along the z-axis, from zero to the full height of the text, and add an equal delay between each one, we end up with the same visual 3D effect, only in motion..layer {
  --n: calc(var(--i) / var(--layers-count));
  --delay: calc(var(--n) * -3s);

  animation: layer 3s var(--delay) infinite ease-in-out;
}

@keyframes layer {
  from { transform: translateZ(0); }
  to { transform: translateZ(calc(var(--layers-count) * var(--layer-offset))); }
}This is a more advanced technique, suited for more complex animations. It is not something you need for every use case, but for certain effects, it can look very cool.So far, we have brought the layered text effect to life with movement, variation, and creative styling. We also saw how even small changes can have a huge visual impact when applied across layers.But everything we have done so far has been pre defined and self contained. In the next chapter, we are going to add a layer of interactivity. Literally. From simple  transitions to using JavaScript to track the mouse position, we will apply real-time transformations and build a fully responsive bulging effect.]]></content:encoded></item><item><title>Learning web development: Booleans, comparisons and if statements</title><link>https://2ality.com/2025/08/javascript-booleans-comparisons-if.html</link><author>Dr. Axel Rauschmayer</author><category>dev</category><category>frontend</category><category>blog</category><pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate><source url="https://feeds.feedburner.com/2ality">Axel Raushmayer</source><content:encoded><![CDATA[In this chapter, we learn about tools for only running a piece of code if a condition is met: truth values (booleans), comparisons and  statements.]]></content:encoded></item><item><title>This Week In React #246: Next.js, React Router, TanStack, StyleX, MUI, Storybook | FlashList 2, RN 0.81, Expo, Radon, Gesture Handler, Audio, Skia, Nitro, Strict DOM | TC39, Node, TypeScript, Astro, BIDC, Surveys</title><link>https://thisweekinreact.com/newsletter/246</link><author></author><category>frontend</category><pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate><source url="https://thisweekinreact.com/newsletter">This week in react</source><content:encoded><![CDATA[After a short summer break, we’re happy to say we’re back! I think we could open a public swimming pool because we’re drowning in the amount of content this week.This week was full of big releases: Vercel released Next.js 15.5, React Native 0.81 was launched, and last but not least, we finally have the long-awaited FlashList 2 with great performance and cool features.As always, thanks for supporting us on your favorite platform:Your data grid should do more than just render rows. Performance matters, but UX is where the real wins happen. When picking a React Data Grid, consider how users interact with it and what features will help them get things done. Ignite UI for React goes beyond the basics. It provides everything you need to build high-performance web apps with must-haves like:🔍 Advanced Filtering – Complex queries with AND/OR logic, no code required.💾 State Persistence – Save grid layouts, filters & sort state across sessions.⌨️ Keyboard Navigation – Faster workflows + built-in accessibility.📤 Export to Excel – Share filtered data in a click.📊 Pivot Grid – Analyze data without leaving your app.See how you can utilize these features and maximize the potential of your next React app.The new minor version of Next.js brings exciting improvements across many areas of the framework including: in middleware now marked as stableTurbopack for production builds in betaTyped Routes for type-safe navigationDeprecation of  in order to provide Biome as a fast alternative to ESLintNext.js 16 deprecation warningsDiscover a new perspective on building full-stack web applications with  and . A hands-on course that teaches you how to build real-world SaaS applications, including payment gateways, message queues, database inspectors, and email servers.Learn a cutting-edge stack with  and  from bestselling book author and blogger .FlashList v2 is a complete rewrite that eliminates the need for developers to provide item size estimates, a major limitation of v1. Thanks to React Native's New Architecture, which enables synchronous layout measurements, FlashList v2 can precisely calculate and correct item positions before they are painted on the screen. This new approach removes the need for native code and delivers pixel-perfect scrolling, improves performance with an adaptive rendering algorithm, and enables advanced features like automatic scroll position maintenance. Also, FlashList v2 comes with masonry layout support built-in.React Native version 0.81 introduces support for the new Android 16, which enforces  display requirements. A major new experimental feature is precompiled builds for iOS, promising significantly faster compilation times. Since this version the built-in  component is deprecated and they moved JSC runtime support out to a community-maintained package.]]></content:encoded></item><item><title>Launching MDN&apos;s new front end</title><link>https://developer.mozilla.org/en-US/blog/launching-new-front-end/</link><author>mdn-team</author><category>dev</category><category>official</category><category>frontend</category><enclosure url="https://developer.mozilla.org/en-US/blog/launching-new-front-end/featured.png" length="" type=""/><pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate><source url="https://developer.mozilla.org/en-US/blog/">MDN Blog</source><content:encoded><![CDATA[MDN is getting a facelift 🎉. Discover what's changed, what's improved, and how navigating the site just got smoother.
]]></content:encoded></item><item><title>3D Layered Text: The Basics</title><link>https://css-tricks.com/3d-layered-text-the-basics/</link><author>Amit Sheen</author><category>frontend</category><enclosure url="https://css-tricks.com/wp-content/uploads/2025/07/Bulging-Text.mp4" length="" type=""/><pubDate>Mon, 18 Aug 2025 13:46:00 +0000</pubDate><source url="https://css-tricks.com/">CSS Tricks blog</source><content:encoded><![CDATA[Recently, a client asked me to create a bulging text effect. These are exactly the kinds of creative challenges I live for. I explored several directions, JavaScript solutions, SVG filters, but then I remembered the concept of 3D layered text. With a bit of cleverness and some advanced CSS, I managed to get a result I’m genuinely proud of.Visually, it’s striking, and it’s also a perfect project to learn all sorts of valuable CSS animation techniques. From the fundamentals of layering, through element indexing, to advanced background-image tricks. And yes, we’ll use a touch of JavaScript, but don’t worry about it right now.There is a lot to explore here, so this article is actually the first of a three part series. In this chapter, we will focus on the core technique. You will learn how to build the layered 3D text effect from scratch using HTML and CSS. We will cover structure, stacking, indexing, perspective, and how to make it all come together visually.In chapter two, we will add movement. Animations, transitions, and clever visual variations that bring the layers to life.In chapter three, we will introduce JavaScript to follow the mouse position and build a fully interactive version of the effect. This will be the complete bulging text example that inspired the entire series.Before we dive into the text, let’s talk about 3D. CSS actually allows you to create some wild three-dimensional effects. Trust me, I’ve done it. It’s pretty straightforward to move and position elements in a 3D space, and have full control over perspective. But there’s one thing CSS doesn’t give us: depth.If I want to build a cube, I can’t just give an element a , a , and a . There is no , it doesn’t work that way. To build a cube or any other 3D structure in CSS, we have two main approaches: constructive and layered.The constructive method is very powerful, but can feel a bit fiddly, with plenty of transforms and careful attention to perspective. You take a bunch of flat elements and assemble them together, somewhere between digital Lego bricks and origami. Each side of the shape gets its own element, positioned and rotated precisely in the 3D space. Suddenly, you have a cube, a pyramid, or any other structure you want to create.And the results can be super satisfying. There’s something unique about assembling 3D objects piece by piece, watching flat elements transform into something with real presence. The constructive method opens up a world where you can experiment, improvise, and invent new forms. You could even, for example, build a cute robot bouncing on a pogo stick.But here we’re going to focus on the layered method. This approach isn’t about building a 3D object out of sides or polygons. Instead, it’s all about stacking multiple layers, sometimes dozens of them, and using subtle shifts in position and color to create the illusion of depth. You’re tricking the eye into seeing volume and bulges where there’s really just a clever pile of flat elements.This technique is super flexible. Think of a cube of sticky memo papers, but instead of squares, the papers are cut to shape your design. It’s perfect for text, 3D shapes, and UI elements, especially with round edges, and you can push it as far as your creativity (and patience) will take you. Keep in mind that this method can easily become a nightmare for screen reader users, especially when applied to text. Make sure to wrap all additional and decorative layers with . That way, your creative effects won’t interfere with accessibility and ensure that people using assistive technologies can still have a good experience.Creating a 3D Layered TextLet’s kick things off with a basic static example, using “lorem ipsum” as a placeholder (feel free to use any text you want). We’ll start with a simple container element with a class of . Inside, we’ll put the original text in a  (it will help later when we want to style this text separately from the layered copies), and another div with a class of “layers” where we’ll soon add the individual layers. (And don’t forget the .)<div class="text">
  <span>Lorem ipsum</span>
  <div class="layers" aria-hidden="true"></div>
</div>Now that we have our wrapper in place, we can start building out the layers themselves. In chapter three, we will see how to build the layers dynamically with JavaScript, but you can generate them easily with a simple loop in your preprocessor (if you are using one), or just add them manually in the code. Check out the  below for a quick way to do that. The important thing is that we end up with something that looks like this.<div class="layers" aria-hidden="true">
  <div class="layer"></div>
  <div class="layer"></div>
  <div class="layer"></div>
  <!-- ...More layers -->
</div>Great, now we have our layers, but they are still empty. Before we add any content, let’s quickly cover how to assign their indexes.Indexing simply means assigning each layer a variable (let’s call it ) that holds its index. So, the first layer gets , the second gets , and so on. We’ll use these numbers later on as values for calculating each layer’s position and appearance.There are a couple of ways to add these variables to your layers. You can define the value for each layer using  in CSS, (again, a simple loop in your preprocessor, if you’re using one), or you can do it inline, giving each layer element a  attribute with the right  value..layer {
  &:nth-child(1): { --i: 1; }
  &:nth-child(2): { --i: 2; }
  &:nth-child(3): { --i: 3; }
  /* ... More layers */
}<div class="layers" aria-hidden="true">
  <div class="layer" style="--i: 1;"></div>
  <div class="layer" style="--i: 2;"></div>
  <div class="layer" style="--i: 3;"></div>
  <!-- ...More layers -->
</div>In this example, we will go with the inline approach. It gives us full control, keeps things easy to understand, and avoids dependency between the markup and the stylesheet. It also makes the examples copy friendly, which is great if you want to try things out quickly or tweak the markup directly. If you’re working in an IDE with Emmet support, you can generate all your layers at once by typing .layer*24[style="--i: $;"] and pressing . The  is your class,  is the number of elements, attributes go in square brackets , and  is the incrementing number. But, If you’re reading this in the not-so-distant future, you might be able to use  and not even need these tricks. In that case, you won’t need to add variables to your elements at all, just swap out  for  in the next code examples.Now let us talk about adding content to the layers. Each layer needs to contain the original text. There are a few ways to do this. In the next chapter, we will see how to handle this with JavaScript, but if you are looking for a CSS-only dynamic solution, you can add the text as the content of one of the layer’s pseudo elements. This way, you only need to define the text in a single variable, which makes it a great fit for titles, short labels, or anything that might change dynamically..layer {
  --text: "Lorem ipsum";
  
  &::before {
    content: var(--text);
  }
}The downside, of course, is that we are creating extra elements, and I personally prefer to save pseudo elements for decorative purposes, like the border effect we saw earlier. We will look at more examples of that in the next chapter.A better, more straightforward approach is to simply place the text inside each layer. The downside to this method is that if you want to change the text, you will have to update it in every single layer. But since in this case the example is static and I do not plan on changing the text, we will simply use Emmet, putting the text inside curly braces .So, we will type .layers*24[style="--i: $;"]{Lorem ipsum} and press  to generate the layers.<div class="text">
  Lorem ipsum
  <div class="layers" aria-hidden="true">
    <div class="layer" style="--i: 1;">Lorem ipsum</div>
    <div class="layer" style="--i: 2;">Lorem ipsum</div>
    <div class="layer" style="--i: 3;">Lorem ipsum</div>
    <!-- ...More layers -->
  </div>
</div>Now we can start working on the styling and positioning. The first thing we need to do is make sure all the layers are stacked in the same place. There are a few ways to do this as well , but I think the easiest approach is to use  with  on the  and on each , making sure every layer matches the container’s size exactly. Of course, we’ll set the container to  so that all the layers are positioned relative to it..text {
  position: relative;

  .layers, .layer {
    position: absolute;
    inset: 0;
  }
}Now comes the part that trips some people up, adding perspective. To give the text some depth, we’re going to move each layer along the z-axis, and to actually see this effect, we need to add a bit of perspective.As with everything so far, there are a few ways to do this. You could give perspective to each layer individually using the  function, but my recommendation is always to apply perspective at the parent level. Just wrap the element (or elements) you want to bring into the 3D world inside a wrapper div (here I’m using ) and apply the perspective to that wrapper.After setting the perspective on the parent, you’ll also need to use transform-style: preserve-3d; on each child of the . Without this, browsers flatten all transformed children into a single plane, causing any z-axis movement to be ignored and everything to look flat. Setting  ensures that each layer’s 3D position is maintained inside the parent’s 3D context, which is crucial for the depth effect to come through..scene {
  perspective: 400px;
  
  * {
    transform-style: preserve-3d;
  }
}In this example, I’m using a fairly low value for the , but you should definitely play around with it to suit your own design. This value represents the distance between the viewer and the object, which directly affects how much depth we see in the transformed layers. A smaller value creates a stronger, more exaggerated 3D effect, while a larger value makes the scene appear flatter. This property is what lets us actually see the z-axis movement in action.Now we can move the layers along the z-axis, and this is where we start using the index values we defined earlier. Let’s start by defining two custom properties that we’ll use in a moment: , which holds the number of layers, and , which is the spacing between each layer..text {
  --layers-count: 24;
  --layer-offset: 1px;
}Now let’s set the  value for each layer. We already have the layer’s index and the spacing between layers, so all we need to do is multiply them together inside the  property..layer {  
  transform: translateZ(calc(var(--i) * var(--layer-offset)));
}This feels like a good moment to stop and look at what we have so far. We created the layers, stacked them on top of each other, added some content, and moved them along the z-axis to give them depth. And this is where we’re at:If you really try, and focus hard enough, you might see something that kind of looks like 3D. But let’s be honest, it does not look good. To create a real sense of depth, we need to bring in some color, add a bit of shadow, and maybe rotate things a bit for a more dynamic perspective.Sometimes we might want (or need) to use the value of  as is, like in the last snippet, but for some calculations, it’s often better to  the value. This means dividing the index by the total number of layers, so we end up with a value that ranges from  to . By normalizing, we keep our calculations flexible and proportional, so the effect remains balanced even if the number of layers changes..layer {
  --n: calc(var(--i) / var(--layers-count));
}Now we can adjust the color for each layer, or more precisely, the brightness of the color. We’ll use the normalized value on the ‘light’ of a simple HSL function, and add a touch of saturation with a bluish hue..layer {
  color: hsl(200 30% calc(var(--n) * 100%));
}Gradually changing the brightness between layers helps create a stronger sense of depth in the text. And without it, you risk losing some of the finer detailsSecond, remember that we wrapped the original text in a  so we could style it? Now is the time to use it. Since this text sits on the bottom layer, we want to give it a darker color than the rest. Black works well here, and in most cases, although in the next chapter we will look at examples where it actually needs to be .span {
  color: black;
  text-shadow: 0 0 0.1em #003;
}Before we wrap this up, let us change the font. This is of course a matter of personal taste or brand guidelines. In my case, I am going with a bold, chunky font that works well for most of the examples. You should feel free to use whatever font fits your style.Let us also add a slight rotation to the text, maybe on the x-axis, so the lettering appears at a better angle:.text {
  font-family: Montserrat, sans-serif;
  font-weight: 900;
  transform: rotateX(30deg);
}And there you have it, combining all the elements we’ve covered so far: the layers, indexes, content, perspective, positioning, and lighting. The result is a beautiful, three-dimensional text effect. It may be static for now, but we’ll take care of that soon.At this point, we have a solid 3D text effect built entirely with HTML and CSS. We covered everything from structure and indexing to layering, depth, and color. It may still be static, but the foundation is strong and ready for more.In the next chapters, we are going to turn things up. We will add motion, introduce transitions, and explore creative ways to push this effect further. This is where it really starts to come alive.]]></content:encoded></item><item><title>Learning web development: Arrays in JavaScript</title><link>https://2ality.com/2025/08/javascript-arrays.html</link><author>Dr. Axel Rauschmayer</author><category>dev</category><category>frontend</category><category>blog</category><pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate><source url="https://feeds.feedburner.com/2ality">Axel Raushmayer</source><content:encoded><![CDATA[In this chapter we look at one way of storing more than one value in a variable: .]]></content:encoded></item><item><title>Learning web development: Strings and methods in JavaScript</title><link>https://2ality.com/2025/08/javascript-strings-methods.html</link><author>Dr. Axel Rauschmayer</author><category>dev</category><category>frontend</category><category>blog</category><pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate><source url="https://feeds.feedburner.com/2ality">Axel Raushmayer</source><content:encoded><![CDATA[In the last chapter, we worked with numbers. In this chapter, we’ll work with text and write our first applications.]]></content:encoded></item></channel></rss>