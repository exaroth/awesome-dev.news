<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>JS/Frontend</title><link>https://www.awesome-dev.news</link><description></description><item><title>TypeScript and JavaScript dominate on GitHub in 2025</title><link>https://javascriptweekly.com/issues/759</link><author></author><category>dev</category><category>frontend</category><pubDate>Fri, 31 Oct 2025 00:00:00 +0000</pubDate><source url="https://javascriptweekly.com/">Javascript Weekly</source><content:encoded><![CDATA[SpreadJS from MESCIUS inc ]]></content:encoded></item><item><title>Getting Creative With Small Screens</title><link>https://css-tricks.com/getting-creative-with-small-screens/</link><author>Andy Clarke</author><category>frontend</category><pubDate>Wed, 29 Oct 2025 16:22:28 +0000</pubDate><source url="https://css-tricks.com/">CSS Tricks blog</source><content:encoded><![CDATA[Over the past few months, I’ve explored how we can get creative using well-supported CSS properties. Each article is intended to nudge web design away from uniformity, toward designs that are more distinctive and memorable. One bit of feedback from Phillip Bagleg deserves a follow up:Andy’s guides are all very interesting, but mostly impractical in real life. Very little guidance on how magazine style design, works when thrown into a responsive environment.Fair point well made, Phillip. So, let’s bust the myth that editorial-style web design is impractical on small screens.: Patty Meltt is an up-and-coming country music sensation, and she needed a website to launch her new album and tour. She wanted it to be distinctive-looking and memorable, so she called Stuff & Nonsense. Patty’s not real, but the challenges of designing and developing sites like hers are.The problem with endless columnsOn mobile, people can lose their sense of context and can’t easily tell where a section begins or ends. Good small-screen design can help orient them using a variety of techniques.When screen space is tight, most designers collapse their layouts into a single long column. That’s fine for readability, but it can negatively impact the user experience when hierarchy disappears; rhythm becomes monotonous, and content scrolls endlessly until it blurs. Then, nothing stands out, and pages turn from being designed experiences into content feeds.Like a magazine, layout delivers visual cues in a desktop environment, letting people know where they are and suggesting where to go next. This rhythm and structure can be as much a part of visual storytelling as colour and typography.But those cues frequently disappear on small screens. Since we can’t rely on complex columns, how can we design visual cues that help readers feel oriented within the content flow and stay engaged? One answer is to stop thinking in terms of one long column of content altogether. Instead, treat each section as a distinct composition, a designed moment that guides readers through the story.Designing moments instead of columnsEven within a narrow column, you can add variety and reduce monotony by thinking of content as a series of meaningfully designed moments, each with distinctive behaviours and styles. We might use alternative compositions and sizes, arrange elements using different patterns, or use horizontal and vertical scrolling to create experiences and tell stories, even when space is limited. And fortunately, we have the tools we need to do that at our disposal:These moments might move horizontally, breaking the monotony of vertical scrolling, giving a section its own rhythm, and keeping related content together.My desktop design for Patty’s discography includes her album covers arranged in a modular grid. Layouts like these are easy to achieve using my modular grid generator.But that arrangement isn’t necessarily going to work for small screens, where a practical solution is to transform the modular grid into a horizontal scrolling element. Scrolling horizontally is a familiar behaviour and a way to give grouped content its own stage, the way a magazine spread might.I started by defining the modular grid’s parent — in this case, the imaginatively named  — as a container:.modular-wrap {
  container-type: inline-size;
  width: 100%;
}Then, I added grid styles to create the modular layout:.modular {
  display: grid;
  gap: 1.5rem;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 1fr);
  overflow-x: visible;
  width: 100%;
}It would be tempting to collapse those grid modules on small screens into a single column, but that would simply stack one album on top of another.So instead, I used a container query to arrange the album covers horizontally and enable someone to scroll across them:@container (max-width: 30rem) {
  #example-1 .modular {
    display: grid;
    gap: 1.5rem;
    grid-auto-columns: minmax(70%, 1fr);
    grid-auto-flow: column;
    grid-template-columns: none;
    grid-template-rows: 1fr;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }
}Now, Patty’s album covers are arranged horizontally rather than vertically, which forms a cohesive component while preventing people from losing their place within the overall flow of content.Last time, I explained how to use  and create the illusion of text flowing around both sides of an image. You’ll often see this effect in magazines, but hardly ever online.Desktop displays have plenty of space available, but what about smaller ones? Well, I could remove  altogether, but if I did, I’d also lose much of this design’s personality and its effect on visual storytelling. Instead, I can retain  and place it inside a horizontally scrolling component where some of its content is off-canvas and outside the viewport.My content is split between two divisions: the first with half the image floating right, and the second with the other half floating left. The two images join to create the illusion of a single image at the centre of the design:<div class="content">
  <div>
  <img src="img-left.webp" alt="">
  <p><!-- ... --></p>
  </div>

<div>
  <img src="img-right.webp" alt="">
  <p><!-- ... --></p>
  </div>
</div>I knew this implementation would require a container query because I needed a parent element whose width determines when the layout should switch from static to scrolling. So, I added a  outside that content so that I could reference its width for determining when its contents should change:<section>
  <div class="content">
    <!-- ... -->
  </div>
</section>section {
  container-type: inline-size;
  overflow-x: auto;
  position: relative;
  width: 100%;
}My technique involves spreading content across two equal-width divisions, and these grid column properties will apply to every screen size:.content {
  display: grid;
  gap: 0;
  grid-template-columns: 1fr 1fr;
  width: 100%;
}Then, when the section’s width is below , I altered the width of my two columns:@container (max-width: 48rem) {
  .content {
    grid-template-columns: 85vw 85vw;
  }
}Setting the width of each column to 85% — a little under viewport width — makes some of the right-hand column’s content visible, which hints that there’s more to see and encourages someone to scroll across to look at it.The same principle works at a larger scale, too. Instead of making small adjustments, we can turn an entire section into a miniature magazine spread that scrolls like a story in print.When designing for a responsive environment, there’s no reason to lose the expressiveness of a magazine-inspired layout. Instead of flattening everything into one long column, sections can behave like self-contained mini magazine spreads.My final  example flowed text between two photomontages. Parts of those images escaped their containers, creating depth and a layout with a distinctly editorial feel. My content contained the two images and several paragraphs:<div class="content">
  <img src="left.webp" alt="">
  <img src="right.webp" alt="">
  <p><!-- ... --></p>
  <p><!-- ... --></p>
  <p><!-- ... --></p>
</div>Two images float either left or right, each with  applied so text flows between them:.content img:nth-of-type(1) {
  float: left;
  width: 45%;
  shape-outside: url("left.webp");
}

.spread-wrap .content img:nth-of-type(2) {
  float: right;
  width: 35%;
  shape-outside: url("right.webp");
}That behaves beautifully at large screen sizes, but on smaller ones it feels cramped. To preserve the design’s essence, I used a container query to transform its layout into something different altogether.First, I needed another parent element whose width would determine when the layout should change. So, I added a  outside so that I could reference its width and gave it a little  and a border to help differentiate it from nearby content:<section>
  <div class="content">
    <!-- ... -->
  </div>
</section>section {
  border: 1px solid var(--border-stroke-color);
  box-sizing: border-box;
  container-type: inline-size;
  overflow-x: auto;
  padding: 1.5rem;
  width: 100%;
}When the section’s width is below , I introduced a horizontal Flexbox layout:@container (max-width: 48rem) {
  .content {
    align-items: center;
    display: flex;
    flex-wrap: nowrap;
    gap: 1.5rem;
    scroll-snap-type: x mandatory;
    -webkit-overflow-scrolling: touch;
  }
}And because this layout depends on a container query, I used container query units () for the width of my flexible columns:.content > * {
  flex: 0 0 85cqi;
  min-width: 85cqi;
  scroll-snap-align: start;
}Now, on small screens, the layout flows from image to paragraphs to image, with each element snapping into place as someone swipes sideways. This approach rearranges elements and, in doing so, slows someone’s reading speed by making each swipe an intentional action.To prevent my images from distorting when flexed, I applied auto-height combined with :.content img {
  display: block;
  flex-shrink: 0;
  float: none;
  height: auto;
  max-width: 100%;
  object-fit: contain;
}Before calling on the Flexbox  property to place the second image at the end of my small screen sequence:.content img:nth-of-type(2) {
  order: 100;
}Mini-spreads like this add movement and rhythm, but orientation offers another way to shift perspective without scrolling. A simple rotation can become a cue for an entirely new composition.Make orientation-responsive layoutsWhen someone rotates their phone, that shift in orientation can become a cue for a new layout. Instead of stretching a single-column design wider, we can recompose it entirely, making a landscape orientation feel like a fresh new spread.Turning a phone sideways is an opportunity to recompose a layout, not just reflow it. When Patty’s fans rotate their phones to landscape, I don’t want the same stacked layout to simply stretch wider. Instead, I want to use that additional width to provide a different experience. This could be as easy as adding extra columns to a composition in a media query that’s applied when the device’s  is detected in :@media (orientation: landscape) {
  .content {
    display: grid;
    grid-template-columns: 1fr 1fr;
  }
}For the long-form content on Patty Meltt’s biography page, text flows around a polygon  placed over a large faux background image. This image is inline, floated, and has its width set to 100%:<div class="content">
  <img src="patty.webp" alt="">
  <!-- ... -->
</div>.content > img {
  float: left;
  width: 100%;
  max-width: 100%;
}Then, I added  using the polygon coordinates and added a :.content > img {
  shape-outside: polygon(...);
  shape-margin: 1.5rem;
}I only want the text to flow around the polygon and for the image to appear in the background when a device is held in landscape, so I wrapped that rule in a query which detects the screen orientation:@media (orientation: landscape) {
  .content > img {
    float: left;
    width: 100%;
    max-width: 100%;
    shape-outside: polygon(...);
    shape-margin: 1.5rem;
  }
}Those properties won’t apply when the viewport is in portrait mode.Design stories that adapt, not layouts that collapseSmall screens don’t make design more difficult; they make it more deliberate, requiring designers to consider how to preserve a design’s personality when space is limited.Phillip was right to ask how editorial-style design can work in a responsive environment. It does, but not by shrinking a print layout. It works when we think differently about how content flexes, shifts, and scrolls, and when a design responds not just to a device, but to how someone holds it.The goal isn’t to mimic miniature magazines on mobile, but to capture their energy, rhythm, and sense of discovery that print does so well. Design is storytelling, and just because there’s less space to tell one, it shouldn’t mean it should make any less impact.]]></content:encoded></item><item><title>This Week In React #256: Next.js, directives, TanStack, Storybook, Waku, shadcn, Rari, Astro | Navigation, EAS, Expo Modules, Gesture Handler, Screens, Nitro, IAP | ArkType, Biome, Svelte, Hono</title><link>https://thisweekinreact.com/newsletter/256</link><author></author><category>frontend</category><pubDate>Wed, 29 Oct 2025 00:00:00 +0000</pubDate><source url="https://thisweekinreact.com/newsletter">This week in react</source><content:encoded><![CDATA[Hi everyone! Filip and Krzysztof from Software Mansion here! 👋This edition is special for at least four reasons:It's a very rounded anniversary edition - issue  - let's hope our counter can hold more than 8 bits 🤞This is the first newsletter issue for Filip, who is improving React Native DX by developing Radon IDE.It was a great week, with a lot of excellent content emerging from the Next.js conf in the React world.React Native isn't far behind, as this week saw some cool stuff released, including updates for React Navigation, Uniwind, React Native Screens, and more.That's more than enough reasons to jump straight into the content - enjoy the reading!As always, thanks for supporting us on your favorite platform:Stop wasting time fighting your i18n keys. 😫 Crowdin is the perfect, automated l10n solution built for React developers – whether you're an individual or a startup.The days of manually providing context are over: Our open-source CLI uses Agentic AI to  and automatically attach usage context to every string. It knows if "Close" is a button, a component name, or a modal title. No more guesswork for the AI. 🤯 With that precise context, our pre-translation engine delivers production-ready strings instantly. Connect Crowdin directly to your repo. Localization becomes a simple, continuous part of your CI/CD pipeline.Launch a multilingual app without breaking a sweat. Focus on features, not fighting files🚀Next.js conf was the main event of last week, with a keynote highlighting newly released Next.js features, in particular:Turbopack as the new default bundler, including beta support for file-system cachingThe Adapters API to interface Next.js with hosting platforms, built in collaboration with various partners and Vercel competitorsCache Components: new fancy name of Partial Pre-Rendering, with more explicit APIsLet's take a step back to explore this new flagship Cache Components feature. It is a new opt-in flag to turn on that lets you implement the Partial Pre-Rendering pattern. The goal is to keep your app/page shells static so that navigation feels instant. It nudges you to move dynamic (, ...) and async calls (, DB access) within a  boundary so that the page shell remains static and fast, while the dynamic/slow parts can stream into it. And when you really want to include an async component in the static shell, a new  directive to turn it into a Cache Component that lets Next.js pre-render it statically. Turning this feature on also enables a back/forward navigation cache powered by the new  component. This new mode offers a more composable, explicit and granular caching model, compared to the previous model based on route-level controls and aggressive implicit caching by default.This event also led to various discussions in the community, following the introduction of parametrized directives ( / ), and the introduction of a Vercel  directive the next day. Many developers argue it’s dangerous to use strings and would prefer function decorators or explicit typesafe API calls. We still need to think about it before making up our minds and taking a side, but here are some related links worth checking out:Stop shipping preventable bugs. Sentry AI Code Review brings error and performance context into your PR to catch bugs before they break prod.🧑‍💻Automated detection of bugs, risks, and regressionsActionable insights, not distracting noiseTighter feedback loops for faster mergesContext-aware checks tied to real Sentry dataLess time debugging, more time building]]></content:encoded></item><item><title>Pure CSS Tabs With Details, Grid, and Subgrid</title><link>https://css-tricks.com/pure-css-tabs-with-details-grid-and-subgrid/</link><author>Silvestar Bistrović</author><category>frontend</category><enclosure url="https://css-tricks.com/wp-content/uploads/2025/10/issues.mp4" length="" type=""/><pubDate>Mon, 27 Oct 2025 14:33:17 +0000</pubDate><source url="https://css-tricks.com/">CSS Tricks blog</source><content:encoded><![CDATA[Making a tab interface with CSS is a never-ending topic in the world of modern web development. Are they possible? If yes, could they be accessible? I wrote how to build them the first time nine long years ago, and how tointegrate accessible practices into them.Although my solution then could  still be applied today, I’ve landed on a more modern approach to CSS tabs using the  element in combination with CSS Grid and Subgrid.Let’s start by setting up the HTML structure. We will need a set of  elements inside a parent wrapper that we’ll call . Each  will be an  as you might imagine each one being a tab in the interface.<div class="grid">
  <!-- First tab: set to open -->
  <details class="item" name="alpha" open>
    <summary class="subitem">First item</summary>
    <div><!-- etc. --></div>
  </details>
  <details class="item" name="alpha">
    <summary class="subitem">Second item</summary>
    <div><!-- etc. --></div>
  </details>
  <details class="item" name="alpha">
    <summary class="subitem">Third item</summary>
    <div><!-- etc. --></div>
  </details>
</div>These don’t look like true tabs yet! But it’s the right structure we want before we get into CSS, where we’ll put CSS Grid and Subgrid to work.Let’s set up the grid for our wrapper element using — you guessed it — CSS Grid. Basically what we’re making is a three-column grid, one column for each tab (or ), with a bit of spacing between them.We’ll also set up two rows in the , one that’s sized to the content and one that maintains its proportion with the available space. The first row will hold our tabs and the second row is reserved for the displaying the active tab panel..grid {
  display: grid;
  grid-template-columns: repeat(3, minmax(200px, 1fr));
  grid-template-rows: auto 1fr;
  column-gap: 1rem;
}Now we’re looking a little more tab-like:Next, we need to set up the subgrid for our tab elements. We want subgrid because it allows us to use the existing  lines without nesting an entirely new grid with new lines. Everything aligns nicely this way.So, we’ll set each tab — the  elements — up as a grid and set their columns and rows to inherit the main ‘s lines with .details {
  display: grid;
  grid-template-columns: subgrid;
  grid-template-rows: subgrid;
}Additionally, we want each tab element to fill the entire , so we set it up so that the  element takes up the entire available space horizontally and vertically using the  and  properties:details {
  display: grid;
  grid-template-columns: subgrid;
  grid-template-rows: subgrid;
  grid-column: 1 / -1;
  grid-row: 1 / span 3;
}It looks a little wonky at first because the three tabs are stacked right on top of each other, but they cover the entire  which is exactly what we want.Next, we will place the tab panel content in the second row of the subgrid and stretch it across all three columns. We’re using  (good support, but not yet in WebKit at the time of writing) to target the panel content, which is nice because that means we don’t need to set up another wrapper in the markup simply for that purpose.details::details-content {
  grid-row: 2; /* position in the second row */
  grid-column: 1 / -1; /* cover all three columns */
  padding: 1rem;
  border-bottom: 2px solid dodgerblue;
}The thing about a tabbed interface is that we only want to show one open tab panel at a time. Thankfully, we can select the  state of the  elements and hide the  of any tab that is by using enabling selectors:details:not([open])::details-content {
  display: none;
}We still have overlapping tabs, but the only tab panel we’re displaying is currently open, which cleans things up quite a bit:Turning  into tabsNow on to the fun stuff! Right now, all of our tabs are visually stacked. We want to spread those out and distribute them evenly along the ‘s top row. Each  element contains a  providing both the tab label and button that toggles each one open and closed.Let’s place the  element in the first subgrid row and add apply light styling when a  tab is in an  state:summary {
  grid-row: 1; /* First subgrid row */
  display: grid;
  padding: 1rem; /* Some breathing room */
  border-bottom: 2px solid dodgerblue;
  cursor: pointer; /* Update the cursor when hovered */
}

/* Style the <summary> element when <details> is [open] */
details[open] summary {
  font-weight: bold;
}Our tabs are still stacked, but how we have some light styles applied when a tab is open:We’re almost there! The last thing is to position the  elements in the subgrid’s columns so they are no longer blocking each other. We’ll use the  pseudo to select each one individually by their order in the HTML:/* First item in first column */
details:nth-of-type(1) summary {
  grid-column: 1 / span 1;
}
/* Second item in second column */
details:nth-of-type(2) summary {
  grid-column: 2 / span 1;
}
/* Third item in third column */
details:nth-of-type(3) summary {
  grid-column: 3 / span 1;
}Check that out! The tabs are evenly distributed along the subgrid’s top row:Unfortunately, we can’t use loops in CSS (yet!), but we can use variables to keep our styles DRY:summary {
  grid-column: var(--n) / span 1;
}Now we need to set the  variable for each  element. I like to inline the variables directly in HTML and use them as hooks for styling:<div class="grid">
  <details class="item" name="alpha" open style="--n: 1">
    <summary class="subitem">First item</summary>
    <div><!-- etc. --></div>
  </details>
  <details class="item" name="alpha" style="--n: 2">
    <summary class="subitem">Second item</summary>
    <div><!-- etc. --></div>
  </details>
  <details class="item" name="alpha" style="--n: 3">
    <summary class="subitem">Third item</summary>
    <div><!-- etc. --></div>
  </details>
</div>Again, because loops aren’t a thing in CSS at the moment, I tend to reach for a templating language, specifically Liquid, to get some looping action. This way, there’s no need to explicitly write the HTML for each tab:{% for item in itemList %}
  <div class="grid">
    <details class="item" name="alpha" style="--n: {{ forloop.index }}" {% if forloop.first %}open{% endif %}>
      <!-- etc. -->
    </details>
  </div>
{% endfor %}You can roll with a different templating language, of course. There are plenty out there if you like keeping things concise!OK, I lied. There’s  we ought to do. Right now, you can click only on the last  element because all of the  pieces are stacked on top of each other in a way where the last one is on top of the stack.You might have already guessed it: we need to put our  elements on top by setting .summary {
  z-index: 1;
}Here’s the full working demo:The  element includes built-in accessibility features, such as keyboard navigation and screen reader support, for both expanded and collapsed states. I’m sure we could make it even better, but it might be a topic for another article. I’d love some feedback in the comments to help cover as many bases as possible.It’s 2025, and we can create tabs with HTML and CSS only without any hacks. I don’t know about you, but this developer is happy today, even if we still need a little patience for browsers to fully support these features.]]></content:encoded></item><item><title>[Web dev for beginners] Node.js</title><link>https://2ality.com/2025/10/nodejs.html</link><author>Dr. Axel Rauschmayer</author><category>dev</category><category>frontend</category><category>blog</category><pubDate>Mon, 27 Oct 2025 00:00:00 +0000</pubDate><source url="https://feeds.feedburner.com/2ality">Axel Raushmayer</source><content:encoded><![CDATA[ is a program that lets us run JavaScript code outside browsers – which we can use for a variety of things.]]></content:encoded></item><item><title>[Web dev for beginners] Shells</title><link>https://2ality.com/2025/10/shells.html</link><author>Dr. Axel Rauschmayer</author><category>dev</category><category>frontend</category><category>blog</category><pubDate>Sun, 26 Oct 2025 00:00:00 +0000</pubDate><source url="https://feeds.feedburner.com/2ality">Axel Raushmayer</source><content:encoded><![CDATA[A  provides a text-based way of interacting with the operating system. In this chapter, we explore how shells work and why we need them for web development.]]></content:encoded></item></channel></rss>