<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>DevOps</title><link>https://www.awesome-dev.news</link><description></description><item><title>Platform Engineering Day 2: Why Service Iterations Are the Crux of Developer Platfor... Puja Abbassi</title><link>https://www.youtube.com/watch?v=Xr0Eb-ybvck</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/Xr0Eb-ybvck?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 20:32:44 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Platform Engineering Day 2: Why Service Iterations Are the Crux of Developer Platforms - Puja Abbassi, Giant Swarm

Everyone is talking about platform engineering. You see smooth demos of golden paths and self-service platforms. However, there’s a significant area of challenges that is less talked about and thus often neglected when designing developer platforms.

In this talk, we’ll explore the often-overlooked day 2 challenges that platform teams face. We’ll dissect the area of day 2 into the many sub-areas and challenges they pose. Drawing on real-world experiences, including notable migrations that many in this community have faced, we'll shed light on the pain behind developer platforms and discuss solutions to these issues. Among others, we’ll delve into practical strategies for managing versioning and rollouts, and highlight the significant hurdles encountered, such as dependencies on end user teams or GitOps.

Join us for insights, strategies, and stories from the trenches that will help you navigate the complexities of service iteration in developer platforms.]]></content:encoded></item><item><title>Keynote: OpenTelemetry And The Future of Open Source Observability - Austin Parker, Honeycomb</title><link>https://www.youtube.com/watch?v=hERRANApN5c</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/hERRANApN5c?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:35:24 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Keynote: OpenTelemetry And The Future of Open Source Observability - Austin Parker, Honeycomb]]></content:encoded></item><item><title>Sponsored Keynote: Why Semantic Conventions are OpenTelemetry’s Most Important Con... Gordon Radlein</title><link>https://www.youtube.com/watch?v=dlDTX-aDNzg</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/dlDTX-aDNzg?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:35:24 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Sponsored Keynote: Why Semantic Conventions are OpenTelemetry’s Most Important Contribution - Gordon Radlein, Datadog

OpenTelemetry has accelerated the commoditization of instrumentation. Telemetry generation is becoming a solved problem, an implementation detail. But this has created a new challenge: a wealth of standardized signals with no standard meaning. Different systems instrumented with different semantics generating telemetry in their own unique language. And while signal correlation connects specific workloads, it fails when we need to understand our systems at a macro scale by joining disparate datasets.
That is, until we all agreed to speak the same language.

Just as English as a lingua franca fueled progress across the internet, OpenTelemetry Semantic Conventions are providing a shared language for our systems. In this talk we’ll discuss why semantic interoperability is the real connective tissue, how it’s fueling deeper insights into our production environments, and the key role it plays in enabling the AI systems that are rapidly ushering in the next revolution of our industry.]]></content:encoded></item><item><title>Welcome + Opening Remarks - Austin Parker, Honeycomb</title><link>https://www.youtube.com/watch?v=_rqgWHaEvgc</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/_rqgWHaEvgc?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:35:24 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Welcome + Opening Remarks - Austin Parker, Honeycomb]]></content:encoded></item><item><title>Sponsored Keynote: Manage Logging Costs While Preserving Value - Alok Bhide, Chronosphere</title><link>https://www.youtube.com/watch?v=Z4umnlRdLtA</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/Z4umnlRdLtA?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:35:24 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Sponsored Keynote: Manage Logging Costs While Preserving Value - Alok Bhide, Chronosphere

Logs can get very expensive and often how useful all those logs are is unknown, some are but many are not. It is very difficult to know which logs are useful and how exactly they are used. With Chronosphere's Control plane for logs users can now get a comprehensive analysis of value and usage patterns, along with sophisticated recommendations and control actions that allow some or most of the value derived from those logs to be preserved. In order to achieve our goals we have enhanced Fluent Bit to be more flexible in which logs are actioned upon and will share useful future additions to it.]]></content:encoded></item><item><title>Keynote: Hybrid Cloud Architecture: Making Big Bets on Open Standards - Margaret Dawson</title><link>https://www.youtube.com/watch?v=J_hHiwa_3QU</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/J_hHiwa_3QU?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:35:24 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Keynote: Hybrid Cloud Architecture: Making Big Bets on Open Standards - Margaret Dawson, Chronosphere

Hybrid cloud isn’t a stepping stone—it’s a destination. With 39% of CNCF survey respondents already operating in hybrid environments, this model is here to stay. But as teams pursue cloud-native architectures, many skip a critical step: developing a clear cloud strategy and an observability approach to match.
The result is predictable— widening visibility gaps, redundant tooling and data, and spiraling costs as teams try to stitch together disconnected, vendor-specific systems never meant to work in concert. Hybrid environments expose these issues quickly, especially when workloads span multiple platforms without a unified way to observe and understand them.
Modernization efforts demand open observability from the start—not as an add-on. Technologies like OpenTelemetry, Fluent Bit, and Prometheus act as connective tissue across clouds, clusters, and on-prem infrastructure, enabling standardization where it’s needed most.
This talk outlines how to center open observability in your modernization journey: where to standardize architectural layers, how to maintain a more open approach, and why these decisions have long-term payoff. 
Hybrid complexity is inevitable. Leading with open observability is how you stay in control—now and in the future.]]></content:encoded></item><item><title>Sponsored Keynote: Foundation-Led Innovation: OpenSearch&apos;s Impact on Modern Data I... Dotan Horovits</title><link>https://www.youtube.com/watch?v=C5Y3qnEJSY8</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/C5Y3qnEJSY8?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:35:24 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Sponsored Keynote: Foundation-Led Innovation: OpenSearch's Impact on Modern Data Insights - Dotan Horovits, AWS OpenSearch]]></content:encoded></item><item><title>Building Resilient Telemetry Pipelines: Mastering the OpenTelemetry Collector&apos;s Per... Denton Krietz</title><link>https://www.youtube.com/watch?v=zgnY8szpKUw</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/zgnY8szpKUw?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:34:35 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Building Resilient Telemetry Pipelines: Mastering the OpenTelemetry Collector's Persistent Queue - Denton Krietz, Bindplane

The OpenTelemetry Collector’s persistent queue provides a robust mechanism for handling data bursts, destination outages, and processing delays, ensuring no telemetry data is lost—but from experience, it’s consistently one of the collector's least understood features.

In this talk, we’ll explore the inner workings of the OTel Collector’s persistent queue, including how it buffers data, ensures durability, and enables replay after failures. Attendees will learn how to configure persistent queues for their unique workloads, optimize their telemetry pipeline performance, and troubleshoot common pitfalls.

Whether you’re a site reliability engineer, developer, or observability enthusiast, this talk will equip you with the knowledge to deeply understand persistent queues to optimize your telemetry pipeline in production.]]></content:encoded></item><item><title>Introducing a Lightweight Rust OpenTelemetry Collector - Mike Heffner &amp; Ray Jenkins, Streamfold</title><link>https://www.youtube.com/watch?v=xeQnP8Ct7qY</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/xeQnP8Ct7qY?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:34:35 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Introducing a Lightweight Rust OpenTelemetry Collector - Mike Heffner & Ray Jenkins, Streamfold

In this talk, we'll introduce Rotel—an open-source OpenTelemetry collector built in Rust. Rotel is lightweight and resource-efficient, integrating seamlessly into your development workflow. Its compact design lets you package it with your Python or NodeJS projects, so telemetry collection runs alongside your code without needing additional sidecars.

We'll explore how rethinking telemetry collection at the edge can empower developers right from the early stages of development, paving the way for broader OpenTelemetry adoption. You’ll learn how Rust’s low-overhead FFI enables native extensions for telemetry filtering, transformation, and enrichment using Python and Typescript.

By leveraging Rust’s performance strengths, Rotel avoids the overhead of garbage collection, resulting in lower memory usage and reduced latency. Its quick cold start times make it a natural fit for modern cloud-native, serverless, and edge computing environments. Join us to discover how moving telemetry collection closer to the source can help you analyze high-volume, high-fidelity signals more effectively.]]></content:encoded></item><item><title>Lightning Talk: From Zero To Developer: My One Year Serendipity Journey With OpenTele... Diana Todea</title><link>https://www.youtube.com/watch?v=wWON2NT41lE</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/wWON2NT41lE?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:34:35 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Lightning Talk: From Zero To Developer: My One Year Serendipity Journey With OpenTelemetry - Diana Todea, Aircall

Becoming a contributor to an open-source project is a transformative step in any developer's career. This session explores the journey from first-time contributor to active developer, covering best practices for navigating project communities, understanding codebases, and making meaningful contributions. Learn strategies for selecting the right project, mastering collaboration tools, and embracing the culture of open-source development. The audience will be inspired about my one year journey with the open source project OpenTelemetry and how I have built a proof of concept for it and achieved developer status for this project. By the end of this talk, the public will gain insights into the tools to become a better developer and how to build more engagement with the community.]]></content:encoded></item><item><title>Telemetry Showdown: Fluent Bit Vs. OpenTelemetry Collector - A Comprehensive Benchma... Henrik Rexed</title><link>https://www.youtube.com/watch?v=tZho5W9L_Z8</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/tZho5W9L_Z8?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:34:35 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Telemetry Showdown: Fluent Bit Vs. OpenTelemetry Collector - A Comprehensive Benchmark Analysis - Henrik Rexed, Dynatrace

In a push to standardize observability practices, the cloud-native community has embraced OpenTelemetry, offering a unified framework for metrics, logs, and traces. Prior to this, log processing relied on agents like fluent, evolving into fluentbit. With fluentbit's recent expansion to support additional signals and the OpenTelemetry Collector's emergence, a pertinent question arises: Which is the superior choice for performance?

This session delves into:
- Unveiling the distinctions between Fluent Bit and the OpenTelemetry Collector.
- Sharing the findings derived from a series of benchmark tests.
- Providing valuable insights to empower the community in selecting the most fitting agent for their cloud-native environments.]]></content:encoded></item><item><title>The Spec-tacular Game Show - Liudmila Molkova, Ted Young, Tyler Helmuth, Jamie Danielson, Alex Boten</title><link>https://www.youtube.com/watch?v=ipFVu0dl5Bw</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/ipFVu0dl5Bw?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:34:35 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Panel: The Spec-tacular Game Show - Liudmila Molkova, Microsoft; Ted Young, Grafana Labs; Tyler Helmuth, Jamie Danielson & Alex Boten, Honeycomb

From OTLP to OTTL, engineers are excited about a lot of things. But there is one thing that excites them above all else and that is correcting people. Welcome to “The Spec-tacular Game Show”.

In this fun game show our panelists will be given incorrect statements about the OpenTelemetry Specification or Semantic Convention. The panelists will buzz in, identify what’s wrong, and state the correction. If none of the panelists know the answer the audience will get a chance to answer to steal the point. The panelist (or audience) with the most points wins!

After each question we’ll spend a time explaining why the Spec and Semconv is the way it is and highlight how it produces the production-quality telemetry you know and love. Join us for a fun, relaxing, (snarky) panel about everyone’s favorite part of Otel!]]></content:encoded></item><item><title>How To Think About Instrumentation Overhead - Jason Plumb, Splunk</title><link>https://www.youtube.com/watch?v=fvmzAX_ZyvM</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/fvmzAX_ZyvM?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:34:35 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

How To Think About Instrumentation Overhead - Jason Plumb, Splunk

Novice observability practitioners are often overly obsessed with performance. They might approach instrumentation with skepticism and have concerns about latency degradation or resource consumption. This talk is a primer on the topic of instrumentation overhead, and it will teach you how to think about overhead in an observability context. We will cover the causes of overhead and why overhead is so hard to measure and even harder to predict reliably. Lastly, we will present some practical techniques for understanding overhead in your environment and some strategies for coping with it.]]></content:encoded></item><item><title>No Dependencies. No Plugins. Just Native OpenTelemetry - Liudmila Molkova, Microsoft</title><link>https://www.youtube.com/watch?v=fU6jsw0yaVU</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/fU6jsw0yaVU?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:34:35 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

No Dependencies. No Plugins. Just Native OpenTelemetry - Liudmila Molkova, Microsoft

The best telemetry starts at the source—inside the client libraries.
But in most cases, that means taking a dependency on the OpenTelemetry API from your library. And while it’s stable, minimal, reliable, and safely no-op unless configured—transitive dependencies are still the bane of any library developer’s existence, and most of us try to avoid them.

To work around this, people reach for abstractions, plugins, bridges, or even OTel forks that break context propagation. The result? A poor user experience. Users must find the right plugin, install it, wire it up—and still hit the diamond dependency problem, now it just affects a subset of users.

But what if you could take a truly optional dependency? If OpenTelemetry is on the classpath, instrumentation kicks in. If it’s not, no harm done.
How hard is that to pull off? How reliable? How performant?

Let’s explore that—through the lens of the next generation of Azure SDKs for Java. Spoiler: it’s easy and fast, and as a side-bonus, we can fall back to logs-based tracing if OTel is not found.]]></content:encoded></item><item><title>Closing Remarks - Austin Parker, Honeycomb</title><link>https://www.youtube.com/watch?v=eDbQfZ9eoNI</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/eDbQfZ9eoNI?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:34:35 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Closing Remarks - Austin Parker, Honeycomb]]></content:encoded></item><item><title>Lightning Talk: Beyond Good Enough: Why We Want a Kotlin API and SDK - Hanson Ho, Embrace</title><link>https://www.youtube.com/watch?v=di5nhYvUh6w</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/di5nhYvUh6w?version=3" length="" type=""/><pubDate>Tue, 1 Jul 2025 17:34:35 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon India in Hyderabad (August 6-7), and KubeCon + CloudNativeCon North America in Atlanta (November 10-13). Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io

Lightning Talk: Beyond Good Enough: Why We Want a Kotlin API and SDK - Hanson Ho, Embrace

The OTel Java API, SDK, and ecosystem are perfectly adequate for Android developer to get OTel instrumentation into their apps. But for a host of reasons, the match is not perfect, especially for developers who only write in Kotlin, which is the recommended development language for Android by Google, not the least of which is the emergence of Kotlin Multiple Platform (KMP) as a means to share code between Android, iOS, and many other platforms.

This session will outline the reasons why we at Embrace is trying to kick-start the development of a pure Kotlin ecosystem for OTel, starting with an API and SDK implementation, and how we are doing it in a way where mobile developers can get value incrementally without having to wait until every aspect is fully built out.

We want OTel to feel natural and idiomatic for Android developers, and this is the first step towards that end.]]></content:encoded></item><item><title>The Docker MCP Catalog: the Secure Way to Discover and Run MCP Servers</title><link>https://www.docker.com/blog/docker-mcp-catalog-secure-way-to-discover-and-run-mcp-servers/</link><author>Nuno Coracao</author><category>docker</category><category>devops</category><pubDate>Tue, 1 Jul 2025 13:04:20 +0000</pubDate><source url="https://www.docker.com/">Docker blog</source><content:encoded><![CDATA[The Model Context Protocol (MCP) ecosystem is exploding. In just weeks, our Docker MCP Catalog has surpassed , validating that developers are hungry for a secure way to run MCP servers. Today, we’re excited to share major updates to the Docker MCP Catalog, including enhanced discovery features and our new open submission process. With hundreds of developers already requesting to publish their MCP servers through Docker, we’re accelerating our mission to make containerized MCP servers the standard for secure AI tool distribution.The rapid adoption of MCP servers also highlights a critical problem — the current practice of running them via npx or uvx commands exposes systems to unverified code with full host access, not to mention dependency management friction. In this post, we’ll explain why Docker is investing in the MCP ecosystem, showcase the new catalog capabilities, and share how you can contribute to building a more secure foundation for AI applications.Figure 1: The new Docker MCP Catalog, built for easier discovery.Why Docker is building the MCP CatalogThe security issues in MCP distributionEvery time a developer runs npx -y @untrusted/mcp-server or uvx some-mcp-tool, they’re making a dangerous trade-off: convenience over security. These commands execute arbitrary code directly on the host system with full access to:Environment variables and secretsSome MCP clients limit environment variable access, but even that is not a universal practice. This isn’t sustainable. As MCP moves from experimentation to production, we need a fundamentally different approach.Docker has spent over a decade solving exactly these problems for cloud-native applications. We’ve built the infrastructure, tools, and trust that developers rely on to run billions of containers in production. Now, we’re applying these same principles to the MCP ecosystem.When you run an MCP server from our Catalog, you get: verifying the image hasn’t been tampered withSoftware Bill of Materials (SBOMs) documenting every component from your host system to only what the server actually needsThis isn’t about making life harder for developers—it’s about making security the path of least resistance.Introducing the enhanced MCP CatalogWe’ve reimagined the MCP Catalog to make it more accessible and easier to navigate. You can still access the MCP Catalog from Docker Hub and the MCP Toolkit in Docker Desktop just like before, or go straight to the MCP catalog. We’ve gone beyond generic container image listings by building features that help you quickly find the right MCP servers for your AI applications.  : MCP servers are organized by what they actually do:Data Integration (databases, APIs, file systems)Development Tools (IDEs, code analysis, testing)Communication (email, Slack, messaging platforms)Productivity (task management, calendars, note-taking)Analytics (data processing, visualization, reporting): Find servers by capability, tools, GitHub tags, and categories — not just by name.: Every catalog entry clearly shows whether it’s Docker-built (with transparent build signing and verification) or community-built (containerized and maintained by the publisher).Figure 2: Discover MCP servers by use cases.How we classify MCP Servers: Built by Docker vs. community-built: When you see “Built by Docker,” you’re getting our complete security treatment. We control the entire build pipeline, providing cryptographic signatures, SBOMs, provenance attestations, and continuous vulnerability scanning.: These servers are packaged as Docker images by their developers. While we don’t control their build process, they still benefit from container isolation, which is a massive security improvement over direct execution.Tiers serve important roles: Docker-built servers demonstrate the gold standard for security, while community-built servers ensure we can scale rapidly to meet developer demand. Developers can change their mind after submitting a community-built server and opt to resubmit it as a Docker-built server.Figure 3: An example of Built by Docker MCP Server.Open for MCP server submission: Join the secure MCP movementStarting today, we’re opening our submission process to the community. Whether you’re an individual developer or an enterprise team, you can feature your MCP servers on the Docker MCP Catalog. By publishing through our catalog, you’re not just distributing your MCP server — you’re helping establish a new security standard for the entire ecosystem while getting your MCP tools available to millions of developers already using Docker via Docker Hub and Docker Desktop. Your containerized server becomes part of the solution, demonstrating that production-ready AI tools don’t require compromising on security. How to submit your MCP server – Package your MCP server as a Docker image – Opt for Docker-built (we handle the build) or community-built (you build and maintain it)We’re committed to a fast, transparent review process. Quality MCP servers that follow our security guidelines will be published quickly, helping you reach Docker’s 20+ million developer community.ClickHouse is one of the first companies to take advantage of Docker’s MCP Catalog, and they opted for the Docker-built tier to ensure maximum security. Here’s why they chose to partner with Docker:, we deliver the fastest analytics database – open-source, and designed for real-time data processing and analytics at scale. As agentic AI becomes more embedded in modern applications, developers are using the ClickHouse MCP server to support intelligent, data-driven workflows that demand low latency, high concurrency, and cost efficiency.To make it easier for developers to deploy these workloads, we’re featuring  on Docker’s MCP Catalog, which provides a powerful way to reach 20M+ developers and makes it easier for Docker users to discover and use our solution. We opted for “Built by Docker” with the highest security standard, including cryptographic signatures, SBOMs, provenance attestations, and continuous vulnerability scanning. Together with Docker, developers can run ClickHouse MCP Server with confidence, knowing it’s secured, verified, and ready for their agentic applications.” – Tanya Bragin, VP of Product and Marketing ClickhouseWe’re preparing for the future of cloud-native AI applications. Remote MCP servers will enable:Managed MCP services that scale automaticallyShared capabilities across teams without distributing codeStricter security boundaries for sensitive operationsIntegration with the official MCP registryWe’re actively collaborating with the MCP community on the upcoming official registry. Our vision is complementary:The official registry provides centralized discovery – the “yellow pages” of available MCP serversDocker provides the secure runtime and distribution for those listingsTogether, we create a complete ecosystem where discovery and security work hand-in-handThe explosive growth of our MCP Catalog, 1 million pulls and hundreds of publisher requests, tells us developers are ready for change. They want the power of MCP, but they need it delivered securely.By establishing containers as the standard for MCP server distribution, we’re not trying to own the ecosystem — we’re trying to secure it. Every MCP server that moves from npx execution to containerized deployment is a win for the entire community.Explore the enhanced MCP Catalog: Visit the MCP Catalogto discover MCP servers that solve your specific needs securely.Use and test hundreds of MCP Servers: Download Docker Desktopto download and use any MCP server in our catalog with your favorite clients: Gordon, Claude, Cursor, VSCode, etc: Star our repository and watch for updates on the MCP Gateway release and remote server capabilities.Together, we’re building more than a catalog — we’re establishing the secure foundation that the MCP ecosystem needs to grow from experimental tool to production-ready platform. Because when it comes to AI applications, security isn’t optional. It’s fundamental.]]></content:encoded></item><item><title>Build the highest resilience apps with multi-Region strong consistency in Amazon DynamoDB global tables</title><link>https://aws.amazon.com/blogs/aws/build-the-highest-resilience-apps-with-multi-region-strong-consistency-in-amazon-dynamodb-global-tables/</link><author>Donnie Prakoso</author><category>devops</category><pubDate>Mon, 30 Jun 2025 20:30:48 +0000</pubDate><source url="https://aws.amazon.com/blogs/aws/">AWS blog</source><content:encoded><![CDATA[While tens of thousands of customers are successfully using Amazon DynamoDBglobal tables with eventual consistency, we’re seeing emerging needs for even stronger resilience. Many organizations find that the DynamoDB multi-Availability Zone architecture and eventually consistent global tables meet their requirements, but critical applications like payment processing systems and financial services demand more.For these applications, customers require a zero Recovery Point Objective (RPO) during rare Region-wide events, meaning you can direct your app to read the latest data from any Region. Your multi-Region applications always need to access the same data regardless of location.Starting today, you can use a new Amazon DynamoDB global tables capability that provides multi-Region strong consistency (MRSC), enabling zero RPO. This capability, first announced as a preview at AWS re:Invent 2024, simplifies building highly resilient global applications.Here’s how you can enable MRSC starting with an existing empty DynamoDB table:With MRSC, DynamoDB now offers you the highest level of resilience for your applications. If application processing is interrupted in a Region, you can redirect traffic to another Region containing a MRSC replica and know that you’ll be processing the latest data.Let me walk you through how you can use this new capability.To start using MRSC, I need to create a global table from an existing DynamoDB table that doesn’t contain any data. I navigate to my existing table, select the  tab and select .The MRSC availability architecture requires three AWS Regions. I can configure MRSC with either three full replicas or with two replicas and a witness. A witness contains only replicated change data to provide the required availability without maintaining a full copy of my table data.The following screenshot shows how I configure MRSC with two replicas and a witness. To configure MRSC with three full replicas instead, I can clear Configure Region 2 as Witness.If I need to update my existing table programmatically, I can use the Amazon Q CLI to generate the required command with the following prompt:> Hey Q! Update my existing DynamoDB table called "demo-mrsc" in us-east-1 with multi-Region strong consistency across us-east-2 with witness in us-west-2 RegionsShortly after, Q CLI will respond back with following command:> To update your DynamoDB table with multi-Region strong consistency, you'll need to use the update-table command with the appropriate parameters. Here's how you would do it:

aws dynamodb update-table \ 
    --table-name demo-mrsc \ 
    --replica-updates '[{"Create": {"RegionName": "us-east-2"}}]' \ 
    --global-table-witness-updates '[{"Create": {"RegionName": "us-west-2"}}]' \ 
    --multi-region-consistency STRONG \ 
    --region us-east-1
After it’s finished processing, I can check the status of my MRSC global table. I can see I have a  configured for my DynamoDB global table. A witness reduces costs while still providing the resilience benefits of multi-Region strong consistency.Then, in my application, I can use  to read data with strong consistency. Here’s a Python example:import boto3

# Configure the DynamoDB client for your region
dynamodb = boto3.resource('dynamodb', region_name='us-east-2')
table = dynamodb.Table('demo-mrsc')

pk_id = "demo#test123"

# Read with strong consistency across regions
response = table.get_item(
    Key={
        'PK': pk_id
    },
    ConsistentRead=True
)

print(response)
For operations that require the strongest resilience, I can use . For less critical operations where eventual consistency is acceptable, I can omit this parameter to improve performance and reduce costs.Here are a couple of things to note: – The Amazon DynamoDB multi-Region strong consistency capability is available in following AWS Regions: US East (Ohio, N. Virginia), US West (Oregon), Asia Pacific (Osaka, Seoul, Tokyo), and Europe (Frankfurt, Ireland, London, Paris)Learn more about how you can achieve the highest level of application resilience, enable your applications to be always available and always read the latest data regardless of the Region by visiting Amazon DynamoDB global tables.]]></content:encoded></item><item><title>Survey: Pace of Increased Adoption of GitOps Varies Widely</title><link>https://devops.com/survey-pace-of-increased-adoption-of-gitops-varies-widely/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=survey-pace-of-increased-adoption-of-gitops-varies-widely</link><author>Mike Vizard</author><category>devops</category><pubDate>Mon, 30 Jun 2025 19:51:43 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Kusari Adds AI Security Tool to Inspect Code as Pull Requests Are Made</title><link>https://devops.com/kusari-adds-ai-security-tool-to-inspect-code-as-pull-requests-are-made/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=kusari-adds-ai-security-tool-to-inspect-code-as-pull-requests-are-made</link><author>Mike Vizard</author><category>devops</category><pubDate>Mon, 30 Jun 2025 19:12:59 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Beyond a RHEL Clone: How Rocky Linux Is Evolving Into Something More</title><link>https://devops.com/beyond-a-rhel-clone-how-rocky-linux-is-evolving-into-something-more/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=beyond-a-rhel-clone-how-rocky-linux-is-evolving-into-something-more</link><author>Nathan Blackham</author><category>devops</category><pubDate>Mon, 30 Jun 2025 18:32:50 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>New Amazon EC2 C8gn instances powered by AWS Graviton4 offering up to 600Gbps network bandwidth</title><link>https://aws.amazon.com/blogs/aws/new-amazon-ec2-c8gn-instances-powered-by-aws-graviton4-offering-up-to-600gbps-network-bandwidth/</link><author>Channy Yun (윤석찬)</author><category>devops</category><pubDate>Mon, 30 Jun 2025 18:01:32 +0000</pubDate><source url="https://aws.amazon.com/blogs/aws/">AWS blog</source><content:encoded><![CDATA[You can use C8gn instances to run the most demanding network intensive workloads, such as security and network virtual appliances (virtual ﬁrewalls, routers, load balancers, proxy servers, DDoS appliances), data analytics, and tightly-coupled cluster computing jobs.EC2 C8gn instances specifications C8gn instances provide up to 192 vCPUs and 384 GiB memory, and offer up to 30 percent higher compute performance compared Graviton3-based EC2 C7gn instances.Here are the specs for C8gn instances:If you’re using C7gn instances now, you will have straightforward experience migrating network intensive workloads to C8gn instances because the new instances offer similar vCPU and memory ratios. To learn more, check out the collection of Graviton resources to help you start migrating your applications to Graviton instance types.]]></content:encoded></item><item><title>AWS Weekly Roundup: Project Rainier, Amazon CloudWatch investigations, AWS MCP servers, and more (June 30, 2025)</title><link>https://aws.amazon.com/blogs/aws/aws-weekly-roundup-project-rainier-amazon-cloudwatch-investigations-aws-mcp-servers-and-more-june-30-2025/</link><author>Channy Yun (윤석찬)</author><category>devops</category><pubDate>Mon, 30 Jun 2025 16:39:17 +0000</pubDate><source url="https://aws.amazon.com/blogs/aws/">AWS blog</source><content:encoded><![CDATA[Every time I visit Seattle, the first thing that greets me at the airport is Mount Rainier. Did you know that the most innovative project at Amazon Web Services (AWS) is named after this mountain?Project Rainier is a new project to create what is expected to be the world’s most powerful computer for training AI models across multiple data centers in the United Stages. Anthropic will develop the advanced versions of its Claude models with five times more computing power than its current largest training cluster.The key technology powering Project Rainier is AWS custom-designed Trainium2 chips, which are specialized for the immense data processing required to train complex AI models. Thousands of these Trainium2 chips will be connected in a new type of Amazon EC2 UltraServer and EC2 UltraCluster architecture that allows ultra-fast communication and data sharing across the massive system.Learn about the AWS vertical integration of Project Rainer, where it designs every component of the technology stack from chips to software, allows it to optimize the entire system for maximum efficiency and reliability. Here are some launches that got my attention:Amazon S3 access for Amazon FSx for OpenZFS – You can access and analyze your FSx for OpenZFS file data through Amazon S3 Access Points, enabling seamless integration with AWS AI/ML, and analytics services without moving your data out of the file system. You can treat your FSx for OpenZFS data as if it were stored in S3, making it accessible through the S3 API for various applications including Amazon Bedrock, Amazon SageMaker, AWS Glue, and other S3 based cloud-native applications.Amazon S3 with sort and z-order compaction for Apache Iceberg tables – You can optimize query performance and reduce costs with new sort and z-order compaction. With S3 Tables, sort compaction automatically organizes data files based on defined column orders, while z-order compaction can be enabled through the maintenance API for efficient multicolumn queries.Amazon CloudWatch investigations – You can accelerate your operational troubleshooting in AWS environments using the Amazon CloudWatch AI-powered investigation feature, which helps identify anomalies, surface related signals, and suggest remediation steps. This capability can be initiated through CloudWatch data widgets, multiple AWS consoles, CloudWatch alarm actions, or Amazon Q chat and enables team collaboration and integration with Slack and Microsoft Teams.Amazon Bedrock Guardrails Standard tier – You can enhance your AI content safety measures using the new Standard tier. It offers improved content filtering and topic denial capabilities across up to 60 languages, better detection of variations including typos, and stronger protection against prompt attacks. This feature lets you configure safeguards to block harmful content, prevent model hallucinations, redact personally identifiable information (PII), and verify factual claims through automated reasoning checks.Amazon Route 53 Resolver endpoints for private hosted zone – You can simplify DNS management across AWS and on-premises infrastructure using the new Route 53 DNS delegation feature for private hosted zone subdomains, which works with both inbound and outbound Resolver endpoints. You can delegate subdomain authority between your on-premises infrastructure and Route 53 Resolver cloud service using name server records, eliminating the need for complex conditional forwarding rules.Amazon Q Developer CLI for Java transformation – You can automate and scale Java application upgrades using the new Amazon Q Developer Java transformation command line interface (CLI). This feature perform upgrades from Java versions 8, 11, 17, or 21 to versions 17 or 21 directly from the command line. This tool offers selective transformation options so you can choose specific steps from transformation plans and customize library upgrades.New AWS IoT Device Management managed integrations – You can simplify Internet of Things (IoT) device management across multiple manufacturers and protocols using the new managed integrations feature, which provides a unified interface for controlling devices whether they connect directly, through hubs or third-party clouds. The feature includes pre-built cloud-to-cloud (C2C) connectors, device data model templates, and SDKs that support ZigBee, Z-Wave, and Wi-Fi protocols, while you can still create custom connectors and data models. Check your calendars and sign up for these upcoming AWS events:AWS re:Invent – Register now to get a head start on choosing your best learning path, booking travel and accommodations, and bringing your team to learn, connect, and have fun. If you’re an early-career professional, you can apply to the All Builders Welcome Grant program, which is designed to remove financial barriers and create diverse pathways into cloud technology.AWS Builders Online Series – If you’re based in one of the Asia Pacific time zones, join and learn fundamental AWS concepts, architectural best practices, and hands-on demonstrations to help you build, migrate, and deploy your workloads on AWS.That’s all for this week. Check back next Monday for another Weekly Roundup!]]></content:encoded></item><item><title>Fast Code, Real Risks: Guardrails for AI-Generated Software</title><link>https://devops.com/fast-code-real-risks-guardrails-for-ai-generated-software/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=fast-code-real-risks-guardrails-for-ai-generated-software</link><author>Mike Vizard</author><category>devops</category><pubDate>Mon, 30 Jun 2025 15:51:10 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Next Version of Grok Includes Advanced Coding Assistance: Reports</title><link>https://devops.com/next-version-of-grok-includes-advanced-coding-assistance-reports/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=next-version-of-grok-includes-advanced-coding-assistance-reports</link><author>Jon Swartz</author><category>devops</category><pubDate>Mon, 30 Jun 2025 15:43:44 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Tool Calling with Local LLMs: A Practical Evaluation</title><link>https://www.docker.com/blog/local-llm-tool-calling-a-practical-evaluation/</link><author>Ignasi Lopez Luna</author><category>docker</category><category>devops</category><pubDate>Mon, 30 Jun 2025 13:48:42 +0000</pubDate><source url="https://www.docker.com/">Docker blog</source><content:encoded><![CDATA[Which local model should I use for tool calling?When building GenAI and agentic applications, one of the most pressing and persistent questions is: “Which local model should I use for tool calling?”  We kept hearing again and again, from colleagues within Docker and the developer community, ever since we started working on , a local inference engine that helps developers run and experiment with local models. It’s a deceptively simple question with a surprisingly nuanced answer. Even when we tried to answer it for a very specific case: “What if I just expose 5 simple tools to the model?”We realized we had no definite answer forthat. Local LLM models offer control, cost-efficiency, and privacy, but when it comes to structured tool use, deciding when and how to act, they can behave very differently. We decided to dig deep and test this properly. We started with manual experimentation, then built a framework to scale our testing. This blog documents that journey and shares which models ranked highest on our tool-calling leaderboard.The first attempt: Manual testingOur first instinct was to build something quickly and try it out manually.So we created, an AI-powered shopping assistant that lets users interact via chat to build, modify, and check out a shopping cart. Through a natural conversation, users can discover products, add or remove items, and complete or cancel their purchase, all from the chat interface.To support testing across different LLMs, we added a model selector that makes it easy to switch between local models (via Docker Model Runner or Ollama) and hosted models using the OpenAI API.OpenAI’s GPT-4 or GPT-3.5 worked as expected, and the experience was fairly smooth. Called tools when they were neededAvoided unnecessary tool usageHandled tool responses naturallyBut the local models? That’s where the challenges started to surface.What went wrong with local modelsWe started experimenting with some of the local models listed on the Berkeley Function-Calling Leaderboard. Our goal was to find smaller models, ideally with fewer than 10 billion parameters, so we tested xLAM-2-8b-fc-r and watt-tool-8B. We quickly ran into several recurring issues:: Tools were being called even for greeting messages like “Hi there!”: The model would search when it should have added, or tried to remove when the cart was empty: Parameters like product_name or quantity were missing or malformed: The model often failed to respond to tool output, leading to awkward or incomplete conversationsAt this point, it was clear that manual testing wouldn’t scale. Different models failed in different ways, some struggled with invocation logic, while others mishandled tool arguments or responses.  Testing was not only slow, but also unreliable. Because these models are non-deterministic, we had to run each scenario multiple times just to get a reliable read on behavior.We needed a testing setup that was repeatable, measurable, and fast.Our second attempt: A scalable testing toolOur goal wasn’t academic rigor.It was: “Give us good-enough answers in 2–3 days, not weeks.”In a couple of days, we created, This is a flexible project with the following capabilitiesDefine real-world  with multiple valid tool call sequencesRun them against many models (local & hosted)Track , , and Log  for analysis (or eventual fine-tuning)The core idea behind model-test is simple: simulate realistic tool-using conversations, give the model room to reason and act, and check whether its behavior makes sense.A  (e.g. “Add iPhone to cart”)The  (optional)One or more , because there’s often more than one right answer{
  "prompt": "Add iPhone to cart",
  "expected_tools_variants": [
    {
      "name": "direct_add",
      "tools": [{ "name": "add_to_cart", "arguments": { "product_name": "iPhone" } }]
    },
    {
      "name": "search_then_add",
      "tools": [
        { "name": "search_products", "arguments": { "query": "iPhone" } },
        { "name": "add_to_cart", "arguments": { "product_name": "iPhone 15" } }
      ]
    }
  ]
}
In this case, we consider both  and “search first, then add the result” as acceptable. Even though “iPhone” isn’t a real product name, we’re fine with it. We weren’t aiming for overly strict precision, just realistic behavior.Each test case belongs to a test suite. We provide two built-in suites. However, you can run an entire suite, individual test cases, or a selection of multiple test cases. Additionally, you can create your own custom suites to group tests as needed. : Greetings, single-step actions: Multi-step reasoning and tool chainingTo make tests feel closer to how real agents behave, we simulate an agent loop up to .User: Model: “Let me search for iPhone 5…”Tool: Model: “Adding product X to cart…”Model:  → Great, test passed!But if the model still wants to keep going after round 5?That’s it, my friend,  . Time’s up.We deliberately avoided designing tests that require perfect predictions.We didn’t demand that the model always know the exact product name.What mattered was: did the tool sequence make sense for the intent?This helped us focus on the kind of reasoning and behavior we actually want in agents, not just perfect token matches.Our test outputs distilled down to a final F1 score, encapsulating three core dimensions:Did the model realize a tool was needed?Did it choose the right tool(s) and use them correctly?Whether the tool call arguments were correct?The F1 score is the harmonic mean of two things: precision (how often the model made valid tool calls) and recall (how often it made the tool calls it was supposed to).We also tracked latency, the average runtime in seconds, but that wasn’t part of the F1 calculation; it simply helped us evaluate speed and user experience.21 models and 3,570 tests later: Which models nailed tool calling?We tested 21 models across  using 210 batch runs.Overall Rankings (by Tool Selection F1):claude-3-5-sonnet-20241022Among all models, OpenAI’s GPT-4 came out on top with a tool selection F1 score of 0.974, completing responses in just under 5 seconds on average. While hosted and not the focus of our local model exploration, it served as a reliable benchmark and provided some ground truths.On the local side, Qwen 3 (14B) delivered outstanding results, nearly matching GPT-4 with a 0.971 F1 score, though with significantly higher latency (~142 seconds per interaction).If you’re looking for something faster, Qwen 3 (8B) also achieved an F1 score of 0.933, while cutting latency nearly in half (~84 seconds), making it a compelling balance between speed and tool-use accuracy.Hosted models like Claude 3 Haiku also performed very well, hitting 0.933 F1 with exceptional speed (3.56 seconds average latency), further illustrating the high bar set by cloud-based offerings.Not all models handled tool calling well. The quantized Watt 8B model struggled with parameter accuracy and ended up with a tool selection F1 score of just 0.484. Similarly, the LLaMA-based XLam 8B variant often missed the correct tool path altogether, finishing with an F1 score of 0.570. These models may be suitable for other tasks, but for our structured tool use test, they underdeliver.We also experimented with both  and  variants for some models, and in all cases observed no significant difference in tool-calling behavior or performance. This suggests that quantization is beneficial for reducing resource usage without negatively impacting accuracy or reasoning quality, at least for the models and scenarios we tested.If your goal is maximum tool-calling accuracy, then Qwen 3 (14B) or Qwen 3 (8B) are your best bets, both local, both precise, with the 8B variant being notably faster.For a good trade-off between speed and performance, Qwen 2.5 stood out as a solid option. It’s fast enough to support real-time experiences, while still maintaining decent tool selection accuracy.If you need something more lightweight, especially for resource-constrained environments, the LLaMA 3 Groq 7B variant offers modest performance at a much lower compute footprint.What we learned and why this mattersOur testing confirmed that the Qwen family of models leads the pack among open-source options for tool calling. But as always, there’s a trade-off; you’ll need to balance between accuracy and latency when designing your application: Even the 8B version of Qwen3 outperformed any other local model: Higher-accuracy models take longer, often significantly.Tool calling is core to almost every real-world GenAI application. Whether you’re building agents or creating agentic workflows, your LLM must know when to act and how. Thanks to this simple framework, “We don’t know which model to pick” became “We’ve narrowed it down to three great options, each with clear pros and cons.”]]></content:encoded></item><item><title>Still Running Vulnerable Log4j Instances?</title><link>https://devops.com/still-running-vulnerable-log4j-instances/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=still-running-vulnerable-log4j-instances</link><author>Ofer Regev</author><category>devops</category><pubDate>Mon, 30 Jun 2025 11:07:54 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Serverless CI/CD: Redefining Continuous Delivery in the Modern DevOps Era</title><link>https://devops.com/serverless-ci-cd-redefining-continuous-delivery-in-the-modern-devops-era/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=serverless-ci-cd-redefining-continuous-delivery-in-the-modern-devops-era</link><author>Harikrishna Kundariya</author><category>devops</category><pubDate>Mon, 30 Jun 2025 10:54:43 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>How DevOps Services Improve Software Delivery and Quality</title><link>https://devops.com/how-devops-services-improve-software-delivery-and-quality/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=how-devops-services-improve-software-delivery-and-quality</link><author>Vinay Pasilkar</author><category>devops</category><pubDate>Mon, 30 Jun 2025 09:55:46 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Revolutionizing CI/CD: A Framework for Integrating Generative AI Across the Software Delivery Lifecycle</title><link>https://devops.com/revolutionizing-ci-cd-a-framework-for-integrating-generative-ai-across-the-software-delivery-lifecycle/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=revolutionizing-ci-cd-a-framework-for-integrating-generative-ai-across-the-software-delivery-lifecycle</link><author>Anirban Biswas</author><category>devops</category><pubDate>Mon, 30 Jun 2025 09:32:40 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Why Software Migrations Fail: It’s Not the Code</title><link>https://devops.com/why-software-migrations-fail-its-not-the-code/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=why-software-migrations-fail-its-not-the-code</link><author>Nishil Macwan</author><category>devops</category><pubDate>Mon, 30 Jun 2025 08:53:33 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Harnessing AI and Automation for the Future of Innovation in DevOps</title><link>https://devops.com/harnessing-ai-and-automation-for-the-future-of-innovation-in-devops/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=harnessing-ai-and-automation-for-the-future-of-innovation-in-devops</link><author>Tony Barbagallo</author><category>devops</category><pubDate>Mon, 30 Jun 2025 07:28:22 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>The Self-Driving Help Desk: Agentic AI’s Role in the Next DevOps Era</title><link>https://devops.com/the-self-driving-help-desk-agentic-ais-role-in-the-next-devops-era/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=the-self-driving-help-desk-agentic-ais-role-in-the-next-devops-era</link><author>Venkat Thiruvengadam</author><category>devops</category><pubDate>Mon, 30 Jun 2025 07:13:14 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>How Agile Methodologies and DevOps Practices Shape Custom Software Product Development</title><link>https://devops.com/how-agile-methodologies-and-devops-practices-shape-custom-software-product-development/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=how-agile-methodologies-and-devops-practices-shape-custom-software-product-development</link><author>Roman Davydov</author><category>devops</category><pubDate>Mon, 30 Jun 2025 06:43:25 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Google Adds Gemini CLI to AI Coding Portfolio</title><link>https://devops.com/gemini-cli-the-open-source-ai-agent-thats-revolutionizing-terminal-workflows/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=gemini-cli-the-open-source-ai-agent-thats-revolutionizing-terminal-workflows</link><author>Tom Smith</author><category>devops</category><pubDate>Mon, 30 Jun 2025 06:25:32 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Five Great DevOps Job Opportunities</title><link>https://devops.com/five-great-devops-job-opportunities-145/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=five-great-devops-job-opportunities-145</link><author>Mike Vizard</author><category>devops</category><pubDate>Mon, 30 Jun 2025 06:00:32 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Level Up your bash skill : Mastering Sed command</title><link>https://blog.devops.dev/level-up-your-bash-skill-mastering-sed-command-3b6f28ea0e60?source=rss----33f8b2d9a328---4</link><author>bektiaw</author><category>devops</category><pubDate>Sat, 28 Jun 2025 18:03:31 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>How to Install Prometheus &amp; Grafana in AKS Using Helm</title><link>https://blog.devops.dev/how-to-install-prometheus-grafana-in-aks-using-helm-d9c46c9d5170?source=rss----33f8b2d9a328---4</link><author>Nirmal Chandrasiri</author><category>devops</category><pubDate>Sat, 28 Jun 2025 18:01:08 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[In this article, I’ll walk you through how to install  and  on Azure Kubernetes Service (AKS) using  — in a beginner-friendly and straightforward way. This is perfect and easy way to setup prometheus in AKS or EKS using Helm… So let’s dive in :)Before anything, make sure you have an  up and running.In my case, I created my AKS cluster using . You can find my Terraform code in this repo: Of course you can change the values as you like.❗Please export your Azure subscription ID first:For Bash (Linux/macOS/WSL):export TF_VAR_subscription_id=<your_subscription_id>For PowerShell (Windows):$env:TF_VAR_subscription_id=<your_subscription_id>In order to setup AKS cluster using Terraform use the below commands:terraform plan -var-file terraform.tfvarsterraform apply -var-file terraform.tfvarsAfter you’ve created the AKS cluster, connect to it using:az aks get-credentials --resource-group central-monitoring-dev-rg --name central-monitoring-dev-aksReplace central-monitoring-dev-rg and central-monitoring-dev-aks with your own  and (Optional).Add the Prometheus Helm ChartWe’ll use the official Prometheus Community Kubernetes Helm Chart. Run the command below to add it:helm repo add prometheus-community https://prometheus-community.github.io/helm-chartsThen update your Helm repos:Install Prometheus and GrafanaNow let’s install everything:helm install prometheus-stack prometheus-community/kube-prometheus-stack --namespace=prometheus-stack --create-namespaceThis will install Prometheus, Grafana, and related components into the prometheus-stack namespace.🌐 Expose Grafana via LoadBalancerBy default, Grafana is exposed as a , So let’s change it to a  type so Azure will create an external IP for us:First, check the services:kubectl get svc -n prometheus-stackThen edit the Grafana service:kubectl edit svc prometheus-stack-grafana -n prometheus-stackIn the editor that opens, change:Once the LoadBalancer is ready, grab the  from:kubectl get svc prometheus-stack-grafana -n prometheus-stackThen open it in your browser. copy the external ip address into a new tab and login page will appear to you.how do I know the password? You can check the default values using this:helm show values prometheus-community/kube-prometheus-stack > prometheus-default-values.yamlLook for adminPassword under Grafana settings — it’s usually set to prom-operator.Now you can explore dashboards, set up alerts, and start monitoring your AKS cluster like a pro.If you navigate to your AKS portal and check the  section, you’ll see the external IP created for Grafana. Just click and log in.That’s all! Hope this helps you get started with  on . If you found this helpful, feel free to reach drop a comment if you have any issues.See you in the next one! ✌️]]></content:encoded></item><item><title>Mastering Kubernetes Operators: Automating Beyond YAML</title><link>https://blog.devops.dev/mastering-kubernetes-operators-automating-beyond-yaml-09a47b5ae4b5?source=rss----33f8b2d9a328---4</link><author>Siddharth Singh</author><category>devops</category><pubDate>Sat, 28 Jun 2025 17:59:35 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[In modern Kubernetes-based environments, we often find ourselves writing tons of YAML files — Deployments, Services, ConfigMaps, and more…]]></content:encoded></item><item><title>How to Set Up Prometheus, InfluxDB, and Grafana for Full-Stack Monitoring with Docker Compose</title><link>https://blog.devops.dev/monitor-docker-containers-system-metrics-using-grafana-prometheus-7cbc015e2044?source=rss----33f8b2d9a328---4</link><author>David Lam</author><category>devops</category><pubDate>Sat, 28 Jun 2025 17:59:28 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[Monitoring your infrastructure is critical to keeping systems healthy, optimizing performance, and planning for growth. In this guide…]]></content:encoded></item><item><title>Ansible for DevOps: The Complete Guide to Automation That Actually Works</title><link>https://blog.devops.dev/ansible-for-devops-the-complete-guide-to-automation-that-actually-works-ae0c70d6fb56?source=rss----33f8b2d9a328---4</link><author>Dhruv Patel</author><category>devops</category><pubDate>Sat, 28 Jun 2025 17:59:23 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[Tired of repetitive deployment tasks eating up your sprint time? Here’s how Ansible transforms DevOps workflows with real examples you can…]]></content:encoded></item><item><title>The Hidden “Verbosity Tax” in AI: Why Per-Token Pricing Isn’t What It Seems</title><link>https://blog.devops.dev/the-hidden-verbosity-tax-in-ai-why-per-token-pricing-isnt-what-it-seems-a3d446499102?source=rss----33f8b2d9a328---4</link><author>Simardeep Singh</author><category>devops</category><pubDate>Sat, 28 Jun 2025 17:59:17 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[As a senior DevOps engineer who’s spent years optimizing cloud costs and capacity planning, I thought I understood pricing models. Then I came across post that made me question everything I knew about AI service economics.The post was from Kevin Jiang (for link see references), a developer building at otherhalf.ai, who shared a frustrating discovery: despite switching to Google’s Gemini 2.5 Pro for its lower per-token costs, his team’s AI bills had mysteriously spiked. The culprit? Outputs that were becoming dramatically longer for identical prompts.This revelation triggered my DevOps instincts. In infrastructure management, unexpected cost increases usually signal either a misconfiguration or a fundamental shift in service behavior. Kevin’s observation suggested the latter, and I decided to investigate.Kevin’s team noticed that Gemini 2.5 Pro, despite advertising lower per-token rates than competitors like Claude Sonnet, was generating responses that were consistently 2x longer than necessary:Five lines of comments before writing a single line of code50% more whitespace and formatting paddingUnsolicited debug logs and error handlingVerbose explanations for simple requestsFrom a cost perspective, this creates a hidden multiplier effect:Advertised: Gemini ($1.25/1M tokens) vs Claude ($3.00/1M tokens) = 58% savingsReality: Gemini (2x verbosity) = $2.50 effective rate = 17% more expensiveMy first step was checking if this was an isolated incident or part of a broader pattern. Recent academic research suggests the latter.The paper’s key insight resonates with any infrastructure engineer who’s dealt with cloud pricing optimization:“Unlike conventional billing, where the quantity and quality of services are verifiable, today’s LLM platforms operate under structural opacity: users are charged based on reported token and API usage, but have no means to confirm that these metrics reflect real or necessary work.”The Smoking Gun in Vendor DocumentationDigging into Google’s documentation revealed the most compelling evidence. Their September 2024 release notes explicitly mention tuning models for different verbosity levels:“For use cases like summarization, question answering, and extraction, the default output length of the updated models is ~5–20% shorter than previous models. For chat-based products where users might prefer longer responses by default, you can read our prompting strategies guide to learn more about how to make the models more verbose and conversational.”Even more telling, Google’s latest Gemini 2.5 updates tout efficiency improvements, claiming the new Flash model uses “20–30% fewer tokens in our evaluations.” This explicitly acknowledges that previous versions were generating unnecessary tokens.The DevOps Perspective: Infrastructure ImplicationsFrom an infrastructure management standpoint, this phenomenon breaks fundamental assumptions about cost predictability that we rely on for capacity planning.Traditional vs. LLM Pricing ModelsTraditional cloud pricing:Pay $X for Y resources (compute hours, storage GB, network bandwidth)Resource consumption is directly measurable and predictableCost scales linearly with actual usagePay $X per token, but the provider controls token generation patternsToken consumption can vary dramatically for identical inputsAlgorithmic changes on the provider side directly impact your costsThis introduces a new category of cost drift that’s invisible until you analyze usage patterns over time. Unlike compute or storage costs that scale predictably with load, LLM costs can inflate through unilateral provider changes.Traditional infrastructure monitoring focuses on resource utilization metrics: CPU, memory, network, and storage. LLM cost optimization requires tracking entirely different metrics:Tokens per request trends over timeOutput length distribution for similar prompt typesProvider efficiency ratios across different models rather than cost per tokenThis is analogous to the shift from monitoring raw server metrics to application performance metrics, but with an added layer of complexity: the “application” behavior is controlled by an external provider.Broader Patterns in Cloud Service EvolutionThis verbosity inflation mirrors other evolutionary patterns I’ve observed in cloud services pricing:The Burstable Instance PrecedentRemember when AWS introduced “burstable” EC2 instances (t2, t3, t4g families)? They appeared cheaper than standard instances but could spike costs when applications exceeded baseline CPU credits. The advertised low hourly rate became meaningless without understanding usage patterns.The API Call ProliferationStorage providers like AWS S3 initially charged primarily for storage and bandwidth. Over time, they added charges for API calls, lifecycle transitions, and various request types. What started as simple per-GB pricing became a complex matrix of fees.Cloud providers have progressively increased data egress charges while keeping ingress free. This creates vendor lock-in effects where the true cost of a service isn’t apparent until you try to leave.LLM verbosity inflation follows the same playbook: advertise low headline rates, then optimize for revenue through usage pattern manipulation that’s difficult for customers to predict or control.Practical Implications for Infrastructure TeamsFor teams evaluating LLM integration or optimizing existing AI costs, this research suggests several critical considerations:1. Redefine Cost Comparison MetricsPer-token price comparisons are becoming as meaningless as comparing cloud instances purely on CPU count without considering memory, storage, or network performance.Instead, benchmark on :Total monthly cost ÷ Successful task completions = True cost per outcome2. Implement Comprehensive MonitoringTraditional cost monitoring isn’t sufficient. Infrastructure teams need to track:Average tokens per request by prompt typeOutput length trends over timeProvider efficiency ratiosToken utilization patterns3. Build Provider Diversification StrategyJust as we avoid single-region deployments for availability, avoiding single-provider dependencies becomes crucial for cost predictability. Maintaining the ability to switch providers limits exposure to arbitrary pricing changes.4. Prompt Engineering as Cost EngineeringIn traditional infrastructure, we optimize resource allocation for cost efficiency. With LLMs, prompt engineering becomes a cost optimization discipline:Explicit brevity instructionsOutput format specificationsThe Research That Validates the ConcernThe academic community is taking this seriously. Beyond the Max Planck study, Epoch AI’s analysis of LLM pricing trends shows that while per-token costs are dropping rapidly, the variation in actual usage costs is increasing due to differences in model efficiency and output patterns.Another study, “Invisible Tokens, Visible Bills”, proposes auditing frameworks to detect quantity inflation, suggesting this is becoming a recognized industry problem requiring systematic solutions.What This Means Moving ForwardThe AI market is maturing from a technology race to a business model optimization phase. Providers are discovering that algorithmic control over token generation provides more pricing flexibility than simple rate adjustments.For infrastructure teams, this means:Cost predictability requires deeper analysis. Traditional cost modeling based on advertised rates isn’t sufficient. Teams need to test real workloads and monitor actual consumption patterns.Vendor evaluation must include efficiency testing. Beyond accuracy benchmarks, teams need to measure tokens-per-useful-output across providers with representative workloads.Monitoring and alerting systems need updates. Cost anomaly detection should include token efficiency trends, not just absolute spending changes.Contract negotiations should address efficiency. SLAs might need to include token efficiency guarantees or caps on output length for specified prompt types.The Broader Industry QuestionThis investigation raises a fundamental question about AI service pricing: Should providers have unlimited control over consumption patterns when users are charged per unit of consumption?Traditional utility models have regulations around metering accuracy and consumption reporting. As AI services become infrastructure-critical, similar transparency requirements might be necessary.Conclusion: The New NormalMy observation about Gemini’s verbosity inflation isn’t just an isolated pricing quirk — it’s an early indicator of how AI service economics will evolve. As these services become more central to application infrastructure, understanding and monitoring true efficiency becomes as critical as traditional performance metrics.For DevOps engineers, this means adding a new dimension to cost optimization playbooks. The era of simple per-unit pricing in AI is ending, replaced by a more complex landscape where provider algorithms directly impact your costs.The key is building monitoring and evaluation frameworks that look beyond advertised rates to measure actual value delivery. Because in the emerging AI infrastructure landscape, the cheapest per-token rate rarely translates to the lowest monthly bill.This investigation was inspired by and builds upon Kevin Jiang’s original observation. The research methodology and infrastructure perspective represent my own analysis as a senior DevOps engineer.Kevin Jiang’s Original Post]]></content:encoded></item><item><title>Stuck in Kubernetes Hell? Fix These 8 Common Scenarios!</title><link>https://blog.devops.dev/stuck-in-kubernetes-hell-fix-these-8-common-scenarios-0a42376b0ac6?source=rss----33f8b2d9a328---4</link><author>Devops Diaries</author><category>devops</category><pubDate>Sat, 28 Jun 2025 17:59:10 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Handling PostgreSQL Connection Pooling</title><link>https://blog.devops.dev/handling-postgresql-connection-pooling-dee3849d0299?source=rss----33f8b2d9a328---4</link><author>M Mahdi Ramadhan, M. Si</author><category>devops</category><pubDate>Sat, 28 Jun 2025 17:59:03 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[PostgreSQL: connection limit exceeded.PostgreSQL’s powerful features and reliability make it a preferred choice for modern applications. However, in serverless and microservice environments, managing PostgreSQL connections and resources is critical. This article explains:What PostgreSQL connection pooling isHow to configure it (with code examples)How to calculate resource (RAM & CPU) needsBest practices and alternatives🔍 What is PostgreSQL Connection Pooling?PostgreSQL uses a  model:max_connections = 100  # defaultIn high-concurrency environments (e.g., AWS Lambda), hitting this limit leads to:FATAL: sorry, too many clients already🚧 Problem Example: Without Poolingimport psycopg2def handler(event, context):    conn = psycopg2.connect(        user="user",        password="pass", // dont use password like this, just sample        host="mydb.host",        port=5432 // sometime for security purposes, dont use default port    )    cur.execute("SELECT * FROM users LIMIT 1;")    conn.close()💥 High concurrent Lambda invocations will crash PostgreSQL.✅ Solution: PgBouncer Connection PoolingPgBouncer acts as a middleware that reuses backend connections.PgBouncer pgbouncer.ini Configuration[databases]mydb = host=127.0.0.1 port=5432 dbname=mydblisten_port = 6432pool_mode = transaction  # ensures each client gets a backend connection only during a transaction;# other modes include 'session' (holds backend connection for entire client session) and # 'statement' (allocates backend per individual SQL statement, least supported but highly efficient)default_pool_size = 20  # number of server-side connections kept in the pool per databasemax_client_conn = 2000  # max number of client connections PgBouncer will acceptreserve_pool_size = 5  # number of additional connections to handle sudden spikesFor high availability and better isolation, based on my experienced, you have two main architectural choices:Per-microservice PgBouncer: Each microservice instance deploys its own PgBouncer, which connects to your PostgreSQL cluster (primary and replicas). This offers better fault isolation and connection control per service.: Multiple clients or microservices share a centralized PgBouncer instance, which then manages pooled connections to the PostgreSQL primary and replicas. This approach reduces infrastructure overhead but can become a single point of failure.In both setups, ensure your PgBouncer is configured with failover awareness or integrated with a load balancer that understands your PostgreSQL master/replica roles to maintain high availability.Application Code (Updated)The application now connects to PgBouncer instead of directly to PostgreSQL. This allows the connection to be managed through a pool, improving scalability and efficiency, especially under high concurrency scenarios.conn = psycopg2.connect(    dbname="mydb",    password="pass",    port=6432🚡 Understanding Pool Size vs. max_connectionsmax_connections = maximum backend processes PostgreSQL accepts.pool_size = active backend connections PgBouncer keeps.max_connections ≥ Σ (PgBouncer_instances × pool_size) + admin bufferbased on my experienced, always prepare admin buffer connection for your analytics and monitoring purposes such as health check.3 services using PgBouncermax_connections = (3 × 20) + 10 = 70You might wonder: why use PgBouncer instead of a message queue like RabbitMQ?The key difference lies in what problem each one solves: solves the problem of too many database connections by reusing a smaller pool of persistent connections to PostgreSQL. It’s ideal when your application (especially serverless or microservices) has many short-lived or bursty queries.Message queues (e.g., RabbitMQ, Kafka) decouple the processing layer from the database entirely. They’re better suited for  like background processing, batch jobs, or high-throughput pipelines.Use  when you’re doing direct, real-time database reads/writes and need to scale connections efficiently.Use a  when you want to absorb spikes, delay execution, or build resilient processing pipelines that aren’t tightly coupled to the database.Based on my experienced, I used both: PgBouncer for interactive queries and RabbitMQ for background jobs.📊 Calculating RAM and CPU RequirementsTotal_RAM ≈ shared_buffers + (max_connections × work_mem) + overheadExample for 200 connections:work_mem = 4MBshared_buffers = 2GBwork_mem_total = 200 × 4MB = 800MBTotal_RAM = 2GB + 800MB + ~600MB overhead ≈ 3.4GB✅ Recommended: 4GB RAM minimumCPU Formula (Little’s Law-based):Required vCPU = max_connections / concurrency_factorWorkload Factor OLTP 10 Mixed 6 OLAP 4max_connections = 200 (OLTP) ⇒ vCPU ≈ 20Handling ID Locking via PgBouncer: Since PgBouncer in transaction mode does not support prepared statements or session-level advisory locks, avoid using SELECT MAX(id) + 1 (this causes race conditions). Instead:Or use SELECT nextval('your_seq') to fetch the next IDINSERT INTO orders (id, customer_id) VALUES (nextval('orders_id_seq'), 123);2. Set Timeout in PostgreSQL for Long-Running Queries: Use the statement_timeout parameter to prevent long query execution.SET statement_timeout = '5s';  -- timeout after 5 secondsstatement_timeout = 5000  # in milliseconds3. Handling Query Timeouts and Root Cause Analysis: If queries frequently timeout:Check indexes using EXPLAIN ANALYZEMonitor for locking/blocking:SELECT * FROM pg_stat_activity WHERE wait_event IS NOT NULL;D. Long-running transactionsThese tools help optimize queries and configurations for pooling environments.PostgreSQL connection management is a critical skill in building scalable and resilient cloud-native applications. Based on my experience, many issues in production environments stem from misconfigured connection pools, either from overcommitting memory or underestimating traffic bursts. By correctly calculating pool_size, tuning max_connections, and understanding the implications of RAM and CPU allocations, you can avoid common pitfalls such as backend process exhaustion and connection timeouts.As one system architect once said: “Connection pooling is not an optimization — it’s survival.” Especially in environments like serverless and microservices, where concurrency patterns are unpredictable, intelligent pooling and resource planning isn’t optional — it’s foundational.Let PostgreSQL scale  use the right tools, the right math, and the right architecture for the right job.]]></content:encoded></item><item><title>Testing AWS EventBridge for Cross-Region Event Replication</title><link>https://blog.devops.dev/testing-aws-eventbridge-for-cross-region-event-replication-36f5c71b89cf?source=rss----33f8b2d9a328---4</link><author>Carlos Biagolini-Jr.</author><category>devops</category><pubDate>Sat, 28 Jun 2025 17:58:58 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[One of the great advantages of building on AWS is the ability to design systems that operate across geographically distant regions. Whether for disaster recovery, latency optimization, or compliance, multi-region architectures are a powerful feature of the AWS ecosystem. In this proof-of-concept (PoC), we explore how AWS EventBridge — a native event bus service — can be used to deliver event data from one region to another, effectively enabling decoupled, cross-region communication between serverless components.The following diagram illustrates the high-level architecture we will implement:Client Request Initiation:External users initiate the flow by sending an HTTP POST request to an Amazon API Gateway endpoint exposed in the N. Virginia region (us-east-1).Source Lambda Invocation and Event Creation:API Gateway triggers the source-lambda function. This function generates a unique identifier (UUID), captures the current UTC timestamp, and merges this metadata with the user's original message payload. The enriched event is then published to a custom EventBridge event bus named poc-eventbridge-cross-region-source-bus within the same region (us-east-1). The Lambda returns the generated ID immediately to the caller to confirm successful receipt.Source EventBridge Routing Rule:A rule configured on the poc-eventbridge-cross-region-source-bus evaluates incoming events. When an event matches the defined pattern (e.g., source: poc.eventbridge.crossregion, detail-type: message-event), the rule routes the event to a target EventBridge bus located in the destination region (us-west-2). This cross-region routing is enabled via the PutEvents API and the ARN of the destination event bus.Destination EventBridge Bus and Rule:In the Oregon region (us-west-2), the custom event bus poc-eventbridge-cross-region-destination-bus receives the forwarded event. A rule on this bus matches the same pattern and is configured to trigger the destination-lambda function whenever such an event is received.Destination Lambda Execution:The destination-lambda function appends a second UTC timestamp to indicate the time of receipt. It then stores the full payload—including the original metadata and both timestamps—into a DynamoDB table named destination_table.End-to-End Flow Complete:At this point, the event has successfully traveled from an external HTTP request in us-east-1, through EventBridge, across regions, and been persisted in a DynamoDB table in us-west-2, completing the cross-region asynchronous processing workflow.To follow along, you will need access to an AWS account with sufficient permissions to create and manage the following services:This tutorial assumes a basic familiarity with the AWS Console.🔵 Part 1. Create resources in destination regionAt this first part of the tutorial, we will create resources for the POC in the destination region (Oregon — us-west-2)Step 1: Create a DynamoDB Table in the Destination RegionNext, we need a DynamoDB table in the destination region to store the processed messages.1.1. In the us-west-2 region, open the DynamoDB Console.1.2. Click .1.3. Provide the following settings:: destination_table: id (type: String)1.4. Leave all other settings at their default values to enable on-demand (serverless) capacity.1.5. Click .This table will receive and store the full payload, including both the source and destination timestamps.Step 2: Create Source and Destination Lambda FunctionsTo start, we need to set up two AWS Lambda functions in different regions: one for sending events (source) and one for receiving and processing them (destination).2.1. Navigate to the AWS Lambda Console.2.2. Click .2.3. Choose  and configure the function:Step 3: Create the EventBridge Event Bus in the Destination RegionIn this step, you will configure a custom EventBridge event bus in the destination region (us-west-2). This bus will serve as the receiving endpoint for events routed from the source region, enabling cross-region event processing.3.1. Open the Amazon EventBridge Console in the us-west-2 region.3.2. In the left navigation go to , click at .3.3. Enter the following name: poc-eventbridge-cross-region-destination-bus3.4. Define , as the following policy:{  "Version": "2012-10-17",    {      "Sid": "AllowAccountToPutEvents",      "Effect": "Allow",        "AWS": "arn:aws:iam::123456789012:root"      "Action": "events:PutEvents",      "Resource": "arn:aws:events:us-west-2:123456789012:event-bus/poc-eventbridge-cross-region-destination-bus"    }}123456789012 with your actual AWS account ID and adjust the bus name if you are using a different naming convention.3.6. After pasting the policy, click  to finish creating the Event Bus.Your destination Event Bus is now ready to receive events from the source region via cross-region routing.Step 4: Create an EventBridge Rule to Trigger the Destination LambdaIn this step, we will configure an EventBridge rule that listens to custom events published on the source event bus and invokes the destination Lambda function directly when those events match a defined pattern.4.1. In the  created in the previous step (poc-eventbridge-cross-region-destination-bus), go to the  tab and click .4.2. Enter the following details:: poc-eventbridge-cross-region-destination-rule: Confirm that poc-eventbridge-cross-region-destination-bus is selected: Rule with an event pattern4.3. Under , configure the following:: Select . This is required for custom events sent using the PutEvents API.: Choose Custom pattern (JSON editor).{  "source": ["poc.eventbridge.crossregion"],  "detail-type": ["message-event"]}This pattern matches only the custom events emitted by the source Lambda function.4.4. Under , configure the following:: Select : Select : Choose : Select the destination-lambda function deployed in the destination region (us-west-2)4.5. Under , allow EventBridge to create a new execution role with permissions to invoke the Lambda.4.6. Leave other settings as default and click  to complete the setup.This rule is now ready to listen for events on the source bus and invoke the destination Lambda in another region when the event pattern matches.🔴 Part 2. Create Resources in Source RegionAt this Second part of the tutorial, we will create resources for the POC in the source region (N. Virginia — us-east-1)Step 5: Create the EventBridge Event Bus in the Source RegionIn this step, you will create a custom EventBridge Event Bus in the . This bus will explicitly receive events from the source Lambda function.5.1. Open the Amazon EventBridge Console in the us-east-1 region.5.2. In the left navigation pane, click .5.3. Choose .5.4. Enter the following name: poc-eventbridge-cross-region-source-bus5.5. Leave the resource-based policy section empty — it is not needed since the Lambda is publishing within the same account and region.5.6. Click  to finish creating the source Event Bus.This Event Bus will now be used by the source Lambda to explicitly publish events.Step 6: Create an EventBridge Rule to Route from Source to Destination BusNow that the source Event Bus is ready, we will create a rule in us-east-1 to match custom events and forward them to the destination Event Bus in us-west-2.6.1. In the  created in the previous step (poc-eventbridge-cross-region-source-bus), go to the  tab and click .6.2. Enter the following configuration:: poc-eventbridge-cross-region-source-rule: poc-eventbridge-cross-region-source-bus: Rule with an event pattern6.3. Under :: Select : Custom pattern (JSON editor){  "source": ["poc.eventbridge.crossregion"],  "detail-type": ["message-event"]}6.4. Under , choose Event bus in another account and region.: arn:aws:events:us-west-2:123456789012:event-bus/poc-eventbridge-cross-region-destination-busReplace 123456789012 with your actual AWS account ID.6.5. Leave all other settings as default and click .This rule now listens to events on the custom source Event Bus and forwards them across regions to the destination Event Bus.Step 7: Create Source Lambda Function7.1. Navigate to the AWS Lambda Console.7.2. Click .7.3. Choose  and configure the function:: source-lambda: Python 3.x (or your preferred runtime)Step 8: Create an API Gateway to Trigger the Source LambdaTo expose the source Lambda via HTTP, we will use Amazon API Gateway.8.1. In the us-east-1 region, navigate to the API Gateway Console.8.2. Choose  and click .8.3. Under , click at .8.4. Select POST as method type, choose  and select the source-lambda function.8.5. Use  button to deploy your API, define a desired stage.8.6. Under Stage tab, find the , you will need this url to test our implementation latter.Step 9: Test the End-to-End FlowOnce all components are deployed:9.1. Send a POST request to the API Gateway endpoint created in Step 2.{  "message": "Hello from the East!"9.2. Check the DynamoDB table poc-eventbridge-cross-region-destination_table in us-west-2 to verify the message was stored.This proof-of-concept validated Amazon EventBridge as a fast and reliable option for cross-region message replication. In our test, a message successfully traversed from us-east-1 to us-west-2 in approximately 634 milliseconds, highlighting the platform's low-latency performance.While we implemented a basic event pattern, EventBridge supports more advanced rules that enable rich, event-driven architectures. This includes content-based filtering and complex routing logic, allowing for greater flexibility within each event bus.Overall, this setup proves EventBridge’s capability to support scalable, asynchronous workflows across AWS regions using minimal, serverless infrastructure.If you found this guide helpful, stay connected for more insights on AI, cloud security, and AWS automation:]]></content:encoded></item><item><title>Cilium Egress Gateway API: Implementing as an in-built Security through Kernel</title><link>https://blog.devops.dev/cilium-egress-gateway-api-implementing-as-an-in-built-security-through-kernel-46d2670c2a7e?source=rss----33f8b2d9a328---4</link><author>Aryan Parashar</author><category>devops</category><pubDate>Sat, 28 Jun 2025 17:58:51 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[Kubernetes changed networking over pods and namespaces which was just limited to routing and security between the application which was controlled by pod networks using Network Policies.Cilium implements egress control at Layer 3/4, directly in the Linux kernel using eBPFWith Many solutions implemented, external connectivity tries to communicate with workloads living outside the Kubernetes Cluster which gets subjected to connectivity constraints and security enforcements.Traditional Firewalling usually relies on static IP Addresses, although in case of Kubernetes and Cloud workload we might also need to manage connectivity & Traffic management with Dynamic IPs, which can be managed by Cilium Egress Gateway API and combination of some other Spacemaker solutions or Cloud-Native Solution Projects.These traditional firewalling methods can make it really difficult to integrate a Kubernetes Cluster which has a varying and at the same time a dynamic number of nodes into such a network.Cilium Egress Gateway APICilium Egress Gateway API solve these all problems by specifying which nodes should be used by any particular pod in order to reach outside world.Traffic from these pods will be Source NATed to IP address of the node and will reach the external firewall with a predictable IP, enabling firewall to enforce right policy on a specific pod.In contrast to other Egress or Gateway API solutions, a Cilium Egress Gateway API:Requires Cilium kube-proxy replacementEnables connectivity between Kubernetes Cluster and traditional Firewall.Benefits of using Cilium Egress Gateway APICilium implements egress control at Layer 3/4, directly in the Linux kernel using eBPF, offering:Policy-based egress routing: You can define egress policies that route traffic based on pod labels, destination CIDRs, and even IP pools.IP Pooling: Assigns dynamic or static public egress IPs per node or pod group.Node-aware policies: You can ensure traffic is routed through a specific node with a public IP.Failover support: If a node becomes unavailable, Cilium can reroute via another gateway dynamically.No sidecar, no proxy overhead: Much lower latency and CPU usage.Integration with Gateway API (in progress/alpha): Brings declarative Kubernetes-native way of managing egress at CNI level.Implementing Cilium Egress Gateway APIHere’s an example which, we can also find from the official example given by the Cilium and Isovalent.Lets say we had 4 nodes as kind-worker, kind-worker2, kind-worker3, kind-worker4 with the 3rd and 4th node been planned to be deployed as Egress GatewayAPI. Now to handle the Egress Gateway functioning, we will carry out the following practices:Now as discussed for choosing which node to get deployed/bound with a pod for handling traffic, we’ll taint them from mistakenly scheduling any general-purpose podskubectl taint node kind-worker3 egress-gw:NoSchedule   kubectl taint node kind-worker4 egress-gw:NoScheduleLabel them for better monitoring and observability.kubectl label nodes kind-worker3 egress-gw=true   kubectl label nodes kind-worker4 egress-gw=trueAll the kind nodes are attached to Docker network called kind (Kubernetes in Docker) which use 172.18.0.0/16 IPV4 CIDR.docker network inspect -f '{{range.IPAM.Config}}{{.Subnet}}, {{end}}' kindCIDR is Classless Inter Domain Routing Method for allocating IP address on the internet, designed to improve efficiency and manage growth of internet’s routing table.Add a new Dummy interface eth0 to both the kind-workers 3 & 4 with new address 172.18.0.42/16 and then add it to kind-worker 3 and 4 who’s IPs will be used by Cilium.docker exec kind-worker3 ip link add net0 type dummy   docker exec kind-worker3 ip a add 172.18.0.42/16 dev net0   docker exec kind-worker3 ip link set net0 updocker exec kind-worker4 ip link add net0 type dummy   docker exec kind-worker4 ip a add 172.18.0.43/16 dev net0   docker exec kind-worker4 ip link set net0 upAdd Cilium and Egress Gateway API, disable Layer 7 proxy as its incomplete with Egress Gateway and attach two network interfaces to Egress Nodes called eth0 and net0.cilium install \     --version 1.17.1 \     --set kubeProxyReplacement=true \     --set egressGateway.enabled=true \     --set bpf.masquerade=true \     --set l7Proxy=false \     --set devices="{eth+,net+}"Verify also that Cilium was started with the Egress Gateway feature:cilium config view | grep egress-gatewaySetting up Egress Server and Egress PoliciesNeeds to be attached to kind network, and we will pass the allowed source IP addresses as environment variables:docker run -d \  --name remote-outpost \  -e ALLOWED_IP=172.18.0.42,172.18.0.43 \   quay.io/isovalent-dev/egressgw-whatismyip:latestRetrieve the container’s IP in a variable:OUTPOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' remote-outpost)echo $OUTPOSNow lets deploy two more pods in our external outpost and see if they responds according to the labels we attached to them:kubectl run tiefighter \     --labels "org=empire,class=tiefighter" \     --image docker.io/tgraf/netperf   kubectl run xwing \     --labels "org=alliance,class=xwing" \     --image docker.io/tgraf/netperfNow we will add a Gateway Policies egress-gw-policy.yaml to route traffic to the external workload running in the network.Resource to specify Cilium which Egress needs to be used for the traffci we’ll use: CiliumEgressGatewayPolicyThis will allow traffic to flow through one of the two Egress Nodes i.e. kind-worker3 or kind-worker4 .Here’s the egress-gw-policy.yaml file defined:apiVersion: cilium.io/v2kind: CiliumEgressGatewayPolicy  name: outpost  destinationCIDRs:  selectors:      matchLabels:  egressGateway:      matchLabels:    interface: net0Then deploy the definition file it to the workload:kubectl apply -f egress-gw-policy.yamlIf we try to deploy another pod with a new IP address with the org=alliance, then it will be accepted as it accepts the definition file policieskubectl run ywing \  --labels "org=alliance,class=ywing" \  --image docker.io/tgraf/netperfAccessing the external outpost server from the pods deployedkubectl exec -ti xwing -- \  curl --max-time 2 http://172.18.0.7:8000kubectl exec -ti tiefighter -- \  curl --max-time 2 http://172.18.0.7:8000kubectl exec -ti ywing -- \  curl --max-time 2 http://172.18.0.7:8000Here since the traffic exits through one of the first two IP addresses been listed thatswhy, this command will give a success result for one amongst the first 2 of the IP address.It will also give a success message with the 3rd IP address because it has org=alliance which matches with the policies been listed in the definition file for the Egress GatewayAPI.Access the outpost from the X-Wing a few times in a loop:for i in $(seq 1 10); do  kubectl exec -ti xwing -- \    curl --max-time 2 http://172.18.0.7:8000doneNote that traffic always exits the cluster from the same IP address, which means it always uses the same exit node.In Cilium OSS, Egress Gateway Policies are used to select a node for a traffic, and that node will always be used for that given traffic.For Managing the IP through which our traffic can exit, we will need to use High Availability type while defining our Cilium Egress Gateway API.Soon, I will be uploading another Blog on High Availability in Cilium Egress Gateway API and will also integrate other CloudNative Solutions like kube-vip, etc. Till then stay excited:If you like my Article then please react to it and connect with me on Linkedin & Twitter if you are also a tech enthusiast. I would love to collaborate with people and share the experience of tech😄😄.]]></content:encoded></item><item><title>The Complete CI/CD Pipeline Guide: Jenkins, Docker &amp; GitHub Automation (2025)</title><link>https://blog.devops.dev/the-complete-ci-cd-pipeline-guide-jenkins-docker-github-automation-2025-89479420e7fa?source=rss----33f8b2d9a328---4</link><author>Ashish Singh</author><category>devops</category><pubDate>Sat, 28 Jun 2025 17:58:45 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[An automated deployment system using Jenkins, Docker, Docker Compose, Git, and GitHub creates a powerful and flexible CI/CD pipeline. This…]]></content:encoded></item><item><title>DevSecOps : Pipeline in Jenkins with Email Notification</title><link>https://blog.devops.dev/devsecops-pipeline-in-jenkins-with-email-notification-0c7acfd0ce8f?source=rss----33f8b2d9a328---4</link><author>Saisamarth Udikeri</author><category>devops</category><pubDate>Sat, 28 Jun 2025 16:35:14 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[DevSecOps : Pipeline in Jenkins with Email NotificationIn this article we’ll walk through a complete CI/CD pipeline that integrates security scanning at every stage. We’ll use Jenkins for orchestration, OWASP Dependency-Check and Trivy for vulnerability detection, SonarQube for code quality and security rules, Docker for packaging, and ArgoCD for continuous deployment to Kubernetes.DevSecOps is the practice of integrating security “left” into every phase of the software delivery lifecycle — rather than bolting it on at the end. By embedding automated security checks into your CI/CD pipeline, you can:Catch vulnerabilities early (in code and dependencies) before merge or deployAutomate remediation feedback to developers and compliance overhead2. Overview of the PipelineBelow is a generic Jenkinsfile that implements:Update Kubernetes manifestspipeline {  agent any    nodejs 'NodeJS'    SONAR_PROJECT_KEY   = 'MyAppProject'    SONAR_SCANNER_HOME  = tool 'SonarScanner'    SONAR_TOKEN         = credentials('sonar-token')    OWASP_TOOL_HOME     = tool 'OWASP-CLI'    DOCKER_REPO         = 'myorg/myapp'    stage('Checkout') {        git branch: 'main',            url:    'https://github.com/myorg/myapp.git'      }    stage('Install & Build') {      steps {        sh 'npm run build'    }    stage('OWASP Dependency-Check') {      steps {        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {          sh """            ${OWASP_TOOL_HOME}/bin/dependency-check.sh \              --project "${SONAR_PROJECT_KEY}" \              --format XML \              --out reports/dependency-check          dependencyCheckPublisher(            pattern: 'reports/dependency-check/dependency-check-report.xml',            stopBuild: false        }    }    stage('SonarQube Analysis') {      when { expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } }        withSonarQubeEnv('SonarQube') {            ${SONAR_SCANNER_HOME}/bin/sonar-scanner \              -Dsonar.projectKey=${SONAR_PROJECT_KEY} \              -Dsonar.sources=src \              -Dsonar.host.url=${env.SONAR_HOST_URL} \              -Dsonar.login=${SONAR_TOKEN}        }      post {          waitForQualityGate abortPipeline: true      }    stage('Build Docker Image') {      when { expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } }        script {          def tag = "${DOCKER_REPO}:1.0.${env.BUILD_NUMBER}"          docker.build(tag)      }    stage('Trivy Container Scan') {      when { expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } }        script {          def tag = "${DOCKER_REPO}:1.0.${env.BUILD_NUMBER}"          sh """              --severity HIGH,CRITICAL \              --no-progress \              ${tag} > reports/trivy-report.txt          """      }        always {          archiveArtifacts artifacts: 'reports/trivy-report.txt', fingerprint: true        }    }    stage('Push to Registry') {      when { expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } }        script {          docker.withRegistry('', 'docker-creds') {            docker.image("${DOCKER_REPO}:1.0.${env.BUILD_NUMBER}").push()        }    }    stage('Update K8s Manifests') {      when { expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } }        withCredentials([usernamePassword(credentialsId: 'git-creds', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {            checkout([              branches: [[name: '*/main']],                url: 'https://github.com/myorg/k8s-manifests.git',                credentialsId: 'git-creds'              ]]            sh """              sed -i 's|image:.*|image: ${DOCKER_REPO}:1.0.${env.BUILD_NUMBER}|' deployment.yaml              git config user.email "ci@myorg.com"              git config user.name  "CI Bot"              git add deployment.yaml              git commit -m "Update image to 1.0.${env.BUILD_NUMBER}"              git push origin main          }      }      steps {        sh "docker rmi ${DOCKER_REPO}:1.0.${env.BUILD_NUMBER} || true"      }  }    success {        attachLog: true,        attachmentsPattern: 'dependency-check-report/*.html, dependency-check-report/*.xml, trivy-scan-report.txt',        from:    name@gmail.com',        to:      name@gmail.com',        subject: "✅ Build #${env.BUILD_NUMBER} of ${env.JOB_NAME} Succeeded",        body: """            <body>              <h2 style="color: green;">Build Succeeded!</h2>              <p><strong>Project:</strong> ${env.JOB_NAME}</p>              <p><strong>Build Number:</strong> ${env.BUILD_NUMBER}</p>              <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>              <p><strong>Preview Site:</strong> <a href="site">site/</a></p>            </body>        """    }      emailext(        attachmentsPattern: 'dependency-check-report/*.html, dependency-check-report/*.xml, trivy-scan-report.txt',        from:    name@gmail.com',        to:      name@gmail.com',        subject: "❌ Build #${env.BUILD_NUMBER} of ${env.JOB_NAME} Failed",        mimeType: 'text/html',          <html>              <h2 style="color: red;">Build Failed!</h2>              <p><strong>Project:</strong> ${env.JOB_NAME}</p>              <p><strong>Build Number:</strong> ${env.BUILD_NUMBER}</p>              <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>              <p>Please review the console output and attached reports for details.</p>          </html>      )  }Use Docker Compose to stand up Jenkins with Docker‐in‐Docker support:version: '3.8'services:    image: jenkins/jenkins:lts    ports:      - "50000:50000"      - DOCKER_GID=${DOCKER_GID}      - /var/run/docker.sock:/var/run/docker.sock      - /usr/bin/docker:/usr/bin/docker on host and export DOCKER_GID. with docker-compose up -d. (e.g. “NodeJS 14.x”)Git (username/password or PAT)Deploy a SonarQube + PostgreSQL stack via Docker Compose:version: '3'services:    image: sonarqube:lts-community      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar      SONAR_JDBC_USERNAME: sonar      SONAR_JDBC_PASSWORD: sonar      - "9001:9000"      - ./conf:/opt/sonarqube/conf      - ./data:/opt/sonarqube/data      - ./extensions:/opt/sonarqube/extensions      - ./logs:/opt/sonarqube/logs      - ./temp:/opt/sonarqube/temp    image: postgres:13      POSTGRES_USER: sonar      POSTGRES_DB: sonar      - ./postgresql_data:/var/lib/postgresql/data and chown 1000:1000. with docker-compose up -d. at http://<host>:9001 (admin/admin). and ; add to Jenkins as secret.5. OWASP Dependency-Check in Jenkins the OWASP Dependency-Check plugin. the CLI tool and add it in Manage Jenkins → Global Tool Configuration. the tool by name (OWASP-CLI) in your Jenkinsfile. the XML report with dependencyCheckPublisher.6. Trivy Container ScanningTrivy is a simple vulnerability scanner for containers:trivy image --severity HIGH,CRITICAL --exit-code 1 myorg/myapp:latest Trivy on your Jenkins agent (apt, brew or binary download). the plain-text report for audit.7. Continuous Deployment with ArgoCDArgoCD lets you declaratively push Kubernetes manifests:kubectl create namespace argocdkubectl apply -n argocd \  -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yamlkubectl patch svc argocd-server \  -p '{"spec": {"type": "LoadBalancer"}}' for sync and rollbacks. (argocd login <server>) and  your Git repo. an App that points at myorg/k8s-manifests.By combining Jenkins, SonarQube, OWASP Dependency-Check, Trivy and ArgoCD, you get a fully automated, policy-enforced DevSecOps pipeline. Shift security left, automate compliance, and deliver faster with confidence. Feel free to fork the sample repos and adapt the placeholders (MyAppProject, myorg/myapp, etc.) to kick off your own secure delivery process today!]]></content:encoded></item><item><title>Stop Using Loops in JavaScript: 6 Smarter, Cleaner Alternatives You Should Know</title><link>https://blog.devops.dev/stop-using-loops-in-javascript-6-smarter-cleaner-alternatives-you-should-know-1b3984e24694?source=rss----33f8b2d9a328---4</link><author>David Lam</author><category>devops</category><pubDate>Sat, 28 Jun 2025 16:35:09 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>A Practical Guide to Common Podman Commands — Part 2</title><link>https://blog.devops.dev/a-practical-guide-to-common-podman-commands-part-2-8a3e6633308a?source=rss----33f8b2d9a328---4</link><author>Vijayasekhar Deepak</author><category>devops</category><pubDate>Sat, 28 Jun 2025 16:35:05 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[In this blog, I will share the list of mostly used podman commands for your development. This blog is part of the Podman series on how to…]]></content:encoded></item></channel></rss>