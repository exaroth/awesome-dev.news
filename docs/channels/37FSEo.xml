<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Rust</title><link>https://www.awesome-dev.news</link><description></description><item><title>Optimizing Rust Compilation: Smaller, Faster, or Both?</title><link>https://dev.to/leapcell/optimizing-rust-compilation-smaller-faster-or-both-16pe</link><author>Leapcell</author><category>dev</category><category>rust</category><category>devto</category><pubDate>Sun, 23 Feb 2025 08:18:56 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[You have completed writing a Rust project and are now working on compilation. How can you make the compiled file as small as possible? How can you make it run as fast as possible? Or how can you achieve both small size and high speed?You may have these considerations:: Suitable for embedded development, where the project is small and not complex, and execution speed is already fast. The main goal is to reduce the file size as much as possible.Maximizing execution speed: Suitable for network services where file size is not a concern, but maximizing concurrency is the top priority.Balancing both size and speed: A middle ground that is suitable for various types of projects.You only need to add the following configuration to your  file and run:
  
  
  Generate a Smaller Executable

  
  
  Generate a Faster Executable

  
  
  Balance Between Size and Speed

  
  
  Explanation of Configurations
: Specifies the level of compiler optimizations.: No optimization, fastest compilation time.: Optimize for faster compilation.: Balance between compilation speed and runtime performance (default).: Optimize for maximum runtime performance.: Optimize for smaller code size.: Further optimize for code size, more aggressively than .: Use  to generate the smallest executable; use  to generate the fastest executable.: Enables Link Time Optimization (LTO).: Disable LTO (default).: Enable the most aggressive LTO.: Enabling LTO reduces binary size and improves runtime performance.  is a moderate choice, while  provides the best optimization but increases compilation time.: Controls the number of code generation units.: Usually . Setting it to  enables the highest level of optimization.: Reducing the number of code generation units gives the compiler more information for global optimizations, resulting in a smaller and faster executable. Setting it to  maximizes optimization but increases compilation time.: Controls panic behavior.: Unwind the stack (default).: Directly abort the process.: Using  reduces the executable size and improves performance in some cases since it eliminates the need for stack unwinding information.: Controls which debug and symbol information is removed.: Keep all information (default).: Remove debug information.: Remove symbol tables but retain necessary debug information.: Remove all optional information, including debug and symbol data.: Removing unnecessary debug and symbol information significantly reduces executable size.These are the optimization techniques for compiling a Rust project. Have you mastered them?Leapcell is the Next-Gen Serverless Platform for Web Hosting, Async Tasks, and Redis:Develop with Node.js, Python, Go, or Rust.Deploy unlimited projects for freepay only for usage — no requests, no charges.Unbeatable Cost EfficiencyPay-as-you-go with no idle charges.Example: $25 supports 6.94M requests at a 60ms average response time.Streamlined Developer ExperienceIntuitive UI for effortless setup.Fully automated CI/CD pipelines and GitOps integration.Real-time metrics and logging for actionable insights.Effortless Scalability and High PerformanceAuto-scaling to handle high concurrency with ease.Zero operational overhead — just focus on building.]]></content:encoded></item><item><title>Rust, ROS, and dynamic typing https://open.substack.com/pub/intrepidai/p/rust-ros-and-dynamic-typing?r=7n2a9&amp;utm_campaign=post&amp;utm_medium=web&amp;showWelcomeOnShare=false</title><link>https://dev.to/fgadaleta/rust-ros-and-dynamic-typing-42n9</link><author>frag</author><category>dev</category><category>rust</category><category>devto</category><pubDate>Sun, 23 Feb 2025 07:36:01 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Font for programming mathematics</title><link>https://www.reddit.com/r/rust/comments/1iw2ovd/font_for_programming_mathematics/</link><author>/u/okimusix</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sun, 23 Feb 2025 05:14:27 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[So I am a physics undergrad and I've been using Rust for a few years now. It's my favorite language and I use it for everything, from personal apps using Tauri to taking advantage of its speed for computations and using it in my school assignments.Since I often find myself writing math code, I found naming variables "lambda_squared", for example, looks really clunky and makes it harder to read the code. For this, I implemented a Live Templates group on RustRover that replaced lambda, for example, with its equivalent unicode character. However, Rust did complain a little.Finally, though, I found the solution. I had been trying to do this for a while with no luck, but I found a way to make it work. I used the ligature system on the FiraCode font to implement ligatures for every greek letter and some mathematical symbols, this way you get the readability of actual math, but for the compiler, it still looks like plain text. Here's an exampleThe text for the sum variable, for example, is just "SUMxu2", and both the compiler and I are happier. I don't know if anyone has done this before, I tried to look for it but never found anything. If you find this something that could be useful for you or others, I can share a link to a drive or something where you can download the font, as well as the guide to every symbol I included. If so, please comment and share your thoughts on this too :)]]></content:encoded></item><item><title>Streaming SQL in Stateful DataFlows</title><link>https://dev.to/debadyuti/streaming-sql-in-stateful-dataflows-3jng</link><author>Deb</author><category>dev</category><category>rust</category><category>devto</category><pubDate>Sat, 22 Feb 2025 22:37:35 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[
  
  
  Streaming SQL Functionality
SQL Streaming Queries and Stream Processing Operations is released in Stateful DataFlow Beta 7 running on Fluvio 0.15.2With SQL Streaming on Stateful DataFlow you can:Run ad-hoc queries on saved state objects and materialized views based live event streams.Use SQL queries to run stream processing operations in data flows.For those who are not aware of Fluvio or Stateful DataFlow yet:Stateful DataFlow - Stream processing layer built on Fluvio built using the wasm component model.
  
  
  SQL: From Static Tables to Streaming Data
Remember when SQL was the only way to talk to your data? It wasn't just a query language - it was  query language. But its story goes deeper than syntax.
  
  
  The Universal Language of Data
Just as merchants in medieval Mediterranean ports needed a shared language to trade (that's where "lingua franca" came from), the tech world needed SQL to make data accessible across different systems and teams.If you're in a room with a DBA, a data analyst, and a business analyst. What's the one language they all speak? Likely SQL.Look familiar? Whether you're running Oracle, Postgres, or MySQL, this just works. Well sort of!Three key factors made SQL a long-term utility that stood the test of time:
Instead of telling machines HOW to get data, you just say WHAT you want. SELECT * FROM users WHERE status = 'active' reads almost like English.
From startups to Fortune 500s, SQL skills travel. Write once, run anywhere - from healthcare to fintech.
Need to analyze sales data? Track user behavior? SQL's got you covered, backed by decades of tooling and optimization.In a world of Artificial Intelligence, Web3, and global markets, event streaming is no longer a luxury - it's a basic need. Ask yourself:Is your application combining data from multiple sources in real-time?Are your customers happy with stale insights?Do you need fresh data on demand?
  
  
  Bridging Static and Streaming
What if you could use familiar SQL syntax for real-time data processing? What if your team could leverage their existing SQL skills for stream processing?We've been exploring these questions and implementing solutions that bring SQL's simplicity to streaming data. Want to see how? Check out the full article where we dive into:Practical examples using NY Transit dataReal-world streaming SQL queries in actionHow to implement stream processing without learning a new language]]></content:encoded></item><item><title>Solving The Millionaires&apos; Problem in Rust</title><link>https://vaktibabat.github.io/posts/smpc_circuits/</link><author>/u/vaktibabat</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 22 Feb 2025 20:24:20 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Official /r/rust &quot;Who&apos;s Hiring&quot; thread for job-seekers and job-offerers [Rust 1.85]</title><link>https://www.reddit.com/r/rust/comments/1ivrkhs/official_rrust_whos_hiring_thread_for_jobseekers/</link><author>/u/DroidLogician</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 22 Feb 2025 19:59:34 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Welcome once again to the official r/rust Who's Hiring thread!Before we begin, job-seekers should also remember to peruse the prior thread.This thread will be periodically stickied to the top of r/rust for improved visibility. You can also find it again via the "Latest Megathreads" list, which is a dropdown at the top of the page on new Reddit, and a section in the sidebar under "Useful Links" on old Reddit.The thread will be refreshed and posted anew when the next version of Rust releases in six weeks.Please adhere to the following rules when posting:Don't create top-level comments; those are for employers.Feel free to reply to top-level comments with on-topic questions.Anyone seeking work should reply to my stickied top-level comment.Meta-discussion should be reserved for the distinguished comment at the very bottom.The ordering of fields in the template has been revised to make postings easier to read. If you are reusing a previous posting, please update the ordering as shown below.Remote positions: see bolded text for new requirement.To find individuals seeking work, see the replies to the stickied top-level comment; you will need to click the "more comments" link at the bottom of the top-level comment in order to make these replies visible.To make a top-level comment you must be hiring directly; no third-party recruiters.One top-level comment per employer. If you have multiple job openings, please consolidate their descriptions or mention them in replies to your own top-level comment.Proofread your comment after posting it and edit it if necessary to correct mistakes.To share the space fairly with other postings and keep the thread pleasant to browse, we ask that you try to limit your posting to either 50 lines or 500 words, whichever comes first.We reserve the right to remove egregiously long postings. However, this only applies to the content of this thread; you can link to a job page elsewhere with more detail if you like.Please base your comment on the following template:COMPANY: [Company name; optionally link to your company's website or careers page.]TYPE: [Full time, part time, internship, contract, etc.]LOCATION: [Where are your office or offices located? If your workplace language isn't English-speaking, please specify it.]REMOTE: [Do you offer the option of working remotely? Please state clearly if remote work is restricted to certain regions or time zones, or if availability within a certain time of day is expected or required.]VISA: [Does your company sponsor visas?]DESCRIPTION: [What does your company do, and what are you using Rust for? How much experience are you seeking and what seniority levels are you hiring for? The more details the better.]ESTIMATED COMPENSATION: [Be courteous to your potential future colleagues by attempting to provide at least a rough expectation of wages/salary. If you are listing several positions in the "Description" field above, then feel free to include this information inline above, and put "See above" in this field. If compensation is negotiable, please attempt to provide at least a base estimate from which to begin negotiations. If compensation is highly variable, then feel free to provide a range. If compensation is expected to be offset by other benefits, then please include that information here as well. If you don't have firm numbers but do have relative expectations of candidate expertise (e.g. entry-level, senior), then you may include that here. If you truly have no information, then put "Uncertain" here. Note that many jurisdictions (including several U.S. states) require salary ranges on job postings by law. If your company is based in one of these locations or you plan to hire employees who reside in any of these locations, you are likely subject to these laws. Other jurisdictions may require salary information to be available upon request or be provided after the first interview. To avoid issues, we recommend all postings provide salary information. You  state clearly in your posting if you are planning to compensate employees partially or fully in something other than fiat currency (e.g. cryptocurrency, stock options, equity, etc). Do  put just "Uncertain" in this case as the default assumption is that the compensation will be 100% fiat. Postings that fail to comply with this addendum . Thank you.]CONTACT: [How can someone get in touch with you?]]]></content:encoded></item><item><title>What are the odds that Rust is going to have a real competitor?</title><link>https://www.reddit.com/r/rust/comments/1ivqkj1/what_are_the_odds_that_rust_is_going_to_have_a/</link><author>/u/nikitarevenco</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 22 Feb 2025 19:15:59 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[By "Real Competitor" I mean: A language just like Rust with similar goals, but one that people actually prefer to Rust. So it would be a fast, low-level memory safe language with great tooling, great type system and other benefits that Rust offers. But it would need to be better than Rust to actually catch onThis language needs to offer real advantages over Rust to be considered. Of course since Rust has a huge ecosystem that is growing rapidly, it may take a long time. But I am talking on a timescale of 25+ years.Creating a new programming language to compete with Rust would be a massive undertaking and there would have to be some real reason to do it. Rust may be missing some features like higher-kinded types, named function arguments and such but to really catch on the language would need to offer some extremely important feature that Rust doesn't have, as well as offering all of Rust's benefits at the same time.Is there any such language currently in early development? Or perhaps, what would such a language have to look like?]]></content:encoded></item><item><title>Gitoxide in February</title><link>https://github.com/GitoxideLabs/gitoxide/discussions/1855</link><author>/u/ByronBates</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 22 Feb 2025 16:47:54 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Rustaceans, What are your thoughts on Gleam?</title><link>https://www.reddit.com/r/rust/comments/1ivjcus/rustaceans_what_are_your_thoughts_on_gleam/</link><author>/u/nikitarevenco</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 22 Feb 2025 14:00:48 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[I've been writing Rust for a couple months. I absolutely love its monads like Result and Option, pattern-matching, private-by-default, the friendly compiler and its type system. I took a quick look at Gleam and it seems to have those features as well. Its syntax heavily reminds me of Rust's, the major distinction is that Gleam is much higher level (No lifetimes, for example), and also it is a purely functional language. It is still relatively new.For those who have tried it, what do you think about it? Are there situations where you will prefer Gleam over Rust and why. ]]></content:encoded></item><item><title>Distributed system courses in Rust?</title><link>https://www.reddit.com/r/rust/comments/1ivgbko/distributed_system_courses_in_rust/</link><author>/u/FeelingAttempt55</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 22 Feb 2025 11:00:35 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[I am currently following the pingcap course to learn distributed systems with Rust. So far, I am really enjoying the course, but the course is 5 years old, could you guys suggest some other project-based and more up-to-date courses? ]]></content:encoded></item><item><title>Confused about &quot;NEW&quot; Rust feature in - Closures in async functions</title><link>https://www.reddit.com/r/rust/comments/1ivdmek/confused_about_new_rust_feature_in_closures_in/</link><author>/u/DataBora</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 22 Feb 2025 07:45:38 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[I am reading how new Rust feature is comming for using closures in Async functions. || async whaterver...In my Elusion library implementation i have PipelineScheduler function signature: ```rust pub async fn new<F, Fut>(frequency: &str, job: F) -> ElusionResult<Self> where F: Fn() -> Fut + Send + Sync + 'static, Fut: Future<Output = ElusionResult<()>> + Send + 'static ``` and then for Job creation:```rust let job = Job::new_async(&cron, move |uuid, mut l| { let job_fn = job_fn.clone(); Box::pin(async move { let future = job_fn(); future.await.unwrap_or_else(|e| eprintln!("❌ Job execution failed: {}", e)); let next_tick = l.next_tick_for_job(uuid).await; match next_tick { Ok(Some(ts)) => println!("Next job execution: {:?} UTC Time", ts), _ => println!("Could not determine next job execution"), } }) }).map_err(|e| ElusionError::Custom(format!("❌ Job creation failed: {}", e)))?; ``` which user can use like this:let scheduler = PipelineScheduler::new("5min", || async {}) How this new feature will be different?]]></content:encoded></item><item><title>Announcing async-local 3.0 now with async closure support</title><link>https://www.reddit.com/r/rust/comments/1iv8o6v/announcing_asynclocal_30_now_with_async_closure/</link><author>/u/Jester831</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 22 Feb 2025 02:45:35 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Async-local enables thread locals to be used in an async context across await points or within blocking threads managed by the Tokio runtime without the overhead of `Arc`. The way this is accomplished is by using generativity to create unique invariant lifetimes so that borrows to TLS can't be coerced to a `&'static` lifetime and by configuring the runtime with a barrier to rendezvous worker threads during shutdown. This shutdown barrier makes it such that runtime tasks never outlive TLS data owned by worker threads; this makes every invariant lifetime guaranteed to be valid until no tasks remain. Blocking threads managed by the Tokio runtime cannot outlive worker threads with this configuration, and so pointers to TLS from worker threads can be safely moved to these blocking threads with the lifetime constrained. As the lifetimes cannot be coerced into `&'static`, moving onto other threads is prevented. This crate downgrades to using `Arc` whenever the `barrier-protected-runtime` feature is not enabled, making it the end users choice to opt into this optimization by using async_local to configure the runtime shutdown barrier. ]]></content:encoded></item><item><title>Ring is unmaintained</title><link>https://rustsec.org/advisories/RUSTSEC-2025-0007.html</link><author>/u/technobicheiro</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 22 Feb 2025 00:44:58 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[This advisory has been withdrawn and should be ignored. It is kept only for reference.The author has announced an indefinite hiatus in its development, noting that
any reported security vulnerabilities may go unaddressed for prolonged periods
of time.After this advisory was published, the author graciously agreed to give
access to the rustls team. The rustls team is committed to providing
security (only) maintenance for  for the foreseeable future.Advisory available under CC0-1.0
    license.

    
    ]]></content:encoded></item><item><title>Rust Rant Contest: std::io::Error, the oversized junk drawer of failure</title><link>https://www.reddit.com/r/rust/comments/1iv3rb3/rust_rant_contest_stdioerror_the_oversized_junk/</link><author>/u/OliveTreeFounder</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Fri, 21 Feb 2025 22:33:02 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[I've been coding in Rust for five years, and  has never been anything but a headache. The error code? Never useful. It’s impossible to handle—too big, too vague—so we all end up just passing this bloated mess back to the caller without even knowing what’s inside or what actually caused the error.But it gets worse. Traits, instead of being parameterized over an  type, just return Result<..., std::io::Error>. Once a trait like this becomes popular—like  or —you're stuck. You can’t handle errors properly unless you rewrite every crate that depends on these traits. is a contagious disease infecting the entire ecosystem. We need to stop this pandemic!]]></content:encoded></item><item><title>[First crate] derive_regex: construct a type by parsing a string with regular expressions</title><link>https://www.reddit.com/r/rust/comments/1iuzg1i/first_crate_derive_regex_construct_a_type_by/</link><author>/u/TitaniumBrain</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Fri, 21 Feb 2025 19:31:27 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[I had an idea and decided it was simple enough to publish my first crate and contribute to the Rust ecosystem.I'm still relatively new to Rust (coming from a few years of Python but I fell in love with the language), so any feedback is welcome. I'm confident my code isn't , but I want to make sure I follow best practices and learn about any Rust .Using this crate - and the associated derive proc macro - you can derive  on an enum or struct to automatically derive the  constructor method.Copied from the readme, here's a couple examples if you don't to click away from Reddit:```rust use derive_regex::FromRegex;pattern = r"^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) \[(?P<level>[A-Z]+)\] (?P<message>.+)$" )] struct LogEntry { timestamp: String, level: String, message: String, }fn main() { let log = "2025-02-20 15:30:00 [INFO] Server started successfully"; let entry = LogEntry::parse(log).expect("Failed to parse log entry"); println!("Parsed log entry: {:#?}", entry); // Parsed log entry: LogEntry { // timestamp: "2025-02-20 15:30:00", // level: "INFO", // message: "Server started successfully", // } } ``````rust use derive_regex::FromRegex;enum CookingCommand { // Parses a command like "chop 3 carrots" #[regex(pattern = r"chop (?P<quantity>\d+) (?P<ingredient>\w+)")] Chop { quantity: u32, ingredient: String },// Parses a command like "boil for 10 minutes" #[regex(pattern = r"boil for (?P<minutes>\d+) minutes")] Boil(u32), // Parses a command like "bake at 375.0 degrees for 25 minutes" #[regex(pattern = r"bake at (?P<temperature>\d+\.\d+) degrees for (?P<minutes>\d+) minutes")] Bake { temperature: f64, minutes: u32 }, // Parses a command like "mix salt and pepper" #[regex(pattern = r"mix (?P<ingredient1>\w+) and (?P<ingredient2>\w+)")] Mix { ingredient1: String, ingredient2: String, }, fn main() { let commands = [ "First, chop 3 carrots", "Don't forget to boil for 10 minutes", "I guess I'll bake at 375.0 degrees for 25 minutes", "mix salt and pepper now", ];for cmd in &commands { if let Ok(command) = CookingCommand::parse(cmd) { match command { CookingCommand::Chop { quantity, ingredient, } => { println!("Chop {} {}(s)", quantity, ingredient); } CookingCommand::Boil(minutes) => { println!("Boil for {} minutes", minutes); } CookingCommand::Bake { temperature, minutes, } => { println!("Bake at {} degrees for {} minutes", temperature, minutes); } CookingCommand::Mix { ingredient1, ingredient2, } => { println!("Mix {} and {}", ingredient1, ingredient2); } } } else { eprintln!("Failed to parse command: {}", cmd); } } // Chop 3 carrots(s) // Boil for 10 minutes // Bake at 375 degrees for 25 minutes // Mix salt and pepper ]]></content:encoded></item><item><title>Rust 🦀 DataFrame Library Elusion v3.3.0 is released 🚀 FIXED NORMALIZATION</title><link>https://www.reddit.com/r/rust/comments/1iuvnrr/rust_dataframe_library_elusion_v330_is_released/</link><author>/u/DataBora</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Fri, 21 Feb 2025 16:58:28 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Elusion is a high-performance DataFrame / Data Engineering / Data Analysis library designed for in-memory data formats such as CSV, JSON, PARQUET, DELTA, as well as for ODBC Database Connections for MySQL and PostgreSQL, as well as for Azure Blob Storage Connections, as well as for creating JSON files from REST API's which can be forwarded to DataFrame.]]></content:encoded></item><item><title>Borrow Checker Trauma</title><link>https://www.reddit.com/r/rust/comments/1iuthsl/borrow_checker_trauma/</link><author>/u/xwaxes</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Fri, 21 Feb 2025 15:27:37 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[I am using the term ‘borrow checker trauma’ for lack of a better word. A bit of context first; I have been using Rust for my personal web projects extensively but use Rails at work. So the problem is, whenever I am working on work projects and want to perform two or more operations on a variable, especially if I am passing it around or returning it, I always find myself taking a step back to consider if the ownership has moved before I remember that I am on Ruby and that doesn’t apply. Has anyone experienced this in other languages or on their daily workflow?]]></content:encoded></item><item><title>This month in Servo: new webview API, relative colors, canvas buffs, and more!</title><link>https://servo.org/blog/2025/02/19/this-month-in-servo/</link><author>/u/wuyuwei-tw</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Fri, 21 Feb 2025 12:53:26 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Servo now supports several new web API features:We’ve landed a bunch of  improvements: are a lot more useful now, with  now supporting  (@Taym95, #35040), , , and  (@Taym95, #34958).Servo aims to be an embeddable web engine, but so far it’s been a lot harder to embed Servo than it should be.For one, configuring and starting Servo is complicated.
We found that getting Servo running at all, even without wiring up input or handling resizes correctly, took  of Rust code (@delan, @mrobinson, #35118).
Embedders (apps) could only control Servo by sending and receiving a variety of “messages” and “events”, and simple questions like “what’s the current URL?” were impossible to answer without keeping track of extra state in the app.Contrast this with WebKitGTK, where you can write a minimal kiosk app with a fully-functional webview in  of C.
To close that gap, we’ve started reworking our embedding API towards something more idiomatic and ergonomic, starting with the concept embedders care about most: the .Our new webview API is controlled by calling methods on a  (@delan, @mrobinson, #35119, #35183, #35192), including navigation and user input.
Handles will eventually represent the lifecycle of the webview itself; if you have one, the webview is valid, and if you drop them, the webview is destroyed.Servo needs to call into the embedder too, and here we’ve started replacing the old EmbedderMsg API with a  (@delan, @mrobinson, #35211), much like the delegates in Apple’s WebKit API.
In Rust, a delegate is a  that the embedder can install its own  for.
Stay tuned for more on this next month!Other embedding improvements include:We’ve reworked Servo’s , making all prefs optional with reasonable defaults (@mrobinson, #34966, #34999, #34994).
As a result:The names of all preferences have changed; see the Prefs docs for a listEmbedders no longer need a  resource to get Servo runningServo’s networking is more efficient now, with the ability to cancel fetches for navigation that contain redirects (@mrobinson, #34919) and cancel fetches for <video> and <media> when the document is unloaded (@mrobinson, #34883).
Those changes also eliminate per-request IPC channels for navigation and cancellation respectively, and in the same vein, we’ve eliminated them for image loading too (@mrobinson, #35041).We’ve continued splitting up our massive script crate (@jdm, #34359, #35157, #35169, #35172), which will eventually make Servo much faster to build.We now run CI smoketests on OpenHarmony using a real device (@jschwe, @mukilan, #35006), increasing confidence in your changes beyond compile-time errors.We’ve also tripled our self-hosted CI runner capacity (@delan, #34983, #35002), making concurrent Windows and macOS builds possible without falling back to the much slower GitHub-hosted runners.Servo can’t yet run WebDriver-based tests on wpt.fyi, wpt.servo.org, or CI, because the  executor for the Web Platform Tests does not support testdriver.js.
 does, though, so we’ve started fixing test regressions with that executor with the goal of eventually switching to it (@jdm, #34957, #34997).Thanks again for your generous support!
We are now receiving  (−11.4% over December) in recurring donations.
With this money, we’ve been able to expand our capacity for self-hostedCIrunners on Windows, Linux, and macOS builds, halving  build times from over an hour to under 30 minutes!Servo is also on thanks.dev, and already  (+5 over December) that depend on Servo are sponsoring us there.
If you use Servo libraries like url, html5ever, selectors, or cssparser, signing up for thanks.dev could be a good way for you (or your employer) to give back to the community.As always, use of these funds will be decided transparently in the Technical Steering Committee.
For more details, head to our Sponsorship page.]]></content:encoded></item><item><title>I created A Easy to use Rust Web Framework</title><link>https://www.reddit.com/r/rust/comments/1iuplg1/i_created_a_easy_to_use_rust_web_framework/</link><author>/u/Rough_Shopping_6547</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Fri, 21 Feb 2025 12:20:17 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[I just published my  project!I realized there isn’t a single easy-to-use, plug-and-play Rust web framework out there (at least to my knowledge), so I decided to create my own.I'd love to hear your thoughts on it!]]></content:encoded></item><item><title>AVR microcontrollers are now officially maintained!</title><link>https://www.reddit.com/r/rust/comments/1iunfgx/avr_microcontrollers_are_now_officially_maintained/</link><author>/u/Patryk27</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Fri, 21 Feb 2025 09:59:17 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[AVRs are cute & tiny microcontrollers from Atmel - you might've heard about ATmega328p used in Arduino Uno, for example:Every week we're marching towards better AVR support in Rust and as of today I can proudly say: we don't need no `target.json`s anymore + we've got an official maintainer! (points finger at self)So far AVRs remain tier 3, but at least it's waay easier to use them now - just target `avr-none` and provide `-C target-cpu` so that rustc & llvm know which specific microcontroller you're building for; a couple of important codegen fixes are also coming together with rustc's upgrade to LLVM 20, hoping to wrap up on https://github.com/Rahix/avr-hal/pull/585 over the coming days.I'd like to take this moment to thank https://github.com/benshi001 for his continued support and code reviews on the LLVM's side - let AVR flourish!]]></content:encoded></item><item><title>Sponsoring Rust Developers</title><link>https://www.reddit.com/r/rust/comments/1iun7oj/sponsoring_rust_developers/</link><author>/u/szabgab</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Fri, 21 Feb 2025 09:44:08 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[One of the "findings" of my previous question was that some crates are missing or not mature enough to be used.If you would like to use Rust you can hope that those gaps will be closed in time or you can do something about it. If you have the time and expertise you can get involved in the needed projects, but there is a much easier and less time-consuming way. You and/or your company can sponsor the development efforts.Allocating 10-20 USD / month by an individual or 1000-2000 USD month by a small company does not sound like a big investment and many such sponsors can make a huge difference together.One way to find who to sponsor is to find the developers of your dependencies. For that visit the Explore GitHub Sponsors page. On the left-hand side select the "Cargo" ecosystem. That will show you the individuals and the organizations that you currently rely upon that also accept sponsorship.I've also created a page listing some of the people and project who develop Rust and could be sponsored. For some of them I've also included background information.]]></content:encoded></item><item><title>Linus Torvalds responds to Christoph Hellwig</title><link>https://lore.kernel.org/rust-for-linux/CAHk-=wgLbz1Bm8QhmJ4dJGSmTuV5w_R0Gwvg5kHrYr4Ko9dUHQ@mail.gmail.com/</link><author>/u/bik1230</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Fri, 21 Feb 2025 02:30:34 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>[Media] Rust powered flight radar</title><link>https://www.reddit.com/r/rust/comments/1iubs4r/media_rust_powered_flight_radar/</link><author>/u/Confident-Alarm-6911</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Thu, 20 Feb 2025 22:47:42 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[So, consider this mix: I have thing for retro-interfaces with monochromatic displays, I wanted to learn rust and do something with sdr radio, I live next to the airport. And that’s how my small radar comes to life 😎Hardware: ESP32C3, 1.5 inch i2c oled display, some encoder. RTL-SDR V4 running on my local linux machine and small endpoint to serve ADS-B data via http.Firmware written in rust 2021 edition. Libraries: mostly std and esp-idf-svc + rtos (not necessary, but I wanted to try it)I’m pretty content with this small project as it is my first attempt to build something in Rust. Now I want to design 3D printable case, do some polishing on software side, and publish it as open source.I wanted to post video but it says I can not do this in this community, so only pic]]></content:encoded></item><item><title>Why do temporaries need to explicitly borrowed?</title><link>https://www.reddit.com/r/rust/comments/1iu8jsn/why_do_temporaries_need_to_explicitly_borrowed/</link><author>/u/parkotron</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Thu, 20 Feb 2025 20:31:38 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[As a long time C++ dev, I feel it didn't take me very long to pick up Rust's reference semantics and borrowing rules, but there one place where I constantly find myself forgetting to include the : passing temporaries into functions taking references.fn foo(s: &str) { println!("The str is: {s}"); } fn bar() -> String { "temporary".to_string() } fn main() { foo(&bar()); // ^ I always forget this ampersand until reminded by the compiler. } Rust's explicit  and  operators make a lot of sense to me: given a chunk of code, it should be obvious where a value has been borrowed and what kind of borrow it is. One should never be surprised to learn a reference was taken, because it's right there in the code.But in the case of temporary values, it really doesn't matter, does it? Whatever a function call does (or doesn't) do to a temporary value passed to it, the effect cannot be observed in the surrounding code, since the temporary is gone by the end of the statement.Is there a subtlety I'm missing here? Does that ampersand on a temporary convey useful information to an experienced Rust dev? Or is it really just syntactic noise, as it seems to me? Are there corner cases I'm just not considering? Could a future edition of Rust be changed to implicitly borrow from temporaries (like it implicitly borrows to make method calls)? Is my mental model just wrong?To be perfectly clear, this isn't a criticism, just curiosity. Clearly a lot of thought has been put into the language's design and syntax. This is just the only place I've encountered where Rust's explicitness doesn't feel completely justified.]]></content:encoded></item><item><title>TwinSong: Jupyter notebook built from scratch in Rust</title><link>https://www.reddit.com/r/rust/comments/1iu5tpa/twinsong_jupyter_notebook_built_from_scratch_in/</link><author>/u/winter-moon</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Thu, 20 Feb 2025 18:40:46 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[I've spent a lot of time working with Python in Jupyter notebooks, but one thing has always bothered me: the way code and outputs are mixed together. While this is great for tutorials and interactive documentation, it's less ideal for exploratory work or data processing, where I just want to interact with Python without the constraints of a document-style interface. To address this, I created TwinSong, a Jupyter alternative that separates code and outputs. Right now, it's primarily a UX experiment, but core features like editing and executing cells are already in place. Instead of modifying Jupyter's existing codebase, I built it from scratch with a React frontend and a Rust backend.While performance wasn't the main focus, implementing a Python kernel driver in Rust keeps the kernel clean and avoids loading Python dependencies that might interfere with user code. Plus, as we've seen with other projects, rewriting classic Python tools in Rust can open up new possibilities.]]></content:encoded></item><item><title>Announcing Rust 1.85.0 and Rust 2024 | Rust Blog</title><link>https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html</link><author>/u/slanterns</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Thu, 20 Feb 2025 17:11:19 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[The Rust team is happy to announce a new version of Rust, 1.85.0. This stabilizes the 2024 edition as well.
Rust is a programming language empowering everyone to build reliable and efficient software.If you have a previous version of Rust installed via , you can get 1.85.0 with:If you'd like to help us out by testing future releases, you might consider updating locally to use the beta channel () or the nightly channel (). Please report any bugs you might come across!We are excited to announce that the Rust 2024 Edition is now stable!
Editions are a mechanism for opt-in changes that may otherwise pose a backwards compatibility risk. See the edition guide for details on how this is achieved, and detailed instructions on how to migrate.This is the largest edition we have released. The edition guide contains detailed information about each change, but as a summary, here are all the changes:The guide includes migration instructions for all new features, and in general
transitioning an existing project to a new edition.
In many cases  can automate the necessary changes. You may even find that no changes in your code are needed at all for 2024!Note that automatic fixes via  are very conservative to avoid ever changing the semantics of your code. In many cases you may wish to keep your code the same and use the new semantics of Rust 2024; for instance, continuing to use the  macro matcher, and ignoring the conversions of conditionals because you want the new 2024 drop order semantics. The result of  should not be considered a recommendation, just a conservative conversion that preserves behavior. people came together to create this edition. We'd like to thank them all for their hard work!Rust now supports asynchronous closures like  which return futures when called. This works like an  which can also capture values from the local environment, just like the difference between regular closures and functions. This also comes with 3 analogous traits in the standard library prelude: , , and .In some cases, you could already approximate this with a regular closure and an asynchronous block, like . However, the future returned by such an inner block is not able to borrow from the closure captures, but this does work with  closures:let mut vec: Vec<String> = vec![];

let closure = async || {
    vec.push(ready(String::from("")).await);
};
It also has not been possible to properly express higher-ranked function signatures with the  traits returning a , but you can write this with the  traits:use core::future::Future;
async fn f<Fut>(_: impl for<'a> Fn(&'a u8) -> Fut)
where
    Fut: Future<Output = ()>,
{ todo!() }

async fn f2(_: impl for<'a> AsyncFn(&'a u8))
{ todo!() }

async fn main() {
    async fn g(_: &u8) { todo!() }
    f(g).await;
    //~^ ERROR mismatched types
    //~| ERROR one type is more general than the other

    f2(g).await; // ok!
}
Hiding trait implementations from diagnosticsThe new #[diagnostic::do_not_recommend] attribute is a hint to the compiler to not show the annotated trait implementation as part of a diagnostic message. For library authors, this is a way to keep the compiler from making suggestions that may be unhelpful or misleading. For example:pub trait Foo {}
pub trait Bar {}

impl<T: Foo> Bar for T {}

struct MyType;

fn main() {
    let _object: &dyn Bar = &MyType;
}
error[E0277]: the trait bound `MyType: Bar` is not satisfied
 --> src/main.rs:9:29
  |
9 |     let _object: &dyn Bar = &MyType;
  |                             ^^^^ the trait `Foo` is not implemented for `MyType`
  |
note: required for `MyType` to implement `Bar`
 --> src/main.rs:4:14
  |
4 | impl<T: Foo> Bar for T {}
  |         ---  ^^^     ^
  |         |
  |         unsatisfied trait bound introduced here
  = note: required for the cast from `&MyType` to `&dyn Bar`
For some APIs, it might make good sense for you to implement , and get  indirectly by that blanket implementation. For others, it might be expected that most users should implement  directly, so that  suggestion is a red herring. In that case, adding the diagnostic hint will change the error message like so:#[diagnostic::do_not_recommend]
impl<T: Foo> Bar for T {}
error[E0277]: the trait bound `MyType: Bar` is not satisfied
  --> src/main.rs:10:29
   |
10 |     let _object: &dyn Bar = &MyType;
   |                             ^^^^ the trait `Bar` is not implemented for `MyType`
   |
   = note: required for the cast from `&MyType` to `&dyn Bar`
 and  for tuplesEarlier versions of Rust implemented convenience traits for iterators of  tuple pairs to behave like , with  in 1.56 and  in 1.79. These have now been  to more tuple lengths, from singleton  through to 12 items long, . For example, you can now use  to fanout into multiple collections at once:use std::collections::{LinkedList, VecDeque};
fn main() {
    let (squares, cubes, tesseracts): (Vec<_>, VecDeque<_>, LinkedList<_>) =
        (0i32..10).map(|i| (i * i, i.pow(3), i.pow(4))).collect();
    println!("{squares:?}");
    println!("{cubes:?}");
    println!("{tesseracts:?}");
}
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]
[0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561]
Updates to  has been deprecated for years, because it can give surprising results in some Windows configurations if the  environment variable is set (which is not the normal configuration on Windows). We had previously avoided changing its behavior, out of concern for compatibility with code depending on this non-standard configuration. Given how long this function has been deprecated, we're now updating its behavior as a bug fix, and a subsequent release will remove the deprecation for this function.These APIs are now stable in const contextsMany people came together to create Rust 1.85.0. We couldn't have done it without all of you. Thanks!]]></content:encoded></item><item><title>Rust 2024 Is Coming: baby steps</title><link>https://smallcultfollowing.com/babysteps/blog/2025/02/20/rust-2024-is-coming/?utm_source=atom_feed</link><author>/u/VorpalWay</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Thu, 20 Feb 2025 14:53:00 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[So, a little bird told me that Rust 2024 is going to become stable today, along with Rust 1.85.0. In honor of this momentous event, I have penned a little ditty that I’d like to share with you all. Unfortunately, for those of you who remember Rust 2021’s “Edition: The song”, in the 3 years between Rust 2021 and now, my daughter has realized that her father is deeply uncool and so I had to take this one on solo. Anyway, enjoy! Or, you know, suffer. As the case may be.In ChordPro format, for those of you who are inspired to play along.{title: Rust 2024}
{subtitle: }

{key: C}

[Verse 1]
[C] When I got functions that never return
I write an exclamation point [G]
But use it for an error that could never be
the compiler [C] will yell at me

[Verse 2]
[C] We Rust designers, we want that too
[C7] But we had to make a [F] change
[F] That will be [Fm]better
[C] Oh so much [A]better
[D] in Rust Twenty [G7]Twenty [C]Four

[Bridge]
[Am] ... [Am] But will my program [E] build?
[Am] Yes ... oh that’s [D7] for sure
[F] edi-tions [G] are [C] opt in

[Verse 3]
[C] Usually when I return an `impl Trait`
everything works out fine [G]
but sometimes I need a tick underscore
and I don’t really [C] know what that’s for

[Verse 4]
[C] We Rust designers we do agree
[C7] That was con- [F] fusing 
[F] But that will be [Fm]better
[C] Oh so much [A]better
[D] in Rust Twenty [G7]Twenty [C]Four

[Bridge 2]
[Am] Cargo fix will make the changes
automatically [G] Oh that sure sounds great...
[Am] but wait... [Am] my de-pen-denc-[E]-ies
[Am] Don’t worry e-[D7]ditions
[F] inter [G] oper [C] ate

[Verse 5]
[C] Whenever I match on an ampersand T
The borrow [G] propagates
But where do I put the ampersand
when I want to [C] copy again?

[Verse 6]
[C] We Rust designers, we do agree
[C7] That really had to [F] change
[F] That will be [Fm]better
[C] Oh so much [A]better
[D] in Rust Twenty [G7]Twenty [C]Four

[Outro]
[F] That will be [Fm]better
[C] Oh so much [A]better
[D] in Rust Twenty [G7]Twenty [C]Four

One more time!

[Half speed]
[F] That will be [Fm]better
[C] Oh so much [A]better
[D] in Rust Twenty [G7]Twenty [C]Four
]]></content:encoded></item><item><title>HN: cypher queries tips (Graph dbms)</title><link>https://dev.to/falkordb/hn-cypher-queries-tips-graph-dbms-hck</link><author>Dan Shalev</author><category>dev</category><category>rust</category><category>devto</category><pubDate>Thu, 20 Feb 2025 14:46:14 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[Writing performant Cypher queries isn’t just about syntax—it’s about understanding graph structures, optimizing query paths, and leveraging advanced features. At FalkorDB, we’ve seen how poorly optimized queries can bottleneck even the most robust systems.Most devs don’t realize inefficient Cypher queries often stem from broad MATCH patterns and missing indexes. ]]></content:encoded></item><item><title>Deep Dive into Rust Structs: A Comprehensive Guide</title><link>https://dev.to/sajiram_a4704bc095/deep-dive-into-rust-structs-a-comprehensive-guide-956</link><author>Sajiron</author><category>dev</category><category>rust</category><category>devto</category><pubDate>Thu, 20 Feb 2025 12:03:08 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[Structs in Rust are essential for organizing and managing complex data structures efficiently. This guide covers regular, tuple, and unit-like structs, along with advanced features such as generics, associated functions, lifetimes, and struct update syntax. Learn how to create structured, readable, and reusable Rust code with practical examples and best practices.]]></content:encoded></item><item><title>`#[derive(Deserialize)]` can easily be used to break your type&apos;s invariants</title><link>https://www.reddit.com/r/rust/comments/1itv4mw/derivedeserialize_can_easily_be_used_to_break/</link><author>/u/hpxvzhjfgb</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Thu, 20 Feb 2025 10:03:15 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Recently I realised that if you just put #[derive(Serialize, Deserialize)] on everything without thinking about it, then you are making it possible to break your type's invariants. If you are writing any unsafe code that relies on these invariants being valid, then your code is automatically unsound as soon as you derive .mod non_zero_usize { use serde::{Deserialize, Serialize}; #[derive(Serialize, Deserialize)] pub struct NonZeroUsize { value: usize, } impl NonZeroUsize { pub fn new(value: usize) -> Option<NonZeroUsize> { if value == 0 { None } else { Some(NonZeroUsize { value }) } } pub fn subtract_one_and_index(&self, bytes: &[u8]) -> u8 { assert!(self.value <= bytes.len()); // SAFETY: `self.value` is guaranteed to be positive by `Self::new`, so // `self.value - 1` doesn't underflow and is guaranteed to be in `0..bytes.len()` by // the above assertion. *unsafe { bytes.get_unchecked(self.value - 1) } } } } use non_zero_usize::NonZeroUsize; fn main() { let bytes = vec![5; 100]; // good let value = NonZeroUsize::new(1).unwrap(); let elem = value.subtract_one_and_index(&bytes); println!("{elem}"); // doesn't compile, field is private // let value = NonZeroUsize(0); // panics // let value = NonZeroUsize::new(0).unwrap(); // undefined behaviour, invariant is broken let value: NonZeroUsize = serde_json::from_str(r#"{ "value": 0 }"#).unwrap(); let elem = value.subtract_one_and_index(&bytes); println!("{elem}"); } I'm surprised that I have never seen anyone address this issue before and never seen anyone consider it in their code. As far as I can tell, there is also no built-in way in serde to fix this (e.g. with an extra  attribute) without manually implementing the traits yourself, which is extremely verbose if you do it on dozens of types.I found a couple of crates on crates.io that let you do validation when deserializing, but they all have almost no downloads so nobody is actually using them. There was also this reddit post a few months ago about one such crate, but the comments are just people reading the title and screeching "PARSE DON'T VALIDATE!!!", apparently without understanding the issue.Am I missing something or is nobody actually thinking about this? Is there actually no existing good solution other than something like serdev? Is everyone just writing holes into their code without knowing it?]]></content:encoded></item><item><title>Publishing a Crate is insanely easy</title><link>https://www.reddit.com/r/rust/comments/1ittsuf/publishing_a_crate_is_insanely_easy/</link><author>/u/max-t-devv</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Thu, 20 Feb 2025 08:27:03 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Basically the title, publishing a Rust crate is way easier than I expected. I wrote a CLI tool and assumed the process would be a pain, but it was literally just:Having dealt with the BS from other languages, this was a really nice surprise.Are there any gotchas or best practices you wish you knew before publishing?]]></content:encoded></item><item><title>This Week in Rust #587</title><link>https://this-week-in-rust.org/blog/2025/02/19/this-week-in-rust-587/</link><author>/u/seino_chan</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Thu, 20 Feb 2025 02:17:03 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[This week's crate is httpmock, which is quite unsurprisingly a HTTP mocking library for Rust.An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:No calls for testing were issued this week.No calls for testing were issued this week.No calls for testing were issued this week.If you are a feature implementer and would like your RFC to appear on the above list, add the new 
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!Some of these tasks may also have mentors available, visit the task page for more information.Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.This week's results were dominated by the update to LLVM 20 (#135763),
which brought a large number of performance improvements, as usually. There were also two other
significant improvements, caused by improving the representation of  values (#136593) and doing less work when formatting in  (#136828).Improvements ✅  (secondary)3 Regressions, 2 Improvements, 4 Mixed; 4 of them in rollups
50 artifact comparisons made in totalEvery week, the team announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.No RFCs entered Final Comment Period this week.No Cargo Tracking Issues or PRs entered Final Comment Period this week.No Language Team Proposals entered Final Comment Period this week.No Language Reference RFCs entered Final Comment Period this week.No Unsafe Code Guideline Tracking Issues or PRs entered Final Comment Period this week.Rusty Events between 2025-02-19 - 2025-03-19 🦀If you are running a Rust event please add it to the calendar to get
it mentioned here. Please remember to add a link to the event too.
Email the Rust Community Team for access.I have found that many automated code review tools, including LLMs, catch 10 out of 3 bugs.Despite a lamentable lack of suggestions, llogiq is properly pleased with his choice.]]></content:encoded></item><item><title>Announcing Rust 1.85.0 and Rust 2024</title><link>https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html</link><author>The Rust Release Team</author><category>dev</category><category>official</category><category>rust</category><pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate><source url="https://blog.rust-lang.org/">Rust Blog</source><content:encoded><![CDATA[The Rust team is happy to announce a new version of Rust, 1.85.0. This stabilizes the 2024 edition as well.
Rust is a programming language empowering everyone to build reliable and efficient software.If you have a previous version of Rust installed via , you can get 1.85.0 with:If you'd like to help us out by testing future releases, you might consider updating locally to use the beta channel () or the nightly channel (). Please report any bugs you might come across!We are excited to announce that the Rust 2024 Edition is now stable!
Editions are a mechanism for opt-in changes that may otherwise pose a backwards compatibility risk. See the edition guide for details on how this is achieved, and detailed instructions on how to migrate.This is the largest edition we have released. The edition guide contains detailed information about each change, but as a summary, here are all the changes:The guide includes migration instructions for all new features, and in general
transitioning an existing project to a new edition.
In many cases  can automate the necessary changes. You may even find that no changes in your code are needed at all for 2024!Note that automatic fixes via  are very conservative to avoid ever changing the semantics of your code. In many cases you may wish to keep your code the same and use the new semantics of Rust 2024; for instance, continuing to use the  macro matcher, and ignoring the conversions of conditionals because you want the new 2024 drop order semantics. The result of  should not be considered a recommendation, just a conservative conversion that preserves behavior. people came together to create this edition. We'd like to thank them all for their hard work!Rust now supports asynchronous closures like  which return futures when called. This works like an  which can also capture values from the local environment, just like the difference between regular closures and functions. This also comes with 3 analogous traits in the standard library prelude: , , and .In some cases, you could already approximate this with a regular closure and an asynchronous block, like . However, the future returned by such an inner block is not able to borrow from the closure captures, but this does work with  closures:let mut vec: Vec<String> = vec![];

let closure = async || {
    vec.push(ready(String::from("")).await);
};
It also has not been possible to properly express higher-ranked function signatures with the  traits returning a , but you can write this with the  traits:use core::future::Future;
async fn f<Fut>(_: impl for<'a> Fn(&'a u8) -> Fut)
where
    Fut: Future<Output = ()>,
{ todo!() }

async fn f2(_: impl for<'a> AsyncFn(&'a u8))
{ todo!() }

async fn main() {
    async fn g(_: &u8) { todo!() }
    f(g).await;
    //~^ ERROR mismatched types
    //~| ERROR one type is more general than the other

    f2(g).await; // ok!
}
Hiding trait implementations from diagnosticsThe new #[diagnostic::do_not_recommend] attribute is a hint to the compiler to not show the annotated trait implementation as part of a diagnostic message. For library authors, this is a way to keep the compiler from making suggestions that may be unhelpful or misleading. For example:pub trait Foo {}
pub trait Bar {}

impl<T: Foo> Bar for T {}

struct MyType;

fn main() {
    let _object: &dyn Bar = &MyType;
}
error[E0277]: the trait bound `MyType: Bar` is not satisfied
 --> src/main.rs:9:29
  |
9 |     let _object: &dyn Bar = &MyType;
  |                             ^^^^ the trait `Foo` is not implemented for `MyType`
  |
note: required for `MyType` to implement `Bar`
 --> src/main.rs:4:14
  |
4 | impl<T: Foo> Bar for T {}
  |         ---  ^^^     ^
  |         |
  |         unsatisfied trait bound introduced here
  = note: required for the cast from `&MyType` to `&dyn Bar`
For some APIs, it might make good sense for you to implement , and get  indirectly by that blanket implementation. For others, it might be expected that most users should implement  directly, so that  suggestion is a red herring. In that case, adding the diagnostic hint will change the error message like so:#[diagnostic::do_not_recommend]
impl<T: Foo> Bar for T {}
error[E0277]: the trait bound `MyType: Bar` is not satisfied
  --> src/main.rs:10:29
   |
10 |     let _object: &dyn Bar = &MyType;
   |                             ^^^^ the trait `Bar` is not implemented for `MyType`
   |
   = note: required for the cast from `&MyType` to `&dyn Bar`
 and  for tuplesEarlier versions of Rust implemented convenience traits for iterators of  tuple pairs to behave like , with  in 1.56 and  in 1.79. These have now been  to more tuple lengths, from singleton  through to 12 items long, . For example, you can now use  to fanout into multiple collections at once:use std::collections::{LinkedList, VecDeque};
fn main() {
    let (squares, cubes, tesseracts): (Vec<_>, VecDeque<_>, LinkedList<_>) =
        (0i32..10).map(|i| (i * i, i.pow(3), i.pow(4))).collect();
    println!("{squares:?}");
    println!("{cubes:?}");
    println!("{tesseracts:?}");
}
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]
[0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561]
Updates to  has been deprecated for years, because it can give surprising results in some Windows configurations if the  environment variable is set (which is not the normal configuration on Windows). We had previously avoided changing its behavior, out of concern for compatibility with code depending on this non-standard configuration. Given how long this function has been deprecated, we're now updating its behavior as a bug fix, and a subsequent release will remove the deprecation for this function.These APIs are now stable in const contextsMany people came together to create Rust 1.85.0. We couldn't have done it without all of you. Thanks!]]></content:encoded></item><item><title>Simulating the evolution of tiny neural networks.</title><link>https://github.com/kostareg/evolution-rs</link><author>/u/Most-Ice-566</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Wed, 19 Feb 2025 23:52:56 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Build your own SQLite in Rust, Part 5: Evaluating queries</title><link>https://blog.sylver.dev/build-your-own-sqlite-part-5-evaluating-queries?showSharer=true</link><author>/u/geoffreycopin</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Wed, 19 Feb 2025 22:27:21 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Typst 0.13 is out now</title><link>https://typst.app/blog/2025/typst-0.13/</link><author>/u/Frexxia</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Wed, 19 Feb 2025 22:06:24 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[With Typst 0.13, we wanted to improve the day-to-day experience of using Typst. We fixed some of the most long-standing bugs and made Typst even more flexible to use. And on top, we're shipping a first, experimental version of HTML export. It's been almost two years since Typst's open-source launch and the project has matured quite a bit since then. Typst 0.12's development cycle saw many large-scale changes to Typst's foundations. With Typst 0.13, we moved the focus to the day-to-day experience of using Typst. We made quality-of-life improvements all across and fixed some of the biggest paper cuts. But, of course, we also shipped some exciting new features!In this blog post, I'll walk you through the highlights of the release. If you prefer a more visual take on the topic, also check out the release video.For a comprehensive overview of all changes in the release, visit the changelog. If you're looking to upgrade your document to Typst 0.13, you can also skip ahead to the Migration section.Paragraphs and first-line indentThe work on  is what I'm most proud of in this release, but at the same time it's among the things that are least visible for users. What do I even mean with "semantic paragraphs?"Let me explain. Up until now, Typst considered  piece of text you wrote as a paragraph — be it a single word in a page header, a figure caption, or a page number. Just like paragraphs, these things can have spacing, break across lines, etc. Layout-wise they are not all that different from paragraphs.However, there  semantical differences. Only proper paragraphs should be counted when paragraphs are numbered (such as in legal texts). Only proper paragraphs should be announced by a screen reader as such. And even layout-wise there are differences; for instance, that only proper paragraphs should have first-line indent. While the layout routines for "just text" and a paragraph may be very similar, the second order effects of something being a proper paragraph are far-reaching.In version 0.13, Typst finally gains a better understanding of this distinction. Whether something is a paragraph or just text is decided based on a few simple rules about which you can read in the updated paragraph documentation.The most visible immediate effect of this work is that  can now be applied to all paragraphs instead of just consecutive ones, closing the most upvoted Typst bug. Semantic paragraphs are also crucial for the in-development HTML export and for planned future work on PDF accessibility.If you've created a table of contents with Typst's outline functionality before, you might remember that it always looked a bit bland. The default style had no indentation and rather tightly dotted leaders (leaders are the filler dots between a title and its page number).In Typst 0.13, the outline gets a full facelift while also becoming easier to customize. The new automatic indentation nicely aligns all titles and numberings across the whole outline, long titles have better-looking wrapping behavior, and we fixed a number of bugs.Since Typst 0.2, you could draw Bézier paths with the  function. However, the input format of this function was rather arcane. Rather than specifying pen movements as in an SVG, you had to specify directly points with their two control points. Moreover, the path function had a fatal flaw: You could not close a path and then keep on drawing. This is necessary to draw a shape with cutouts, as depicated below.The new  function fixes these flaws. It provides an easier-to-understand and more expressive interface. We also used this opportunity to change the name from  to  as we plan to repurpose the name  for a file path type in an upcoming release.Various functions in Typst load files, be it images, data loading functions, or plugins. Sometimes though, a little extra flexibility is needed, for example, to preprocess, generate, or inline data into a Typst document.For this reason, there are also  variants on various of the functions, e.g.  or . However, that approach didn't work so well when a path is expected in a set rule, as in theme. It also introduced duplication: All the properties of an image are also spelled out again in .Typst 0.13 revamps file handling to improve this unsatisfactory situation. All places where a path is expected now also support raw bytes instead. Typst will always interpret a string as a path and raw bytes as data. When trying to decode an image from a string, thus make sure to first convert it to bytes. Converting to bytes is cheap as Typst will internally reuse the memory from the string. It will even remember that the bytes came from a string to make conversions back to a string cheap as well!The existing  functions are now deprecated as they are not needed anymore. The  variants of data loading functions remain unchanged.With the new byte-taking  function (and previously ), you can generate images at runtime. However, the image function expects images in an encoded image exchange format like PNG or JPEG. Producing valid bytes for such a format in pure Typst code is prohibitively complicated. Meanwhile, plugins are unnecessarily bloated and slowed down if they have to include an image encoder.To streamline image generation workflows, Typst 0.13 thus brings support for loading images from uncompressed raw pixel data. To that end, the  parameter of the image function supports a new form, where the channel encoding and pixel width/height of the image can be specified. This feature is crucial for better scientific visualizations — think things like heatmaps.In version 0.8, Typst gained support for WebAssembly plugins — one of the features that would very likely still be a little blue "feature request" label if not for our fabulous open source community. Since then, plugins have become the backbone of various community packages. They're great because they bring the power and package ecosystem of all the languages that compile to WebAssembly right into Typst.They are also faster to execute than Typst code. Still, with heavy usage the time spent executing plugin code can make up a significant chunk of compile time. A simple way to improve this would've been to switch to a faster WebAssembly runtime (specifically, from  to ). However, taking on a dependency on a WebAssembly runtime with just-in-time compilation wasn't a spot we wanted to put Typst into. It would have reduced portability and security and increased the amount of third-party code Typst depends on by a lot.There was another way to speed up plugins: Since 0.12, Typst's layout engine is multi-threaded. Plugins didn't profit from this though as they couldn't be easily replicated across threads. This is a limitation we're lifting with 0.13. Typst will now automatically run plugins in multiple threads without any changes from plugin authors. This is possible because we require (and also already required in the past) plugin functions to be  This means that we can execute plugin functions out of order without a visible effect. For cases where purity is too limiting, Typst 0.13 introduces the new  API, which lets plugin authors deal with stateful operations in a sound way.The work on speeding up plugins was prioritized through a Typst open-source support contract. If you're using Typst in production at your company and are hitting any road blocks, please reach out to us!Single-letter strings in mathSince Typst's initial release,  would generate the letters "h" and "i" in upright style while  would result in an italic "h". It's one of the longest-standing bugs, which is curious because it  so easy to fix. Unfortunately, it was not. To see why, we need to take a look behind the scenes and understand how Typst views your equations.In Typst 0.12 and lower, the  in  is a text element like any other text in your document. A string like  is converted to content by becoming such a text element, too. While different syntactically,  and  thus used to yield identical content. Since  becomes italic by default,  did, too.Changing that by itself wouldn't have been too hard, but there is a third guest to the party: Symbols. The  in  is a symbol value. Like strings, symbols were up until now converted to content by becoming text elements. This means they work both in math and normal text (as ).For a long time, the issue was thus blocked on finding a general solution to the text element ambiguity — perhaps introducing a new  element for math-y text. That story isn't fully written yet, but for 0.13 we really wanted to fix the issue at hand. For this reason, we attempted to find a minimal solution that fixes the issue while leaving our options for further improvements open.The solution we came up with: Bare letters and symbols are now converted into an internal  which has auto-italics in math, but is transparently converted to normal text outside of math. Meanwhile, strings still generate text elements. With the planned unification of types and elements, this symbol element and the existing symbol type will naturally merge into one.Thanks to @wrzian for working on this!When text in different writing scripts is mixed, it's often important to have precise control over which text is typeset with which font. For example, Latin and Chinese text are almost always typeset with different fonts.This is quite problematic for CJK (Chinese, Japanese, Korean) Typst users which often have text that mix their native language and English. Typst 0.13 takes a first step to improve this situation. With the new  functionality, users can specify precisely for which character ranges a font should be used. This can, for example, be used to define in which font punctuation (which is present in both Latin and CJK fonts) is rendered.The  feature supports specifying a character set, either as a regular expression or one of the built-in ones. Currently, the only built-in set is , which should be specified for a Latin font that is  a CJK font in the fallback list. In the example below, we can put  first in the fallback chain while still having quotes render with With Typst 0.13's new  function, you can attach arbitrary text or binary files to your PDF. These embedded files can then be browsed in PDF viewers or extracted programmatically by third-party tools.When is this useful? One example, electronic invoicing, is ever more important as new EU legislation just came into force. While electronic invoices are typically in XML-based formats, it's often useful to still have a human-readable and printable invoice.With PDF file embedding, the XML invoice data can be inserted into the PDF itself, forming a hybrid invoice. Currently, there is still one missing piece in Typst's support for this: The PDF metadata must identify the document as an E-Invoice to other applications. We plan to add support for embedding arbitrary metadata like this in a future Typst release.A first look at HTML exportSaved for last is a particularly exciting topic: We've been starting work on HTML export! The feature is still very incomplete and only available for experimentation behind a feature flag, but there's already some stuff to see.Most of the markup and some of the other built-in functions like  and  already produce the appropriate HTML. Our focus is on producing semantically rich HTML that retains the structure of the input document. The HTML output should be accessible, human-readable, and editable by hand.
A  with some  A list
 with elements

A bit of text
  captionMy captionwill produce the following HTML output:Typst cannot always produce the perfect HTML automatically. Instead, it gives you full control by letting you generate raw HTML elements:
  attrsstyle
  A div with  inside!
To make your document portable across PDF and HTML, we're also introducing a  function that returns the current export format (either  or ). It is mainly intended for use in show rules, like below:The  function is contextual because the export target can vary within one compilation. How? With the  function, you can lay out part of your HTML document as an inline SVG, using Typst's normal layout engine. Within such a frame, the compilation target is  again, so that show rules produce the appropriate layout elements instead of HTML elements.A lot! For instance, currently, Typst will always output a single HTML file. Support for outputting directories with multiple HTML documents and assets, as well as support for outputting fragments that can be integrated into other HTML documents is planned.Typst currently also doesn't output any CSS, instead focusing fully on emitting semantic markup. You can of course write your own CSS styles and still benefit from sharing your content between PDF and HTML.In the future, we plan to give you the option of automatically emitting CSS, taking more of your existing set rules into account. More generally, we have a lot of plans for HTML export! Visit the tracking issue to learn more about them.In the CLI, you can experiment with HTML export by passing  or setting the  environment variable to . In the web app, HTML export is not yet available. It will become available once we think it's ready for general use.You can also use HTML export with . Typst will then automatically spin up a live-reloading HTTP server that serves your document.Work on Typst's HTML export is sponsored by NLNet. We are very grateful for their support! We also want to thank external contributor @01mf02 with whom we've thus far collaborated on HTML export through the NLNet grant. Unfortunately, we and him have since parted ways over technical differences. Nonetheless, we plan to increase the time and resources we put into HTML export, and we are very happy to have NLNet's continued support in this endeavor.Typst 0.13 ships with a number of deprecations and breaking changes. The changelog has a full account of all changes, but in this section you'll learn how to deal with the most common kinds of breakage.In Typst 0.8, types were promoted to proper values. As a result,  directly returns a type instead of a string since then. To make this change less disruptive, we also introduced a temporary compatibility behavior where types could be used like strings in some contexts (e.g.,  would be true). For implementation reasons, we did not add a warning for this at the time. We're rectifying this now and adding a warning to shake out remaining reliance on this behavior. With Typst 0.14, the compatibility behavior will be fully removed. int The  function and the  variants of data loading functions are now deprecated. You can instead directly pass bytes to the respective top-level functions instead. Read the section on files and bytes to learn more.The changes to the built-in outline (table of contents) improve the out-of-the-box style and customizability. Unfortunately, they also break some existing outline customizations.First of all, the  argument moved from  to . If you get the error "unexpected argument: fill", adjust your code as shown below: outlinefillfillBecause the  property is now on the entry, it can also be configured for individual outline levels, like this: outlineentrylevel outlinefillIn light of the changes to paragraphs, outline entries now show themselves as blocks instead of lines of text. This means spacing is now configured via normal show-set rules for . outlineentrylevelbelow outline it 
  it
   weakIn Typst 0.12 and below, outline entries expose a few fields like  and  that are useful for writing an outline entry show rule. These fields were derived from other fields for your convenience. Typst 0.13 makes this more explicit and idiomatic by turning them into methods. Read the documentation on outline customization for more details on how to use these methods. outline it 
  ...
  it outline it 
  ...
  itpage
The  function is superseded by the new  function. The  function has an easier-to-understand interface that's closer to how SVG and the HTML canvas work. Read the  function's documentation to learn how to express existing paths with the new function.The  type was renamed to . To migrate, simply replace  with . No further changes are necessary. The name  remains as a deprecated alias in Typst 0.13, but will be removed in an upcoming release.Why the rename? For once, the name  was very generic. The name  is more closely associated with what it expresses. Secondly, we're considering to repurpose the name  for what today are selectors once elements and types are unified.fillfillWe also removed a number of things that were already deprecated and warned for in Typst 0.12. This includes theThat's it for Typst 0.13. We hope you're just as excited about the release as we are!]]></content:encoded></item><item><title>Languages in the Linux kernel</title><link>https://dev.to/cies/languages-in-the-linux-kernel-43bf</link><author>Cies Breijs</author><category>dev</category><category>rust</category><category>devto</category><pubDate>Wed, 19 Feb 2025 22:06:22 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[The Linux kernel it written in many languages, but at the time of writing (2025) the main language of the project is C, clocking in at 98% (from github.com/torvalds/linux on 2025-02-19):I believe the only language —or more correct "language family"— in the Linux kernel that will always be there is Assembly. At some point you need to write code, without any abstraction, directly for the hardware. Assembly is just that.
  
  
  Allowing C++ in the kernel
I believe Linus was right to reject C++ for the following reaons:C++ is a gigantic language, allowing it would create an endless discussion on which of its features would be allowed/forbidden,being a loose superset of C it has the same archaic syntax, thus little improvement to the developer experience, andno matter how many features would be allowed C++ does not improve enough on C to offset the cost of porting it.In recent year one thing became clear: C is no longer the best tool for the job. It's still the best understood tool, especially by the current team. It's what 98% of the Linux kernel is written in today. But the "unchallenged best" status it used to have for so many years in pragmatic kernel development is shaky.Better languages have come up, specifically Zig and Rust.There has been a lot of discussion on allowing Rust in the kernel. But since the main honchos, Linus and Greg Kroah-Hartman, have put their weight behind it, it is clear that Rust will find it's way into the project. We still have to wait and see how much of the project will be written in Rust.Unlike C++, Rust has lots of features that are very useful in kernel development, and very few features that would need to be forbidden. Especially features related to memory safety, which constitute a large part of the bugs in Linux. Compared to C, Rust provides much a improved developer experience, which is not weird considering Rust is 40 younger.Rust's main downside is: slower compile times. Compile times matter very much, but so does safety. While this is a hard trade-off, the decision seems to be final: Rust is to stay in the Linux kernel.I expect Zig will come from another angle. The Zig compiler compiles C as well as Zig code. It's just a matter of time before the Zig compiler will be able to compile the Linux kernel. Once this is achieved, C-files can be ported to Zig one-by-one. I expect LLMs will help a great deal with the initial port of the Linux kernel's C code to Zig. Once in Zig, the code can be optimized by humans.Zig is very similar to C. This makes the initial port rather straight forward. LLMs will perform much better on C-to-Zig than on C-to-Rust. Compared to C, Zig brings serious improvements in the developer experience at similar-to-C compile times. Features like  are really cool and may allow the kernel project to do away with lots of crufty old C preprocessor macros on the one side, while allowing for interesting optimizations on the other.I expect we will have a Linux kernel in Zig, Rust and Assembly in 10 years. It may be a fork. It may be the Linux mainline: it all depends on the open-mindedness of the main devs.So far they seem up for it!]]></content:encoded></item><item><title>Rust Integration in Linux Kernel Faces Challenges but Shows Progress</title><link>https://thenewstack.io/rust-integration-in-linux-kernel-faces-challenges-but-shows-progress/</link><author>/u/CrankyBear</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Wed, 19 Feb 2025 17:26:50 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[When Miguel Ojeda, overseer of the Rust for Linux project, asked Hellwig to suggest an alternative, he replied that Rust developers should “Keep the wrappers in your code instead of making life painful for others.” Getting to the heart of the matter, in another Linux Kernel Mailing List (LKML) note, Hellwig wrote, “Maintaining multi-language projects is a pain I have no interest in dealing with. If you want to use something that’s not C, be that assembly or Rust, you write to C interfaces and deal with the impedance mismatch yourself.”Is Rust Harder for Maintainers?That doesn’t work for Hellwig, either. He replied, “I also do not want another maintainer.  If you want to make Linux impossible to maintain due to a cross-language codebase, do that in your driver so that you have to do it instead of spreading this cancer to core subsystems.”“Cancer,” thanks to Steve Ballmer’s criticism of Linux, has always been a red-letter term in Linux circles. A lot of heated words followed. I think senior Linux kernel developer Ted T’so, though, hit the nail on the head when he said that, Ultimately, Cristoph’s concern is that Rust is going to make life harder for maintainers because of particular build breaks getting in the way of the very limited bandwidth that Maintainers have. In short, it’s not so much that kernel maintainers think Rust is awful; they don’t have enough hours in the day to maintain their projects.‘Rust Device Driver Mess’Be that as it may, one maintainer, Asahi Linux lead developer Hector Martin, called on Torvalds to “pipe up with an authoritative answer” to resolve the Rust device driver mess. “If he doesn’t, Miguel and the other Rust folks should just merge this series once it is reviewed and ready, ignoring Christoph’s overt attempt at sabotaging the project.” When that didn’t work, Martin took to  “shaming on social media” to carry his point. Torvalds was not amused.Torvalds replied, “How about you accept the fact that maybe the problem is you? You think you know better. But the current process works. It has problems, but problems are a fact of life.  There is no perfect.” That said, Torvalds continued, “If we have issues in the kernel development model, then social media sure as hell isn’t the solution. The same way, it sure as hell wasn’t the solution to politics.”Lessons From Real-Time LinuxSo, what can be done moving forward with Rust and Linux? Senior real-time Linux developer Steven Rostedt suggested the Rust developers might follow in the footsteps of real-time Linux, which took twenty years to join the mainline Linux kernel; that was to “keep [Rust as]  an out of tree patch. … Yes, being out of tree is very difficult because you have to constantly rebase … But it also gives you full flexibility to try new approaches. Just because something is out of tree doesn’t mean it can’t be published and used. Red Hat and SUSE, as well as many others, shipped PREEMPT_RT while it was out of tree.”Since then, Ojeda published a “Rust kernel policy” document to clarify the status of Rust integration efforts. This move came in response to growing confusion and debate within the Linux community regarding the role of Rust in kernel development.This document addresses several crucial points, including kernel maintainers’ expected level of support. Ojeda noted that it continues to be up to each maintainer to decide how to deal with Rust. “Some subsystems may decide they do not want to have Rust code for the time being, typically for bandwidth reasons. This is fine and expected.” So, while some developers want Rust to move much more quickly into the kernel, Hellwig’s position is perfectly defendable.Indeed, Ojeda continued, “For Rust, a subsystem may allow to temporarily break Rust code. The intention is to facilitate the friendly adoption of Rust in a subsystem without introducing a burden to existing maintainers who may be working on urgent fixes for the C side. The breakage should nevertheless be fixed as soon as possible, ideally before the breakage reaches Linus.”Rust Integration With LinuxWhen it comes to Rust’s integration with Linux, unlike the tech mantra of “move fast and break things,” the rule is to “move slow and stabilize things.” After all, despite all the harsh words, Rust’s integration into Linux continued to move forward.Next merge window, hopefully, we will have PCI and platform drivers working, which will fully enable almost all driver subsystems to start accepting (or at least getting) rust drivers.  This is the end result of a lot of work from a lot of people, congrats to all of them for getting this far, you’ve proved many of us wrong in the best way possible, working code.”In short, for all the war of words, Rust’s movement into Linux continues to be slow, steady, and productive, as we can see in 6.13. Rust will find its place in Linux.]]></content:encoded></item><item><title>Why don&apos;t you use Rust at your company?</title><link>https://www.reddit.com/r/rust/comments/1ital1t/why_dont_you_use_rust_at_your_company/</link><author>/u/szabgab</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Wed, 19 Feb 2025 17:07:39 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[There are plenty of readers here who us Rust at their company, but I am sure there are also many who would like to use Rust in a professional setting, but can't. I would like to collect the excuses you get from your boss and the valid concerns and reasons you and your boss might have about Rust.I hope that knowing the issues will give us a better chance addressing them. ]]></content:encoded></item><item><title>How I Built a Local LLM-Powered File Reorganizer in Rust</title><link>https://dev.to/__87e2e207/how-i-built-a-local-llm-powered-file-reorganizer-in-rust-1bip</link><author>Евгений Перминов</author><category>dev</category><category>rust</category><category>devto</category><pubDate>Wed, 19 Feb 2025 15:20:29 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[Some time ago, I decided to dive into Rust —this must be my  attempt. I’d tried learning it before, but each time I either got swamped by the borrow checker or got sidetracked by other projects. This time, I wanted a small,  project to force myself to stick with Rust. The result is messy-folder-reorganizer-ai, a command-line tool for file organization powered by a local LLM.
  
  
  The Inspiration: A Bloated Downloads Folder
The main motivation was my messy  folder, which often ballooned to hundreds of files—images, documents, installers—essentially chaos. Instead of manually sorting through them, I thought, “Why not let an AI propose a structure?”While brainstorming, I stumbled upon the possibility of running LLMs , like Ollama or other self-hosted frameworks. I loved the idea of  my data to some cloud service. So I decided to build a Rust-based CLI that  a local LLM server for suggestions on how to reorganize my folders.
  
  
  Challenges: LLM & Large Folders
 I started using , but the responses didn’t follow prompt instructions well, so I switched to , which performed much better.
 When testing on folders with many files, the model began forgetting the beginning of the prompt and stopped following instructions properly. Increasing  (which defines the model’s context size) helped partially, but the model still struggles with .
 Split the file list into smaller chunks and send multiple prompts.
 If you’re an LLM expert—especially with local models like Ollama—I’d love advice on how to handle larger sets without hitting memory or context limits. Specify the local LLM endpoint, model name, or other model options.
 Tweak the AI prompt to fine-tune how the model interprets your folder’s contents.
 The tool shows you the proposed structure and asks for confirmation before reorganizing any files. I’d love code feedback — best practices, performance tips, or suggestions on how to structure the CLI.
 Any advice on optimizing local model inference for large file sets or advanced chunking strategies would be invaluable.This project has been a great way to re-learn some Rust features and experiment with local AI solutions. While it works decently for medium-sized folders, there’s plenty of room to grow. If this concept resonates with you—maybe your Downloads folder is as messy as mine—give it a try, open an issue, or contribute a pull request.
Feel free to reach out on the GitHub issues page, or drop me a note if you have any thoughts, suggestions, or just want to talk about Rust and AI!]]></content:encoded></item><item><title>How I Built a Local LLM-Powered File Reorganizer with Rust</title><link>https://dev.to/evgeniiperminov/how-i-built-a-local-llm-powered-file-reorganizer-in-rust-1bip</link><author>Evgenii Perminov</author><category>dev</category><category>rust</category><category>devto</category><pubDate>Wed, 19 Feb 2025 15:20:29 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[Some time ago, I decided to dive into Rust —this must be my  attempt. I’d tried learning it before, but each time I either got swamped by the borrow checker or got sidetracked by other projects. This time, I wanted a small,  project to force myself to stick with Rust. The result is messy-folder-reorganizer-ai, a command-line tool for file organization powered by a local LLM.
  
  
  The Inspiration: A Bloated Downloads Folder
The main motivation was my messy  folder, which often ballooned to hundreds of files—images, documents, installers—essentially chaos. Instead of manually sorting through them, I thought, “Why not let an AI propose a structure?”While brainstorming, I stumbled upon the possibility of running LLMs , like Ollama or other self-hosted frameworks. I loved the idea of  my data to some cloud service. So I decided to build a Rust-based CLI that  a local LLM server for suggestions on how to reorganize my folders.
  
  
  Challenges: LLM & Large Folders
 I started using , but the responses didn’t follow prompt instructions well, so I switched to , which performed much better.
 When testing on folders with many files, the model began forgetting the beginning of the prompt and stopped following instructions properly. Increasing  (which defines the model’s context size) helped partially, but the model still struggles with .
 Split the file list into smaller chunks and send multiple prompts.
 If you’re an LLM expert—especially with local models like Ollama—I’d love advice on how to handle larger sets without hitting memory or context limits. Specify the local LLM endpoint, model name, or other model options.
 Tweak the AI prompt to fine-tune how the model interprets your folder’s contents.
 The tool shows you the proposed structure and asks for confirmation before reorganizing any files. I’d love code feedback — best practices, performance tips, or suggestions on how to structure the CLI.
 Any advice on optimizing local model inference for large file sets or advanced chunking strategies would be invaluable.This project has been a great way to re-learn some Rust features and experiment with local AI solutions. While it works decently for medium-sized folders, there’s plenty of room to grow. If this concept resonates with you—maybe your Downloads folder is as messy as mine—give it a try, open an issue, or contribute a pull request.
Feel free to reach out on the GitHub issues page, or drop me a note if you have any thoughts, suggestions, or just want to talk about Rust and AI!]]></content:encoded></item><item><title>Building CSV RAG with Rig and Rust 🔥🔥🔥</title><link>https://dev.to/josh_mo_91f294fcef0333006/building-csv-rag-with-rig-and-rust-2bpi</link><author>Josh Mo</author><category>dev</category><category>rust</category><category>devto</category><pubDate>Wed, 19 Feb 2025 14:13:54 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[In this article, we're going to look at how you can use the  Rust AI framework to create an application that is able to load a CSV file, embed it into a vector store and have an LLM answer questions based on provided context from our vector store. We'll serve the application in the form of a command-line tool.Retrieval-Augmented Generation (RAG) is a technique that combines the power of information retrieval with the generative capabilities of large language models (LLMs). The process typically involves two main components: retrieving relevant knowledge from a pre-existing database or knowledge base and generating contextually accurate answers based on that information. When a question or query is posed, the model first retrieves relevant snippets or pieces of information from the knowledge base. It then augments its generative model with this newly acquired knowledge, enabling it to provide a more accurate, informed response.In contrast to traditional LLMs that rely purely on their trained parameters, RAG systems dynamically incorporate external data, ensuring that responses are grounded in factual and up-to-date knowledge. When a question is asked, the relevant knowledge from a pre-existing dataset is retrieved and fed into the model. The LLM then generates an answer that combines the retrieved information and its generative abilities, aiming to offer a detailed and accurate response. This hybrid approach allows RAG models to provide answers that are not only linguistically fluent but also well-supported by factual data.Next, you'll need to create a new project using :Before we start, let's add the relevant dependencies which we need:cargo add serde rig-core tokio csv 
serde/derive,tokio/macros,tokio/rt-multi-thread
This adds the following dependencies: - The rig library. - an asynchronous Rust runtime. We additionally add the  and  feature as we want to use the macro. - The Rust crate for using CSVs.Before we do anything else, we'll need to declare our struct type as well as derive the correct macros for it. Note that the embedding trait for Rig also depends on  (which also depends on ), hence the derivation.Next to be able to use Rig's embeddings API, we need to implement the  trait. This trait simply defines a method for what to embed. Because we don't have a singular field we want to embed and will need the whole record, we can simply just implement  for the struct then format the whole struct into a string (which we can then embed).Thankfully, embedding our CSV is actually quite easy now that we've done the hard part. We can create an OpenAI client and get the embedding model, then iterate through each record and build an embedding from it and store it in Rig's in-memory vector store.You can see below the code to generate an OpenAI client is fairly simple:We'll also keep the code for loading the CSV in as a separate function as it's relatively long.The next step will be to actually take input from the user and prompt the LLM using not only the prompt, but additional (relevant!) snippets from the vector store. We'll start by taking some input from standard input (i.e., you load up the application in the terminal, then you type in something and press Enter). We then check if the prompt is equal to  - if it is then immediately break the loop and close the application, if not, carry on and retrieve a response from the LLM.In terms of storing your conversation history, it is actually quite simple to do so. All you need to do is to create a  and then feed it into the agent, using the  function instead of . You then add a user message and assistant message (in that order) at the end of the loop iteration. This allows you to build up a conversation with the LLM.Additionally, we'll also add a  command which allows the entire conversation to be wiped should the user want to ask the LLM about something else.Now that we've set up a base for your command-line tool, here are a few ways you can extend this demo to do much more than just simple ragging:What about semantic routing to make sure your LLM stays on track?Try incorporating CSV RAG into a new, bigger pipeline!Thanks for reading! Hopefully you will have a good example of how to improve how you work with data by creating a RAG pipeline from your CSV.]]></content:encoded></item><item><title>[media] My first project on rust after learning basics.</title><link>https://www.reddit.com/r/rust/comments/1it5kwi/media_my_first_project_on_rust_after_learning/</link><author>/u/Independent_Row_6529</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Wed, 19 Feb 2025 13:33:56 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Hi. Have been learning Rust, for the last one month. Wrote this program for a digital clock in terminal with ANSI block character.Made an array to store the numbers written using the ansi codes - It was hard to align the block character for the output. Could this have been done differently?Are there any dependencies specifically for making terminal UIs?I'm also intending to add more features - to learn rust more. Please give some advice on that. Thanks in advance]]></content:encoded></item><item><title>Greg KH: Rust isn&apos;t a &quot;silver bullet&quot; that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn&apos;t we want that?</title><link>https://lore.kernel.org/rust-for-linux/2025021954-flaccid-pucker-f7d9@gregkh/</link><author>/u/SupermarketAntique32</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Wed, 19 Feb 2025 12:14:15 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Master Rust’s Ownership &amp; Borrowing System 🚀</title><link>https://dev.to/sajiram_a4704bc095/master-rusts-ownership-borrowing-system-cp2</link><author>Sajiron</author><category>dev</category><category>rust</category><category>devto</category><pubDate>Wed, 19 Feb 2025 12:11:58 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[Rust’s Ownership & Borrowing system is one of its most powerful features, ensuring memory safety without a garbage collector. In this guide, we break down:✅ How ownership works and why it matters
✅ The difference between mutable & immutable references
✅ How lifetimes prevent dangling references]]></content:encoded></item><item><title>Rewrite Kafka in Rust? I&apos;ve developed a faster message queue, StoneMQ.</title><link>https://www.reddit.com/r/rust/comments/1it3d53/rewrite_kafka_in_rust_ive_developed_a_faster/</link><author>/u/jonefeewang</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Wed, 19 Feb 2025 11:30:57 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Current Features (v0.1.0):Supports single-node message sending and receiving.Implements group consumption functionality.:Aims to replace Kafka's server-side functionality in massive-scale queue cluster.Focused on reducing operational costs while improving efficiency.Fully compatible with Kafka's client-server communication protocol, enabling seamless client-side migration without requiring modifications.:Entirely developed in .Utilizes  and  to achieve high performance, concurrency, and scalability.   submitted by    /u/jonefeewang ]]></content:encoded></item><item><title>First official beta of the Azure SDK for Rust released</title><link>https://bsky.app/profile/heaths.dev/post/3liirjbux4s27</link><author>/u/thekdude</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Wed, 19 Feb 2025 07:54:21 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>This Week in Rust 587</title><link>https://this-week-in-rust.org/blog/2025/02/19/this-week-in-rust-587/</link><author>TWiR Contributors</author><category>This week in Rust</category><category>dev</category><category>rust</category><pubDate>Wed, 19 Feb 2025 05:00:00 +0000</pubDate><source url="https://this-week-in-rust.org/">This Week in Rust</source><content:encoded><![CDATA[This week's crate is httpmock, which is quite unsurprisingly a HTTP mocking library for Rust.An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:No calls for testing were issued this week.No calls for testing were issued this week.No calls for testing were issued this week.If you are a feature implementer and would like your RFC to appear on the above list, add the new 
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!Some of these tasks may also have mentors available, visit the task page for more information.Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.This week's results were dominated by the update to LLVM 20 (#135763),
which brought a large number of performance improvements, as usually. There were also two other
significant improvements, caused by improving the representation of  values (#136593) and doing less work when formatting in  (#136828).Improvements ✅  (secondary)3 Regressions, 2 Improvements, 4 Mixed; 4 of them in rollups
50 artifact comparisons made in totalEvery week, the team announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.No RFCs entered Final Comment Period this week.No Cargo Tracking Issues or PRs entered Final Comment Period this week.No Language Team Proposals entered Final Comment Period this week.No Language Reference RFCs entered Final Comment Period this week.No Unsafe Code Guideline Tracking Issues or PRs entered Final Comment Period this week.Rusty Events between 2025-02-19 - 2025-03-19 🦀If you are running a Rust event please add it to the calendar to get
it mentioned here. Please remember to add a link to the event too.
Email the Rust Community Team for access.I have found that many automated code review tools, including LLMs, catch 10 out of 3 bugs.Despite a lamentable lack of suggestions, llogiq is properly pleased with his choice.]]></content:encoded></item><item><title>Non-blockchain Internships are real, just landed one!</title><link>https://www.reddit.com/r/rust/comments/1isw9pa/nonblockchain_internships_are_real_just_landed_one/</link><author>/u/cornell_cubes</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Wed, 19 Feb 2025 03:51:39 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Rust has been my (CS Undergrad, Junior year, no prior internships) language of choice for a while now, but going into this last job hunt season I initially didn't even try looking for Rust opportunities as I've been told for a while that there are just no entry-level opportunities right now.After sending out tons of SWE application and getting NOWHERE I got a little curious and started scanning for rust internships on Indeed. To my surprise, this year there were a good handful of listings! Several were looking to rewrite existing C libraries in Rust, others were using it to build a new piece of their tech stack. I found that, due to my portfolio being pretty rust heavy, I got way more responses for positions seeking talent in that language.But yeah, I think we're finally entering an era where you can land entry level rust jobs without working for some odd blockchain company! Especially in the embedded scene, saw a lot for aerospace and for my job I'll be porting some RISC-V microcontroller firmware to Rust.Curious if anyone else has noticed more opportunities this season, or if things have always just been not as bad as I was lead to believe they were?Cool things I saw on my search: - NASA was looking for an intern to help them rewrite their core Flight System library to Rust - Woven by Toyota wanted interns they could relocate to Japan where they would write some Rusty vehicle software/firmware - Intel wanted an intern to help them port some graphics firmware to Rust - I guess Neuralink has Rust in their tech stack? - Lots of startups embracing Rust]]></content:encoded></item><item><title>I created a CLI-Music Player in Rust!</title><link>https://dev.to/paradoxy/i-created-a-cli-music-player-in-rust-5a3f</link><author>Ojalla</author><category>dev</category><category>rust</category><category>devto</category><pubDate>Tue, 18 Feb 2025 22:52:01 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[I built a  that allows users to play, pause, stop, and manage their music files directly from the terminal. It supports basic playback controls, volume adjustment, and song listing.This walkthrough will cover:How the music player was implementedHow to run the applicationA guide on available commandsI used the following Rust crates: – For command-line argument parsing. – For colored terminal output. – For audio playback. – To handle  for graceful exit.cargo add clap colored rodio ctrlc
How the CLI Music Player WorksThe music player follows a command-line workflow where users can:Load songs from a specified directory.Play, pause, resume, stop playback.1. Command-Line Interface (CLI) ConfigurationThe application uses  to handle command-line arguments. Users must specify a music directory:This ensures that users provide a valid music directory or request help using .The player reads user commands in a loop:This function displays a colored prompt and waits for user input.3. Implementing the Music PlayerI created a  struct to store the player’s state:The audio sink and output stream ().The directory containing music files.The current playing song and status.4. Loading Songs from a DirectoryWhen the application starts, it loads music files from the given directory:This function reads all files in the specified directory and maps them to numbers for easy selection.To play a song, the application reads the file, decodes it, and plays it using :Stops any currently playing track.Loads and decodes the selected song.6. Implementing Playback ControlsThe player handles commands like play, pause, resume, stop, and volume adjustment:These functions control playback using  methods like , , , and .7. Displaying Available SongsUsers can list all available songs:git clone https://github.com/Parado-xy/rust-cli-music-player
rust-cli-music-player
Run the application with a music directory:
cargo run  /path/to/music
Use the available commands:
play <number>    
pause            
resume           
stop             
volume <0.0-1.0> 
list             
status           This Rust CLI Music Player is a simple but powerful terminal-based music player. It utilizes  for audio playback,  for argument parsing, and  for improved UI. Future improvements could include playlist support and file format filtering.]]></content:encoded></item></channel></rss>