<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Awesome Dev News</title><link>https://www.awesome-dev.news</link><description>Liveboat RSS Feed</description><item><title>Willie Hobbs Moore: STEM Trailblazer</title><link>https://spectrum.ieee.org/willie-hobbs-moore-profile</link><author>Willie D. Jones</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjQ4OTk0Ni9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc2NzAzOTE1Mn0.lUm5Wa5yQcpIZ0xdV8JvdAdFK4rGGfnMkR79x8IeWRs/image.jpg?width=600" length="" type=""/><pubDate>Sun, 16 Feb 2025 14:00:03 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[The first Black woman with a science Ph.D paved the way for underrepresented groups]]></content:encoded></item><item><title>Preparing for Senior PHP Symfony Developer role at Clubee</title><link>https://dev.to/gurachek/preparing-for-senior-php-symfony-developer-role-at-clubee-2can</link><author>Valera Gurachek</author><category>devto</category><pubDate>Sun, 16 Feb 2025 13:48:50 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[Please take a look and let's discuss the preparation process.]]></content:encoded></item><item><title>Evaluate your LLM! Ok, but what&apos;s next? 🤔</title><link>https://dev.to/louis-dupont/evaluate-your-llm-ok-but-whats-next-3mk3</link><author>Louis Dupont</author><category>ai</category><pubDate>Sun, 16 Feb 2025 13:23:00 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[Everyone say you need to Evaluate your LLM. You just did it. Now what? 🤷‍♂️You got a score. Great. Now, here’s the trap:   ()
 ("Tweak some stuff and re-run!")
Step 1: Stop staring at numbers.Numbers feel scientific, but Before doing anything, look at actual examples. Bad output? Good output but bad score? Both wrong? You’ve got bigger problems.Step 2: Solve the right problem.If your , tweak:  If your , rethink:  Step 3: Iterate like a maniac.Change something → Run eval → Learn → Repeat.  Chasing numbers isn’t progress. Chasing the right insights is.]]></content:encoded></item><item><title>Linux User Management Basics</title><link>https://dev.to/madhushan/linux-user-management-basics-me0</link><author>madhushan  Herath</author><category>devto</category><pubDate>Sun, 16 Feb 2025 13:17:33 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[If you're using Linux, knowing how to manage users is super important, especially if you're running a server or sharing your system with others. It helps you keep things organized and secure. Let’s go over the basics of handling users in Linux!Adding a new user is easy! If you're on Ubuntu/Debian, use this:This sets up a new user with a home directory and some basic settings.For other Linux versions, try:The  flag makes sure the home directory is created.
  
  
  2. Setting and Changing User Passwords
After adding a user, they’ll need a password:If you need to change your own password:To remove a user but keep their files:If you want to remove the user and their home directory:deluser  username
For RedHat-based systems:Groups help organize users with similar permissions. To add a user to a group:usermod  groupname username
To see which groups a user is in:To remove a user from a group:gpasswd  username groupname

  
  
  5. Understanding Linux File Permissions
Files and folders have permissions that control who can read, write, or run them. To check permissions:You'll see something like this:-rw-r--r-- 1 user group 1234 Jan 1 12:00 file.txt
The first character () means it's a file ( means directory).The next three () are for the owner.The next three () are for the group.The last three () are for others.To switch to another user:Or use  to run commands as another user:]]></content:encoded></item><item><title>Enhancing User Experience with Voice User Interface Implementation</title><link>https://dev.to/sista-ai/enhancing-user-experience-with-voice-user-interface-implementation-1749</link><author>Sista AI</author><category>ai</category><pubDate>Sun, 16 Feb 2025 13:15:58 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[Implementing a Voice User Interface (VUI) on a website is a dynamic process that requires attention to detail and cutting-edge technology. By incorporating voice commands for common queries like pricing and product details, users can seamlessly interact with the interface, enhancing their overall experience.Best Practices for Seamless IntegrationProgressive enhancement is essential in voice UI design, ensuring users are comfortable with interactions. Performance optimization is critical for real-time responses, and user experience consideration like feedback and context-awareness elevate the VUI's usability.User-Centric Design PrinciplesUnderstanding user needs and simplifying interactions are core to effective VUI design. Clear feedback, accessibility features, and graceful error handling contribute to a seamless user experience.Technical Implementation and ChallengesFrontend components, backend services, and integration layers must work in harmony for a functional VUI. Significant resource investment is required, but the benefits of enhanced user experience and engagement justify the effort.Evolution of VUI TechnologyVUI design is constantly evolving, pushing boundaries in AI capabilities and design standards. Continuous learning and adaptation are crucial for staying on the cutting edge of interactive technology.Visit Sista AI to explore how their AI Voice Assistant transforms user interactions seamlessly.]]></content:encoded></item><item><title>Essential Technologies for Software Engineers Beyond Core Development</title><link>https://dev.to/kalana250/essential-technologies-for-software-engineers-beyond-core-development-1mig</link><author>Kalana Heshan</author><category>devto</category><pubDate>Sun, 16 Feb 2025 13:15:52 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[Software engineering is a dynamic and ever-evolving field that demands continuous learning and adaptation. While mastering programming languages and frameworks is crucial, the modern software engineer must explore and integrate a broad set of technologies to enhance efficiency, security, scalability, and innovation. This article delves into key technologies beyond traditional software development that can significantly benefit engineers in their careers.
  
  
  1. Cloud Computing: The Backbone of Modern ApplicationsCloud computing has transformed how applications are developed, deployed, and maintained. Instead of relying on traditional on-premise servers, businesses now leverage cloud platforms to achieve scalability, cost-efficiency, and high availability.Amazon Web Services (AWS) – The industry leader offering services for computing, storage, networking, and AI-driven applications. – A cloud platform popular in enterprise environments, seamlessly integrated with Microsoft products like Office 365 and Active Directory.Google Cloud Platform (GCP) – Preferred for data analytics, AI-powered applications, and container orchestration with Kubernetes.Why Cloud Computing Matters: Cloud platforms allow developers to scale applications dynamically based on demand. Pay-as-you-go pricing ensures businesses only pay for the resources they use.Disaster Recovery & High Availability: Cloud infrastructure provides redundancy, ensuring that applications remain available even during failures.
  
  
  2. DevOps & CI/CD: Streamlining Software DevelopmentDevOps combines development and operations to improve collaboration, automate workflows, and enhance software delivery speed. Continuous Integration and Continuous Deployment (CI/CD) pipelines further automate the testing and deployment process. – Containerization tools that enable software to run consistently across environments.Jenkins, GitHub Actions, GitLab CI/CD – Tools for automating software builds, testing, and deployments. – Infrastructure as Code (IaC) tools that automate provisioning and configuration management.Why DevOps & CI/CD Matter:Faster Software Releases: Automated deployment pipelines reduce manual errors and accelerate time-to-market. Monitoring and logging tools ensure application performance remains optimal. Encourages close coordination between developers and operations teams.
  
  
  3. Cybersecurity: Protecting Digital AssetsWith cyber threats becoming more sophisticated, software engineers must integrate security measures from the initial development stages to prevent data breaches and system vulnerabilities. – A security framework identifying the most critical web application security risks. – Tools for penetration testing and ethical hacking. – Authentication and authorization protocols to secure applications.Why Cybersecurity Matters: Secure applications prevent sensitive user information from being exposed. Adhering to standards like GDPR and HIPAA ensures legal protection. Secure coding practices reduce attack surfaces and vulnerabilities.
  
  
  4. AI & Machine Learning: Powering Intelligent ApplicationsArtificial Intelligence (AI) and Machine Learning (ML) are revolutionizing industries by enabling automation, data-driven decision-making, and advanced user interactions. – Frameworks for developing machine learning models. – A beginner-friendly toolkit for AI-powered data analysis. – Platforms driving innovations in natural language processing (NLP) and AI-driven automation.Why AI & Machine Learning Matter: AI-powered solutions reduce human effort in repetitive tasks. Machine learning enhances decision-making by analyzing vast datasets.Enhanced User Experience: AI-driven chatbots, recommendation engines, and predictive analytics improve software applications.
  
  
  5. Blockchain & Web3: Building Decentralized ApplicationsBlockchain technology and Web3 innovations are reshaping finance, supply chains, and digital ownership, making them valuable areas of expertise for software engineers. – Smart contract development on decentralized networks. – Enterprise blockchain framework for business applications. – Distributed file storage system enhancing data security and decentralization. Blockchain ensures data immutability and prevents fraud. Reduces reliance on intermediaries in transactions. Automates processes with self-executing agreements.
  
  
  6. Software Architecture & System Design: Building Scalable ApplicationsAs software applications grow, designing them for scalability, maintainability, and efficiency is critical.Key Technologies & Concepts:Microservices & Monolithic Architectures – Choosing the right structure for an application. – Efficient data communication between services.Event-Driven Architecture (Kafka, RabbitMQ) – Enhancing real-time data processing.Why Software Architecture Matters:Performance Optimization: Ensures applications run efficiently under heavy loads. Reduces the risk of system-wide failures. Enables applications to grow seamlessly as demand increases.
  
  
  7. Internet of Things (IoT): Connecting the Physical and Digital WorldsIoT technology enables real-time data exchange between smart devices, revolutionizing industries such as healthcare, manufacturing, and logistics. – Hardware platforms for prototyping IoT devices. – Communication and data processing frameworks.AWS IoT & Google Cloud IoT – Cloud services for managing IoT networks. IoT applications enhance efficiency in various sectors. Enables smart systems in homes, cities, and industries. Reduces equipment failures with AI-driven insights.The field of software engineering extends beyond programming languages. Mastering emerging technologies such as cloud computing, DevOps, cybersecurity, AI, blockchain, system design, IoT, and AR/VR can make software engineers more versatile and valuable. By staying updated with these advancements, engineers can design secure, scalable, and innovative applications that drive the future of technology.]]></content:encoded></item><item><title>Kickstart Your AI Journey with This Free Course! 🌍</title><link>https://dev.to/hrudu/kickstart-your-ai-journey-with-this-free-course-3o3n</link><author>Hrudu Shibu</author><category>devto</category><pubDate>Sun, 16 Feb 2025 13:14:45 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[How to Learn Generative AI with Microsoft (No Experience Needed!)
Artificial Intelligence is no longer the future—it’s the present! Learning AI skills is becoming essential for students, developers, and professionals alike. With Microsoft’s Explore AI Learn Plan, you can:✔ Learn how generative AI works in a simple and practical way.
✔ Experiment with Microsoft Copilot to create AI-generated content.
✔ Complete a real-world AI project in under an hour.Who Is This For?
👨‍🎓 Students who want to explore AI in a fun way.
👩‍💻 Developers interested in applying AI tools.
📢 Content creators looking for AI-powered creativity.Start your AI journey today—no prerequisites required! 🚀]]></content:encoded></item><item><title>Hands-On AI Learning with Microsoft Copilot! 🎨</title><link>https://dev.to/hrudu/hands-on-ai-learning-with-microsoft-copilot-3ilb</link><author>Hrudu Shibu</author><category>devto</category><pubDate>Sun, 16 Feb 2025 13:13:37 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[Ever Thought About Using AI for Creativity? Try This Free Course!
AI isn’t just about coding—it’s about creativity! Microsoft’s Explore AI Learn Plan allows you to use AI to design your dream destination in an interactive and engaging way.Why Should You Join?
✨ Practical Learning – Experiment with Microsoft Copilot to generate content.
✨ Hands-on Project – Apply AI skills to create a fictional travel destination.
✨ Quick & Free – Learn in just 53 minutes, with no cost!What You’ll Gain:
📌 New AI skills to use in real-world applications.
📌 A certificate of completion to showcase on your resume.
📌 Experience working with generative AI tools.Let’s build something creative with AI! 🚀]]></content:encoded></item><item><title>AWS Glue vs AWS Lambda: Comparativa Serverless para Ingeniería de Datos en AWS</title><link>https://dev.to/jlarizar/aws-glue-vs-aws-lambda-comparativa-serverless-para-ingenieria-de-datos-en-aws-108f</link><author>Jose Luis Ariza</author><category>devto</category><pubDate>Sun, 16 Feb 2025 13:13:00 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[El mundo Cloud ha revolucionado la forma en que las empresas gestionan y analizan sus datos. Amazon Web Services (AWS) ofrece diversas herramientas  que permiten a los ingenieros de datos trabajar sin preocuparse por la infraestructura subyacente. Entre estas herramientas,  destacan por su versatilidad y eficiencia. Aunque ambos servicios comparten el principio de la ejecución sin servidores, tienen objetivos y funcionalidades distintas. En este artículo, exploraremos las diferencias clave, sus ventajas y limitaciones, y cuándo elegir cada uno.AWS Glue es un servicio administrado de integración de datos que facilita la preparación, transformación y carga de datos (ETL). Su función principal es conectar diversas fuentes de datos, organizarlas y prepararlas para su posterior análisis. AWS Glue es especialmente útil en escenarios donde se manejan grandes volúmenes de información y se necesita automatizar procesos repetitivos.Principales componentes de AWS Glue Repositorio centralizado que almacena los metadatos y define la estructura de las fuentes de datos. Programas que examinan las fuentes de datos, detectan su estructura y actualizan automáticamente el catálogo. Procesos que ejecutan las transformaciones de datos, programados en Python o Scala. Reglas que activan la ejecución de trabajos según un cronograma o la ocurrencia de ciertos eventos. Entornos interactivos para escribir y probar el código ETL.Automatización del Proceso ETL: Reduce significativamente el tiempo necesario para preparar datos gracias a la detección automática de esquemas. Se conecta de manera sencilla con otros servicios de AWS, como Amazon S3, Amazon Redshift y AWS Athena. Ajusta la capacidad de procesamiento según el volumen de datos. Elimina la necesidad de gestionar infraestructura. Al trabajar con un entorno distribuido basado en Apache Spark, el inicio de los trabajos puede tardar algunos minutos.Soporte de Lenguajes Limitado: Solo admite Python y Scala, lo que puede ser un inconveniente si se utilizan otros lenguajes en el ecosistema. Para trabajos esporádicos o de poca carga, el costo puede resultar elevado en comparación con otras alternativas.Ejemplo Diagrama de Arquitectura - Pipeline GlueAWS Lambda es un servicio serverless que permite ejecutar código en respuesta a eventos específicos sin la necesidad de aprovisionar ni gestionar servidores. Su uso es ideal para aplicaciones que requieren respuestas rápidas a eventos en tiempo real, como la carga de archivos en S3 o el procesamiento de mensajes de una cola.Principales componentes de AWS Lambda Fragmentos de código que se ejecutan al activarse un evento. Eventos que inician la ejecución de las funciones, como cambios en bases de datos, flujos de eventos o solicitudes a través de API Gateway. Elementos reutilizables que permiten compartir bibliotecas y configuraciones entre funciones. Recibe y procesa eventos desde diversas fuentes, facilitando la construcción de arquitecturas basadas en eventos.Ejecución Basada en Eventos: Se activa automáticamente al detectarse un evento relevante, eliminando la necesidad de supervisión constante.Soporte para Múltiples Lenguajes: Compatible con Python, Node.js, Java, Go, Ruby y otros. Escala horizontalmente para manejar picos de demanda sin intervención manual. Se paga únicamente por el tiempo de ejecución y el número de invocaciones.Tiempo Máximo de Ejecución: Las funciones no pueden superar los 15 minutos de ejecución, lo que limita su aplicación en procesos extensos. La memoria y el tiempo de procesamiento tienen límites que podrían afectar cargas intensivas. Al tratarse de un servicio sin estado, se necesita recurrir a otras herramientas, como DynamoDB, para almacenar información entre invocaciones.Ejemplo Diagrama de Arquitectura - Pipeline LambdaComparativa entre AWS Glue y AWS LambdaAunque ambos servicios pertenecen al ecosistema serverless de AWS, tienen aplicaciones distintas. La siguiente tabla resume las diferencias más relevantes:AWS Glue es la mejor opción cuando se necesita:Realizar transformaciones complejas y procesamiento por lotes.Gestionar y organizar metadatos para análisis posteriores.Automatizar tareas de integración de datos en proyectos de Big Data.Trabajar con datos almacenados en Amazon S3, Redshift o Data Lakes.
Una empresa que procesa información de ventas históricas para generar reportes mensuales podría usar AWS Glue para consolidar, limpiar y transformar estos datos de manera eficiente.AWS Lambda es más adecuado cuando:Se requieren respuestas inmediatas a eventos en tiempo real.Se necesita construir microservicios ligeros y altamente escalables.Se desea automatizar tareas basadas en eventos sin preocuparse por la infraestructura.Se implementan flujos de trabajo orquestados con Step Functions.
Una aplicación que notifica en tiempo real a los clientes cada vez que se realiza una compra puede usar Lambda para procesar los eventos generados por las transacciones.AWS Glue y AWS Lambda son herramientas poderosas en el ecosistema de AWS, pero están orientadas a tareas diferentes. Mientras AWS Glue se destaca en el procesamiento y preparación de datos a gran escala, AWS Lambda es ideal para ejecutar tareas rápidas en respuesta a eventos. La elección entre uno u otro dependerá de los requisitos específicos de tu proyecto, el volumen de datos y la frecuencia de las operaciones. Si tu objetivo es transformar y organizar datos en procesos ETL, AWS Glue es la opción indicada. Por otro lado, si buscas una ejecución inmediata basada en eventos, AWS Lambda será tu mejor elección.]]></content:encoded></item><item><title>AI Learning for Everyone! 🚀</title><link>https://dev.to/hrudu/ai-learning-for-everyone-2mgc</link><author>Hrudu Shibu</author><category>devto</category><pubDate>Sun, 16 Feb 2025 13:11:44 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[Learn Generative AI with Microsoft Copilot – Free AI Course
AI is revolutionizing the world, and now you can learn generative AI for free with Microsoft Copilot through the Explore AI Learn Plan! 🚀What Will You Learn?
In this short 53-minute learning path, you will:
✅ Understand the basics of generative AI.
✅ Use Microsoft Copilot to research and create AI-generated content.
✅ Design your own dream destination using AI-powered tools.Who Should Join?
💡 Students who want to explore AI applications.
💡 Tech enthusiasts looking to boost their AI skills.
💡 Educators who want to introduce AI to their students.No prior experience required—just a passion for learning! 🌟]]></content:encoded></item><item><title>RandomInvert in PyTorch</title><link>https://dev.to/hyperkai/randominvert-in-pytorch-5eb0</link><author>Super Kai (Kazuya Ito)</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 13:07:51 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[The 1st argument for initialization is (Optional-Default:-Type: or ):
*Memos:

It's the probability of whether an image is inverted or not.The 1st argument is (Required-Type: or ()):
*Memos:

A tensor must be 2D or 3D.]]></content:encoded></item><item><title>Getting Buy-In: Overcoming Larman&apos;s Law • Allen Holub • YOW! 2024</title><link>https://www.youtube.com/watch?v=XwhF_xbVpIQ</link><author>GOTO Conferences</author><category>video</category><category>learning</category><enclosure url="https://www.youtube.com/v/XwhF_xbVpIQ?version=3" length="" type=""/><pubDate>Sun, 16 Feb 2025 13:00:46 +0000</pubDate><source url="https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA">GOTO Conferences yt</source><content:encoded><![CDATA[This presentation was recorded at YOW! Australia 2024. #GOTOcon #YOW
https://yowcon.com

Allen Holub - Helps You Build Software Better & Build Better Software; Author of 10 Books & Hundreds of Articles @AllenHolub 

RESOURCES
https://bsky.app/profile/allenholub.bsky.social
https://mstdn.social/@allenholub
https://twitter.com/allenholub
https://holub.com
https://www.linkedin.com/in/allenholub

Links
https://miro.com/app/board/uXjVL6ZfQvA=/
https://www.craiglarman.com/wiki/index.php?title=Larman%27s_Laws_of_Organizational_Behavior

ABSTRACT
Larman's Law states, "Organizations are implicitly optimized to avoid changing the status quo…" The third law is particularly relevant: 'Any change initiative will be derided as “purist,” "theoretical," “revolutionary," " “religion,” and “needing pragmatic customization for local concerns”—which deflects from addressing weaknesses and the manager/specialist status quo.'

You need to overcome that resistance to use innovative approaches like no-estimation or mob/ensemble programming.

Devs, however, almost always go about that the wrong way. Senior management is rarely interested in the mechanics of what you're doing. They're interested in the bottom line, how the new approaches change how the business is managed, and whether the inevitable disruption is worth it.

In this talk, you'll learn how to convince the “suits” (and your clients) that innovation is a good thing. You'll learn how to create a business case for innovation that overcomes the resistance of Larman's Law. [...]

TIMECODES
00:00 Intro
01:48 Larman's Laws of organizational behavior
12:36 Bottom up
20:20 Top down
24:42 Business case
36:10 Value stream mapping
39:12 Mob programming
53:00 Summary
53:57 Outro

Read the full abstract here:
https://yowcon.com/brisbane-2024/sessions/3470

RECOMMENDED BOOKS
Allen Holub • Holub on Patterns • https://amzn.to/3Q1hwTX
Allen Holub • Compiler design in C • https://amzn.to/4b0vXS9
Allen Holub • Enough Rope to Shoot Yourself in the Foot • https://amzn.to/4hFIL2m

https://bsky.app/profile/gotocon.com
https://twitter.com/GOTOcon
https://www.linkedin.com/company/goto-
https://www.instagram.com/goto_con
https://www.facebook.com/GOTOConferences
#LarmansLaw #CraigLarman #EnsembleProgramming #TechLead #TechLeadership #PsychologicalSafety #SkunkWorks #ValueStreamMapping #AllenHolub #YOWcon

CHANNEL MEMBERSHIP BONUS
Join this channel to get early access to videos & other perks:
https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join

Looking for a unique learning experience?
Attend the next GOTO conference near you! Get your ticket at https://gotopia.tech
Sign up for updates and specials at https://gotopia.tech/newsletter

SUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.
https://www.youtube.com/user/GotoConferences/?sub_confirmation=1]]></content:encoded></item><item><title>Week 12 Recap of #100DaysOfCode</title><link>https://dev.to/lymah/week-12-recap-of-100daysofcode-21h7</link><author>Lymah</author><category>devto</category><pubDate>Sun, 16 Feb 2025 12:54:38 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[
  
  
  Firebase Integration, API Enhancements & DSA Learning
This week, I focused on enhancing my Expense Tracker App by integrating Firebase for receipt storage and authentication, improving API functionality, and diving deeper into data structures and algorithms (DSA).
  
  
  Key Developments in the Expense Tracker App
🔹 Integrated Firebase for Receipt Storage
I implemented a workflow where users can upload receipts from the frontend, which are then processed by the backend and stored securely in Firebase Storage.🔹 Enhanced API & Report GenerationImproved API handlers to ensure efficient communication between the frontend and backend.Worked on report generation to help users analyze their expenses better.Faced a form handling issue while testing report generation but successfully troubleshot and fixed it.
🔹 Implemented Firebase AuthenticationSet up Firebase Authentication for user registration and login.Developed authentication middleware to manage secure access.Organized and refined API routes for better structure and efficiency.## Learning & Problem-SolvingAside from working on the app, I spent time improving my DSA skills and solving LeetCode problems:Insert Delete Get Random – Practiced hashmaps and randomized data structures.Product of Array Except Self – Strengthened understanding of prefix sum techniques.With the major backend integrations complete, my focus will now be on:Finalizing app testing and fixing any edge cases.Optimizing performance and deployment readiness.Continuing DSA practice to sharpen my problem-solving skills.Week 12 was packed with important features, debugging, and learning! 🚀 Excited for the next phase of this journey!]]></content:encoded></item><item><title>GIT haqida ma&apos;lumot</title><link>https://dev.to/sunnat_qayumov/git-8a</link><author>Sunnat Qayumov</author><category>devto</category><pubDate>Sun, 16 Feb 2025 12:53:49 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[ bu loyihalar saqlash uchun va dasturchilar birga loyihalar ustida jamoaviy ishlashida kerak bo'ladigan platforma(bulutli texnologiya - cloud technology). - bu dasturiy ta'minot versiyalarni nazorat qiluvchi tizim('version control system`). Undan dasturchilar kodni kuzatish, boshqarish va jamoa bilan ishlash uchun foydalanadilar.Git o'zi qanday ishlaydi? kodni  (repo) deb nomlanuvchi markaziy joyda saqlaydi. Dasturchilar ushbu repodan nusxa olib, unda ishlashlari va keyin o‘z o‘zgarishlarini qayta yuklashlari mumkin. Git quyidagi asosiy operatsiyalarni bajarishga imkon beradi: -> yangi Git repository yaratish. -> mavjud repository’ni nusxalash. -> o‘zgarishlarni kuzatish uchun fayllarni qo‘shish.Git commit -m "File name" -> komentariya qoldirish. -> lokal commitlarni serverga ulash. -> serverdagi so‘nggi o‘zgarishlarni olish. -> ikkita kod tarmog‘ini birlashtirish. -> ortiqcha fayllarni olib tashlash. ]]></content:encoded></item><item><title>Building a URL Shortener in Go</title><link>https://dev.to/luthfisauqi17/building-a-url-shortener-in-go-592d</link><author>luthfisauqi17</author><category>devto</category><pubDate>Sun, 16 Feb 2025 12:43:21 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[Have you ever wondered how  or  work? Today, we're building our URL shortener in Golang!By the end of this tutorial, you'll have a fully working URL shortener that generates short links and redirects users. Let’s get started!Before we dive into coding, let's understand how a URL shortener works:The user enters a long URLSave it in a memory or databaseWhen someone visits the short link, we redirect themFirst, create a new project and initialize Go modules.go-url-shortener go-url-shortener
go mod init github.com/yourusername/go-url-shortener
go get github.com/gin-gonic/gin
Now, open  and set up a simple Gin server.This creates a basic Gin server. Now let’s add URL shortening!
  
  
  Step 2: Generate Short URLs
Now, we need a function to generate a short random URL.Next, let’s create the /shorten endpoint that takes a long URL and returns a short one.This stores the original URL in a map and returns a short URL.
Now, let’s handle redirection!
  
  
  Step 4: Redirect Short URLs
We need an endpoint that looks up the short URL and redirects users.Let’s test this API using cURL!
Run the application by typing.curl -X POST http://localhost:8080/shorten -H "Content-Type: application/json" -d '{"original_url": "https://google.com"}'
{
    "short_url": "http://localhost:8080/abc123"
}

  
  
  Redirect (Visit the short URL)
curl -v http://localhost:8080/abc123
There you go, that is how you build a URL Shortener using Golang. Thank you for reading, and have a nice day!]]></content:encoded></item><item><title>Getting Started with Linux: Key Lessons from the Linux Foundation</title><link>https://dev.to/madhushan/getting-started-with-linux-key-lessons-from-the-linux-foundation-1g62</link><author>madhushan  Herath</author><category>devto</category><pubDate>Sun, 16 Feb 2025 12:42:48 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[Linux is an awesome, open-source operating system that powers everything from servers to smartphones. If you're new to Linux and want to get started, the Linux Foundation has some great courses to help you out. Here are some key takeaways from a beginner-friendly Linux Foundation course.Understanding Linux BasicsLinux is based on Unix principles, which focus on keeping things simple and efficient. You'll get to know:The Linux file system structure, including folders like /home, /var, /etc, and /binHandy command-line commands to move around and manage filesHow the Linux kernel works and talks to your hardware and appsThe different Linux distributions and what makes them uniqueMastering the Command LineThe command line is where all the magic happens in Linux. Here are some must-know commands:ls – Lists files and folders (use ls -l for extra details)cd – Moves between directories (cd .. takes you up a level)cp – Copies files (cp file1 file2 to make a copy)mv – Moves or renames files (mv oldname newname to rename a file)rm – Deletes files (rm -r removes folders too)grep – Searches for words in files (grep 'keyword' filename)cat, less, and more – Show the contents of files quicklyManaging Users and PermissionsTo keep things secure, Linux has a solid user and permission system. You'll learn about:Adding and managing users (adduser, passwd, usermod, deluser)Changing file permissions (chmod, chown, ls -l to check permissions)Managing groups (usermod -aG groupname username to add users to groups)How permission values like rwxr-xr-- and numbers like chmod 755 workInstalling and Managing SoftwareInstalling software on Linux is pretty straightforward. Here’s what you’ll use:apt (for Debian/Ubuntu-based systems) – Example: apt install package_nameyum or dnf (for RHEL/CentOS-based systems) – Used for software managementsnap and flatpak – Universal package managers for different distrosHow to build and install software from source if neededSystem Monitoring and Process ManagementKeeping your Linux system running smoothly means monitoring it. Some useful commands include:top and htop – Show what’s running on your system in real timeps – Check running processes (ps aux gives detailed info)kill – Stop processes (kill -9 PID for force quitting)df and du – Check disk space (df -h makes it human-readable)free -m – See how much memory is being useduptime – Find out how long your system has been runningWant to automate boring tasks? Shell scripting makes life easier. You'll get into:Writing simple Bash scripts using #!/bin/bashUsing loops (for, while) and conditions (if, else)Setting up automated tasks with cron (crontab -e to edit cron jobs)Working with variables and user inputs (read command) to make scripts interactiveNetworking and Security BasicsLinux is a networking powerhouse. You'll learn how to:Check network connectivity (ping, netstat, ip a for IP details)Set up firewalls (iptables, ufw for managing access rules)Securely connect to remote systems with SSH (ssh user@hostname, scp for file transfers)View active connections (netstat -tulnp shows open ports and services)Strengthen security with tools like fail2ban and SELinux]]></content:encoded></item><item><title>From a Curious Student to Meeting Satya Nadella: My Journey with the Azure Developer Community</title><link>https://dev.to/vivek0712/from-a-curious-student-to-meeting-satya-nadella-my-journey-with-the-azure-developer-community-39g3</link><author>Vivek0712</author><category>devto</category><pubDate>Sun, 16 Feb 2025 12:42:23 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[In late 2020, I was just a curious college student with a thirst for knowledge about cloud technologies and artificial intelligence. My journey began with a decision that many would call impulsive but turned out to be life-changing. I traveled over 500 kilometers just to attend a Microsoft Azure event. That one step of courage and curiosity marked the beginning of an extraordinary adventure.
  
  
  🚀 The First Leap of Faith
I still remember the excitement mixed with nervousness as I entered the event venue. I knew no one there, but the warmth of the Azure Developer Community made me feel at home. I met developers, architects, and enthusiasts who were more than happy to share their knowledge. It was this openness that fueled my passion for cloud technologies.
  
  
  🌱 Community: The Catalyst for Growth
The Azure Developer Community officially began in late 2020 and quickly became my launchpad for growth. It didn't just teach me technical skills; it taught me the essence of collaboration and continuous learning. I actively sought mentorship, participated in discussions, and never hesitated to ask questions. Over time, my efforts bore fruit. I was invited to speak at small meetups, and soon, these meetups turned into large-scale events and conferences.Fast forward to today: I've spoken, hosted, or organized more than 300 events across the globe. These events range from intimate bootcamps to large-scale conferences with thousands of attendees. I even had the privilege of winning the AI ODC Challenge in both 2024 and 2025, which opened doors to new opportunities and collaborations.
  
  
  🤝 Meeting the Visionary: Satya Nadella
One of the most surreal moments of my journey was meeting Satya Nadella, the CEO of Microsoft, not once but twice. The moment I shook hands with him, I felt the weight of years of learning and hard work crystallizing into a single, unforgettable experience. Getting photographed with him was a dream come true, and the picture was later featured in Pune Chaak's keynote session during the Microsoft AI Tour 2024 — a moment of recognition that made me realize the impact of my work and the power of community-driven growth.
  
  
  ❤️ Giving Back to the Community
The community that once nurtured me is now the one I contribute to passionately. I’ve mentored aspiring developers, organized countless bootcamps, and supported the growth of the Azure Developer Community in Tamil Nadu, which has now grown to over 5,000 members in record time.
  
  
  🗣️ Talks and Sessions: A Chronicle of Knowledge Sharing
Throughout my journey, I've delivered numerous talks and conducted hands-on sessions. Here are some notable ones related to Azure and the Azure Developer Community:Image Data Analytics using Python – Mepco Schlenk Engineering College  Deep Dive into Microsoft Azure Automated Machine Learning – Global Azure Datafest 2020  Machine Learning Pipelines in AzureML – Azure Developer Community Tamil Nadu  Demo on Azure Cognitive Services – Azure ML Series  Training & Deploying ML Models in Azure – Azure Developer Community Mumbai  Exploring Azure Cognitive Services – Azure Developer Community Raipur  Getting started with Azure AutoML – Azure Developer Community Chandigarh  Deploying Python Apps to AKS – Azure Developer Community Tamil Nadu  Attendance System with Face Mask Detection using Azure Face API(Published: Feb 15, 2024)Predict NYC Taxi Fares | End-to-end Azure MLOps with GitHub Actions(Published: Feb 14, 2024)Build a Production LLM-Powered QC Visual Inspection System Using Azure AI Foundry(Published: Feb 13, 2024)Analyse Customer Sentiment using Azure Data Factory pipeline(Published: Feb 12, 2024)Electronics-Datasheet-GPT: A Step-by-Step Guide to Building Your Own Datasheet Q&A AI Agent(Published: Feb 11, 2024)Experimenting with DeepSeek-R1 Model in VS Code Hosted via GitHub Models(Published: Feb 10, 2024)How AWS GenAI boosted my day-to-day Productivity(Published: May 31, 2024)What If Amazon Prime A/B Tests IPL Broadcasting?(Published: Feb 21, 2024)Speed-Dataing for hackers!Transforming Madurai | Tech, Community and more...(Published: Apr 17, 2023)AWS Community Day Hyderabad 2023 | Experience with Vivek(Published: Mar 25, 2023)Blur Personal Identifiable Information (PII) in Text, Images and Videos(Published: Jun 10, 2022)Adding Chaos to ML Compute Targets(Published: Feb 15, 2022)(Azure Architecture Series)Introducing Chaos Engineering to Machine Learning deployments(Published: Feb 12, 2022)(Azure Architecture Series)How FORMULA 1 insights are powered by AWS(Published: Oct 20, 2021)Hosting Python Packages in Azure DevOps(Published: Aug 31, 2021)Training Machine Learning models in AzureML(Published: Aug 22, 2021)(Azure Machine Learning Series)Getting started with Azure Machine Learning(Published: Aug 20, 2021)(Azure Machine Learning Series)Introduction to Machine Learning(Published: Aug 19, 2021)(Azure Machine Learning Series)Fine-tuning the performance of the DeepRacer model(Published: Jul 31, 2021)(AWS Community Builders - DeepRacer)Create, Train, Race your first AWS DeepRacer Model(Published: Jul 24, 2021)(AWS Community Builders - DeepRacer)Detecting and Visualizing Twitter Sentiment during COVID-19 Pandemic using AWS Comprehend and Quicksight(Published: Jul 19, 2021)Creating COVID19 stats newsletter using Azure Function Apps(Published: Apr 14, 2021)Literature Text Translation & Audio Synthesis using Microsoft Azure Cognitive Services All posts are published on .
  
  
  🎓 Certifications: The Foundation of My Technical Knowledge
My passion for continuous learning is reflected in the certifications I've earned:Microsoft Certified Azure Developer Associate (AZ-204)Microsoft Certified Azure Data Scientist Associate (DP-100)Microsoft Certified Azure AI Engineer Associate (AI-100)Microsoft Certified Azure Data Engineer Associate (DP-200 & DP-201) Microsoft Certified Azure Fundamentals (AZ-900)
  
  
  🌐 VickyBytes: A New Chapter
As I reflect on this journey, I’m thrilled to share that I'm working closely with Microsoft's leadership to build a new platform called VickyBytes. This initiative aims to provide developers with curated, high-quality content to stay ahead in the ever-evolving tech landscape. The idea is simple yet powerful: leverage the strength of community to empower developers worldwide.
  
  
  👨‍💼 My Professional Journey: A Snapshot
(YourStory Tech30 startup winner; Raised $3.5M!)(Youngest ever!), AWS Hero of the Year (APJ 2024) recipient at AWS Community Leaders Summit 2022 Azure Developer Community TN  AWS User Group Madurai (Nominated as Best UG 2022, 2023 & 2024)Guinness World Record Holder Recent paper at IIM-B & holder of 2 AI patents; Participant & JuryMentor | Blogger | Content CreatorMovie Buff | Go-Kart Racer | Guitar Enthusiast | Professional Reels Sender
  
  
  🌟 Lessons from the Journey
 Growth accelerates when like-minded people collaborate. Showing up consistently to learn, share, and contribute can open unimaginable doors. The more you give to the community, the more you grow.I owe my success to the Azure Developer Community and the incredible people who believed in me when I was just a student with dreams. To every mentor, attendee, and fellow enthusiast:  for being part of my story.
  
  
  Photo Gallery (Random moments clicked!)
This journey from being a curious student to becoming one of India's recognized AI figures has been nothing short of magical. And if there's one message I'd like to share, it’s this: take that first step, no matter how uncertain it seems. The community will catch you, guide you, and help you soar.#AzureCommunity #AIInnovation #CommunityFirst #VickyBytes]]></content:encoded></item><item><title>A better pkg.go.dev</title><link>https://dev.to/jacktt/a-better-pkggodev-hip</link><author>JackTT</author><category>dev</category><category>go</category><pubDate>Sun, 16 Feb 2025 12:35:06 +0000</pubDate><source url="https://dev.to/t/go">Dev.to Go</source><content:encoded><![CDATA[I have never been able to read a package's documentation on pkg.go.dev since all the code there is in black & white...
This is the reason I created this repository to make it possible to read.Every time you want to read a package's documentation, you just need to replace pkg.go.dev with pkgo.dev. .We use Nginx as proxy server.Every time a request come in, we forward it to the pkg.go.dev server, then append the highlight.js script to the response before sending it back to the client.Since some README files do not specify the code language, we also update  tags to <code class="language-go"> to enable syntax highlighting.If you don't trust me, no worry, you can deploy it yourself:Append 127.0.0.1       pkg.go.dev.local to Run docker-compose up -d --buildAccess ]]></content:encoded></item><item><title>Alleged &apos;CEO Shooter&apos; Luigi Mangione Raises $297K Online</title><link>https://yro.slashdot.org/story/25/02/16/0040252/alleged-ceo-shooter-luigi-mangione-raises-297k-online?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sun, 16 Feb 2025 12:34:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[Luigi Mangione faces first-degree murder charges. On Valentine's Day he posted his first public comments online, reports People magazine, with Mangione saying he's grateful for the support he's receiving:

Earlier this week, Mangione accepted $297,000 in donations to cover his legal bills from the December 4 Legal Committee, which is stewarding a fundraiser on GiveSendGo for his legal defense, according to a post shared by the group. (A source with knowledge of the situation confirmed to PEOPLE that the post was genuine.) The committee — named after the death date of Thompson — said the donations were offered by over 10,000 individual supporters. Mangione's lead attorney, Karen Friedman Agnifilo, told the committee that Mangione "very much appreciates the outpouring of support...." 

His federal murder charges could land him the death penalty, and he also faces state murder charges that accuse him of committing an act of terrorism.]]></content:encoded></item><item><title>🚀 Docker Tips: Essential Tips and Tricks for Developers</title><link>https://dev.to/d_thiranjaya_6d3ec4552111/docker-tips-essential-tips-and-tricks-for-developers-1hl8</link><author>Pawani Madushika</author><category>devto</category><pubDate>Sun, 16 Feb 2025 12:27:24 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[
  
  
  Advanced Docker Tips for Modern Development (2025)
In the rapidly evolving world of software development, staying ahead of the curve is crucial. Docker, a renowned containerization platform, has revolutionized the way we build, deploy, and manage applications. To optimize your Docker development workflow, this comprehensive guide delves into advanced techniques, best practices, and performance optimization strategies that experienced developers may not be aware of.
  
  
  Latest Advanced Techniques

  
  
  1. Podman: Unleashing Container Management Potential
Traditional Docker commands can be replaced with the lightweight and sandboxed  utility. This alternative offers enhanced security, reduced resource consumption, and simplified container management:# Create a container using podman
podman create --name my-container my-image

  
  
  2. BuildKit: Accelerating Image Building
BuildKit accelerates image building by leveraging incremental builds, caching, and parallel execution. By integrating BuildKit into your Dockerfile, you can significantly reduce build times:# Dockerfile using BuildKit
FROM my-base-image as build-stage
RUN apk add ... # Use BuildKit syntax

  
  
  3. Swarm Mode: Distributed Container Orchestration
Swarm mode enables seamless scaling of containerized applications across multiple hosts. It provides advanced load balancing, service discovery, and automated container placement:# Initialize a Swarm cluster
docker swarm init

  
  
  1. Multi-Stage Builds for Optimized Images
Multi-stage builds allow you to create smaller and more efficient images by separating build steps into distinct stages. This minimizes the transfer of unnecessary dependencies:# Multi-stage Dockerfile
FROM node:lts AS build
WORKDIR /usr/src/app
COPY . .
RUN npm install --production

FROM nginx:latest
COPY --from=build /usr/src/app /usr/share/nginx/html

  
  
  2. Performance Monitoring with Prometheus and Grafana
Prometheus and Grafana provide comprehensive monitoring and visualization for Docker environments. They enable real-time tracking of container metrics, performance bottlenecks, and resource usage:# Docker Compose configuration for monitoring
version: '3'
services:
prometheus:
image: prom/prometheus
volumes:
- ./prometheus.yml:/etc/prometheus/prometheus.yml
grafana:
image: grafana/grafana

  
  
  Modern Development Workflow

  
  
  1. CI/CD Automation with GitHub Actions
GitHub Actions integrates seamlessly with Docker to automate build, test, and deployment processes. This facilitates continuous integration and delivery practices:# GitHub Actions workflow
name: Docker Build and Deploy
on: [push]
jobs:
build:
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v3
- uses: docker/build-push-action@v3
with:
push: true

  
  
  2. Remote Container Debugging for Enhanced Efficiency
Remote debugging allows you to troubleshoot running containers from your local IDE. This simplifies issue identification and resolution:# Enable remote debugging in Docker Compose
version: '3'
services:
my-app:
image: my-image
command: ["/usr/local/bin/debug", "--host=0.0.0.0", "--port=5678", "--wait", "true"]

  
  
  1. Docker Compose v2: Simplified Configuration and Automation
Docker Compose v2 introduces a simplified syntax, improved performance, and support for multiple Dockerfiles. It streamlines container orchestration:# Docker Compose v2 configuration
version: '2'
services:
db:
image: postgres:latest
web:
image: my-web-app
depends_on:
- db

  
  
  2. Docker Desktop for Mac and Windows
Docker Desktop offers a local development environment for Docker on Mac and Windows. It includes pre-configured services, simplified container management, and easy access to Docker resources.
  
  
  3. Docker Hub: Centralized Image Management
Docker Hub serves as a central repository for storing and sharing Docker images. It provides access to official images, community contributions, and automated builds.Leverage advanced techniques like Podman, BuildKit, and Swarm Mode to enhance your Docker development workflow.Implement performance optimization strategies using multi-stage builds and monitoring tools.Utilize modern best practices such as remote container debugging and CI/CD automation.Explore the latest tools and resources to improve your Docker development experience.By implementing these advanced techniques, you can optimize your Docker development process, enhance performance, and stay ahead of the evolving landscape of modern software development.]]></content:encoded></item><item><title>Microinteractions: The Secret Sauce to Enhancing User Experience</title><link>https://dev.to/okoye_ndidiamaka_5e3b7d30/microinteractions-the-secret-sauce-to-enhancing-user-experience-220f</link><author>Okoye Ndidiamaka</author><category>devto</category><pubDate>Sun, 16 Feb 2025 12:25:31 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[In the world of web and app design, it's often the little things that leave the biggest impressions. Microinteractions are those subtle, engaging animations or design elements that guide users, provide feedback, and add personality to your digital product. Think of the gentle bounce of a button after it's clicked or the satisfying swipe animation when archiving an email. These can be minor moments, but they can change a good user experience into an unforgettable one.Why Microinteractions MatterMicrointeractions are not just about aesthetics; they serve very real functional purposes. Here's why they're so important:Provide Feedback: They tell users what happened with their action, whether it was a button click or a process that is complete.Guide the User: Subtle animations can draw attention to important elements or actions. For example, a blinking cursor in a search bar encourages users to start typing.Enhance Engagement: When designed well, microinteractions are pleasurable moments that make users want to come back for more.Strengthen Branding: Custom animations unique to your brand can create a memorable identity that stands out.Key Elements of MicrointeractionsEvery microinteraction is composed of four major parts:Trigger: What starts the microinteraction? It can be an explicit user action-like clicking or swiping-or an implicit system event, such as a timer or condition being met.Rules: These determine how the microinteraction works. For example, what happens when a button is clicked?Feedback: The visual, auditory, or tactile response users get, such as a click sound or a color change.Loops and Modes: These are the conditions that determine if the microinteraction repeats or evolves over time.Practical Tips for Designing Effective MicrointeractionsHere’s how to implement microinteractions that enhance user experience:Keep It Simple
Microinteractions should be subtle and straightforward. Overloading users with flashy animations can make your design look cluttered and confuse users. Stick to minimal, functional designs.Prioritize Functionality
Every animation should have a purpose. Never add microinteractions just because they look good. For instance, a loading spinner tells the user that something is happening, while an animation of a toggle switch explains how it works.Be Consistent
Consistency in microinteractions is important to create a cohesive user experience. Align animations with your brand identity and ensure they behave predictably across different platforms and devices.Design for Context
Consider the user's intention and the context of the interaction. For example, an animated behavior may be perfectly fine for a gaming application, but it may look like it doesn't belong if it's part of financial software.Employ the Right Tools
Figma, Adobe After Effects, or Lottie are some tools that make designing and prototyping microinteractions a breeze. Experiment with these to bring your designs to life.Real-World Examples of MicrointeractionsFacebook Reactions: Hover on the "Like" button and a row of emojis pops out, making it fun and interactive for users to express themselves.LinkedIn Endorsements: The animation of skill endorsement is so subtle, yet interactive, sans overwhelming the user.Heart Animation by Instagram: Users can get instant feedback when they double-tap a post, which results in an animated heart popping up. Common Mistakes to Avoid  While
 micro-interactions are powerful, this is how they can become counter-productive if not implemented well:Overcomplicating the Animations: Too-long or flashy animations irritate the users.Disregarding Accessibility: Make sure microinteractions are accessible for all users, whether they have visual or motor impairments.Overloading the Interface: Too many animations can make performance worse and confuse users.The Future of MicrointeractionsAs technology evolves, microinteractions will also get more intelligent. With AI and machine learning, in the future, designs may automatically adapt microinteractions based on user behavior, thus creating even more personalized experiences.While micro in nature, microinteractions make great impacts on user experiences. By paying attention to minute details, you will also be able to create not just functional but delightful interfaces. So, go live with microinteractions in all your projects and watch your UX soar high.What's your favorite microinteraction in the apps or websites that you use? Share it with me in the comments below!]]></content:encoded></item><item><title>The DeepSeek Revolution: The AI Game Changer You Need to Know About</title><link>https://dev.to/nitdgplug/the-deepseek-revolution-the-ai-game-changer-you-need-to-know-about-1f57</link><author>Ayush Bhartia</author><category>ai</category><pubDate>Sun, 16 Feb 2025 12:21:08 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[Hey everyone! The AI landscape is constantly evolving, with new models pushing the boundaries of what's possible. But one name has been making waves recently, i.e, . Unlike other AI tools, this powerhouse has rewritten the rulebook on efficiency, cost-effectiveness, and performance. If you haven't heard of it yet, here’s why it’s capturing global attention.What Is DeepSeek and Why Is It Gaining Popularity?In January 2025, DeepSeek, a Chinese AI company, emerged as a major player in the AI space. Developed by a Chinese AI lab, it rapidly climbed the app store rankings, even surpassing ChatGPT as the most popular free AI assistant in the US.
But what’s driving the hype? DeepSeek-R1 isn’t just another AI model—it’s an example of cutting-edge efficiency at a fraction of the usual cost. Unlike its competitors, which require massive investments,  was trained for just —a game-changing breakthrough in AI development.Innovation Behind DeepSeekDeepSeek’s strength lies in its  training method, which splits its AI into specialized sub-models. Instead of a single large neural network handling everything, each part of DeepSeek is optimized for specific tasks, making it both  and more .
Another key advantage is its , which adjusts processing power based on task complexity. This means DeepSeek can deliver high performance while using significantly fewer resources compared to other models.Moreover, instead of relying on Nvidia’s high-end H100 chips, DeepSeek utilizes the more affordable , making AI training and deployment  cheaper than models like DeepSeek-R1 helping open-source communityDeepSeek released its flagship model, DeepSeek-R1, under the . This model, developed with remarkable resource efficiency—using approximately 2,000 Nvidia H800 GPUs over 55 days demonstrated performance on par with leading AI models from established tech giants. DeepSeek has made significant strides in the artificial intelligence landscape by open-sourcing its advanced AI models. 
The open-source release of DeepSeek-R1 has lowered barriers to AI development, fostering innovation and competition across the global AI community. The company has also released models like , designed to enhance code intelligence, and , aimed at advancing vision-language understanding. These models are available for public use and modification, promoting transparency and collaboration in AI research and application.How DeepSeek Outperforms Other AI ModelsBeyond its efficiency, DeepSeek is redefining AI reliability with its R1 Reasoning Model. Unlike traditional models, the probability of the R1 Reasoning Model giving appealing outputs is much higher as compared to other available models since this model is designed to validate its own reasoning supporting its output, improving accuracy in subjects like math, science, and fact-checking.
This makes DeepSeek particularly powerful for research, problem-solving, and advanced computations, offering a level of precision that many AI models like  from OpenAI,  from MetaAI, and  from Google, etc struggle to achieve.Challenges and LimitationsDespite its impressive capabilities, DeepSeek isn’t without challenges. Its business model remains uncertain, as it offers services at a significantly lower cost than competitors, raising questions about long-term sustainability. If integrated into government or corporate infrastructure, DeepSeek AI could be exploited for surveillance by foreign adversaries, affecting nation's cybersecurity. Although being open-source, certain components of the model (e.g., training datasets and fine-tuned versions) might be controlled by external entities, leading to potential data leaks.
Additionally, being developed in China, DeepSeek follows strict content regulations. Topics such as Taiwan’s political status or the Tiananmen Square incident are restricted due to Chinese internet policies, which may affect its global adaptability.What’s Next for DeepSeek and AI?DeepSeek’s rise proves that bigger isn’t always better. With its cost-effective approach, rapid deployment, and self-reasoning abilities, it’s challenging industry giants and setting a new standard for AI development.
Whether you’re a developer, researcher, or AI enthusiast, DeepSeek is worth watching. Have you tried it yet? Let us know your thoughts in the comments!
We hope you found this insightful.Also, do not forget to like and comment.Until then,Keep exploring and May the Source Be With You!]]></content:encoded></item><item><title>Currying in React: A Guide to Functional Components</title><link>https://jsdev.space/currying-react/</link><author></author><category>echojs</category><pubDate>Sun, 16 Feb 2025 12:08:33 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Balaji Udayagiri</title><link>https://dev.to/balaji_udayagiri_aa6f571e/balaji-udayagiri-14o3</link><author>Balaji Udayagiri</author><category>devto</category><pubDate>Sun, 16 Feb 2025 12:08:07 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[I'm excited to share my  with you all! 🚀 with 4+ years of experience, I’ve worked on UI/UX, component libraries, AI-driven interfaces, and more.  🔹 What’s in my portfolio?⚡ Built with Next.js & Tailwind CSS🎨 Showcasing my best projects & UI work🚀 Optimized for performance & accessibility🛠️ Dark mode & interactive animationsWhat do you think?
Would love your feedback, suggestions, or just a quick "Hi"! 😊  🚀 If you’re a frontend developer, what’s the one thing you love most about building UI? Let’s chat in the comments! 👇  ]]></content:encoded></item><item><title>GNOME 48 Beta Released With HDR Bits, gdctl, Adwaita Fonts Default &amp; More</title><link>https://www.phoronix.com/news/GNOME-48-Beta-Released</link><author>Michael Larabel</author><category>tech</category><pubDate>Sun, 16 Feb 2025 12:07:27 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[The GNOME 48 Beta release was officially announced this morning as the latest stepping stone toward the official GNOME 48 desktop release due out in mid-March...]]></content:encoded></item><item><title>Appointment Form</title><link>https://dev.to/preetha_vaishnavi_2b82358/appointment-form-1kdl</link><author>preetha vaishnavi</author><category>devto</category><pubDate>Sun, 16 Feb 2025 12:05:26 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[Check out this Pen I made!]]></content:encoded></item><item><title>Building a Slack Clone with Next.js and TailwindCSS - Part Three</title><link>https://dev.to/tropicolx/building-a-slack-clone-with-nextjs-and-tailwindcss-part-three-4db6</link><author>Oluwabusayo Jacobs</author><category>devto</category><pubDate>Sun, 16 Feb 2025 12:03:48 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[In the previous part, we added real-time messaging, rich text formatting, reactions, and file uploads to our Slack clone using the Stream React Chat SDK.In this final part of our series, we’ll add video-calling capabilities to our Slack clone using the Stream React Video and Audio SDK. By the end of this part, users will be able to initiate and join video calls, similar to the "Huddle" feature in Slack.
  
  
  Creating a Call Using the Huddle Button
First, we need a way for users to start and stop video calls easily. Let's create a button for this purpose, which we'll call the .Go to the  directory, and create a  file with the following code:In the component above, we update the current state of the call, including creating a new call, updating the call details, joining the call, or leaving the call using the following functions:: This function creates a new call by setting the required data, including channel details and workspace members. If there's an existing call, it first leaves that call.: This function toggles the state between joining and leaving the call, depending on whether the user is already in an active call.We also use the  and  hooks to keep track of the current call state. The button updates its appearance and behavior based on whether a call is ongoing, available, or inactive.Next, let's integrate the  into the channel page.Navigate to /client/[workspaceId]/[channelId]/page.tsx and update it as follows:Here, we integrate the  component with the channel toolbar. We also wrap it with the  component to manage the call state.Implementing a Custom Hook for HuddlesWith the huddle button in place, let's move on to creating a custom hook for our huddle feature. This hook will help manage different aspects of a call, such as toggling the microphone, camera, and screen sharing. It will also track the current state of the call, like whether the user is joining, speaking, or sharing their screen.Create a new file in the  directory called  and add the following code:: The  hook uses several hooks from @stream-io/video-react-sdk to manage different aspects of a call. It tracks the current call state, such as the , whether the user is muted, if screen sharing is active, and if the user has permission to perform specific actions.Toggling Microphone, Camera, and Screen Share: The , , and  functions allow users to control their microphone, camera, and screen sharing during calls.: The  variable helps determine whether the spotlight layout should be used. This typically happens if one participant shares their screen or is pinned.: The  function allows the user to leave the call. If the user has the required permission, they can also end the call for all participants.Building and Showing a CallSo far, users can create and join calls, but now we want to add the UI for the calls themselves. In this section, we'll integrate the huddle UI components, allowing users to manage video calls within a workspace, similar to Slack's huddle feature.Creating the Call Control ButtonThe first component we need is a call control button. This button will toggle features during a call, like muting the microphone, turning the camera on or off, and more.Create a new  file in the  directory, and add the following code:The  component adjusts its styles based on whether it is  or not. The button changes its background color and hover behavior to indicate the active state, helping users visually understand the button's current state.Customizing the Participant ViewThe main component we’ll use in our video layouts is Stream’s  component. This component displays the participant’s video, plays their audio, shows their information, and provides action buttons for controls like pinning or muting.However, the  default UI doesn't match our design, so we'll override it by creating our own custom UI using the  prop.Create a new file in the  directory called  and add the following code:The  is divided into several components:: The  component shows details for each participant, such as their name and audio status, making it easy to identify who is currently speaking or pinned.Speech Indicator and Speech Ring: The  component gives a clear visual cue to users when a participant is speaking. We also included a speech ring effect highlighting the participant's video when speaking.: The DefaultScreenShareOverlay is used when a participant is sharing their screen, providing a visual indication to other participants.: The menu allows participants to perform actions such as pinning or muting themselves or another participant.With the main call controls and participant view in place, it's time to create the huddle interface. This UI will contain the video feed layout and call controls and ensure the interface responds dynamically to different situations, like toggling between the sidebar and modal views.Create a new file in the  directory called  and add the following code:In the code snippet above:: We use the  and  to arrange participants based on the context (e.g., sidebar vs. full screen).: We use the  component to toggle the microphone, camera, and screen sharing.: We use the  and  props to handle when the huddle is open in another window or embedded in the sidebar.Now that we've developed the core user interface for our video calls, it's time to integrate the functionality into a single cohesive component. The huddle component will be responsible for managing the different states of a video call, such as when a user is joining, leaving, or responding to an invitation.Create a new file in the  directory called  and add the following code:: The  from the  hook is used to determine the appropriate UI to display. For example, if the call is ringing and wasn't initiated by the current user (), an invitation message, and options to join or decline the call are shown.Joining and Declining a Call: The  and  functions handle the respective actions. The  function invokes the  method, while the  function invokes  with the option to reject.: Depending on the call state, the component renders different UI sections, including:The invitation view, when the call is  but not initiated by the user.The call UI when the user has  or is .The huddle modal component will give an expanded view of the video call interface. It provides a more immersive experience for users when compared to the sidebar view.Create a new file in the  directory called  and add the following code:The component accepts an  prop to control when to display the modal. The modal also uses fixed positioning and includes styles that provide a centered, full-screen overlay.With the  and  now created, we can add them to our app.Normally, we could place our  component in the . However, the  is a child component in our  file, and layout files persist across routes and maintain the same state.This feature would be unsuitable for our needs as we want the current call state to be able to reset and effects to re-run each time a user navigates between channels.So instead, we'll use a template file. Templates in Next.js are similar to layouts in that they wrap a child layout or page. However, unlike layouts, they create a new instance of their children each time the user navigates.This behavior makes templates perfect for our huddle feature, as it allows us to reset the state and re-synchronize effects seamlessly when the channel or call data changes.In the  directory, create a new  file with the following code:: This hook allows us to get the active call. We use it along with the  from our app context to determine which call to display.: We use the  hook to decide the currently active call, giving priority to matching calls from both the current call and channel call.: The  function from  is used to render the Huddle and HuddleModal components to specific parts of the DOM—the sidebar and body. This allows us to dynamically position the components and ensure they integrate smoothly with the UI layout.: The  wrapper is used to pass the active call to our Huddle components, allowing them to manage the video and audio streams effectively.Before wrapping things up, let's add some important styles to our  file to ensure our huddle interface looks just right:With this, our huddles are fully functional, allowing users to collaborate seamlessly during video calls!We've covered a lot in this three-part series, from setting up the foundation of our Slack clone with a database, authentication, and initial pages, to adding real-time messaging and video calling.]]></content:encoded></item><item><title>Hacking Go-TFE and Fetching All Workspaces in Terraform Enterprise: A Journey Through Pagination</title><link>https://dev.to/muhammetberdi_jepbarov/hacking-go-tfe-and-fetching-all-workspaces-in-terraform-enterprise-a-journey-through-pagination-4lel</link><author>Muhammetberdi Jepbarov</author><category>devto</category><pubDate>Sun, 16 Feb 2025 11:59:36 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[Terraform Enterprise (TFE) is a powerful platform for organizations using Terraform at scale. It provides collaboration, governance, and self-service workflows for infrastructure automation. As organizations grow, managing infrastructure becomes increasingly complex, often requiring the ability to programmatically interact with TFE using its robust API.Recently, I found myself in a situation where I needed to fetch  for a given organization in TFE. Workspaces, as you may know, are the fundamental units in Terraform where runs occur. Each workspace holds the Terraform state file, which tracks infrastructure resources. For automation and reporting, I needed to pull in the full list of workspaces, but I quickly ran into a seemingly simple yet frustrating problem: .
  
  
  The Goal: Get All Workspaces
Our goal was clear — we wanted to retrieve every single workspace associated with a particular organization, without worrying about pagination limits. Whether for generating reports, validating configurations, or orchestrating CI/CD workflows, having a full view of all workspaces was crucial.The  library by HashiCorp provides an elegant way to interact with TFE’s API. The most straightforward way to list workspaces looks something like this:However, there was a catch.
  
  
  The Pain Point: Pagination Woes
When we ran this code, we noticed something odd — it only returned . After digging into the documentation and the source code of the  library, it became clear that the API defaults to a . Even when we explicitly set the page size to the maximum limit of 100, it still only gave us one page of results:The issue was evident: . This means that if your organization has more than 100 workspaces (which is not uncommon for larger teams), you have to make multiple requests to get all of them.But we didn’t want to be bound by pagination. We wanted all the workspaces in one go — a clean, consolidated list.
  
  
  The Solution: Handling Pagination Manually
To work around the pagination limit, the only solution was to  through the results until all workspaces were fetched. We crafted the following solution:
  
  
  Breaking Down the Solution
Let’s walk through the logic step by step:: We start with an empty slice to hold all workspaces and set the page number to 1.: Inside the  loop, we make requests using the , setting both the page number and the maximum page size.: After each request, we append the returned workspaces to our  slice.: If the number of workspaces in the current response is less than the page size (meaning we’ve reached the last page), we break out of the loop.: Finally, we return the full list of workspaces.Fetching all workspaces might seem like a trivial task at first glance, but it highlights a crucial aspect of working with APIs — understanding and handling pagination correctly.When dealing with APIs that support pagination:Always check default page sizes.Understand the max page size allowed.Implement proper loop termination to avoid infinite loops.Consider API rate limits when making multiple requests.In our case, the solution was not only about fetching data but about ensuring the stability and reliability of our automation pipelines.In the end, handling pagination in TFE’s API required us to step back, understand the underlying mechanics, and build a robust way to gather all the data we needed. The final solution is now part of our infrastructure tooling, allowing us to work seamlessly with Terraform Enterprise’s workspaces.So next time you hit a wall with an API and pagination, remember — it’s not a bug; it’s a feature. Master it, and your automation game will only grow stronger.]]></content:encoded></item><item><title>Building a Slack Clone with Next.js and TailwindCSS - Part Two</title><link>https://dev.to/tropicolx/building-a-slack-clone-with-nextjs-and-tailwindcss-part-two-11cl</link><author>Oluwabusayo Jacobs</author><category>devto</category><pubDate>Sun, 16 Feb 2025 11:58:05 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[In part one of this series, we built the basics of our Slack clone by setting up user authentication, workspace creation, and designing a responsive layout for our workspace hub.In this second part, we'll bring our Slack clone to life by adding real-time messaging with Steam React Chat SDK. We'll add features like rich text, file sharing, images, and emoji reactions.By the end of this part, users will be able to communicate with each other, making our app a functional chat platform.Adding More Channels To Your WorkspaceCurrently, users can only have one channel in a workspace, which is the channel added during the workspace creation process. Before adding the messaging feature to our app, let's enable users to create additional channels within a workspace.To add more channels, we'll create a pop-up modal that appears when users click an '' button in the sidebar.Creating the Channel API RouteFirst, we need an API route to handle channel creation. Create a  directory inside the existing /api/workspaces/[workspaceId] directory, then add a  file with the following code:Authentication and Validation: We check if the user is authenticated and if they belong to the workspace.: Only users with an '' role can create new channels.: We ensure that no other channel in the workspace has the same name.: If all checks pass, the channel is created and saved in the database.Creating the Add Channel ModalNext, let's create a modal for adding new channels. In the  directory, create a file called  with the following code:Let’s break down some of the component's key features:We use the  regular expression to ensure that each channel name is unique within the workspace by comparing it against existing channel names.: We use the  state to show a loading spinner () while the channel creation is ongoing.Navigation to New Channel: After successfully creating a channel, we redirect users to the new channel page. The modal is also closed by resetting the input fields and calling the  function.Adding the 'Add Channel' Button to the SidebarNext, let's add the  to the  file:In , we add a  hook to manage the modal's open state, and an ““ button that shows the modal if the current user is the workspace owner. This button is placed below the channel list for easy access.With this setup, users can now create new channels to help organize conversations within the workspace.Building the Chat InterfaceNow that users can create multiple channels, let's start working on our main chat interface. First, we'll be building the loading state for our chat UI, then the main chat interface, and finally, we'll customize different aspects of the chat, like the message input, date separator, and more.Creating a Channel Loading IndicatorTo let users know the channel chat is loading, we will create a loading indicator that provides a visual cue while fetching data. Stream already provides a default loading UI, but we want a custom one to match our application's design.Navigate to the  directory and create a new file called  with the following code:The component shows a skeleton screen, which gives users a visual hint that content is loading.Next, let's build the main chat interface so users can send messages and see their conversation history.Go to the  folder, create a new file named , and add the following code:The  component accepts the  data as a prop and uses the  component from  to manage chat sessions. Here are its key components:: This displays the conversation history within the current channel.: This component allows users to type and send messages. The  is rendered using React Portals, which helps position the input field in a different part of the DOM to match the layout we want for our Slack clone.: The  component also accepts our custom  component as a prop to override the default loading UI.Integrating the Channel Chat ComponentNext, we need to integrate the  component into our channel page. Go to the /client/[workspaceId]/[channelId]/page.tsx file and update it as follows:We check if the channel is still loading using the  state. If it is, we display the  component.Once the channel data is loaded, we display the  component, which provides the main chat interface for users to interact with.Finally, let’s add some styling to customize the look of our chat UI. Navigate to the  directory and update the  file with the following code:And with that, users can now send messages. However, the current UI still looks far from what we want, so in the following sections, we'll add custom components to enhance it.Adding a Custom Date SeparatorTo help users follow conversations more easily, we'll add custom date separators that indicate when messages are from different days.Go to the  folder, create a new file called , and add the following code:This component shows a separator to help users see when messages are from different days. Using the  function, we provide labels like "", "", or a formatted date with an ordinal suffix.Next, let’s add the  to the  component to make conversations more readable:Creating a Custom Emoji PickerIn this section, we'll create a custom emoji picker for our Slack clone using the  library. While Stream already provides an  using the same library, we want to build a more flexible version that better suits our chat components and integrates seamlessly into our clone.Firstly, we need to install the necessary packages for the emoji picker. These include:: This library provides the emoji picker component.: This package is specifically for using the emoji picker in React apps.: This contains all the data needed for the emojis.Run the following command in your terminal to install the packages:npm emoji-mart @emoji-mart/react @emoji-mart/data
Next, go to your  folder, create a new file called , and add the following code:: We use  to display the emoji picker and  to get all the emoji data. We also use  from  to handle the positioning of our emoji picker.: The component accepts several props, such as  for the button that triggers the picker,  to handle emoji selection, and optional styling classes for customization.: The  hook positions the emoji picker correctly relative to the button.: We use the  state to show or hide the picker. We also handle clicks outside the picker to close it.Implementing a Custom Message InputIn this section, we'll implement a custom message input for our Slack clone. This new input will allow users to easily add rich formatting, such as bold or italics, and even upload files and add emojis, creating a more dynamic chatting experience.To achieve this, we'll use , which is a robust framework for building rich text editors. We'll also use  to define keyboard shortcuts for formatting text.First, let's install the necessary libraries. Open your terminal and run the following commands:Next, we'll create our custom input component, which will act as the primary input container for our chat.Navigate to the  directory, create a new file named , and add the following code:There’s a lot going on here, so let’s break it down:: We use Slate to create a rich text editor that supports multiple formatting options, like bold, italics, underline, and strikethrough.: The  and  functions convert the editor's content to markdown format, allowing us to maintain rich formatting in text.: Functions like , , and  help manage file uploads, previews, and removal, making the chat input more versatile.: The buttons for formatting text (bold, italic, etc.) call the  function to add or remove specific text styles.: The  library binds hotkeys like  for bold,  for italics, and so on, making the editor more user-friendly.: The  function is responsible for sending the message by serializing the editor's content and then using Stream's  function.Next, let's integrate the  with our channel chat interface.Open the  file and update it with the following code:In the code above, we import the  component and pass it as the  prop for the  component to override the default UI.Next, let’s add some styling to support the rich text formatting features, ensuring elements like  blocks and other inline styles look polished.Open your  file, and include the following styles:While the chat interface is now visually improved with a customized message input, the message UI still needs work to match the look of the rest of the app.Creating a Custom Message UIIn this section, we'll create a custom message UI to match the look and feel of our Slack clone. This custom message component will display user messages in a clean interface with the ability to send reactions and view attachments.To get started, navigate to the  directory, create a new file named , and add the following code:In the  component: We use the  hook to get information about the current message displayed, such as the message content and its author. Using , we calculate the number of reactions and whether the user has reacted to the message or not. Users can add or remove reactions by clicking on the reaction buttons. The message can contain attachments such as images or files. We provide download and preview options for attachments. We added a button to send reactions using our custom .Now, let's integrate our new  component into our . Navigate to components/ChannelChat.tsx and update it to use :In , we update the  to use our custom  component. This change allows our newly defined custom message UI to display each message.And that’s it! We now have a fully customized chat experience similar to Slack.In this part, we made our Slack clone more interactive by implementing core messaging features using Stream React Chat SDK. We added custom components to further style and enhance the user interface with features like rich text formatting, emojis, and file sharing.In this series's next and final part, we will integrate a video calling feature using Stream React Video and Audio SDK. This feature will allow users to transition between text and video conversations, making the app more versatile and interactive.]]></content:encoded></item><item><title>🐞Debugging Life: The Software Engineering Lessons You Can’t Ignore</title><link>https://dev.to/hassanshahzadaheer/debugging-life-the-software-engineering-lessons-you-cant-ignore-4n79</link><author>Hassan Shahzad Aheer</author><category>devto</category><pubDate>Sun, 16 Feb 2025 11:58:02 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[In software engineering, every line of code has a purpose. A well-structured program runs smoothly, while a messy one leads to endless bugs and frustration. Life works the same way. The mistakes we make, the shortcuts we take, and the mindset we carry shape the outcomes we get. Here are some key lessons from software engineering that apply directly to life. The Blueprint Matters – Planning Before Execution
In programming, we don’t just start coding randomly. We . We define the , break the problem into smaller parts, and structure the code accordingly. If we skip this, we end up with messy code that’s hard to fix later.If we go through life without a clear , we act randomly and waste energy. Imagine starting a new habit, a career, or even a relationship without knowing where it leads. Without direction, you’re just throwing code into an empty file, hoping it runs.🪴  Before jumping into anything, ask yourself, “What is my goal? Why am I doing this?” Quick Fixes Create Bigger Problems Later
Sometimes, developers rush to fix a bug without thinking about the . The code works for now, but it breaks something else in the future. This is called , and eventually, it slows everything down.Many people look for quick fixes—crash diets instead of healthy habits, avoiding hard conversations instead of fixing relationships, or chasing shortcuts instead of real skills. But these  create .🪴  Don’t patch problems—. Invest time in doing things right the first time. Overengineering – The Trap of Perfectionism
A common mistake in coding is —making things so complicated that it becomes impossible to maintain. Sometimes, a  is better than an overly complex one.Overthinking and overplanning often lead to . Instead of making a simple start, we keep adding unnecessary steps, waiting for perfection, and never actually doing anything.🪴  Don’t wait for perfect conditions— and improve along the way. Stay Focused – Avoiding Distractions
In programming, every function must have a clear . If it’s unclear, the program doesn’t know what to do with it, leading to .If your values, boundaries, and priorities are undefined, you’ll constantly feel lost. People will , and you’ll struggle to make decisions.🪴  Define what matters to you.  Know when to say  and when to say . Debugging is Essential—But So is Learning from Mistakes
Every coder knows that debugging is part of the job. We don’t cry over errors—we fix them, learn, and improve.Mistakes are unavoidable. The problem isn’t —it’s . If we repeat the same mistakes without reflection, we stay stuck.🪴  See mistakes as . Ask, “What went wrong? What can I do better next time?” Distractions Are Like Memory Leaks
In software, memory leaks happen when the program keeps holding onto unnecessary data, .Distractions—social media, negativity, unnecessary worries—. You feel exhausted, but nothing productive happens.🪴  Free up space in your mind. Focus on what truly matters. Refactoring Makes Everything Better
Refactoring is about —making it simpler, more efficient, and easier to maintain.Sometimes, we hold onto old habits, outdated beliefs, or toxic relationships. Just like messy code, they slow us down.🪴  Regularly . Let go of things that no longer serve you and .
  
  
  Final Thoughts: Code Your Life Wisely
Life and software engineering share the same rule: Structure leads to stability. Whether you’re writing code or shaping your future, small, intentional decisions lead to big results.💬 Which lesson resonated with you the most? Share your thoughts in the comments! 🔥]]></content:encoded></item><item><title>Help with k3s setup on wsl</title><link>https://www.reddit.com/r/kubernetes/comments/1iqqly6/help_with_k3s_setup_on_wsl/</link><author>/u/watterbottle800</author><category>reddit</category><category>k8s</category><category>devops</category><pubDate>Sun, 16 Feb 2025 11:49:49 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Kubernetes</source><content:encoded><![CDATA[I'm trying to install a mern stack application consisting of 11 microservices some which have init containers that depend response from some of the other containers, I have a k3s cluster installed on wsl2, with single node and the external IP of the node is the eth0 ip of the wsl which is in 192.168 range. My pods are in 10.42.0.0/24 and svc in 10.43.0.0/24. All the pods are in default subnet, one of the pods is exposed on port 15672, behind a nodeport svc (say my-svc) with nodeport 30760. One of the init container completed only after a 200 response to curl http:my-svc:15762, but the connectivity is failing with "failed to connect to <svc cluster ip> port 15672 : couldn't connect to server" after sometime. This specific initcontainer doesn't have nslookup utility doesn't have nslookup or curl utility hence I tried both curl and nslookup from a test pod in the same namespace. Curl failed while nslookup resolved to correct service name and ip), I'm assuming the traffic is going till the svc but not beyond that. I tried with other pods for example call nginx test pod at port 80 from another test pod it failed as well. The same setup works fine in k3s cluster in my ec2 and my personal pc, this is my work pc. It would be really helpful if someone could advice on how to troubleshoot this. Thanks]]></content:encoded></item><item><title>🚀 Introducing My Personal Tech Blog: CodePanda.online 📝</title><link>https://dev.to/sheraz4194/introducing-my-personal-tech-blog-codepandaonline-5pk</link><author>Sheraz Manzoor</author><category>devto</category><pubDate>Sun, 16 Feb 2025 11:47:20 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[I’m super excited to share that I’ve launched my personal blog website — CodePanda.online! It’s a space where I’ll be sharing my knowledge, experiences, and helpful tips for web developers and tech enthusiasts.
  
  
  💻 What to Expect on CodePanda:
✅ Hands-on tutorials for JavaScript, TypeScript, React, Next.js, and more.
✅ Practical Tips & Tricks – Quick solutions to common coding challenges.
✅ Insights from real-world projects I’ve worked on.
✅ In-Depth Tutorials – Step-by-step guides on JavaScript, TypeScript, React, Next.js, and more.
✅ Snippets and solutions you can use in your own apps.I created CodePanda to document my journey as a developer and help others by sharing what I learn along the way. Whether you're just starting out or already deep into your coding career, I hope my posts make your development life a little easier.I’d love for you to stop by, explore, and let me know what topics you’d like me to cover next! 🚀🔥]]></content:encoded></item><item><title>Intel Killer E5000 Ethernet Support For Linux 6.15</title><link>https://www.phoronix.com/news/Intel-Killer-E5000-Linux-6.15</link><author>Michael Larabel</author><category>tech</category><pubDate>Sun, 16 Feb 2025 11:45:00 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[The upcoming Linux 6.15 kernel cycle will be adding support for Intel Killer E5000 Ethernet...]]></content:encoded></item><item><title>11 Must Read Software Design and Architecture Books for Developers</title><link>https://dev.to/somadevtoo/10-must-read-software-design-and-architecture-books-for-developers-347m</link><author>Soma</author><category>devto</category><pubDate>Sun, 16 Feb 2025 11:38:06 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.Hello friends, System design and Software design are two important topic for any tech interviews and also two important skills for Software developers.Without knowing how to design System you cannot create new software and it will also be difficult to learn and understand existing software and system.That's why big technical companies like  pays special attention to System design skill and test candidates thoroughly.Whether you are a beginner or experienced developer, you can read these books as you will definitely find valuable stuff. I have read them and even though I have been doing Software development for more than 15 years I have learned a lot.System design** is a complex process and you need to know a lot of stuff to actually design a system which can withstand test of time on production.Software architecture is another field where you are expected to learn a lot of things. It's simply impossible to become a software architect by reading few books but if you have experience then and hunger to learn then these books can be gold mine.These books allows you to learn from other people's experience. You can read these books to find what challenges they face when they design a real world system like Spotify, Google, or Amazon and how they overcome. Each story is a journey in itself and you will learn a thing or two by reading and then relating with your own experience. I love to read books and they are my primary source of learning, along with online courses nowadays. In this article, you will find few books which I have gone through in recent time to improve my knowledge about System Design and Software Architecture.If you love these books, give high five and if you got any other excellent book to share, feel free to drop a comment. P.S. Keep reading until the end. I have a free bonus for you.
  
  
  11 Best System Architecture and System Design Books for Developers
Here are my favorite 10 books on system design, software architecture, and software development. These are really good books and it's not just I am recommending it, you go reddit or hacker news, everywhere these books are recommend. They are also recommended to me by many people in past. I love head first books, they are simplest books you can read on programming and software development so when the release a book on Software Architecture, I immediately ordered a copy.It teaches you key principles to design software in a fun and engaging way, the Head First way. You will appreciate their simple to do examples and exercises in this complex topic.While I loved this book, I know many folks who really hate anything Head First, for them its like a comic book and not worth their time. If you are one of them I am sorry but this book definitely is a must, valuable insights, advices, and examples different topics that you need to consider when designing and architecting applications.If you are a senior developer and want to become tech lead or software architect, you should definitely read this book. This book was recommended to me by my tech lead but when I started reading this book, I literally fall asleep, it was too complex for me to understand, but I didn't give up and slowly I found that this is one heck of book for anyone who want to work on real systems. In this fantastic book on system design, Martin Kleppmann will help you understand the pros and cons of all the different technologies that are used for storing and processing data. It is a book that is written in a lucid style and presents a very broad overview of data storage systems.You will get a very good grasp of fundamental concepts, algorithms, as well as practical applications of various technologies. This is also one of the most popular book when it comes to learn Software design and System Design and I highly recommend this book to all kind of software developers . The book is also good for beginners and experienced, developers and software architects and anyone who wants to be better at software design in 2024. This book was recommended to me by one of my colleague who cracked Google interview, when I asked how did he prepared, he shared few books and courses apart from grinding leetcode and this was one of them.As the title suggests, this is the perfect book for everyone who is preparing for a system interview. Trust me, this book is the finest on the internet right now.  This book is created by Alex Xu who has gone through the same process. You will get access to a number of drawings and diagrams that will assist you in gaining an understanding of the real system. You will be able to understand what the recruiters are looking for in your answers to questions.Alex also have a companion , where you will not only find all the content of this book and the second part of System Design Interview Book
but also new content, deep dive into popular system questions like how to design YouTube and WhatsApp as well as  proven System design framework to solve Software design problem.In short, if you read this book, you will be able to confidently answer questions on your next system design interview.This is also one of the most recommend System design interview books on Reddit, Quora, Hacker News, Twitter, and other online platforms and its obvious from the number of reviews this book have on Amazon. If you are a senior developer who want to expand your knowledge about Software Engineering by learning from those who have done that in companies like Google then this book is for you.This book is an interesting read on intricacies of developing and maintaining a sustainable and healthy codebase, emphasizing the distinction between programming and software engineering.Drawing on their experiences at Google, the authors provide a detailed look at the practices employed by some of the world's leading software engineers to navigate the challenges of evolving codebases in response to changing requirements and demands.This software design book also delves into Google's unique engineering culture, processes, and tools, shedding light on how these elements contribute to the effectiveness of their engineering organization.Throughout the book, three fundamental principles are highlighted: the impact of time on software sustainability, the influence of scale on software practices within an organization, and the trade-offs engineers must consider when making design and development decisions.With a focus on practical insights and real-world examples, this book serves as a valuable resource for software engineers seeking to enhance their understanding of software engineering principles and practices.  While this book book is not exclusively focused on System design it has many valuable lessons on trade-offs developers must consider when making design and development decisions, which is quite important for senior developers and software architects.If you are looking a Software Architecture book to start with then this book is for you. Along with Head First Software Architecture this is best book I have read for senior developers who want to become software architect.System design, Software Design, and Software architecture are closely related. When you read this book, you will learn everything there is to know about Software structure and Design.  You will also be able to make your code smoother and integrate agile methodology into your solutions. This book is created by Robert C. Martin, fondly known as Uncle Bob which is also author of famous  and . This is the third in the series and many people read all three to become a better software developer. This book focuses on the different principles related to system analysis and design as well as the different challenges that system designers face while developing a solution in the real world. In addition, you will learn how to run unit tests and use a test-driven strategy for improving the efficiency of your systems.  According to industry experts, this is one of the most important systems design textbooks that is available on the market today. That is because this book will make you realize what has changed in the industry as well as why a change was necessary in the first place. Also, this book has sections that are dedicated to object-oriented coding and agile methodology, which are two of the most used methodologies these days. You will also learn how systems function, as well as about cloud computing and mobile applications. The 12th edition of System Analysis and Design by Scott Tilley is the latest book in this series and you should read that to get the update knowledge.If you are preparing for System design interview then you can also checkout  by Sandeep Kaul (Tech Lead @ Facebook) for better preparation.This is another interesting book that explains what patterns are important as well as how to apply these patterns to your designs. It focuses on object-oriented principles that are the basis of these patterns.Using this book, you will be able to vastly improve your knowledge of software development. You will get to know about important design principles that can be useful for solving software design principles. The 2nd edition of this book is now available and you should read that to learn design pattern with Java 8 and beyond. Most importantly how to use Lambdas and Stream to implement classic design pattern sin Java. And, if you need an online course to go along this book,  course by Dmitri Nestruk on Udemy is best as it shows the modern implementation of classic design patterns in Java. This is another book you can read to prepare for FAANG System Design interview. This book not just cover essential System design concepts which every software architect should know but also cover many popular System design questions and coding problems. Created by ,  a Google Software Engineer,  this is also one of the best selling book on System design on Amazon.  The best thing about this book is that it walk you through key components which are used to build any system like below:This book also includes real interview questions based on hundreds of interviews conducted at big tech companies like Google and Meta, and their detailed solutions. I highly recommend this book to anyone preparing for technical interviews.You can also combine this with the  or  System design course for better preparation. This is another highly recommended book on Software architecture. Written by Mark Richards and Neal Ford stands as an invaluable guide for developers aspiring to transition into the role of a software architect, a position consistently ranked among the top 10 best jobs in salary surveys globally. This first-of-its-kind book offers a comprehensive overview of software architecture, covering a wide array of topics such as architectural characteristics, patterns, component determination, diagramming, evolutionary architecture, and more. Written by hands-on practitioners with extensive experience in teaching software architecture classes, Mark Richards and Neal Ford focus on universal architecture principles applicable across various technology stacks. The book delves into critical aspects like architecture patterns, component identification, soft skills, modern engineering practices, and treating architecture as an engineering discipline. With a modern perspective that incorporates innovations from the past decade, this book equips both aspiring and existing architects with the necessary tools and insights to navigate the complexities of software architecture, making it an indispensable resource in the field.I highly recommend this book to any senior developer who also want to become a software architect. This is a great book that will give you a very good understanding of system analysis and design, as the title suggests. You will get access to extensive descriptions, as well as practical projects that reflect real-life situations. The 6th Edition of this book is also made up of a number of case studies and many examples along with deep explanations for all the case studies and examples. This book will definitely help you in achieving your goals as a design student. You will get a solid grasp of all the principles related to system analysis and design. This is another Software design book that will teach you all about the skills, ideas, and techniques that are connected with system analysis and design. Trust me when I say that this is the perfect and most comprehensive system design book for you. This System Design and Analysis book is written by Joshep Valacich and Joey George and also made up of a section on agile methods, which will ensure that this is a perfect student learning system for system designers. The writing style is very simple but informative, which means that it will be accessible to everyone, including those whose mother tongue is not English.  There are multiple edition of these book to make sure you choose the latest edition, the 9th Edition and if you need a Udemy course to go with this book I recommend  course on Udemy. I have found that by reading books and watching course is the best way to learn System design. That's all about the best Software architecture and System Design Books. You can read these books to learn essential Software Architecture design concepts and how to architect a system. If you are learning software architecture for System design interview then The System Design Interview Insider Guide book by Alex Xu also cover common Software design problems and shows you how to solve them which can be really beneficial for interviews. Thank you and all the best for your System Design interview and learning journey!!]]></content:encoded></item><item><title>Btrfs-Progs 6.13 Released With &quot;mkfs.btrfs --compress&quot; Support</title><link>https://www.phoronix.com/news/Btrfs-Progs-6.13</link><author>Michael Larabel</author><category>tech</category><pubDate>Sun, 16 Feb 2025 11:38:03 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Btrfs-Progs 6.13 was released this weekend as the newest routine update to the user-space utilities for the Btrfs file-system...]]></content:encoded></item><item><title>[Boost]</title><link>https://dev.to/asadbukhari/-2mmi</link><author>Asad Bukhari</author><category>devto</category><pubDate>Sun, 16 Feb 2025 11:37:01 +0000</pubDate><source url="https://dev.to/">Dev.to</source><content:encoded><![CDATA[The Future of Login Systems: Biometric Authentication]]></content:encoded></item><item><title>GaussianBlur in PyTorch (3)</title><link>https://dev.to/hyperkai/gaussianblur-in-pytorch-3-56do</link><author>Super Kai (Kazuya Ito)</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 11:20:32 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>134k Lines Of Code Posted As Latest Effort For COBOL Support Within GCC</title><link>https://www.phoronix.com/news/134k-Lines-v2-COBOL-For-GCC</link><author>Michael Larabel</author><category>tech</category><pubDate>Sun, 16 Feb 2025 11:19:15 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[While it's an old language, in recent months there's been a renewed effort over a COBOL language front-end for the GCC compiler. There's been out-of-tree COBOL support for GCC that is working to get into the mainline GNU Compiler Collection codebase. This weekend saw the latest iteration of those patches amounting to 134k lines of new code...]]></content:encoded></item><item><title>[D] The steps to do original research ( it&apos;s a rant as well )</title><link>https://www.reddit.com/r/MachineLearning/comments/1iqq4fz/d_the_steps_to_do_original_research_its_a_rant_as/</link><author>/u/Snoo_65491</author><category>dev</category><category>ai</category><category>reddit</category><pubDate>Sun, 16 Feb 2025 11:14:23 +0000</pubDate><source url="https://www.reddit.com/r/MachineLearning/top/?sort=top&amp;t=day&amp;limit=3">Reddit - ML</source><content:encoded><![CDATA[I am a Master's Student in the UK. I have been reading papers on Diffusion for a while. I have contacted PhD students at my University and have expressed my interest in working with them. I thought that I would be helping them with their research direction. However, after talking to them, they told me to read some papers and then find a research idea. For Context, I am reading about Diffusion Models. The more I read, I realize that I lack some math fundamentals. I am filling those holes, through courses, books and articles. However, it takes time. I believe that this lack of fundamental understanding is stopping me from coming up with hypotheses. I can find some research gaps through recent survey papers, but I am not able to come up with any hypotheses or a solution.Am I heading in the right direction? Does understanding stuff from a fundamental standpoint help with producing novel research ideas? How to generate novel research ideas? If you have some tips, I would be glad to hear them.P.S. I have never published before. Therefore, I am sorry if I am missing something fundamental. ]]></content:encoded></item><item><title>Getting Started with AWS Bedrock</title><link>https://dev.to/alexypulivelil/getting-started-with-aws-bedrock-29n0</link><author>Alexy Pulivelil</author><category>ai</category><pubDate>Sun, 16 Feb 2025 11:06:49 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[Developers can create and scale generative AI applications with Amazon Bedrock, a fully managed service, by utilising foundation models from AWS and other suppliers. In this guide, I’ll walk you through getting started with AWS Bedrock and invoking the Amazon Titan Text Lite v1 model for text generation.
Before you begin, ensure that you have the following:AWS Account with access to Amazon Bedrock(For testing will be using AmazonBedrockFullAccess)AWS CLI installed and configured with appropriate permissionsBoto3 (AWS SDK for Python) installed on your machineYou can install Boto3 using:Step 1: Set Up AWS CredentialsIf you haven’t already configured your AWS credentials, run:Enter your AWS Access Key ID, Secret Key, and select your preferred region where Amazon Bedrock is available (e.g., us-east-1).Step 2: Initialize the Bedrock Client
To interact with Amazon Bedrock, we need to initialise the AWS Bedrock runtime client using Boto3:# Initialize Bedrock client
bedrock = boto3.client("bedrock-runtime", region_name="us-east-1")
Step 3: Invoke Amazon Titan Text Lite v
Let’s create a simple script to invoke Amazon Titan Text Lite v1 for generating a text response.# Define the input text
question = "What is the capital of India?"

# Prepare the payload
payload = {
    "inputText": question,
    "textGenerationConfig": {
        "maxTokenCount": 100,
        "temperature": 0.5,
        "topP": 0.9
    }
}

# Invoke Titan Text Lite v1
response = bedrock.invoke_model(
    modelId="amazon.titan-text-lite-v1",
    contentType="application/json",
    accept="application/json",
    body=json.dumps(payload)
)

# Parse response
result = json.loads(response["body"].read().decode("utf-8"))

# Extract and print the output text
if "results" in result and isinstance(result["results"], list):
    print("Answer:", result["results"][0]["outputText"].strip())
else:
    print("Unexpected response format:", result)
Step 4: Running the ScriptSave the script as invoke_bedrock.py and run it using:Expected Output:Answer: New Delhi is the capital of India. It is situated in the countrys federal district, which is known as the National Capital Territory of Delhi (NCT), and is located in the Indian subcontinent.Step 5: Fine-tuning Model ParametersAmazon Titan models allow temperature and topP tuning for response variation:temperature: Controls randomness (Lower = More deterministic, Higher = More creative)topP: Controls sampling probability (Higher = More diverse responses)
Adjust these values in the textGenerationConfig section for different results.Conclusion
You have successfully invoked the Amazon Titan Text Lite v1 model using AWS Bedrock! You can now integrate this into your applications for chatbots, summarization, and content generation.]]></content:encoded></item><item><title>Why Go’s Functional Programming is the Ultimate Coding Style</title><link>https://dev.to/leapcell/why-gos-functional-programming-is-the-ultimate-coding-style-53ee</link><author>Leapcell</author><category>dev</category><category>go</category><pubDate>Sun, 16 Feb 2025 11:01:24 +0000</pubDate><source url="https://dev.to/t/go">Dev.to Go</source><content:encoded><![CDATA[When you hear "functional programming," Go usually isn't the first language that comes to mind. You might think of Haskell, with its pure functions and monads (don't panic, we'll explain that in detail later), or JavaScript, which loves to showcase its features with higher - order functions and callbacks. But in fact, you can also do functional programming in Go, and the process is far from dull.First of all, let's talk about higher - order functions. Higher - order functions can work well with other functions, either taking them as parameters or returning them as values. In the world of Go, implementing higher - order functions is not only possible but also quite ingenious.You see, in this example, the  function takes an integer slice and a judgment function , and returns the elements in the slice that meet the judgment conditions. Doesn't it seem a bit like a faster JavaScript?Next up is currying. It is the process of breaking down a function that takes multiple arguments into a series of functions, each taking a single argument. Currying is actually not as complicated as it might seem.In this example, the  function takes an integer  and returns a new function. This new function takes another integer  and returns the result of . Simple, straightforward, and gets the job done without any frills.One of the characteristics of functional programming is immutability. Once something is constructed, it doesn't change. Instead, if you need something different, you build a new one. This might sound wasteful at first, but in fact, it keeps the code clean and reduces side effects.In this example, instead of directly modifying the original , we created a new  and modified it.Pure functions are like tidy friends. They don't touch or modify anything outside their scope. What you pass in is what you use, and what they return is their only effect.In this example, the  function only depends on the passed - in parameter  and doesn't affect any external variables.In the simplest terms, functors are anything that can map a function. Think of the humble array, applying a function to each item and getting a new array. In Go, there is no built - in general  function, but we can build one ourselves.Here, we defined a  function that takes an integer slice and a function and returns a new slice, where each element is the result of processing the original slice element by the function.Now, let's talk about endofunctors. It's just a fancy way of saying a functor that maps a type to the same type. Simply put, starting from a Go slice, you end up with a Go slice of the same type. It's not rocket science, just a matter of type consistency.Taking the previous  as an example, it's a kind of endofunctor in disguise. It takes  and returns  without type conversion.Imagine a party where everyone has to bring a friend. Monoids are like that, but for types. They need two things: an operation that combines two types and a special value, which is like the most likable friend - it gets along with everyone but doesn't change anything about them.In Go, you can see this with slices or numbers. Let's take numbers as an example because they're easier to work with:Here, 0 is our hero, the identity element, which keeps the numbers unchanged."When someone says, 'A monad is a monoid in the category of endofunctors,' they're basically showing off their computer - science vocabulary." To explain in detail: A monad is a programming construct that deals with types and functions in a super - special way - like some people are picky about how their coffee is brewed.In the simplest terms, a monoid is about combining things together using a special rule, which includes a useless element or identity element. Now, add endofunctors, which are like ordinary old functions but stick to transforming things within their own little universe (category). Put it all together, and you'll see that a monad can be seen as a way to chain functions together in a sequence, but in a super - self - contained way while also respecting the original structure of the data. It's like saying, "We're going on a road trip, but we can only take the scenic backroads, and we'll end up back where we started."Monads are all - rounders. They can not only handle values with context (such as errors or lists) but also chain operations together by passing the context. In Go, it might be a bit difficult to mimic this, but let's take a look at error handling, which is a practical use of monads.This makeshift monad can help us handle computations that might go wrong without causing panics and chaos in the code.Functional programming in Go might not be the poster child of the functional paradigm, but it's entirely feasible and can even be fun. Who would have thought, right? Now, you should understand that Go can achieve functional programming just like other languages. With a little effort, you can write clean, efficient, and robust code. Finally, I'd like to recommend a platform that's perfect for deploying Golang code: 
  
  
  1. Multi - Language Support
Develop with JavaScript, Python, Go, or Rust.

  
  
  2. Deploy unlimited projects for free
pay only for usage — no requests, no charges.
  
  
  3. Unbeatable Cost Efficiency
Pay - as - you - go with no idle charges.
Example: $25 supports 6.94M requests at a 60ms average response time.

  
  
  4. Streamlined Developer Experience
Intuitive UI for effortless setup.
Fully automated CI/CD pipelines and GitOps integration.
Real - time metrics and logging for actionable insights.

  
  
  5. Effortless Scalability and High Performance
Auto - scaling to handle high concurrency with ease.
Zero operational overhead — just focus on building.
]]></content:encoded></item><item><title>🚀 New eBook: The Developer’s Guide to UX Design Thinking – Future-Proof Your Career</title><link>https://dev.to/ricky_creates/new-ebook-the-developers-guide-to-ux-design-thinking-future-proof-your-career-3m6k</link><author>Ricky Synnot</author><category>ai</category><pubDate>Sun, 16 Feb 2025 11:00:21 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[
  
  
  How Developers Can Stay Ahead in an AI-Driven World
Most developers think writing great code is enough. It’s not.AI is automating more of our work every day. The developers who thrive in the next decade won’t be the ones who can ship the fastest—they’ll be the ones who understand what to build, why it matters, and how to create great user experiences.This is exactly why I wrote The Developer’s Guide to UX Design Thinking—a practical book that helps developers go beyond code and become  team members.Here’s a core concept from the book:
  
  
  The Developer’s Career Risk Pyramid
Most developers sit at one of three levels:🔴 At Risk – Developers who only write code (AI is automating this fast)
🟠 Safe for Now – Developers who solve problems, not just execute tasks
🟢 Future-Proofed – Developers who understand UX, product thinking, and collaborationThe higher you go, the safer your career. If you want to be more than a human compiler, you need to learn how to work with designers, influence product decisions, and create user-friendly solutions.This isn’t a design book for designers—it’s a practical guide to UX for developers who want to build better products and advance their careers.
  
  
  📖 Part 1: Foundations of UX Design Thinking
Why UX matters for developersThe rise of AI & why UX is irreplaceableUnderstanding the designer’s toolkit
  
  
  ⚡ Part 2: Applying UX in Development
Building empathy for usersPrototyping & collaborating with designersDesigning for accessibility & scalability
  
  
  🚀 Part 3: Enhancing Collaboration & Future-Proofing Your Career
Bridging the developer-designer gapHow to influence design decisions as a developerThe evolving role of devs in product teams
  
  
  🛠 Part 4: Tools, Case Studies & Advanced Topics
Real-world case studies from top tech companiesEssential UX & dev tools you should be usingThe future of UX in an AI-driven worldQuick-reference frameworks & checklists for daily useTo celebrate the launch, the book is available for just $5. No fluff—just real strategies, examples, and frameworks you can use immediately.Would love to hear from the dev.to community—how often do you get involved in UX decisions? Or is it always just “build this” with no context? Drop your thoughts below!]]></content:encoded></item><item><title>Is Nvidia on Linux still bad?</title><link>https://www.reddit.com/r/linux/comments/1iqpsy0/is_nvidia_on_linux_still_bad/</link><author>/u/Szer1410</author><category>linux</category><category>reddit</category><pubDate>Sun, 16 Feb 2025 10:51:56 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[I am planning to buy a laptop. I want to have a peak Linux experience, so I have been looking for laptops with dedicated AMD GPUs. While searching, I noticed a few things:There are not many laptops with dedicated AMD GPUs. Most available options come with integrated GPUs like the 780M.For the price of a laptop with a 780M, I can get a laptop with an RTX 3050 or better.System76 sells Linux laptops with Nvidia GPUs on their website.Additionally, I want to install Manjaro on my laptop. Are there any Linux distributions with better Nvidia support?]]></content:encoded></item><item><title>Kubernetes In-Place Pod Vertical Scaling</title><link>https://scaleops.com/blog/kubernetes-in-place-pod-vertical-scaling/</link><author>/u/Wownever</author><category>reddit</category><category>k8s</category><category>devops</category><pubDate>Sun, 16 Feb 2025 10:50:19 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Kubernetes</source><content:encoded><![CDATA[Kubernetes continues to evolve, offering features that enhance efficiency and adaptability for developers and operators. Among these are Resize CPU and Memory Resources assigned to Containers, introduced in Kubernetes version 1.27. This feature allows for adjusting the CPU and memory resources of running pods without  them, helping to minimize downtime and optimize resource usage. This blog post explores how this feature works, its practical applications, limitations, and cloud provider support. Understanding this functionality is vital for effectively managing containerized workloads and maintaining system reliability.What Is In-Place Pod Vertical Scaling?Traditionally, modifying the resource allocation for a Kubernetes pod required a restart, potentially disrupting applications and causing downtime. In-place scaling changes this by enabling real-time CPU and memory adjustments while the pod continues running. This is particularly useful for workloads with a very low tolerance for pod evictions.What’s behind the feature gate?The new  spec element allows you to specify how a pod reacts to a patch command that changes its resource requests, enabling changing resource requests without rescheduling the pod.The result of the change attempt is communicated as part of the pods’ status in a field called   (for more information on the new fields, check out the Kubernetes API documentation.)Additionally, this feature introduces the  in the spec element for containers, allowing fine-grained control over resizing behavior and allowing the developer to choose if CPU change or Memory change should lead to rescheduling the pod.Dynamic Scaling: Modify CPU and memory allocations while pods run.No Restarts: Avoid downtime caused by pod restarts.Granular Control: Enable precise resource tuning for better efficiency.The InPlacePodVerticalScaling feature integrates seamlessly into Kubernetes to provide a more dynamic approach to resource allocation. Here’s a detailed breakdown of how it operates: Activating the InPlacePodVerticalScaling feature gate in your cluster configuration is required to enable this functionality. This allows the kubelet on each node to detect and process resource updates dynamically.Dynamic Resource Updates via Kube API: With the feature enabled, the kubelet directly applies resource changes to running pods without requiring restarts. Supported container runtimes (e.g., containerd v1.6.9 or later) ensure these updates are applied efficiently. If constraints like insufficient free memory or CPU prevent the changes, the pod follows the regular flow: it is recreated and rescheduled. The  field dictates how CPU and memory adjustments are handled. For instance, you can set  for live updates without restarts or  to force a restart when a specific resource is modified.Limitations and ConsiderationsWhile In-Place Pod Vertical Scaling offers significant benefits, it has limitations:1. Cloud Provider SupportAWS: Not supported by Amazon Elastic Kubernetes Service (EKS) as there is no way to activate the needed feature gate.GCP: Google Kubernetes Engine (GKE) supports this feature as an alpha capability, starting with Kubernetes version 1.27. It must be enabled during cluster creation and requires disabling auto-repair and auto-upgrade. See the GKE alpha clusters documentation.Several Kubernetes policies and mechanisms govern resource scaling. These include:Resource quotas limit the total CPU and memory usage for a namespace. If an InPlacePodVerticalScaling operation exceeds these limits, the scaling request will fail. For example:apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-quota
  namespace: example-namespace
spec:
  hard:
    requests.cpu: "10"
    requests.memory: "32Gi"
Limit ranges enforce minimum and maximum resource constraints for individual pods or containers within a namespace. The pod will be denied the resource adjustment if a scaling operation exceeds these bounds. Example configuration:apiVersion: v1
kind: LimitRange
metadata:
  name: limits
  namespace: example-namespace
spec:
  limits:
  - type: Container
    max:
      cpu: "2"
      memory: "4Gi"
    min:
      cpu: "100m"
      memory: "128Mi"
Admission controllers, such as Pod Security Admission or custom webhook controllers, can deny scaling operations if they conflict with security or operational policies. For example, a controller may restrict pods from exceeding certain CPU limits.Not all applications can dynamically consume additional resources or adjust to reduced allocations. Examples include:Thread Pool Bound applications, like Gunicorn or Unicorn, rely on predefined worker counts.Memory-Bound Applications: Applications like Java with fixed Xmx parameters.In cases where the HPA is based on the resource being patched, this can cause an erratic horizontal scaling behavior. For example:HPA scaling behavior is based on CPU average utilizationA pod is changing from 1 core to 2 cores; this can cause a scale-down in pods and affect the bottom-line performance of the application.A pod changes from 2 cores to 1; this can cause a scale-up in pods, creating a waste of resources or potential downstream pressure due to the additional and unexpected pods created. Dynamically allocate resources during training and inference phases. Combine Horizontal Pod Autoscaler (HPA) with In-Place Pod Vertical Scaling for efficient surge handling. Reduce waste by allocating the right amount of resources to each pod in real-time. Some applications require significantly higher CPU and memory resources during startup compared to their runtime needs. Google’s example, Startup CPU Boost, demonstrates how dynamic resource scaling can address such scenarios effectively.1. Enable the Feature GateAdd the following configuration to enable the InPlacePodVerticalScaling feature:apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  extraArgs:
    feature-gates: InPlacePodVerticalScaling=true
controllerManager:
  extraArgs:
    feature-gates: InPlacePodVerticalScaling=true
scheduler:
  extraArgs:
    feature-gates: InPlacePodVerticalScaling=true
For GKE, create a cluster with alpha features enabled:gcloud container clusters create poc \
    --enable-kubernetes-alpha \
    --no-enable-autorepair \
    --no-enable-autoupgrade
Define a deployment with initial CPU and memory requests and limits:apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
spec:
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
    spec:
      containers:
      - name: nginx
        image: nginx
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
          requests:
            memory: "64Mi"
            cpu: "250m"
        resizePolicy:
        - resourceName: cpu
          restartPolicy: NotRequired
        - resourceName: memory
          restartPolicy: NotRequired
Once deployed, you can check the cpu.weight, cpu.max, memory.max, memory.min from within the container to see the initial values that the container starts with.kubectl exec -it $(kubectl get pods -l app=app -o jsonpath='{.items[*].metadata.name}') -- cat /sys/fs/cgroup/cpu.weight

kubectl exec -it $(kubectl get pods -l app=app -o jsonpath='{.items[*].metadata.name}') -- cat /sys/fs/cgroup/cpu.max

kubectl exec -it $(kubectl get pods -l app=app -o jsonpath='{.items[*].metadata.name}') -- cat /sys/fs/cgroup/memory.min

kubectl exec -it $(kubectl get pods -l app=app -o jsonpath='{.items[*].metadata.name}') -- cat /sys/fs/cgroup/memory.max 
Adjust resource allocations for a running pod dynamically:kubectl patch pod $(kubectl get pods -l app=app -o jsonpath='{.items[*].metadata.name}') -p '{"spec":{"containers":[{"name":"nginx","resources":{"requests":{"cpu":"750m"}}}]}}'
Confirm updated resource settings:kubectl describe pod -l app=app
Additionally, you can connect to the container and see the change in cpu.weight, cpu.max, memory.max, memory.min from within the container.kubectl exec -it $(kubectl get pods -l app=app -o jsonpath='{.items[*].metadata.name}') -- cat /sys/fs/cgroup/cpu.weight

kubectl exec -it $(kubectl get pods -l app=app -o jsonpath='{.items[*].metadata.name}') -- cat /sys/fs/cgroup/cpu.max

kubectl exec -it $(kubectl get pods -l app=app -o jsonpath='{.items[*].metadata.name}') -- cat /sys/fs/cgroup/memory.min

kubectl exec -it $(kubectl get pods -l app=app -o jsonpath='{.items[*].metadata.name}') -- cat /sys/fs/cgroup/memory.max
In-Place Pod Vertical Scaling is a powerful tool for managing dynamic workloads in Kubernetes, reducing downtime, and optimizing resource usage. While its adoption depends on cloud provider support and application compatibility, this feature offers significant efficiency and cost-saving benefits. As Kubernetes evolves, such features will become essential for effective container orchestration.While Google’s Kube Startup CPU Boost example is just a specific use case scenario, ScaleOps provides an all in one resource management solution to address all needed scenarios related to Kubernetes resource management.]]></content:encoded></item><item><title>Deepseek-R1: El Modelo Revolucionario que Eleva los Estándares de los LLM de Código Abierto</title><link>https://dev.to/angel_rojas_6904bae237a0d/deepseek-r1-el-modelo-revolucionario-que-eleva-los-estandares-de-los-llm-de-codigo-abierto-42cc</link><author>Angel Rojas</author><category>ai</category><pubDate>Sun, 16 Feb 2025 10:38:07 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[Deepseek-R1 es el modelo insignia desarrollado por Deepseek, una empresa china emergente. Con innovaciones clave como la combinación de aprendizaje por refuerzo y ajuste fino supervisado, así como la técnica Mixture-of-Experts (MoE), Deepseek-R1 redefine el panorama de los LLM de código abierto. Su capacidad para manejar contextos extensos y su arquitectura eficiente lo posicionan como un referente para desarrolladores y empresas.]]></content:encoded></item><item><title>Why Choose an Career in Ethical Hacking?</title><link>https://dev.to/ankit_cyber/why-choose-an-career-in-ethical-hacking-1dlf</link><author>ankit_Cyber</author><category>ai</category><pubDate>Sun, 16 Feb 2025 10:37:46 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[Pursue ethical hacking for a dynamic career where you protect organizations from cyber threats, with high demand, competitive salaries, and continuous learning with endless growth potential.]]></content:encoded></item><item><title>I created a CLI trash command</title><link>https://github.com/Maxsafer/trash-tool</link><author>/u/lavishclassman</author><category>linux</category><category>reddit</category><pubDate>Sun, 16 Feb 2025 10:23:55 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[Its a less than 400 lines CLI trash manager :) made it for personal use and for fun.   submitted by    /u/lavishclassman ]]></content:encoded></item><item><title>Deepseek-R1: El Modelo Revolucionario que Eleva los Estándares de los LLM de Código Abierto</title><link>https://dev.to/angel_rojas_6904bae237a0d/deepseek-r1-el-modelo-revolucionario-que-eleva-los-estandares-de-los-llm-de-codigo-abierto-4lne</link><author>Angel Rojas</author><category>ai</category><pubDate>Sun, 16 Feb 2025 10:21:04 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[
La revolución de los LLM de código abierto comenzó con proyectos pioneros como Alpaca, pero ahora, Deepseek-R1 llega para llevar estos modelos a un nivel superior, destacándose por su rendimiento, eficiencia y escalabilidad. 😎¿Qué es Deepseek-R1? 🤔
Deepseek-R1 es el modelo insignia desarrollado por Deepseek, una empresa china de inteligencia artificial fundada en 2023 por Liang Wenfeng. Este modelo de lenguaje de código abierto sobresale por su capacidad para procesar contextos extensos, resolver problemas complejos y ofrecer respuestas precisas en diversas tareas, posicionándose como una evolución significativa en el ecosistema de los LLM.Mini Presentación: Origen y Filosofía 🌏
Origen: Nacida en el vibrante entorno tecnológico de China, Deepseek surgió en 2023 en medio de una explosión de innovación en inteligencia artificial.Filosofía: Inspirándose en proyectos pioneros como Alpaca, Deepseek apuesta por la transparencia y la colaboración a través del código abierto. Su misión es democratizar el acceso a tecnologías avanzadas, permitiendo que desarrolladores de todo el mundo puedan utilizar, modificar e integrar sus modelos en una amplia variedad de proyectos.Desarrollo y Evolución: De Alpaca a Deepseek-R1 🔄
Deepseek-R1 representa la respuesta evolutiva a los primeros esfuerzos de la comunidad. Entre sus principales innovaciones destacan:Métodos de Entrenamiento Híbridos: Combina técnicas de aprendizaje por refuerzo (RL) y ajuste fino supervisado (SFT), aprovechando enormes volúmenes de datos para adaptarse a múltiples tareas.
Innovación Arquitectónica: Utiliza la técnica Mixture-of-Experts (MoE), que activa solo una parte de sus parámetros en cada consulta, optimizando el uso de recursos sin sacrificar la capacidad del modelo.
Capacidad de Contexto Extendido: Con la capacidad de manejar hasta 128,000 tokens en una sola entrada, Deepseek-R1 supera las limitaciones de modelos anteriores, permitiendo un análisis profundo y respuestas complejas.
Lista de Modelos y Explicación de Cada Uno 📚
Deepseek ofrece no solo su modelo principal, sino también varias versiones destiladas que se adaptan a diferentes necesidades y entornos:Deepseek-R1 (Modelo Principal): Con 671 mil millones de parámetros, este modelo ofrece un rendimiento excepcional para aplicaciones de alto rendimiento en investigación, empresas y desarrollos que requieren procesamiento intensivo.Deepseek-R1-Distill-Qwen-1.5B: Variante destilada con 1.5 mil millones de parámetros, ideal para proyectos con recursos limitados o respuestas rápidas, como aplicaciones móviles.Deepseek-R1-Distill-Qwen-7B: Con 7 mil millones de parámetros, ofrece un equilibrio perfecto entre rendimiento y eficiencia, adecuado para desarrollos empresariales.Deepseek-R1-Distill-Qwen-14B: Con 14 mil millones de parámetros, ofrece tareas complejas y análisis profundos, ideal para proyectos que requieren alta capacidad de procesamiento.Deepseek-R1-Distill-Llama-8B: Variante de 8 mil millones de parámetros que combina un buen entendimiento contextual con eficiencia operativa, ideal para sistemas generales.Deepseek-R1-Distill-Llama-14B: Con 14 mil millones de parámetros, maneja sofisticados contextos y es ideal para proyectos que exigen procesamiento avanzado.Deepseek-R1-Distill-Llama-70B: Con 70 mil millones de parámetros, esta versión ofrece un rendimiento de alta gama comparable con modelos comerciales avanzados, adecuado para aplicaciones de misión crítica.¿Dónde Utilizarlos? 🌐
Deepseek-R1 y sus variantes están diseñados para integrarse de forma versátil en distintos entornos:Plataforma Web: Al igual que ChatGPT, Deepseek-R1 está disponible para demos y pruebas interactivas.
API para Integración: Con opciones de API para facilitar la integración en proyectos, disponibles oficialmente o a través de terceros.
En Local con Ollama: Al ser un modelo Open Source, puedes descargarlo en tu computadora y ejecutarlo localmente, incluso en versiones más pequeñas que pueden correr en equipos con especificaciones limitadas.
¿Por Qué Deepseek-R1 es una Revolución? ✨
Deepseek-R1 eleva los estándares en los LLM de código abierto con varias mejoras:Rendimiento Excepcional: Su capacidad para gestionar contextos extensos y tareas complejas lo coloca entre los modelos más avanzados del ámbito abierto.
Eficiencia Operativa: Con la técnica Mixture-of-Experts y versiones destiladas, optimiza el uso de recursos, permitiendo su implementación incluso en entornos con hardware limitado.
Innovación Técnica: La combinación de métodos avanzados de entrenamiento y arquitecturas modernas prepara el terreno para futuros desarrollos en inteligencia artificial.
Accesibilidad y Colaboración: Distribuido bajo una licencia permisiva, fomenta la integración, modificación y mejora continua, impulsando la innovación global. 🌍
Deepseek-R1 y todas sus variantes se distribuyen bajo la Licencia MIT, lo que significa:Uso Gratuito: Tanto para fines comerciales como no comerciales.
Modificación y Redistribución: El código es completamente abierto, permitiendo que la comunidad lo adapte y mejore.
Integración Sencilla: Facilita la incorporación de los modelos en proyectos propios sin restricciones onerosas.
Conclusión
Deepseek-R1 no solo continúa la revolución iniciada por Alpaca en los LLM de código abierto, sino que establece nuevos estándares con su rendimiento sobresaliente, eficiencia operativa y filosofía de código abierto. Con sus versiones destiladas, Deepseek-R1 está preparado para impulsar una nueva era en la integración de la inteligencia artificial en aplicaciones, investigación y desarrollo colaborativo. ¡El futuro de los LLM se ve prometedor! 🌟Para más información, visita el artículo completo aquí.]]></content:encoded></item><item><title>“A calculator app? Anyone could make that”</title><link>https://chadnauseam.com/coding/random/calculator-app</link><author>pie_flavor</author><category>hn</category><pubDate>Sun, 16 Feb 2025 10:16:49 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Proj Ideas 💡 - Willing to lock in for Go (2025)</title><link>https://www.reddit.com/r/golang/comments/1iqp4re/proj_ideas_willing_to_lock_in_for_go_2025/</link><author>/u/ComfortableAcadia839</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sun, 16 Feb 2025 10:04:12 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[I'm a full stack JS/TS developer but just recently tried Go, built an in memory key-value Redis clone.. I've realised the language makes me enjoy coding ---> Can y'all recommend some project ideas (intermediate to advanced difficulty)I want to build some solid projects ;)]]></content:encoded></item><item><title>just a silly game</title><link>https://dev.to/bankai2054/just-a-silly-game-29kl</link><author>anas barkallah</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 10:02:04 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>I created a command line SSH tunnel manager to learn Go</title><link>https://github.com/alebeck/boring</link><author>/u/Savings-Square572</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sun, 16 Feb 2025 09:56:56 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Migrating from AWS CDK v1 to CDK v2</title><link>https://dev.to/sami_jaballah/migrating-from-aws-cdk-v1-to-cdk-v2-21nd</link><author>Sami Jaballah</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 09:40:02 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[If you’re currently using CDK v1 in your daily work, you’ve probably hit a roadblock trying to implement new AWS features. AWS isn’t adding those to CDK v1 anymore—so to keep up with the latest and greatest, you’ll need to migrate to CDK v2. It might sound like a hassle, but don’t worry—I’ve got your back. Let’s go through this step-by-step and get you up to speed, Python style.
  
  
  Why Should You Care About CDK v2?
Alright, let’s address the big question: why even bother migrating to CDK v2? Well, here are three solid reasons:Simplified Dependencies: No more pulling in tons of packages for different AWS services. CDK v2 bundles everything into a single package: aws-cdk-lib. How awesome is that?Stay Updated: CDK v1 isn’t getting any love anymore. If you want to keep up with the latest AWS features and updates, v2 is where it’s at.Better Developer Experience: AWS has introduced some stability guarantees and cleaned up APIs, making it easier for us to write and maintain our infrastructure code.1. Consolidated Package Structure
Remember the days of importing a separate package for each AWS service? That’s history now. CDK v2 unifies everything into aws-cdk-lib.from aws_cdk import core
from aws_cdk.aws_s3 import Bucket
from aws_cdk import Stack
from aws_cdk.aws_s3 import Bucket
2. Goodbye to Deprecated APIsSome APIs and constructs from v1 didn’t make the cut in v2. For instance, core.Construct has been replaced by constructs.Construct. A little cleanup never hurts, right?There are some great new features, like improved stability guarantees for low-level (L1) constructs and better testing capabilities with assertions.
  
  
  Let’s Get Migrating: Step-by-Step Guide
Ready to dive in? Follow these steps to upgrade your Python CDK project to v2.1. Update Your DependenciesStart by upgrading your project dependencies to use CDK v2. Open your requirements.txt or Pipfile and update them:aws-cdk-lib>=2.0.0
constructs>=10.0.0
Then, install the new dependencies:pip install -r requirements.txt
This is where the magic happens. Go through your code and replace aws_cdk.core with aws_cdk.Stack, and adjust other imports to use aws-cdk-lib.from aws_cdk import core
from aws_cdk.aws_s3 import Bucket
from aws_cdk import Stack
from aws_cdk.aws_s3 import Bucket
3. Refactor Deprecated ConstructsSome constructs have been replaced or removed. For example, core.Construct is now constructs.Construct. Update your code accordingly.class MyBucket(core.Construct):
    def __init__(self, scope: core.Construct, id: str):
        super().__init__(scope, id)
        Bucket(self, "MyBucket")
from constructs import Construct

class MyBucket(Construct):
    def __init__(self, scope: Construct, id: str):
        super().__init__(scope, id)
        Bucket(self, "MyBucket")
4. Remove Unnecessary Feature FlagsCDK v2 has removed or integrated several feature flags that were necessary in v1. To clean up your cdk.json file, remove any obsolete flags.{
  "app": "python3 app.py",
  "context": {
    "@aws-cdk/core:newStyleStackSynthesis": true,
    "@aws-cdk/aws-ec2:uniqueImds": true,
    "@aws-cdk/core:stackRelativeExports": true,
    "@aws-cdk/aws-secretsmanager:parseOwnedSecretName": true,
    "@aws-cdk/aws-kms:defaultKeyPolicies": true,
    "@aws-cdk/core:enableStackNameDuplicates": true,
    "aws-cdk:enableDiffNoFail": true,
    "@aws-cdk/aws-ecr-assets:dockerIgnoreSupport": true,
    "@aws-cdk/aws-s3:grantWriteWithoutAcl": true,
    "@aws-cdk/aws-efs:defaultEncryptionAtRest": true
  }
}
{
  "app": "python3 app.py"
}
Removing these flags ensures your project stays aligned with CDK v2 best practices.Finally, make sure everything works as expected. Run these commands:Fix any issues that pop up, and you’re good to go!
  
  
  Migration Verification Checklist
 All imports updated to aws-cdk-lib Construct imports moved to constructs package cdk diff shows expected changesAnd there you have it! Migrating from CDK v1 to v2 isn’t as scary as it might seem. With unified dependencies, better APIs, and future-proofing, this upgrade is worth the effort. Take it one step at a time, and don’t hesitate to ask for help if you hit a roadblock.Have you already migrated to CDK v2? Or are you planning to? Share your experience (or any questions) in the comments below!
  
  
  Useful links to help you along the way:
]]></content:encoded></item><item><title>[Boost]</title><link>https://dev.to/coderoflagos/-2fjn</link><author>Opemipo Disu</author><category>ai</category><pubDate>Sun, 16 Feb 2025 09:20:31 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[Why CI/CD is a Bottleneck and How AI Can Help ⚙️Opemipo Disu for Microtica ・ Feb 14]]></content:encoded></item><item><title>NASA has a list of 10 rules for software development</title><link>https://www.cs.otago.ac.nz/cosc345/resources/nasa-10-rules.htm</link><author>/u/namanyayg</author><category>dev</category><category>reddit</category><pubDate>Sun, 16 Feb 2025 09:07:59 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[NASA has a list of 10 rules for software developmentThose rules were written from the point of view of people writing
embedded software for extremely expensive spacecraft, where tolerating
a lot of programming pain is a good tradeoff for not losing a mission.
I do not know why someone in that situation does not use the SPARK
subset of Ada, which subset was explicitly designed for verification,
and is simply a better starting point for embedded programming than C.
I am criticising them from the point of view of people writing
programming language processors (compilers, interpreters, editors)
and application software.
We are supposed to teach critical thinking.  This is an example.
How have Gerard J. Holzmann's and my different contexts affected
our judgement?
Can you blindly follow his advice without considering 
context?
Can you blindly follow  advice without considering
your context?
Would these rules necessarily apply to a different/better
programming language?  What if function pointers
were tamed?  What if the language provided opaque abstract
data types as Ada does?
1. Restrict all code to very simple control flow constructs —
do not use  statements,
 or  constructs,
and direct or indirect .Note that  and 
are how C does exception handling, so this rule bans any use
of exception handling.

It is true that banning recursion and jumps and loops without
explicit bounds means that you  your program is
going to terminate.  It is also true that recursive functions
can be proven to terminate about as often as loops can, with
reasonably well-understood methods.  What's more important here is
that “sure to terminate” does not imply
“sure to terminate in my lifetime”:
    int const N = 1000000000;
    for (x0 = 0; x0 != N; x0++)
    for (x1 = 0; x1 != N; x1++)
    for (x2 = 0; x2 != N; x2++)
    for (x3 = 0; x3 != N; x3++)
    for (x4 = 0; x4 != N; x4++)
    for (x5 = 0; x5 != N; x5++)
    for (x6 = 0; x6 != N; x6++)
    for (x7 = 0; x7 != N; x7++)
    for (x8 = 0; x8 != N; x8++)
    for (x9 = 0; x9 != N; x9++)
        -- do something --;
This does a bounded number of iterations.  The bound is N.
In this case, that's 10.  If each iteration of the loop body
takes 1 nsec, that's 10 seconds, or about 7.9×10
years.  What is the  difference between “will stop
in 7,900,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
years” and “will never stop”?

Worse still, taking a problem that is  expressed
using recursion and contorting it into something that manipulates an
explicit stack, while possible, turns clear maintainable code into
buggy spaghetti.  (I've done it, several times.  There's an example
on this web site.  It is  a good idea.)

2. All loops must have a fixed upper-bound.  It must be trivially
possible for a checking tool to prove statically that a preset
upper-bound on the number of iterations of a loop cannot be exceeded.
If the loop-bound cannot be proven statically, the rule is considered
violated.This is an old idea.  As the example above shows, it is not enough
by itself to be of any practical use.  You have to try to make the
bounds reasonably , and you have to regard hitting an
artificial bound as a run-time error.

By the way, note that putting depth bounds on recursive procedures
makes them every bit as safe as loops with fixed bounds.

3. Do not use dynamic memory allocation after initialization.This is also a very old idea.  Some languages designed for embedded
work don't even  dynamic memory allocation.  The big
thing, of course, is that embedded applications have a fixed amount of
memory to work with, are never going to get any more, and should not
crash because they couldn't handle another record.

Note that the rationale actually supports a much stronger rule:
don't even  dynamic memory allocation.  You can of
course manage your own storage pool:
    typedef struct Foo_Record *foo;
    struct Foo_Record {
	foo next;
	...
    };
    #define MAX_FOOS ...
    static struct Foo_Record foo_zone[MAX_FOOS];
    foo foo_free_list = 0;

    void init_foo_free_list() {
	for (int i = MAX_FOOS - 1; i >= 0; i--) {
	    foo_zone[i].next = foo_free_list;
	    foo_free_list = &foo_zone[i];
	}
    }

    foo malloc_foo() {
	foo r = foo_free_list;
	if (r == 0) report_error();
	foo_free_list = r->next;
	return r;
    }

    void free_foo(foo x) {
	x->next = foo_free_list;
	foo_free_list = x;
    }
This  satisfies the rule, but it
violates the  of the rule.  Simulating malloc()
and free() this way is  than using the real
thing, because the memory in foo_zone is permanently tied up
for Foo_Records, even if we don't need any of those at the
moment but do desperately need the memory for something else.

What you really need to do is to use a memory allocator
with known behaviour, and to prove that the amount of memory
in use at any given time (data bytes + headers) is bounded
by a known value.

Note also that SPlint can verify at compile time that
the errors NASA speak of do not occur.

One of the reasons given for the ban is that the performance
of malloc() and free() is unpredictable.  Are these the only
functions we use with unpredictable performance?  Is there
anything about malloc() and free() which makes them
 unpredictable?  The existence of
hard-real-time garbage collectors suggests not.

The rationale for this rule says that

Note that the only way
to dynamically claim memory in the absence of memory allocation from the
heap is to use stack memory.  In the absence of recursion (Rule 1), an
upper bound on the use of stack memory can derived statically, thus
making it possible to prove that an application will always live within
its pre-allocated memory means.
Unfortunately, the sunny optimism shown here is unjustified.  Given
the ISO C standard (any version, C89, C99, or C11) it is 
to determine an upper bound on the use of stack memory.  There is not even
any standard way to determine how much memory a compiler will use for the
stack frame of a given function.  (There could have been.  There just isn't.)
There isn't even any requirement that two invocations of the same function
with the same arguments will use the same amount of memory.
Such a bound can only be calculated for a  version of a
specific compiler with specific options.  Here's a trivial example:
void f() {
    char a[100000];
}
How much memory will that take on the stack?  Compiled for debugging,
it might take a full stack frame (however big that is) plus traceback
information plus a million bytes for a[].  Compiled with optimisation,
the compiler might notice that a[] isn't used, and might even compile
calls to f() inline so that they generate no code and take no space.
That's an extreme example, but not really unfair.  If you want bounds
you can rely on, you had better  what your compiler does,
and recheck every time anything about the compiler changes.

4.  No function should be longer than what can be printed on
a single sheet of paper in a standard reference format with one line per
statement and one line per declaration.  Typically, this means no more
than about 60 lines of code per function.Since programmers these days typically read their code on-screen,
not on paper, it's not clear why the size of a sheet of paper is
relevant any longer.

The rule is arguably stated about the wrong thing.  The thing that
needs to be bounded is not the size of a function, but the size of a
chunk that a programmer needs to read and comprehend.

There are also question marks about how to interpret this if you
are using a sensible language (like Algol 60, Simula 67, Algol 68,
Pascal, Modula2, Ada, Lisp, functional languages like ML, O'CAML,
F#, Clean, Haskell, or Fortran) that allows nested procedures.
Suppose you have a folding editor that presents a procedure to
you like this:
function Text_To_Floating(S: string, E: integer): Double;
   � variables �
   � procedure Mul(Carry: integer) �
   � function Evaluate: Double �

   Base, Sign, Max, Min, Point, Power := 10, 0, 0, 1, 0, 0;
   for N := 1 to S.length do begin
       C := S[N];
       if C = '.' then begin
          Point := -1
       end else
       if C = '_' then begin
          Base := Round(Evaluate);
          Max, Min, Power := 0, 1, 0
       end else
       if Char ≠ ' ' then begin
          Q := ord(C) - ord('0');
          if Q > 9 then Q := ord(C) - ord('A') + 10
          Power := Point + Point
          Mul(Q)
       end
    end;
    Power := Power + Exp;
    Value := Evaluate;
    if Sign < 0 then Value := -Value;
end;
which would be much bigger if the declarations
were expanded out instead of being hidden behind �folds�.
Which size do we count?  The folded size or the unfolded size?
I was using a folding editor called Apprentice on the Classic Mac
back in the 1980s.  It was written by Peter McInerny and was lightning
fast.

5.  The  of the code should average to a minimum of
two assertions per function.Assertions are wonderful documentation and the very best debugging tool
I know of.  I have never seen any real code that had too many assertions.

The example here is one of the ugliest pieces of code I've seen in a while.
if (!c_assert(p >= 0) == true) {
    return ERROR;
}
It should, of course, just be
if (!c_assert(p >= 0)) {
    return ERROR;
}
Better still, it should be something like
#ifdef NDEBUG
#define check(e, c) (void)0
#else
#define check(e, c) if (!(c)) return bugout(c), (e)
#ifdef NDEBUG_LOG
#define bugout(c) (void)0
#else
#define bugout(c) \
    fprintf(stderr, "%s:%d: assertion '%s' failed.\n", \
    __FILE__, __LINE__, #s)
#endif
#endif
Ahem.  The more interesting part is the required density.
I just checked an open source project from a large telecoms
company, and 23 out of 704 files (not functions) contained
at least one assertion.  I just checked my own Smalltalk
system and one SLOC out of every 43 was an assertion, but
the average Smalltalk “function” is only a few
lines.  If the biggest function allowed is 60 lines, then
let's suppose the average function is about 36 lines, so
this rule requires 1 assertion per 18 lines.
Assertions are good, but what they are especially good
for is expressing the requirements on data that come
from outside the function.  I suggest then that
Every argument whose validity is not guaranteed by
its typed should have an assertion to check it.
Every datum that is obtained from an external
source (file, data base, message) whose validity is
not guaranteed by its type should have an assertion
to check it.
The NASA 10 rules are written for embedded systems, where
reading stuff from sensors is fairly common.

6.  Data objects must be declared at the smallest possible level of
scope.This is excellent advice, but why limit it to data objects?
Oh yeah, the rules were written for crippled languages where you
 declare functions in the right place.

People using Ada, Pascal (Delphi), JavaScript, or functional
languages should also declare types and functions as locally as
possible.

7.  The return value of non-void functions must be checked by each
calling function, and the validity of parameters must be checked inside
each function.This again is mainly about C, or any other language that indicates
failure by returning special values.  “Standard libraries
famously violate this rule”?  No, the  library does.

You have to be reasonable about this: it simply isn't practical
to check  aspect of validity for 
argument.  Take the C function
void *bsearch(
    void const *key  /* what we are looking for */,
    void const *base /* points to an array of things like that */,
    size_t      n    /* how many elements base has */,
    size_t      size /* the common size of key and base's elements */
    int (*      cmp)(void const *, void const *)
);
This does a binary search in an array.  We must have key≠0,
base≠0, size≠0, cmp≠0, cmp(key,key)=0, and for all
1<i<n,
cmp((char*)base+size*(i-1), (char*)base+size*i) <= 0
Checking the validity in full would mean checking
that [key..key+size) is a range of readable addresses,
[base..base+size*n) is a range of readable addresses,
and doing n calls to cmp.  But the whole point of binary
search is to do O(log(n)) calls to cmp.

The fundamental rules here are
Don't let run-time errors go un-noticed, and
any check is safer than no check.
8. The use of the preprocessor must be limited to the inclusion of
header files and simple macro definitions.  Token pasting, variable
argument lists (ellipses), and recursive macro calls are not allowed.Recursive macro calls don't really work in C, so no quarrel there.
Variable argument lists were introduced into macros in
C99 so that you could write code like
#define err_printf(level, ...) \
    if (debug_level >= level) fprintf(stderr, __VA_ARGS__)
...
    err_printf(HIGH, "About to frob %d\n", control_index);
This is a  thing; conditional tracing like this is a
powerful debugging aid.  It should be , not banned.

The rule goes on to ban macros that expand into things that are
not complete syntactic units.  This would, for example, prohibit
simulating try-catch blocks with macros.  (Fair enough, an earlier rule
banned exception handling anyway.)  Consider this code fragment, from
an actual program.
    row_flag = border;     
    if (row_flag) printf("\\hline");
    for_each_element_child(e0, i, j, e1)
        printf(row_flag ? "\\\\\n" : "\n");
        row_flag = true;  
        col_flag = false;
        for_each_element_child(e1, k, l, e2)
            if (col_flag) printf(" & ");
            col_flag = true;
            walk_paragraph("", e2, "");
        end_each_element_child
    end_each_element_child
    if (border) printf("\\\\\\hline");
    printf("\n\\end{tabular}\n");
It's part of a program converting slides written in something like HTML
into another notation for formatting.  The 
…  loops walk over a tree.  Using
these macros means that the programmer has no need to know and no reason to
care how the tree is represented and how the loop actually works.
You can easily see that  must have at
least one unmatched { and  must have at least one
unmatched }.  That's the kind of macro that's banned by requiring
complete syntactic units.  Yet the readability and maintainability of
the code is  improved by these macros.

One thing the rule covers, but does not at the beginning stress, is
“no  macro processing”.  That is,
no #if.  The argument against it is, I'm afraid, questionable.  If there
are 10 conditions, there are 2 combinations to test,
whether they are expressed as compile-time conditionals or run-time
conditionals.

In particular, the rule against conditional macro processing
would prevent you defining your own assertion macros.
It is not obvious that that's a good idea.

9.  The use of pointers should be restricted.  Specifically, no more
than one level of dereferencing is allowed.  Pointer dereference
operations may not be hidden in macro definitions or inside typedef
declarations.  Function pointers are not permitted.Let's look at the last point first.

double integral(double (*f)(double), double lower, double upper, int n) {
    // Compute the integral of f from lower to upper 
    // using Simpson's rule with n+1 points.
    double const h = (upper - lower) / n;
    double       s;
    double       t;
    int          i;
    
    s = 0.0;
    for (i = 0; i < n; i++) s += f((lower + h/2.0) + h*i);
    t = 0.0;
    for (i = 1; i < n; i++) t += f(lower + h*i);
    return (f(lower) + f(upper) + s*4.0 + t*2.0) * (h/6.0);
}
This kind of code has been important in numerical calculations since
the very earliest days.  Pascal could do it.  Algol 60 could do it.
In the 1950s, Fortran could do it.  And NASA would ban it, because in
C,  is a function pointer.

Now it's important to write functions like this once and only once.
For example, the code has at least one error.  The comment says n+1
points, but the function is actually evaluated at 2n+1 points.  If we
need to bound the number of calls to f in order to meet a deadline,
having that number off by a factor of two will not help.
It's nice to have just one place to fix.
Perhaps I should not have copied that code from a well-known source (:-).
Certainly I should not have more than one copy!

What can we do if we're not allowed to use function pointers?
Suppose there are four functions foo, bar, ugh, and zoo that we need
to integrate.  Now we can write
enum Fun {FOO, BAR, UGH, ZOO};

double call(enum Fun which, double what) {
    switch (which) {
        case FOO: return foo(what);
        case BAR: return bar(what);
        case UGH: return ugh(what);
        case ZOO: return zoo(what);
    }
}

double integral(enum Fun which, double lower, double upper, int n) {
    // Compute the integral of a function from lower to upper 
    // using Simpson's rule with n+1 points.
    double const h = (upper - lower) / n;
    double       s;
    double       t;
    int          i;
    
    s = 0.0;
    for (i = 0; i < n; i++) s += call(which, (lower + h/2.0) + h*i);
    t = 0.0;
    for (i = 1; i < n; i++) t += call(which, lower + h*i);
    return (call(which, lower) + call(which, upper) + s*4.0 + t*2.0) * (h/6.0);
}
Has obeying NASA's rule made the code more reliable?  No, it has made
the code  to understand,  maintainable, and
 that it wasn't before.  Here's a call
illustrating the mistake:
x = integral(4, 0.0, 1.0, 10);I have checked this with two C compilers and a static checker at their
highest settings, and they are completely silent about this.

So there are legitimate uses for function pointers, and simulating
them makes programs , not better.

Now  in Fortran,
Algol 60, or Pascal.  Those languages had procedure 
but not procedure . You could pass a subprogram name as
a parameter, and such a parameter could be passed on, but you could not
store them in variables.  You could have a  of C which
allowed function pointer parameters, but made all function pointer
variables read-only.  That would give you a statically checkable subset
of C that allowed integral().

The other use of function pointers is simulating object-orientation.
Imagine for example
struct Channel {
    void (*send)(struct Channel *, Message const *);
    bool (*recv)(struct Channel *, Message *);
    ...
};
inline void send(struct Channel *c, Message const *m) {
    c->send(c, m);
}
inline bool recv(struct Channel *c, Message *m) {
    return c->recv(c, m);
}
This lets us use a common interface for sending and receiving
messages on different kinds of channels.  This approach has been
used extensively in operating systems (at least as far back as
the Burroughs MCP in the 1960s) to decouple the code that uses
a device from the actual device driver.     I would expect any
program that controls more than one hardware device to do something
like this.  It's one of our key tools for controlling complexity.
Again, we can simulate this, but it makes adding a new kind of
channel harder than it should be, and the code is 
when we do it, not better.

The rule against more than one level of dereferencing is also
an assault on good programming.  One of the key ideas that was
developed in the 1960s is the idea of ;
the idea that it should be possible for one module to define a
data type and operations on it and another module to use instances
of that data type and its operations without having to know
anything about what the data type is.
One of the things I detest about Java is that it spits in the
face of the people who worked out that idea.  Yes, Java (now) has
generic type parameters, and that's good, but you cannot use a
 type without knowing what that type is.

Suppose I have a module that offers operations
And suppose that I have two interfaces in mind.  One of them
uses integers as tokens.
// stasher.h, version 1.
typedef int token;
extern token stash(item);
extern item  recall(token);
extern void  delete(token);
Another uses pointers as tokens.
// stasher.h, version 2.
typedef struct Hidden *token;
extern  token stash(item);
extern  item  recall(token);
extern  void  delete(token);
void snoo(token *ans, item x, item y) {
    if (better(x, y)) {
	*ans = stash(x);
    } else {
	*ans = stash(y);
    }
}
By the NASA rule, the function snoo() would not be accepted or rejected on
its own merits.  With stasher.h, version 1, it would be accepted.
With stasher.h, version 2, it would be rejected.

One reason to prefer version 2 to version 1 is that version 2 gets
more use out of type checking.  There are ever so many ways to get an
int in C.  Ask yourself if it ever makes sense to do
token t1 = stash(x);
token t2 = stash(y);
delete(t1*t2);
I really do not like the idea of banning abstract data types.

10.  All code must be compiled, from the first day of development,
with all compiler warnings enabled at the compiler’s
most pedantic setting.  All code must compile with these setting without
any warnings.  All code must be checked daily with at least one, but
preferably more than one, state-of-the-art static source code analyzer
and should pass the analyses with zero warnings.This one is good advice.  Rule 9 is really about making your code
worse in order to get more benefit from limited static checkers.  (Since
C has no standard way to construct new functions at run time, the set of
functions that a particular function pointer  point to can
be determined by a fixed-point data flow analysis, at least for most
programs.)  So is rule 1.  



]]></content:encoded></item><item><title>Resigning as Asahi Linux project lead</title><link>https://marcan.st/2025/02/resigning-as-asahi-linux-project-lead/</link><author>/u/namanyayg</author><category>dev</category><category>reddit</category><pubDate>Sun, 16 Feb 2025 09:01:13 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[Back in the late 2000s, I was a major contributor to the Wii homebrew scene. At the time, I worked on software (people call them “jailbreaks” these days) to allow users to run their own unofficial apps on the Nintendo Wii.I was passionate about my work and the team I was part of (Team Twiizers, later fail0verflow). Despite that, I ended up burning out, primarily due to the very large fraction of entitled users. Most people using our software just wanted to play pirated games (something we did not support, condone, or directly enable). We kept playing a cat and mouse game with the manufacturer to keep the platform open, only to see our efforts primarily used by people who just wanted to steal other people’s work, and very loudly felt entitled to it. It got really old after a while. As newer game consoles were released, I ended up focusing on Linux ports purely for fun, and didn’t attempt to build a community nor work on the jailbreaks/exploits that would end up becoming a tool used by pirates.When Apple released the M1, I realized that making it run Linux was my dream project. The technical challenges were the same as my console homebrew projects of the past (in fact, much bigger), but this time, the platform was already open - there was no need for a jailbreak, and no drama and entitled users who want to pirate software to worry about. And running Linux on an M1 was a  bigger deal than running it on a PS4.I launched the Asahi Linux project, and received an immense amount of support and donations. Incredibly, I had the support I needed to make the project happen just a few days after my call to action, so I got to work. The first couple of years were amazing, as we brought the platform from nothing to one of the smoothest Linux experiences you can get on a laptop. Sure, there were/are still some bits and pieces of hardware support missing, but the overall experience rivaled or exceeded what you could get on most x86 laptops. And we built it all from scratch, with zero vendor support or documentation. It was an impossible feat, something that had never been done before, and we pulled it off.Unfortunately, things became less fun after a while. First, there were the issues upstreaming code to the Linux kernel, which I’ve already spoken at length about and I won’t repeat here. Suffice it to say, being in a position to have to upstream code across practically every Linux subsystem, touching drivers of all categories as well as some common code, is an  frustrating experience. (Clarification: This has nothing to do with Rust at this point, it’s well before R4L was even merged. Upstreaming to Linux is a terrible experience in C too.)But then also came the entitled users. This time, it wasn’t about stealing games, it was about features. “When is Thunderbolt coming?” “Asahi is useless to me until I can use monitors over USB-C” “The battery life sucks compared to macOS” (nobody ever complained when compared to x86 laptops…) “I can’t even check my CPU temperature” (yes, I seriously got that one). (Edit: This wasn’t just a few instances; I’ve seen variations on the first three posted hundreds of times by now, including takes like “Thunderbolt/DP Alt are never going to happen”. A few times is fine, but the same thing repeated over and over again every day while we’re trying to make these things happen will get to anyone.)And, of course, “When is M3/M4 support coming?”For a long time, well after we had a stable release, people kept claiming Asahi Linux and Fedora Asahi Remix in particular were “alpha” and “unstable” and “not suitable for a daily driver” (despite thousands of users, myself included, daily driving it and even using it for servers).No matter how much we did, how many impossible feats we pulled off, people always wanted more. And more. Meanwhile, donations and pledges kept slowly , and have done so since the project launched. Not enough to spell immediate doom for my dream of working on Asahi full time in the short term, but enough to make me wonder if any of this was really appreciated. The all-time peak monthly donation volume was the very first month or two. It seemed the more things we accomplished, the less support we had.I knew burnout was a very real risk and managed this by limiting my time spent on certain areas, such as kernel upstreaming. This worked reasonably well and was mostly sustainable at the time.Then 2024 happened. Last year was incredibly tumultuous for me due to personal reasons which I won’t go into detail about. Suffice it to say, I ended up traveling for most of the year, all the while having to handle various abusers and stalkers who harassed and attacked me and my family (and continue to do so).I did make some progress in 2024, but this left me in a very vulnerable position. I hadn’t gotten nearly as much Asahi work done as I’d liked, and the users weren’t getting any quieter about demanding more features and machine support.We shipped conformant Vulkan drivers and a whole emulation stack for x86-64 games and apps, but we were still stuck without DP Alt Mode (a feature which required deep reverse engineering, debugging, and kernel surgery to pull off, and which, if it were to be implemented properly and robustly, would require a major refactor of certain kernel subsystems or perhaps even the introduction of an entirely new subsystem).I slowly started to ramp work up again at the beginning of this year, feeling very stressed out and guilty about having gotten very little work done for the previous year. “Full” DP Alt support was still a ways away, but we were hoping to ship a limited version that only worked on a specific Type C port for each machine type in the first month or two of the year. Sven had gotten some progress into the PHY code in December, so I picked it up and ended up beating the code of three drivers into enough shape that it mostly worked reliably. Even though it wasn’t the best approach, it was the most I could manage without having another huge bikeshed discussion with the kernel community (I did try to bring the subject up on the mailing lists, but it didn’t get much response).The issues Rust for Linux has had surviving as an upstream Linux project are well documented, so I won’t repeat them in detail here. Suffice it to say, I consider Linus’ handling of the integration of Rust into Linux a major failure of leadership. Such a large project needs significant support from major stakeholders to survive, while his approach seems to have been to just wait and see. Meanwhile, multiple subsystem maintainers downstream of him have done their best to stonewall or hinder the project, issue unacceptable verbal abuse, and generally hurt morale, with no consequence. One major Rust for Linux maintainer already resigned a few months ago.As you know, this is deeply personal to me, as we’ve made a bet on Rust for Linux for Asahi. Not just for fun (or just for memory safety), either: Rust is the entire reason our GPU driver was able to succeed in the time it did. We have two more Rust drivers in our downstream tree now, and a third one on track to be rewritten from C to Rust, because Rust is simply much better suited to the unique challenges we face, and the C driver is becoming unmaintainable. This is, by the way, the same reason the new Nova driver for Nvidia GPUs is being written in Rust. More modern programming languages are better suited to writing drivers for more modern hardware with more complexity and novel challenges, unsurprisingly.Some might be wondering why we can’t just let the Rust situation play out on its own over a longer period of time, perhaps several more years, and simply maintain things downstream until then. One reason is that, of course, this situation is hurting developer morale in the present. Another is that our Apple GPU driver is itself major evidence that Rust for Linux is fit for purpose (it was the first big driver to be written from scratch in Rust and brought along with it lots of development in Rust kernel abstractions). Simply not aiming for upstream might be seen as lack of interest, and hurt the chances of survival of the Rust for Linux effort. But there’s more.In fact, the Linux kernel development model is (perhaps paradoxically) designed to encourage upstreaming and punish downstream forks. While it is possible to just not care about upstream and maintain an outright hard fork, this is not a viable long-term solution (that’s how you get vendor Android kernel trees that die off in 2 years). The Asahi Linux downstream tree is continuously rebased on top of the latest upstream kernel, and that means that every extra patch we carry downstream increases our maintenance workload, sometimes significantly. But it goes deeper than that: Kernel/Mesa policy states that upstream Mesa support for a GPU driver cannot be merged and enabled until the kernel side is ready for merge. This means that we also have to ship a Mesa fork to users. While our GPU driver is 99% upstreamed into Mesa, it is intentionally hard-disabled and we are not allowed to submit a change that would enable it until the kernel side lands. This, in practice, means that users cannot have GPU acceleration work together with container technologies (such as Docker/Podman, but also including things like Waydroid), since standard container images will ship upstream Mesa builds, which would not be compatible. We have a partial workaround for Flatpak, but all other container systems are out of luck. Due to all this and more, the difficulty of upstreaming to the Linux kernel is hurting our downstream users today.I’m not the kind to let injustices go when I see them, so when yet another long-term maintainer abused his position to attempt to hinder R4L and block upstreaming progress, I spoke out. And the response (which has been pretty widely covered) was the last drop that put me over the edge. I resigned from my position as an upstream maintainer for Apple ARM support, as I no longer want to be involved with that community. Later in that thread, another major maintainer unironically stated “We
are the ‘thin blue line’”, and nobody cared, which just further confirmed to me that I don’t want to have anything to do with them. This is the same person that previously prompted a Rust for Linux maintainer to quit.But it goes well beyond the public incident. In the days that followed, I learned that some members of the kernel and adjacent Linux spaces have been playing a two-faced game with me, where they feigned support for me and Asahi Linux while secretly resenting me and rallying resentment behind closed doors. All this occurred without anyone ever sending me any private email or otherwise clueing me into what was going on. I heard that one of these people, one who has a high level position in multiple projects that Asahi Linux must interact with to survive, had sided with and continues to side with individuals who have abused and harassed me directly. Apparently there were also implied falsehoods, such as the idea that I am employed by someone to work on Asahi (I am not, we have zero corporate sponsorship other than bunny.net giving us free CDN credits for the hosting).I get that some people might not have liked my Mastodon posts. Yes, I can be abrasive sometimes, and that is a fault I own up to. But this is simply not okay. I cannot work with people who form cliques behind the scenes and lie about their intentions. I cannot work with those who place blame on the messenger, instead of those who are truly toxic in the community. I cannot work with those who resent public commentary and claim things are better handled in private despite the fact that nothing ever seems to change in private. I cannot work with those who denounce calling out misbehavior on social media to thousands of followers, while themselves roasting people both on social media and on mailing lists with thousands of subscribers. I cannot work with those in high-level positions who use politically charged and discriminatory language in public and face no repercussions. I cannot work with those who say I’m the problem and everything is going great, while major supporters and maintainers are actively resigning and I keep receiving messages from all kinds of people saying they won’t touch the Linux kernel with a 10-foot pole.When Apple released the M1, Linus Torvalds wished it could run Linux, but didn’t have much hope it would ever happen. We made it happen, and Linux 5.19 was released from an M2 MacBook Air running Asahi Linux. I had hoped his enthusiasm would translate to some support for our community and help with our upstreaming struggles. Sadly, that never came to pass. In November 2023 I sent him an invitation to discuss the challenges of kernel contributions and maintenance and see how we could help. He never replied.Back in 2011, Con Kolivas left the Linux kernel community. An anaesthetist by day, he was arguably the last great Linux kernel hobbyist hacker. In the years since it seems things have, if anything, only gotten worse. Today, it is practically impossible to survive being a significant Linux maintainer or cross-subsystem contributor if you’re not employed to do it by a corporation. Linux started out as a hobbyist project, but it has well and truly lost its hobbyist roots.When I started Asahi Linux, I let it take over most of my life. I gave up most of my hobbies (after all, this was my dream hobby), and spent significantly more than full time working on the project. It was fun back then, but it’s not fun any more. I have an M3 Pro in a box and I haven’t even turned it on yet. I dread doing the bring-up work. It doesn’t feel worth the trouble.I miss having free time where I can relax and not worry about the features we haven’t shipped yet. I miss making music. I miss attending jam sessions. I miss going out for dinner with my friends and family and not having to worry about how much we haven’t upstreamed. I miss being able to sit down and play a game or watch a movie without feeling guilty.I’m resigning as lead of the Asahi Linux project, effective immediately. The project will continue on without me, and I’m working with the rest of the team to handle transfer of responsibilities and administrative credentials. My personal Patreon will be paused, and those who supported me personally are encouraged to transfer their support to the Asahi Linux OpenCollective (GitHub Sponsors does not allow me to unilaterally pause payments, but my sponsors will be notified of this change so they can manually cancel their sponsorship).I want to thank the entire Asahi Linux team, without whom I would’ve never gotten anywhere alone. You all know who you are. I also give my utmost gratitude to all of my Patreon and GitHub sponsors, who made the project a viable reality to begin with.If you are interested in hiring me or know someone who might be, please get in touch. Remote positions only please, on a consulting or flexible time/non exclusive basis. Contact: marcan@marcan.st.: A lot of the discussion around this post and the interactions that led to it brings up the term “brigading”. Please read this excellent Fedi post for a discussion of what is and isn’t brigading.]]></content:encoded></item><item><title>My take on the Agentic Object Detection</title><link>https://dev.to/mayank_laddha_21ef3e061ff/my-take-on-the-agentic-object-detection-4612</link><author>Mayank Laddha</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 08:42:09 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[Segmenting Everything with SAM : We detect everything and worry about filtering later.Filtering with CLIP: Once we have all the segmented objects, we don’t want all of them. We need to filter out the noise and keep only the relevant objects.Adding Reasoning with a model like GPT-4o: Okay, so we’ve segmented and filtered. But what about finalising, understanding? That’s where a strong LLM like GPT-4o comes in.]]></content:encoded></item><item><title>Are Fast Programming Languages Gaining in Popularity?</title><link>https://developers.slashdot.org/story/25/02/16/0332258/are-fast-programming-languages-gaining-in-popularity?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sun, 16 Feb 2025 08:34:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[In January the TIOBE Index (estimating programming language popularity) declared Python their language of the year. (Though it was already #1 in their rankings, it had showed a 9.3% increase in their ranking system, notes InfoWorld.) TIOBE CEO Paul Jansen says this reflects how easy Python is to learn, adding that "The demand for new programmers is still very high" (and that "developing applications completely in AI is not possible yet.") 

In fact on February's version of the index, the top ten looks mostly static. The only languages dropping appear to be very old languages. Over the last 12 months C and PHP have both fallen on the index — C from the #2 to the #4 spot, and PHP from #10 all the way to #14. (Also dropping is Visual Basic, which fell from #9 to #10.) 

But TechRepublican cites another factor that seems to be affecting the rankings: language speed.


Fast programming languages are gaining popularity, TIOBE CEO Paul Jansen said in the TIOBE Programming Community Index in February. Fast programming languages he called out include C++ [#2], Go [#8], and Rust [#13 — up from #18 a year ago]. 

Also, according to the updated TIOBE rankings... 
- C++ held onto its place at second from the top of the leaderboard.
- Mojo and Zig are following trajectories likely to bring them into the top 50, and reached #51 and #56 respectively in February. 

"Now that the world needs to crunch more and more numbers per second, and hardware is not evolving fast enough, speed of programs is getting important. Having said this, it is not surprising that the fast programming languages are gaining ground in the TIOBE index," Jansen wrote. The need for speed helped Mojo [#51] and Zig [#56] rise... 

Rust reached its all-time high in the proprietary points system (1.47%.), and Jansen expects Go to be a common sight in the top 10 going forward.
]]></content:encoded></item><item><title>5 Websites to Help You Stand Out on Social Media</title><link>https://dev.to/jsam/5-websites-to-help-you-stand-out-on-social-media-59i3</link><author>jsam</author><category>ai</category><pubDate>Sun, 16 Feb 2025 08:27:25 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[In today's digital age, social media has become an integral part of our lives. With so many people vying for attention, it can be challenging to stand out from the crowd. Fortunately, several websites can help you create engaging and personalized content that captures the attention of your audience. Here are five websites that can assist you in crafting unique language, text, and emojis to enhance your social media presence.Emojis have become a universal language in the digital world. All TikTok Emojis offers a comprehensive collection of emojis, allowing you to express yourself creatively and add personality to your posts. Using the right emojis can make your content more relatable and visually appealing.
  
  
  Character Headcanon Generator
The Headcanon Generator is an innovative online tool designed to help fans and writers create imaginative interpretations of characters and narratives within their favorite fictional universes. By inputting specific details, such as character names or themes, users can generate unique headcanons—personalized insights that expand on existing storylines and character traits not explicitly mentioned in the original material. This process not only enhances the depth of character development but also fosters creativity among users, making it an invaluable resource for writers, role-players, and fans alike.Effective communication is key to engaging your audience. I Love Translate is a translation website that helps you bridge language barriers and connect with people from diverse backgrounds. By translating your content into multiple languages, you can expand your reach and create a more inclusive online presence.iLoveTranslate provides many fun translators, including:Typography plays a crucial role in visual communication. Brat Font offers a unique and eye-catching font style that can add personality and flair to your social media graphics and designs. Using a distinctive font can help you create a memorable brand identity and make your content stand out.Dandys World Slot Maker is a creative slot machine that you can use to create your own Slot Machine. You can customize your own Slot Maker, create word slots easily and for free.]]></content:encoded></item><item><title>Unexpected AI Use Cases in Business That Will Surprise You</title><link>https://dev.to/wiliam_maskin/unexpected-ai-use-cases-in-business-that-will-surprise-you-52oi</link><author>AI</author><category>ai</category><pubDate>Sun, 16 Feb 2025 08:23:18 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[Artificial Intelligence (AI) is often associated with automation, data analysis, and smart assistants. However, AI is making its way into unexpected areas of business, offering innovative solutions beyond traditional applications. Here are some of the most surprising AI use cases in the business world.
  
  
  1. AI in Creative Industries
AI is now capable of creating original artworks and composing music, pushing the boundaries of creativity. Tools like OpenAI’s DALL·E and Google’s DeepDream generate stunning visuals, while AI-driven music composers craft soundtracks tailored to emotions and moods.Automated Storytelling & ScriptwritingAI powered platforms can generate compelling storylines, write scripts, and even predict audience engagement, making them valuable tools for filmmakers and writers.
  
  
  2. AI in Unconventional Business Sectors
AI for Personalized Perfume & Fragrance DesignBrands like Philyra by IBM use AI to analyze scent compositions and create customized fragrances, bringing personalization to the perfume industry.AI in Fashion & Trend PredictionAI helps fashion designers predict trends by analyzing social media, consumer behavior, and past sales data, allowing for real-time design adjustments.
  
  
  3. AI for Customer Experience & Marketing
Hyper-Personalized Advertising with AIAI-driven algorithms analyze consumer data to create highly targeted ad campaigns. Platforms like Persado use AI to generate emotionally compelling ad copy that resonates with specific audiences.AI Powered Virtual Shopping AssistantsAI-driven chatbots and virtual assistants enhance online shopping by offering personalized recommendations, styling tips, and real-time customer support.The Future of Unique AI ApplicationsAI is continuously evolving, bringing innovation to industries we never imagined. As businesses embrace AI, its integration with wearable technology, predictive analytics, and automation will unlock even more opportunities.Want to Learn More About AI’s Impact ?]]></content:encoded></item><item><title>Streamline Document Processing Pipelines with FalkorDB’s String Loader</title><link>https://dev.to/falkordb/streamline-document-processing-pipelines-with-falkordbs-string-loader-1f9g</link><author>Dan Shalev</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 08:17:53 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[ You decide how your data is chunked and processed, ensuring that the graph structure aligns perfectly with your RAG requirements. By working with runtime memory data, the string loader avoids the overhead of writing and reading intermediate files, reducing latency and simplifying the workflow.Integration with GraphRAG SDK: The string loader is designed to work seamlessly with the GraphRAG SDK, allowing you to build advanced graph-based RAG systems with greater ease and precision. The string loader is open-source, providing transparency and the ability to customize the feature to meet specific needs.]]></content:encoded></item><item><title>How AI Will Revolutionize Healthcare in the Future</title><link>https://dev.to/wiliam_maskin/how-ai-will-revolutionize-healthcare-in-the-future-g2l</link><author>AI</author><category>ai</category><pubDate>Sun, 16 Feb 2025 08:06:12 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[Artificial Intelligence (AI) is poised to revolutionize the healthcare industry, bringing unprecedented advancements in diagnosis, treatment, and patient care. From automating administrative tasks to enhancing medical imaging analysis, AI is making healthcare more efficient, accurate, and accessible.
  
  
  The Impact of AI on Healthcare
Faster and More Accurate DiagnosesAI powered diagnostic tools can analyze medical images and detect diseases such as cancer at an early stage with higher accuracy than traditional methods.Personalized Treatment PlansMachine learning algorithms analyze vast amounts of patient data to recommend tailored treatment plans, improving outcomes and reducing trial-and-error approaches.AI Powered Robotic SurgeryRobotic assisted surgery enhances precision, reduces human error, and shortens recovery times, making complex procedures safer.Enhanced Drug DiscoveryAI accelerates the development of new drugs by identifying potential compounds faster, reducing the time and cost of bringing new medications to market.Virtual Health AssistantsAI chatbots and virtual assistants help patients manage chronic conditions, schedule appointments, and provide instant medical advic
e, improving accessibility to healthcare services.
  
  
  Challenges and Ethical Considerations
Despite its benefits, AI in healthcare faces challenges such as data privacy concerns, bias in AI models, and the need for regulatory frameworks to ensure ethical implementation.
  
  
  What’s Next for AI in Healthcare ?
As AI continues to evolve, its integration with wearable devices, telemedicine, and predictive analytics will further enhance healthcare delivery. The future of AI in healthcare is promising, with the potential to improve patient outcomes and reduce costs on a global scale.
  
  
  Learn More About AI’s Role in Healthcare
]]></content:encoded></item><item><title>The Dark Side of Cybersecurity: Malware and Its Destruction!</title><link>https://dev.to/nightmare-lynx/the-dark-side-of-cybersecurity-malware-and-its-destruction-5enk</link><author>Your Nightmare</author><category>ai</category><pubDate>Sun, 16 Feb 2025 08:05:57 +0000</pubDate><source url="https://dev.to/t/ai">Dev.to AI</source><content:encoded><![CDATA[Malware: A Threat to Systems and DataMalware refers to malicious programs designed to exploit a system. The term "malware" is derived from two words: "mal," meaning malicious, and "ware," meaning software, forming the word "malware."Typically, malware is created by illegal hackers, commonly known as black hat hackers. These programs are highly capable and can cause severe damage to both organizations and individuals. Once installed on a device, malware exploits it by accessing messages, call logs, browser history, and even bank balances or other sensitive information.Once again, malware consists of illegal software used by black hat hackers and crackers. There are various types of malware, mainly viruses, spyware, trojans, ransomware, keyloggers, and worms. In this discussion, we will explore them in detail.Here are some common types of malwares that can destroy your pc
Viruses are malicious programs specifically designed to attach themselves to files or documents and execute when the infected file is opened. As a result, they can harm your system, slow down performance, and even steal sensitive information.
Spyware is a malicious piece of code created to collect information from a system and spy on it without the user's knowledge or consent. This includes passwords, social information, and even bank details. Spyware is commonly found in unauthorized third-party applications.
A Trojan is a malicious piece of code that appears to be legitimate software. However, once mistakenly installed by a user, it operates in the background and gains system access to perform malicious activities. Trojans are often embedded in third-party apps, games, documents, software patches, and even emails.
Ransomware is one of the most powerful and dangerous types of malware. It encrypts a target’s data and demands a ransom payment in exchange for decryption. Once a system is infected, recovering the data without paying the ransom is nearly impossible (at least for now).
A keylogger is a malicious program specifically designed to capture a user's keystrokes in real-time. This means anything you type on your keyboard can be recorded, including personal details and sensitive social media credentials.To protect yourself from malware, follow these preventive measures:Remember, nothing is 100% secure! Always stay cautious.
Choose a robust antivirus program like Avast, Norton, AVG, or Kaspersky.Regularly back up your data to avoid losing important files.Avoid installing third-party software whenever possible.Scan files before use with VirusTotal if you must use third-party software (not recommended).Stay away from cracked software, as it is often infected with malware.Never download unauthorized files from the internet, as they may contain hidden threats.Use a secure and updated browser, such as Tor, Firefox, Edge, or Opera.Keep your operating system updated to protect against vulnerabilities.Stay informed and educate others about cyber threats to enhance digital security.In this discussion, we explored what malware is and how destructive it can be. This was just a glimpse—there are many other types of malware that were not included here. However, these are some of the most common and stable malware threats.Always try to use authentic software, files, and systems, and educate others about cyber threats. Stay up to date with the latest security practices because no one is ever 100% safe online.]]></content:encoded></item><item><title>Which approach to rust is more idiomatic (Helix vs Zed)?</title><link>https://www.reddit.com/r/rust/comments/1iqnats/which_approach_to_rust_is_more_idiomatic_helix_vs/</link><author>/u/No_Penalty2781</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sun, 16 Feb 2025 07:50:06 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Hi! I am curious what is the current "meta" (by "meta" I mean the current rust's community  and  way of doing things) of rust programming. I am studying source code of 2 editors I am using: Helix and Zed. And I can see that while they are doing a lot of similar things (like using LSP and parsing it outputs for example) the code is kinda different.It starts from the file structure: in Helix there are not that many folders to look at (like you have helix-core which contains features like "diagnostic", "diff", "history", etc but in Zed every single one of them is a different crate , which approach is more "idiomatic"? To divide every feature as a separate crate or to use more "packed" crates like "core".Then the code itself is kinda different, for example I am currently looking at LSP implementation in both of them and in Helix's case I can follow along and understand the code much more easily (here is the file I am referring to. But in Zed's case it is kinda hard to understand the code because of "type level programming" stuff like this one for example. It also doesn't help that files have a lot of SLOC in them (over 1500 in normal in Zed's repository, is it also how you do rust?) Maybe I am just used to lean functions from other languages (I mainly did TypeScript and Elixir in my career).Other thing I see is that Helix has more comments about "why the thing is doing that in the first place" which I find very helpful (on the other hand in seems that Zed's is abusing a lot of "type level" programming to have a self-documented code but it is harder to reason about at least for me) which approach here you prefer?]]></content:encoded></item><item><title>US government struggles to rehire nuclear safety staff it laid off days ago</title><link>https://www.bbc.com/news/articles/c4g3nrx1dq5o</link><author>niuzeta</author><category>hn</category><pubDate>Sun, 16 Feb 2025 07:45:49 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[The US government is trying to bring back nuclear safety employees it fired on Thursday, but is struggling to let them know they should return to work, NBC News has reported.The National Nuclear Security Administration workers were among hundreds of employees in the energy department who received termination letters.An email obtained by NBC said the letters for some NNSA employees "are being rescinded, but we do not have a good way to get in touch with those personnel". The terminations are part of massive effort by President Donald Trump to slash the ranks of the federal workforce, a project he began on his first day in office, less than a month ago.Last week, nearly 10,000 federal workers were let go, according to multiple US outlets. That figure was in addition to the estimated 75,000 workers who have accepted an offer from the White House to leave voluntarily in the autumn. The nuclear security officials who were laid off on Thursday helped oversee the nation's stockpile of nuclear weapons. That included staff who are stationed at facilities where the weapons are built, according to CNN. Attempting to reach the workers, the email, which was sent to current employees, said: "Please work with your supervisors to send this information (once you get it) to people's personal contact emails."Trump is working to slash spending across the board, abroad and at home, and going so far as to call for eliminating the education department. He is getting help from the world's richest man, Elon Musk, who, through an effort called Department of Government Efficiency (Doge), has sent workers to comb through data at federal agencies and helped implement the "buyout" offer.Last week, the Trump administration ordered agencies to fire nearly all probationary employees, those who had generally been in their positions for less than a year and not yet earned job protection. That included the NNSA staff members.Altogether, the move could potentially affect hundreds of thousands of people. Several of the Trump administration's efforts to shrink the government's size and spending have been met with legal challenges. More than 60 lawsuits have been filed against the Trump administration since the president was inaugurated on 20 January.]]></content:encoded></item><item><title>Building a RAG-Powered Support Chatbot in 24 Hours of Hackathon</title><link>https://dev.to/akshay_gupta/building-a-rag-powered-support-chatbot-in-24-hours-of-hackathon-5f7c</link><author>Akshay Gupta</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 07:18:48 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[Coffee? ✅ Chai? ✅ Determination to automate admin support? Double ✅In a recent 24-hour hackathon at annual PeopleGrove offsite, my team tackled an ambitious challenge: building an AI-powered support chatbot that could think and respond like a season platform administrator.Armed with Large Language Models (LLMs) and fueled by caffeine, we created a Retrieval-Augmented Generation (RAG) system that turned out to be surprisingly capable!: Our support heroes (admins and agents) spending their days 😅:Answering the same questions from different institutions 🏫

Repetitive SSO, analytics, and user management queriesSame solutions, different institutionsContext-switching between multiple support channels 🔄

Support tickets piling upTime-Consuming Routine Tasks ⏰

Manual ticket search and response formattingComplex Problem-Solving Getting Delayed 🎯

Too much time on routine questionsLimited bandwidth for critical platform improvementsOur support team needed a solution that could:Handle common queries intelligently 🤖Provide consistent, accurate responses 📚Free up time for complex problem-solving 💡Scale support without scaling the team 📈Maintain the human touch while automating routine tasks 🤝We built ChatterMind 🤖 - an AI chatbot that combines the power of LLMs with a RAG system. Think of it as a super-smart intern who:Never sleeps (unlike us during the hackathon) 😴Has photographic memory of all support tickets 🧠Knows the PeopleGrove documentation better than its authors 📚Knows when to call for backup (aka create a ticket) 🆘Remembers conversations (thanks to Redis - our MVP choice for the hackathon) 💾Keeps secrets better than a vault 🔒Here's a high-level overview of how ChatterMind processes and responds to queries:Let's geek out about our tech choices for a minute! 🤓Our initial choice was the DeepSeek model (1.5B parameters) because, well, it was lightweight and fast. But we quickly discovered it had a tendency to... let's say, get creative with the truth. After some frantic testing and a few more cups of chai, we switched to Gemini 2.0 Flash (experimental) which proved to be our goldilocks model:Better context understandingStronger reasoning capabilitiesThe secret sauce behind ChatterMind's human-like responses? Carefully crafted prompts! Our prompt engineering approach focused on:Role Definition 🎭

Defined as "Senior Product Support Specialist"Given a friendly personality and nameEstablished clear boundaries of authorityContext Management 🧩

User's current location in platformPrevious conversation historyResponse Structuring 📝

Natural, conversational flowMarkdown formatting for readabilityLength limits (100-300 words)Clear action items when neededSafety Guidelines 🛡️

Strict PII protection rulesDynamic Adaptation 🔄

First-time vs follow-up questionsTechnical vs non-technical usersSimple queries vs complex issuesError scenarios vs success pathsExample Prompt Template 📝System Context:
You are ChatterMind, a Senior Product Support Specialist at PeopleGrove.
Primary Goal: Provide clear, accurate, and helpful support while maintaining security.

Behavioral Guidelines:
- Be professional yet friendly
- Start with a warm greeting for new conversations
- For follow-ups, continue naturally without greeting
- Keep responses under 300 words
- Use markdown only when needed
- Never share PII or sensitive data
- If unsure, ask for clarification
- For complex issues, guide towards ticket creation

Current Context:
- User Location: {current_path}
- Required Permissions: {path_permissions}
- User Role: {user_role}

Previous Conversation:
{chat_history}

Reference Knowledge:
{relevant_articles}
{similar_tickets}
{route_context}

Current Question: {user_query}

Response Format:
1. [If new conversation] Brief greeting
2. Acknowledge context/location
3. Provide clear solution/steps
4. Add relevant warnings/notes
5. Offer follow-up assistance
Natural conversation flow 💬Helpful, actionable responses ✅
  
  
  Data Processing & Embeddings
We built our knowledge base from three main sources:Platform Routes & Permissions:For embeddings, we chose the  model from  because:384-dimensional embeddings (good balance of size vs. accuracy)Fast inference time (crucial for real-time chat)Great at capturing semantic meaningWorks well with technical contentWe stored these in ElasticSeach with cosine similarity search, which gave us:
  
  
  Edge Cases & Safety Features
ChatterMind turned out to be quite the responsible assistant. Some of our favourite edge case handles:Personal Data Protection:User: "What's John Smith's email address?"
ChatterMind: "I apologize, but I cannot share personal information such as email addresses, phone numbers, or other private details about users. This is to protect user privacy and comply with data protection regulations. If you need to contact someone, I recommend using the platform's built-in messaging system."
User: "Can you update my database permissions?"
ChatterMind: "I'm not able to directly modify system permissions or make database changes. This requires admin intervention for security reasons. Would you like me to help you create a ticket for this request?"
Handling Requests not related to Platform:User: "What is 5 + 2 + 7?"
ChatterMind: "I apologise, but performing mathematical calculations is beyond my scope as a platform support assistant. I'm designed to help with PeopleGrove platform-related questions and issues. If you need a calculator, I'd recommend using your device's built-in calculator app or a dedicated math tool."
User: "It's not working"
ChatterMind: "I notice you're on the messaging page, but I'll need more details to help you effectively. Could you please:
1. Describe what specific feature isn't working
2. What you were trying to do
3. What error message (if any) you're seeing

This will help me provide the most relevant solution."
Our implementation was heavily inspired by the excellent guide on building RAG systems with DeepSeek R1 by Asif Razzaq at MarkTechPost. While we ultimately chose Gemini 2.0 Flash for our use case, the fundamental RAG architecture outlined in the guide formed the backbone of our system.Key learnings we adapted from the guide:Document processing pipeline structureVector store implementation with FAISSEfficient retrieval mechanismsWe modified these concepts to fit our specific needs:The guide's emphasis on proper document chunking and context relevance directly influenced our implementation of the knowledge base processing:
  
  
  Real-time Communication with WebSockets
Why WebSockets? Because nobody likes waiting! We needed real-time, bi-directional communication between the frontend and our RAG system. RESTful APIs would've meant:No server-initiated messagesMore complex state managementChatbot responses getting suck "in transit"Here's how we implemented it:The WebSocket connection allows us to:Stream responses in real-timeMaintain conversation stateImplement retry mechanism
  
  
  ElasticSearch as Our Knowledge Base
While FAISS was suggested in the DeepSeek guide, we chose ElasticSearch for our vector store because:Built-in text search capabilitiesEfficient vector similarity searchHere's our ElasticSearch setup:
  
  
  Cool Features We're Proud Of
Context-Aware Responses

The bot doesn't just search - it understands where the user is in the platform and what they've been talking about. It's like having a GPS for user context!Privacy First

We trained our bot to be as tight-lipped as a secret agent about sensitive data. Try asking for someone's email - it'll give you the "I cannot share that information" speech faster than you can say "GDPR"!Beyond the Knowledge Base

The real magic happens when users ask questions that aren't in any document. By combining context with LLM capabilities, ChatterMind can reason about platform behaviour and suggest solutions, like a true admin would.
ChatterMind: "Hi Akshay, my name is ChatterMind! 👋 Welcome to XYZ Support. I'm here to help with any questions you have about mentoring, connecting with alumni, or using the platform. How can I assist you today?"
User: "Why is the page not working?"
ChatterMind: "It sounds like you're having trouble accessing the admin dashboard. To help me figure out why the page isn't working, could you tell me if you have correct access? This page requires admin-level permissions to function correctly. Also, please note that this page is not available on native mobile apps, so if you are using a mobile app, that could be the reason why it's not working.

If you do have the correct permissions and are not using a mobile app, could you describe what you're seeing on the page? Any details you can provide will help me troubleshoot the issue.

Please let me know if you have any other questions."

  
  
  Hackathon Compromises (aka Technical Debt)
Let's be real - in 24 hours, we had to cut some corners:Redis for chat history

Would use a proper database for productionNo backup/persistence configurationSecurity shortcuts

Basic token authenticationPerformance trade-offs

Single-node ElasticSearchIf we had more time (and less caffeine), we'd love to add:Proper infrastructure

Distributed chat history storageCool features

Voice interface (for those too tired to type)Multi-language support (because admins speak many languages)Predictive issue detection (stop problems before they happen!)This project wouldn't have been possible (let alone won the hackathon! 🏆 🎉) without my amazing team's diverse skills and relentless energy. Special thanks to:Our AI/ML engineer Suyash who became our guide at times and pointed us in right direction. 🧠Our Engineers Rajat & Rahul who made WebSockets work like magic, and did the end-to-end integration on my core idea. ⚡Our Engineers Manoj & Samrood who integrated ElasticSearch & became frontend ninjas who created a sleek chat-interface. 🎨And countless Chai & Coffee that fuelled our coding marathons. 🥤Winning the hackathon was the cherry on top of an incredible 24-hour journey. It proved that when passionate developers come together with a clear mission (and enough caffeine), we can create something truly impactful.Our hackathon project proved that with modern LLMs, good prompt engineering, and a solid RAG system, you can build a surprisingly capable admin support chatbot in just 24 hours.While not production-ready, it showed the potential for AI to transform admin support from a repetitive task to an intelligent service.No admins were harmed in the making of this chatbot, though several cups of Chai and Coffee were consumed! 🚀 ☕ 🎉]]></content:encoded></item><item><title>The TechBeat: Cybercrooks Are Using Fake Job Listings to Steal Crypto (2/16/2025)</title><link>https://hackernoon.com/2-16-2025-techbeat?source=rss</link><author>Techbeat</author><category>tech</category><pubDate>Sun, 16 Feb 2025 07:11:00 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[By @diadkov [ 4 Min read ] 
 Since March 2024, conspiracy theories about TikTok's ban have spread, citing espionage fears and geopolitical influences without solid evidence Read More.By @moonlock [ 19 Min read ] 
 Moonlock Lab dives deep into a campaign tricking blockchain developers with fake job interviews to deploy malware that installs a backdoor and targets MetaMask. Read More.By @@javar97 [ 7 Min read ] 
 According to Stack Overflow's 2024 survey, 76% of developers are using or planning to use AI tools. Read More.By @bill-achola [ 3 Min read ] 
 Who really profits in a startup? Our deep dive into startup salaries reveals how executives secure big paydays while employees take on the risk. Read More.By @ntoskrnl [ 8 Min read ] 
 Security mechanisms under the hood of simple file actions Read More.By @bigredeye [ 21 Min read ] 
 Perforator is a continuous profiling system developed by Yandex, now open-sourced.   Read More.By @andrei9735 [ 6 Min read ] 
 Link prediction aims to predict the likelihood of a future or missing connection between nodes in a network.  Read More.By @thomascherickal [ 25 Min read ] 
 Deep Research Prompts: Explore 30 ambitous, impactful ideas using emerging tech to tackle global crises. Discover research with world-changing potential. Read More.By @bigmao [ 6 Min read ] 
 The case against content marketing, and how to do inbound marketing in the post-content age.  Read More.By @vinitabansal [ 9 Min read ] 
 While aggressive managers are difficult, they aren’t impossible to work with. With the right strategies, you can turn them around. Read More.By @silkdrive [ 4 Min read ] 
 Discover the future of software development with vibe coding—where creativity comes first, and coding happens effortlessly with AI. Read More.By @editingprotocol [ 4 Min read ] 
 If you want to become a top writer, here are 3 tips to help you rise to the cream of the crop.  Read More.By @abhiyanampally_kob9nse8 [ 40 Min read ] 
 Dive into the comparitive analysis between logarithmic and floating-point arithmetic in neural nets using the commonly used MNIST dataset. Read More.By @blackheart [ 6 Min read ] 
 In Barbie, Ken struggles with identity, feeling like he exists in Barbie’s shadow. Many cybersecurity specialists can relate. Read More.By @step [ 6 Min read ] 
 Language is a component of human consciousness. AI has a conversational and relatable language capability, could that be a fraction of consciousness? Read More.By @mesciusinc [ 10 Min read ] 
 Learn everything you need to know about the best Blazor UI Components and how to use them in your application. Read More.By @brightdata [ 8 Min read ] 
 Let's see how OpenAI's Operator is handling CAPTCHAs and explore whether this is the best solution! Read More.By @andrei9735 [ 7 Min read ] 
 In this post we'll continue working on link prediction with the Twitch dataset. Read More.]]></content:encoded></item><item><title>[R] A Survey of Logical Reasoning Capabilities in Large Language Models: Frameworks, Methods, and Evaluation</title><link>https://www.reddit.com/r/MachineLearning/comments/1iqmjal/r_a_survey_of_logical_reasoning_capabilities_in/</link><author>/u/Successful-Western27</author><category>dev</category><category>ai</category><category>reddit</category><pubDate>Sun, 16 Feb 2025 06:55:36 +0000</pubDate><source url="https://www.reddit.com/r/MachineLearning/top/?sort=top&amp;t=day&amp;limit=3">Reddit - ML</source><content:encoded><![CDATA[This new survey provides a comprehensive analysis of logical reasoning capabilities in LLMs, examining different reasoning types, evaluation methods, and current limitations.Key technical aspects: - Categorizes logical reasoning into deductive, inductive, and abductive frameworks - Evaluates performance across multiple benchmarks and testing methodologies - Analyzes the relationship between model size and reasoning capability - Reviews techniques for improving logical reasoning, including prompt engineering and chain-of-thought methodsMain findings: - LLMs show strong performance on basic logical tasks but struggle with complex multi-step reasoning - Model size alone doesn't determine reasoning ability - training methods and problem-solving strategies play crucial roles - Current evaluation methods may not effectively distinguish between true reasoning and pattern matching - Performance degrades significantly when problems require combining multiple reasoning typesI think the most important contribution here is the systematic breakdown of where current models succeed and fail at logical reasoning. This helps identify specific areas where we need to focus research efforts, rather than treating reasoning as a monolithic capability.I think this work highlights the need for better benchmarks - many current tests don't effectively measure true reasoning ability. The field needs more robust evaluation methods that can differentiate between memorization and actual logical inference.TLDR: Comprehensive survey of logical reasoning in LLMs showing strong basic capabilities but significant limitations in complex reasoning. Highlights need for better evaluation methods and targeted improvements in specific reasoning types.]]></content:encoded></item><item><title>I created a telegram bot with dynamic form builder</title><link>https://github.com/MeowSaiGithub/tg-form-builder</link><author>/u/Altruistic_Let_8036</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sun, 16 Feb 2025 06:33:51 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Python for Web Developers: A Fast-Paced Guide to the Language</title><link>https://dev.to/austinwdigital/python-for-web-developers-a-fast-paced-guide-to-the-language-38f7</link><author>Austin W</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 06:24:00 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[👋  Follow me on GitHub for new projects.Python is a powerful, high-level programming language widely used in web development, automation, data science, and scripting. If you're already a  familiar with JavaScript, TypeScript, Node.js, and frameworks like React or Next.js, learning Python can open doors to backend development with Django, Flask, and FastAPI, as well as automation, data analysis, and AI.This guide is a  of Python, focusing on concepts that web developers need to know. If you’re comfortable with JavaScript, you’ll find Python’s syntax clean and easy to pick up.1. Python Syntax & BasicsHello World (No Semicolons, No Braces)✔ No semicolons ().—uses indentation., just .  Variables & Dynamic Typing✔ No need to declare , , or .
✔ Types are inferred dynamically.  
  
  
  How Does const Work in Python?
Python does not have const like JavaScript, but you can define constants by using all-uppercase variable names as a convention.However, this does not enforce immutability. If you need true immutability, use a dataclass or a frozen set.Data Types (Compared to JavaScript)let obj = {key: "value"};2. Control Flow (Loops & Conditionals)✔ No parentheses  needed for conditions. instead of .  ✔  loops iterate directly over lists/arrays. loops work like JavaScript.  3. Functions & Lambda Expressions✔  replaces ., just indentation.  Lambda (Arrow Function Equivalent)✔ Equivalent to JavaScript’s arrow function:4. Python Collections (Lists, Dicts, Sets)let obj = { key: "value" };obj = {"key": "value"}  # Dictionaryconst unique = new Set([1, 2, 3]);unique = {1, 2, 3}  # SetDictionaries (Like Objects)5. Object-Oriented Programming (OOP) in Python✔  is the  (like  in JS). is like .  6. Python for Web DevelopmentDjango (Full-Stack Framework)pip django
django-admin startproject myproject
✔  is a batteries-included backend framework.
✔ Built-in ORM, authentication, and templating.  Flask (Lightweight API Framework)✔  is minimal and great for APIs.  FastAPI (High-Performance API)✔  is async-native and perfect for microservices.  SQLite Example (Django & Flask Compatible)✔  is built-in, no installation needed.  8. Asynchronous Programming in PythonAsync/Await (Similar to JavaScript)✔ Uses / like JavaScript. is the  equivalent of Node.js.  9. Python Package ManagementCreate Virtual Environment✔  for package management. () isolate dependencies.   10. Best Practices for Python DevelopmentWriting clean, efficient, and maintainable Python code is essential for long-term scalability. Here are the key best practices that every Python developer should follow:Follow PEP 8 (Python Style Guide)Python has an official style guide called , which provides conventions for writing Python code.4 spaces per indentation level (not tabs)..meaningful variable and function names. for variable and function names, and  for class names.Python’s  isolate dependencies for different projects, preventing conflicts.Creating a Virtual EnvironmentActivating the Virtual EnvironmentDeactivating the Virtual EnvironmentUse Type Hinting for Readable CodePython is dynamically typed, but you can use  to improve code clarity.✔ This makes the code . catch type errors.Write Readable DocstringsAlways document your functions and classes using  ().✔ Use triple quotes for multi-line docstrings.parameters, return values, and purpose.  Python uses  for  and triple quotes () for .✔ Use comments only where necessary—good code should be self-explanatory.Docstrings are not comments—they are for documentation and can be accessed with .  12. Common Python Imports for Web DevelopmentHere are some of the most common Python imports used in web development:13. Setting Up a  FileA  file is similar to  in Node.js—it lists dependencies for a Python project.Creating a  Filepip freeze  requirements.txt
Installing Dependencies from pip  requirements.txt
✔ This ensures that all team members and deployment environments have the .  14. Writing & Running Tests in PythonPython has built-in testing with , but  is another option - one that aims for simplicity.✔ Use  to check expected results.✔ —just use . test files named .  15. Fetching Data with API Calls in PythonPython uses  to fetch data, similar to  in JavaScript.✔  is like  in JavaScript. works the same way in both languages.Sending Data (POST Request)✔ Use  instead of  to send JSON.Logging is essential for debugging and monitoring applications.✔ Works like  but supports different log levels.  ✔ Saves logs for later analysis.17. Raising & Handling Errors in Python LoggingWhen an error occurs, Python lets you  or .✔ Use  to manually trigger an error.  Instead of crashing, log errors with a traceback:✔  logs the full error traceback.Python is a useful language for web developers, expanding your stack beyond JavaScript. Whether you’re building APIs with FastAPI, full-stack apps with Django, or automating tasks, Python makes it .🚀  Try building a small Flask or FastAPI project today!Python #WebDev #Django #Flask #FastAPI  A fast-paced guide to Python for web developers! Learn how to use Python for full-stack development, APIs, databases, async programming, and more. 🚀  
  
  
  TLDR – Highlights for Skimmers
Python syntax is simpler than JavaScript—no semicolons, indentation replaces {}.const does not exist in Python; uppercase variables are used for constants.Lists ([]) are like arrays, but dictionaries ({}) are not JavaScript objects.Classes & objects are similar, but Python uses self instead of this.Python async/await requires asyncio, unlike JavaScript’s built-in event loop.Django, Flask, and FastAPI are top backend frameworks for Python web dev.💬 Do you use Python in web dev? Share your experience in the comments! ]]></content:encoded></item><item><title>The effectiveness of irqbalance</title><link>https://www.reddit.com/r/linux/comments/1iqlqy0/the_effectiveness_of_irqbalance/</link><author>/u/D_Dave</author><category>linux</category><category>reddit</category><pubDate>Sun, 16 Feb 2025 06:03:09 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[During the years I've tried many times irqbalance: is recommended as improvement by various distros.But honestly I didn't noticed any improvement with irqbalance, but also nor neagative effects. I also modified the config file , by editing the line  in various modalities. By various research, I've read that is mostly recommended for servers. What I've done instead, has been to add the kernel parameter  in grub, taken from here:https://docs.kernel.org/admin-guide/kernel-parameters.htmlSo: what do you think about irq balancing, done by irqbalance or done by the kernel itself?]]></content:encoded></item><item><title>Code Optimization Strategies for Game Development 🔥</title><link>https://dev.to/codewithshahan/code-optimization-strategies-for-game-development-2n0e</link><author>Programming with Shahan</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 05:46:59 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[Game development is a battlefield. Either you optimize, or you lose. Period.I don’t care if you’re an experienced developer with 10 years of experience or 1 year of experience. If you want to make games that WORK, games people respect—you need to understand . Players demand smooth gameplay, high-quality visuals, and a flawless experience across every device. If your game stutters, crashes, or loads slower than a snail? You’re done. Optimization isn’t magic. It’s the foundation of smooth gameplay, fast loading, and stable performance. Without it, your game will lag, crash, and be forgotten faster than you can say “game over.”  But don’t worry. In this article, I will share four effective strategies to help you with that. 
  
  
  Effective Strategies for Performance Optimization
🤸‍♂️ What Is Optimization? Optimization means making your game run as fast and smooth as possible. SIMPLE.When you optimize your game, you:  🖥️ Make the game work on weaker computers or phones.💉 Prevent lag and crashes.Rule 1: Memory ManagementWhen you’re developing a game, memory is your most valuable resource.Every player movement, every enemy on the screen, every explosion needs a little piece of memory to function. Unfortunately, If you don’t manage memory properly, your game can get slow, laggy, or even crash. That’s why memory management is a critical skill every game developer needs. Let’s break it down step by step, with detailed examples in Python.Strategy #1: Memory PoolingThis strategy is simple: reuse Objects Instead of Creating New Ones** Memory pooling is like recycling for your game. Instead of creating new objects every time you need one, you reuse objects you’ve already created.  Creating and destroying objects repeatedly takes up time and memory. Let's say you are building a shooting game where the player fires 10 bullets per second. If you create a new bullet for each shot, your game could quickly slow down.  Here’s how you can implement memory pooling for bullets in a shooting game:The  Class: Defines what a bullet does and keeps track of whether it’s active (in use) or not.
The : A list of 10 reusable bullets.
The  Function: Finds an inactive bullet, reuses it, and sets its position.
Recycling Bullets: When you’re done with a bullet, you reset it so it can be reused.
Strategy #2. Data Structure OptimizationThe way you store your data can make or break your game’s performance. Choosing the wrong data structure is like trying to carry water in a leaky bucket—it’s inefficient and messy.  Let’s say you’re making a game for four players, and you want to keep track of their scores. You could use a list, but a fixed-size array is more efficient because it uses less memory. Creates a fixed-size array of integers ().
 You can’t accidentally add or remove elements, which prevents bugs and saves memory.
 Updating scores is quick and uses minimal resources.
Strategy #3. Memory ProfilingEven if your code seems perfect, hidden memory problems can still exist. Memory profiling helps you monitor how much memory your game is using and find issues like memory leaks.  Python has a built-in tool called  that tracks memory usage. Here’s how to use it: begins monitoring memory usage.
 Create a large list to use up memory.
 Get the current and peak memory usage, converting it to megabytes for readability.
 ends the tracking session.
Now it’s your turn to practice these strategies and take your game development skills to the next level!Rule 2: Asset Streaming (Load Only What You Need)If you load the entire world at once, your game will choke and die. You don’t need that drama. Instead, stream assets as the player needs them. This is called asset streaming. For instance, inside your game, you may have a huge open-world with forests, deserts, and cities. Why load all those levels at once when the player is only in the forest? Makes no sense, right? Load  and keep your game lean, fast, and smooth.Strategy #1: Segment and PrioritizeLet’s break this down with an example. Your player is exploring different levels: Forest, Desert, and City. We’ll only load a level when the player enters it.Here’s how to make it work in Python: Each level has a name (e.g., Forest) and a “loaded” status. If it’s loaded, it doesn’t load again.
 The  function finds the level the player wants to enter and loads it only if it hasn’t been loaded yet.
 Levels not visited don’t waste memory. The game runs smoothly because it only focuses on what the player needs.This is efficiency at its finest. No wasted memory, no wasted time. Your player moves; your game adapts. That’s how you dominate.  Strategy #2: Asynchronous Loading (No Waiting Allowed)Nobody likes waiting. Freezing screens? Laggy loading? It’s amateur hour. You need —this loads assets in the background while your player keeps playing.  Imagine downloading a huge map while still exploring the current one. Your game keeps moving, the player stays happy.Here’s how to simulate asynchronous loading in Python: The  module creates a new thread to load assets without freezing the main game.
 The  function fakes the loading time to mimic how it works in a real game.
 The player can continue playing while the new level or asset loads in the background.
With asynchronous loading, your player stays in the zone, and your game feels seamless. Pro-level stuff.Strategy 3: Level of Detail (LOD) Systems – Be Smart About QualityNot everything in your game needs to look like it’s been rendered by a Hollywood studio. If an object is far away, lower its quality. It’s called , and it’s how you keep your game’s performance sharp.  Example: Using LOD for a TreeHere’s a Python simulation of switching between high and low detail: The  property determines how far the tree is from the player.
 If the tree is close, render it in high detail. If it’s far, use low detail to save memory and processing power.
 The player doesn’t notice the difference, but your game runs smoother and faster.
This is how you keep the balance between beauty and performance. Your game looks stunning up close but doesn’t waste resources on faraway objects. Only load what you need, when you need it. No wasted memory.
 Smooth gameplay keeps players engaged and avoids frustration.
 These techniques are how AAA games stay fast and responsive.
 Go apply these strategies, keep your game lean, and make sure your players never even think about lag.Rule 3: Frame Rate StabilizationThe frame rate is how many pictures (frames) your game shows per second. If it’s unstable, your game will stutter and feel broken.  The secret? Keep the workload for each frame consistent.  🚦Here’s how you can control the timing in a game loop:⚖️ The game updates at a steady rate (60 times per second).
🪂 This make smooth gameplay, no matter how slow or fast the computer is.
Optimize Rendering Paths: Fewer draw calls. Smarter culling. Simplicity wins.Dynamic Resolution Scaling: When the pressure’s on, scale down resolution to maintain the frame rate. Players won’t even notice.Fixed Time Step: Keep your physics and logic consistent. Frame rate fluctuations shouldn’t mean chaos.Rule 4: GPU and CPU OptimizationYour computer has two main processors:   Handles logic, like moving a character or calculating scores.
 Handles graphics, like drawing your game world.
👇 Here's what you have to do for GPU/CPU optimization:Profile Everything: Use tools to pinpoint bottlenecks and strike hard where it hurts.
Shader Optimization: Shaders are resource hogs. Simplify them, streamline them, and cut the fat.
Multithreading: Spread tasks across CPU cores. Don’t overload one and leave the others idle.If one is working too hard while the other is idle, your game will lag.  Solution? Multithreading.
Let’s split tasks between two threads:🎰 One thread handles logic.
🛣️ Another thread handles graphics.
⚖️ This balances the workload and prevents bottlenecks.
Optimization isn’t just for “smart” people. It’s simple if you take it step by step:  Manage memory like a pro. Don’t waste it.
 Load only what you need.
Keep the frame rate stable. No stuttering.
 Use the CPU and GPU wisely.
Start optimizing NOW. Your future self will thank you.  ]]></content:encoded></item><item><title>AI Bugs Could Delay Upgrades for Both Siri and Alexa</title><link>https://apple.slashdot.org/story/25/02/16/0138205/ai-bugs-could-delay-upgrades-for-both-siri-and-alexa?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sun, 16 Feb 2025 05:34:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[Bloomberg reports that Apple's long-promised overhaul for Siri "is facing engineering problems and software bugs, threatening to postpone or limit its release, according to people with knowledge of the matter...."

Last June, Apple touted three major enhancements coming to Siri: 

- the ability to tap into a customer's data to better answer queries and take actions.
- a new system that would let the assistant more precisely control apps.
- the capability to see what's currently on a device's screen and use that context to better serve users.... 

The goal is to ultimately offer a more versatile Siri that can seamlessly tap into customers' information and communication. For instance, users will be able to ask for a file or song that they discussed with a friend over text. Siri would then automatically retrieve that item. Apple also has demonstrated the ability for Siri to quickly locate someone's driver's license number by reviewing their photos... Inside Apple, many employees testing the new Siri have found that these features don't yet work consistently... 
The control enhancements — an upgraded version of something called App Intents — are central to the operation of the company's upcoming smart home hub. That product, an AI device for controlling smart home appliances and FaceTime, is slated for release later this year. 

And Amazon is also struggling with an AI upgrade for its digital assistant, reports the Washington Post:
The "smarter and more conversational" version of Alexa will not be available until March 31 or later, the employee said, at least a year and a half after it was initially announced in response to competition from OpenAI's ChatGPT. Internal messages seen by The Post confirmed the launch was originally scheduled for this month but was subsequently moved to the end of March... According to internal documents seen by The Post, new features of the subscriber-only, AI-powered Alexa could include the ability to adopt a personality, recall conversations, order takeout or call a taxi. Some of the new Alexa features are similar to Alexa abilities that were previously available free through partnerships with companies like Grubhub and Uber... 
The AI-enhanced version of Alexa in development has been repeatedly delayed due to problems with incorrect answers, the employee working on the launch told The Post. As a popular product that is a decade old, the Alexa brand is valuable, and the company is hesitant to risk customer trust by launching a product that is not reliable, the person said.

]]></content:encoded></item><item><title>Automating Daily arXiv Paper Summaries with Slack Notifications</title><link>https://dev.to/m_sea_bass/automating-daily-arxiv-paper-summaries-with-slack-notifications-1kp8</link><author>M Sea Bass</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 05:26:47 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[This post is a follow-up to the previous article. It turns out there’s a slight delay before the latest papers show up in the arXiv API. Because of this delay, the same paper can sometimes appear the next day.To fix this, we’re going to record the timestamp of the last retrieved paper and then only fetch new papers each day.We’ll store the timestamp of the latest paper in Amazon S3 so we can both update and retrieve it later. For this, you’ll need to install . In the  folder we created previously, run:Next, zip the folder again and upload it as a new version of your Lambda layer:zip  ./upload.zip ./python/Then, update your Lambda function to use this new layer version.You’ll also need an S3 bucket ready in advance. In this example, we simply created one with the default settings.Below is the fully revised code in English, including the new functions to update and retrieve the timestamp from S3. Note that we set  as an environment variable.By saving the timestamp in S3, your script won’t process the same paper entries each day, and if no new papers appear, the script will skip generating summaries. This helps reduce unnecessary API usage and costs.]]></content:encoded></item><item><title>Death of OpenAI whistleblower deemed suicide in new autopsy report</title><link>https://techcrunch.com/2025/02/15/death-of-openai-whistleblower-deemed-suicide-in-new-autopsy-report/</link><author>Connie Loizos</author><category>tech</category><pubDate>Sun, 16 Feb 2025 05:11:52 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Suchir Balaji, a former OpenAI employee, was found dead in his San Francisco apartment on Nov. 26; on Friday, the city’s medical examiner ruled his death a suicide, countering suspicions by his family that had fueled widespread speculation online. Balaji made headlines in October when he accused OpenAI of illegally using copyrighted material to train […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>GaussianBlur in PyTorch (2)</title><link>https://dev.to/hyperkai/gaussianblur-in-pytorch-2-1bj2</link><author>Super Kai (Kazuya Ito)</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 04:47:39 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>GaussianBlur in PyTorch (1)</title><link>https://dev.to/hyperkai/gaussianblur-in-pytorch-1-3ndn</link><author>Super Kai (Kazuya Ito)</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 04:35:52 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[The 1st argument for initialization is (Optional-Type: or /()):
*Memos:

A tuple/list must be the 1D with 1 or 2 elements.A single value( or ()) means [kernel_size, kernel_size].The 2nd argument for initialization is (Optional-Default:-Type:,  or /( or )):
*Memos:

It's  so it must be .A tuple/list must be the 1D with 1 or 2 elements.A single value(,  or ( or )) means .The 1st argument is (Required-Type: or ()):
*Memos:

A tensor must be 2D or 3D.]]></content:encoded></item><item><title>Speedrunning Guide: Junior to Staff Engineer in 3 years</title><link>https://blog.algomaster.io/p/speedrunning-guide-junior-to-staff</link><author>Ashish Pratap Singh</author><category>dev</category><category>learning</category><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0173844b-0e38-4ca8-b779-b34f7f778872_1600x413.png" length="" type=""/><pubDate>Sun, 16 Feb 2025 04:30:58 +0000</pubDate><source url="https://blog.algomaster.io/">Algomaster</source><content:encoded><![CDATA[Today’s newsletter features a special guest, , who was promoted from Junior to Staff Engineer at Meta in just 3 years.In this article, Ryan will share his insights on how to fast track your career growth and get promoted faster.Once you land that first software engineering job, the next big question becomes: how do you get promoted? Many engineers fall into the day-to-day routine of writing code without a clear idea of how to grow their careers.This happened to me. At my first job at Amazon, I landed code without knowing what I could do to grow my skills. I left that job within eight months because I felt I wasn’t growing as an engineer. Three years later, I made it to Staff Software Engineer at Instagram after tons of mentorship. Early on, I learned that being good at coding wasn’t enough to get promoted; you have to think strategically about your career and often need to develop new behaviors to move up.In this article, I’ll share everything that helped me fast-track my way up the ladder, from developing the right mindset to making key moves that many overlook. Even if rapid growth isn’t your goal, this guide has learnings for all tech career paths.Software Engineering LevelsAn Algorithm for PromotionJunior (IC3) → Mid-level (IC4)Mid-level (IC4) → Senior (IC5)Senior (IC5) → Staff (IC6)Software Engineering LevelsNote: “IC” = “Individual Contributor”In software engineering, companies measure career progression by levels that measure both behaviors and impact within the company. While the exact titles and structure can vary between companies, most tech companies follow a similar system: - Early in your career, working on smaller, well-defined tasks with guidance from more experienced engineers. - More autonomous, handling moderately complex projects, and beginning to take initiative in improving the codebase and what they build. - Leading larger projects with team-level influence. You’ll mentor and guide the team while having a broad impact on the codebase.: Focusing on cross-team collaboration and solving org-wide challenges. Staff engineers are strategic thinkers who influence the technical direction of their organization.Senior Staff Engineer and Beyond (IC7+): Senior staff engineers and up operate with top technical expertise, driving large-scale initiatives that have a broad impact on the company. Senior staff engineers mentor staff engineers and work closely with executive leadership to meet business objectives.Your impact and compensation increase as you progress, which is a lot more satisfying in my experience. Not to mention that the skills that get you promoted also let you control what you and the company work on.Also, many companies consider only senior engineers (IC5) and higher to be “terminal levels.” You must eventually get promoted to IC5, or you’ll be managed out. Most engineers are promoted in time, so it’s not meant to scare you but to encourage you to grow.An Algorithm For PromotionThere’s a common set of steps across all promotions that will get you to Staff:1) Exceed expectations at your current level - Your manager will be hesitant to find you opportunities at the next level if they have concerns about your performance at the current level. Also, when your manager puts together a promotion packet, it’ll contain a history of your past ratings. The promotion committee will have concerns about your packet if you have a history of only meeting expectations for your level. Work with your manager to understand the expectations for your level and how to exceed them.2) Be direct with your manager about promotion - Once you know you’re exceeding expectations for your level, ask your manager what next-level performance looks like. Your manager plays a huge role in your promotion. They build your case and advocate for it, so they have a lot of influence on this process. Also, the lower the level, the more control your manager has. IC3 -> IC4 promotions are straightforward, so your manager’s perspective is usually what happens. For IC5 -> IC6, there is a lot more ambiguity, so your manager serves more as a middleman between you and the promotion committee. Your manager still plays a significant role in writing your packet and delivering feedback.3) Find next-level scope - If you only work on projects that fit your level’s behaviors, you won’t get any closer to promotion, no matter how good your work is. One simple pattern for finding next-level scope is brainstorming projects with engineers who are 1-2 levels higher than you are. Often, they will have a lot of projects sitting in their backlog that are big enough to help you get promoted. If you take on one of their projects, they’ll often help mentor you, review your designs and code, and give you strong peer feedback for your future promotion packet. I wrote more on this here. Make sure to confirm with your manager that they agree that what you’re working on fits the behaviors of the next level.4) Maintain next-level behaviors and impact - The duration you need to perform at the next level varies depending on your level and your company. At minimum though, you need to maintain that performance for 6-12 months. This is because promotions are “lagging” in tech. You must prove that you’re already operating at the next level before getting promoted. This reduces the risk of failing to meet expectations at the new level.Getting promoted faster is a matter of doing steps (1), (2) and (3) as fast as possible. The best you can do is immediately start exceeding expectations in your first half and working with your manager on the next level.Almost every team has scope for more Senior Engineers (IC5). You can get promoted up to that level if you have the skills and behaviors. Past that, situation and business scope play a much larger role. Many teams don’t need someone who has Staff-level leadership and technical skills. If you find yourself stuck at any point due to your situation, you’ll likely have to switch teams to continue growing your career.Now that you have the algorithm that applies at any of these levels let’s get into the level-specific strategies. I’ll share what got me promoted and what I would change if I did it again.Junior (IC3) → Mid-level (IC4)The main difference between these levels is in the size of the scope that you can handle independently. Here’s a rule of thumb:IC3 - Can handle individual tasks (<2 weeks of work) with minimal guidanceIC4 - Can handle medium-to-large features (<2 months of work) with minimal guidance“Minimal guidance” doesn’t mean that you can’t ask for help—it simply means that you can unblock yourself and make consistent progress. Asking good questions is one of the most effective ways to unblock yourself.You should drive full features and do the project management for them. You should break your project into tasks, set reasonable timelines, and keep stakeholders updated.You will not be expected to come up with the projects yet at this level—Senior Engineers will often outline them. However, at the IC4 level, you’re expected to take more initiative:Initiate refactoring and code cleanups, and give thoughtful code reviews. Leave the code in a better state than you found it.Contributing to production excellence - Participate in the team’s oncall, and help debug production breakages.Own the health of what you build - Add test coverage, logging, and build dashboards to monitor correctness.Optimize your dev velocity to grow faster at this level. Shipping code faster creates a shorter feedback loop, accelerating your learning process. This core skill will help you ship IC4-scope projects and improve as an engineer.Here’s an example of several promotion timelines for what you can expect:Promotion in 6 months (exceptional) - Rare since this means meeting IC4 expectations while onboarding. This is easier for high-performing return interns since they skip onboarding and may have some past track record already.Promotion in 12 months (great) - I’d shoot for this timeline. It’s challenging yet reasonable since it gives you six months to onboard and then start meeting IC4 expectations.Here’s my promotion timeline as an example:H1 (L3 Exceeds Expectations) - First, I took on any task that came my way. These were nice-to-have features that others didn’t have time for. I completed them quickly and started on a larger pipeline rewrite (L4 scope) that my tech lead offered me. Outside of my main project work, I made many contributions to removing dead code and speeding up existing code because I enjoyed it.I started to hit L4 expectations in the last few months of the half. But, since I didn’t have six months track record, I didn’t meet the promotion criteria.H2 (L3→L4 Promotion, Greatly Exceeds Expectations) - I continued driving my L4-scope project independently with high engineering quality. I came up with the idea to build a test harness to validate this rewrite that was “comparable to L5 quality” execution. I continued my passion for improving the codebase and led the company in adding static type annotations that MonkeyType couldn’t.At this point, I had delivered on L4 scope for over six months, so the promotion made sense.What I Would Have Changed:Looking back, I would have discussed what IC4 growth looked like with my manager. I wasted our one-on-one time on project updates instead of career growth. This led to two problems:Spent time on work that wasn’t impactful - I took on any work that was passed my way, even though not all of it was impactful. I probably could’ve gotten more out of my time.Didn’t have accurate expectations - I had another engineer tell me my work was IC4 level and that I should get promoted in my first half. I knew nothing then, so I took their word for it. I was surprised when I didn’t get promoted, which could have been avoided if I had been in sync with my manager.Although I could have been more calculated, writing as much code as I did opened doors. My tech lead trusted me with an IC4 project because I showed I could handle it. Similarly, some of the engineering craft work I did for my own personal pleasure ended up being part of what got me promoted too. The more work you do, the luckier you get.Mid-level (IC4) → Senior (IC5)The IC4 to IC5 gap is larger than the IC3 to IC4 one. This is because IC5 promotion requires significant behavior changes. Raw code output is no longer the top priority. You need to lead and have a larger influence within your team too. Here are a few examples of those differences:Example 1 - Improving the codebaseIC4 - Initiates refactoring and code cleanups.IC5 - Identifies areas of improvement, influences the team to take goals on improving it together, then leads the charge on those goals.Example 2 - Production excellenceIC4 - Participates in team’s oncall and mitigating outages.IC5 - Creates an “oncall improvement” workstream and builds a process for everyone to improve the team’s oncall.Example 3 - Project directionIC4 - Owns the project management of a medium-to-large feature.IC5 - Drives team planning and builds a roadmap of several medium-to-large features.I wouldn’t say the IC5 examples are harder, but they require a mindset shift to own things at the team level.Also, you’ll need to work on projects of sufficient scope for an IC5. There are a few ways that tech companies measure scope. Here’s a comparison of the criteria for IC4 and IC5 levels:These criteria aren’t a checklist. Your work can be IC5 scope by meeting only some of these criteria.IC5 is also the first time engineers begin to focus on growing others. At this level, you should mentor others and build up the team’s culture, which includes driving meetings, knowledge sharing, recruiting activities, and organizing team activities. Starting mentorship relationships early is a good idea since you can’t rush mentorship.If you can learn the above behaviors quickly, you can expect promotion on these timelines:Promotion in 6 months (exceptional) - This is rare since you need to exert team-level influence as soon as you join the team. I could see this happening for someone who was under-leveled and just got promoted to IC4.Promotion in 12 months (great) - If you’re ambitious, I’d aim for this goal. It is possible to do this if you find IC5 scope in your first half. If not, one more half should secure your promotion.Here’s my promotion timeline as an example:H1 (IC4 Exceeds Expectations) - This half I wrapped up the workstream that got me promoted to IC4 and picked up another IC4 project. I spent a ton of time on engineering craft this half because I enjoyed it. I deprecated a few legacy systems that no one else would because they were dangerous and not that impactful. I didn’t exhibit any IC5 behaviors this half.My manager handed me an IC5 workstream (~6 eng) to cut video messaging latency in half, which I led successfully. I also began a side project, which became a multiple-half collaboration with another team. Lastly, I took on an intern who did a phenomenal job helping me execute these two roadmaps I led. Although I started exhibiting IC5 behaviors, the company canceled performance reviews this half because of the pandemic.H3 (IC4 → IC5 Promotion, Greatly Exceeds Expectations) - My impact this half could’ve met expectations at the IC6 level. I doubled down on the cross-org scope I created in H2 and developed a multi-half roadmap. I influenced and led another team to invest several engineers to revamp the IG video ads pipeline with great results. I built out a second workstream and mentored another engineer to deliver it. This half, I had massive impact, team-level influence, and mentorship, which is what got me promoted.The Skill of Tech Leading - If you grew from L3 → L4 right, you should be exceptional at landing code. The L5 behavior of team-level influence is just helping others do the same. In my first half of leading an initiative, I remember feeling unsure about it since I only had two years of experience. Leaning on my strong execution skills helped me become comfortable leading others.Working Hard Led To More Opportunities - I worked a lot and had a ton of workstreams in flight at the same time. This approach increased my chances of having one that had a ton of impact. At the time, I didn’t know it and was just throwing myself at any problems that came my way. Looking back, it was a great way to derisk my promotion. - In my first half as an L4, I took on projects that were time-intensive and not impactful. I did these migrations because I loved cleaning up tech debt. I would’ve had more impact if I had influenced someone else to do them while I found IC5 scope instead.Senior (IC5) → Staff (IC6)Staff Engineers (IC6) are at the same level as engineering managers. They solve problems that few others can and play a critical role in setting team direction. They lead major initiatives and influence the engineering culture of teams around them.Some say that promotion from IC5 → IC6 is harder than IC6 → IC7 due to the significant behavior changes needed. There are a few major differences between IC5 and IC6.1) Influence Across Teams - Staff Engineer’s projects often extend beyond their team. They take on larger problems by influencing other teams without authority.Once IC6s establish these workstreams, they tackle the hardest problems and work through others. They focus on outcomes and don’t always do the work themselves. Working through delegation and influence across teams is the biggest mindset shift from IC5 → IC6.This style of working isn’t limited to their main project impact. IC6s should also use their influence to inspire a culture of higher engineering quality and reliability across teams. - Senior Engineers (IC5) build roadmaps of several medium-to-large features that help achieve their team’s goals. In this case, the problem and its business impact are clear; we just need an engineer to create a plan to solve it.Staff Engineers (L6) handle more ambiguity. They don’t just solve known problems; they create scope by finding impactful opportunities and problems. Managers work with their L6s to expand the scope of the team.- Big tech companies determine what level projects are in a few ways. Here’s a comparison of the criteria for L5 and L6 levels:Project complexity also distinguishes IC6 scope. Problems that IC5s can’t solve are considered IC6 scope. This is why specialists often have IC6+ scope; others often can’t do their projects.These criteria aren’t a checklist. Work can be IC6 scope by meeting only some of these. Your manager will use these criteria to argue that your work is IC6 scope. This is one of the reasons why it’s important to align with your manager on your work’s scope. - Staff engineers uplift others around them. They should have the ability to help IC5 engineers grow. There are a few ways they uplift others:Mentorship - Dedicated mentorship, preferably with senior engineersKnowledge sharing - Writing wikis, giving presentations, contributing to Q&A groupsCollaborations - Growing others while working with them (e.g. code reviews, design reviews, discussions)IC6 engineers should also contribute to growing the organization. This means that they help with recruiting and partner with their manager to improve team health.Getting to the Staff Engineering level can take a long time. Since IC5 is considered “terminal,” there is no external pressure to achieve IC6 fast. However, if you are eager to grow as fast as possible, here’s how fas you can expect promotion:Promotion in 1 half (Ridiculous) - You’d need to start influencing outside your team as soon as you join. Even then, it’s unlikely you’d get promoted this fast unless you create something company-changing.Promotion in 2 halves (Exceptional) - Finding IC6 opportunities on your team is not always possible this fast. It’s a combination of situation and skill to get promoted in two halves, even if you execute well.Promotion in 3 halves (Great) - If you’re ambitious I’d aim for this goal. It gives you a year to find IC6 scope, which is a reasonable amount of time to pivot if needed. Also, your track record of successes in the first year will help build the narrative for promotion.H1 (IC5 Exceeds Expectations) - I led two workstreams that were partnerships with other teams to hit our goals. I also landed a large win in an unplanned ads workstream, which is what brought my rating above expectations. I was also one of the top contributors to code review and interviewing in my 70-person eng org. The hidden success here was that I bootstrapped a new workstream towards the end of the half that was certainly IC6 scope.H2 (IC5 → IC6 Promotion, Greatly Exceeds Expectations) - The IC6 workstream I created turned out to be a massive opportunity. This work was a huge success, resulting in a company-wide award and public recognition from Mark Zuckerberg. I also created a cross-org collaboration between 3 large orgs (70+ eng each), which received positive feedback from each director. Lastly, I ran infrastructure preparations for my org resulting in no major incidents during the most critical time of the year. The repeated influence and impact of these large initiatives is what got me promoted to IC6. - My past context and relationships at Instagram helped me move a lot faster. I could lead several workstreams at once because I knew so much about the codebase. Also, it was easier to get work done in collaboration because I knew partner engineers from past work. Staying at one company for a longer time does have its benefits. - When I was an IC4, I stumbled upon some IC6 scope without realizing it. I had strong initiative so I started solving problems without thinking through why it was impactful. I got lucky that the work had IC6 impact. I’ve since learned the importance of understanding the “why” before diving in. It helps you have consistent IC6 impact and makes it easier to get buy-in for your work.The Tech Lead Skillset Scales Well - In my promotion to Senior (IC5), I learned how to lead initiatives within my team. This skillset turned out to work well at higher levels too. The difference was just that more people were involved. This skill is a great way to continue your IC growth to the highest levels if you fit the “tech lead” archetype.Growth to the Staff level can take a long time, and luck plays a role. As you move up the ladder, each promotion depends more and more on your situation in addition to your skill.There are ways to increase your luck. For instance, you can go to growing companies and teams. You can pick business-critical projects. You can go where the most talented people are. None of these are foolproof, but they increase your chances.Aside from picking your situation, one way to manufacture luck is to do as much good work as you can. Many growth opportunities came to me because of some past work I did. People would reach out to me to do more of it or because they wanted to ask me questions about something I had launched.Although luck plays a role, there are aspects of getting promoted that rely less on luck. Here are four high-level areas:Impact is any measurable and objective outcome that benefits your company. Promotions are a byproduct of your elevated, sustained impact. If you can learn what your organization considers impactful and you deliver that, you will be rewarded.2) Leverage is how you have more impact. Software engineers increase their leverage through people, writing, and code. Leverage is what differentiates higher-level ICs from lower-level ones. What I mean by each type of leverage:People - People leverage comes from technical leadership. This means setting direction, reviewing designs/code, and growing others.Writing - Writing gives us leverage by influencing and helping others without your active involvement.Code - Not all code is created equal. High-leverage code solves problems that few others can or helps engineers move faster at scale. When people hear “personal brand,” their minds often go to social media. But the brand that matters most is your “internal brand.” What do people within your company think about your work and its value? This is the brand that you should care most about.Most of the top ICs I know are not well-known outside of Meta. They are legendary within the company, though because people see their impressive work. Build your internal brand by doing great work and letting others know about it (further reading here).4) Build your soft skills. Working with others is a necessity to do anything of consequence. Also, being someone others want to work with makes it easier to find mentors who will uplift you along the way.Soft skills are underrated among software engineers. It’s important to be an excellent IC, but you can go so much further if you also communicate well. Also, engineers don’t often prioritize soft skills, so having them will help you stand out and lead.One last thing I’ll leave you with is something that I didn’t realize until looking back. When I first joined the industry, I was an absolute machine. I would get in early and stay until the last shuttle left at 9:27 PM. Although this might sound like hell to some people, I loved it. No one made me do that; I put in those hours because I enjoyed the work and thought it was interesting.Looking back years later, I realize that was an unfair advantage I had. It let me put in a ton of work without getting burned out. Also, I got much more out of what I did because I was intrinsically motivated.If there’s one thing I wish for you, it is that you find work at the intersection of what you enjoy and what will get you promoted. That is the best recipe for hyper-career growth.Thanks for reading,Ryan PetermanIf you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.If you have any questions or suggestions, leave a comment. If you’re enjoying this newsletter and want to get even more value, consider becoming a .]]></content:encoded></item><item><title>Weekly Challenge: Counting the XOR</title><link>https://dev.to/simongreennet/weekly-challenge-counting-the-xor-4hhc</link><author>Simon Green</author><category>dev</category><category>python</category><pubDate>Sun, 16 Feb 2025 04:23:00 +0000</pubDate><source url="https://dev.to/t/python">Dev.to Python</source><content:encoded><![CDATA[Each week Mohammad S. Anwar sends out The Weekly Challenge, a chance for all of us to come up with solutions to two weekly tasks. My solutions are written in Python first, and then converted to Perl. It's a great way for us all to practice some coding.You are given two array of strings,  and .Write a script to return the count of common strings in both arrays.The tasks and examples don't mention what to do if a string appears more than once in both arrays. I've made the assumption that we only need to return it once.For the command line input, I take two strings that are space separated as shown in the example.In Python this is a one liner. I turn the lists into sets (which only has unique values) and take the length of the intersection of these two sets.Perl does not have sets or intersections built in. For the Perl solution, I turn both strings into a hash with the key being the strings. I then iterate through the keys of the first hash to see if they appear in the second hash. If they do, I increment the  variable../ch-1.py 
2

./ch-1.py 
1

./ch-1.py 
0
You are given an encoded array and an initial integer.Write a script to find the original array that produced the given encoded array. It was encoded such that encoded[i] = orig[i] XOR orig[i + 1].This is relatively straight forward. For the command line input, I take the last value as the  integer, and the rest as the  integers.For this task, I create the  list (array in Perl) with the  value. I then iterate over each item in the  list and takes the exclusive-or of it and the last value in the  list../ch-2.py 1 2 3 1
1, 0, 2, 1]

./ch-2.py 6 2 7 3 4
4, 2, 0, 7, 4]
]]></content:encoded></item><item><title>Gixy: Nginx Configuration Static Analyzer</title><link>https://github.com/dvershinin/gixy</link><author>mmsc</author><category>hn</category><pubDate>Sun, 16 Feb 2025 04:06:04 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Real-time Updates Made Easy: Building Server-Sent Events with GoFrame 🚀</title><link>https://dev.to/jones_charles_ad50858dbc0/real-time-updates-made-easy-building-server-sent-events-with-goframe-112b</link><author>Jones Charles</author><category>dev</category><category>go</category><pubDate>Sun, 16 Feb 2025 02:37:08 +0000</pubDate><source url="https://dev.to/t/go">Dev.to Go</source><content:encoded><![CDATA[Hey there, fellow developers! 👋 Ever needed to add real-time updates to your Go application but found WebSockets a bit too complex for your needs? Enter Server-Sent Events (SSE) - a simpler alternative that's perfect for one-way server-to-client communication.In this guide, I'll walk you through implementing SSE using GoFrame, taking you from basic implementation all the way to production-ready code. Let's dive in!
  
  
  What are Server-Sent Events? 🤔
SSE is a standard that enables servers to push real-time updates to clients over HTTP. Unlike WebSocket, SSE:Is one-way (server to client only)Automatically reconnects if the connection is lostPerfect for: real-time notifications, live feeds, status updates, and monitoring dashboards!
  
  
  Getting Started: Basic SSE Implementation 🌱
Let's start with a simple example. Here's how to create your first SSE endpoint in GoFrame:And here's how to connect from the frontend:
  
  
  Real-World Examples: Let's Build Something Cool! 🛠️
Let's build something more practical - a real-time stock price feed:
  
  
  2. Real-time Chat Room Status 💬
Monitor active users and typing indicators in a chat room:
  
  
  3. System Monitoring Dashboard 📊
Monitor system metrics in real-time:
  
  
  4. Live Order Processing Status ⚡
Track order processing status in real-time:
  
  
  5. Live Sports Score Updates 🏆
Track live game scores and statistics:
  
  
  Making it Production-Ready 🛠️
Keep connections alive with periodic pings:Make your frontend resilient:
  
  
  3. Support Different Event Types 🔄
Handle various types of updates:For distributed systems, use Redis pub/sub to coordinate SSE messages:: When you have frequent updates, batch them together:
: Prevent server overload:
Implement event replay for clients that reconnect:
  
  
  Client Groups and Filtering
Implement client grouping for targeted updates:
  
  
  Rate Limiting and Throttling
Implement rate limiting for high-frequency updates:Use CORS headers in productionAdd authentication for sensitive dataMonitor connection counts and server resourcesTest with different network conditionsSSE is a powerful tool for real-time updates that's often overlooked in favor of WebSockets. For one-way communication, it's simpler, more lightweight, and works great with HTTP/2. With GoFrame, implementing SSE becomes even more straightforward and maintainable.Here's a quick checklist for your SSE implementation:✅ Basic SSE setup with proper headers✅ Error handling and connection management✅ Authentication and authorization✅ Security considerationsYou could extend this implementation by:Adding message persistenceImplementing message replayBuilding client librariesAdding WebSocket fallbackImplementing server-side filteringAdding message prioritizationHave you used SSE in your projects? What challenges did you face? Share your experiences in the comments below! 👇P.S. Want to see the complete code? Check out my GitHub repo [link to be added] for a production-ready implementation!If you found this helpful, follow me for more Go tutorials and real-world examples! ✨]]></content:encoded></item><item><title>Ask Slashdot: What Would It Take For You to Trust an AI?</title><link>https://ask.slashdot.org/story/25/02/15/2047258/ask-slashdot-what-would-it-take-for-you-to-trust-an-ai?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sun, 16 Feb 2025 02:34:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[Long-time Slashdot reader shanen has been testing AI clients. (They report that China's DeepSeek "turned out to be extremely good at explaining why I should not trust it. Every computer security problem I ever thought of or heard about and some more besides.") 

Then they wondered if there's also government censorship:

It's like the accountant who gets asked what 2 plus 2 is. After locking the doors and shading all the windows, the accountant whispers in your ear: "What do you want it to be...?" So let me start with some questions about DeepSeek in particular. Have you run it locally and compared the responses with the website's responses? My hypothesis is that your mileage should differ... 

It's well established that DeepSeek doesn't want to talk about many "political" topics. Is that based on a distorted model of the world? Or is the censorship implemented in the query interface after the model was trained? My hypothesis is that it must have been trained with lots of data because the cost of removing all of the bad stuff would have been prohibitive... Unless perhaps another AI filtered the data first? 
But their real question is: what would it take to trust an AI? "Trust" can mean different things, including data-collection policies. ("I bet most of you trust Amazon and Amazon's secret AIs more than you should..." shanen suggests.) Can you use an AI system without worrying about its data-retention policies?
 

And they also ask how many Slashdot readers have read Ken Thompson's "Reflections on Trusting Trust", which raises the question of whether you can ever trust code you didn't create yourself. So is there any way an AI system can assure you its answers are accurate and trustworthy, and that it's safe to use? Share your own thoughts and experiences in the comments. 
What would it take for you to trust an AI?]]></content:encoded></item><item><title>catchorg/Catch2</title><link>https://github.com/catchorg/Catch2</link><author></author><category>trending</category><pubDate>Sun, 16 Feb 2025 02:28:53 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[A modern, C++-native, test framework for unit-tests, TDD and BDD - using C++14, C++17 and later (C++11 support is in v2.x branch, and C++03 on the Catch1.x branch)Catch2 is mainly a unit testing framework for C++, but it also provides basic micro-benchmarking features, and simple BDD macros.Catch2's main advantage is that using it is both simple and natural. Test names do not have to be valid identifiers, assertions look like normal C++ boolean expressions, and sections provide a nice and local way to share set-up and tear-down code in tests.#include <catch2/catch_test_macros.hpp>

#include <cstdint>

uint32_t factorial( uint32_t number ) {
    return number <= 1 ? number : factorial(number-1) * number;
}

TEST_CASE( "Factorials are computed", "[factorial]" ) {
    REQUIRE( factorial( 1) == 1 );
    REQUIRE( factorial( 2) == 2 );
    REQUIRE( factorial( 3) == 6 );
    REQUIRE( factorial(10) == 3'628'800 );
}
#include <catch2/catch_test_macros.hpp>
#include <catch2/benchmark/catch_benchmark.hpp>

#include <cstdint>

uint64_t fibonacci(uint64_t number) {
    return number < 2 ? number : fibonacci(number - 1) + fibonacci(number - 2);
}

TEST_CASE("Benchmark Fibonacci", "[!benchmark]") {
    REQUIRE(fibonacci(5) == 5);

    REQUIRE(fibonacci(20) == 6'765);
    BENCHMARK("fibonacci 20") {
        return fibonacci(20);
    };

    REQUIRE(fibonacci(25) == 75'025);
    BENCHMARK("fibonacci 25") {
        return fibonacci(25);
    };
}
Note that benchmarks are not run by default, so you need to run it explicitly with the  tag.Catch2 v3 has been released!You are on the  branch, where the v3 version is being developed. v3 brings a bunch of significant changes, the big one being that Catch2 is no longer a single-header library. Catch2 now behaves as a normal library, with multiple headers and separately compiled implementation.The documentation is slowly being updated to take these changes into account, but this work is currently still ongoing.For migrating from the v2 releases to v3, you should look at our documentation. It provides a simple guidelines on getting started, and collects most common migration problems.This documentation comprises these three parts:]]></content:encoded></item><item><title>block/goose</title><link>https://github.com/block/goose</link><author></author><category>trending</category><pubDate>Sun, 16 Feb 2025 02:28:53 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[an open source, extensible AI agent that goes beyond code suggestions - install, execute, edit, and test with any LLMan open-source, extensible AI agent that goes beyond code suggestionsinstall, execute, edit, and test with any LLM]]></content:encoded></item><item><title>pointfreeco/swift-composable-architecture</title><link>https://github.com/pointfreeco/swift-composable-architecture</link><author></author><category>trending</category><pubDate>Sun, 16 Feb 2025 02:28:53 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[A library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind.The Composable Architecture (TCA, for short) is a library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind. It can be used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, iPadOS, visionOS, tvOS, and watchOS).What is the Composable Architecture?This library provides a few core tools that can be used to build applications of varying purpose and complexity. It provides compelling stories that you can follow to solve many problems you encounter day-to-day when building applications, such as: How to manage the state of your application using simple value types, and share state across many screens so that mutations in one screen can be immediately observed in another screen. How to break down large features into smaller components that can be extracted to their own, isolated modules and be easily glued back together to form the feature. How to let certain parts of the application talk to the outside world in the most testable and understandable way possible. How to not only test a feature built in the architecture, but also write integration tests for features that have been composed of many parts, and write end-to-end tests to understand how side effects influence your application. This allows you to make strong guarantees that your business logic is running in the way you expect. How to accomplish all of the above in a simple API with as few concepts and moving parts as possible.The Composable Architecture was designed over the course of many episodes on Point-Free, a video series exploring functional programming and the Swift language, hosted by Brandon Williams and Stephen Celis.You can watch all of the episodes here, as well as a dedicated, multipart tour of the architecture from scratch.This repo comes with  of examples to demonstrate how to solve common and complex problems with the Composable Architecture. Check out this directory to see them all, including:Looking for something more substantial? Check out the source code for isowords, an iOS word search game built in SwiftUI and the Composable Architecture.To build a feature using the Composable Architecture you define some types and values that model your domain:: A type that describes the data your feature needs to perform its logic and render its UI.: A type that represents all of the actions that can happen in your feature, such as user actions, notifications, event sources and more.: A function that describes how to evolve the current state of the app to the next state given an action. The reducer is also responsible for returning any effects that should be run, such as API requests, which can be done by returning an  value.: The runtime that actually drives your feature. You send all user actions to the store so that the store can run the reducer and effects, and you can observe state changes in the store so that you can update UI.The benefits of doing this are that you will instantly unlock testability of your feature, and you will be able to break large, complex features into smaller domains that can be glued together.As a basic example, consider a UI that shows a number along with "+" and "−" buttons that increment and decrement the number. To make things interesting, suppose there is also a button that when tapped makes an API request to fetch a random fact about that number and displays it in the view.To implement this feature we create a new type that will house the domain and behavior of the feature, and it will be annotated with the  macro:import ComposableArchitecture

@Reducer
struct Feature {
}
In here we need to define a type for the feature's state, which consists of an integer for the current count, as well as an optional string that represents the fact being presented:@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable {
    var count = 0
    var numberFact: String?
  }
}
[!Note] We've applied the  macro to  in order to take advantage of the observation tools in the library.We also need to define a type for the feature's actions. There are the obvious actions, such as tapping the decrement button, increment button, or fact button. But there are also some slightly non-obvious ones, such as the action that occurs when we receive a response from the fact API request:@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable { /* ... */ }
  enum Action {
    case decrementButtonTapped
    case incrementButtonTapped
    case numberFactButtonTapped
    case numberFactResponse(String)
  }
}
And then we implement the  property, which is responsible for composing the actual logic and behavior for the feature. In it we can use the  reducer to describe how to change the current state to the next state, and what effects need to be executed. Some actions don't need to execute effects, and they can return  to represent that:@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable { /* ... */ }
  enum Action { /* ... */ }

  var body: some Reducer<State, Action> {
    Reduce { state, action in
      switch action {
      case .decrementButtonTapped:
        state.count -= 1
        return .none

      case .incrementButtonTapped:
        state.count += 1
        return .none

      case .numberFactButtonTapped:
        return .run { [count = state.count] send in
          let (data, _) = try await URLSession.shared.data(
            from: URL(string: "http://numbersapi.com/\(count)/trivia")!
          )
          await send(
            .numberFactResponse(String(decoding: data, as: UTF8.self))
          )
        }

      case let .numberFactResponse(fact):
        state.numberFact = fact
        return .none
      }
    }
  }
}
And then finally we define the view that displays the feature. It holds onto a  so that it can observe all changes to the state and re-render, and we can send all user actions to the store so that state changes:struct FeatureView: View {
  let store: StoreOf<Feature>

  var body: some View {
    Form {
      Section {
        Text("\(store.count)")
        Button("Decrement") { store.send(.decrementButtonTapped) }
        Button("Increment") { store.send(.incrementButtonTapped) }
      }

      Section {
        Button("Number fact") { store.send(.numberFactButtonTapped) }
      }
      
      if let fact = store.numberFact {
        Text(fact)
      }
    }
  }
}
It is also straightforward to have a UIKit controller driven off of this store. You can observe state changes in the store in , and then populate the UI components with data from the store. The code is a bit longer than the SwiftUI version, so we have collapsed it here:Once we are ready to display this view, for example in the app's entry point, we can construct a store. This can be done by specifying the initial state to start the application in, as well as the reducer that will power the application:import ComposableArchitecture

@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature()
        }
      )
    }
  }
}
And that is enough to get something on the screen to play around with. It's definitely a few more steps than if you were to do this in a vanilla SwiftUI way, but there are a few benefits. It gives us a consistent manner to apply state mutations, instead of scattering logic in some observable objects and in various action closures of UI components. It also gives us a concise way of expressing side effects. And we can immediately test this logic, including the effects, without doing much additional work.[!Note] For more in-depth information on testing, see the dedicated testing article.To test use a , which can be created with the same information as the , but it does extra work to allow you to assert how your feature evolves as actions are sent:@Test
func basics() async {
  let store = TestStore(initialState: Feature.State()) {
    Feature()
  }
}
Once the test store is created we can use it to make an assertion of an entire user flow of steps. Each step of the way we need to prove that state changed how we expect. For example, we can simulate the user flow of tapping on the increment and decrement buttons:// Test that tapping on the increment/decrement buttons changes the count
await store.send(.incrementButtonTapped) {
  $0.count = 1
}
await store.send(.decrementButtonTapped) {
  $0.count = 0
}
Further, if a step causes an effect to be executed, which feeds data back into the store, we must assert on that. For example, if we simulate the user tapping on the fact button we expect to receive a fact response back with the fact, which then causes the  state to be populated:await store.send(.numberFactButtonTapped)

await store.receive(\.numberFactResponse) {
  $0.numberFact = ???
}
However, how do we know what fact is going to be sent back to us?Currently our reducer is using an effect that reaches out into the real world to hit an API server, and that means we have no way to control its behavior. We are at the whims of our internet connectivity and the availability of the API server in order to write this test.It would be better for this dependency to be passed to the reducer so that we can use a live dependency when running the application on a device, but use a mocked dependency for tests. We can do this by adding a property to the  reducer:@Reducer
struct Feature {
  let numberFact: (Int) async throws -> String
  // ...
}
Then we can use it in the  implementation:case .numberFactButtonTapped:
  return .run { [count = state.count] send in 
    let fact = try await self.numberFact(count)
    await send(.numberFactResponse(fact))
  }
And in the entry point of the application we can provide a version of the dependency that actually interacts with the real world API server:@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature(
            numberFact: { number in
              let (data, _) = try await URLSession.shared.data(
                from: URL(string: "http://numbersapi.com/\(number)")!
              )
              return String(decoding: data, as: UTF8.self)
            }
          )
        }
      )
    }
  }
}
But in tests we can use a mock dependency that immediately returns a deterministic, predictable fact:@Test
func basics() async {
  let store = TestStore(initialState: Feature.State()) {
    Feature(numberFact: { "\($0) is a good number Brent" })
  }
}
With that little bit of upfront work we can finish the test by simulating the user tapping on the fact button, and then receiving the response from the dependency to present the fact:await store.send(.numberFactButtonTapped)

await store.receive(\.numberFactResponse) {
  $0.numberFact = "0 is a good number Brent"
}
We can also improve the ergonomics of using the  dependency in our application. Over time the application may evolve into many features, and some of those features may also want access to , and explicitly passing it through all layers can get annoying. There is a process you can follow to “register” dependencies with the library, making them instantly available to any layer in the application.[!Note] For more in-depth information on dependency management, see the dedicated dependencies article.We can start by wrapping the number fact functionality in a new type:struct NumberFactClient {
  var fetch: (Int) async throws -> String
}
And then registering that type with the dependency management system by conforming the client to the  protocol, which requires you to specify the live value to use when running the application in simulators or devices:extension NumberFactClient: DependencyKey {
  static let liveValue = Self(
    fetch: { number in
      let (data, _) = try await URLSession.shared
        .data(from: URL(string: "http://numbersapi.com/\(number)")!
      )
      return String(decoding: data, as: UTF8.self)
    }
  )
}

extension DependencyValues {
  var numberFact: NumberFactClient {
    get { self[NumberFactClient.self] }
    set { self[NumberFactClient.self] = newValue }
  }
}
With that little bit of upfront work done you can instantly start making use of the dependency in any feature by using the  property wrapper: @Reducer
 struct Feature {
-  let numberFact: (Int) async throws -> String
+  @Dependency(\.numberFact) var numberFact
   
   …

-  try await self.numberFact(count)
+  try await self.numberFact.fetch(count)
 }
This code works exactly as it did before, but you no longer have to explicitly pass the dependency when constructing the feature's reducer. When running the app in previews, the simulator or on a device, the live dependency will be provided to the reducer, and in tests the test dependency will be provided.This means the entry point to the application no longer needs to construct dependencies:@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature()
        }
      )
    }
  }
}
And the test store can be constructed without specifying any dependencies, but you can still override any dependency you need to for the purpose of the test:let store = TestStore(initialState: Feature.State()) {
  Feature()
} withDependencies: {
  $0.numberFact.fetch = { "\($0) is a good number Brent" }
}

// ...
That is the basics of building and testing a feature in the Composable Architecture. There are  more things to be explored, such as composition, modularity, adaptability, and complex effects. The Examples directory has a bunch of projects to explore to see more advanced usages.The documentation for releases and  are available here:There are a number of articles in the documentation that you may find helpful as you become more comfortable with the library:If you want to discuss the Composable Architecture or have a question about how to use it to solve a particular problem, there are a number of places you can discuss with fellow Point-Free enthusiasts:You can add ComposableArchitecture to an Xcode project by adding it as a package dependency.From the  menu, select Add Package Dependencies...Depending on how your project is structured: 
  If you have a single application target that needs access to the library, then add  directly to your application.If you want to use this library from multiple Xcode targets, or mix Xcode targets and SPM targets, you must create a shared framework that depends on  and then depend on that framework in all of your targets. For an example of this, check out the Tic-Tac-Toe demo application, which splits lots of features into modules and consumes the static library in this fashion using the  Swift package.The Composable Architecture is built with extensibility in mind, and there are a number of community-supported libraries available to enhance your applications:If you'd like to contribute a library, please open a PR with a link to it!The following translations of this README have been contributed by members of the community:If you'd like to contribute a translation, please open a PR with a link to a Gist!We have a dedicated article for all of the most frequently asked questions and comments people have concerning the library.The following people gave feedback on the library at its early stages and helped make the library what it is today:Paul Colton, Kaan Dedeoglu, Matt Diephouse, Josef Doležal, Eimantas, Matthew Johnson, George Kaimakas, Nikita Leonov, Christopher Liscio, Jeffrey Macko, Alejandro Martinez, Shai Mishali, Willis Plummer, Simon-Pierre Roy, Justin Price, Sven A. Schmidt, Kyle Sherman, Petr Šíma, Jasdev Singh, Maxim Smirnov, Ryan Stone, Daniel Hollis Tavares, and all of the Point-Free subscribers 😁.Special thanks to Chris Liscio who helped us work through many strange SwiftUI quirks and helped refine the final API.And thanks to Shai Mishali and the CombineCommunity project, from which we took their implementation of , which we use in  to help bridge delegate and callback-based APIs, making it much easier to interface with 3rd party frameworks.The Composable Architecture was built on a foundation of ideas started by other libraries, in particular Elm and Redux.There are also many architecture libraries in the Swift and iOS community. Each one of these has their own set of priorities and trade-offs that differ from the Composable Architecture.This library is released under the MIT license. See LICENSE for details.]]></content:encoded></item><item><title>nocodb/nocodb</title><link>https://github.com/nocodb/nocodb</link><author></author><category>trending</category><pubDate>Sun, 16 Feb 2025 02:28:53 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[🔥 🔥 🔥 Open Source Airtable Alternative NocoDB is the fastest and easiest way to build databases online. docker run -d \
  --name noco \
  -v "$(pwd)"/nocodb:/usr/app/data/ \
  -p 8080:8080 \
  nocodb/nocodb:latest
docker run -d \
  --name noco \
  -v "$(pwd)"/nocodb:/usr/app/data/ \
  -p 8080:8080 \
  -e NC_DB="pg://host.docker.internal:5432?u=root&p=password&d=d1" \
  -e NC_AUTH_JWT_SECRET="569a1821-0a93-45e8-87ab-eb857f20a010" \
  nocodb/nocodb:latest
nix run github:nocodb/nocodb
To use NocoDB as a NixOS module, a flake.nix would be as follows:{
  description = "Bane's NixOS configuration";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    nocodb.url = "github:nocodb/nocodb";
  };

  outputs = inputs@{ nixpkgs, nocodb, ... }: {
    nixosConfigurations = {
      hostname = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          ./configuration.nix
          nocodb.nixosModules.nocodb

          {
            services.nocodb.enable = true;
          }
        ];
      };
    };
  };
}
Auto-upstall is a single command that sets up NocoDB on a server for production usage. Behind the scenes it auto-generates docker-compose for you.bash <(curl -sSL http://install.nocodb.com/noco.sh) <(mktemp)
Auto-upstall does the following: 🕊🐳 Automatically installs all pre-requisites like docker, docker-compose🚀 Automatically installs NocoDB with PostgreSQL, Redis, Minio, Traefik gateway using Docker Compose. 🐘 🗄️ 🌐🔄 Automatically upgrades NocoDB to the latest version when you run the command again.🔒 Automatically setups SSL and also renews it. Needs a domain or subdomain as input while installation.Binaries are only for quick testing locally.curl http://get.nocodb.com/macos-arm64 -o nocodb -L && chmod +x nocodb && ./nocodbcurl http://get.nocodb.com/macos-x64 -o nocodb -L && chmod +x nocodb && ./nocodbcurl http://get.nocodb.com/linux-arm64 -o nocodb -L && chmod +x nocodb && ./nocodbcurl http://get.nocodb.com/linux-x64 -o nocodb -L && chmod +x nocodb && ./nocodbiwr http://get.nocodb.com/win-arm64.exe -OutFile Noco-win-arm64.exe && .\Noco-win-arm64.exeiwr http://get.nocodb.com/win-x64.exe -OutFile Noco-win-x64.exe && .\Noco-win-x64.exeFor more installation methods, please refer to our docsRich Spreadsheet Interface⚡  Basic Operations: Create, Read, Update and Delete Tables, Columns, and Rows⚡  Fields Operations: Sort, Filter, Group, Hide / Unhide Columns⚡  Multiple Views Types: Grid (By default), Gallery, Form, Kanban and Calendar View⚡  View Permissions Types: Collaborative Views, & Locked Views⚡  Share Bases / Views: either Public or Private (with Password Protected)⚡  Variant Cell Types: ID, Links, Lookup, Rollup, SingleLineText, Attachment, Currency, Formula, User, etc⚡  Access Control with Roles: Fine-grained Access Control at different levelsApp Store for Workflow AutomationsWe provide different integrations in three main categories. See App Store for details.⚡  Chat: Slack, Discord, Mattermost, and etc⚡  Email: AWS SES, SMTP, MailerSend, and etc⚡  Storage: AWS S3, Google Cloud Storage, Minio, and etcWe provide the following ways to let users programmatically invoke actions. You can use a token (either JWT or Social Auth) to sign your requests for authorization to NocoDB.Most internet businesses equip themselves with either spreadsheet or a database to solve their business needs. Spreadsheets are used by Billion+ humans collaboratively every single day. However, we are way off working at similar speeds on databases which are way more powerful tools when it comes to computing. Attempts to solve this with SaaS offerings have meant horrible access controls, vendor lock-in, data lock-in, abrupt price changes & most importantly a glass ceiling on what's possible in the future.Our mission is to provide the most powerful no-code interface for databases that is open source to every single internet business in the world. This would not only democratise access to a powerful computing tool but also bring forth a billion+ people who will have radical tinkering-and-building abilities on the internet. This project is licensed under AGPLv3. Thank you for your contributions! We appreciate all the contributions from the community.]]></content:encoded></item><item><title>vercel/ai-chatbot</title><link>https://github.com/vercel/ai-chatbot</link><author></author><category>trending</category><pubDate>Sun, 16 Feb 2025 02:28:53 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[A full-featured, hackable Next.js AI chatbot built by Vercel An Open-Source AI Chatbot Template Built With Next.js and the AI SDK by Vercel. Next.js App Router 
  Advanced routing for seamless navigation and performanceReact Server Components (RSCs) and Server Actions for server-side rendering and increased performanceAI SDKUnified API for generating text, structured objects, and tool calls with LLMsHooks for building dynamic chat and generative user interfacesSupports OpenAI (default), Anthropic, Cohere, and other model providersYou can deploy your own version of the Next.js AI Chatbot to Vercel with one click:Note: You should not commit your  file or it will expose secrets that will allow others to control access to your various OpenAI and authentication provider accounts.Install Vercel CLI: Link local instance with Vercel and GitHub accounts (creates  directory): Download your environment variables: ]]></content:encoded></item><item><title>datawhalechina/llm-cookbook</title><link>https://github.com/datawhalechina/llm-cookbook</link><author></author><category>trending</category><pubDate>Sun, 16 Feb 2025 02:28:53 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[面向开发者的 LLM 入门教程，吴恩达大模型系列课程中文版本项目是一个面向开发者的大模型手册，针对国内开发者的实际需求，主打 LLM 全方位入门实践。本项目基于吴恩达老师大模型系列课程内容，对原课程内容进行筛选、翻译、复现和调优，覆盖从 Prompt Engineering 到 RAG 开发、模型微调的全部流程，用最适合国内学习者的方式，指导国内开发者如何学习、入门 LLM 相关项目。针对不同内容的特点，我们对共计 11 门吴恩达老师的大模型课程进行了翻译复现，并结合国内学习者的实际情况，对不同课程进行了分级和排序，初学者可以先系统学习我们的必修类课程，掌握入门 LLM 所有方向都需要掌握的基础技能和概念，再选择性地学习我们的选修类课程，在自己感兴趣的方向上不断探索和学习。如果有你非常喜欢但我们还没有进行复现的吴恩达老师大模型课程，我们欢迎每一位开发者参考我们已有课程的格式和写法来对课程进行复现并提交 PR，在 PR 审核通过后，我们会根据课程内容将课程进行分级合并。欢迎每一位开发者的贡献！LLM 正在逐步改变人们的生活，而对于开发者，如何基于 LLM 提供的 API 快速、便捷地开发一些具备更强能力、集成LLM 的应用，来便捷地实现一些更新颖、更实用的能力，是一个急需学习的重要能力。由吴恩达老师与 OpenAI 合作推出的大模型系列教程，从大模型时代开发者的基础技能出发，深入浅出地介绍了如何基于大模型 API、LangChain 架构快速开发结合大模型强大能力的应用。其中，《Prompt Engineering for Developers》教程面向入门 LLM 的开发者，深入浅出地介绍了对于开发者，如何构造 Prompt 并基于 OpenAI 提供的 API 实现包括总结、推断、转换等多种常用功能，是入门 LLM 开发的经典教程；《Building Systems with the ChatGPT API》教程面向想要基于 LLM 开发应用程序的开发者，简洁有效而又系统全面地介绍了如何基于 ChatGPT API 打造完整的对话系统；《LangChain for LLM Application Development》教程结合经典大模型开源框架 LangChain，介绍了如何基于 LangChain 框架开发具备实用功能、能力全面的应用程序，《LangChain Chat With Your Data》教程则在此基础上进一步介绍了如何使用 LangChain 架构结合个人私有数据开发个性化大模型应用；《Building Generative AI Applications with Gradio》、《Evaluating and Debugging Generative AI》教程分别介绍了两个实用工具 Gradio 与 W&B，指导开发者如何结合这两个工具来打造、评估生成式 AI 应用。上述教程非常适用于开发者学习以开启基于 LLM 实际搭建应用程序之路。因此，我们将该系列课程翻译为中文，并复现其范例代码，也为其中一个视频增加了中文字幕，支持国内中文学习者直接使用，以帮助中文学习者更好地学习 LLM 开发；我们也同时实现了效果大致相当的中文 Prompt，支持学习者感受中文语境下 LLM 的学习使用，对比掌握多语言语境下的 Prompt 设计与 LLM 开发。未来，我们也将加入更多 Prompt 高级技巧，以丰富本课程内容，帮助开发者掌握更多、更巧妙的 Prompt 技能。所有具备基础 Python 能力，想要入门 LLM 的开发者。《ChatGPT Prompt Engineering for Developers》、《Building Systems with the ChatGPT API》等教程作为由吴恩达老师与 OpenAI 联合推出的官方教程，在可预见的未来会成为 LLM 的重要入门教程，但是目前还只支持英文版且国内访问受限，打造中文版且国内流畅访问的教程具有重要意义；同时，GPT 对中文、英文具有不同的理解能力，本教程在多次对比、实验之后确定了效果大致相当的中文 Prompt，支持学习者研究如何提升 ChatGPT 在中文语境下的理解与生成能力。本教程适用于所有具备基础 Python 能力，想要入门 LLM 的开发者。至少一个 LLM API（最好是 OpenAI，如果是其他 API，你可能需要参考其他教程对 API 调用代码进行修改）能够使用 Python Jupyter Notebook本教程共包括 11 门课程，分为必修类、选修类两个类别。必修类课程是我们认为最适合初学者学习以入门 LLM 的课程，包括了入门 LLM 所有方向都需要掌握的基础技能和概念，我们也针对必修类课程制作了适合阅读的在线阅读和 PDF 版本，在学习必修类课程时，我们建议学习者按照我们列出的顺序进行学习；选修类课程是在必修类课程上的拓展延伸，包括了 RAG 开发、模型微调、模型评估等多个方面，适合学习者在掌握了必修类课程之后选择自己感兴趣的方向和课程进行学习。面向开发者的 Prompt Engineering。基于吴恩达老师《ChatGPT Prompt Engineering for Developers》课程打造，面向入门 LLM 的开发者，深入浅出地介绍了对于开发者，如何构造 Prompt 并基于 OpenAI 提供的 API 实现包括总结、推断、转换等多种常用功能，是入门 LLM 开发的第一步。搭建基于 ChatGPT 的问答系统。基于吴恩达老师《Building Systems with the ChatGPT API》课程打造，指导开发者如何基于 ChatGPT 提供的 API 开发一个完整的、全面的智能问答系统。通过代码实践，实现了基于 ChatGPT 开发问答系统的全流程，介绍了基于大模型开发的新范式，是大模型开发的实践基础。使用 LangChain 开发应用程序。基于吴恩达老师《LangChain for LLM Application Development》课程打造，对 LangChain 展开深入介绍，帮助学习者了解如何使用 LangChain，并基于 LangChain 开发完整的、具备强大能力的应用程序。使用 LangChain 访问个人数据。基于吴恩达老师《LangChain Chat with Your Data》课程打造，深入拓展 LangChain 提供的个人数据访问能力，指导开发者如何使用 LangChain 开发能够访问用户个人数据、提供个性化服务的大模型应用。使用 Gradio 搭建生成式 AI 应用。基于吴恩达老师《Building Generative AI Applications with Gradio》课程打造，指导开发者如何使用 Gradio 通过 Python 接口程序快速、高效地为生成式 AI 构建用户界面。评估改进生成式 AI。基于吴恩达老师《Evaluating and Debugging Generative AI》课程打造，结合 wandb，提供一套系统化的方法和工具，帮助开发者有效地跟踪和调试生成式 AI 模型。微调大语言模型。基于吴恩达老师《Finetuning Large Language Model》课程打造，结合 lamini 框架，讲述如何便捷高效地在本地基于个人数据微调开源大语言模型。大模型与语义检索。基于吴恩达老师《Large Language Models with Semantic Search》课程打造，针对检索增强生成，讲述了多种高级检索技巧以实现更准确、高效的检索增强 LLM 生成效果。基于 Chroma 的高级检索。基于吴恩达老师《Advanced Retrieval for AI with Chroma》课程打造，旨在介绍基于 Chroma 的高级检索技术，提升检索结果的准确性。搭建和评估高级 RAG 应用。基于吴恩达老师《Building and Evaluating Advanced RAG Applications》课程打造，介绍构建和实现高质量RAG系统所需的关键技术和评估框架。LangChain 的 Functions、Tools 和 Agents。基于吴恩达老师《Functions, Tools and Agents with LangChain》课程打造，介绍如何基于 LangChain 的新语法构建 Agent。Prompt 高级技巧。包括 CoT、自我一致性等多种 Prompt 高级技巧的基础理论与代码实现。content：基于原课程复现的双语版代码，可运行的 Notebook，更新频率最高，更新速度最快。

docs：必修类课程文字教程版在线阅读源码，适合阅读的 md。

figures：图片文件。
高立业（内容创作者-DataWhale成员-算法工程师）陈逸涵 (内容创作者-Datawhale意向成员-AI爱好者)曾浩龙（内容创作者-Datawhale 意向成员-JLU AI 研究生） Datawhale 是一个专注于数据科学与 AI 领域的开源组织，汇集了众多领域院校和知名企业的优秀学习者，聚合了一群有开源精神和探索精神的团队成员。微信搜索公众号Datawhale可以加入我们。 
]]></content:encoded></item><item><title>FujiwaraChoki/MoneyPrinterV2</title><link>https://github.com/FujiwaraChoki/MoneyPrinterV2</link><author></author><category>trending</category><pubDate>Sun, 16 Feb 2025 02:28:53 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[Automate the process of making money online.An Application that automates the process of making money online. MPV2 (MoneyPrinter Version 2) is, as the name suggests, the second version of the MoneyPrinter project. It is a complete rewrite of the original project, with a focus on a wider range of features and a more modular architecture. MPV2 needs Python 3.9 to function effectively. Watch the YouTube video hereMoneyPrinter has different versions for multiple languages developed by the community for the community. Here are some known versions:If you would like to submit your own version/fork of MoneyPrinter, please open an issue describing the changes you made to the fork.⚠️ If you are planning to reach out to scraped businesses per E-Mail, please first install the Go Programming Language.git clone https://github.com/FujiwaraChoki/MoneyPrinterV2.git

cd MoneyPrinterV2
# Copy Example Configuration and fill out values in config.json
cp config.example.json config.json

# Create a virtual environment
python -m venv venv

# Activate the virtual environment - Windows
.\venv\Scripts\activate

# Activate the virtual environment - Unix
source venv/bin/activate

# Install the requirements
pip install -r requirements.txt
# Run the application
python src/main.py
All relevant document can be found here.For easier usage, there are some scripts in the  directory, that can be used to directly access the core functionality of MPV2, without the need of user interaction.All scripts need to be run from the root directory of the project, e.g. bash scripts/upload_video.sh.Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. Check out docs/Roadmap.md for a list of features that need to be implemented.Please read CODE_OF_CONDUCT.md for details on our code of conduct, and the process for submitting pull requests to us.MoneyPrinterV2 is licensed under Affero General Public License v3.0. See LICENSE for more information.This project is for educational purposes only. The author will not be responsible for any misuse of the information provided. All the information on this website is published in good faith and for general information purpose only. The author does not make any warranties about the completeness, reliability, and accuracy of this information. Any action you take upon the information you find on this website (FujiwaraChoki/MoneyPrinterV2), is strictly at your own risk. The author will not be liable for any losses and/or damages in connection with the use of our website.]]></content:encoded></item><item><title>wger-project/wger</title><link>https://github.com/wger-project/wger</link><author></author><category>trending</category><pubDate>Sun, 16 Feb 2025 02:28:53 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[Self hosted FLOSS fitness/workout, nutrition and weight trackerwger (ˈvɛɡɐ) Workout Manager is a free, open source web application that helps you manage your personal workouts, weight and diet plans and can also be used as a simple gym management utility. It offers a REST API as well, for easy integration with other projects and tools.Production with docker composeIf you want to host your own instance, take a look at the provided docker compose file. This config will persist your database and uploaded images:If you just want to try it out:    docker run -ti --name wger.demo --publish 8000:80 wger/demo
Please note that this image will not persist any data and overwrite your database when you pull a new version, it is only intended as an easy to setup demoFeel free to contact us if you found this useful or if there was something that didn't behave as you expected. We can't fix what we don't know about, so please report liberally. If you're not sure if something is a bug or not, feel free to file a bug anyway.All the code and the content is available on github:Translate the app to your language on Weblate.The application is licensed under the Affero GNU General Public License 3 or later (AGPL 3+).The initial exercise and ingredient data is licensed additionally under one of the Creative Commons licenses, see the individual exercises for more details.The documentation is released under a CC-BY-SA: either version 4 of the License, or (at your option) any later version.Some images were taken from Wikipedia, see the SOURCES file in their respective folders for more details.]]></content:encoded></item><item><title>souzatharsis/podcastfy</title><link>https://github.com/souzatharsis/podcastfy</link><author></author><category>trending</category><pubDate>Sun, 16 Feb 2025 02:28:53 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[An Open Source Python alternative to NotebookLM's podcast feature: Transforming Multimodal Content into Captivating Multilingual Audio Conversations with GenAIPodcastfy is an open-source Python package that transforms multi-modal content (text, images) into engaging, multi-lingual audio conversations using GenAI. Input content includes websites, PDFs, images, YouTube videos, as well as user provided topics.Unlike closed-source UI-based tools focused primarily on research synthesis (e.g. NotebookLM ❤️), Podcastfy focuses on open source, programmatic and bespoke generation of engaging, conversational content from a multitude of multi-modal sources, enabling customization and scale."Love that you casually built an open source version of the most popular product Google built in the last decade""Loving this initiative and the best I have seen so far especially for a 'non-techie' user.""Your library was very straightforward to work with. You did Amazing work brother 🙏""I think it's awesome that you were inspired/recognize how hard it is to beat NotebookLM's quality, but you did an  job with this! It sounds incredible, and it's open-source! Thank you for being amazing!"Sample 1: Senecio, 1922 (Paul Klee) and Connection of Civilizations (2017) by Gheorghe VirtosuSample 2: The Great Wave off Kanagawa, 1831 (Hokusai) and Takiyasha the Witch and the Skeleton Spectre, c. 1844 (Kuniyoshi)Sample 3: Pop culture icon Taylor Swift and Mona Lisa, 1503 (Leonardo da Vinci)Lex Fridman Podcast: 5h interview with Dario Amodei Anthropic's CEOBenjamin Franklin's AutobiographyElection polls in São Paulo (for audio processing)Install from PyPI from podcastfy.client import generate_podcast

audio_file = generate_podcast(urls=["<url1>", "<url2>"])
python -m podcastfy.client --url <url1> --url <url2>
Podcastfy offers a range of customization options to tailor your AI-generated podcasts:Generate conversational content from multiple sources and formats (images, text, websites, YouTube, and PDFs).Generate shorts (2-5 minutes) or longform (30+ minutes) podcasts.Customize transcript and audio generation (e.g., style, language, structure).Generate transcripts using 100+ LLM models (OpenAI, Anthropic, Google etc).Leverage local LLMs for transcript generation for increased privacy and control.Integrate with advanced text-to-speech models (OpenAI, Google, ElevenLabs, and Microsoft Edge).Provide multi-language support for global content creation.Integrate seamlessly with CLI and Python packages for automated workflows.Released new Multi-Speaker TTS model (is it the one NotebookLM uses?!?)Generate short or longform podcastsGenerate podcasts from input topic using grounded real-time web searchIntegrate with 100+ LLM models (OpenAI, Anthropic, Google etc) for transcript generationThis software is licensed under Apache 2.0. See instructions if you would like to use podcastfy in your software.We welcome contributions! See Guidelines for more details. can use  to convert blog posts, articles, or multimedia content into podcast-style audio, enabling them to reach broader audiences. By transforming content into an audio format, creators can cater to users who prefer listening over reading. can transform lecture notes, presentations, and visual materials into audio conversations, making educational content more accessible to students with different learning preferences. This is particularly beneficial for students with visual impairments or those who have difficulty processing written information. can convert research papers, visual data, and technical content into conversational audio. This makes it easier for a wider audience, including those with disabilities, to consume and understand complex scientific information. Researchers can also create audio summaries of their work to enhance accessibility. can use  to promote digital accessibility by providing a tool that converts multimodal content into auditory formats. This helps individuals with visual impairments, dyslexia, or other disabilities that make it challenging to consume written or visual content.]]></content:encoded></item><item><title>tpn/pdfs</title><link>https://github.com/tpn/pdfs</link><author></author><category>trending</category><pubDate>Sun, 16 Feb 2025 02:28:53 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[Technically-oriented PDF Collection (Papers, Specs, Decks, Manuals, etc)]]></content:encoded></item><item><title>How Medical Research Cuts Would Hit Colleges and Hospitals in Every State</title><link>https://www.nytimes.com/interactive/2025/02/13/upshot/nih-trump-funding-cuts.html</link><author>erickhill</author><category>hn</category><pubDate>Sun, 16 Feb 2025 02:07:25 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[A proposal by the Trump administration to reduce the size of grants for institutions conducting medical research would have far-reaching effects, and not just for elite universities and the coastal states where many are located.Also at risk could be grants from the National Institutes of Health to numerous hospitals that conduct clinical research on major diseases, and to state universities across the country. North Carolina, Missouri and Pennsylvania could face disproportionate losses, because of the concentration of medical research in those states.Based on spending in the 2024 fiscal year.In the 2024 fiscal year, the N.I.H. spent at least $32 billion on nearly 60,000 grants, including medical research in areas like cancer, genetics and infectious disease. Of that, $23 billion went to “direct” research costs, such as microscopes and researchers’ salaries, according to an Upshot analysis of N.I.H. grant data.The other $9 billion went to the institutions’ overhead, or “indirect costs,” which can include laboratory upkeep, utility bills, administrative staff and access to hazardous materials disposal, all of which research institutions say is essential to making research possible.The N.I.H. proposal, which has been put on hold by a federal court, aims to reduce funding for those indirect costs to a set 15 percent rate that the administration says would save about $4 billion a year. The Upshot analysis estimates that a 15 percent rate would have reduced funding for the grants that received N.I.H. support in 2024 by at least $5 billion. The White House said the savings would be reinvested in more research, but the rate cuts would open up sizable budget holes in most projects at research institutions.It is not clear whether those organizations can fill the gaps with other funding sources or by shifting how they apply for grants. Instead, many officials at universities and hospitals have said that they may have to pull back on medical or scientific research.“It’s not an overstatement to say that a slash this drastic in total research funding slows research,” said Heather Pierce, senior director for science policy at the Association of American Medical Colleges, which has sued along with other education and hospital associations to block the policy. And slower scientific progress, she said, would affect anyone who depends on the development of new treatments, medical interventions and diagnostic tools.We estimate that virtually all universities and hospitals would see fewer funds on similar projects in the future. The 10 institutions that receive the most money from N.I.H. stand to lose more than $100 million per year on average.To understand how the change would work, let’s look at one grant for about $600,000 sent last year to the University of Alabama at Birmingham to study whether exercise can improve memory for people with epilepsy.The calculation above, which we have repeated for every grant paid last year, is a bit simplified. In reality, the researchers would lose even more money than we’ve shown, because of the way indirect funding is calculated (see our methodology at the bottom of this article).Our analysis also makes some other conservative assumptions given the policy’s uncertainty. We assume, for instance, that the new 15 percent rate is a flat rate that all grantees would receive, and not a maximum rate (a distinction left unclear in the N.I.H. guidance). We also assume that the change applies not just to institutions of higher education, but also to all kinds of grantees, including hospitals.In a statement, the White House indicated it would reserve any savings for additional research grants. “Contrary to the hysteria, redirecting billions of allocated N.I.H. spending away from administrative bloat means there will be more money and resources available for legitimate scientific research, not less,” said Kush Desai, a White House spokesman.The N.I.H. announcement, however, coincides with the Trump administration’s moves to cut spending across the government, and with the N.I.H.’s withholding of funding for grants — their direct and indirect costs alike — in apparent conflictwith separate court orders.The N.I.H. guidance document includes a number of conflicting statements and statistics the Upshot could not reconcile. The N.I.H. also declined to answer questions about the policy and about its public-facing data tracking grant spending.The N.I.H. since 1950 has provided these overhead funds in a formulaic way, and since 1965, the government has used a rate individually calculated for each institution. Federal officials review cost summaries, floor plans and other information to determine that rate. That number can be higher for institutions in more expensive parts of the country, or for those that use more energy-intensive equipment. The proposal from the Trump administration would set aside those differences in standardizing the rate at 15 percent for every grantee.The lists below estimate what would have happened to the 10 universities and hospitals that received the most N.I.H. grant money in the 2024 fiscal year, if the formula change had been in effect then.Largest N.I.H. grant recipients among colleges, universities and medical schoolsUniversity of California, San FranciscoUniversity of PennsylvaniaColumbia University Health SciencesSource: National Institutes of HealthBased on spending in the 2024 fiscal year.Largest N.I.H. grant recipients among hospitalsMassachusetts General HospitalVanderbilt University Medical CenterBrigham and Women’s HospitalBoston Children’s HospitalUniversity of Texas MD Anderson Cancer CenterChildren’s Hospital of PhiladelphiaDana-Farber Cancer InstituteCincinnati Childrens Hospital Medical CenterBeth Israel Deaconess Medical CenterCedars-Sinai Medical CenterSource: National Institutes of HealthBased on spending in the 2024 fiscal year, which extends from Oct. 1 to Sept. 30.If courts allow the change to move forward, some of its consequences are hard to predict.Advocates for the policy change note that these organizations receive numerous other federal subsidies. Most universities and research hospitals are nonprofits that pay no federal taxes, for example. The N.I.H. announcement also noted that these same institutions often accept grants from charitable foundations that offer much lower overhead rates than the federal government, a signal that universities and hospitals willingly pursue research opportunities with less supplemental funding.Because the indirect payments are based on broad formulas and not specific line items, critics say institutions may be diverting these federal dollars into unaccountable funds to pay for programs that taxpayers can’t see, such as the kinds of diversity, equity and inclusion programs targeted by the Trump administration.“That’s how you get things like the ability of administrators to use larger overhead pools of money to build out D.E.I. bureaucracies, or to fund Ph.D. programs in the humanities,” said Jay Greene, a senior research fellow in the Center for Education Policy at the Heritage Foundation, a conservative research group. Mr. Greene was the coauthor of a 2022 article urging the N.I.H. to cut or eliminate indirect grant funding. But he did not have specific examples to cite of research funds being spent in this way.Researchers say the indirect funds have a branding problem, but are a necessary component of research.“The term ‘indirect costs’ or the alternative term ‘overhead’ sounds dangerously close to ‘slush fund’ to some people,” said Jeremy Berg, who was the director of the National Institute of General Medical Sciences at the N.I.H. from 2003 to 2011. “There are real costs somebody has to pay for, and heating and cooling university laboratory buildings is a real cost.”Some grant recipients already receive low overhead payments, but a large majority of them currently receive more than 15 percent, meaning they will need to make budgetary changes to absorb the loss. Among the 2024 grants that we analyzed, institutions that received more than $1 million in N.I.H. support got an average of 40 cents of indirect funding for every dollar of direct funding.Distribution of overhead funding at N.I.H.-funded institutions in 2024As a share of direct fundingSource: National Institutes of HealthCalculated for 613 institutions that received at least $1 million in funding in fiscal year 2024. Federally negotiated rates are higher than these.Universities and hospitals may adjust their overall budgets to keep supporting medical research by cutting back on other things they do. Some might be able to raise money from donors to fill the shortfalls, though most universities are already raising as much philanthropic money as they can.But many research institutions have said they would adjust by simply doing less medical research, because they would not be able to afford to do as much with less government help.Universities and hospitals might also shift the kinds of research they do, avoiding areas that require more lab space, regulatory compliance or high-tech equipment, and focusing on types of research that will require them to provide less overhead funding themselves. That may mean disproportionate reductions in complex areas of research like genetics.Those effects may be spread unevenly across the research landscape, as some organizations find a way to adjust, while others abandon medical research altogether.We’ve compiled a list of institutions that received at least $1 million in N.I.H. funding in the 2024 fiscal year, along with our estimates of how much less they would have gotten under the new policy. Most of these institutions are universities or hospitals, but there are also some private companies and nonprofit research groups. Our numbers tend to be underestimates of the cuts.To estimate changes in funding, we relied on data from RePORT, the N.I.H.’s online registry of grants and projects. We limited our analysis to grants listed within the 50 U.S. states, the District of Columbia or Puerto Rico. We also limited it to grants where the amount of indirect funding was known and where the combined indirect and direct funding was within five percent of the listed total funding. These filters resulted in removing many grants to private organizations such as domestic for-profits.We calculated how much indirect funding each grant would have received under the new guidance by multiplying the listed direct funding amount by 15 percent. We then compared that number to the listed indirect funding amount for each great to estimate the impact of the policy.There are two reasons our calculations are most likely conservative estimates of true reductions in funding. First, only a portion of the direct funding for each grant is considered to be “eligible” for the purposes of calculating indirect funding. For example, laboratory equipment and graduate student tuition reimbursements are deducted from the direct costs before applying the negotiated overhead rate, whereas our calculations assumed 100 percent of the listed direct costs would be eligible. We performed a more accurate version of our calculations for the 10 universities and 10 hospitals receiving the most N.I.H. funds by inferring their eligible direct costs from their reported negotiated rates. When we did this, we saw an additional increase in losses of about 20 percent.Second, we applied a 15 percent rate to all grants in the database, including those with an initial indirect rate  15 percent. An analysis by James Murphy helped inform this approach. According to our analysis, then, some grants would actually receive more money under the new guidance. If the new rate operated more like a cap — and grants with rates currently below 15 percent did not change — the overall reductions in funding would be larger, as the reductions would no longer be offset by some small number of funding increases.]]></content:encoded></item><item><title>FreeBSD 13.5 Overcomes UFS Y2038 Problem To Push It Out To Year 2106</title><link>https://www.phoronix.com/news/FreeBSD-13.5-Beta-2</link><author>Michael Larabel</author><category>tech</category><pubDate>Sun, 16 Feb 2025 01:30:45 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Following last week's FreeBSD 13.5 Beta 1 release to kick off this next FreeBSD 13 point release that will also end the series, FreeBSD 13.5 Beta 2 is out this weekend for testing...]]></content:encoded></item><item><title>The Sims Game Design Documents (1997)</title><link>https://donhopkins.com/home/TheSimsDesignDocuments/</link><author>krykp</author><category>hn</category><pubDate>Sun, 16 Feb 2025 01:06:11 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Fluvio: A Rust-powered streaming platform using WebAssembly for programmable data processing</title><link>https://www.reddit.com/r/rust/comments/1iqgg02/fluvio_a_rustpowered_streaming_platform_using/</link><author>/u/drc1728</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sun, 16 Feb 2025 01:00:35 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[I am in the process of writing an essay on composable streaming first architecture for data intensive applications. I am thinking of it as a follow up on this article.Quick question for the Rust community:What information would help the Rust community know and experience Fluvio?What would you like to see covered in the essay?   submitted by    /u/drc1728 ]]></content:encoded></item><item><title>Show HN: Blunderchess.net – blunder for your opponent every five moves</title><link>https://blunderchess.net/</link><author>eviledamame</author><category>hn</category><pubDate>Sun, 16 Feb 2025 00:22:01 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Despite Plans for AI-Powered Search, Reddit&apos;s Stock Fell 14% Thsi Week</title><link>https://tech.slashdot.org/story/25/02/16/007234/despite-plans-for-ai-powered-search-reddits-stock-fell-14-thsi-week?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sun, 16 Feb 2025 00:09:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA["Reddit Answers" uses generative AI to answer questions using what past Reddittors have posted. Announced in December, Reddit now plans to integrate it into their search results, reports TechCrunch, with Reddit's CEO saying the idea has "incredible monetization potential." 

And yet Reddit's stock fell 14% this week. CNBC's headline? "Reddit shares plunge after Google algorithm change contributes to miss in user numbers."


A Google search algorithm change caused some "volatility" with user growth in the fourth quarter, but the company's search-related traffic has since recovered in the first quarter, Reddit CEO Steve Huffman said in a letter to shareholders. "What happened wasn't unusual — referrals from search fluctuate from time to time, and they primarily affect logged-out users," Huffman wrote. "Our teams have navigated numerous algorithm updates and did an excellent job adapting to these latest changes effectively...." Reddit has said it is working to convince logged-out users to create accounts as logged-in users, which are more lucrative for its business. 


As Yahoo Finance once pointed out, Reddit knew this day would come, acknowledging in its IPO filing that "changes in internet search engine algorithms and dynamics could have a negative impact on traffic for our website and, ultimately, our business." And in the last three months of 2024 Reddit's daily active users dropped, Yahoo Finance reported this week. But logged-in users increased by 400,000 — while logged-out users dropped by 600,000 (their first drop in almost two years). 

Marketwatch notes that analyst Josh Beck sees this as a buying opportunity for Reddit's stock:
Beck pointed to comments from Reddit's management regarding a sharp recovery in daily active unique users. That was likely driven by Google benefiting from deeper Reddit crawling, by the platform uncollapsing comments in search results and by a potential benefit from spam-reduction algorithm updates, according to the analyst. "While the report did not clear our anticipated bar, we walk away encouraged by international upside," he wrote.
]]></content:encoded></item><item><title>Despite Plans for AI-Powered Search, Reddit&apos;s Stock Fell 14% This Week</title><link>https://tech.slashdot.org/story/25/02/16/007234/despite-plans-for-ai-powered-search-reddits-stock-fell-14-this-week?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sun, 16 Feb 2025 00:09:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA["Reddit Answers" uses generative AI to answer questions using what past Reddittors have posted. Announced in December, Reddit now plans to integrate it into their search results, reports TechCrunch, with Reddit's CEO saying the idea has "incredible monetization potential." 

And yet Reddit's stock fell 14% this week. CNBC's headline? "Reddit shares plunge after Google algorithm change contributes to miss in user numbers."


A Google search algorithm change caused some "volatility" with user growth in the fourth quarter, but the company's search-related traffic has since recovered in the first quarter, Reddit CEO Steve Huffman said in a letter to shareholders. "What happened wasn't unusual — referrals from search fluctuate from time to time, and they primarily affect logged-out users," Huffman wrote. "Our teams have navigated numerous algorithm updates and did an excellent job adapting to these latest changes effectively...." Reddit has said it is working to convince logged-out users to create accounts as logged-in users, which are more lucrative for its business. 


As Yahoo Finance once pointed out, Reddit knew this day would come, acknowledging in its IPO filing that "changes in internet search engine algorithms and dynamics could have a negative impact on traffic for our website and, ultimately, our business." And in the last three months of 2024 Reddit's daily active users dropped, Yahoo Finance reported this week. But logged-in users increased by 400,000 — while logged-out users dropped by 600,000 (their first drop in almost two years). 

Marketwatch notes that analyst Josh Beck sees this as a buying opportunity for Reddit's stock:
Beck pointed to comments from Reddit's management regarding a sharp recovery in daily active unique users. That was likely driven by Google benefiting from deeper Reddit crawling, by the platform uncollapsing comments in search results and by a potential benefit from spam-reduction algorithm updates, according to the analyst. "While the report did not clear our anticipated bar, we walk away encouraged by international upside," he wrote.
]]></content:encoded></item><item><title>Safe elimination of unnecessary bound checks.</title><link>https://www.reddit.com/r/rust/comments/1iqev5s/safe_elimination_of_unnecessary_bound_checks/</link><author>/u/tjientavara</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 23:43:26 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Hi, I am working on a Unicode database that is pretty fast, it is a 2 step associated lookup.Here is the code for getting the east-asian-width value of a Unicode code-point. Pay specific attention to the function. This function is a  function and the byte tables that it references are  as well. This will allow you to eventually run the unicode algorithms at both compile and run-time.Since the tables are fixed at compile time, I can proof that all values from the table will result in values that will never break any bounds, so technically the bound checks are unnecessary.There are two bound checks in the assembly output for this function.The check before accessing the EAST_ASIAN_WIDTH_COLUMN table (I use an assert! to do this, otherwise there will be double bound check).And the check on the conversion to the enum.The two bound checks are the two compare + conditional-jump instructions in this code.I could increase the size of the column table to remove one of the bound checks, but I want to keep the table small if possible.Is there a way to safely (I don't want to use the unsafe code) proof to the compiler that those two checks are unnecessary?P.S. technically there is a bound check before the index table a CMOV instruction, but it doubles as a way to also decompress the index table (last entry is repeated), so I feel this is not really a bound check.I was able to concat the two tables, and use a byte offset. So now there is no way to get an out of bound access, and the bound checks are no longer emitted by the compiler.I also added a manual check for out of bound on the enum and return zero instead, this becomes a CMOV and it eliminated all the panic code from the function.]]></content:encoded></item><item><title>Create a QubesOS Gaming HVM with GPU PCI passthrough (2023)</title><link>https://forum.qubes-os.org/t/create-a-gaming-hvm/19000</link><author>transpute</author><category>hn</category><pubDate>Sat, 15 Feb 2025 22:48:56 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>China&apos;s &apos;Salt Typhoon&apos; Hackers Continue to Breach Telecoms Despite US Sanctions</title><link>https://it.slashdot.org/story/25/02/15/2244220/chinas-salt-typhoon-hackers-continue-to-breach-telecoms-despite-us-sanctions?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sat, 15 Feb 2025 22:47:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA["Security researchers say the Chinese government-linked hacking group, Salt Typhoon, is continuing to compromise telecommunications providers," reports TechCrunch, "despite the recent sanctions imposed by the U.S. government on the group." 

TechRadar reports that the Chinese state-sponsored threat actor is "hitting not just American organizations, but also those from the UK, South Africa, and elsewhere around the world."




The latest intrusions were spotted by cybersecurity researchers from Recorded Future, which said the group is targeting internet-exposed web interfaces of Cisco's IOS software that powers different routers and switches. These devices have known vulnerabilities that the threat actors are actively exploiting to gain initial access, root privileges, and more. More than 12,000 Cisco devices were found connected to the wider internet, and exposed to risk, Recorded Future further explained. However, Salt Typhoon is focusing on a "smaller subset" of telecoms and university networks. 

"The hackers attempted to exploit vulnerabilities in at least 1,000 Cisco devices," reports NextGov, "allowing them to access higher-level privileges of the hardware and change their configuration settings to allow for persistent access to the networks they're connected on... Over half of the Cisco appliances targeted by Salt Typhoon were located in the U.S., South America and India, with the rest spread across more than 100 countries."
Between December and January, the unit, widely known as Salt Typhoon, "possibly targeted" — based on devices that were accessed — offices in the University of California, Los Angeles, California State University, Loyola Marymount University and Utah Tech University, according to a report from cyber threat intelligence firm Recorded Future... The Cisco devices were mainly associated with telecommunications firms, but 13 of them were linked to the universities in the U.S. and some in other nations... "Often involved in cutting-edge research, universities are prime targets for Chinese state-sponsored threat activity groups to acquire valuable research data and intellectual property," said the report, led by the company's Insikt Group, which oversees its threat research. 

The cyberspies also compromised Cisco platforms at a U.S.-based affiliate of a prominent United Kingdom telecom operator and a South African provider, both unnamed, the findings added. The hackers also "carried out a reconnaissance of multiple IP addresses" owned by Mytel, a telecom operator based in Myanmar... 

"In 2023, Cisco published a security advisory disclosing multiple vulnerabilities in the web UI feature in Cisco IOS XE software," a Cisco spokesperson said in a statement. "We continue to strongly urge customers to follow recommendations outlined in the advisory and upgrade to the available fixed software release."

]]></content:encoded></item><item><title>Jellyfin: The Free Software Media System</title><link>https://jellyfin.org/</link><author>doener</author><category>hn</category><pubDate>Sat, 15 Feb 2025 22:39:19 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[Jellyfin is Free Software, licensed under the GNU GPL. You can use it, study it, modify it, build it, and distribute it for free, as long as your changes are licensed the same way.The project relies entirely on contributions from volunteers. Want to help out? There’s lots of ways to do so, and you don’t even have to code! See our contribution guide for more details.The Jellyfin server and official clients are free to download, now and always. There are no costs, hidden or otherwise, to use Jellyfin, either for yourself, for your friends, or for your company. All our incidental costs are paid through donations from users like you.Jellyfin has no tracking, phone-home, or central servers collecting your data. We believe in keeping our software open and transparent. We’re also not in the media business, so the only media you see is your own.]]></content:encoded></item><item><title>rke2 and DNS</title><link>https://www.reddit.com/r/kubernetes/comments/1iqdela/rke2_and_dns/</link><author>/u/Affectionate_Horse86</author><category>reddit</category><category>k8s</category><category>devops</category><pubDate>Sat, 15 Feb 2025 22:35:02 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Kubernetes</source><content:encoded><![CDATA[I'm going crazy trying to get coredns to talk to my DNS server for names in my domain (I'm using a pihole server that is updated by terraform for VM addresses and by external-dns for k8s services)I'm using lablabs ansible role, but a pure rke2 answer is fine, I can figure out the rest. I have dest: /var/lib/rancher/rke2/server/manifests/rke2-coredns-config.yaml content: | apiVersion: helm.cattle.io/v1 kind: HelmChartConfig metadata: name: rke2-coredns namespace: kube-system spec: valuesContent: |- nodelocal: enabled: true ipvs: true zoneFiles: - filename: my-domain.com.conf domain: my-domain.com contents: | my-domain.com:53 { errors cache 30 forward . 10.0.200.1 # my Pihole DNS server } extraConfig: import: parameters: /etc/coredns/my-domain.com.conf when: rke2_type == "server" and this should have the effect of instructing coredns to use my DNS server for everyting in 'my-domain.com', but although this part lands in the appropriate config map, it doesn't seem to do any good.I can replace coredns completely with kubelet flags, but then I lose the resolution of cluster addresses and I don;t get too far in bringing the cluster up.]]></content:encoded></item><item><title>North Carolina Amazon workers vote against unionizing</title><link>https://techcrunch.com/2025/02/15/north-carolina-amazon-workers-vote-against-unionizing/</link><author>Anthony Ha</author><category>tech</category><pubDate>Sat, 15 Feb 2025 22:15:33 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Workers at an Amazon warehouse in Garner, North Carolina voted against unionizing in election results announced today. According to Carolina Amazonians United for Solidarity and Empowerment (CAUSE), the worker group seeking to form the union, 3,276 ballots were cast in the election, with 25.3% of votes in favor of unionizing and 74.7% against. The results […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>go-playground/validator</title><link>https://github.com/go-playground/validator</link><author></author><category>trending</category><pubDate>Sat, 15 Feb 2025 22:04:32 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[💯Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array divingPackage validator implements value validations for structs and individual fields based on tags.It has the following  features:Cross Field and Cross Struct validations by using validation tags or custom validators.Slice, Array and Map diving, which allows any or all levels of a multidimensional field to be validated.Ability to dive into both map keys and values for validationHandles type interface by determining it's underlying type prior to validation.Handles custom field types such as sql driver Valuer see ValuerAlias validation tags, which allows for mapping of several validations to a single tag for easier defining of validations on structsExtraction of custom defined Field Name e.g. can specify to extract the JSON name while validating and have it available in the resulting FieldErrorCustomizable i18n aware error messages.Default validator for the gin web framework; upgrading from v8 to v9 in gin see herePlease read the discussiong started here if you are interested in contributing/helping maintain this package.go get github.com/go-playground/validator/v10
Then import the validator package into your own code.import "github.com/go-playground/validator/v10"
Validation functions return type errorThey return type error to avoid the issue discussed in the following, where err is always != nil:Validator returns only InvalidValidationError for bad validation input, nil or ValidationErrors as type error; so, in your code all you need to do is check if the error returned is not nil, and if it's not check if error is InvalidValidationError ( if necessary, most of the time it isn't ) type cast it to type ValidationErrors like so:err := validate.Struct(mystruct)
validationErrors := err.(validator.ValidationErrors)
If new to using validator it is highly recommended to initialize it using the WithRequiredStructEnabled option which is opt-in to new behaviour that will become the default behaviour in v11+. See documentation for more details.validate := validator.New(validator.WithRequiredStructEnabled())
Field Equals Another Field (relative)Field Equals Another FieldCheck the indicated characters are present in the FieldCheck the indicated characters are not present in the fieldField Greater Than Another Relative FieldField Greater Than or Equal To Another Relative FieldField Greater Than or Equal To Another FieldField Greater Than Another FieldLess Than Another Relative FieldLess Than or Equal To Another Relative FieldLess Than or Equal To Another FieldField Does Not Equal Another Field (relative)Field Does Not Equal Another FieldClassless Inter-Domain Routing CIDRClassless Inter-Domain Routing CIDRv4Classless Inter-Domain Routing CIDRv6Full Qualified Domain Name (FQDN)Internet Protocol Address IPInternet Protocol Address IPv4Internet Protocol Address IPv6Internet Protocol Address IPInternet Protocol Address IPv4Internet Protocol Address IPv6Media Access Control Address MACTransmission Control Protocol Address TCPv4Transmission Control Protocol Address TCPv6Transmission Control Protocol Address TCPUser Datagram Protocol Address UDPv4User Datagram Protocol Address UDPv6User Datagram Protocol Address UDPUnix domain socket end point AddressBusiness Identifier Code (ISO 9362)Bitcoin Bech32 Address (segwit)mongodb_connection_stringMongoDB Connection StringSpiceDb ObjectID/Permission/Typee164 formatted phone numberInternational Standard Book NumberInternational Standard Book Number 10International Standard Book Number 13International Standard Serial NumberTwo-letter country code (ISO 3166-1 alpha-2)Three-letter country code (ISO 3166-1 alpha-3)Numeric country code (ISO 3166-1 numeric)Country subdivision code (ISO 3166-2)Luhn Algorithm Checksum (for strings and (u)int)postcode_iso3166_alpha2_fieldSocial Security Number SSNUniversally Unique Identifier UUIDUniversally Unique Identifier UUID v3Universally Unique Identifier UUID v3 RFC4122Universally Unique Identifier UUID v4Universally Unique Identifier UUID v4 RFC4122Universally Unique Identifier UUID v5Universally Unique Identifier UUID v5 RFC4122Universally Unique Identifier UUID RFC4122Semantic Versioning 2.0.0Universally Unique Lexicographically Sortable Identifier ULIDCommon Vulnerabilities and Exposures Identifier (CVE id)hexcolor|rgb|rgba|hsl|hslaiso3166_1_alpha2|iso3166_1_alpha3|iso3166_1_alpha_numericRun on MacBook Pro Max M3go version go1.23.3 darwin/arm64
goos: darwin
goarch: arm64
cpu: Apple M3 Max
pkg: github.com/go-playground/validator/v10
BenchmarkFieldSuccess-16                                                42461943                27.88 ns/op            0 B/op          0 allocs/op
BenchmarkFieldSuccessParallel-16                                        486632887                2.289 ns/op           0 B/op          0 allocs/op
BenchmarkFieldFailure-16                                                 9566167               121.3 ns/op           200 B/op          4 allocs/op
BenchmarkFieldFailureParallel-16                                        17551471                83.68 ns/op          200 B/op          4 allocs/op
BenchmarkFieldArrayDiveSuccess-16                                        7602306               155.6 ns/op            97 B/op          5 allocs/op
BenchmarkFieldArrayDiveSuccessParallel-16                               20664610                59.80 ns/op           97 B/op          5 allocs/op
BenchmarkFieldArrayDiveFailure-16                                        4659756               252.9 ns/op           301 B/op         10 allocs/op
BenchmarkFieldArrayDiveFailureParallel-16                                8010116               152.9 ns/op           301 B/op         10 allocs/op
BenchmarkFieldMapDiveSuccess-16                                          2834575               421.2 ns/op           288 B/op         14 allocs/op
BenchmarkFieldMapDiveSuccessParallel-16                                  7179700               171.8 ns/op           288 B/op         14 allocs/op
BenchmarkFieldMapDiveFailure-16                                          3081728               384.4 ns/op           376 B/op         13 allocs/op
BenchmarkFieldMapDiveFailureParallel-16                                  6058137               204.0 ns/op           377 B/op         13 allocs/op
BenchmarkFieldMapDiveWithKeysSuccess-16                                  2544975               464.8 ns/op           288 B/op         14 allocs/op
BenchmarkFieldMapDiveWithKeysSuccessParallel-16                          6661954               181.4 ns/op           288 B/op         14 allocs/op
BenchmarkFieldMapDiveWithKeysFailure-16                                  2435484               490.7 ns/op           553 B/op         16 allocs/op
BenchmarkFieldMapDiveWithKeysFailureParallel-16                          4249617               282.0 ns/op           554 B/op         16 allocs/op
BenchmarkFieldCustomTypeSuccess-16                                      14943525                77.35 ns/op           32 B/op          2 allocs/op
BenchmarkFieldCustomTypeSuccessParallel-16                              64051954                20.61 ns/op           32 B/op          2 allocs/op
BenchmarkFieldCustomTypeFailure-16                                      10721384               107.1 ns/op           184 B/op          3 allocs/op
BenchmarkFieldCustomTypeFailureParallel-16                              18714495                69.77 ns/op          184 B/op          3 allocs/op
BenchmarkFieldOrTagSuccess-16                                            4063124               294.3 ns/op            16 B/op          1 allocs/op
BenchmarkFieldOrTagSuccessParallel-16                                   31903756                41.22 ns/op           18 B/op          1 allocs/op
BenchmarkFieldOrTagFailure-16                                            7748558               146.8 ns/op           216 B/op          5 allocs/op
BenchmarkFieldOrTagFailureParallel-16                                   13139854                92.05 ns/op          216 B/op          5 allocs/op
BenchmarkStructLevelValidationSuccess-16                                16808389                70.25 ns/op           16 B/op          1 allocs/op
BenchmarkStructLevelValidationSuccessParallel-16                        90686955                14.47 ns/op           16 B/op          1 allocs/op
BenchmarkStructLevelValidationFailure-16                                 5818791               200.2 ns/op           264 B/op          7 allocs/op
BenchmarkStructLevelValidationFailureParallel-16                        11115874               107.5 ns/op           264 B/op          7 allocs/op
BenchmarkStructSimpleCustomTypeSuccess-16                                7764956               151.9 ns/op            32 B/op          2 allocs/op
BenchmarkStructSimpleCustomTypeSuccessParallel-16                       52316265                30.37 ns/op           32 B/op          2 allocs/op
BenchmarkStructSimpleCustomTypeFailure-16                                4195429               277.2 ns/op           416 B/op          9 allocs/op
BenchmarkStructSimpleCustomTypeFailureParallel-16                        7305661               164.6 ns/op           432 B/op         10 allocs/op
BenchmarkStructFilteredSuccess-16                                        6312625               186.1 ns/op           216 B/op          5 allocs/op
BenchmarkStructFilteredSuccessParallel-16                               13684459                93.42 ns/op          216 B/op          5 allocs/op
BenchmarkStructFilteredFailure-16                                        6751482               171.2 ns/op           216 B/op          5 allocs/op
BenchmarkStructFilteredFailureParallel-16                               14146070                86.93 ns/op          216 B/op          5 allocs/op
BenchmarkStructPartialSuccess-16                                         6544448               177.3 ns/op           224 B/op          4 allocs/op
BenchmarkStructPartialSuccessParallel-16                                13951946                88.73 ns/op          224 B/op          4 allocs/op
BenchmarkStructPartialFailure-16                                         4075833               287.5 ns/op           440 B/op          9 allocs/op
BenchmarkStructPartialFailureParallel-16                                 7490805               161.3 ns/op           440 B/op          9 allocs/op
BenchmarkStructExceptSuccess-16                                          4107187               281.4 ns/op           424 B/op          8 allocs/op
BenchmarkStructExceptSuccessParallel-16                                 15979173                80.86 ns/op          208 B/op          3 allocs/op
BenchmarkStructExceptFailure-16                                          4434372               264.3 ns/op           424 B/op          8 allocs/op
BenchmarkStructExceptFailureParallel-16                                  8081367               154.1 ns/op           424 B/op          8 allocs/op
BenchmarkStructSimpleCrossFieldSuccess-16                                6459542               183.4 ns/op            56 B/op          3 allocs/op
BenchmarkStructSimpleCrossFieldSuccessParallel-16                       41013781                37.95 ns/op           56 B/op          3 allocs/op
BenchmarkStructSimpleCrossFieldFailure-16                                4034998               292.1 ns/op           272 B/op          8 allocs/op
BenchmarkStructSimpleCrossFieldFailureParallel-16                       11348446               115.3 ns/op           272 B/op          8 allocs/op
BenchmarkStructSimpleCrossStructCrossFieldSuccess-16                     4448528               267.7 ns/op            64 B/op          4 allocs/op
BenchmarkStructSimpleCrossStructCrossFieldSuccessParallel-16            26813619                48.33 ns/op           64 B/op          4 allocs/op
BenchmarkStructSimpleCrossStructCrossFieldFailure-16                     3090646               384.5 ns/op           288 B/op          9 allocs/op
BenchmarkStructSimpleCrossStructCrossFieldFailureParallel-16             9870906               129.5 ns/op           288 B/op          9 allocs/op
BenchmarkStructSimpleSuccess-16                                         10675562               109.5 ns/op             0 B/op          0 allocs/op
BenchmarkStructSimpleSuccessParallel-16                                 131159784                8.932 ns/op           0 B/op          0 allocs/op
BenchmarkStructSimpleFailure-16                                          4094979               286.6 ns/op           416 B/op          9 allocs/op
BenchmarkStructSimpleFailureParallel-16                                  7606663               157.9 ns/op           416 B/op          9 allocs/op
BenchmarkStructComplexSuccess-16                                         2073470               576.0 ns/op           224 B/op          5 allocs/op
BenchmarkStructComplexSuccessParallel-16                                 7821831               161.3 ns/op           224 B/op          5 allocs/op
BenchmarkStructComplexFailure-16                                          576358              2001 ns/op            3042 B/op         48 allocs/op
BenchmarkStructComplexFailureParallel-16                                 1000000              1171 ns/op            3041 B/op         48 allocs/op
BenchmarkOneof-16                                                       22503973                52.82 ns/op            0 B/op          0 allocs/op
BenchmarkOneofParallel-16                                                8538474               140.4 ns/op             0 B/op          0 allocs/op
Here is a list of software that complements using this library either pre or post validation.form - Decodes url.Values into Go value(s) and Encodes Go value(s) into url.Values. Dual Array and Full map support.mold - A general library to help modify or set data within data structures and other objectsMaintenance and support for SDK major versionsSee prior discussion here for more details.This package is aligned with the Go release policy in that support is guaranteed for the two most recent major versions.This does not mean the package will not work with older versions of Go, only that we reserve the right to increase the MSGV(Minimum Supported Go Version) when the need arises to address Security issues/patches, OS issues & support or newly introduced functionality that would greatly benefit the maintenance and/or usage of this package.If and when the MSGV is increased it will be done so in a minimum of a  release bump.Distributed under MIT License, please see license file within the code for more details.This project has grown large enough that more than one person is required to properly support the community. If you are interested in becoming a maintainer please reach out to me https://github.com/deankarn]]></content:encoded></item><item><title>Oliveriver/5d-diplomacy-with-multiverse-time-travel</title><link>https://github.com/Oliveriver/5d-diplomacy-with-multiverse-time-travel</link><author></author><category>trending</category><pubDate>Sat, 15 Feb 2025 22:04:32 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[5D Diplomacy With Multiverse Time TravelA new standard in measuring how galaxy-brained you are, 5D Diplomacy With Multiverse Time Travel combines the classic game of pure negotiation with the modern classic game of pure disorientation. Can you convince your opponent to support an attack in the present while simultaneously backstabbing them five years ago and seven timelines over?Inspired by and indebted to the board game Diplomacy and the video game 5D Chess With Multiverse Time Travel. Both are excellent in their own right, so we recommend picking up a copy of each to understand the rules for 5D Diplomacy. is a trademark of Avalon Hill. 5D Chess With Multiverse Time Travel is a trademark of Thunkspace, LLC. 5D Diplomacy With Multiverse Time Travel and its creators are not affiliated with either  or 5D Chess With Multiverse Time Travel.If you find a bug, please raise an issue.Note that official development of new features has come to an end. Issues requesting new or modified gameplay features will probably be rejected. Only bug fixes, performance improvements, and quality of life adjustments are likely to be accepted as suggestions.Feel free to fork this repo and modify the code there if you wish to experiment with more radical changes to the rules or UI. Visit the 5D Diplomacy Discord server to discuss new rules and theory with others.There are currently two options for installing 5D Diplomacy. Use quick installation if you just want to play the game. Use manual installation if you want to make code changes.The correct version of Docker for your operating system.Open Docker and leave it running.Open the CLI for your operating system and navigate inside the folder where you've downloaded this repository. If you don't know how to do this, use this tutorial.Via the CLI, run the command docker compose build frontend backend and wait for it to complete.Via the CLI, run the command  and wait for it to complete.Wait an extra few seconds for the server to start up. If you experience errors creating a game in the next step, try waiting longer.If you ever update the code (manually or via a pull from this repository), you will need to run docker compose down --rmi local, then run through the steps above again. Note that this may result in the database being wiped.To read server logs, run docker compose logs -f backend.The game consists of two components, found in the  and  directories. You must set up and run both to play 5D Diplomacy, unless you're connecting to someone else's server or have implemented a custom client.The  directory contains the original proof of concept from 2021. None of its contents are required for running the latest version of 5D Diplomacy.Navigate to the  directory.(Optional) If you want to connect to a custom database, copy  to create a new file in the same directory called appsettings.Development.json. Add your database's connection string as the value for the appropriate provider under , then set the value for  to match the name of the connection string.Run one of the following commands, depending on your configuration: 
  If you aren't using a custom database, i.e. if you didn't follow the optional step above, run dotnet ef database update --context SqliteGameContext.If you're using a custom SQLite database, run dotnet ef database update --context SqliteGameContext.If you're using a custom SQL Server database, run dotnet ef database update --context SqlServerGameContext.Run  to start the server.The server will print its address to the console, likely http://localhost:5000 but it may be different. Note this down for later.Note that if you ever update the code with changes that affect the database schema (e.g. if you pull a change from this repository that includes a new migration), you will have to run the appropriate dotnet ef database update command again.Navigate to the  directory.Copy  to create a new file in the same directory called .Inside , replace  with the address of the server noted earlier.Run  to start the client in the default browser.First see installation instructions above. 5D Diplomacy can be set to run normal games (where seven players join and enter orders individually) or sandbox games (where a single user enters all orders).If you wish to play a normal game or let other people see one of your sandbox games, you'll need to expose the domains of your client and/or server (if everyone has set up the client themselves, only a server needs to be exposed). There are various ways to do this, although this guide does not cover them.If you modify the code and host a game that others interact with, you must provide a link to your modified source code to comply with the terms of the AGPL license. We suggest updating the link to the source code in client/src/components/pages/LandingPage.tsx.To create a normal game, one player must choose the new game option from the main menu. They must choose the adjacency setting (see game rules below). After a game has been created, the initiating player enters the game and sees the game ID in the top left corner, which they must copy and send to other players.Other players can then use the join game option from the main menu to join with the supplied game ID.Note that 5D Diplomacy has no in-built messaging system. Unless you want to play without press, you require a separate program to send and receive press, e.g. a messaging app or voice calls.A possible exploit exists when playing multiplayer games. Since 5D Diplomacy has no user logins or verification, a player can join as someone else and enter their orders before them. The alternative - allowing each nation to join only once - would mean players can't rejoin after a break or connection issues. While Diplomacy is a game about breaking trust, you'll simply have to trust players not to be quite this devious.To create a sandbox game, select new game from the main menu and choose the sandbox option. Also set the adjacency setting (see game rules below).In sandbox mode, turns advance after submission whether all nations have orders or not.The rules of 5D Diplomacy generally extend the rules of regular Diplomacy. This guide covers only deviations from the rules of the base game.The game world consists of a grid of Diplomacy boards. Each row is a timeline, and each timeline progresses with boards following the standard Diplomacy turns (Spring 1901, then Fall 1901, then Winter 1901, then Spring 1902, etc.).At a given time, only units on the active boards (those furthest to the right in each timeline) can have new orders assigned. Other units are locked into their pre-existing orders, which can't be changed, though their resolution can.Units in spring or fall turns can be given hold, move, support or convoy orders. These are validated against standard Diplomacy adjacency rules, with extra possibilities for multiverse travel. The adjacency strictness setting (chosen when a new game is created) determines how units can move through the multiverse.With strict adjacencies, a unit can move/support/convoy to:Any adjacent region on its own board.The same region on a different board exactly one timeline up or down, e.g. moving from Paris in Timeline 2 to Paris in Timeline 1.The same region on a different board exactly one board in the past, e.g. moving from Berlin in Fall 1901 to Berlin in Spring 1901. Note that moving to winter boards is forbidden and these are skipped when determining board adjacencies, so Spring 1902 is adjacent to Fall 1901.Any region it is successfully convoyed to (see below).With loose adjacencies, a unit can move/support/convoy to:Any adjacent region on its own board.The same region on a different board exactly one timeline up or down, or any region adjacent to that region within its board, e.g. moving from Paris in Timeline 2 to Gascony in Timeline 1.The same region on a different board exactly one board in the past, or any region adjacent to that region within its board, e.g. moving from Berlin in Fall 1901 to Kiel in Spring 1901. Winter boards are still ignored.Any region it is successfully convoyed to (see below).In either case, note in particular that movement one board diagonally is not permitted (without a convoy).Convoys extend the quirk of standard Diplomacy that allows armies to move an arbitrary distance in a single turn if a chain of convoying fleets exists. Providing each fleet is adjacent to the next and all are ordered to perform the same convoy, an army could go almost anywhere.Units are however forbidden from moving into boards that don't exist yet, even with convoys. Convoys and supports though can anticipate a future unit moving back in time, so the player can use the ghost board to enter supports/convoys via an arbitrary location in the multiverse.Any units in (spring or fall) boards not assigned orders are given a hold order by default.The rule of thumb for adjudication: each time all orders for a turn are submitted, all orders in the entire world are adjudicated together, as if in a single enormous Diplomacy board.In particular, new orders could affect a prior resolution of existing orders, e.g. a unit that bounced now has support and so moves successfully. This extends to supports/convoys across time, e.g. convoys that were previously invalid may become valid if the future army appears and performs the expected move.If the new resolution matches an existing child board that spawned from this one, then no new timeline splits. So if two units bounced and both receive one new support from their relative future next turn, they still bounce and no new board is created (assuming no other changes elsewhere on this board).If the new resolution does not match an existing child board that spawned from this one, a new timeline appears. New timelines always appear below all existing timelines, and are always created in a canonical order (earliest board first; if boards are of equal age, lowest timeline number first).Note that this is different to 5D Chess where boards can spawn above or below existing timelines, potentially changing the coordinates of existing boards. There's no concept of a turn belonging to a player in Diplomacy (instead, they belong to everyone simultaneously) and 5D Diplomacy extends this thinking, so timelines spawn in only one direction. Board coordinates also never change.Main turns (spring and fall) and winter boards adjudicate simultaneously if all are at the end of their respective timelines. So a player may be creating builds on one board and creating moves on another in the same turn. Though of course these must be kept separate, so building is not permitted on movement boards and vice versa.Build/disband counts are per board. If a player controls fewer centres than they have units in one timeline but more in another, the difference does not cancel out: they must disband in the former and may build only in the latter. If they fail to enter enough disbands on a given board, units are removed from that board at random.If any board requires retreats, adjudication pauses for all boards without retreats. Retreats may only move to an adjacent region on the same board.A player achieves victory under one of the following conditions:They are the only player to control at least 18 unique supply centres across all active boards. Unique here means unique by region name, so controlling Serbia in Timeline 1 and Serbia in Timeline 2 counts as only one supply centre.If more than one player controls more than 18 unique supply centres, they are the only one with a clear majority. It's possible for two players to reach 18 centres in the same turn, e.g. if they have targeted different timelines.As with regular Diplomacy, it's possible for 5D Diplomacy to feature variant maps with completely different region arrangements. Other variants, such as variants with new rules, are not supported.Modifying the server to adjudicate custom variants in 5D is simple. First, edit the list of nations in . Then edit the JSON files in the folder  to match the intended board. Any subsequent run of the server will use those to create and adjudicate worlds.Modify  to change supply centres and starting/home centres.Modify  to change connections between regions.Modify  to change regions.Modify  to change starting units.Modifying the client is tricker as it is much more tied to this particular Diplomacy board. While client/src/data/regions.ts contains the list of regions and associated data, you will also need to replace the SVG files in  and then reference them in client/src/hooks/useRegionSvg.tsx.]]></content:encoded></item><item><title>juspay/hyperswitch</title><link>https://github.com/juspay/hyperswitch</link><author></author><category>trending</category><pubDate>Sat, 15 Feb 2025 22:04:32 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[An open source payments switch written in Rust to make payments fast, reliable and affordable
  Single API to access the payments ecosystem and its features 
 Juspay, founded in 2012, is a global leader in payment orchestration and checkout solutions, trusted by 400+ leading enterprises and brands worldwide. Hyperswitch is Juspay's new generation of composable, commercial open-source payments platform for merchant and brands. It is an enterprise-grade, transparent and modular payments platform designed to provide digital businesses access to the best payments infrastructure. 
Here are the key components of Hyperswitch that deliver the whole solution:Hyperswitch Backend: Hyperswitch backend enables seamless payment processing with comprehensive support for various payment flows - authorization, authentication, void and capture workflows along with robust management of post-payment processes like refunds and chargeback handling. Additionally, Hyperswitch supports non-payment use cases by enabling connections with external FRM or authentication providers as part of the payment flow. The backend optimizes payment routing with customizable workflows, including success rate-based routing, rule-based routing, volume distribution, fallback handling, and intelligent retry mechanisms for failed payments based on specific error codes.SDK (Frontend): The SDK, available for web, Android, and iOS, unifies the payment experience across various methods such as cards, wallets, BNPL, bank transfers, and more, while supporting the diverse payment flows of underlying PSPs. When paired with the locker, it surfaces the user's saved payment methods.Control Center: The Control Center enables users to manage the entire payments stack without any coding. It allows the creation of workflows for routing, payment retries, and defining conditions to invoke 3DS, fraud risk management (FRM), and surcharge modules. The Control Center provides access to transaction, refund, and chargeback operations across all integrated PSPs, transaction-level logs for initial debugging, and detailed analytics and insights into payment performance.You can run Hyperswitch on your system using Docker compose after cloning this repository.git clone --depth 1 --branch latest https://github.com/juspay/hyperswitch
cd hyperswitch
docker compose up -d
Check out the local setup guide for a more details on setting up the entire stack or component wise. This takes 15-mins and gives the following output[+] Running 2/2
✔ hyperswitch-control-center Pulled 2.9s
✔ hyperswitch-server Pulled 3.0s
[+] Running 6/0

✔ Container hyperswitch-pg-1 Created 0.0s
✔ Container hyperswitch-redis-standalone-1 Created 0.0s
✔ Container hyperswitch-migration_runner-1 Created 0.0s
✔ Container hyperswitch-hyperswitch-server-1 Created 0.0s
✔ Container hyperswitch-hyperswitch-web-1 Created 0.0s
✔ Container hyperswitch-hyperswitch-control-center-1 Created 0.0s

Attaching to hyperswitch-control-center-1, hyperswitch-server-1, hyperswitch-web-1, migration_runner-1, pg-1, redis-standalone-1
The fastest and easiest way to try Hyperswitch on AWS is via our CDK scriptsClick on the following button for a quick standalone deployment on AWS, suitable for prototyping. No code or setup is required in your system and the deployment is covered within the AWS free-tier setup.Sign-in to your AWS console.Follow the instructions provided on the console to successfully deploy Hyperswitch. This takes 30-45mins and gives the following outputhttp://hyperswitch-<host-id.region>.elb.amazonaws.comhttp://<cloudfront.host-id>/0.103.1/v0/HyperLoader.jsControl center server running onhttp://hyperswitch-control-center-<host-id.region>.elb.amazonaws.com, Login with Email: Hyperswitch Demo Store running onhttp://hyperswitch-sdk-demo-<host-id.region>.elb.amazonaws.comhttp://hyperswitch-logs-<host-id.region>.elb.amazonaws.com, Login with username: , password: We support deployment on GCP and Azure via Helm charts which takes 30-45mins. You can read more at Hyperswitch docs.You can experience the product by signing up for our hosted sandbox. The signup process accepts any email ID and provides access to the entire Control Center. You can set up connectors, define workflows for routing and retries, and even try payments from the dashboard.Support, Feature requests & BugsFor any support, join the conversation in SlackFor new product features, enhancements, roadmap discussions, or to share queries and ideas, visit our GitHub DiscussionsPayments are evolving rapidly worldwide, with hundreds of processors, fraud detection systems, authentication modules, and new payment methods and flows emerging. Businesses building or managing their own payment stacks often face similar challenges, struggle with comparable issues, and find it hard to innovate at the desired pace.Hyperswitch serves as a well-architected designed reference platform, built on best-in-class design principles, empowering businesses to own and customize their payment stack. It provides a reusable core payments stack that can be tailored to specific requirements while relying on the Hyperswitch team for enhancements, support, and continuous innovation.Embrace Payments Diversity: It will drive innovation in the ecosystem in multiple ways.Make it Open Source: Increases trust; Improves the quality and reusability of software.Be community driven: It enables participatory design and development.Build it like Systems Software: This sets a high bar for Reliability, Security and Performance SLAs.Maximise Value Creation: For developers, customers & partners.This project is being created and maintained by JuspayThe core team of 150+ engineers building Hyperswitch. Keep up the great work! 🥂]]></content:encoded></item><item><title>GitHubDaily/GitHubDaily</title><link>https://github.com/GitHubDaily/GitHubDaily</link><author></author><category>trending</category><pubDate>Sat, 15 Feb 2025 22:04:32 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[坚持分享 GitHub 上高质量、有趣实用的开源技术教程、开发者工具、编程网站、技术资讯。A list cool, interesting projects of GitHub.多年以前，我曾看到 GitHub 开源项目作者、全栈工程师 TJ Holowaychunk 说过这么一句话："I don't read books, never went to school, I just read other people's code and always wonder how things work"。从那时起，我便认为，通过阅读源码，站在前辈的角度上，去思考代码架构与程序逻辑，乃是提升编程技巧最好的方式。因此，GitHub 也自然而然的，成为我最喜爱的开发者平台。秉着挖掘开源价值的初衷，GitHubDaily 自 2015 年 10 月 10 日正式成立。我们希望能通过这一举措，帮助开发者们发现当下最火的开源项目，掌控最新技术动态, 扩大技术视野, 并从开源项目的学习中获得编程能力的提升。目前，GitHubDaily 已累积分享超过 8000 个开源项目，内容包括但不限于 GitHub 上的开源技术资料、开发者工具、编程网站以及成熟应用。除了 GitHub 之外，我们也开始在下面多个社交媒体平台，帮助开发者传播与分享优质开源项目，挖掘其未来的技术应用前景。如果你想接收最新的 GitHub 开源项目资讯，可以关注一下👇有不错的开源项目，也欢迎到本仓库的 issues 推荐或自荐项目，我们期待你的分享。下面是对 GitHubDaily 在 2024 年所推荐的项目进行分类整理，方便大家查找以往分享过的内容。]]></content:encoded></item><item><title>cypress-io/cypress</title><link>https://github.com/cypress-io/cypress</link><author></author><category>trending</category><pubDate>Sat, 15 Feb 2025 22:04:32 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[Fast, easy and reliable testing for anything that runs in a browser. The web has evolved. Finally, testing has too.  Fast, easy and reliable testing for anything that runs in a browser. Install Cypress for Mac, Linux, or Windows, then get started.npm install cypress --save-dev
pnpm add cypress --save-dev
This project is licensed under the terms of the MIT license.Configure a badge for your project's README to show your test status or test count in the Cypress Cloud.Or let the world know your project is using Cypress with the badge below.[![Cypress.io](https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg)](https://www.cypress.io/)
]]></content:encoded></item><item><title>microsoft/markitdown</title><link>https://github.com/microsoft/markitdown</link><author></author><category>trending</category><pubDate>Sat, 15 Feb 2025 22:04:32 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[Python tool for converting files and office documents to Markdown.[!IMPORTANT] MarkItDown 0.0.2 alpha 1 (0.0.2a1) introduces a plugin-based architecture. As much as was possible, command-line and Python interfaces have remained the same as 0.0.1a3 to support backward compatibility. Please report any issues you encounter. Some interface changes may yet occur as we continue to refine MarkItDown to a first non-alpha release.MarkItDown is a utility for converting various files to Markdown (e.g., for indexing, text analysis, etc). It supports:Images (EXIF metadata and OCR)Audio (EXIF metadata and speech transcription)Text-based formats (CSV, JSON, XML)ZIP files (iterates over contents)To install MarkItDown, use pip: . Alternatively, you can install it from the source:git clone git@github.com:microsoft/markitdown.git
cd markitdown
pip install -e packages/markitdown
markitdown path-to-file.pdf > document.md
Or use  to specify the output file:markitdown path-to-file.pdf -o document.md
You can also pipe content:cat path-to-file.pdf | markitdown
MarkItDown also supports 3rd-party plugins. Plugins are disabled by default. To list installed plugins:markitdown --list-plugins
markitdown --use-plugins path-to-file.pdf
To find available plugins, search GitHub for the hashtag . To develop a plugin, see packages/markitdown-sample-plugin.Azure Document IntelligenceTo use Microsoft Document Intelligence for conversion:markitdown path-to-file.pdf -o document.md -d -e "<document_intelligence_endpoint>"
More information about how to set up an Azure Document Intelligence Resource can be found herefrom markitdown import MarkItDown

md = MarkItDown(enable_plugins=False) # Set to True to enable plugins
result = md.convert("test.xlsx")
print(result.text_content)
Document Intelligence conversion in Python:from markitdown import MarkItDown

md = MarkItDown(docintel_endpoint="<document_intelligence_endpoint>")
result = md.convert("test.pdf")
print(result.text_content)
To use Large Language Models for image descriptions, provide  and :from markitdown import MarkItDown
from openai import OpenAI

client = OpenAI()
md = MarkItDown(llm_client=client, llm_model="gpt-4o")
result = md.convert("example.jpg")
print(result.text_content)
docker build -t markitdown:latest .
docker run --rm -i markitdown:latest < ~/your-file.pdf > output.md
This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.You can help by looking at issues or helping review PRs. Any issue or PR is welcome, but we have also marked some as 'open for contribution' and 'open for reviewing' to help facilitate community contributions. These are ofcourse just suggestions and you are welcome to contribute in any way you like.Navigate to the MarkItDown package:Install  in your environment and run tests:pip install hatch  # Other ways of installing hatch: https://hatch.pypa.io/dev/install/
hatch shell
hatch test
(Alternative) Use the Devcontainer which has all the dependencies installed:# Reopen the project in Devcontainer and run:
hatch test
Run pre-commit checks before submitting a PR: pre-commit run --all-filesContributing 3rd-party PluginsYou can also contribute by creating and sharing 3rd party plugins. See packages/markitdown-sample-plugin for more details.This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft's Trademark & Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.]]></content:encoded></item><item><title>codecrafters-io/build-your-own-x</title><link>https://github.com/codecrafters-io/build-your-own-x</link><author></author><category>trending</category><pubDate>Sat, 15 Feb 2025 22:04:32 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[What I cannot create, I do not understand — Richard Feynman.]]></content:encoded></item><item><title>zaidmukaddam/scira</title><link>https://github.com/zaidmukaddam/scira</link><author></author><category>trending</category><pubDate>Sat, 15 Feb 2025 22:04:32 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[Scira (Formerly MiniPerplx) is a minimalistic AI-powered search engine that helps you find information on the internet. Powered by Vercel AI SDK! Search with models like Grok 2.0.A minimalistic AI-powered search engine that helps you find information on the internet.Tavily AI - For search grounding and web search capabilities: Get answers to your questions using Anthropic's Models.: Search the web using Tavily's API.: Get information from a specific URL.: Get the current weather for any location using OpenWeather's API.: Run code snippets in multiple languages using E2B's API.: Get the location of any place using Google Maps API, Mapbox API, and TripAdvisor API.: Track flights using AviationStack's API.Trending Movies and TV Shows: Get information about trending movies and TV shows.: Get information about any movie or TV show.Set Scira as your default search engineOpen the Chrome browser settings:Click on the three vertical dots in the upper right corner of the browser.Select "Settings" from the dropdown menu.Go to the search engine settings:In the left sidebar, click on "Search engine."Then select "Manage search engines and site search."Click on "Add" next to "Site search."Set the search engine name:Enter  in the "Search engine" field.Set the search engine URL:Enter  in the "URL with %s in place of query" field.Set the search engine shortcut:Enter  in the "Shortcut" field.Click on the three dots next to the search engine you just added.Select "Make default" from the dropdown menu.After completing these steps, you should be able to use Scira as your default search engine in Chrome.To run the example locally you need to:Sign up for accounts with the AI providers you want to use. OpenAI and Anthropic are required, Tavily is required for the web search feature.Obtain API keys for each provider.Set the required environment variables as shown in the  file, but in a new file called . to install the required dependencies. to launch the development server.This project is licensed under the MIT License - see the LICENSE file for details.]]></content:encoded></item><item><title>kuchin/awesome-cto</title><link>https://github.com/kuchin/awesome-cto</link><author></author><category>trending</category><pubDate>Sat, 15 Feb 2025 22:04:32 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[— Hello, my name is Dima and I'm a CTO]]></content:encoded></item><item><title>golang/go</title><link>https://github.com/golang/go</link><author></author><category>trending</category><pubDate>Sat, 15 Feb 2025 22:04:32 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[The Go programming languageGo is an open source programming language that makes it easy to build simple, reliable, and efficient software.Unless otherwise noted, the Go source files are distributed under the BSD-style license found in the LICENSE file.If a binary distribution is not available for your combination of operating system and architecture, visit https://go.dev/doc/install/source for source installation instructions.Go is the work of thousands of contributors. We appreciate your help!Note that the Go project uses the issue tracker for bug reports and proposals only. See https://go.dev/wiki/Questions for a list of places to ask questions about the Go language.]]></content:encoded></item><item><title>Zipstack/unstract</title><link>https://github.com/Zipstack/unstract</link><author></author><category>trending</category><pubDate>Sat, 15 Feb 2025 22:04:32 +0000</pubDate><source url="http://mshibanami.github.io/GitHubTrendingRSS">Github Trending</source><content:encoded><![CDATA[No-code LLM Platform to launch APIs and ETL Pipelines to structure unstructured documentsPrompt Studio's primary reason for existence is so you can develop the necessary prompts for document data extraction super efficiently. It is a purpose-built environment that makes this not just easy for you—but, lot of fun! The document sample, its variants, the prompts you're developing, outputs from different LLMs, the schema you're developing, costing details of the extraction and various tools that let you measure the effectiveness of your prompts are just a click away and easily accessible. Prompt Studio is designed for effective and high speed development and iteration of prompts for document data extraction. Welcome to IDP 2.0!🧘‍♀️ Three step nirvana with Workflow StudioAutomate critical business processes that involve complex documents with a human in the loop. Go beyond RPA with the power of Large Language Models.🌟 : Add documents to no-code Prompt Studio and do prompt engineering to extract required fields  🌟 : Configure Prompt Studio project as API deployment or configure input source and output destination for ETL Pipeline 🌟 : Deploy Workflows as unstructured data APIs or unstructured data ETL Pipelines!Linux or MacOS (Intel or M-series)Docker Compose (if you need to install it separately)Next, either download a release or clone this repo and do the following:That's all there is to it!Follow these steps to change the default username and password.See user guide for more details on managing the platform. Another really quick way to experience Unstract is by signing up for our hosted version. It comes with a 14 day free trial!Unstract comes well documented. You can get introduced to the basics of Unstract, and learn how to connect various systems like LLMs, Vector Databases, Embedding Models and Text Extractors to it. The easiest way to wet your feet is to go through our Quick Start Guide where you actually get to do some prompt engineering in Prompt Studio and launch an API to structure varied credit card statements!Contributions are welcome! Please see CONTRIBUTING.md for further details to get started easily.👋 Join the LLM-powered automation communityDo copy the value of  config in either  or  file to a secure location.Adapter credentials are encrypted by the platform using this key. Its loss or change will make all existing adapters inaccessible!In full disclosure, Unstract integrates Posthog to track usage analytics. As you can inspect the relevant code here, we collect the minimum possible metrics. Posthog can be disabled if desired by setting  to  in the frontend's .env file.]]></content:encoded></item><item><title>Machine Learning with TypeScript and TensorFlow: Training your first model</title><link>https://wanago.io/2025/02/03/machine-learning-typescript-tensorflow-training-first-model/</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Code Like a Pro: Implementing SOLID Design in React Ecosystem</title><link>https://jsdev.space/solid-design-react/</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Magento Development With Vue.js and React.js</title><link>https://techlogitic.net/magento-development-with-vue-js-and-react-js/</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Worker Threads in Node.js: A Comprehensive Guide to Multi-Threading</title><link>https://www.infinitecircuits.dev/blogs/blog/worker-threads-in-nodejs-a-comprehensive-guide-to-multi-threading-KFIXCLEtBbxCStErRwGy</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>How to Completely Remove Node.js from Your Computer</title><link>https://jsdev.space/howto/remove-nodejs/</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>How to Hire Kotlin Developers: A Comprehensive Guide</title><link>https://7span.com/blog/how-to-hire-kotlin-developers</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Raydium Volume Bot V3: Volume Bot in Raydium and Meteora</title><link>https://github.com/aiagentdev-sol/raydium-volume-bot</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Brisa v.0.2.5! Increasingly robust 🦾</title><link>https://brisa.build/blog/brisa-0.2.5</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>JavaScript Decorators &amp; Annotations: A Practical Guide to Metaprogramming</title><link>https://www.infinitecircuits.dev/blogs/blog/javascript-decorators-annotations-a-practical-guide-to-metaprogramming-vjl6dckieL0K6jpwqQrL</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Mastering React Refs: Advanced Techniques with useCombinedRef Hook</title><link>https://jsdev.space/usecombinedref-react/</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Boost React Performance: Avoid Re-Renders, Optimize State &amp; Server Components</title><link>https://www.infinitecircuits.dev/blogs/blog/boost-react-performance-avoid-re-renders-optimize-state-server-components-nLGvJLbVKt48HQLcvftw</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>HowTo Generate a GUID/UUID in JavaScript: Best Methods &amp; Examples</title><link>https://jsdev.space/howto/generate-uuid-js/</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>The Future of Frontend Engineering: Trends for 2025 and Beyond</title><link>https://www.infinitecircuits.dev/blogs/blog/the-future-of-frontend-engineering-trends-for-2025-and-beyond-NzB9LPTcdQZBWiRK5FH9</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Autho: Your Authy Desktop Alternative and Beyond (Open Source)</title><link>https://blog.niradler.com/autho-your-authy-desktop-alternative-and-beyond-open-source</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>React Server Components Explained: The Future of High-Performance React Apps?</title><link>https://www.infinitecircuits.dev/blogs/blog/react-server-components-explained-the-future-of-high-performance-react-apps-0jzYaIwUrSvbKpwP2yuz</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>RxDB - The Firestore Alternative That Can Sync with Your Own Backend</title><link>https://rxdb.info/articles/firestore-alternative.html</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>ESLint plugin for transforming negated boolean expressions via De Morgan’s laws</title><link>https://github.com/azat-io/eslint-plugin-de-morgan</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>API with NestJS #186. What’s new in Express 5?</title><link>https://wanago.io/2025/02/10/api-nestjs-express-5/</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Build a Vector Image Service Using ThreeJS and Vite | Tutorial</title><link>https://jsdev.space/image-vectorization/</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>🚀 How JavaScript Works: Understanding V8 JIT and Its Impact on UI Performance</title><link>https://www.infinitecircuits.dev/blogs/blog/how-javascript-works-understanding-v8-jit-and-its-impact-on-ui-performance-CVx99743MWKhLx9oTjbY</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Chronos v15.0</title><link>http://www.echojs.com/news/42822</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>SVAR Svelte Editor: Easy Way to Edit Structured Data Records</title><link>https://svar.dev/blog/svelte-editor-released/</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>How to Copy Text to Clipboard in JavaScript | Modern Methods</title><link>https://jsdev.space/howto/copy-text-js/</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>dinogameapp</title><link>https://dinogame.app/</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Flutter vs. React Native – Which is Better for Your Project?</title><link>https://7span.com/blog/flutter-vs-react-native</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>CORS Policy Explained: How to Fix Cross-Origin Errors in Web Development</title><link>https://www.infinitecircuits.dev/blogs/blog/cors-policy-explained-how-to-fix-cross-origin-errors-in-web-development-2CYsMVB4ceZmRjOoovZY</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Mastering React&apos;s useReducer Hook: State Management Guide</title><link>https://jsdev.space/react-hook-usereducer/</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Magento Development With Vue.js and React.js</title><link>https://parthdeveloper.livepositively.com/magento-development-with-vue-js-and-react-js/new=1</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Display the version of a deployed Angular application</title><link>https://medium.com/ekino-france/display-the-version-of-a-deployed-angular-application-608cd6fff3d6</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Network Security Explained: HTTPS, TLS, SSL, and Encryption 🔐</title><link>https://www.infinitecircuits.dev/blogs/blog/network-security-explained-https-tls-ssl-and-encryption-lbVrUEv541JEEAecVcpy</link><author></author><category>echojs</category><pubDate>Sat, 15 Feb 2025 22:04:22 +0000</pubDate><source url="http://www.echojs.com/">EchoJS</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Unlocking the Potential of Quantum Computing</title><link>https://developers.googleblog.com/en/unlocking-the-potential-of-quantum-computing-a-developers-guide-to-error-correction/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[A free Coursera course on quantum error correction, developed by Google Quantum AI, explains the importance of error correction in quantum computing and provides an overview of quantum errors.]]></content:encoded></item><item><title>The next chapter of the Gemini era for developers</title><link>https://developers.googleblog.com/en/the-next-chapter-of-the-gemini-era-for-developers/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[Gemini 2.0 Flash has enhanced capabilities like multimodal outputs and native tool use, and introduces new coding agents to improve developer productivity, now available for testing in Google AI Studio.]]></content:encoded></item><item><title>Registration is Open for Google Cloud Next 2025</title><link>https://developers.googleblog.com/en/registration-is-open-for-google-cloud-next-2025/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[Google Cloud Next 2025, happening April 9-11 in Las Vegas, will feature expanded developer content, interactive experiences, and opportunities to connect with peers and Google experts.]]></content:encoded></item><item><title>Introducing the Android XR SDK Developer Preview</title><link>https://developers.googleblog.com/en/introducing-android-xr-sdk-developer-preview/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[The Android XR SDK, a new platform for building extended reality (XR) experiences on Android, is now available for devs to try, and to give feedback.]]></content:encoded></item><item><title>Celebrating Flutter’s “Production Era”</title><link>https://developers.googleblog.com/en/celebrating-flutters-production-era/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[Flutter is transitioning into its “production era,” marked by widespread developer adoption and success stories, including deeper iOS fidelity, seamless platform integration, and enhanced developer tools, making it a top choice for building apps at scale.]]></content:encoded></item><item><title>Apigee API hub is now generally available</title><link>https://developers.googleblog.com/en/apigee-api-hub-is-now-generally-available/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[Apigee API hub is a centralized repository for your entire API ecosystem, providing a single source of truth.]]></content:encoded></item><item><title>Build Go applications using Project IDX and the Gemini API</title><link>https://developers.googleblog.com/en/build-go-applications-project-idx-gemini-api/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[Learn how to build Go applications using Project IDX, an AI-assisted workspace for full-stack app development.]]></content:encoded></item><item><title>Dive Deep into Gemini: Explore Starter Apps in AI Studio</title><link>https://developers.googleblog.com/en/deep-dive-gemini-developer-ready-starter-apps/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[Explore three Gemini starter apps that provide developers with production ready tools to build AI-powered projects with open source functionalities like spatial analysis, and video interactions.]]></content:encoded></item><item><title>Celebrating innovation: Gemini API Developer Competition</title><link>https://developers.googleblog.com/en/celebrating-innovation-gemini-api-developer-competition/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[Explore innovative projects from the Gemini API Competition, like Omni, EcoTrack, ITMZ, Jana AI, Eagle AI, and AlphaFit, demonstrating the potential of the Gemini API to enhance productivity, promote sustainability, and improve well-being.]]></content:encoded></item><item><title>Beyond English: How Gemma open models are bridging the language gap</title><link>https://developers.googleblog.com/en/building-more-inclusive-llms-using-gemma-open-models/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[AI Singapore and INSAIT teams have leveraged Gemma, a family of open-source language models, to create LLMs tailored to the unique needs of their communities, in a show of innovation and inclusivity in AI.]]></content:encoded></item><item><title>See the Similarity: Personalizing Visual Search with Multimodal Embeddings</title><link>https://developers.googleblog.com/en/see-the-similarity-personalizing-visual-search-with-multimodal-embeddings/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[Learn how to build a visual search tool using Google's Multimodal Embeddings API and explore how to apply this technology for searching images, slides, and more.]]></content:encoded></item><item><title>Gemini 2.0: Level Up Your Apps with Real-Time Multimodal Interactions</title><link>https://developers.googleblog.com/en/gemini-2-0-level-up-your-apps-with-real-time-multimodal-interactions/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[The Multimodal Live API for Gemini 2.0 enables real-time multimodal interactions between humans and computers, and can be used to build real-time virtual assistants and adaptive educational tools.]]></content:encoded></item><item><title>Build the future of home with Google Home APIs</title><link>https://developers.googleblog.com/en/build-the-future-of-home-with-google-home-apis/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[The Google Home APIs are now in public developer beta for Android, allowing developers to build innovative smart home experiences for over 600M devices using Google's hubs, Matter infrastructure, and automation engine.]]></content:encoded></item><item><title>Building a better smart home</title><link>https://developers.googleblog.com/en/building-a-better-smart-home-expanding-access-for-developers-and-users/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[The public beta launch of Home APIs for Android allows developers to create better smart home experiences. This launch emphasizes investments in Matter to improve device connectivity and interoperability, and increase smart home accessibility.]]></content:encoded></item><item><title>Google AI Developers Community Spotlight Contest</title><link>https://developers.googleblog.com/en/google-ai-developers-community-spotlight-contest/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[The Google AI Developers Community Spotlight Contest is seeking innovative, diverse projects using Google's AI tools like Gemini and Gemma to create code repositories, videos, documentation, and more.]]></content:encoded></item><item><title>Vertex AI RAG Engine: A developers tool</title><link>https://developers.googleblog.com/en/vertex-ai-rag-engine-a-developers-tool/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[Vertex AI RAG Engine, a managed orchestration service, streamlines the process of retrieving and feeding relevant information to Large Language Models. This enables developers to build robust, grounded generative AI apps that ensure responses are factually grounded.]]></content:encoded></item><item><title>Gemini 2.0: Flash, Flash-Lite and Pro</title><link>https://developers.googleblog.com/en/gemini-2-family-expands/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[The Gemini 2.0 model family is seeing significant updates, including the release of Gemini 2.0 Flash, which is now production-ready and boasts higher rate limits, enhanced performance, and simplified pricing. Developers can also start testing an updated experimental version of Gemini 2.0 Pro today. Additionally, a new variant called Gemini 2.0 Flash-Lite, specifically designed for large-scale workloads, will be made available next week.]]></content:encoded></item><item><title>Imagen 3 arrives in the Gemini API</title><link>https://developers.googleblog.com/en/imagen-3-arrives-in-the-gemini-api/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[Imagen 3 – now available in Google AI Studio and the Gemini API – offers developers state-of-the-art image generation with brighter, better-composed images in diverse styles, and simplified image generation through text prompts.]]></content:encoded></item><item><title>Get ready for Google I/O May 20-21</title><link>https://developers.googleblog.com/en/get-ready-for-google-io-2025/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[Google I/O returns May 20-21. Watch the livestreams for updates on Android, AI, web, and cloud. Registration is open on the Google I/O website.]]></content:encoded></item><item><title>Beyond the Chatbot: Agentic AI with Gemma</title><link>https://developers.googleblog.com/en/beyond-the-chatbot-agentic-ai-with-gemma/</link><author></author><category>googledev</category><pubDate>Sat, 15 Feb 2025 22:04:12 +0000</pubDate><source url="https://developers.googleblog.com/rss/">Google Developers</source><content:encoded><![CDATA[A practical guide to constructing a Gemma 2-based Agentic AI system – a type of AI that can make its own decisions and use external tools to achieve goals – that can generate dynamic content for a fictional game world.]]></content:encoded></item><item><title>Infocon: green</title><link>https://isc.sans.edu/diary.html?rss</link><author></author><category>infosec</category><pubDate>Sat, 15 Feb 2025 21:40:03 +0000</pubDate><source url="https://isc.sans.edu/">Sans Edu Diaries</source><content:encoded><![CDATA[The Danger of IP Volatility]]></content:encoded></item><item><title>The World&apos;s Most Printed 3D Model, 3DBenchy, Is Now Public Domain</title><link>https://hardware.slashdot.org/story/25/02/15/1949206/the-worlds-most-printed-3d-model-3dbenchy-is-now-public-domain?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sat, 15 Feb 2025 21:34:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[Hackaday reports:

Good news for everyone who cannot get enough from improbably shaped boats that get referred to as a bench: the current owner (NTI Group) of the copyright has announced that 3DBenchy has been released into the public domain. This comes not too long after Prusa's Printables website had begun to purge all derived models to adhere to the 'no derivatives' license. According to NTI, the removal of these derived models was not requested by NTI, but by a third-party report, unbeknownst to NTI or the original creator of the model. Recognizing its importance to the community, 3DBenchy can now be downloaded & modified freely. 


NTI worked together with the original creator [Daniel Norée] and former Creative Tools CEO [Paulo Kiefe] to transition 3DBenchy and the associated website to the public domain

More details at Tom's Hardware and Fabbaloo.]]></content:encoded></item><item><title>Watt The Fox?</title><link>https://h.43z.one/blog/2025-02-12/</link><author>h43z</author><category>hn</category><pubDate>Sat, 15 Feb 2025 21:32:13 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[It's not nothing—about 1.5 Watt more.So, with a heavy heart, I decided to disable email notifications—even though I really wanted to keep them—but eliminating the white noise was my priority.I thought I had “fixed” the problem. Of course, I blamed Microsoft, right?But the red sound indicator on my i3 status bar kept lighting up occasionally.
    And it turned out other websites were also triggering the white noise.For instance, as soon as I clicked anywhere on x.com, the noise started. Similarly, whenever I listened to a translation on translate.google.com, there was the noise.So now I was really curious. What is going on here.I started to look up how you can play audio with HTML/JavaScript.
    There seem to be two ways: Either with the  tag or the WebAudio API.As Outlook plays sound dynamically, I knew it must use the WebAudio API.
    And to do anything with audio, you first have to create an .const audioCtx = new AudioContext();And already here I realized the problem. Just creating this AudioContext makes my speakers play white noise.The MDN article is pretty clear about it.AudioContext.suspend()
Suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process.

AudioContext.resume()
Resumes the progression of time in an audio context that has previouslyYet, most websites never bother suspending the AudioContext and create one without the immediate need for playing sound.Chrome stops the battery/CPU waste automatically afte some time. Firefox not. It just keeps playing the whitenoise.I understand that the websites are to blame here.But still, Cmon Firefox, protect me from this resource theft?!Oh and btw I suspect this also wastes my bluetooth headphones battery if they are connected?! Once I do a click on x.com the sending of white noise starts.To address this total mess, I created an extension that automatically suspends the AudioContext while also
tries to resume it if the websites wants to play sound.It's not perfect as resuming takes a little bit of time and it
  may not always resume, as there are multiple paths to starting audio. But it's good enough for me.Some Relevant Bugzilla reports

More fun stuff at h.43z.one.
Unshadow ban me at 𝕏]]></content:encoded></item><item><title>The European Vat Is Not a Discriminatory Tax Against US Exports</title><link>https://taxfoundation.org/blog/trump-reciprocal-tariffs-eu-vat-discriminatory/</link><author>dzogchen</author><category>hn</category><pubDate>Sat, 15 Feb 2025 21:20:34 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[The Trump administration has once again floated the idea of “reciprocal” tariffs on foreign countries. While it is unclear what formula the administration will use to determine what is “reciprocal,” the intention of responding to foreign charges—real and perceived—is clear enough.In the past, the administration has made general assertions about different  and nontariff barriers that American exporters face that should be rectified by “reciprocal” US tariffs. Trump commonly mentions that the EU charges a 10 percent import  on US vehicles while the US only levies a 2.5 percent tariff on European cars coming into the US. Though one can certainly find examples of higher trade barriers abroad, the overall tariff gap between the US and its trading partners is relatively minor—and any increase in US tariffs will ultimately be paid by US businesses and consumers.  However, when discussing trade with the EU specifically, White House deputy chief of staff, Stephen Miller, added a new policy grievance to the mix: value-added taxes (VAT).  “Did you know when you ship a car from the US to Europe, if they let it in at all because they have many nontariff barriers, between the VAT and duties, that car is taxed at 30%? The German car—or a European car sent the America is taxed at 2.5%—or basically 0.”His statement assumes that a VAT discriminates against American car exports like a tariff, and conversely, that the VAT rebate provided to European car producers exporting to the US constitutes a subsidy and the car then simply faces a tariff and no VAT. (It is worth noting that both a domestic automobile and a European car sold in the US would face US state .)  may seem like a compelling political argument to justify across-the-board tariffs on the EU, it instead reflects a complete misunderstanding of what a VAT is and how it works. Worse, it misplaces the blame for a lack of US competitiveness on the European VAT instead of reevaluating the flaws of both the US federal and state tax systems.  What is VAT and how does it work for exported goods?VATs are border-adjusted, meaning they rebate tax on exports and impose tax on imports. Despite the appearance of subsidizing exports and punishing imports, however, a border-adjusted VAT is trade neutral. A border adjusted tax leads to currency appreciation for the imposing country, which would make it cheaper to import goods, more expensive to export goods, and thus would cancel out the apparent benefits of the tax on imports and the rebate on exports.If there is a complaint to be made about tax policy and implications for US competitiveness in Europe, it is about uncompetitive state sales tax structures in the US system that yield what is known as “.”What is US sales tax and how does it work for exported goods? Unlike most countries, the United States does not impose a broad-based  at the national (federal) level, and state-level consumption taxes are designed as general sales taxes rather than value-added taxes. Whereas a VAT is imposed on the incremental increase in value of a good or service at each stage of production, a sales tax is imposed on the total transaction price of any taxed good or service.If a sales tax is imposed exclusively on final consumption, then VATs and sales taxes are economically identical. However, when the sales tax is applied to some intermediate transactions (“business inputs”), it results in tax pyramiding, where the tax is embedded in the price multiple times over.Consider the following example of a 5 percent VAT and two versions of a 5 percent sales tax—one which only applies to final consumption, and one which applies to certain intermediate transactions as well.VATs and Ideal Sales Taxes are Economically IdenticalA 5% VAT compared to a 5% ideal sales tax and a 5% sales tax with business input taxationNote that, while a VAT is imposed at every stage of the process, the net effect is to apply the rate one time to the final sales price. The tax is collected in increments (on the “value added” at each stage), but unlike with a pyramiding sales tax, it does not double tax inputs. The VAT and ideal sales tax share an identical  and, if imposed at the same rates, yield identical collections.US sales taxes are typically destination-based, meaning that the tax is owed where the product is received or consumed. If a European resident orders from a US retailer, they do not pay US sales tax, just like a US consumer can obtain a VAT rebate on purchases of European products. Neither is a subsidy. These are simply consumption taxes falling on the consumer.In practice, however, US sales taxes diverge sharply from the ideal. More than 40 percent of US sales tax revenue comes from intermediate transactions, which impose costs on US producers. This design flaw is not present in VATs, which do not double-tax intermediate transactions. Consequently, the sales tax imposes a penalty on domestic production that a VAT (or a better designed sales tax) would not. European VATs aren’t subsidizing anything—US states are just shooting themselves in the foot.Crucially, this is true in domestic as well as international sales. If a state’s sales tax only applied to final consumption, it would never put in-state businesses at a disadvantage against rivals in other states, because consumers elsewhere are subject to their own state’s sales tax. A Maryland resident pays 6 percent sales tax on whatever she orders (that’s subject to Maryland’s sales tax), regardless of whether she buys from a retailer in Maryland, or Delaware (with no sales tax), or Louisiana (with an average rate north of 10 percent). But when Maryland taxes business inputs, that imposes a cost on Maryland businesses that could be mitigated if businesses operated in lower-tax states or in states which include fewer inputs in their tax base.The disadvantages created by the sales tax, therefore, aren’t unique to goods exported abroad. They aren’t the consequence of trade policy, but of poor tax policy. Europe’s VATs are not tariffs and are not subsidizing European exports. Instead, US states’ poorly-designed sales taxes are harming their own businesses’ competitiveness—whether they’re selling down the street, across state lines, or around the world.What competitiveness issues remain with the US federal tax system?Just like state sales tax systems can create a competitive disadvantage for producers, certain elements of the federal income tax system harm incentives to invest domestically. Despite progress made by the 2017 Tax Cuts and Jobs Act, the US maintains long  schedules for structures investment, now requires amortization for research and development expenses, and is phasing out  for machinery and equipment investment. The absence of full, immediate deductions for investment increases the cost of capital, and thus discourages investment and wage growth.Rather than focus on raising tariffs, which increase the cost of operating in the United States and reduce total output and productivity, fiscal policy reforms to improve the structure of the federal income tax system can better boost competitiveness of the US manufacturing sector.Countries have many reasons why they apply different tariff rates to different products. In the case of the United States, some tariffs date back to the 1930s Smoot-Hawley tariff schedule, while other US trade barriers take on non-tariff forms. The Trump administration appears to be moving in a “reciprocal” policy direction despite the significant negative economic consequences for American consumers of across-the-board tariffs on goods coming into the US. However, the EU’s VAT system should not be used as a justification for retaliatory tariffs. Stay informed on the tax policies impacting you.Subscribe to get insights from our trusted experts delivered straight to your inbox.Subscribe]]></content:encoded></item><item><title>Design, Manufacturing and Open-Loop Control of a Soft Pneumatic Arm: Bending Experiments</title><link>https://hackernoon.com/design-manufacturing-and-open-loop-control-of-a-soft-pneumatic-arm-bending-experiments?source=rss</link><author>EScholar: Electronic Academic Papers for Scholars</author><category>tech</category><pubDate>Sat, 15 Feb 2025 21:00:03 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[(1) Jorge Francisco Garcia-Samartın, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain (jorge.gsamartin@upm.es);(2) Adrian Rieker, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain;(3) Antonio Barrientos, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain.3 PAUL: Design and Manufacturing 4 Data Acquisition and Open-Loop Control The first experiment consisted of analysing the deflection of a segment versus swelling time. For this purpose, one of the bladders was inflated continuously, in intervals of 100 ms. For each time, PAUL end coord\
where x0 and y0 denote initial position of PAUL end.\
Since the weight of the subsequent modules influences the behaviour of the first segment, the experiment was repeated by placing first one and then two additional segments. The results are shown in Figure 18.\
As can be seen, PAUL is capable of bending up to 40◦ to its vertical axis and the addition of new segments does not cause any noticeable decrease in its bending capacity.\
Although it remains far from the 80◦ of [28] or the 70◦ of [32], Pneunet segments and therefore more flexible, this is an acceptable bending capacity. Moreover, the fact that it does not substantially lose its bending capacity by adding segments makes it possible to concatenate bending movements and thus overcome obstacles that a rigid robot would not be able to overcome.\
In conjunction with this, a validation test was proposed whose purpose was to demonstrate PAUL’s ability to flex thanks to its deformable geometry. The aim was to point points in lateral planes. The results of this experiment are shown in Figure 19. The images, extracted from the video of Appendix A, show how the manipulator can adopt different shapes, is able to bend up to 40◦ and adapt, in case of obstacles, to a wide variety of geometries, which undoubtedly makes PAUL a fundamental ally in inspection and exploration operations in very cluttered environments.]]></content:encoded></item><item><title>Apple Intelligence could arrive on Vision Pro in April</title><link>https://techcrunch.com/2025/02/15/apple-intelligence-could-arrive-on-vision-pro-in-april/</link><author>Anthony Ha</author><category>tech</category><pubDate>Sat, 15 Feb 2025 20:56:08 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Apple is planning to add Apple Intelligence to its Vision Pro headset in an update that could come as early as April, according to Bloomberg’s Mark Gurman. Just a couple weeks after Apple Intelligence was first announced in June 2024, Gurman reported that Apple was looking to bring its suite of AI tools to the […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>Creating my OS</title><link>https://www.reddit.com/r/linux/comments/1iqaxku/creating_my_os/</link><author>/u/zainali28</author><category>linux</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 20:46:12 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[Now, I know it sounds absurd, but I just want to understand the general workflow of how do you design a linux, or a unix-based OS.I have a fair knowledge of computer architecture and can understand low level language of the computer.I am just an enthusiast who wants to just make a functional os, with just a terminal that is able to execute things.Any advice is greatly appreciated!]]></content:encoded></item><item><title>Amazon AWS &quot;whoAMI&quot; Attack Exploits AMI Name Confusion to Take Over Cloud Instances</title><link>https://www.reddit.com/r/programming/comments/1iqav3c/amazon_aws_whoami_attack_exploits_ami_name/</link><author>/u/Dark-Marc</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 20:43:12 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>America&apos;s Office-Occupancy Rates Drop by Double Digits - and More in San Francisco</title><link>https://it.slashdot.org/story/25/02/15/1716204/americas-office-occupancy-rates-drop-by-double-digits---and-more-in-san-francisco?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sat, 15 Feb 2025 20:34:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[SFGate shares the latest data on America's office-occupancy rates:

According to Placer.ai's January 2025 Office Index, office visits nationwide were 40.2% lower in January 2025 compared with pre-pandemic numbers from January 2019. 

But San Francisco is dragging down the average, with a staggering 51.8% decline in office visits since January 2019 — the weakest recovery of any major metro. Kastle's 10-City Daily Analysis paints an equally grim picture. From Jan. 23, 2025, to Jan. 28, 2025, even on its busiest day (Tuesday), San Francisco's office occupancy rate was just 53.7%, significantly lower than Houston's (74.8%) and Chicago's (70.4%). And on Friday, Jan. 24, office attendance in [San Francisco] was at a meager 28.5%, the worst of any major metro tracked... 


Meanwhile, other cities are seeing much stronger rebounds. New York City is leading the return-to-office trend, with visits in January down just 19% from 2019 levels, while Miami saw a 23.5% decline, per Placer.ai data. 

"Placer.ai uses cellphone location data to estimate foot traffic, while Kastle Systems measures badge swipes at office buildings with its security systems..."]]></content:encoded></item><item><title>NASA has a list of 10 rules for software development</title><link>https://www.cs.otago.ac.nz/cosc345/resources/nasa-10-rules.htm</link><author>vyrotek</author><category>hn</category><pubDate>Sat, 15 Feb 2025 20:24:13 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[NASA has a list of 10 rules for software developmentThose rules were written from the point of view of people writing
embedded software for extremely expensive spacecraft, where tolerating
a lot of programming pain is a good tradeoff for not losing a mission.
I do not know why someone in that situation does not use the SPARK
subset of Ada, which subset was explicitly designed for verification,
and is simply a better starting point for embedded programming than C.
I am criticising them from the point of view of people writing
programming language processors (compilers, interpreters, editors)
and application software.
We are supposed to teach critical thinking.  This is an example.
How have Gerard J. Holzmann's and my different contexts affected
our judgement?
Can you blindly follow his advice without considering 
context?
Can you blindly follow  advice without considering
your context?
Would these rules necessarily apply to a different/better
programming language?  What if function pointers
were tamed?  What if the language provided opaque abstract
data types as Ada does?
1. Restrict all code to very simple control flow constructs —
do not use  statements,
 or  constructs,
and direct or indirect .Note that  and 
are how C does exception handling, so this rule bans any use
of exception handling.

It is true that banning recursion and jumps and loops without
explicit bounds means that you  your program is
going to terminate.  It is also true that recursive functions
can be proven to terminate about as often as loops can, with
reasonably well-understood methods.  What's more important here is
that “sure to terminate” does not imply
“sure to terminate in my lifetime”:
    int const N = 1000000000;
    for (x0 = 0; x0 != N; x0++)
    for (x1 = 0; x1 != N; x1++)
    for (x2 = 0; x2 != N; x2++)
    for (x3 = 0; x3 != N; x3++)
    for (x4 = 0; x4 != N; x4++)
    for (x5 = 0; x5 != N; x5++)
    for (x6 = 0; x6 != N; x6++)
    for (x7 = 0; x7 != N; x7++)
    for (x8 = 0; x8 != N; x8++)
    for (x9 = 0; x9 != N; x9++)
        -- do something --;
This does a bounded number of iterations.  The bound is N.
In this case, that's 10.  If each iteration of the loop body
takes 1 nsec, that's 10 seconds, or about 7.9×10
years.  What is the  difference between “will stop
in 7,900,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
years” and “will never stop”?

Worse still, taking a problem that is  expressed
using recursion and contorting it into something that manipulates an
explicit stack, while possible, turns clear maintainable code into
buggy spaghetti.  (I've done it, several times.  There's an example
on this web site.  It is  a good idea.)

2. All loops must have a fixed upper-bound.  It must be trivially
possible for a checking tool to prove statically that a preset
upper-bound on the number of iterations of a loop cannot be exceeded.
If the loop-bound cannot be proven statically, the rule is considered
violated.This is an old idea.  As the example above shows, it is not enough
by itself to be of any practical use.  You have to try to make the
bounds reasonably , and you have to regard hitting an
artificial bound as a run-time error.

By the way, note that putting depth bounds on recursive procedures
makes them every bit as safe as loops with fixed bounds.

3. Do not use dynamic memory allocation after initialization.This is also a very old idea.  Some languages designed for embedded
work don't even  dynamic memory allocation.  The big
thing, of course, is that embedded applications have a fixed amount of
memory to work with, are never going to get any more, and should not
crash because they couldn't handle another record.

Note that the rationale actually supports a much stronger rule:
don't even  dynamic memory allocation.  You can of
course manage your own storage pool:
    typedef struct Foo_Record *foo;
    struct Foo_Record {
	foo next;
	...
    };
    #define MAX_FOOS ...
    static struct Foo_Record foo_zone[MAX_FOOS];
    foo foo_free_list = 0;

    void init_foo_free_list() {
	for (int i = MAX_FOOS - 1; i >= 0; i--) {
	    foo_zone[i].next = foo_free_list;
	    foo_free_list = &foo_zone[i];
	}
    }

    foo malloc_foo() {
	foo r = foo_free_list;
	if (r == 0) report_error();
	foo_free_list = r->next;
	return r;
    }

    void free_foo(foo x) {
	x->next = foo_free_list;
	foo_free_list = x;
    }
This  satisfies the rule, but it
violates the  of the rule.  Simulating malloc()
and free() this way is  than using the real
thing, because the memory in foo_zone is permanently tied up
for Foo_Records, even if we don't need any of those at the
moment but do desperately need the memory for something else.

What you really need to do is to use a memory allocator
with known behaviour, and to prove that the amount of memory
in use at any given time (data bytes + headers) is bounded
by a known value.

Note also that SPlint can verify at compile time that
the errors NASA speak of do not occur.

One of the reasons given for the ban is that the performance
of malloc() and free() is unpredictable.  Are these the only
functions we use with unpredictable performance?  Is there
anything about malloc() and free() which makes them
 unpredictable?  The existence of
hard-real-time garbage collectors suggests not.

The rationale for this rule says that

Note that the only way
to dynamically claim memory in the absence of memory allocation from the
heap is to use stack memory.  In the absence of recursion (Rule 1), an
upper bound on the use of stack memory can derived statically, thus
making it possible to prove that an application will always live within
its pre-allocated memory means.
Unfortunately, the sunny optimism shown here is unjustified.  Given
the ISO C standard (any version, C89, C99, or C11) it is 
to determine an upper bound on the use of stack memory.  There is not even
any standard way to determine how much memory a compiler will use for the
stack frame of a given function.  (There could have been.  There just isn't.)
There isn't even any requirement that two invocations of the same function
with the same arguments will use the same amount of memory.
Such a bound can only be calculated for a  version of a
specific compiler with specific options.  Here's a trivial example:
void f() {
    char a[100000];
}
How much memory will that take on the stack?  Compiled for debugging,
it might take a full stack frame (however big that is) plus traceback
information plus a million bytes for a[].  Compiled with optimisation,
the compiler might notice that a[] isn't used, and might even compile
calls to f() inline so that they generate no code and take no space.
That's an extreme example, but not really unfair.  If you want bounds
you can rely on, you had better  what your compiler does,
and recheck every time anything about the compiler changes.

4.  No function should be longer than what can be printed on
a single sheet of paper in a standard reference format with one line per
statement and one line per declaration.  Typically, this means no more
than about 60 lines of code per function.Since programmers these days typically read their code on-screen,
not on paper, it's not clear why the size of a sheet of paper is
relevant any longer.

The rule is arguably stated about the wrong thing.  The thing that
needs to be bounded is not the size of a function, but the size of a
chunk that a programmer needs to read and comprehend.

There are also question marks about how to interpret this if you
are using a sensible language (like Algol 60, Simula 67, Algol 68,
Pascal, Modula2, Ada, Lisp, functional languages like ML, O'CAML,
F#, Clean, Haskell, or Fortran) that allows nested procedures.
Suppose you have a folding editor that presents a procedure to
you like this:
function Text_To_Floating(S: string, E: integer): Double;
   � variables �
   � procedure Mul(Carry: integer) �
   � function Evaluate: Double �

   Base, Sign, Max, Min, Point, Power := 10, 0, 0, 1, 0, 0;
   for N := 1 to S.length do begin
       C := S[N];
       if C = '.' then begin
          Point := -1
       end else
       if C = '_' then begin
          Base := Round(Evaluate);
          Max, Min, Power := 0, 1, 0
       end else
       if Char ≠ ' ' then begin
          Q := ord(C) - ord('0');
          if Q > 9 then Q := ord(C) - ord('A') + 10
          Power := Point + Point
          Mul(Q)
       end
    end;
    Power := Power + Exp;
    Value := Evaluate;
    if Sign < 0 then Value := -Value;
end;
which would be much bigger if the declarations
were expanded out instead of being hidden behind �folds�.
Which size do we count?  The folded size or the unfolded size?
I was using a folding editor called Apprentice on the Classic Mac
back in the 1980s.  It was written by Peter McInerny and was lightning
fast.

5.  The  of the code should average to a minimum of
two assertions per function.Assertions are wonderful documentation and the very best debugging tool
I know of.  I have never seen any real code that had too many assertions.

The example here is one of the ugliest pieces of code I've seen in a while.
if (!c_assert(p >= 0) == true) {
    return ERROR;
}
It should, of course, just be
if (!c_assert(p >= 0)) {
    return ERROR;
}
Better still, it should be something like
#ifdef NDEBUG
#define check(e, c) (void)0
#else
#define check(e, c) if (!(c)) return bugout(c), (e)
#ifdef NDEBUG_LOG
#define bugout(c) (void)0
#else
#define bugout(c) \
    fprintf(stderr, "%s:%d: assertion '%s' failed.\n", \
    __FILE__, __LINE__, #s)
#endif
#endif
Ahem.  The more interesting part is the required density.
I just checked an open source project from a large telecoms
company, and 23 out of 704 files (not functions) contained
at least one assertion.  I just checked my own Smalltalk
system and one SLOC out of every 43 was an assertion, but
the average Smalltalk “function” is only a few
lines.  If the biggest function allowed is 60 lines, then
let's suppose the average function is about 36 lines, so
this rule requires 1 assertion per 18 lines.
Assertions are good, but what they are especially good
for is expressing the requirements on data that come
from outside the function.  I suggest then that
Every argument whose validity is not guaranteed by
its typed should have an assertion to check it.
Every datum that is obtained from an external
source (file, data base, message) whose validity is
not guaranteed by its type should have an assertion
to check it.
The NASA 10 rules are written for embedded systems, where
reading stuff from sensors is fairly common.

6.  Data objects must be declared at the smallest possible level of
scope.This is excellent advice, but why limit it to data objects?
Oh yeah, the rules were written for crippled languages where you
 declare functions in the right place.

People using Ada, Pascal (Delphi), JavaScript, or functional
languages should also declare types and functions as locally as
possible.

7.  The return value of non-void functions must be checked by each
calling function, and the validity of parameters must be checked inside
each function.This again is mainly about C, or any other language that indicates
failure by returning special values.  “Standard libraries
famously violate this rule”?  No, the  library does.

You have to be reasonable about this: it simply isn't practical
to check  aspect of validity for 
argument.  Take the C function
void *bsearch(
    void const *key  /* what we are looking for */,
    void const *base /* points to an array of things like that */,
    size_t      n    /* how many elements base has */,
    size_t      size /* the common size of key and base's elements */
    int (*      cmp)(void const *, void const *)
);
This does a binary search in an array.  We must have key≠0,
base≠0, size≠0, cmp≠0, cmp(key,key)=0, and for all
1<i<n,
cmp((char*)base+size*(i-1), (char*)base+size*i) <= 0
Checking the validity in full would mean checking
that [key..key+size) is a range of readable addresses,
[base..base+size*n) is a range of readable addresses,
and doing n calls to cmp.  But the whole point of binary
search is to do O(log(n)) calls to cmp.

The fundamental rules here are
Don't let run-time errors go un-noticed, and
any check is safer than no check.
8. The use of the preprocessor must be limited to the inclusion of
header files and simple macro definitions.  Token pasting, variable
argument lists (ellipses), and recursive macro calls are not allowed.Recursive macro calls don't really work in C, so no quarrel there.
Variable argument lists were introduced into macros in
C99 so that you could write code like
#define err_printf(level, ...) \
    if (debug_level >= level) fprintf(stderr, __VA_ARGS__)
...
    err_printf(HIGH, "About to frob %d\n", control_index);
This is a  thing; conditional tracing like this is a
powerful debugging aid.  It should be , not banned.

The rule goes on to ban macros that expand into things that are
not complete syntactic units.  This would, for example, prohibit
simulating try-catch blocks with macros.  (Fair enough, an earlier rule
banned exception handling anyway.)  Consider this code fragment, from
an actual program.
    row_flag = border;     
    if (row_flag) printf("\\hline");
    for_each_element_child(e0, i, j, e1)
        printf(row_flag ? "\\\\\n" : "\n");
        row_flag = true;  
        col_flag = false;
        for_each_element_child(e1, k, l, e2)
            if (col_flag) printf(" & ");
            col_flag = true;
            walk_paragraph("", e2, "");
        end_each_element_child
    end_each_element_child
    if (border) printf("\\\\\\hline");
    printf("\n\\end{tabular}\n");
It's part of a program converting slides written in something like HTML
into another notation for formatting.  The 
…  loops walk over a tree.  Using
these macros means that the programmer has no need to know and no reason to
care how the tree is represented and how the loop actually works.
You can easily see that  must have at
least one unmatched { and  must have at least one
unmatched }.  That's the kind of macro that's banned by requiring
complete syntactic units.  Yet the readability and maintainability of
the code is  improved by these macros.

One thing the rule covers, but does not at the beginning stress, is
“no  macro processing”.  That is,
no #if.  The argument against it is, I'm afraid, questionable.  If there
are 10 conditions, there are 2 combinations to test,
whether they are expressed as compile-time conditionals or run-time
conditionals.

In particular, the rule against conditional macro processing
would prevent you defining your own assertion macros.
It is not obvious that that's a good idea.

9.  The use of pointers should be restricted.  Specifically, no more
than one level of dereferencing is allowed.  Pointer dereference
operations may not be hidden in macro definitions or inside typedef
declarations.  Function pointers are not permitted.Let's look at the last point first.

double integral(double (*f)(double), double lower, double upper, int n) {
    // Compute the integral of f from lower to upper 
    // using Simpson's rule with n+1 points.
    double const h = (upper - lower) / n;
    double       s;
    double       t;
    int          i;
    
    s = 0.0;
    for (i = 0; i < n; i++) s += f((lower + h/2.0) + h*i);
    t = 0.0;
    for (i = 1; i < n; i++) t += f(lower + h*i);
    return (f(lower) + f(upper) + s*4.0 + t*2.0) * (h/6.0);
}
This kind of code has been important in numerical calculations since
the very earliest days.  Pascal could do it.  Algol 60 could do it.
In the 1950s, Fortran could do it.  And NASA would ban it, because in
C,  is a function pointer.

Now it's important to write functions like this once and only once.
For example, the code has at least one error.  The comment says n+1
points, but the function is actually evaluated at 2n+1 points.  If we
need to bound the number of calls to f in order to meet a deadline,
having that number off by a factor of two will not help.
It's nice to have just one place to fix.
Perhaps I should not have copied that code from a well-known source (:-).
Certainly I should not have more than one copy!

What can we do if we're not allowed to use function pointers?
Suppose there are four functions foo, bar, ugh, and zoo that we need
to integrate.  Now we can write
enum Fun {FOO, BAR, UGH, ZOO};

double call(enum Fun which, double what) {
    switch (which) {
        case FOO: return foo(what);
        case BAR: return bar(what);
        case UGH: return ugh(what);
        case ZOO: return zoo(what);
    }
}

double integral(enum Fun which, double lower, double upper, int n) {
    // Compute the integral of a function from lower to upper 
    // using Simpson's rule with n+1 points.
    double const h = (upper - lower) / n;
    double       s;
    double       t;
    int          i;
    
    s = 0.0;
    for (i = 0; i < n; i++) s += call(which, (lower + h/2.0) + h*i);
    t = 0.0;
    for (i = 1; i < n; i++) t += call(which, lower + h*i);
    return (call(which, lower) + call(which, upper) + s*4.0 + t*2.0) * (h/6.0);
}
Has obeying NASA's rule made the code more reliable?  No, it has made
the code  to understand,  maintainable, and
 that it wasn't before.  Here's a call
illustrating the mistake:
x = integral(4, 0.0, 1.0, 10);I have checked this with two C compilers and a static checker at their
highest settings, and they are completely silent about this.

So there are legitimate uses for function pointers, and simulating
them makes programs , not better.

Now  in Fortran,
Algol 60, or Pascal.  Those languages had procedure 
but not procedure . You could pass a subprogram name as
a parameter, and such a parameter could be passed on, but you could not
store them in variables.  You could have a  of C which
allowed function pointer parameters, but made all function pointer
variables read-only.  That would give you a statically checkable subset
of C that allowed integral().

The other use of function pointers is simulating object-orientation.
Imagine for example
struct Channel {
    void (*send)(struct Channel *, Message const *);
    bool (*recv)(struct Channel *, Message *);
    ...
};
inline void send(struct Channel *c, Message const *m) {
    c->send(c, m);
}
inline bool recv(struct Channel *c, Message *m) {
    return c->recv(c, m);
}
This lets us use a common interface for sending and receiving
messages on different kinds of channels.  This approach has been
used extensively in operating systems (at least as far back as
the Burroughs MCP in the 1960s) to decouple the code that uses
a device from the actual device driver.     I would expect any
program that controls more than one hardware device to do something
like this.  It's one of our key tools for controlling complexity.
Again, we can simulate this, but it makes adding a new kind of
channel harder than it should be, and the code is 
when we do it, not better.

The rule against more than one level of dereferencing is also
an assault on good programming.  One of the key ideas that was
developed in the 1960s is the idea of ;
the idea that it should be possible for one module to define a
data type and operations on it and another module to use instances
of that data type and its operations without having to know
anything about what the data type is.
One of the things I detest about Java is that it spits in the
face of the people who worked out that idea.  Yes, Java (now) has
generic type parameters, and that's good, but you cannot use a
 type without knowing what that type is.

Suppose I have a module that offers operations
And suppose that I have two interfaces in mind.  One of them
uses integers as tokens.
// stasher.h, version 1.
typedef int token;
extern token stash(item);
extern item  recall(token);
extern void  delete(token);
Another uses pointers as tokens.
// stasher.h, version 2.
typedef struct Hidden *token;
extern  token stash(item);
extern  item  recall(token);
extern  void  delete(token);
void snoo(token *ans, item x, item y) {
    if (better(x, y)) {
	*ans = stash(x);
    } else {
	*ans = stash(y);
    }
}
By the NASA rule, the function snoo() would not be accepted or rejected on
its own merits.  With stasher.h, version 1, it would be accepted.
With stasher.h, version 2, it would be rejected.

One reason to prefer version 2 to version 1 is that version 2 gets
more use out of type checking.  There are ever so many ways to get an
int in C.  Ask yourself if it ever makes sense to do
token t1 = stash(x);
token t2 = stash(y);
delete(t1*t2);
I really do not like the idea of banning abstract data types.

10.  All code must be compiled, from the first day of development,
with all compiler warnings enabled at the compiler’s
most pedantic setting.  All code must compile with these setting without
any warnings.  All code must be checked daily with at least one, but
preferably more than one, state-of-the-art static source code analyzer
and should pass the analyses with zero warnings.This one is good advice.  Rule 9 is really about making your code
worse in order to get more benefit from limited static checkers.  (Since
C has no standard way to construct new functions at run time, the set of
functions that a particular function pointer  point to can
be determined by a fixed-point data flow analysis, at least for most
programs.)  So is rule 1.  



]]></content:encoded></item><item><title>Soft Robots and Smart Movement</title><link>https://hackernoon.com/soft-robots-and-smart-movement?source=rss</link><author>EScholar: Electronic Academic Papers for Scholars</author><category>tech</category><pubDate>Sat, 15 Feb 2025 20:15:03 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[(1) Jorge Francisco Garcia-Samartın, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain (jorge.gsamartin@upm.es);(2) Adrian Rieker, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain;(3) Antonio Barrientos, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain.3 PAUL: Design and Manufacturing 4 Data Acquisition and Open-Loop Control The size of the table to achieve acceptable kinematic modelling was set experimentally, as no previous references were available and previous works in the literature were very variable in terms of the number of data required. Furthermore, the possibility of an error occurring in the pneumatic system or the buffer of the vision acquisition system collapsing, together with the always present possibility of a leak in the segments, made it advisable to take data in small sessions and subsequently union of all of them. Since the data collection process was automated, this did not pose much of a problem.\
Although the possibility that the ambient temperature was a factor that influenced the kinematics of the robot was considered during the dataset collection process, it was finally proven that small variations in temperature did not affect the behaviour.\
Table 3 shows the datasets that were taken, the total time necessary to obtain them and the average time per point. It should be taken into account that not all captured positions were finally used, since, if the camera did not correctly detect the positions of the three beacon spheres, it could not calculate the orientation of the trihedral and therefore returned an error code. Of the 1200 samples collected, 5% had to be discarded, leaving 1146 finally usable. The average time per point, considering all the datasets collected, was 6.76 s, with a standard deviation of 0.63 s. The low variability between capture processes proves the effectiveness of the automated method designed.\
Once all the datasets were combined, the direct and inverse kinematic models presented here were validated. The validation of the direct model consisted of sending the robot a combination of inflation times and measuring the distance between the position reached, captured by the cameras, and that predicted by the table. Repeating the experiment for 40 points, the histogram of results presented in Figure 15 was observed. The average error is 4.27 mm, the median error 2.72 mm, and the standard deviation 1.99 mm.\
The high standard deviation and the shape of the histogram, tilted towards low values and with a very long tail, seem to indicate the existence of points where the model presents notable failures along with others with very good results. A future line of interest could be the detailed analysis of the workspace to locate where those regions of lower precision of the model are located and try to look for failures, perhaps leading to a greater density of points in the dataset.\
In the same way, the inverse kinematic model was tested. To do this, PAUL was given a reference position and orientation to achieve, the necessary times were calculated, using the procedures referred to in Equations (16), and (17) inflation was carried out. Subsequently, the position captured with the cameras was compared with the desired one.\
As expected, the existence of redundancies, in which equal position values are achieved with very different combinations of inflation times, introduces large uncertainties in the model, which the triangulation presented is not able to capture.\
Specifically, the inverse kinematic model has an average error of 10.78 mm, a median error of 9.22 mm and a standard deviation of 5.98 mm. While these errors may seem high, they are compared in Table 4 with other open-loop controllers presented in the literature. It can be clearly seen that they are in line with the results obtained and that they are even better than those obtained by smaller robots, where one would expect, due to the smaller working space, a higher accuracy (at least in data-driven models).\
It is worth highlighting, however, two experiments in which PAUL performed very satisfactorily, because the area of operation was restricted to a region where no redundancies were found to exist. They are available in the video of Appendix A.\
In the first of them, the robot was forced to reach a set of points located on the horizontal basis plane, also forcing the lower end of the last segment to be parallel to said\
plane. In all of them, errors less than 7 mm were achieved. Figure 16 shows the results of said experiment. With the aim of facilitating the understanding of the experiment, the beacon was changed for a laser pointer that points to the desired points, on which targets with a radius of 5 mm have been marked, allowing the accuracy achieved to be checked.\
In the second experiment, shown in Figure 17, points on the lower horizontal plane were also taken as reference, but without imposing that the lower face of the robot should remain parallel to it. In this case, accuracies of 2 cm were achieved.\
Although the inverse kinematic model therefore presents acceptable results, it must be commented that, in all these experiments, due to the geometry and material of the robot, at the moment in which PAUL reaches the desired position, it tends to acquire a movement damped oscillation. An attempt has been made to reduce it, despite everything, it is a very intrinsic phenomenon to the robot that is difficult to solve. A future line proposed, in this sense, is to try to rigidify the robot by introducing negative pressures that generate vacuum.]]></content:encoded></item><item><title>Perplexity Deep Research</title><link>https://www.perplexity.ai/hub/blog/introducing-perplexity-deep-research</link><author>vinni2</author><category>hn</category><pubDate>Sat, 15 Feb 2025 20:07:39 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Newly Curated 40+ Developer Fixes || Try it now :)</title><link>https://dev.to/0x2e_tech/newly-curated-40-developer-fixes-try-it-now--14fe</link><author>0x2e Tech</author><category>dev</category><category>rust</category><pubDate>Sat, 15 Feb 2025 20:03:25 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[
  
  
  1. Go Testing: Force Retests & Disable Caching
Go Testing: Forcing Retests and Disabling Test Caching  This guide tackles the common issue of stale test results in Go, focusing on how to reliably force retests and disable caching mechanisms.  We'll explore several practical, plug-and-play solutio... Read More
  
  
  2. Flutter Map Key Typing: A Practical Guide for Developers
Flutter Map Key Typing: A Practical Guide for Developers  Let's face it: dealing with map key typing in Flutter can be a real headache if you don't have a clear strategy.  This guide provides a no-nonsense, plug-and-play approach to mastering this as... Read More Flutter Development 
  
  
  3. Multi-task Learning in TensorFlow: A Practical Guide
Multi-task Learning in TensorFlow: A Practical Guide  This guide provides a plug-and-play solution for implementing multi-task learning in TensorFlow.  We'll tackle a common scenario: predicting both the sentiment (positive, negative, neutral) and th... Read More
  
  
  4. Tracking Weight Variance During Neural Network Training
Let's dive into how the variance of weights changes during neural network training.  This is crucial for understanding your model's learning process and diagnosing potential problems.  We'll cover practical methods for tracking this variance and inte... Read More
  
  
  5. Ruby Rescue Best Practices: Why Avoid ?
Hey there, fellow Rubyist! Let's tackle this common pitfall: why rescuing Exception => e is a bad idea and how to do it right.  We'll go beyond the basics and explore practical, plug-and-play solutions.  This is for folks who know some Ruby but want ... Read More
  
  
  6. Expo iOS App Store Transfer Error: "A required agreement is missing"
Decoding the "A required agreement is missing or has expired" Enigma After Expo App Store Transfer (SDK 51.0.0 and beyond)  Let's face it:  That error message is about as helpful as a chocolate teapot.  You've wrestled with your Expo app, successfull... Read More iOS App Development 
  
  
  7. Android Ktor Job Cancellation: A Practical Guide
Android Ktor Job Cancellation: A Practical Guide  Let's tackle that pesky "Job Cancelled" error when using Ktor on Android. This issue often pops up when a long-running Ktor request gets interrupted, perhaps by a configuration problem, user action, o... Read More Android Development 
  
  
  8. Mobile-Unfriendly Laravel Site? Fix it Now!
Alright coder, let's tackle this mobile responsiveness issue head-on.  Your Laravel site's looking great on desktop, but those tiny screens are giving you a headache?  Don't worry, we'll fix it.  This guide is your plug-and-play solution, assuming yo... Read More
  
  
  9. Angular 18 APP_INITIALIZER: Fixing Dependency Injection Issues
Angular 18 APP_INITIALIZER Dependency Injection woes? Let's fix it!  So, you're wrestling with Angular 18's APP_INITIALIZER and its frustrating dependency injection quirks?  Don't worry, you're not alone. This seemingly simple mechanism can turn into... Read More
  
  
  10. Jenkins Token Generation for DevOps: A Practical Guide
Alright, friend! Let's get you a Jenkins API token.  This is crucial for automating tasks and integrating Jenkins with other tools.  Forget the confusing docs – we're going straight to the action.  Understanding the Why:  Before diving in, let's clar... Read More
  
  
  11. Fixing Python's  Error: A Quick Guide
Conquering the AttributeError: module 'pkgutil' has no attribute 'ImpImporter' Beast  Let's face it: that error message is a real mood killer.  It screams, "Your Python environment is a bit of a mess!" But fear not, fellow coder! This isn't some insu... Read More
  
  
  12. Securely Wiping AES XTS Cipher Keys in Go: A Practical Guide
Securely Wiping AES XTS Cipher Key Material in Go: A Practical Guide  This guide provides a clear, actionable solution for securely wiping AES XTS cipher key material in Go.  We'll tackle this problem head-on, avoiding unnecessary jargon and focusing... Read More
  
  
  13. Xamarin Forms: Null Values in IValueConverter? Fix it!
Hey there, fellow Xaml warrior! Let's tackle this pesky null value problem in your Xamarin Forms IValueConverter.  It's a common hiccup, but once you understand the why and the how, you'll be converting values like a pro.   The Usual Suspects: Why Nu... Read More
  
  
  14. Postgres Timestamps: Storing with Time Zone Without UTC Conversion
Storing Timestamps with Time Zone in Postgres Without UTC Conversion: A Practical Guide  This guide provides a clear, actionable solution for storing timestamps with time zones in PostgreSQL without the automatic conversion to UTC.  We'll tackle this... Read More
  
  
  15. Fix "cannot load such file -- utils/popen" on macOS
Alright, friend! Let's tackle this pesky "cannot load such file -- utils/popen" error you're encountering with Homebrew on your macOS system. This usually pops up when Ruby can't find the popen utility, which is crucial for some processes.  We'll wal... Read More
  
  
  16. Flutter Web Self-Signed SSL: A Practical Guide
Flutter Web Self-Signed Certificate Requests: A Straightforward Guide  Let's tackle that pesky self-signed certificate issue in Flutter web development.  You've built your awesome app, connected to your server... but BAM!  That self-signed certificat... Read More Flutter Web Development 
  
  
  17. Docker XRDP Resolution Fix: A Practical Guide
Docker XRDP Resolution Fix: A Practical Guide  Let's face it: wrestling with Docker and XRDP resolution can feel like a black hole of frustration.  You've got your awesome Docker setup, your XRDP server humming, but the display is all wonky.  Fear no... Read More
  
  
  18. Angular Drag-and-Drop: Fixing Nested List Issues
Angular Drag-and-Drop with Deeply Nested Lists: A Practical Guide  Let's face it: drag-and-drop in Angular with deeply nested lists can be a real headache.  The basic functionality often works fine for simple lists, but the moment you add nesting, th... Read More
  
  
  19. MySQL Error 1698: iRedMail Root Access Fix
Alright, friend! Let's tackle this "ERROR 1698 (28000): Access denied for user 'root'@'localhost'" issue head-on.  This is a common problem in MySQL, especially when working with iRedMail.  It basically means your root user, the king of your MySQL ki... Read More
  
  
  20. Docker to Host File Transfer: A Practical Guide
Copying Files from Docker Container to Host: A Practical Guide  This guide provides a no-nonsense, step-by-step approach to copying files from your Docker container to your host machine.  We'll cover various methods, ensuring you have the tools to ta... Read More
  
  
  21. Securely Wiping AES XTS Cipher Keys in Go: A Practical Guide
Securely Wiping AES XTS Cipher Key Material in Go: A Practical Guide  This guide provides a practical, step-by-step solution for securely wiping AES XTS cipher key material in Go.  We'll focus on eliminating sensitive data from memory to prevent pote... Read More
  
  
  22. Doubly-Ended Array Priority Queue: Mastering Node Partnerships
Mastering Node Partnerships in a Doubly-Ended Array-Based Priority Queue (DEAP)  Let's tackle the challenge of correctly managing node partnerships within a Doubly-Ended Array-Based Priority Queue (DEAP).  This isn't your grandma's priority queue; we... Read More Data Structures and Algorithms 
  
  
  23. Node ESM + Log4js: A Practical Guide
Conquering Log4js in Your Node.js ESM Project: A Plug-and-Play Guide  Let's be honest, wrestling with Log4js in an ES module Node.js project can feel like a wrestling match with a greased pig.  But fear not, fellow developer! This guide will walk you... Read More
  
  
  24. Fixing SwiftUI Font Twitching: A Practical Guide
SwiftUI Font Twitching:  A Practical Guide for iOS Developers  Let's be honest, that twitching font in your SwiftUI animation is annoying.  It's like a tiny, digital mosquito buzzing around your otherwise perfect UI. But fear not, fellow developer! W... Read More
  
  
  25. Resize SVG Responsively with D3.js: A Practical Guide
SVG Dimensions on Window Resize: A D3.js Plug-and-Play Solution  This guide provides a straightforward, actionable solution for dynamically resizing SVG elements within a D3.js visualization to match window changes.  We'll ditch the fluff and get str... Read More
  
  
  26. Demystifying Logits & Softmax in TensorFlow: A Practical Guide
Demystifying Logits and Softmax in TensorFlow: A Practical Guide  This guide provides a clear, practical explanation of logits and the difference between softmax and softmax_cross_entropy_with_logits in TensorFlow, focusing on direct application and ... Read More
  
  
  27. JS DevTools: "Function was resolved from bound function" Fix
Alright, detective! Let's crack this 'Function was resolved from bound function' mystery in your JavaScript DevTools.  This cryptic message usually pops up when you're dealing with functions and their context (where they're called from) isn't what yo... Read More
  
  
  28. VueDatePicker + v-mask: A Practical Guide
Mastering the Mashup: VueDatePicker and v-mask  Let's face it:  combining VueDatePicker and v-mask can feel like wrestling a greased pig.  But fear not, fellow developer! This guide will walk you through a smooth, streamlined integration, turning tha... Read More
  
  
  29. Is My Image Gamma Encoded? A NumPy Guide for Image Pros
Hey there, fellow image processing enthusiast!  Let's tackle this gamma encoding mystery. You've loaded your image into NumPy, and now you're wondering: Is it gamma-encoded or not?  Fear not! We'll unravel this with a practical, plug-and-play approac... Read More Image Processing 
  
  
  30. MySQL Functions: Returning Multiple Rows
Returning multiple rows from a MySQL function can be tricky, but it's definitely doable. The key is understanding that MySQL functions, unlike stored procedures, are designed to return a single value.  To get around this limitation, we'll leverage a ... Read More
  
  
  31. Flutter Web Theme Meta Tags: Why Mobile Browsers Ignore Them?
Flutter Web Theme Meta Tags: Why Mobile Browsers Ignore Them?  Let's tackle this head-on.  You've diligently crafted your Flutter web app, meticulously set your theme meta tags, and yet, mobile browsers are ignoring them.  Frustrating, right? This is... Read More Flutter Web Development 
  
  
  32. ASP.NET Pragma Header Won't Go Away?  A Quick Fix
Alright, friend!  Let's tackle this pesky Pragma header that's sticking around in your ASP.NET application even after you've seemingly banished it from your code.  This is a common issue, and it usually boils down to a few sneaky culprits.  We'll go ... Read More
  
  
  33. AWS EC2 Uptime: Node.js & TypeScript Solution
Calculating AWS EC2 Instance Uptime: A Node.js and TypeScript Guide  This guide provides a practical, plug-and-play solution for calculating the uptime of an AWS EC2 instance from the moment it enters the "running" state. We'll leverage the AWS SDK f... Read More
  
  
  34. JS Radio Group Arrow Key Control: A Plug-and-Play Guide
JavaScript Radio Group Navigation: A Plug-and-Play Guide  This guide provides a practical, step-by-step solution to enhance the user experience of multiple radio groups by enabling navigation using the Enter, Up, and Down arrow keys. We'll ditch the ... Read More
  
  
  35. Stop Clicks Under CSS Popovers: A Quick Guide
Stop Clicks Under CSS Popovers: A Quick Guide  This guide provides a straightforward solution to prevent clicks from reaching elements beneath a CSS popover's backdrop.  We'll use JavaScript to handle the event and stop propagation.  This is crucial ... Read More
  
  
  36. Flutter: Align Dynamic Row Element
Flutter: Aligning a Single Element in a Dynamic Height Row  Let's tackle this common Flutter layout challenge: aligning a single element within a row where the row's height changes dynamically.  This often pops up when you have elements of varying si... Read More
  
  
  37. Dark Theme CSS Fix: A Web Developer's Guide
Dark Theme CSS Mayhem? Let's Fix It!   So, your website looks fabulous in light mode, but the second someone flips the switch to dark mode, it's a CSS catastrophe?  Don't worry, you're not alone.  Many developers hit this snag.  This guide will walk ... Read More
  
  
  38. AWS SDK Port Forwarding: Troubleshooting Short-Lived Sessions (C#)
AWS SDK Port Forwarding: Why Your Sessions Die in 30 Seconds (and How to Fix It)  Let's be honest, debugging flaky network connections is nobody's favorite pastime.  But when your AWS SDK port forwarding sessions keep crapping out after less than 30 ... Read More
  
  
  39. Fixing Keras' pad_sequences Import Error: A Quick Guide
Conquering the 'cannot import name 'pad_sequences'' Error in Keras  Let's be honest, import errors are the bane of every programmer's existence.  That frustrating red squiggly line underlining your perfectly crafted code?  Yeah, we've all been there.... Read More
  
  
  40. PHP's ?? Operator: A Practical Guide for Beginners
Hey there, fellow coder! Let's dive into PHP's null coalescing operator, ??.  This little guy is a lifesaver when dealing with potentially null values and will save you from writing tons of tedious if statements.  Think of it as a supercharged way to... Read More
  
  
  41. Spring WebSockets: User-Specific Subscriptions
Alright, let's tackle this Spring WebSocket user subscription puzzle.  The goal?  Get messages to the right user, securely. Forget the fluff, let's get practical.  This solution uses Spring Security for authentication and authorization, ensuring only... Read More Spring WebSockets 
  
  
  42. Angular SSR: Mastering server.ts and main.server.ts
Angular SSR: Demystifying server.ts and main.server.ts  Let's get this straight:  Server-Side Rendering (SSR) in Angular can feel like navigating a labyrinth.  But fear not! We'll cut through the confusion and give you a practical, plug-and-play guid... Read More
  
  
  43. SageMaker Training Stuck? Deep Learning Fixes
Decoding the SageMaker Training Job Enigma: A Practical Guide  So, your SageMaker training job is chilling in a state of suspended animation?  The code compiles, the setup looks good, but nothing's happening in the training phase. Let's troubleshoot ... Read More Amazon SageMaker 
  
  
  44. Braze Connected Content GraphQL: A Practical Guide
Braze "Connected Content" GraphQL Request: A Practical Guide  This guide provides a step-by-step solution for making GraphQL requests to Braze's Connected Content API. We'll cover everything from setting up authentication to handling responses, focus... Read More
  
  
  45. PHP Progress Bar: A Step-by-Step Guide
PHP Progress Bar: A Step-by-Step Guide  This guide provides a practical, plug-and-play solution for creating a dynamic progress bar in PHP, updating in real-time over a period.  We'll cover the PHP backend, HTML frontend, and CSS styling using SASS f... Read More
  
  
  46. Resize Egui Tables by Column: A Rust Guide
Resize Egui Tables by Column: A Rust Guide  This guide provides a practical, plug-and-play solution for creating resizable tables in egui using Rust. We'll build a robust and efficient solution, avoiding unnecessary complexity.  Understanding the Cha... Read More
  
  
  47. C#/.NET: Why avoid inheriting from List? Practical solutions
C#/.NET: Why Avoid Inheriting from List? Practical Solutions  Let's cut to the chase.  You're a C# developer, you've encountered List, and you're thinking, "Hey, I need a specialized list!  Inheriting seems efficient."  Hold your horses, partne... Read More
  
  
  48. Next.js, Antd, Sass/Less: The Ultimate Guide
Next.js, Ant Design, Sass/Less: A Plug-and-Play Guide  This guide provides a no-nonsense, step-by-step approach to integrating Ant Design with Next.js, using either Less, Sass, or CSS Modules.  We'll focus on practicality, offering ready-to-use code ... Read More
  
  
  49. Rust Vector Concatenation: The Ultimate Guide for Programmers
Rust Vector Concatenation: The Ultimate Guide for Programmers  This guide provides a no-nonsense, practical approach to concatenating vectors in Rust.  We'll cover various methods, highlighting their strengths and weaknesses, so you can choose the be... Read More Rust Programming 
  
  
  50. Webpack 5 Breaking Change: Fixing Node.js Module Polyfills
Webpack 5 Breaking Change: Banishing the Node.js Polyfill Gremlins  Let's be honest, that "Webpack 5 breaking change" error message is a real mood killer.  You're cruising along, building your awesome React app, and suddenly BAM!  Webpack throws a ta... Read More
  
  
  💰 Want to Earn 40% Commission?Join our affiliate program and start making money by promoting ! Earn 40% on every sale you refer.  You'll on average around 5$ per sell and for bundled products it will be around 40$ per sale. (So just share it and make money with worrying about product creation and maintanence)]]></content:encoded></item><item><title>This Week In Techdirt History: February 9th – 15th</title><link>https://www.techdirt.com/2025/02/15/this-week-in-techdirt-history-february-9th-15th/</link><author>Leigh Beadon</author><category>tech</category><pubDate>Sat, 15 Feb 2025 20:00:00 +0000</pubDate><source url="https://www.techdirt.com/">Techdirt</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Incoming Rust intern need advice?</title><link>https://www.reddit.com/r/rust/comments/1iq9oph/incoming_rust_intern_need_advice/</link><author>/u/Helpful_Ad_9930</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 19:52:13 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Hey everyone, I'm a 19-year-old college student who just landed a SWE internship at NVIDIA! My manager has me learning Rust and exploring one of its libraries, and I’m also reading up on operating systems and computer networking. I'm almost done with the OS book and plan to start the networking one next week.I do have a bit of experience with embedded systems I completed two internships during my freshman year. However, so far I’m really enjoying Rust. I am quite a rookie compared to you experienced folks haha! But so far I love how Rust's compiler enforces safety, how Cargo makes dependency management a breeze compared to CMake, and the whole concept of ownership and borrowing is just super cool.At the moment, I’m nearly finished with the Rust book. I am on the concurrency chapter. Guess I am just wondering what next? I really want this return offer and I just want to blow this opportunity out the park. I go too a state school and my manager told me he has high expectations for me after my interviews. I just do not want to let him down you know also plus kind of getting impostor syndrome a bit seeing all the other interns coming from schools such as MIT, Harvard, Standford, etc. Sorry for the vent I guess I just want to prove my worth? and show my manager they made the right choice?What fun, Rust projects have helped you learn a lot?Are there any books you’d recommend that could help me out for the summer?Books I want to read before I start summer:Operating Systems (Three easy pieces)Beej's Guide to Network ProgrammingC++ Concurrency in Action]]></content:encoded></item><item><title>Networking in K8s</title><link>https://www.reddit.com/r/kubernetes/comments/1iq9mqp/networking_in_k8s/</link><author>/u/I-Ad-7</author><category>reddit</category><category>k8s</category><category>devops</category><pubDate>Sat, 15 Feb 2025 19:49:50 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Kubernetes</source><content:encoded><![CDATA[Background: Never used k8s before 4 months ago. I would say I’m pretty good at picking up new stuff and already have lots of knowledge and hands on experience (mostly from doing stuff on my own and reading lots of Oreilly books) for someone like me (age 23). Have a CS background. Doing an internship. I was put into a position where I had to use K8s for everyday work and don’t get me wrong I’m ecstatic about being an intern but already having the opportunity to work with deployments etc. What I did was read The kubernetes book by Nigel Poulton and got myself 3 cheap PCs and bootstrapped myself a K3s cluster and installed Longorn as the storage and Nginx as the ingress controller.Right now I can pretty much do most stuff and have some cool projects running on my cluster.I’m also learning new stuff every day. But where I find myself lacking is Networking. Not just in Kubernetes but also generally. There are two examples of me getting frustrated because of my lacking networking knowledge:I wanted to let a GitHub actions step access my cluster through the tailscale K8s operator which runs on my cluster but failedWas wondering why I can’t see the real IPs of people that are accessing my api which is on a pod on my cluster and got intimidated by stuff like Layer 2 Networking and why you need a load balancer for that etc.Do I really have to be as competent as a network engineer to be a good dev ops engineer / data engineer / cloud engineer or anything in ops?I don’t mind it but I’m struggling to learn Networking and it’s not that I don’t have the basics but I don’t have the advanced knowledge needed yet, so how do I actually get there?]]></content:encoded></item><item><title>[D] Is my company missing out by avoiding deep learning?</title><link>https://www.reddit.com/r/MachineLearning/comments/1iq9gtk/d_is_my_company_missing_out_by_avoiding_deep/</link><author>/u/DatAndre</author><category>dev</category><category>ai</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 19:42:42 +0000</pubDate><source url="https://www.reddit.com/r/MachineLearning/top/?sort=top&amp;t=day&amp;limit=3">Reddit - ML</source><content:encoded><![CDATA[Disclaimer: obviously it does not make sense to use a neural network if a linear regression is enough. I work at a company that strictly adheres to mathematical, explainable models. Their stance is that methods like Neural Networks or even Gradient Boosting Machines are too "black-box" and thus unreliable for decision-making. While I understand the importance of interpretability (especially in mission critical scenarios) I can't help but feel that this approach is overly restrictive. I see a lot of research and industry adoption of these methods, which makes me wonder: are they really just black boxes, or is this an outdated view? Surely, with so many people working in this field, there must be ways to gain insights into these models and make them more trustworthy. Am I also missing out on them, since I do not have work experience with such models?EDIT: Context is formula one! However, races are a thing and support tools another. I too would avoid such models in anything strictly related to a race, unless completely necessary. I just feels that there's a bias that is context-independent here. ]]></content:encoded></item><item><title>My Life in Weeks</title><link>https://weeks.ginatrapani.org/</link><author>bookofjoe</author><category>hn</category><pubDate>Sat, 15 Feb 2025 19:34:29 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Apple Invites Its Users Into Major Years-Long Health Study</title><link>https://apple.slashdot.org/story/25/02/15/0610248/apple-invites-its-users-into-major-years-long-health-study?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sat, 15 Feb 2025 19:34:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[Can the iPhone, AirPods, or the Apple Watch play a role in improving health? Apple says they want to find out. 
"In medical research, discoveries are often limited by the number of participants who can be recruited, the amount of data that can be captured, and the duration of a given study," the company said in a blog post this week. "But Apple devices expand the possibilities..."
This new longitudinal, virtual study aims to understand how data from technology — including Apple and third-party devices — can be used to predict, detect, monitor, and manage changes in participants' health. Additionally, researchers will explore connections across different areas of health. 
CNBC reports:


The new study will likely influence future product development. Apple CEO Tim Cook previously said he believes health features will be the company's "most important contribution to mankind...." 

The Apple Health Study will be available through the company's Research app, and participation is voluntary. Users will select each data type they are willing to share with researchers, and they can stop sharing or completely discontinue their participation at any time. Apple has no access to participants' identifiable information, the company said... The project will last at least five years and may expand beyond that. 
A Harvard Medical School professor and cardiologist — also a principal investigator on the Apple Health Study — says "We've only just begun to scratch the surface of how technology can improve our understanding of human health."]]></content:encoded></item><item><title>New SF public health chief was part of McKinsey opioid-marketing operation</title><link>https://sfstandard.com/2025/02/14/san-francisco-department-public-health-daniel-tsai-opioids-mckinsey/</link><author>iancmceachern</author><category>hn</category><pubDate>Sat, 15 Feb 2025 19:32:16 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[Dr. David Juurlink, an expert on tramadol, called the drug a “minor player in the opioid crisis, but a player nevertheless.”He added, “To the extent that McKinsey helped advertise it as a notionally safer opioid, I think they did a disservice in doing so. The main reason I say tramadol is a minor player is because it wasn’t prescribed like candy, like OxyContin was.”McKinsey’s method of targeting high-volume prescribers was part of its playbook to juice opioid sales, despite mounting evidence that the drugs could be highly addictive. In other emails uncovered in the McKinsey documents, employees wrote excitedly about finding doctors who were willing to write opioid prescriptions. In one instance in 2015, a McKinsey partner wrote, “The challenge which we need to start working on is to identify the sweet spot of docs so we can do targeting. … Fun be[g]ins on Monday!”San Francisco’s fentanyl crisis is part of a broader trend of opioid overdoses that traces back to the 1990s, when prescription opioids became popular among doctors for chronic pain management. Companies such as Purdue Pharma, which manufactured OxyContin, brought in consulting firms like McKinsey to help with sales strategies. After a Department of Justice probe and settlement, McKinsey acknowledged that it knew the dangers of OxyContin but continued working with Purdue Pharma — even after several of the drugmaker’s executives pled guilty in 2007 to misrepresenting addiction risks. McKinsey, along with a slew of drug companies and pharmacies, agreed to pay billions in settlement funds over their roles in fueling opioid addiction. California received roughly $60 million from the 2021 McKinsey settlement. San Francisco, under the 2023 settlement of an opioid-related lawsuit, was expected to receive about $230 million from Walgreens.In both instances, the funds were slated to be used for opioid recovery efforts.In 2019, McKinsey said it would no longer work on opioid-related businesses. Last year, McKinsey formally apologized for its Purdue Pharma work, saying it was “deeply sorry” for its role in selling OxyContin. “This terrible public health crisis and our past work for opioid manufacturers will always be a source of profound regret for our firm,” the company said in a statement.At the San Francisco Department of Public Health, Tsai replaced Dr. Grant Colfax, who took the reins in 2019 and led the city through the pandemic before stepping down in January. The role paid $546,133 in 2024, one of the highest city salaries.  On Monday, the San Francisco Health Commission unanimously nominated Tsai as director of Public Heath. Dr. Laurie Green, president of the commission, said the governing body conducted a “multi-hour” interview.]]></content:encoded></item><item><title>How are you monitoring your cluster?</title><link>https://www.reddit.com/r/kubernetes/comments/1iq94yg/how_are_you_monitoring_your_cluster/</link><author>/u/psavva</author><category>reddit</category><category>k8s</category><category>devops</category><pubDate>Sat, 15 Feb 2025 19:28:16 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Kubernetes</source><content:encoded><![CDATA[I have a 3 node bare metal cluster and installed Kube Prometheus Stack helm chart.I'm having a very hard time getting the service monitors working correctly. I have any 30% of the 150 or so service monitors failing.CPU and networking are always displaying 'No Data'I fixed the bind addresses for etdc, scheduler, Kube proxy, controller manager from 127.0.0.1 to bind to 0.0.0.0That fixes the alerts on a fresh install of the stack. 1) CPU Metrics 2) Network Metrics 3) Resource Dashboards are all not working properly (Namespace and pods are always empty,) 4) Service Monitors failing.I'm using the latest version of the stack on bare metal cluster 1.31, running calico as a CNI.Any advice would be appreciated.If anyone has a fully working example of the helm chart values that fully work, that would be awesome.]]></content:encoded></item><item><title>Zed for golang</title><link>https://www.reddit.com/r/golang/comments/1iq8jsm/zed_for_golang/</link><author>/u/MrBricole</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Feb 2025 19:02:36 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[I am considering using zed for writting go. Is it working out of the box with full syntax high light for noob like me such fmt.Println() ? I mean, I need to have it displaying functions under an import library.Should I give it a try or is it only for advanced users ? ]]></content:encoded></item><item><title>Schemesh: Fusion between Unix shell and Lisp REPL</title><link>https://github.com/cosmos72/schemesh</link><author>cosmos0072</author><category>hn</category><pubDate>Sat, 15 Feb 2025 19:00:38 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Proactive IT Career Growth: Take Control of Your Professional Journey</title><link>https://hackernoon.com/proactive-it-career-growth-take-control-of-your-professional-journey?source=rss</link><author>Ekaterina</author><category>tech</category><pubDate>Sat, 15 Feb 2025 19:00:22 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[There are a lot of good articles about possible career tracks that you can pursue in IT, however, I haven’t seen many that might be used as actual guidance to move up the career ladder.\
Currently, I am working in a company that has very clear requirements for the engineers’ promotion and what can be used as sufficient evidence of fulfillment of those requirements. A combination of these two factors gave me the idea that additional information on this topic might help other engineers who are employed by companies that do not have it to build a strategy that will allow them to get to the next level.\
In almost any more or less mature IT company, a common career track for a software engineer is linear and looks almost the same:Associate Software Engineer is optional and may or may not be presented in the common IT department structure for a very simple reason: it’s net-negative for the first 12 months as it requires a lot of hand-holding so not all companies have resources and time to allow such positions in their structure.\
The further career track will depend on your inclinations, what you enjoy doing, and whether you are ready for the shift in the way you’re working.There’s nothing wrong with staying a senior software engineer if you like to allocate the majority of your time to coding. However, if you feel the need to empower others and lead that’s the right moment to weigh all expectations for each role, your strengths, the things that drive you, and pick the most suitable track for yourself.\
Despite the visual simplicity of the tracks above, it’s not clear how to get closer to the right end. The following insights will apply to the companies that have:a hierarchical structure where each employer has a line managera genuine interest in employee development\n Why is the above-mentioned is important?==The answer is quite simple: from day one you have an ally - your line manager==.\
Each line manager’s efficiency is based on the output of each person reporting to them: the faster you grow - the bigger your output - the better the line manager’s efficiency. Given all this, sooner or later, after you have joined your company, your line manager will approach you with the question: “Where do you see yourself after a certain time?” If it is not happening and you have regular one-to-ones, feel free to add this as a topic for discussion in the agenda.\
Voicing your intentions and setting a goal is just the first step of your way. The next step is to gather the list of requirements for the higher role and compile a list of achievements that can serve as evidence of your qualifications that you can use as a guide that you should follow to get from point A to point B. In companies with transparent promotion processes, this should be already in place.\
If this is not the case, you and your manager could compose one. Remember that this process is beneficial for both sides: you are getting an agreement that after certain achievements, you will be praised with the promotion and your line manager can get increased output from the team, so it’s a win-win case.\
Different companies may have different requirements for certain positions, and I won’t claim that the ones below are universal and will suit everyone. The main purpose is to give you an idea it might look like if you need one that can be further tailored to your needs.\n Guidelines for evidence can be used as a roadmap that brings you to the desired destination. The next steps for the common track might beCheck the team’s roadmap for suitable projects or change requests that might fit the purpose of the evidence.Voice up your intentions to the line manager so they can assist with the suitable project allocation and provide information about its priority, business value, and when it can be picked up for development.Spot any potential areas for improvement in code, observability, extensibility, and security perspectives and raise them as ownership tickets.Familiarize yourself with the current recruitment process in your company and ask for shadowing during recruitment sessions. Ask to switch roles where someone more senior will shadow you and ask for feedback. \n This is a short list of the roles that will be covered from requirements/guidelines for evidence perspectives:Junior Software Engineer RequirementsSoftware Engineer RequirementsSenior Software Engineer RequirementsLead Engineer RequirementsSenior Engineering Lead Requirements==Junior Software Engineer Requirements==|  |  |  |
|----|----|----|
|  | Delivers tasks \n · Clear requirements are needed (business and system) \n · Designs/implements limited-scope technical solutions \n · Limited guidance is required | 1. List of tasks completed \n o Tasks should be complex enough to mention them \n o Deadlines are met \n o No major quality issues \n o Tasks were completed with no handholding \n 2. Input from the line manager confirming that all the requirements are met. |
|  | Applies best practices \n · Learns and constantly applies best practices \n · Proficient with various dev tools \n · Investigates and fixes complicated problems/bugs | Feedback from the line manager and peers confirming that all the requirements are met. |\
==Software Engineer Requirements==|  |  |  |
|----|----|----|
|  | Delivers change requests (features) \n · Takes business requirements as input \n · Breaks work into tasks with a sufficient level of detail on the solution (what needs to be done and when it’s done) and the implementation (how it should be done) \n · Provides accurate estimates on a task/user story level \n · Pairs with other engineers to deliver faster | List of change requests delivered, conforming to the following requirements: \n 1. The change request has been fully delivered and the deadline was met. \n 2. The discovery part was completed by the employee (tickets, estimates). \n 3. The change request is complex enough from a technical perspective (more than 2 man-weeks for 1 engineer to implement it). \n 4. The change request provides a meaningful impact on the business. \n 5. The change request is signed off by the business and is running in production. \n 6. The employee has demonstrated a sufficient level of autonomy and quality (based on the feedback from the tech lead and the engineering manager). |
|  | Designs services \n · Designs and implements smaller services while taking into account all of the non-functional aspects (extensibility, security, observability, etc) \n · Writes high-quality code with full adoption of engineering practices and methodologies \n · Participates in code reviews to enforce best practices \n · Fixes the root causes behind bugs and problems encountered | At least two services designed conforming to the following requirements: \n 1. It can be a new service or a complete redesign of the existing service. \n 2. It can be a standalone service, a library, or a component consumed by other services. \n 3. The service shouldn’t be trivial from a design perspective. \n 4. The engineer should have followed the formal design process: \n · Obtain business and system requirements \n · Identify the bounded context \n · Identify non-functional requirements \n · Break down context into services \n · Get feedback on the solution \n · Implement it \n 5. Service is implemented and is running in production. |\
==Senior Software Engineer==|  |  |  |
|----|----|----|
|  | Delivers project phases (epics) \n · Takes requirements and high-level system design as input \n · Creates system design for the service or the component, decides on the technologies and engineering practices to be used \n · Breaks work into tasks or user stories with a sufficient level of detail on the solution (what needs to be done and when it’s done) and the implementation (how it should be done) \n · Provides accurate estimates on task/user story level \n · Leads a small team to deliver the scope \n · Unblocks their team, resolves issues, and removes impediments | List of project phases/epics delivered, conforming to the following requirements: \n 1. The epic/project phase has been fully delivered and the deadline was met. \n 2. The discovery part was completed by the employee (tickets, estimates). \n 3. The epic/project phase is complex enough from a technical perspective (requires at least 2 engineers for >= 2 weeks). \n 4. The epic/project phase provides a meaningful impact on the business. \n 5. The functionality is signed off by the business and is running in production. \n 6. The employee has demonstrated a sufficient level of autonomy and quality (based on the feedback from the tech lead and engineering manager). \n 7. The engineer participated in the implementation as a technical lead. |
|  | Designs subsystems \n · It is the same as for a Software Engineer but focuses on more complex services or subsystems \n · Proficient in the cloud and distributed systems design and implementation | At least 3 services designed conforming to the following requirements: \n 1. It can be a new service or a complete redesign of the existing service. \n 2. It can be a standalone service, a library, or a component consumed by other services. \n 3. The service shouldn’t be trivial from a design perspective. \n 4. The engineer should have followed the formal design process: \n a. Obtain business and system requirements \n b. Identify bounded context \n c. Identify non-functional requirements \n d. Break down context into services \n e. Get feedback on the solution \n f. Implement it \n 5. Service is implemented and is running in production. |
|  | Proposes changes \n · Challenges the status quo and the assumptions made \n · Find ways to improve the platform, processes, working environment, and the tech team in general | At least three significant changes were proposed, which can be any of the following: \n 1. Functionality: proposed a change request that was prioritized and implemented (change request should be substantial enough to be considered as a change, not a cosmetic change). \n 2. People: interviewed an engineer who was hired and passed probation (junior software engineer or higher, considered as a change to the team). \n 3. Ownership: proposed an ownership project (included in the ownership roadmap, approved by CTO). |\
\
==Lead Engineer Requirements==|  |  |  |
|----|----|----|
|  | Tech lead for projects (project proposals) \n · Takes business requirements as input \n · Find the most effective solution for the business problem (research alternatives, validate solutions using no-code/low-code approaches) \n · Creates system design for the new service or subsystem, decides on the technologies and engineering practices to be used \n · Breaks work into epics with a sufficient level of detail on the solution (what needs to be done and when it’s done) and the implementation (how it should be done) \n · Provides accurate estimates on the project level, commits to dates \n · Acts as a tech lead for the entire project \n · Unblocks their team, resolves issues, and removes impediments \n · Manages technology, implementation, and operational risks | List of projects delivered, conforming to the following requirements: \n 1. The solution for the problem was proposed by the employee and it is considered to be effective. I.e. multiple alternatives were evaluated, and the best alternative was chosen based on the low-code/no-code validation. \n 2. The discovery part was completed by the employee (tickets, estimates). \n 3. The solution was architected by the employee. \n 4. The project needs to be a “feature” project initiated through a project proposal. \n 5. The engineer participated in the implementation as a technical lead (see requirements column for more details). |
|  | Drives technical changes (squad) \n · Proposes and implements initiatives to improve system quality and reduce technical debt \n · Proposes and implements changes to improve developer experience and productivity \n · Advocates and enforces clean code and clean architecture | List of major changes introduced (usually at least four), conforming to the following requirements: \n 1. The change provides meaningful improvement to system quality (e.g. platform improvements), developer experience, or developer productivity. The change affects the entire squad. \n 2. The engineer doesn’t have to be the one who proposed the change. The engineer should be the primary driving force behind the change (e.g. designed, acted as a tech lead, participated in the implementation). The change can be delivered by an engineer or as a team effort. \n 3. The change should be fully implemented and used by the squad/platform (the change should be “sticky” and provide enough value to keep it). \n 4. The change should be significant enough to mention. |
|  | Mentor \n · Mentors and supports less experienced engineers \n · Conducts technical interviews effectively \n · Acts as a “magnet” for great engineers during hiring (be a decisive factor where we are in competition for good talent vs. another company) | Possible evidence: \n 1. Engineers interviewed, who were hired and passed probation. \n 2. Feedback from upskilled engineers. \n 3. Training sessions are organized/delivered for the entire tech team (e.g. Tech Sync, Engineering Dojo). \n 4. When leading a working group a list of changes proposed/implemented in the scope of the working group can be used as evidence. |\
==Senior Engineering Lead==|  |  |  |
|----|----|----|
|  | Tech Lead for complex projects (project proposals) \n Same as Lead Engineer, but focuses on problems that are complex from technical, organizational, or business perspectives \n · The project requires coordination across multiple squads \n · The project involves 3rd party technology provider or stakeholder (e.g. partnership) \n · a new product build while the product is in the discovery mode \n · high priority/urgency project with fixed deadlines and many unknown | List of projects delivered, conforming to the following requirements: \n 1. The project is considered to be complex (see examples on the left). \n 2. The project has been fully delivered (all deliverables + DoD) and the deadline was met. \n 3. The solution for the problem was proposed by the employee and it is considered to be effective (i.e. multiple alternatives were evaluated, and the best alternative was selected based on the low-code/no-code validation). \n 4. The discovery part was completed by the employee (system requirements, tickets, estimates). \n 5. The solution was architected by the employee. The project has a high complexity from a system design perspective. \n 6. An engineer participated in the implementation as a technical lead. |
|  | Drives technical changes (tech) \n · Same as E5 but on the tech level \n · System owner for at least one non-functional aspect (e.g. security, observability, etc). | List of major changes introduced (usually at least 4), conforming to the following requirements: \n 1. The change provides meaningful improvement to system quality (e.g. platform improvements), developer experience, or developer productivity. The change affects multiple squads (e.g. technology adoption). \n 2. The engineer doesn’t have to be the one who proposed the change. The engineer should be the primary driving force behind the change (e.g. designed, acted as a tech lead, participated in the implementation). The change itself can be delivered by an engineer or as a team effort. \n 3. The change should be fully implemented and used by multiple squads (changes should be “sticky” and provide enough value to keep it). \n 4. The change should be significant enough to mention. It should be tracked on the “upcoming projects” page as an ownership project (ownership in this context means changes to the platform, tooling, processes, etc, not just platform-related changes). \n 5. At least 2 changes should be related to the non-functional aspect owned by the individual. |
|  | Recognized expert \n · Recognized expert within a given area of expertise on a company level, acts as a technical point of contact in tech within their area of expertise \n · Monitors trends/technologies within the area of expertise and communicates updates and findings \n · Actively and regularly shares expertise with other engineers (workshops, tech talks, training) \n · Facilitates collaboration to find solutions for complex problems (working groups, etc) \n · Conducts technical interviews effectively \n · Mentors and supports less experienced engineers, guide their career from a professional development perspective \n · Acts as a “magnet” for great engineers during hiring (be a decisive factor where we are in competition for good talent vs. another company) | Possible evidence: \n 1. Interviewed engineers, who were hired and passed probation. \n 2. Feedback from upskilled engineers. \n 3. Training sessions are organized/delivered for the entire tech team (e.g. Tech Sync, Engineering Dojo). \n 4. Leading a working group, a list of changes proposed/implemented in the scope of the working group can be used as evidence. ||  |  |  |
|----|----|----|
|  | Delivers squad roadmap \n · Leads a squad of 3-6 engineers \n · Acts as a project manager for multiple concurrent initiatives \n · Able to deliver results having only business requirements as input (able to create and sign off system requirements) \n · Focuses on business impact, driven by business value \n · Communicates commitments, status, and risks to business stakeholders \n · Ensures that all squad members have all the information they need \n · Communicates to 3rd parties within the scope of initiatives/ownership \n · Finds the right balance between feature delivery and system quality \n · All requirements for Senior Software Engineer | New projects delivered by the squad conforming to the following requirements: \n 1. Project initiated through a project proposal. \n 2. The project has met its impact metrics, and the public commitment was met. \n 3. Projects reported in the previous promotion cycle can’t be included in the list. |
|  | Drives managerial changes (squad) \n · Measures and continuously improves squad performance \n · Identifies and establishes best practices within the squad with a focus on productivity \n · Maintains high quality of delivery \n · Ensures transparency on progress, risks, results | 1. Squad productivity (performance) metric values. \n 2. Major changes (at least 4) introduced, conforming to the following requirements: \n a. It solves a problem related to the owned squad or tribe, the problem needs to be included in the TOP 5 problems and agreed upon with the line manager. \n b. The change should be fully implemented and used by the squad (change should be “sticky” and provide enough value to keep it). \n c. The change should provide meaningful improvement to productivity, engagement, or quality of delivery. \n d. The manager doesn’t have to be the one who proposed the change. The EM should be the primary driving force behind the change. The change can be delivered by an engineer or as a team effort. |
|  | Line manager (>=3 direct reports) \n · Manages 3-6 direct reports \n · Coaches and supports engineers \n · Supports and guides career progressions \n · Reconciles differences of opinion and helps manage and resolve conflicts \n · Encourages a positive team culture and collaboration | 1. Squad engagement metric values. \n 2. List of engineers, who were hired and passed probation (can be skipped if we are not hiring, EM should be a hiring manager). |\
|  |  |  |
|----|----|----|
|  | Delivers roadmap for multiple squads \n · Ensures delivery across 2-3 squads \n · Fulfils Engineering Manager role in one of the squads \n · Owns partnerships with 3rd parties \n · All requirements from the Engineering Manager | New projects delivered by the squads conforming to the following requirements: \n 1. Project initiated through a project proposal (not a BAU activity). \n 2. The project has met its impact metrics and the public commitment was met. \n 3. Project results were presented as a Tech Feature session. \n 4. Projects reported in the previous promotion cycle can’t be included in the list. \n 5. At least 2 projects should be recognized as key projects on a company level (e.g. a new product, etc, can be confirmed with CTO). |
|  | Drives managerial changes (multiple squads/tech) \n · All requirements from Engineering but across multiple squads \n · System owner for at least one process (e.g. support, etc) | 1. Squads’ productivity (performance) metric values across multiple squads. \n 2. Major changes (at least 6) introduced, conforming to the following requirements: \n a. It solves a problem related to the squads or tribe, a problem needs to be included in the TOP 5 problems and agreed upon with the line manager. \n b. The change should be fully implemented and used by the squads (change should be “sticky” and provide enough value to keep it). \n c. The change should provide meaningful improvement to productivity, engagement, or quality of delivery. \n d. The manager doesn’t have to be the one who proposed the change. The Engineering Director should be the primary driving force behind the change. The change can be delivered by an engineer or as a team effort. \n e. At least 2 changes should be related to the process owned by the director. |
|  | Line manager (>=10 reports, including indirect reports) \n · All requirements for Engineering Manager \n · Coaches and supports engineers \n · Supports and guides career progressions \n · Manages churn, reduces “regrettable churn” | 1. Squads’ engagement metric values across multiple squads. \n 2. List of engineers, who were hired and passed probation (can be skipped if we are not hiring). \n 3. List of engineers promoted (can be skipped if there is no business need for promotions). |]]></content:encoded></item><item><title>How a Soft Robot Arm Moves Using Air, Not Motors</title><link>https://hackernoon.com/how-a-soft-robot-arm-moves-using-air-not-motors?source=rss</link><author>EScholar: Electronic Academic Papers for Scholars</author><category>tech</category><pubDate>Sat, 15 Feb 2025 19:00:19 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[(1) Jorge Francisco Garcia-Samartın, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain (jorge.gsamartin@upm.es);(2) Adrian Rieker, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain;(3) Antonio Barrientos, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain.3 PAUL: Design and Manufacturing4 Data Acquisition and Open-Loop Control\
Although the layout of the pneumatic bench allows working with up to 4 segments, it was thought that using 3 would allow the different problems linked to redundancy to be tackled without increasing the weight of the robot too much or requiring the tubes –which pass through the interior of the segments – to have an excessive amount of space.\
It is true that the tubes of the other three could pass through the first module, nevertheless, it was thought that the stiffness they would introduce by being so compressed could make it difficult to bend the initial segment. Since it is also the segment that has to exert the most force, as it is the one that supports the weight of the other segments, the risk of punctures could be increased.\
Therefore, a robot consisting of three identical modules was assembled, standing at a total height of 390 mm (with each segment measuring 100 mm, intersegment connections 20 mm each, and the vision trihedron rod 30 mm). Under these configurations, the estimated weight of PAUL’s arm is around 600 g. The structure protecting the manipulator is a cube with a side of 500 mm. Pressure of the pneumatic line was established in 1.2 bar.\
Examples of PAUL reaching different positions are depicted in Figure 13.The analysis of the workspace has been carried out experimentally, based on the data taken to generate the dataset. Figure 14 shows the workspace of a segment.\
As can be seen, this is a surface, as the segment has two degrees of freedom if the condition that at least one valve should remain deflated is imposed. The surface can be considered as the union of three surfaces intersecting at the central point, which corresponds to the configuration of all deflated bladders. The three surfaces are roughly spherical in shape. If the PCC model were completely valid for the robot, these would be perfect spheres, as the ends of a set of equal-length arcs of circumference with a common origin engrench a circle. Since this is not exactly the case, the generated surfaces only resemble the sphericity predicted by the constant curvature model.\
The addition of a second segment already generates a 4-D workspace that is difficult to represent. The generation of this is a consequence of the fact that, from each point on the surface of the workspace of a segment, another similar surface is generated. The\
\
union of all of these surfaces, which arise from the points on the surface of the first segment, results in the two-segment workspace. This is a volume in which, in addition, each point can be reached from two different orientations, thus leaving latent the four degrees of freedom that PAUL would have with only two modules.]]></content:encoded></item><item><title>Multiple Russian Threat Actors Targeting Microsoft Device Code Authentication</title><link>https://www.volexity.com/blog/2025/02/13/multiple-russian-threat-actors-targeting-microsoft-device-code-authentication/</link><author>ChrisArchitect</author><category>hn</category><pubDate>Sat, 15 Feb 2025 18:59:39 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[Multiple Russian Threat Actors Targeting Microsoft Device Code Authenticationby Charlie Gardner, Steven Adair, Tom LancasterVolexity has observed multiple Russian threat actors conducting social-engineering and spear-phishing campaigns targeting organizations with the ultimate goal of compromising Microsoft 365 accounts via Device Code Authentication phishing.Device Code Authentication phishing follows an atypical workflow to that expected by users, meaning users may not recognize it as phishing.Recent campaigns observed have been politically themed, particularly around the new administration in the United States and the changes this might mean for nations around the world.Starting in mid-January 2025, Volexity identified several social-engineering and spear-phishing campaigns by Russian threat actors aimed at compromising Microsoft 365 (M365) accounts. These attack campaigns were highly targeted and carried out in a variety of ways. The majority of these attacks originated via spear-phishing emails with different themes. In one case, the eventual breach began with highly tailored outreach via Signal.Through its investigations, Volexity discovered that Russian threat actors were impersonating a variety of individuals in order to socially engineer targets, including impersonating individuals from the following:United States Department of StateUkrainian Ministry of DefenceEuropean Union ParliamentProminent research institutionsCommunications carried a variety of different themes and messages, but they all ultimately resulted in the attacker inviting the targeted user to one of the following:Microsoft Teams Meeting / Video ConferenceAccess to applications and data as an external M365 userJoin a chatroom on a secure chat applicationWhen these attacks were successful and the attackers gained access to accounts, the post-exploitation phase often had unique characteristics in each case:The way the attackers accessed material from compromised organizations (scripts versus native applications)The infrastructure used to access stolen accountsDespite the differences, Volexity found the attacks had one thing in common: they were all Device Code Authentication attacks. While this attack method is not new, it is one that is definitely lesser known and not commonly leveraged by nation-state actors. Details on the social-engineering and spear-phishing campaigns, along with how Device Code Authentication attacks work, will be covered further in this blog post. What Volexity has observed is that this method has been more effective at successfully compromising accounts than most other targeted spear-phishing campaigns.Volexity assesses with high confidence that the series of attacks described in this blog post are from Russia-based threat actors. At this time, Volexity is tracking this activity under three different threat actors and assesses with medium confidence that at least one of them is  (overlapping with DarkHalo, APT29, Midnight Blizzard, CozyDuke). Volexity is tracking the remaining activity under  and . It is possible that all the activity described in this blog post is a single threat actor, but despite the similar targeting, timing, and attack method, other observed components of the operations are different enough to be tracked separately, for now.From Secure Chat to Insecure AuthenticationThe discovery of this threat activity started toward the end of January 2025, when Volexity uncovered a highly targeted attack that had successfully compromised the M365 account of one of its customers. This breach was discovered after Volexity identified suspicious sign-in activity to the account, which was followed by a rapid download of files from the user's OneDrive. All authentication and download events came from virtual private server (VPS) and Tor IP addresses, which is not the most subtle way to access an account. Volexity noted this activity was likely scripted, as the User-Agent string for later access and file downloads was the Python User-Agent string .Volexity then performed a detailed investigation into this incident, in an effort to identify how the account was compromised. A review of login activity showed the legitimate user had logged in and approved a multi-factor authentication (MFA) request. However, subsequent access was not from the legitimate user's IP address. This caused Volexity to initially suspect a phishing attack involving an adversary-in-the-middle (AiTM) framework. As a result, Volexity reviewed emails to the user leading up the time of the authentication event. This review identified a suspicious email just moments before the login activity from an email address purporting to be from someone with the name of a high-ranking official from the Ukrainian Ministry of Defence. The email was structured to look like a meeting invite for a chatroom on the messaging application, Element. Element is another encrypted messaging application that offers the ability for users to self-host a server with functionality that includes group video chats. The “invitation” email sent is shown below .Microsoft describes the purpose of this workflow as allowing '"users to sign in to input-constrained devices such as a smart TV, IoT device, or a printer.” However, in this case, it means if an attacker can convince a user to enter a specific code into this dialogue (and log in), they are granted long-term access to the user’s account.After working with its customer more closely, Volexity learned that the victim had been contacted on Signal by an individual purporting to be from the Ukrainian Ministry of Defence. This individual then requested the victim move off Signal to another secure chat application called Element. The attacker then had the victim join an Element server they controlled under the domain . This allowed the attacker to further communicate with the victim in real time and inform them they needed to click a link from an email to join a secure chat room. This is where the email Volexity had discovered came into play. The message was a ploy to fool the user into thinking they were being invited into a secure chat, when in reality they were giving the attacker access to their account. The generated Device Codes are only valid for 15 minutes once they are created. As a result, the real-time communication with the victim, and having them expect the "invitation", served to ensure the phish would succeed through timely coordination.The diagram below sVolexity tracks the threat actor behind this campaign as . Through research conducted on the custom domain used by UTA0304 to operate its own Element server, Volexity was able to pivot and discover additional infrastructure it believes is likely operated by the group. The table below represents the list of infrastructure that Volexity has tied to this threat actor.chromeelevationservice[.]comSpoofing the United States Department of StateIn early February 2025, Volexity observed multiple spear-phishing campaigns targeting users with fake Microsoft invitations purporting to be from the United States (US) Department of State. These emails were themed as invitations to join the US Department of State’s Microsoft tenant as an external user, or as invitations to a Microsoft Teams chat named “Measuring Influence Operations".Similar to the campaign conducted by UTA0304, these fake US Department of State emails were targeting users with a Device Code OAuth phishing workflow. Each email was aimed at convincing the user to accept the invitation and enter a unique code provided in the phishing email. The link in the invitations would direct users to the Microsoft Device Code authentication page. If the user entered the code provided in the phishing email, the authentication page would subsequently authorize the threat actor to access to the user’s account. However, it is worth noting that this campaign was sent out of the blue, with no precursor or build up to the emails, so users would not be expecting these messages. Even if they were to fall for the campaign, they would have to have done it within 15 minutes of receiving the email. This dramatically decreased the likelihood that this attack would be successful.After reviewing various parts of the attack, Volexity assesses with medium confidence that the Russian threat actor CozyLarch (aka APT29 or Midnight Blizzard) was behind these US Department of State themed spear-phishing campaigns. Additional details on each campaign are described in the sections that follow.Campaign 1: M365 Tenant External User InvitationCozyLarch sent invitations to several users, inviting them to access applications within the M365 tenant for the US Department of State. The invitation email was designed to look like a real invitation that would be sent from Microsoft, as shown below.The redirect link takes the user to the Microsoft Device Code OAuth workflow, and it is the same URL that UTA0304 directly embedded in their phishing campaign. However, unlike UTA0304, CozyLarch opted to use the redirect URL rather than the final login URL, perhaps because it may look even more recognizable to a discerning user, given that it is hosted on the main Microsoft domain. If the user entered the code provided from the email and continued through the authentication process, the attacker was granted access to the user’s M365 account.Campaign 2: M365 Teams Chat InvitationCozyLarch launched a second campaign, in which they targeted users with a fake invitation to join a Microsoft Teams chat named “Measuring Influence Operations”. The email made it appear as though there were already 37 other members in the chat.  A screenshot of one of the observed spear-phishing messages is shown below.The “Sign in to Microsoft Teams” button in the email body is a hyperlink that leads to the same https://www.microsoft.com/devicelogin URL observed in the other campaign. The attack flow and end goal are the same, with only a small difference in the theme of the emails.The emails are designed to appear as though they come from Microsoft. The messages used mixed encoding in the “friendly” name that make the address difficult to discern. An example of the full “from” header used in one phishing email is given below:\"Mic\udb40\udc30\udb40\udc30\udb40\udc30\u200br\udb40\udc30\udb40\udc30o\udb40\udc30\udb40\udc30soft Invitations on behal f of US Dep\udb40\udc30\udb40\udc30\udb40\udc30artme\udb40\udc30\udb40\udc30\udb40\udc30nt of St\udb40\udc30\udb40\udc30\udb40\udc30 ate \uff1cinvites\uff20mic\udb40\udc30\udb40\udc30\udb40\udc30\u200br\udb40\udc30\udb40\udc30o\udb40\udc30\udb40\udc30soft.co m\uff1e\u180e\u3000\u180e\u3000\u180e \u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000 \u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000 \u180e \u180e\u3000\u180e \u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e \u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e  \u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000 \u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000 \u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000 \u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000 \u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000 \u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000 \u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000\u180e\u3000 \u180e\u3000\u180e\u3000\u180e \u061c Cc:\" <[email protected]>The attacker attempted to make it appear as if the emails were from , and also set the  header as . However, the true address could be seen at the end of the  field; all messages were sent via Google Gmail accounts. Volexity observed the following Gmail accounts as the actual senders of the messages observed:kaylassammers@gmail[.]comkendisggibson@gmail[.]comleslytthomson@gmail[.]comThese addresses are believed to be controlled by CozyLarch and can be used to reliably detect phishing emails that may have been sent.Using Wireless Proxy Networks for Email DistributionVolexity also noted that the sending IP address associated with each spear-phishing email was recorded in the headers. Looking at the  header in the messages, it became apparent that the attacker was using Proxy IP addresses based in the US to send messages. Volexity observed nearly a dozen IP addresses belonging to mobile networks in the US (AT&T and Verizon Wireless).European Parliament and Donald TrumpStarting in late January through to the publication of this blog (February 13, 2025), Volexity has observed another campaign by a Russian threat actor it tracks as  targeting numerous organizations. UTA0307 created a fake email under the identity of a member of the European Parliament who is on the Committee on Foreign Affairs. The threat actor reached out to numerous individuals with personalized emails requesting a Microsoft Teams meeting to discuss Donald Trump and his impact on relations between the US and the European Union. Volexity also observed a smaller set of campaigns centered on discussing China's foreign policy and China-European Union relations.The email subject lines used in these various campaigns are listed below:Discussion on Eastern Europe and the CaucasusDiscussion about Donald Trump's new termDiscussion about Trump & US relations with EuropeCollaboration on China and East Asia ResearchThe image below shows an example spear phish that was sent by UTA0307.None of the initial emails contained any malicious content or links at the onset. The threat actor was leveraging a tactic that has become commonplace for numerous nation-state actors, where they wait until a conversation has started prior to sending anything malicious. This serves the purpose of knowing they have an engaged target, and that the target's guard is potentially down. In the specific cases of Device Code Authentication phishing, it is especially important to have a responsive target, as the threat actor has only 15 minutes to convince the target to enter the code that has been generated.A Different Device Code OAuth Phishing TechniqueVolexity actually discovered the operations of UTA0307 following a successful compromise. Similar to the initial discovery of UTA0304, Volexity worked backwards from detecting a breach to identifying the above spear-phishing emails. In this case, the victim had engaged from the initial email and had several messages back and forth with UTA0307 regarding a meeting being set up. They agreed to join a Microsoft Teams meeting, and a fake invitation email was sent. However, this time the link in the email did not go to Microsoft. The target received an email with the subject "", and the body of the email, shown below, was designed to look like a real invitation.The “Join the meeting now” hyperlink, however, linked to a website controlled by UTA0307 (). This page in turn was set up to automatically generate a new Microsoft Device Code each time it was visited. The website was designed to appear as an official Microsoft interstitial page before the user can join a Microsoft Teams meeting. The message that appears on the landing page (shown below) claims that the victim needs to pass a security check by copying a code and entering it on a subsequent pageWhen the user clicks the “Next” button, a new tab is opened with the real Microsoft Device Code Authentication interface that requests an authentication code. If the victim enters the code supplied by the phishing page, they grant UTA0307 access to their M365 account. Interestingly, in the background of the initial phishing page, Volexity noted that the website would continuously poll the domain . It appears this domain was set up to monitor successful Device Code Authentication and, if detected, would redirect the user to a real Microsoft Teams meeting URL in an effort to make the activity appear legitimate.The threat actor never joined this Microsoft Teams meeting. However, UTA0307 did add authorization for an authentication application under their control to enable multi-factor authentication when logging into the compromised account. Volexity assesses with medium confidence that this was a requirement of logging into the account, even with the stolen authentication token.One benefit of this attack workflow versus other previously observed DeviceID phishing workflows is that, when a DeviceID code is generated, it is only valid for 15 minutes. Having an interstitial page that automatically generates new codes means UTA0307 does not have to worry about their phishing content expiring.UTA0307 Post-compromise Activities, Targeting and AttributionVolexity observed UTA0307 exfiltrating documents from a compromised M365 account that would be of interest to a Russian threat actor. This was determined based on identification of FileDownloaded operations observed in M365 audit log data. Given this information about the threat actor’s objectives, their targeting, and their use of a highly similar technique to that used in recent days and weeks by CozyLarch and UTA0304, Volexity assesses with medium confidence that UTA0307 is also a Russian threat actor.However, the exact implementation of the DeviceID OAuth phishing technique used in this activity differs slightly from those previously documented by Volexity, which provides some evidence that this activity may have been conducted by a separate threat actor. For example, while the previously observed phishing campaigns saw the attacker use the client ID for Microsoft Office when handling Device Code Authentication, this activity instead used the client ID for Microsoft Teams, as shown below (note that Microsoft uses  and  interchangeably in their logs when referring to the ID for an application):"appDisplayName": "Microsoft Teams","appId": "1fec8e78-bce4-4aaf-ab1b-5451cc387264",Another difference between this and the UTA0304 campaign is that in this case, all subsequent access to the compromised account occurred via Mullad VPN exit nodes (versus the other observed VPS and Tor IP addresses). Based on these two factors, Volexity has chosen to track this activity under the UTA0307 alias, rather than CozyLarch or UTA0304.Detecting Device Code AuthenticationVolexity identified a way to reliably detect this attack through monitoring and analysis of Microsoft Entra ID sign-in logs. When a user enters a device code and subsequently authenticates, it results in a login to the application associated with the generated code. This can be a common application like Microsoft Office that is frequently accessed by users and would not be a reliable indicator. However, the good news is that Device Code Authentications result in the  field being set with the value .The line below is what will appear in the JSON data in the Entra ID sign-in logs when a Device Code Authentication occurs:“authenticationProtocol": "deviceCode",Volexity further noted that as authenticated sessions refresh and are kept alive, subsequent sign-ins that initially occurred via a  often do not have anything set for  but they contain the following entry: “originalTransferMethod": "deviceCodeFlow",These values can be searched and filtered on in the Entra Admin center by adding filters for "Authentications Protocol" and "Original Transfer Method". The latter can be filtered in both  and  sign-ins. The frequency and legitimacy of these values occurring in the sign-in logs for a particular organization may vary, as this is a legitimate Microsoft feature. An organization can evaluate their risk and usage of these workflows, and potentially use this information as a proactive detection mechanism.If an organization has the ability to monitor URLs that are being accessed by users or sent in email, there are additional detection opportunities to discover Device Code Authentication attacks. The following official URLs can be monitored for as related to Microsoft Device Code Authentication:https://login.microsoftonline.com/common/oauth2/deviceauthhttps://www.microsoft.com/deviceloginhttps://aka.ms/deviceloginOrganizations can monitor for access to these URLs or for their presence in various communication methods, such as email. Attackers can find other means to redirect users to these URLs, but one of the main advantages of using the list above in phishing attacks is that the URL displayed is hosted on a legitimate Microsoft domain.Preventing Device Code AuthenticationVolexity believes the most effective way to prevent this potential attack vector is through conditional access policies on an organization's M365 tenant. It is possible for organizations to create a conditional access policy that disallows device code authentication altogether. It is fairly trivial to set up, and Microsoft provides online guidance on exactly how to do this. Based on Volexity's own testing, blocking the "Device code flow" from "Authentications flows" prevents this attack from working.  The image below shows what a conditional access policy would look like once it's set up and in place to block this authentication flow.Prior to implementing such a policy, organizations should evaluate the use of Device Code Authentication in their environment. This feature is used legitimately, and blocking it could have a negative impact. Volexity's review of its own customers identified several instances of legitimate access to resources via these means. However, at the majority of Volexity's customers, there was either no recent Device Code Authentication activity or there was only activity tied to the attacks described in this blog post.Volexity continues to track multiple spear-phishing campaigns targeting Device Code Authentication. This blog post serves to cover a few of the larger and unique campaigns observed. Volexity has observed other similar spear-phishing campaigns in recent weeks targeting Device Code Authentication that it believes are the work of Russian threat actors. Further, it should be noted that it is possible this is the work of a single threat actor running multiple, different campaigns. However, at this time, Volexity believes this activity is sufficiently different enough to warrant tracking this activity under two different unknown threat actors and one it believes is likely CozyLarch.While Device Code Authentication attacks are not new, they appear to have been rarely leveraged by nation-state threat actors . Volexity's visibility into targeted attacks indicates this particular method has been far more effective than the combined effort of years of other social-engineering and spear-phishing attacks conducted by the same (or similar) threat actors. It appears that these Russian threat actors have made a concerted effort to launch several campaigns against organizations with a goal of simultaneously abusing this method before the targets catch on and implement countermeasures.The detection mechanisms and countermeasures to these attacks have been available for years. However, Volexity believes they are seldom implemented and that most organizations are not even aware of this authentication flow, let alone the means to detect its misuse. These attacks serve as a reminder that threat actors will constantly look for ways to abuse legitimate features, and organizations must continually evaluate and implement methods to detect and prevent such attacks.These attacks also serve as a good opportunity to engage with users and remind them to be on the lookout for anything out of the ordinary when it comes to accessing resources when they are asked for login credentials or authorization grants. This phishing workflow has proven useful for an attacker, as many traditional sources of evidence and detection, both for a user and network defenders, are not present. For example:There is no “malicious” link or attachment. The only link is to the provider’s infrastructure (in this case, Microsoft). This means users cannot easily identify the link as being suspicious, and automated solutions detecting malicious emails will likely fail to do so for the same reason.Users are generally less aware of attacks that leverage legitimate services, and may be even less aware when it comes to those that involve entering a device code rather than their username or password.After successful authentication, the logs will show the authenticating application as a legitimate or benign application, reducing signal that can be keyed off of in sign-in logs by detection teams.These are items that organizations should look to further train users on and implement technical countermeasures against where possible.Volexity GitHub.If you believe you have been targeted by a similar attack and want to share details with Volexity for informational purposes, additional investigation, or incident response, please contact us.]]></content:encoded></item><item><title>xAI’s “Colossus” supercomputer raises health questions in Memphis</title><link>https://techcrunch.com/2025/02/15/xais-colossus-supercomputer-raises-health-questions-in-memphis/</link><author>Connie Loizos</author><category>tech</category><pubDate>Sat, 15 Feb 2025 18:53:04 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Elon Musk’s AI startup xAI plans to continue using 15 gas turbines to power its “Colossus” supercomputer in Memphis, Tennessee, according to an operating permit with the Shelby County Health Department for non-stop turbine use from June 2025 to June 2030. Why does it matter? The Commercial Appeal, a news outlet that obtained the documents, […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>Elevate Your Night Shift Productivity Levels: 8 Strategies for Thriving - Not Just Surviving</title><link>https://hackernoon.com/elevate-your-night-shift-productivity-levels-8-strategies-for-thriving-not-just-surviving?source=rss</link><author>Beth Rush</author><category>tech</category><pubDate>Sat, 15 Feb 2025 18:45:02 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[Almost every worker will tell you how tough it is to keep productivity levels high at work. However, the struggle is doubled when you work nights. Thankfully, there are a few techniques that can help you survive and thrive in your field, even when working those late hours.The Challenges of Long Hours in the EveningThe regular nine-to-five shift is the norm across many industries, especially in the corporate world. However, there are a few outliers, such as the hospitality and manufacturing sectors. Health care, security, and firefighting departments also need hands on deck at all times in emergencies, which requires plenty of alertness.\
There are several benefits, like less competition between workers and extra pay. However, it takes some work to get used to it as you have to adjust your body clock. The night shift can spark plenty of employee turnover since most people can’t sacrifice their daytime hours.\
Those who decide to take on the night shift find themselves at a crossroads. The hours may seem much longer despite being the same eight hours that workers typically work. It can be hard to keep energy levels up or stay awake.Most Effective Night Shift TipsDealing with a night shift schedule requires several adjustments, including your sleep schedule, caffeine intake, physical activities and so much more. Here are tried-and-true strategies to help you out.Have a Routine Before the ShiftGood sleep should be the highest priority in your pre-work routine. It’s much easier to stay alert and concentrate on your tasks on the job when you’ve had enough shut-eye. Unfortunately, over one-third of Americans sleep less than seven hours. Heading to bed in the middle of the day can also seem foreign to your body.\
Thus, the first step is to have a consistent schedule. For example, people in health care may have to start their eight hours of work at 7 p.m. or so. Others might deal with extended hours, bringing the total closer to 12.\
Thus, the ideal night-shift nurse sleep schedule will start at 9 a.m. if you want to achieve eight hours and an extra two hours to prep and commute. The leeway can also be used as additional time to sleep ahead of those longer work times.\
If it’s your first time heading into the shift, give your body a week to gradually acclimate to the new sleep schedule. Complete and total sleep deprivation can be too exhausting for your body.\
Be mindful of your sleeping quarters during the adjustment period. Blackout curtains are ideal for completely darkening the room and tricking your body into thinking it’s nighttime. You should put your phone in silent mode to avoid calls that may disrupt your sleep.\
You can also experiment with other sleeping aids. For example, some people find aromatherapy relaxing, easing them into slumber during the daytime. White noise machines can also provide the best background sound as you fall asleep.\
After a long sleep, you should feel recharged. Awaken your senses by preparing a well-balanced dinner before your shift, and incorporate fruits and vegetables into your meals to get your nutrition fix. Afterward, wear your clothing of choice and head out to conquer the night shift.Design a Post-Work RitualNow that you know how to prepare for a 12-hour night shift, it’s time to move on to winding down. Ideally, the routine gives you something to look forward to, such as having a shower to feel clean. You can also move your skincare routine to this time.\
Try to give yourself a bit of leisure after work. Some use this time to watch shows, listen to music, or play video games. Social media is also a good outlet for entertainment. Just remember to use it in moderation to avoid doomscrolling.Exercise Caution Around CaffeineCaffeine is a helpful tool to keep your energy levels as high as possible. A cup of your favorite coffee or tea just before work can help you energize throughout the day. However, it’s best to avoid the temptation of getting a second or third drink in the middle of the shift. Too much caffeine will result in quite a crash afterward.\
It’s also best to schedule your intake. Prolonged caffeine ingestion can disrupt the circadian rhythm, disrupting your sleep routine. Meanwhile, short exposure boosts sleep fragmentation, increasing your awakenings while sleeping and ruining the quality of your shut-eye. Once a week is a good rule of thumb to follow.One thing most people forget to realize when moving into the night shift is that everyone else still maintains their day routines. Your family and friends will likely have lunch, run errands, and do their own jobs when you’re asleep. When you’re awake and working, they’ll likely be sleeping.\
Human interaction is essential to enduring the night shift. Try to find overlaps and make time to catch up. You can invite a friend over for dinner before you head to work or chat on the phone while you’re home.\
You can also turn to your fellow employees going through the night shift. Camaraderie helps to overcome a challenge. Get to know these people, and build strong working relationships. The bond can even help you increase energy levels and boost productivity.Maintain Physical ActivityNight shift workers have limited time and energy. However, it’s still important to maintain some form of physical movement. Exercise may lessen the likelihood of disorders like depression, cardiovascular conditions, and metabolic diseases in chronic shift workers.\
Try to find breaks to just take a walk. Aside from getting fresh air, you can move your muscles and wake yourself up. If you’re already a veteran for the evening hours, you may even consider heading to the gym right after work.Move Your ResponsibilitiesKeeping productivity levels high throughout the shift can take time and practice. However, one hack you can try is intentionally scheduling the most important responsibilities at the beginning of your shift. After all, you will likely have more energy at the start.\
Once you’ve completed the bulk of the most important work, the next goal is to stretch out your energy throughout the rest of the hours and stay awake. You can try to space out your duties and give yourself breaks when you’re faltering.Keep the Same Schedule on Off DaysIt's important to maintain your current schedule to get your body used to the night shift. This solution is best for working full time, allowing you to fully adjust your body clock and move your most productive times to match your work schedule.\
If you have obligations during your off days that need to be done during the daytime, try to reschedule. You can also proceed and readjust afterward with some intentionally planned naps. Minimize deviating and the changes in your productivity should follow suit.Manage Your Mindset and StressNight shift workers can experience stress throughout the adjustment period. Unfortunately, this pressure can alter the immune system and make you more vulnerable to illnesses. It can also build a negative mindset toward your schedule.\
Make sure to have stress management techniques under your belt. Meditation is a good way to come to terms with your thoughts, while breathing exercises can assist you in calming down systemic turmoil. Activities like journaling and yoga can also improve your mood.Thrive With an Unconventional ScheduleHaving a night shift schedule is a challenge worth conquering. You get to be present for the people who need aid and assistance, and it brings fulfillment to your long-term career development. You just have to adapt to the circumstances to reap the rewards.]]></content:encoded></item><item><title>Perplexity launches its own freemium ‘deep research’ product</title><link>https://techcrunch.com/2025/02/15/perplexity-launches-its-own-freemium-deep-research-product/</link><author>Anthony Ha</author><category>tech</category><pubDate>Sat, 15 Feb 2025 18:39:14 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Perplexity has become the latest AI company to release an in-depth research tool, with a new feature announced Friday. Google unveiled a similar feature for its Gemini AI platform in December. Then OpenAI launched its own research agent earlier this month. All three companies even have given the feature the same name: Deep Research. The […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>Pushing autovectorization to the limit: utf-8 validator</title><link>https://www.reddit.com/r/rust/comments/1iq7yn2/pushing_autovectorization_to_the_limit_utf8/</link><author>/u/Laiho3</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 18:36:40 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[   submitted by    /u/Laiho3 ]]></content:encoded></item><item><title>Questions around LoadBalancer</title><link>https://www.reddit.com/r/kubernetes/comments/1iq7y2v/questions_around_loadbalancer/</link><author>/u/HahaHarmonica</author><category>reddit</category><category>k8s</category><category>devops</category><pubDate>Sat, 15 Feb 2025 18:36:01 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Kubernetes</source><content:encoded><![CDATA[New to k8s. I’ve deployed rke2 and i’ve got several questions. Main Question) So i’m trying to install rancher UI on it. When you go to install with helm it asks for a “hostname” and the hostname should be the name of your load balancer…i enabled the load balancer of rke2 but I have no clue how to operate with it…how do I change the configuration to point to rancher? The instructions aren’t very clear on the rke2 site on how to use it other than setting the enable-loadbalancer flag. 2) During my debugging, i ran the command “kubectl get pods -A -o wide. I have a server node and an agent node. In the column of IP it showed the two IPs of the sever and agent. What was odd was that it showed pods running that were running on the agent node that shouldn’t have been running since I stopped the agent service on the agent node and I ran the kill all script. So how in the world can the containers supposedly running on the agent node…actually be running.3) I had some problems with ports not opened initially. Forgot to apply the reload command to make sure the ports were open. I then ran systemctl restart rke2-server on the sever and then systemctl restart rke2-agent on the agent and it was still broken. I finally after 30 min of thinking that wasn’t the problem completely resetting the services by running the killall scripts on both of them before it works…so why in the world won’t k8s actually respect systemctl and restart properly without literally shutting everything down. ]]></content:encoded></item><item><title>Bored With Chess? Magnus Carlsen Wants to Remake the Game</title><link>https://games.slashdot.org/story/25/02/15/053254/bored-with-chess-magnus-carlsen-wants-to-remake-the-game?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sat, 15 Feb 2025 18:34:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA["Magnus Carlsen, the world's top chess player, is bored of chess," the Washington Post wrote Friday:

Carlsen has spent much of the past year appearing to dismiss the game he has mastered: It was no longer exciting to play, he told a podcast in March. In December, he withdrew from defending a world championship because he was penalized for wearing jeans to the tournament. 
How would the world's best player spice up the game? Change the rules, and add a touch of reality TV. 

Ten of the world's top players gathered in a German villa on the Baltic coast this week to play in the first tournament of a new chess circuit, the Freestyle Chess Grand Slam Tour, that Carlsen co-founded. The twist: The tour randomizes the starting positions of the chess board's most important pieces, so each game begins with the queen, rooks and knights in a jumble. [It's sometimes called "Chess960" or Fischer random chess — with both players starting with the same arrangement of pieces.] Players have to adapt on the fly. Carlsen is backed by a cadre of investors who see a chance to dramatize chess with the theatrics of a television show. Players wear heart-rate monitors and give confession-booth interviews mid-match where they strategize and fret to the audience. Some purists are skeptical. So is the International Chess Federation, which sent a barrage of legal threats to Freestyle Chess before it launched this week's event. 
At stake is a lucrative global market of hundreds of millions of chess players that has only continued to grow since the coronavirus pandemic launched a startling chess renaissance — and, perhaps, the authority to decide if and how a centuries-old game should evolve... The format is an antidote to the classical game, where patterns and strategies have been so rigorously studied that it's hard to innovate, Carlsen said. "It's still possible to get a [competitive] game, but you have to sort of dig deeper and deeper," Carlsen said. "I just find that there's too little scope for creativity." 

The article also includes this quote from American grand master Hikaru Nakamura who runs a chess YouTube channel with 2.7 million subscribers). "An integral part of regular chess is that when you play, you spend hours preparing your opening strategy before the game. But with Fischer Random ... it's a little bit looser and more enjoyable." And German entrepreneur Jan Henric Buettner (one of the investors) says they hope to bring the drama of Formula One racecars. ("Cameras mounted at table level peer up at each player during games," the article notes at one point.) 

The first Freestyle Chess Grand Slam Tour (with a $750,000 prize pool) concluded Friday, according to the article, but "Carlsen did not play in it," the Post points out. "He was upset in the semifinals by German grand master Vincent Keymer." Carlsen's reaction? "I definitely find Freestyle harder." 

But Chess.com reports that Carlsen will be back to playing regular chess very soon:

Global esports powerhouse Team Liquid has announced the signings of not just one, but two superstars of chess. Five-time World Champion and world number-one Magnus Carlsen and the 2018 challenger, world number-two Fabiano Caruana will represent the club ahead of the 2025 Esports World Cup (EWC)... Carlsen and Caruana, fresh from competing in the Weissenhaus Freestyle Chess Grand Slam, will first represent Team Liquid in the $150,000 Chessable Masters, which begins on February 16 and serves as the first of two qualifying events in the 2025 Champions Chess Tour. The top-12 players from the tour qualify for the EWC. 

In an announcement video Carlsen reportedly trolls the FIDE, according to Indian Express. "The announcement video sees Carlsen wear a Team Liquid jersey along with a jacket and jeans. He then asks: 'Do I have to change?' To this, someone responds: 'Don't worry, we're pretty chill in esports. Welcome to Team Liquid.'"]]></content:encoded></item><item><title>PAROL6: 3D-printed desktop robotic arm</title><link>https://source-robotics.github.io/PAROL-docs/</link><author>bo0tzz</author><category>hn</category><pubDate>Sat, 15 Feb 2025 18:26:49 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Basketball has evolved into a game of calculated decision-making</title><link>https://nabraj.com/blog/basketball-solved-sport/</link><author>nabaraz</author><category>hn</category><pubDate>Sat, 15 Feb 2025 18:21:10 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[Basketball has evolved from a game of unpredictability into a game of calculated decision-making with the use of data and analytics. From a game of points, assists, and rebounds, it has progressed into using thousands of data points to optimize every element of the game.All decisions are made based on numbers not intuition. Long-range shooting and layups are preferred over mid-range shooting. Players are no longer do-it-alls; they are now given specialized roles.In the last decade, long-range shooting has gone from a secondary option to a primary choice for building offense. Recently, teams have realized three-pointers have higher point value despite their lower scoring percentage. This has led to a revolution in structuring an offense around taking long-range shots. The Golden State Warriors, led by Stephen Curry, probably jump-started this trend with 34 three-pointer attempts per game in the 2018-19 season, twice as much from five years ago. Celtics, this season, have averaged almost 50 three-pointers attempt this season (2024-25 season).In the past, the team built its roster around a big name like Shaq. Most of the offense were from the center. This has now changed, with the primary strategy being to stretch the opposition and take long-range shots.The 3-and-D model refers to a player, usually a wing player, who is just above average at three-pointers and plays competent defense.  Forget about positions; just get a guy who can do some 3s and Ds.Danny Green is probably the father of this model, with his 40% career three-point field goal percentage and he also made into all-defensive team.In  recent years, every team has had at least one 3-and-D model player on the roster.Gone are the days of an all-around player. There is no longer a need for a player who does everything. Look at players like Kobe Bryant and Lebron James (early career); they not only scored but guarded defense, caught rebounds and played the role of playmakers.Now, it’s all about creating lineups with specialized players. A team typically consists of a three-point shooter, a defensive specialist, a playmaker, and rebounders. They all have specific roles assigned to them.A catch-all word for statistics, technology has played a pivotal role in shaping this game. In addition to data collection, biomechanics and motion cameras track every player’s movement. NBA even brought SportVU from football; it follows the ball and supposedly captures images 25 times per second. Coaches can now use this to analyze the speed, position, form, and motion of each player on the court. In the end, it’s all about optimizing every ball possession. Basketball might have lost its flair; every move is now predictable and measured. What is the future of basketball, is anyone’s guess? Maybe a rule change is around the corner?]]></content:encoded></item><item><title>OpenAI teases a ‘simplified’ GPT-5 model</title><link>https://techcrunch.com/2025/02/15/openai-teases-a-simplified-gpt-5-model/</link><author>Cody Corrall</author><category>tech</category><pubDate>Sat, 15 Feb 2025 18:05:00 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Welcome back to Week in Review. This week we’re looking at OpenAI canceling the release of o3; TikTok returning to U.S. app stores nearly a month after it was removed; more complications in Elon Musk’s bid to buy OpenAI for $97.4 billion; and more! Let’s do it. OpenAI effectively canceled the release of o3, which […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>Jill – a functional programming language for the Nand2Tetris platform</title><link>https://github.com/mpatajac/jillc</link><author>mailgolub</author><category>hn</category><pubDate>Sat, 15 Feb 2025 18:04:12 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Alzheimer&apos;s biomarkers now visible up to a decade ahead of symptoms</title><link>https://newatlas.com/brain/alzheimers-dementia/alzheimers-biomarkers-visible-decade-before-symptoms/</link><author>01-_-</author><category>hn</category><pubDate>Sat, 15 Feb 2025 18:02:17 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[Researchers at the University of Pittsburgh have devised a biomarker test that can spot small amounts of clumping tau protein in the brain and cerebrospinal fluid, which lead to Alzheimer's disease.Catching these clumps early while still in minute quantities can enable effective intervention. This test can help detect the tangled proteins years in advance of them appearing prominently in brain scans – as much as up to a decade.That's heartening because Alzheimer's disease not only has devastating impact on patients' lives long term, but is also currently incurable. It begins to show up as forgetfulness, and progresses to confusion and disorientation, delusions, hallucinations, and trouble sleeping. As the condition worsens, patients may experience difficulty eating, moving around, incontinence, loss of speech, and significant memory loss.“Early detection is key to more successful therapies for Alzheimer’s disease since trials show that patients with little-to-no quantifiable insoluble tau tangles are more likely to benefit from new treatments than those with a significant degree of tau brain deposits," explained Thomas Karikari, senior author of the paper published in  this week.Here's a quick bit of context on what's happening in and around the brain. Humans have some 86 billion nerve cells, and they're connected by what are called synapses. These synapses are supported by 'rail tracks' that enable the flow of essential nutrients and information, and they're called microtubules.Tau proteins (abbreviated from tubulin associated unit) stabilize these microtubules, and help keep the brain healthy. These proteins can malfunction, clump together and create tangles – preventing the microtubules from functioning properly.Here's where this new biomarker test comes in. The researchers have found an important section of the tau protein that causes it to form harmful tangles in the brain. This section is made up of 111 building blocks (amino acids). Within this section, they discovered two specific spots that, when modified, can tell doctors if tau proteins are starting to clump together. This is important because if doctors can detect these changes early enough, they might be able to treat the problem before it gets worse.The two specific spots they found (called p-tau-262 and p-tau-356) work like early warning signals, letting doctors know that tau proteins are beginning to malfunction. This could help identify Alzheimer's disease sooner, when treatments might be more effective.]]></content:encoded></item><item><title>How to Scale AI Infrastructure With Kubernetes and Docker</title><link>https://hackernoon.com/how-to-scale-ai-infrastructure-with-kubernetes-and-docker?source=rss</link><author>Natapong Sornprom</author><category>tech</category><pubDate>Sat, 15 Feb 2025 18:00:06 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[Firms increasingly make use of artificial intelligence (AI) infrastructures to host and manage autonomous workloads. Consequently, as well as resilient infrastructures that will be able to meet heterogeneous application or cloud requirements. Organizations use and to meet such needs because firms realize that both are highly effective use cases that deliver scalable AI infrastructures.\
Deploying AI infrastructure typically provides adequate computation power to execute and process large datasets. These demands can translate into the need for scalable methods that enable AI models to run on large workloads without hurting performance., nonetheless, are also resource-intensive, normally demanding both high computing capacity and the ability to process high levels of data. As more advanced AI applications and a larger scale become required, scalability becomes more critical. Scalability ensures that AI systems can handle increasing workloads without any loss of performance.The growing amount of data is a concern for AI systems in many facets. Most AI models, especially those based on deep learning, heavily depend on large amounts of data during training and inference. However, without adequate scalable infrastructure, processing and interpreting such.Scalable AI hardware supports reliable and stable performance despite drastically overwhelming computational loads. With Kubernetes, horizontal scaling of AI jobs is a breeze, and the dynamic resizing of replica numbers can be done as a function of necessity. In contrast, Docker containers support lean, isolated environments for running AI models where resource conflict is not a performance bottleneck.Effective Resource ManagementEfficient use of resources is the key to cost-effective and sustainable AI deployment. Kubernetes' resource requests and limits allow for fine-grained CPU and memory resource management by avoiding underprovisioning and overprovisioning. Docker's resource management fills the gap by isolating container resources.Scaling AI Infrastructure With Kubernetes and DockerContainerization is one of the milestones in the evolution of scalable artificial intelligence infrastructure. Containerization of the AI application and its dependencies in a Docker container ensures consistency throughout the development, testing, and deployment environments.\
First, you must define a Dockerfile in order to install the environment. The Dockerfile is a series of instructions about how to build a Docker image. It declares a base image, the dependencies required, and the initial setup commands that apply to your app. The following is a basic Dockerfile for a Python machine-learning model:# Use an official Python runtime as a parent image
FROM python:3.9-slim

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy the current directory contents into the container
COPY . .

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Expose the port the app runs on
EXPOSE 5000

# Define environment variable
ENV NAME World

# Run the app
CMD ["python", "./app.py"]
\
If the Dockerfile is ready, then you can build the Docker image and run the container. Run the following commands: \n # Build the Docker image
docker build -t ml-model:latest .

# Run the container
docker run -p 5000:5000 ml-model:latest
Deploying the Dockerized AI Model to Kubernetes provides a wide range of orchestration features that enable efficient application management in the containerized infrastructure. Deployment of the Docker image on Kubernetes ensures that a specified number of application replicas is always running. The following is an example of deployment.yaml file that you can use to:apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-model-deployment
spec:
  replicas: 3  
  selector:
    matchLabels:
      app: ml-model
  template:
    metadata:
      labels:
        app: ml-model
    spec:
      containers:
      - name: ml-model-container
        image: ml-model:latest
        ports:
        - containerPort: 5000
\n The above code snippet shows how to deploy the AI model, but you also need to make the model externally accessible. You will need to expose it by defining a Kubernetes Service. The service.yaml below illustrates an example:apiVersion: v1
kind: Service
metadata:
  name: ml-model-service
spec:
  selector:
    app: ml-model
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: LoadBalancer
\n Use the kubectl command-line tool to apply the deployment and service configurations:# Deploy the application
kubectl apply -f deployment.yaml

# Expose the service
kubectl apply -f service.yaml
Kubernetes provides excellent scaling capabilities to AI environments, maximizing resource utilization and performance. Horizontal scaling is done by adding additional containers, and vertical scaling involves adding additional resources like CPU or memory to a container.Horizontal scaling is used to scale up the number of replicas (Pods) of an AI system to handle a higher workload. The process requires enabling dynamic scaling depending on the number of replicas. The command used to enable such a process is `kubectl scale`. The particular command is used to set up the deployment to function up to a maximum of five replicas:\
`kubectl scale --replicas=5 deployment/ml-model-deployment`\
The command scales up the ml-model-deployment to use five replicas of the machine-learning model container. The system dynamically provisions more Pods to meet the required number afterward.Automatic Scaling using the Horizontal Pod Autoscaler (HPA)Kubernetes facilitates auto-scaling using the Horizontal Pod Autoscaler (HPA). The HPA dynamically adjusts the number of replicas based on resource use, i.e., CPU or memory, in relation to set limits. The YAML configuration shown below is a relevant example of an HPA that dynamically scales for ml-model-deployment in response to CPU use:apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: ml-model-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ml-model-deployment
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
\n In this setup, scaleTargetRef is used to define the Deployment to be scaled, i.e., ml-model-deployment. The minimum replica count is set using MinReplicas, while the maximum replica count is controlled using maxReplicas. In addition, the CPU utilization percentage is set using targetCPUUtilizationPercentage, i.e., to 50%. \
CPU utilization of more than 50% across all Pods results in scaling up the replica count to a maximum of 10 automatically. As soon as CPU utilization drops below the set percentage, Kubernetes automatically reduces the replica count in order to release resources.Horizontal scaling is mainly to cope with more traffic, whereas vertical scaling provides more resources (such as CPU or memory) to existing containers. The process is to scale up or down resource requests and limits in the Kubernetes Deployment. In order to scale up the CPU and memory limits of the ml-model-deployment, one would need to open the deployment.yaml file:apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-model-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ml-model
  template:
    metadata:
      labels:
        app: ml-model
    spec:
      containers:
      - name: ml-model-container
        image: ml-model:latest
        ports:
        - containerPort: 5000
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
\
In this updated configuration:requests specify the minimum resources required for the container.limits define the maximum resources the container can use.]]></content:encoded></item><item><title>Introducing encode: Encoders/serializers made easy.</title><link>https://www.reddit.com/r/rust/comments/1iq6pz7/introducing_encode_encodersserializers_made_easy/</link><author>/u/Compux72</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 17:42:33 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[ is a toolbox for building encoders and serializers in Rust. It is heavily inspired by the  and  crates, which are used for building parsers. It is meant to be a companion to these crates, providing a similar level of flexibility and ease of use for reversing the parsing process.The main idea behind  is to provide a set of combinators for building serializers. These combinators can be used to build complex encoders from simple building blocks. This makes it easy to build encoders for different types of data, without having to write a lot of boilerplate code.Another key feature of  is its support for  environments. This makes it suitable for use in embedded systems, where the standard library (and particularly the [] module) is not available.See the  folder for some examples of how to use . Also, check the  module for a list of all the combinators provided by the crate.Ready to use combinators for minimizing boilerplate.: Enables the  feature.: Enables the use of the standard library.: Enables the use of the  crate.: Implements [] for [].Why the  trait instead of ?A buffer stores bytes in memory such that write operations are . The underlying storage may or may not be in contiguous memory. A BufMut value is a cursor into the buffer. Writing to BufMut advances the cursor position.The bytes crate was never designed with falible writes nor  targets in mind. This means that targets with little memory are forced to crash when memory is low, instead of gracefully handling errors.Why the  trait instead of ?Because there is no alternative, at least that i know of, that supports  properlyBecause it's easier to work with than  and Because using  with binary data often leads to a lot of boilerplate]]></content:encoded></item><item><title>Rust and the Null Paradigm: Exploring Safety and Alternatives</title><link>https://dev.to/dedsecrattle/rust-and-the-null-paradigm-exploring-safety-and-alternatives-47b</link><author>Prabhat Kumar</author><category>dev</category><category>rust</category><pubDate>Sat, 15 Feb 2025 17:36:44 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[Rust is a systems programming language known for its focus on memory safety, concurrency, and performance. One of the key decisions made by the Rust team is the choice to not support the null paradigm. While this design choice leads to safer, more reliable code, it raises an important question for developers: How do we handle the absence of a value?In many programming languages, the concept of  or  (depending on the language) is used to represent the absence of a value. This approach, however, introduces a number of issues:Null Pointer Dereferencing: Accessing a  pointer can lead to runtime errors that are often hard to debug. values can lead to subtle bugs when programmers forget to check for them, causing unexpected behaviors in applications.Rust decided to leave behind this problematic paradigm in favor of alternatives that promote safety at compile-time.
  
  
  Rust's Approach: Rust takes a unique approach to handling the absence of a value: it uses the  enum. This powerful construct allows developers to explicitly handle the presence or absence of a value.The  type is defined as: represents the presence of a value. represents the absence of a value.This makes  a much safer alternative to . The compiler forces you to explicitly handle both cases ( and ), reducing the risk of null pointer exceptions.Here's a simple example of how you might use  to handle optional values:In this example, instead of returning  when the user isn't found, we return , and the caller must handle the potential absence of a value.
  
  
  Why  Is Better Than  With , Rust ensures that you never have to deal with null values unless you explicitly decide to. This eliminates the common pitfalls of null pointer dereferencing. Rust’s borrow checker ensures that you handle all  cases correctly, even when dealing with complex ownership and lifetime semantics. Rust’s pattern matching syntax makes it easy to express the logic of handling  and  values, leading to clean and readable code.
  
  
  Other Alternatives:  for Error Handling
In addition to , Rust also offers the  enum for handling operations that might fail. The  type is especially useful when a function might produce either a valid result or an error, combining both success and failure cases into a single, explicit structure.Just like , the  type forces developers to handle both cases explicitly, improving robustness and error recovery in your programs.
  
  
  Conclusion: Embracing Safety and Clarity
Rust’s rejection of the  paradigm and adoption of types like  is a conscious choice to create safer, more reliable code. By forcing developers to handle the possibility of missing or invalid data explicitly, Rust eliminates the risks and headaches often associated with .While this approach might feel unfamiliar to developers coming from languages with , it quickly becomes a strength of the language. Embracing  (and ) in your code not only prevents bugs but also promotes a more clear, understandable way of thinking about data and operations in your applications.]]></content:encoded></item><item><title>Rust - Ownership Model</title><link>https://dev.to/dedsecrattle/rust-ownership-model-1l6j</link><author>Prabhat Kumar</author><category>dev</category><category>rust</category><pubDate>Sat, 15 Feb 2025 17:34:49 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[Rust’s ownership model is one of its most powerful and defining features. It provides memory safety without needing a garbage collector, making Rust highly efficient and reliable. If you're coming from languages like C++, Java, or Python, understanding Rust’s ownership system might feel daunting at first. In this post, we'll break it down step by step.What is Ownership in Rust?Ownership is Rust’s unique way of managing memory. Instead of using garbage collection or manual memory management, Rust enforces strict ownership rules at compile time. These rules ensure memory safety and prevent data races in concurrent programs.The three key ownership rules are:Each value in Rust has a single owner.When the owner goes out of scope, Rust automatically deallocates the value.Ownership can be transferred (moved) or borrowed (immutably or mutably).
  
  
  Moving, Copying, and Cloning
When assigning a value from one variable to another, ownership is transferred. Consider this example:Since  is allocated on the heap, Rust prevents double-free errors by invalidating  when ownership moves to .Certain types implement the  trait, meaning they are duplicated instead of moved. Examples include:Primitive types (integers, floats, booleans, etc.) implement , so they don’t follow move semantics.If you need to duplicate heap-allocated data, use :Cloning explicitly creates a separate copy in memory, avoiding move-related issues.Rust allows borrowing instead of transferring ownership. Borrowing enables passing data without giving up ownership.A reference () allows read-only access to data without taking ownership:You can have multiple immutable borrows at the same time, but not if there’s a mutable borrow.A mutable reference () allows modification but enforces exclusivity:Rust ensures at compile time that you cannot have multiple mutable references or a mix of mutable and immutable references at the same time.
  
  
  Lifetimes: Ensuring Valid References
Rust’s  prevent dangling references. Consider this example:The  lifetime annotation ensures that the returned reference is valid as long as both input references are valid.
  
  
  Why Rust’s Ownership Model Matters
: No need for garbage collection, yet Rust prevents use-after-free and memory leaks.: Enforces thread safety at compile time.: Eliminates runtime overhead associated with memory management.: Code is predictable and free from subtle memory bugs.Rust’s ownership model might take some getting used to, but once you grasp it, you gain the power to write efficient and safe code without worrying about memory leaks. By understanding moves, copies, borrowing, and lifetimes, you can write highly performant Rust applications while maintaining safety guarantees.Are you currently learning Rust? Let me know what aspects of ownership you find the most challenging in the comments below!]]></content:encoded></item><item><title>&apos;Mass Theft&apos;: Thousands of Artists Call for AI Art Auction to be Cancelled</title><link>https://slashdot.org/story/25/02/15/0351257/mass-theft-thousands-of-artists-call-for-ai-art-auction-to-be-cancelled?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sat, 15 Feb 2025 17:34:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[An anonymous reader shared this report from the Guardian:

Thousands of artists are urging the auction house Christie's to cancel a sale of art created with artificial intelligence, claiming the technology behind the works is committing "mass theft". The Augmented Intelligence auction has been described by Christie's as the first AI-dedicated sale by a major auctioneer and features 20 lots with prices ranging from $10,000 to $250,000... 
The British composer Ed Newton-Rex, a key figure in the campaign by creative professionals for protection of their work and a signatory to the letter, said at least nine of the works appearing in the auction appeared to have used models trained on artists' work. However, other pieces in the auction do not appear to have used such models. 
A spokesperson for Christie's said that "in most cases" the AI used to create art in the auction had been trained on the artists' "own inputs". 

More than 6,000 people have now signed the letter, which states point-blank that "Many of the artworks you plan to auction were created using AI models that are known to be trained on copyrighted work without a license."

These models, and the companies behind them, exploit human artists, using their work without permission or payment to build commercial AI products that compete with them. Your support of these models, and the people who use them, rewards and further incentivizes AI companies' mass theft of human artists' work. We ask that, if you have any respect for human artists, you cancel the auction. 

Last week ARTnews spoke to Nicole Sales Giles, Christie's vice-president and director of digital art sales (before the open letter was published). And Giles insisted one of the major themes of the auction is "that AI is not a replacement for human creativity."
"You can see a lot of human agency in all of these works," Giles said. "In every single work, you're seeing a collaboration between an AI model, a robot, or however the artist has chosen to incorporate AI. It is showing how AI is enhancing creativity and not becoming a substitute for it." 

One of the auction's headline lots is a 12-foot-tall robot made by Matr Labs that is guided by artist Alexander Reben's AI model. It will paint a new section of a canvas live during the sale every time the work receives a bid. Reben told ARTnews that he understands the frustrations of artists regarding the AI debate, but he sees "AI as an incredible tool... AI models which are trained on public data are done so under the idea of 'fair use,' just as search engines once faced scrutiny for organizing book data (which was ultimately found to fall under fair use)," he said.... "AI expands creative potential, offering new ways to explore, remix, and evolve artistic expression rather than replace it. The future of art isn't about AI versus artists — it's about how artists wield AI to push boundaries in ways we've never imagined before...." 

Digital artist Jack Butcher has used the open letter to create a minted digital artwork called Undersigned Artists. On X he wrote that the work "takes a collective act of dissent — an appeal to halt an AI art auction — and turns it into the very thing it resists: a minted piece of digital art. The letter, originally a condemnation of AI-generated works trained on unlicensed human labor, now becomes part of the system it critiques." 

Christie's will accept cryptocurrency payments for the majority of lots in the sale.
]]></content:encoded></item><item><title>Lil guy is trying his best</title><link>https://www.reddit.com/r/artificial/comments/1iq6dyy/lil_guy_is_trying_his_best/</link><author>/u/MetaKnowing</author><category>dev</category><category>ai</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 17:27:46 +0000</pubDate><source url="https://www.reddit.com/r/artificial/top/?sort=top&amp;t=day&amp;limit=3">Reddit - AI</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Transition from C++ to Rust</title><link>https://www.reddit.com/r/rust/comments/1iq67vq/transition_from_c_to_rust/</link><author>/u/Dvorakovsky</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 17:20:14 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Guys, are here any people who were learning/coding in C++ and switched to Rust. How do you feel? I mean I could easily implement linked lists: singly, doubly in c++, but when I saw how it is implemented in Rust I'd say I got lost completely. I'm only learning rust... So yeah, I really like ownership model even tho it puts some difficulties into learning, but I think it's a benefit rather than a downside. Even tho compared to C++ syntax is a bit messy for me]]></content:encoded></item><item><title>No, your GenAI model isn&apos;t going to replace me</title><link>https://marioarias.hashnode.dev/no-your-genai-model-isnt-going-to-replace-me</link><author>/u/dh44t</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 17:06:40 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Type safe Go money library beta2!</title><link>https://www.reddit.com/r/golang/comments/1iq5stk/type_safe_go_money_library_beta2/</link><author>/u/HawkSecure4957</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Feb 2025 17:02:08 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[Hello, after I released beta1, I received many constructive feedback! mainly lacking of locale support.This update brings locale formatting support and an improved interface for better usability. With Fulus, you can perform monetary operations safely and type-soundly. Plus, you can format money for any locale supported by CLDR. You can even define custom money types tailored specifically to your application's needs! I still need to battle test it against production projects, I have none at the moment. I am aiming next for performance benchmarking and more improvement, and parsing from string!I am open for more feedback. Thank you! ]]></content:encoded></item><item><title>A Programmer&apos;s Guide to Game Design: The Major Ingredients You Should Know</title><link>https://hackernoon.com/a-programmers-guide-to-game-design-the-major-ingredients-you-should-know?source=rss</link><author>Chenuli J.</author><category>tech</category><pubDate>Sat, 15 Feb 2025 17:00:05 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[Software developers spend their whole time with complicated problems, and they try to learn almost everything about algorithms, structures, frameworks, and blah-blah-blah. While playing games and coffee have become stress-busters in our lives, why can't building games be the best one?\
Even though some people find game development insane, it’s easy for software developers because they have almost every skill needed: math, Programming, UX/UI, and the usual stuff. If a normal person takes 6 months to learn a Game Engine, the Developer will take a maximum of 3 months or less.\
Many people don’t know this, but I started my tech career as a game developer, although I later turned my back on game development and became a Python developer. And no lies, they were a few of the best years in my life.\
This article is dedicated to any developer who wants to try something new or exciting (which is game development, yes). Scroll down!Software developers who are interested in game development have a remarkable head start. Programming skills are the core of game development. Even if you’re more comfortable with Swift or Ruby, which is not commonly used in game development, you can quickly pick up other Object-oriented programming languages that are much more commonly used for game development, like C# or C++, easier than anyone!\
If you're a Python lover, you will love to hear this: There are really good, AAA games made with Python such as Battlefield 2, EVE Online, Civilization IV, and more!Not only Python, but almost every commonly used Programming language has libraries that support making games. For example:Flutter has Flame, a game engine that supports Flutter language.Ruby has Gosu, a library that makes it easy to develop 2D games.Python has PyGame, a library that empowers you to create both 2D and 3D games.Phaser allows you to create games with JavaScript and HTML5.For every beginner, either a software engineer or a novice, I give one common piece of advice— Start as small as possible. It doesn't matter how small pieces of code it has or how messy it is, you've won the challenge!\
If you love simple 2D games, I would recommend that you make a Pong game. Pong features simple graphics (2 rectangles and a circle) you can create on your own, minimal sounds, and a game loop. If you want to learn about making multiplayer games, allow matches to occur between two human players over a network. If you want to learn about AI, allow the player to challenge the computer.\
And if you love 3D games like me, start with Cube Run. I haven't made it without a Game engine because, 3D becomes a bit harder with Python or others but with Unity, it's the best game I recommend to take a start.Major Ingredients of A GameIf you make a cake without Sugar, no one will eat it. Except for diabetic people, of course, like my mom.\
The same goes for video games. It’s full of ingredients, some of which are required for every game and some of which are optional. I’ll introduce them briefly.In many games, the level itself is a challenge, trickier than the smartest AI enemies. Series like Tomb Raider also emphasize complex and challenging level design.\
While the advent of open-world games like GTA may make the level design seem less important than in bygone times, it’s worth noting that even open-world games have ‘levels’, such as a particular building, structure, or map area you must enter to achieve a goal.\
To reduce player feelings of being railroaded, levels will ideally have multiple possible paths through them.In games, you can’t really rely on natural light sources to illuminate your video game.\
(You don’t think there’s a sun inside a game engine, do you?)\
Every light source in a video game must be added by hand and light manipulation is incredibly important. Light can be used for all of the following:Controlling the player’s ability . In horror and survival games, light is a resource that must be carefully managed.Controlling a player’s ability . In games with an element of stealth, dark areas can provide cover while well-lit areas represent a difficult challenge.Setting the mood. The quality of light can be used to set the mood, with sunny and bright lighting associated with happy times and brooding light associated with dark times.Lighting the way. Light can be used to direct the player’s attention. The best-designed levels in video games often make clever use of light to guide the player in the right direction when they might otherwise be lost.Game art is the medium through which the game world is presented to the player. In a sense, all the programming effort that goes into making video games is an attempt to turn game art into something that feels responsive and alive. Game art is an umbrella term that includes textures, 3D models, sprites, particle effects, and lighting.\
And yes, it’s a broad area, best to not cover it in this article.Unlike in the real world, video game sounds cannot be made by accident. Every sound in the game universe must be added by hand, and it is through layering these sounds that the game world starts to feel lifelike. You also need to be mindful of sounds triggered by the player, by other characters, and ambient sounds that create the game world environment.\
As an example, the player accidentally hits a metal object; if it doesn't emit a sound, it doesn't feel natural, or the scientist who claimed that metals have sonorous properties got it wrong.\
Another ever-present fact of video games is music, used to create an emotional response in the player or removed entirely to leave behind an eerie silence. Unlike most compositions, video game music must loop seamlessly. It must also transition smoothly to new compositions based on in-game events, such as being spotted by an enemy.\
Here are some of my favorite places to find sound:You have made graphics, levels, and everything but the whole game feels like a dead body. If you want your game to be alive, you need some lines of code.\
Most of my readers are probably a developer already, so you probably know the importance of programming anywhere. I'm not going to give a lecture on "what is programming", but here’s a bit about programming in game design.\
First of all, you need to decide one thing: Are you making a game by using a Game Engine + Language or building a game from scratch with Python or something? It's your choice but let me help you: If you're going to build games for fun, choose the first option because it's easier. \
As I said in the beginning, programmers always juggle complex problems so you probably shouldn't take more stress with that too.\
(Game Engines are the software used to create video games.)\
There are many of them, but the most popular ones are:Unity (Great for beginners, recommended)Next, choose a language to get started. Mostly, C# and C are used. Don't worry, you already got a headstart in knowing at least one programming language; most people start even before they know what the word “programming“stands for.\
And that’s about it. Well, of course, there are many other optional ingredients that video games consist of but in general, the above are basically the starter pack.Starting game development is easier for software developers than anyone. As someone with programming skills, you have a massive head-start on the average video game hobbyist who wants to learn how to make a game. If I scroll to the top of the article, I can list the below points as key takeaways.It's a lot easier to find a game dev library in your comfortable programming language to get started.Start with a small game, maybe a clone of an existing game.Game Engines make your life a lot easier.If you want to make a big, impressive game but don’t have a lot of time to spare, consider teaming up with others or joining a modding community.And that's all for now, Happy Designing! 🏎\
If you loved this article, make sure to subscribe using your email, so you can read all my content inside your inbox without missing any!It’s totally free of charge and I don’t even have time to send spam emails.]]></content:encoded></item><item><title>Marc Andreessen dreams of making a16z a lasting company, beyond partnerships</title><link>https://techcrunch.com/2025/02/15/marc-andreessen-dreams-of-making-a16z-a-lasting-company-beyond-partnerships/</link><author>Marina Temkin</author><category>tech</category><pubDate>Sat, 15 Feb 2025 17:00:00 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Many venture industry observers have wondered whether Andreessen Horowitz, a firm that manages $45 billion, has its sights on eventually becoming a publicly traded company. Co-founder Marc Andreessen said he isn’t “chomping at the bit to take the firm public,” on this week’s Invest Like the Best podcast. But he discussed his goal of building […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>TIL There is a minor-planet called Linux</title><link>https://www.reddit.com/r/linux/comments/1iq5p1p/til_there_is_a_minorplanet_called_linux/</link><author>/u/forvirringssirkel</author><category>linux</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 16:57:50 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Golang Mastery Exercises</title><link>https://www.reddit.com/r/golang/comments/1iq5k7w/golang_mastery_exercises/</link><author>/u/Temporary-Buy-7562</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Feb 2025 16:51:47 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[I made a repository which has a prompt for you to write many exercises, if you complete this, and then drill the exercises, I would be sure you would reach mastery with the core of the language.I initially wanted to make some exercises for drilling syntax since I use copilot and lsps a lot, but ended up with quite a damn comprehensive list of things you would want to do with the language, and I find this more useful than working on leetcode to really adopt the language.]]></content:encoded></item><item><title>More Solar and Battery Storage Added to TX Grid Than Other Power Src Last Year</title><link>https://insideclimatenews.org/news/10022025/solar-battery-storage-texas-grid/</link><author>indigodaddy</author><category>hn</category><pubDate>Sat, 15 Feb 2025 16:37:04 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[As the market for renewables in Texas continues to strengthen and innovate, the power makeup of the state’s electric grid is slated to keep shifting toward adding more renewables. Last year, solar and battery storage installation led capacity growth within Texas’ electric grid, according to research from the Federal Reserve Bank of Dallas published in January. Texas added nearly 1,500 megawatts of battery storage to the grid’s summer rated capacities in 2023. That figure almost tripled to 4,374 megawatts added in 2024, according to the report. Capacity from solar power added to the grid enjoyed a similar trajectory. In 2023, 4,570 megawatts were added to the grid, while in 2024, nearly 9,700 megawatts were added. Given that Texas has its own isolated energy grid, the Electricity Reliability Council of Texas (ERCOT) is responsible for managing the majority of energy for its residents. Please take a look at the new openings in our newsroom.See jobsHistorically, ERCOT, which manages 90 percent of the state’s power load, has primarily relied on natural gas. But other energy sources, like wind and solar, have played a critical role in offsetting high demand. ERCOT added 3,400 megawatts from natural gas power plants in 2024. That’s after more than 1,000 megawatts of natural gas power were inactive within the grid from 2021 to 2023, according to Dallas Fed data. The capacity growth from solar and battery storage allowed the grid to manage another hot Texas summer in 2024, reported Garret Golding, an assistant vice president for energy program at the Dallas Fed. Battery storage is relatively new to ERCOT. One of the first battery power storage plants to be connected to ERCOT was in 2021, southeast of Dallas in Kaufman County. The 50-megawatt plant run by Enel, one of the largest renewable energy owners and operators in the country, was the first of Enel’s 14 battery projects it has since developed across the state. The forecasted power demand in Texas from population growth and heavy load users like data centers, cryptocurrency mining and artificial intelligence, alongside the competitive market for batteries, is dictating the rising use of storage within ERCOT, said Randald Bartlett, a senior director of operations and management for battery energy storage systems at Enel North America.Texas’ permitting processes and ability to develop has made it easier to add and build new capacity in comparison to other states with more laborious entryways, Bartlett said. Before, there wasn’t really adequate criteria and evidence to forecast what batteries would contribute to the grid, ERCOT CEO Pablo Vegas said during a board of directors meeting on Tuesday. Now, the grid operator added battery contribution to its report forecasting future capacity, demand and reserves. Battery storage in the ERCOT grid has nearly doubled every year since 2021, Vegas said. At the end of 2024, there were nearly 10,000 megawatts from batteries within ERCOT.Vegas said the capacity from batteries made a significant difference in ERCOT during bridge hours, or the winter morning hours when the sun has yet to rise and in the evenings after the sun sets. “Batteries made a meaningful contribution to what those shoulder periods look like and how much scarcity we get into during these peak events,” Vegas said when analyzing the grid’s performance during recent winter storms. In the spring of 2024, Texas’ installation of utility scale solar outpaced California’s, and jumped from 1,900 megawatts in 2019 to over 20,000 megawatts in 2024. As a result, solar met nearly 50 percent of the state’s peak power demand on some days. The state’s quick deployment of utility scale solar didn’t happen overnight. It started in 2005, when the legislature instructed the Public Utility Commission of Texas to create competitive renewable energy zones, where the state planned transmission lines to connect cities to renewable energy sources in west Texas.Initially, it was intended to capture wind power but was able to quickly include solar because of the existing infrastructure, said Dustin Mulvaney, an environmental studies professor at San Jose State University and an author of Planning to Build Faster: A Solar Energy Case Study, published in October by the Roosevelt Institute. That forward-looking plan is often held up as a model renewable energy advocates and developers say the Federal Energy Regulatory Commission could implement across other regional transmission organizations, by requiring proactive planning and by creating rules of how to pay for transmission systems. As the state’s grid continues to experience a rapid shift in the type of generation available to serve demand, the state’s grid operator is looking to build a higher voltage transmission system, upgrading from 345-kilovolt lines to 765-kilovolt lines. In 2024, nearly 78 gigawatts of transmission-connected wind, solar and battery energy storage capacity was installed to the grid. And more than 102 gigawatts of transmission-connected renewable capacity is expected to be installed by the end of 2025, according to a December ERCOT report.It’s that growth of both demand and renewables connected to the grid that’s led ERCOT to ask the Public Utility Commission to consider upgrading the state’s transmission system rather than expanding its existing one. The 765-kV lines would provide significant economic and reliability benefits to the ERCOT system, wrote Kristi Hobbs, ERCOT’s vice president of system planning and weatherization, in the grid operator’s submission of its regional transmission plans to the commission in late January.Regardless of which transmission plan is chosen, Hobbs wrote, the explosive growth projected throughout the next six years and beyond will require major public investment. Perhaps you noticed: This story, like all the news we publish, is free to read. That’s because Inside Climate News is a 501c3 nonprofit organization. We do not charge a subscription fee, lock our news behind a paywall, or clutter our website with ads. We make our news on climate and the environment freely available to you and anyone who wants it.That’s not all. We also share our news for free with scores of other media organizations around the country. Many of them can’t afford to do environmental journalism of their own. We’ve built bureaus from coast to coast to report local stories, collaborate with local newsrooms and co-publish articles so that this vital work is shared as widely as possible.Two of us launched ICN in 2007. Six years later we earned a Pulitzer Prize for National Reporting, and now we run the oldest and largest dedicated climate newsroom in the nation. We tell the story in all its complexity. We hold polluters accountable. We expose environmental injustice. We debunk misinformation. We scrutinize solutions and inspire action.Donations from readers like you fund every aspect of what we do. If you don’t already, will you support our ongoing work, our reporting on the biggest crisis facing our planet, and help us reach even more readers in more places? Please take a moment to make a tax-deductible donation. Every one of them makes a difference.Reporter, Texas RenewablesArcelia Martin is an award-winning journalist at Inside Climate News. She covers renewable energy in Texas from her base in Dallas. Before joining ICN in 2025, Arcelia was a staff writer at The Dallas Morning News and at The Tennessean. Originally from San Diego, California, she’s a graduate of Gonzaga University and Columbia University Graduate School of Journalism.]]></content:encoded></item><item><title>ISS Astronauts Give Space-to-Earth Interview Weeks Before Finally Returning to Earth</title><link>https://science.slashdot.org/story/25/02/15/033223/iss-astronauts-give-space-to-earth-interview-weeks-before-finally-returning-to-earth?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sat, 15 Feb 2025 16:34:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[Last June two NASA astronauts flew to the International Space Station on the first crewed test flight of Boeing's Starliner. But they aren't stranded there, and they weren't abandoned, the astronauts reminded CNN this week in a rare space-to-earth interview:

"That's been the rhetoric. That's been the narrative from day one: stranded, abandoned, stuck — and I get it. We both get it," [NASA astronaut Butch] Wilmore said. "But that is, again, not what our human spaceflight program is about. We don't feel abandoned, we don't feel stuck, we don't feel stranded." Wilmore added a request: "If you'll help us change the rhetoric, help us change the narrative. Let's change it to 'prepared and committed.' 

"That's what we prefer," he said... 
[NASA astronaut Suni] Williams also reiterated a sentiment she has expressed on several occasions, including in interviews conducted before she left Earth. "Butch and I knew this was a test flight," she told CNN's Cooper, acknowledging the pair has been prepared for contingencies and understood that the stay in space might be extended. "We knew that we would probably find some things (wrong with Starliner) and we found some stuff, and so that was not a surprise," she said. 
When Cooper opened the interview by asking the astronauts how they're doing, Williams answers "We're doing pretty darn good, actually," pointing out they had plenty of food and great crew members. And Wilmore added that crews come to the space station on a careful cycle, and "to alter that cycle sends ripple effects all the way down the chain. We would never expect to come back just special for us or anyone unless it was a medical issue or something really out of the circumstances along those lines. So we need to come back and keep the normal cycle going..." 

CNN's article notes a new announcement from NASA Tuesday that the astronauts might return a couple weeks early "after opting to change the SpaceX Crew Dragon capsule it will use." That mission's targeted launch date is now March 12. 

In the meantime, Williams says in the interview, "We do have some internet connection up here, so we can get some internet live. We've gotten football. It's been this crew's go-to this past fall. Also YouTube or something like that. It's not continuous — it has chunks of time that we get it. And we use that same system also to make phone calls home, so we can talk to our families, and do videoconferences even on the weekends as well. This place is a pretty nice place to live, for the most part." 

And they're also "working on with folks on the ground" to test the NASA's cube-shaped, free-flying robotic Astrobees.]]></content:encoded></item><item><title>Deepseek R1 Distill 8B Q40 on 4 x Raspberry Pi 5</title><link>https://github.com/b4rtaz/distributed-llama/discussions/162</link><author>b4rtazz</author><category>hn</category><pubDate>Sat, 15 Feb 2025 16:11:29 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>NTSYNC Driver Fix Being Worked On For Proper User Permissions</title><link>https://www.phoronix.com/news/Linux-NTSYNC-Permissions-Issue</link><author>Michael Larabel</author><category>tech</category><pubDate>Sat, 15 Feb 2025 16:05:32 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[One of the great new features of Linux 6.14 is the NTSYNC driver being completed for better emulating the Microsoft Windows NT synchronization primitives so that software like Wine and Proton (Steam Play) can provide for better performance when running Windows games on Linux. But it turns out an oversight up to now has meant that in practice it's not really too usable out-of-the-box...]]></content:encoded></item><item><title>The HackerNoon Newsletter: No Startup Has Ever Failed Because it Didn’t Have a Blog (2/15/2025)</title><link>https://hackernoon.com/2-15-2025-newsletter?source=rss</link><author>Noonification</author><category>tech</category><pubDate>Sat, 15 Feb 2025 16:04:17 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[🪐 What’s happening in tech today, February 15, 2025?By @realgpp [ 9 Min read ] Learn how to read thread dumps and take control of your application’s runtime behaviour.
 Read More.By @bigmao [ 6 Min read ] The case against content marketing, and how to do inbound marketing in the post-content age.  Read More.By @loadbalancer [ 5 Min read ] Researchers have optimized Layer-7 load balancing using programmable SmartNICs to improve efficiency, cost, and energy use in cloud data centers. Read More.🧑‍💻 What happened in your world this week?We hope you enjoy this worth of free reading material. Feel free to forward this email to a nerdy friend who'll love you for it.See you on Planet Internet! With love, 
 The HackerNoon Team ✌️]]></content:encoded></item><item><title>[D] Have any LLM papers predicted a token in the middle rather than the next token?</title><link>https://www.reddit.com/r/MachineLearning/comments/1iq4f0r/d_have_any_llm_papers_predicted_a_token_in_the/</link><author>/u/TheWittyScreenName</author><category>dev</category><category>ai</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 15:59:49 +0000</pubDate><source url="https://www.reddit.com/r/MachineLearning/top/?sort=top&amp;t=day&amp;limit=3">Reddit - ML</source><content:encoded><![CDATA[I’m working on a project (unrelated to NLP) where we use essentially the same architecture and training as GPT-3, but we’re more interested in finding a series of tokens to connect a starting and ending “word” than the next “word”. Since we’re drawing a lot from LLMs in our setup, I’m wondering if there’s been any research into how models perform when the loss function isn’t based on the next token, but instead predicting a masked token somewhere in the input sequence. Eventually we would like to expand this (maybe through fine tuning) to predict a longer series of missing tokens than just one but this seems like a good place to start. I couldn’t find much about alternate unsupervised training schemes in the literature but it seems like someone must have tried this already. Any suggestions, or reasons that this is a bad idea?]]></content:encoded></item><item><title>Jeep Claims &apos;Software Glitch&apos; Disabled Opting-Out of In-Vehicle Pop-Up Ads in &apos;a Few&apos; Cases</title><link>https://tech.slashdot.org/story/25/02/15/0149202/jeep-claims-software-glitch-disabled-opting-out-of-in-vehicle-pop-up-ads-in-a-few-cases?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>tech</category><pubDate>Sat, 15 Feb 2025 15:34:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[Remember Jeep's new in-dash pop-up ads which reportedly appeared every time you stopped? 
"Since I'm a journalist, or at least close enough, I decided that I should at least get Stellantis/Jeep's side of things," writes car-culture site The Autopian:


Would Stellantis do something so woefully misguided and annoying? I reached out to our Stellantis/Jeep contact to ask and was initially told that they were "investigating" on their end, which to me felt like a stalling tactic while the proper ass-covering plans were conceived. I eventually got this response from a Stellantis spokesperson: 

 "This was an in-vehicle message designed to inform Jeep customers about Mopar extended vehicle care options. A temporary software glitch affected the ability to instantly opt out in a few isolated cases, though instant opt-out is the standard for all our in-vehicle messages. Our team had already identified and corrected the error, and we are following up directly with the customer to ensure the matter is fully resolved..." 

I suppose a glitch is possible, though I've not seen any examples of this ad popping up with the instant opt-out option available, but I guess it must exist, since not all Jeep owners seem to have had to deal with these ads. I suspect if this was happening to more people than these "few isolated cases" we'd still be cleaning up from the aftermath of the riots and uprisings. 

Because, as they write, "Really, I can't think of a quicker way to incur the wrath of nearly every human..."]]></content:encoded></item><item><title>Carbon capture more costly than switching to renewables, researchers find</title><link>https://techxplore.com/news/2025-02-carbon-capture-renewables.html</link><author>Brajeshwar</author><category>hn</category><pubDate>Sat, 15 Feb 2025 15:06:30 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Dust from car brakes more harmful than exhaust, study finds</title><link>https://e360.yale.edu/digest/brake-pads-lung-damage-study</link><author>Brajeshwar</author><category>hn</category><pubDate>Sat, 15 Feb 2025 15:06:15 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Rust - Ownership Model</title><link>https://dev.to/dedsecrattle/rust-ownership-model-2bak</link><author>Prabhat Kumar</author><category>dev</category><category>rust</category><pubDate>Sat, 15 Feb 2025 15:05:14 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[Rust’s ownership model is one of its most powerful and defining features. It provides memory safety without needing a garbage collector, making Rust highly efficient and reliable. If you're coming from languages like C++, Java, or Python, understanding Rust’s ownership system might feel daunting at first. In this post, we'll break it down step by step.What is Ownership in Rust?Ownership is Rust’s unique way of managing memory. Instead of using garbage collection or manual memory management, Rust enforces strict ownership rules at compile time. These rules ensure memory safety and prevent data races in concurrent programs.The three key ownership rules are:Each value in Rust has a single owner.When the owner goes out of scope, Rust automatically deallocates the value.Ownership can be transferred (moved) or borrowed (immutably or mutably).
  
  
  Moving, Copying, and Cloning
When assigning a value from one variable to another, ownership is transferred. Consider this example:Since  is allocated on the heap, Rust prevents double-free errors by invalidating  when ownership moves to .Certain types implement the  trait, meaning they are duplicated instead of moved. Examples include:Primitive types (integers, floats, booleans, etc.) implement , so they don’t follow move semantics.If you need to duplicate heap-allocated data, use :Cloning explicitly creates a separate copy in memory, avoiding move-related issues.Rust allows borrowing instead of transferring ownership. Borrowing enables passing data without giving up ownership.A reference () allows read-only access to data without taking ownership:You can have multiple immutable borrows at the same time, but not if there’s a mutable borrow.A mutable reference () allows modification but enforces exclusivity:Rust ensures at compile time that you cannot have multiple mutable references or a mix of mutable and immutable references at the same time.
  
  
  Lifetimes: Ensuring Valid References
Rust’s  prevent dangling references. Consider this example:The  lifetime annotation ensures that the returned reference is valid as long as both input references are valid.
  
  
  Why Rust’s Ownership Model Matters
: No need for garbage collection, yet Rust prevents use-after-free and memory leaks.: Enforces thread safety at compile time.: Eliminates runtime overhead associated with memory management.: Code is predictable and free from subtle memory bugs.Rust’s ownership model might take some getting used to, but once you grasp it, you gain the power to write efficient and safe code without worrying about memory leaks. By understanding moves, copies, borrowing, and lifetimes, you can write highly performant Rust applications while maintaining safety guarantees.Are you currently learning Rust? Let me know what aspects of ownership you find the most challenging in the comments below!]]></content:encoded></item><item><title>What is an encryption backdoor?</title><link>https://techcrunch.com/2025/02/15/what-is-an-encryption-backdoor/</link><author>Natasha Lomas</author><category>tech</category><pubDate>Sat, 15 Feb 2025 15:00:00 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Talk of backdoors in encrypted services is once again doing the rounds after reports emerged that the U.K. government is seeking to force Apple to open up iCloud’s end-to-end encrypted (E2EE) device backup offering. Officials were said to be leaning on Apple to create a “backdoor” in the service that would allow state actors to […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>Larry Ellison wants to put all US data in one big AI system</title><link>https://www.theregister.com/2025/02/12/larry_ellison_wants_all_data/</link><author>/u/namanyayg</author><category>dev</category><category>ai</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 14:59:53 +0000</pubDate><source url="https://www.reddit.com/r/artificial/top/?sort=top&amp;t=day&amp;limit=3">Reddit - AI</source><content:encoded><![CDATA[If governments want AI to improve services and security for their citizens, then they need to put all their information in one place – even citizens’ genomic data – according to Larry Ellison, the Oracle database tycoon.Ellison shared his take on what governments need to do to succeed with AI during a discussion with his buddy former UK prime minister Tony Blair at the World Governments Summit in Dubai today.The world's fourth-most-richest man – a good friend also of the world's richest man Elon Musk – insisted artificial intelligence is soon going to change everyone's lives "across the board."I have to tell the AI model as much about my country as I can. We need to unify all the national dataIf governments want in, they’ll need to gather all their data – spatial information, economic data, electronic healthcare records including genomic data, and info about infrastructure. Whatever they’ve got, basically. And put it all in one place to be analyzed by algorithms. The American multi-billionaire used the United States as an example, if not a goal."I have to tell [the] AI model as much about my country as I can," Ellison said. "We need to unify all the national data, put it into a database where it's easily consumable by the AI model, and then ask whatever question you like," he said. "That's the missing link."He believes the payoff will include better healthcare, thanks to treatments tailored to individuals, and the ability for governments to lift food production by better predicting crop yields. Analyzing land so that farmers can be advised where to apply fertilizers or increase irrigation was another scenario Ellison floated."As long as countries will put their data - all of it - in a single place we can use AI to help manage the care of all of the patients and the population at large," Ellison said, adding his belief that AI can handle other social services and eliminate fraud.Of course, such a vast database system could also be the precursor to pervasive surveillance – an idea Ellison last year said he feels is desirable and would like Oracle to help facilitate.Constant real-time surveillance of populations, analyzed by Oracle-powered machine-learning products, would keep everyone "on their best behavior," Ellison said at an Oracle financial analyst conference in September 2024. We're reminded of the NSA, PRISM, Snowden.Ellison is not just a techno-optimist. He’s also a top executive and shareholder who has made big AI investments as well as a database company to feed.He therefore told the Dubai audience that Oracle, already a big-time government and military contractor, is ready to help nations realize his above-mentioned AI visions. Ie: Put all this data into one big expensive Oracle system to learn from and process."Oracle is building a 2.2GW datacenter that costs between $50 and $100 billion dollars to build," Ellison said, noting it's sites like that where super-powered AI models will be trained. "Because these models are so expensive, you won't build your own as a rule. There'll be a handful of these models."And a handful of players that can train them. Oracle’s own facilities will likely be one. The super-corp has also joined another, the Stargate project, that plans to blow $500 billion on AI infrastructure in the US in the next four years. ®]]></content:encoded></item><item><title>Alexandre Mutel a.k.a. xoofx is leaving Unity</title><link>https://mastodon.social/@xoofx/113997304444307991</link><author>/u/namanyayg</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 14:53:32 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Don&apos;t &quot;optimize&quot; conditional moves in shaders with mix()+step()</title><link>https://iquilezles.org/articles/gpuconditionals/</link><author>/u/namanyayg</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 14:52:27 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[
In this article I want to correct a popular misconception that's been making the rounds in computer graphics aficionado circles for a long time now. It has to do with conditionals when selecting between two results in the GPUs. Unfortunately there are a couple of educational websites out there that are spreading some misinformation, and it would be nice correcting that. I tried contacting the authors without success, so without further ado, here goes my attempt to fix things up a little:
So, say I have this code, which I actually published the other day: snap45(  v )
{
     s = (v);
     x = (v.x);
     x>?(s.x,):
           x>?s*():
                      (,s.y);
}
The exact details of what it does don't matter for this discussion. All we care about is the two ternary operations deciding what's the final value this function should return. Indeed, depending on the value of the variable , the function will return one of three results, which are simple to compute. I could also have implemented this function with regular  statements, and all that I'm going to say in this article stays true.
Now, here's the problem - when seeing code like this, somebody somewhere will step up and invariably propose the following "optimization", which replaces what they believe (erroneously) are "conditional branches" in the code, by arithmetic operations. They will suggest something like this: snap45(  v )
{
     s = (v);
     x = (v.x);

     w0 = (,x);
     w1 = (,x)*(-w0);
     w2 = -w0-w1;

     res0 = (s.x,);
     res1 = (s.x,s.y)*();
     res2 = (,s.y);

     w0*res0 + w1*res1 + w2*res2;
}
There are two things wrong with this practice. The first one shows an incorrect understanding of how the GPU works. In particular, the original shader code had no conditional branching in it. Selecting between a few registers with a ternary operator or with a plain  statement does not lead to conditional branching; all it involves is a conditional move (a.k.a. "select"), which is a simple instruction to route the correct bits to the destination register. You can think of it as a bitwise AND+NAND+OR on the source registers, which is a simple combinational circuit. I'll repeat it again - there is no branching, the instruction pointer isn't manipulated, there's no prediction involved, no pipe to flush, no instruction cache to invalidation, no nothing.
For the record, of course GPUs can do real branching, and those are fine and fast and totally worth it when big chunks of code and computation are to be skipped given a condition. As with all things computing, always check the generated machine code to know what is happening exactly and when. But one thing you can safely assume without having to check any generated code - when moving simple values or computations like in my original example, you are guaranteed to not branch. This has been true for decades at this point, with GPUs. And while I'm not an expert in CPUs, I am pretty sure this is true for them as well.
The second wrong thing with the supposedly optimized version is that it actually runs much slower than the original version. You can measure it in a variety of hardware. I can only assume that's because the  function is probably implemented with some sort of conditional move or subtract + bit propagation + AND. step(  x,  y )
{
     x < y ?  : ;
}
Either way, using the step() "optimization" are either using the ternary operation anyways, which produces the  or  which they will use to mask in and out the different potential outputs with a series of arithmetic multiplications and additions. Which is wasteful, the values could have been conditionally moved directly, which is what the original shader code did.
But don't take my word for it, let's look at the generated machine code for the original code I published:
GLSL x>?(s.x,):
       x>?s*():
                  (,s.y);
AMD Compiler     s0,      v3, , v1
     v4, , v0
     s1,   vcc, (v2), s0
 v3, 0, v3, vcc
 v0, v0, v4, vcc
 vcc, (v2), s1
 v1, v1, v3, vcc
 v0, 0, v0, vcc
Microsoft Compiler   r0.xy, l(, ), v0.xy
   r0.zw, v0.xy, l(, )
 r0.xy, -r0.xyxx, r0.zwzz
 r0.xy, r0.xyxx
  r1.xyzw, r0.xyxy, l4()
   r2.xy, l(,), v0.xx  r0.z, l()
 r1.xyzw, r2.yyyy, r1.xyzw, r0.zyzy
 o0.xyzw, r2.xxxx, r0.xzxz, r1.xyzw
Here we can confirm that the GPU is not branching, as I explained. Instead, according to the AMD compiler, it's performing the required comparisons ( and  - cmp=compare, gt=greater than, ngt=not greated than), and then using the result to mask the results with the bitwise operations mentioned earlier ( - cnd=conditional).
The Microsoft compiler has expressed the same idea/implementation in a different format, but you can still see the comparison ( - "lt"=less than) and the masking or conditional move ( - mov=move, c=conditionally).
There are no jump/branch instructions in these listings.
Something not related to the discussion but interesting, is that some of the  GLSL calls I had in my shader before the ternary operator we are discussing, didn't become GPU instructions but rather instruction modifiers, which is the reason you see them in the listing. This means you can think of abs() calls as being free.
So, if you ever see somebody proposing this a = ( b, c, ( y, x ) );
as an optimization to
then please correct them for me.]]></content:encoded></item><item><title>Altman: OpenAI not for sale, especially to competitor who is not able to beat us</title><link>https://www.axios.com/2025/02/11/openai-altman-musk-offer</link><author>/u/namanyayg</author><category>dev</category><category>ai</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 14:17:57 +0000</pubDate><source url="https://www.reddit.com/r/artificial/top/?sort=top&amp;t=day&amp;limit=3">Reddit - AI</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>GitHub - yaitoo/xun: Xun is an HTTP web framework built on Go&apos;s built-in html/template and net/http package’s router (1.22).</title><link>https://github.com/yaitoo/xun</link><author>/u/imlangzi</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Feb 2025 14:15:54 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>What is Event Sourcing?</title><link>https://newsletter.scalablethread.com/p/what-is-event-sourcing</link><author>/u/scalablethread</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 14:05:06 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[Traditional data storage typically focuses on the current state of an entity. For example, in an e-commerce system, you might store the current state of a customer's order: items, quantities, shipping address, etc. Event sourcing takes a different approach. Instead of storing the current state directly, it stores the events that led to that state. Each event represents a fact that happened in the past. Think of it as a detailed log of transactions on your bank statement. These events are immutable and stored in an append-only event store. The core idea is that an application's state can be derived by replaying events in the order they occurred, just like you can get your current bank balance by replaying all the transactions from the beginning. This makes Event Sourcing particularly useful for applications that require a high degree of audibility and traceability.Every change to the application state is captured as an event object in an Event Sourcing system. These events are then stored in an event store, a database optimized for handling event data. Here's a step-by-step breakdown of how Event Sourcing works:Reconstructing the state from events involves reading all the events related to an entity from the event store and applying them in sequence to reconstruct the current state. It's like simulating all the changes that have occurred to construct the current state. For example, consider an e-commerce application where an order goes through various states like "Created," "Paid," and "Shipped." To determine the current state of an order, you would:Retrieve all events related to the order from the event store.Initialize an empty order object.Apply each event to the order object in the order in which they were stored.By the end of this process, the order object will reflect the current state of the order.As the number of events grows, replaying the entire event stream to reconstruct the state can become slow and inefficient. This is where snapshots come in. A snapshot is a saved state of an entity at a specific point in time. Instead of replaying all events from the beginning, the application can load the latest snapshot and then replay only the events that occurred after the snapshot was taken. If you enjoyed this article, please hit the ❤️ like button.If you think someone else will benefit from this, then please 🔁 share this post.]]></content:encoded></item><item><title>Antarctica&apos;s Only Insect</title><link>https://www.404media.co/antarcticas-only-insect/</link><author>Becky Ferreira</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/CleanShot-2025-02-14-at-09.17.41@2x.png" length="" type=""/><pubDate>Sat, 15 Feb 2025 14:00:13 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[Welcome back to the Abstract, 404 Media's weekly roundup of scientific studies to distract us from our present dystopia!This week, we are traveling back in time to 16th century Transylvania, so please make sure you are up to date on your bubonic plague shots. A study reconstructed wild weather events through the eyes of record-keepers during this fraught period, opening a tantalizing window into climate extremes unleashed by a vengeful God (according to contemporary reports).Then: making love the medaka way (get those anal fins ready). Next, the chillest insect in Antarctica (also: the only one). Finally, these turtles will dance for food, and yes, it’s very cute.The Haunting Weather Reports of 16th Century TransylvaniaRejoice, for this week has delivered one of the best varieties of study: Science via historical documents. Sure, ice cores and geological strata are great for reconstructing past climates, but nobody can bitch about the weather better than a good old-fashioned red-blooded member of team . To that end, researchers searched for mentions of weird weather across a trove of diaries, monastery records, travel notes, and other documents from 16th century Transylvania, during a “pivotal moment in climate history” when a centuries-long cooling event called the Little Ice Age intensified, according to researchers led by Ovidiu Răzvan Gaceu of the University of Oradea. These types of studies are packed with colorful human testimonies that can corroborate natural records. More importantly, though, they are just fun to read, especially during such an evocative time and place, freshly haunted by the vampiric spirit of Vlad the Impaler. Some highlights:In August 1526, heavy rainfall caused freak floods in Braşov that “washed the walls of the fortress, demolished the main gate, and the fish also got caught in the big church,” according to the Annals of Brașov. Fish in the church! The ultimate baptism.  In autumn 1553, people in the city of Cluj reported unusual weather events including “October strawberries.” For real, October is for pumpkins, get out of here with the strawbs. Turned out it was a bad omen—there was a plague the following winter. Keep that in mind if you see any late autumn strawberries: Kill on sight.Naturally, a lot of these accounts are heartbreaking. Locusts “sometimes covered the whole sky and destroyed grain crops” and caused terrible famines. A storm-related fire “killed 14 people and made 60 poor.” On September 29, 1582, “there was such a big storm, as it was said that it had never been seen before in the city of Cluj, which uprooted the trees and raised the roofs of the houses, people believed that it is sent by divinity to punish the crimes committed by them.” I mean, I’m not saying these people weren’t doing crimes. It’s 16th century Transylvania. Do what you gotta do. But that's not why there is extreme weather. You’re just in the Little Ice Age. The study ultimately identified “multiple pieces of evidence associated with extreme weather events, including 40 unusually warm summers and several years of excess precipitation or drought.” Taken together with natural archives, the documents paint a picture of troubled times, exacerbated by an unstable climate and possible emergent vampires. Relatable! Valentine’s Day is over, but the romantic mood is still in the air—or in the water, if you’re a medaka (flawless segue). Scientists have discovered that wild medaka, also known as Japanese rice fish, are fans of late-night booty calls, which is a behavior that has not been observed in captivity.“Although medaka and other model organisms are invaluable in laboratories, their ecology in the wild remains largely unknown,” said researchers led by Yuki Kondo of Osaka Metropolitan University. “This study showed that medaka in the wild initiate spawning during late nocturnal hours and exhibit vigorous courtship behavior at midnight.”Kondo and her colleagues recorded this vigorous courtship by placing GoPros into streams over the course of several summer nights in Gifu, Japan. The tapes revealed that medaka like to spawn in the dark, possibly to avoid predators during copulation. The results “provide the first empirical evidence that medaka mating begins significantly earlier than previously reported in the laboratory.”  For anyone who feels clueless about courtship, may I offer a page from the Medaka Sutra: “The spawning behavior of medaka follows a sequence of events: the male chases the female (following), the male swims rapidly around the female (quick circle), the male wraps his dorsal and anal fins around the female (wrapping), the female releases eggs, the male releases sperm (egg and sperm release), and the male leaves the female (leaving),” according to Kondo’s team.The only true love language is, indeed, spoken with anal fins.Major bonus points also go to Osaka Metropolitan University’s press team for throwing together this version of Edward Hopper’s famous “Nighthawks” painting with medaka getting drinks at a bar that is also named Medaka. It is genuinely one of the most inspired public relations efforts I have ever seen, and I’m going to get a print of it to hang on my wall.The Insect at the Edge of Earth, or the Antarctic midge, is the only insect that lives year-round on its namesake continent. Do you know how weird you have to be to be the  insect somewhere? But this midge doesn’t care. It just lives out its bug life, which lasts two years, in an otherwise bugless wasteland. Humans definitely care about the midge, though—how could we not? What is it doing there? How is it not dead? What can it teach us about cryopreservation? These questions are addressed in a new study that resolved mysteries about the animal’s interesting life cycle.“Freeze tolerance and cryoprotective dehydration are cold tolerance strategies used by various invertebrate species in polar regions and indeed,  utilises both for overwintering,” said researchers led by Mizuki Yoshida of the Ohio State University, who completed the project while at Osaka Metropolitan University (OMU killing it this week). “Larvae that are frozen in ice and cryoprotectively dehydrated readily survived 32 days of simulated overwintering,” the team said. “Unlike many insects restricted to highly specific microhabitats,  larvae inhabit a remarkably diverse range of substrates that differ in vegetation, substrate type, slope, drainage, and thermal and hydric conditions.”I love the phrasing of “readily survived” as if the midges were eager to show off their cryoprotective superpowers. After this 32-day period they emerged with “That all you got?” energy. By studying the bugs in these simulated conditions, the researchers confirmed that they rely on multiple overwintering strategies, including a state of arrested development called “obligate diapause.” “Diapause has long been assumed to be uncommon in Antarctic species, but the present study reveals that  utilises diapause for seasonal adaptation, as in many temperate species,” Yoshida and her colleagues said. In addition to being the only endemic Antarctic insect, this midge has the smallest genome of any known insect while also being the largest fully terrestrial animal on the continent, even though it’s only a few millimeters long. In other words, it is the biggest animal in Antarctica that doesn’t fly or swim. Okay, Antarctic midge. You just keep doing you.Last, turtles do a little victory dance when they find food. Yes, it is cute. Yes, there is a video.The footage (along with ) is part of a study that tested if turtles could distinguish the magnetic signatures of two geographical areas. When the turtles were exposed to signatures associated with an area they associated with food, they danced in anticipation of a meal, demonstrating that they could tell the signals apart—and party accordingly.  “Hallmarks of the behaviour include some or all of the following: tilting the body vertically, holding the head near or above water, opening the mouth, rapid alternating movement of the front flippers, and, occasionally, even spinning in place, hence the name ‘turtle dance,’” said researchers led by Kayla Goforth of Texas A&M University. “Turtles exhibited significantly higher levels of turtle dance behaviour when experiencing the field in which they had been fed.”With that, let’s all tilt vertically, spin in place, and shell-abrate the long weekend. Thanks for reading! See you next week.  ]]></content:encoded></item><item><title>Paragraf Is Building a &quot;Blank Canvas&quot; Graphene Foundry</title><link>https://spectrum.ieee.org/paragraf-graphene-foundry</link><author>Liam Critchley</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjQ2NTMyMC9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc4MzQyMzgzM30.wJGF4-_y2VSVjXLsYFhhL9DuC-xHiTHWB-Ciq4DHQTU/image.jpg?width=600" length="" type=""/><pubDate>Sat, 15 Feb 2025 14:00:03 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[The company wants to make graphene sensors more accessible to industries]]></content:encoded></item><item><title>These Google Photos alternatives offer tons of storage options at a reasonable price</title><link>https://techcrunch.com/2025/02/15/these-google-photos-alternatives-offer-tons-of-storage-options-at-a-reasonable-price/</link><author>Ivan Mehta</author><category>tech</category><pubDate>Sat, 15 Feb 2025 14:00:00 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Google Photos is a great service for storing images across devices. But Google Drive and Gmail only offer 15GB of storage for free. Google Photos used to offer free unlimited storage of images, but that is not the case anymore. If you are looking for a better photo storage plan, different features, or just want […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>Diablo hackers uncovered a speedrun scandal</title><link>https://arstechnica.com/gaming/2025/02/the-diablo-hackers-that-debunked-a-record-speedrun/</link><author>pitwin</author><category>hn</category><pubDate>Sat, 15 Feb 2025 14:00:00 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[But simply splitting a run into segments doesn't explain away all of the problems the TAS team found. Getting Naj's Puzzler on dungeon level 9, for instance, still requires outside modification of a save file, which is specifically prohibited by longstanding Speed Demos Archive rules that "manually editing/adding/removing game files is generally not allowed." Groobo's apparent splicing of multiple game versions and differently seeded save files also seems to go against SDA rules, which say that "there obviously needs to be continuity between segments in terms of inventory, experience points or whatever is applicable for the individual game."After being presented with the TAS team's evidence, SDA wrote that "it has been determined that Groobo's run very likely does not stem from only legitimate techniques, and as such, has itself been banished barring new developments." But Groobo's record is still listed as the "Fastest completion of an RPG videogame" by Guinness World Records, which has not offered a substantive response to the team's findings (Guinness has not responded to a request for comment from Ars Technica).
      A recent  speedrun on a confirmed legitimate dungeon seed.

          This might seem like a pretty petty issue to spend weeks of time and attention debunking. But at a recent presentation attended by Ars, Cecil said he was motivated to pursue it because "it did harm. Groobo's alleged cheating in 2009 completely stopped interest in speedrunning this category [of ]. No one tried, no one could."Because of Groobo's previously unknown modifications to make an impossible-to-beat run, "this big running community just stopped trying to run this game in that category," Cecil said. "For more than a decade, this had a chilling impact on that community." With Groobo's run out of the way, though, new runners are setting new records on confirmed legitimate RNG seeds, and with the aid of TAS tools.In the end, Cecil said he hopes the evidence regarding Groobo's run will make people look more carefully at other record submissions. "Groobo had created a number of well-respected ... speedruns," he said. "[People thought] there wasn't any good reason to doubt him. In other words, there was bias in familiarity. This was a familiar character. Why would they cheat?"]]></content:encoded></item><item><title>Career transition in to Kubernetes</title><link>https://www.reddit.com/r/kubernetes/comments/1iq1ka1/career_transition_in_to_kubernetes/</link><author>/u/Similar-Secretary-86</author><category>reddit</category><category>k8s</category><category>devops</category><pubDate>Sat, 15 Feb 2025 13:41:05 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Kubernetes</source><content:encoded><![CDATA["I've spent the last six months working with Docker and Kubernetes to deploy my application on Kubernetes, and I've successfully achieved that. Now, I'm looking to transition into a Devops Gonna purchase kode cloud pro for an year is worth for money ? Start from scratch like linux then docker followed by kubernetes then do some certification Any guidance here would be appreciated ]]></content:encoded></item><item><title>Built a cli tool for generating .gitignore files</title><link>https://www.reddit.com/r/golang/comments/1iq1ivv/built_a_cli_tool_for_generating_gitignore_files/</link><author>/u/SoaringSignificant</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Feb 2025 13:38:59 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[I built this mostly as an excuse to play around with Charmbracelet’s libraries like Bubble Tea and make a nice TUI, but it also solves the annoying problem of constantly looking up .gitignore templates. It’s a simple CLI tool that lets you grab templates straight from GitHub, TopTal, or even your own custom repository, all from the terminal. You can search through templates using a TUI interface, combine multiple ones like mixing Go and CLion, and even save your own locally so you don’t have to redo them every time. If you’re always setting up new projects and find yourself dealing with .gitignore files over and over, this just makes life a bit easier, hopefully. If that sounds useful, check it out here and give it a try. And if you’ve got ideas to make the TUI better or want to add something cool, feel free to open a PR. Always happy to get feedback or contributions!]]></content:encoded></item><item><title>ED25519 Digital Signatures In Go</title><link>https://www.reddit.com/r/golang/comments/1iq1i84/ed25519_digital_signatures_in_go/</link><author>/u/mejaz-01</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Feb 2025 13:37:59 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[   submitted by    /u/mejaz-01 ]]></content:encoded></item><item><title>Will AI Lead to the Disintermediation of Knowledge?</title><link>https://www.datasciencecentral.com/will-ai-lead-to-the-disintermediation-of-knowledge/</link><author>Bill Schmarzo</author><category>dev</category><category>ai</category><pubDate>Sat, 15 Feb 2025 13:28:49 +0000</pubDate><source url="https://www.datasciencecentral.com/">Data Science Central</source><content:encoded><![CDATA[Key Blog Points: For decades, organizations have operated under the central assumption that knowledge flows downward. Senior leaders, industry veterans, and domain experts have traditionally been the primary gatekeepers of critical information. Their insights, honed over years of experience, have been the cornerstone of strategic decision-making. Enter artificial intelligence (AI). Many folks are concerned that… Read More »]]></content:encoded></item><item><title>Richard Stallman on RISC-V and Free Hardware</title><link>https://odysee.com/@SemiTO-V:2/richardstallmanriscv:7?r=BYVDNyJt5757WttAfFdvNmR9TvBSJHCv</link><author>/u/ShockleyTransistor</author><category>linux</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 13:20:02 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Show HN: I Built a Reddit-style Bluesky client – still rough, but open to ideas</title><link>https://threadsky.app/</link><author>lakshikag</author><category>dev</category><category>hn</category><pubDate>Sat, 15 Feb 2025 13:19:17 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Beyond Chat: Bringing Models to The Canvas • Lu Wilson • YOW! 2024</title><link>https://www.youtube.com/watch?v=pLvMsGG7zE8</link><author>GOTO Conferences</author><category>video</category><category>learning</category><enclosure url="https://www.youtube.com/v/pLvMsGG7zE8?version=3" length="" type=""/><pubDate>Sat, 15 Feb 2025 13:01:10 +0000</pubDate><source url="https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA">GOTO Conferences yt</source><content:encoded><![CDATA[This presentation was recorded at YOW! Australia 2024. #GOTOcon #YOW
https://yowcon.com

Lu Wilson - Software Engineer at tldraw @TodePond 

RESOURCES
https://bsky.app/profile/todepond.com
https://mastodon.social/@TodePond
https://twitter.com/TodePond
https://www.todepond.com

Links
https://tldraw.dev
https://makereal.tldraw.com
https://drawfast.tldraw.com
https://teach.tldraw.com

ABSTRACT
Whenever a new technology appears, our first instinct as developers is to offer "text" as the primary method of interaction. This has happened throughout computing history, with the computer terminal, with early smartphones, and now it's happening again with AI.

At tldraw, we’ve been working on moving AI interaction away from the chat-based interface, towards a richer canvas environment. It hasn't been easy! I'll show you all the challenges we've faced, and how we're currently overcoming them. Some of the solutions have been surprising. [...]

TIMECODES
00:00 Intro
00:58 The canvas
06:16 Beyond chat?
07:09 Demo
09:25 Demo: Make Real
14:52 Demo: Draw Fast
19:01 Demo: Teach
27:28 Demo: Computer
35:42 Demo: Fight Simulator
28:13 Conclusion
41:10 Outro

Read the full abstract here:
https://yowcon.com/brisbane-2024/sessions/3533

RECOMMENDED BOOKS
Alex Castrounis • AI for People and Business • https://amzn.to/3NYKKTo
Phil Winder • Reinforcement Learning • https://amzn.to/3t1S1VZ
Holden Karau, Trevor Grant, Boris Lublinsky, Richard Liu & Ilan Filonenko • Kubeflow for Machine Learning • https://amzn.to/3JVngcx
Kelleher & Tierney • Data Science (The MIT Press Essential Knowledge series) • https://amzn.to/3AQmIRg
Lakshmanan, Robinson & Munn • Machine Learning Design Patterns • https://amzn.to/2ZD7t0x
Lakshmanan, Görner & Gillard • Practical Machine Learning for Computer Vision • https://amzn.to/3m9HNjP

https://bsky.app/profile/gotocon.com
https://twitter.com/GOTOcon
https://www.linkedin.com/company/goto-
https://www.instagram.com/goto_con
https://www.facebook.com/GOTOConferences
#AI #GenAI #GenerativeAI #ArtificialIntelligence #ChatGPT #ML #MakeRealtldraw #MakeReal #tldraw #Teachtldraw #AIDriven #LuWilson #YOWcon

CHANNEL MEMBERSHIP BONUS
Join this channel to get early access to videos & other perks:
https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join

Looking for a unique learning experience?
Attend the next GOTO conference near you! Get your ticket at https://gotopia.tech
Sign up for updates and specials at https://gotopia.tech/newsletter

SUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.
https://www.youtube.com/user/GotoConferences/?sub_confirmation=1]]></content:encoded></item><item><title>The IRS Is Buying an AI Supercomputer From Nvidia</title><link>https://tech.slashdot.org/story/25/02/15/0540249/the-irs-is-buying-an-ai-supercomputer-from-nvidia?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>BeauHD</author><category>tech</category><pubDate>Sat, 15 Feb 2025 13:00:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[According to The Intercept, the IRS is set to purchase an Nvidia SuperPod AI supercomputer to enhance its machine learning capabilities for tasks like fraud detection and taxpayer behavior analysis. From the report: With Elon Musk's so-called Department of Government Efficiency installing itself at the IRS amid a broader push to replace federal bureaucracy with machine-learning software, the tax agency's computing center in Martinsburg, West Virginia, will soon be home to a state-of-the-art Nvidia SuperPod AI computing cluster. According to the previously unreported February 5 acquisition document, the setup will combine 31 separate Nvidia servers, each containing eight of the company's flagship Blackwell processors designed to train and operate artificial intelligence models that power tools like ChatGPT. The hardware has not yet been purchased and installed, nor is a price listed, but SuperPod systems reportedly start at $7 million. The setup described in the contract materials notes that it will include a substantial memory upgrade from Nvidia.
 
Though small compared to the massive AI-training data centers deployed by companies like OpenAI and Meta, the SuperPod is still a powerful and expensive setup using the most advanced technology offered by Nvidia, whose chips have facilitated the global machine-learning spree. While the hardware can be used in many ways, it's marketed as a turnkey means of creating and querying an AI model. Last year, the MITRE Corporation, a federally funded military R&D lab, acquired a $20 million SuperPod setup to train bespoke AI models for use by government agencies, touting the purchase as a "massive increase in computing power" for the United States.
 
How exactly the IRS will use its SuperPod is unclear. An agency spokesperson said the IRS had no information to share on the supercomputer purchase, including which presidential administration ordered it. A 2024 report by the Treasury Inspector General for Tax Administration identified 68 different AI-related projects underway at the IRS; the Nvidia cluster is not named among them, though many were redacted. But some clues can be gleaned from the purchase materials. "The IRS requires a robust and scalable infrastructure that can handle complex machine learning (ML) workloads," the document explains. "The Nvidia Super Pod is a critical component of this infrastructure, providing the necessary compute power, storage, and networking capabilities to support the development and deployment of large-scale ML models."
 
The document notes that the SuperPod will be run by the IRS Research, Applied Analytics, and Statistics division, or RAAS, which leads a variety of data-centric initiatives at the agency. While no specific uses are cited, it states that this division's Compliance Data Warehouse project, which is behind this SuperPod purchase, has previously used machine learning for automated fraud detection, identity theft prevention, and generally gaining a "deeper understanding of the mechanisms that drive taxpayer behavior."]]></content:encoded></item><item><title>Chinese Vice Minister says China and the US must work together to control rogue AI: &quot;If not... I am afraid that the probability of the machine winning will be high.&quot;</title><link>https://www.scmp.com/news/china/diplomacy/article/3298267/china-and-us-should-team-rein-risks-runaway-ai-former-diplomat-says</link><author>/u/MetaKnowing</author><category>dev</category><category>ai</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 12:27:09 +0000</pubDate><source url="https://www.reddit.com/r/artificial/top/?sort=top&amp;t=day&amp;limit=3">Reddit - AI</source><content:encoded><![CDATA[A former senior Chinese diplomat has called for China and the US to work together to head off the risks of rapid advances in  (AI).But the prospect of cooperation was bleak as geopolitical tensions rippled out through the technological landscape, former Chinese foreign vice-minister Fu Ying told a closed-door AI governing panel in Paris on Monday.“Realistically, many are not optimistic about US-China AI collaboration, and the tech world is increasingly subject to geopolitical distractions,” Fu said.“As long as China and the US can cooperate and work together, they can always find a way to control the machine. [Nevertheless], if the countries are incompatible with each other ... I am afraid that the probability of the machine winning will be high.”The panel discussion is part of a two-day global  that started in Paris on Monday.Other panel members included Yoshua Bengio, the Canadian computer scientist recognised as a pioneer in the field, and Alondra Nelson, a central AI policy adviser to former US president Joe Biden’s administration and the United Nations.]]></content:encoded></item><item><title>Karol Herbst steps down as Nouveau maintainer due to “thin blue line comment”</title><link>https://www.reddit.com/r/linux/comments/1iq09g6/karol_herbst_steps_down_as_nouveau_maintainer_due/</link><author>/u/mdedetrich</author><category>linux</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 12:24:10 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA["I was pondering with myself for a while if I should just make it official that I'm not really involved in the kernel community anymore, neither as a reviewer, nor as a maintainer.Most of the time I simply excused myself with "if something urgent comes up, I can chime in and help out". Lyude and Danilo are doing a wonderful job and I've put all my trust into them.However, there is one thing I can't stand and it's hurting me the most. I'm convinced, no, my core believe is, that inclusivity and respect, working with others as equals, no power plays involved, is how we should work together within the Free and Open Source community.I can understand maintainers needing to learn, being concerned on technical points. Everybody deserves the time to understand and learn. It is my true belief that most people are capable of change eventually. I truly believe this community can change from within, however this doesn't mean it's going to be a smooth process.The moment I made up my mind about this was reading the following words written by a maintainer within the kernel community:"we are the thin blue line"This isn't okay. This isn't creating an inclusive environment. This isn't okay with the current political situation especially in the US. A maintainer speaking those words can't be kept. No matter how important or critical or relevant they are. They need to be removed until they learn. Learn what those words mean for a lot of marginalized people. Learn about what horrors it evokes in their minds.I can't in good faith remain to be part of a project and its community where those words are tolerated. Those words are not technical, they are a political statement. Even if unintentionally, such words carry power, they carry meanings one needs to be aware of. They do cause an immense amount of harm.I wish the best of luck for everybody to continue to try to work from within. You got my full support and I won't hold it against anybody trying to improve the community, it's a thankless job, it's a lot of work. People will continue to burn out.I got burned out enough by myself caring about the bits I maintained, but eventually I had to realize my limits. The obligation I felt was eating me from inside. It stopped being fun at some point and I reached a point where I simply couldn't continue the work I was so motivated doing as I've did in the early days.Please respect my wishes and put this statement as is into the tree. Leaving anything out destroys its entire meaning.]]></content:encoded></item><item><title>Building the MagicMirror in Rust with iced GUI Library 🦀</title><link>https://www.reddit.com/r/rust/comments/1ipzubj/building_the_magicmirror_in_rust_with_iced_gui/</link><author>/u/amindiro</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 11:56:35 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[I recently embarked on a journey to build a custom MagicMirror using the Rust programming language, and I’d like to share my experiences. I wrost a blog post titled "software you can love: miroir Ô mon beau miroir" this project was my attempt to create a stable, resource-efficient application for the Raspberry Pi 3A.Here's what I loved about using Rust and the iced GUI library:Elm Architecture + Rust is a match made in heaven: iced was perfect for my needs with its Model, View, and Update paradigms. It helped keep my state management concise and leverage Rust type system Opting for this lightweight rendering library reduced the size of the binary significantly, ending with a 9MB binary. Although troublesome at first, I used ‘cross’ to cross compile Rust for armv7.If anyone is keen, I’m thinking of open-sourcing this project and sharing it with the community. Insights on enhancing the project's functionality or any feedback would be much appreciated!Feel free to reach out if you're interested in the technical nitty-gritty or my experience with Rust GUI libraries in general.]]></content:encoded></item><item><title>Ordered map</title><link>https://dev.to/kirillscherba/ordered-map-13op</link><author>Kirill Scherba</author><category>dev</category><category>go</category><pubDate>Sat, 15 Feb 2025 11:51:43 +0000</pubDate><source url="https://dev.to/t/go">Dev.to Go</source><content:encoded><![CDATA[Omap is Golang package for working with thread safe ordered maps. The ordered map contains the golang map, list and mutex to execute Ordered Map functions.The Ordered Map is a map that remembers the order of items. The map can be iterated over to retrieve the items in the order they were added.
  
  
  Introduction to the omap Go Package
The omap Go package is a lightweight and efficient library for working with ordered maps in Go. An ordered map is a data structure that combines the benefits of a map and a list, allowing you to store key-value pairs in a specific order.Omap is a Go package that provides an implementation of an ordered map. It is designed to be fast, efficient, and easy to use. Omap is particularly useful when you need to store data in a specific order, such as when working with configuration files, caching, or data processing pipelines.Ordered: omap preserves the order in which key-value pairs are inserted, allowing you to iterate over the map in a specific order.Fast lookups: omap uses a hash table to store key-value pairs, making lookups fast and efficient.Efficient insertion and deletion: omap uses a linked list to store the order of key-value pairs, making insertion and deletion operations efficient.To use omap, you can install it using the following command:go get github.com/kirill-scherba/omap
Here is an example of how to use omap:This code creates a new omap, inserts some key-value pairs, and then iterates over the omap in order, printing out each key-value pair.The omap Go package is a useful library for working with ordered maps in Go. Its fast lookups, efficient insertion and deletion, and ordered iteration make it a great choice for a variety of use cases. Whether you're working with configuration files, caching, or data processing pipelines, omap is definitely worth considering.Configuration files: Use omap to store configuration data in a specific order, making it easy to iterate over the configuration and apply settings in the correct order.Caching: Use omap to store cached data in a specific order, making it easy to iterate over the cache and evict items in the correct order.Data processing pipelines: Use omap to store data in a specific order, making it easy to iterate over the data and process it in the correct order.]]></content:encoded></item><item><title>Karol Herbst Steps Down As Nouveau Maintainer Due To Linux Kernel&apos;s Toxic Environment</title><link>https://www.phoronix.com/news/Karol-Herbst-Nouveau-No</link><author>Michael Larabel</author><category>tech</category><pubDate>Sat, 15 Feb 2025 11:40:27 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Karol Herbst has been a Nouveau driver developer for over a decade working on this open-source, reverse-engineered NVIDIA Linux graphics driver. He went on to become employed by Red Hat. While he's known more these days for his work on Mesa and the Rusticl OpenCL driver for it, he's still remained a maintainer of the Nouveau kernel driver. But today he announced he's resigning as a Nouveau driver maintainer due to differences with the upstream Linux kernel developer community...]]></content:encoded></item><item><title>KDE Developers Addressing Early Bugs From Plasma 6.3</title><link>https://www.phoronix.com/news/KDE-Plasma-6.3-Early-Bugs</link><author>Michael Larabel</author><category>tech</category><pubDate>Sat, 15 Feb 2025 11:27:40 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[KDE Plasma 6.3 released this week as the newest step forward for the KDE desktop. While it was smooth on the whole, there were some early bugs that KDE developers were dealing with this week. KDE developer Nate Graham is out with his usual weekly development summary for the Plasma desktop...]]></content:encoded></item><item><title>[P] Daily ArXiv filtering powered by LLM judge</title><link>https://www.reddit.com/r/MachineLearning/comments/1ipz934/p_daily_arxiv_filtering_powered_by_llm_judge/</link><author>/u/MadEyeXZ</author><category>dev</category><category>ai</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 11:14:16 +0000</pubDate><source url="https://www.reddit.com/r/MachineLearning/top/?sort=top&amp;t=day&amp;limit=3">Reddit - ML</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>🌍 UTF-8</title><link>https://dev.to/wycliffealphus/utf-8-3edn</link><author>Wycliffe A. Onyango</author><category>dev</category><category>go</category><pubDate>Sat, 15 Feb 2025 11:10:08 +0000</pubDate><source url="https://dev.to/t/go">Dev.to Go</source><content:encoded><![CDATA[Have you ever opened a file or webpage and seen something like this?That’s an encoding issue, and if you’ve been coding long enough, you’ve probably run into it at some point.But why does this happen? Why do some characters get replaced with weird symbols? And most importantly—how do we fix it?The answer is UTF-8, the encoding that powers almost everything today. Let's talk about what it is, why it matters, and how to use it properly in Go (Golang).
  
  
  🔥 The Problem UTF-8 Solves
Back in the early days of computing, ASCII was the standard way to represent text. It used 7 bits per character, meaning it could only represent 128 characters (A-Z, a-z, 0-9, and some symbols).That was fine—until computers went global.Suddenly, people needed to store and display languages like Chinese (汉字), Arabic (العربية), Hindi (हिन्दी), and more. ASCII just couldn’t handle it.So different countries created their own encodings:ISO-8859-1 for Western EuropeWindows-1252 for Microsoft systems💀 The result? Encoding chaos. A file written in one system might be unreadable in another.Enter , the hero of our story.
  
  
  🏆 What Makes UTF-8 Special?
UTF-8 was designed in 1992 by Ken Thompson and Rob Pike (yes, the same Rob Pike who helped create Go!). It solved the encoding mess by being:✅ Backwards-compatible with ASCII
✅ Compact for common characters (English stays at 1 byte per character)
✅ Capable of encoding every language and symbol
✅ Error-resistant (invalid bytes won’t accidentally form valid characters)This is why UTF-8 is now used by 97% of websites and is the default encoding for most programming languages, including Go.
  
  
  💻 UTF-8 in Action (With Go Examples)
Since Go natively supports UTF-8, you don’t need to do anything special—it just works. But let’s dig into some examples to see it in action.1️⃣ Encoding a String as UTF-8 BytesEnglish characters (, ) are 1 byte each.Chinese characters () are 3 bytes each.This variable-length encoding is why UTF-8 is so efficient!2️⃣ Decoding UTF-8 Bytes Back to a String💡 No extra libraries—Go just handles it. That’s one of the nice things about UTF-8 in Go.3️⃣ Handling UTF-8 in Web ApplicationsIf you're building a web app, always specify UTF-8 in your response headers:💡 Without , some browsers might misinterpret the text and display garbage characters.4️⃣ Validating UTF-8 DataNot every byte sequence is valid UTF-8. You can check with :✅ Great for validating user input before processing it!5️⃣ Counting Unicode Characters (Runes) in a StringGo strings are byte sequences, not necessarily character sequences.❗ Why the difference? Because 世界 takes 3 bytes each, so len(text) == 13, but there are only 9 characters.6️⃣ Iterating Over Unicode CharactersSince some characters take more than 1 byte, normal indexing won’t work. Use :❗ Notice how 世界 starts at index 7, not 5, because it uses 3 bytes each.
  
  
  🚀 Why UTF-8 is the Default Encoding
Before UTF-8:
❌ Confusing mess of different encodings
❌ Text corruption between systems
❌ Websites needed to support multiple charsetsAfter UTF-8:
✅ One encoding for everything
✅ No more garbled text (mojibake)
✅ Supported everywhere—from databases to web APIsIf you’re dealing with text in Go (or any language), understanding UTF-8 is essential. It ensures your applications work worldwide without encoding issues.]]></content:encoded></item><item><title>My new blog post comparing networking in EKS vs. GKE</title><link>https://www.reddit.com/r/kubernetes/comments/1ipz55k/my_new_blog_post_comparing_networking_in_eks_vs/</link><author>/u/jumiker</author><category>reddit</category><category>k8s</category><category>devops</category><pubDate>Sat, 15 Feb 2025 11:06:09 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Kubernetes</source><content:encoded><![CDATA[   submitted by    /u/jumiker ]]></content:encoded></item><item><title>Richard Stallman in Polytechnic University of Turin, Italy</title><link>https://www.reddit.com/r/linux/comments/1ipz4wy/richard_stallman_in_polytechnic_university_of/</link><author>/u/ShockleyTransistor</author><category>linux</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 11:05:38 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Go Nullable with Generics v2.0.0 - now supports omitzero</title><link>https://github.com/LukaGiorgadze/gonull</link><author>/u/Money-Relative-1184</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Feb 2025 11:00:21 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>async-arp: library for probing hosts and sending advanced ARP (Address Resolution Protocol) requests.</title><link>https://www.reddit.com/r/rust/comments/1ipywbp/asyncarp_library_for_probing_hosts_and_sending/</link><author>/u/arcycar</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 10:48:25 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[After a few months of exploring and working with Rust, I am happy to share my first small Rust crate,  and I’d love to hear your thoughts! 🚀This library provides an  way to send and receive , making it useful for network discovery, debugging, and custom networking applications.🏎  Built on Tokio for non-blocking network operations🔍  Easily detect active devices in a subnet⚙️  Craft and send ARP packets dynamicallyYou can find usage examples and API documentation here: 📖 Since this is my first crate, I’d really appreciate any feedback on:📌  – Is the interface intuitive and ergonomic?🚀  – Does it fit well into async Rust workflows?🔍  – Any improvements or best practices I may have missed?🦀  – Suggestions to make it more "Rustacean"?If you have further ideas, issues, or want to contribute, check it out on GitHub:Thanks for checking it out—let me know what you think! 🦀]]></content:encoded></item><item><title>Deep Dive into VPA Recommender</title><link>https://www.reddit.com/r/kubernetes/comments/1ipylpu/deep_dive_into_vpa_recommender/</link><author>/u/erik_zilinsky</author><category>reddit</category><category>k8s</category><category>devops</category><pubDate>Sat, 15 Feb 2025 10:26:04 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Kubernetes</source><content:encoded><![CDATA[I wanted to understand how the Recommender component of the VPA (Vertical Pod Autoscaler) works - specifically, how it aggregates CPU/Memory samples and calculates recommendations. So, I checked its source code and ran some debugging sessions.Based on my findings, I wrote a blog post about it, which might be helpful if you're interested in how the Recommender's main loop works under the hood.]]></content:encoded></item><item><title>what do you use golang for?</title><link>https://www.reddit.com/r/golang/comments/1ipykyd/what_do_you_use_golang_for/</link><author>/u/Notalabel_4566</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Feb 2025 10:24:28 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[Is there any other major use than web development?]]></content:encoded></item><item><title>Show HN: Kreuzberg – Modern async Python library for document text extraction</title><link>https://github.com/Goldziher/kreuzberg</link><author>nhirschfeld</author><category>hn</category><pubDate>Sat, 15 Feb 2025 10:07:23 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[I'm excited to showcase Kreuzberg!Kreuzberg is a modern Python library built from the ground up with async/await, type hints, and optimized I/O handling.It provides a unified interface for extracting text from documents (PDFs, images, office files) without external API dependencies.Key technical features:
- Built with modern Python best practices (async/await, type hints, functional-first)
- Optimized async I/O with anyio for multi-loop compatibility
- Smart worker process pool for CPU-bound tasks (OCR, doc conversion)
- Efficient batch processing with concurrent extractions
- Clean error handling with context-rich exceptionsI built this after struggling with existing solutions that were either synchronous-only, required complex deployments, or had poor async support. The goal was to create something that works well in modern async Python applications, can be easily dockerized or used in serverless contexts, and relies only on permissive OSS.Key advantages over alternatives:
- True async support with optimized I/O
- Minimal dependencies (much smaller than alternatives)
- Perfect for serverless and async web apps
- Local processing without API calls
- Built for modern Python codebases with rigorous typing and testingThe library is MIT licensed and open to contributions.]]></content:encoded></item><item><title>Linux in any distribution is unobtainable for most people because the first two installation steps are basically impossible.</title><link>https://www.reddit.com/r/linux/comments/1ipyc1o/linux_in_any_distribution_is_unobtainable_for/</link><author>/u/trollfinnes</author><category>linux</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 10:05:47 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[Recently, just before Christmas, I decided to check out Linux again (tried it ~20 years ago) because Windows 11 was about to cause an aneurysm.I was expecting to spend the "weekend" getting everything to work; find hardware drivers, installing various open source software and generally just 'hack together something that works'.To my surprise everything worked flawlessly first time booting up. I had WiFi, sound, usb, webcam, memory card reader, correct screen resolution. I even got battery status and management! It even came with a nice litte 'app center' making installation of a bunch of software as simple as a click!And I remember thinking any Windows user could  install Linux and would get comfortable using it in an afternoon.I'm pretty 'comfortable' in anything PC and have changed boot orders and created bootable things since the early 90's and considered that part of the installation the easiest part.However, most people have never heard about any of them, and that makes the two steps seem 'impossible'.I recently convinced a friend of mine, who also couldn't stand Window11, to install Linux instead as it would easily cover all his PC needs. And while he is definitely in the upper half of people in terms of 'tech savvyness', both those "two easy first steps" made it virtually impossible for him to install it. He easily managed downloading the .iso, but turning that iso into a bootable USB-stick turned out to be too difficult. But after guiding him over the phone he was able to create it.But he wasn't able to get into bios despite all my attempts explaining what button to push and whenNext day he came over with his laptop. And just out of reflex I just started smashing the F2 key (or whatever it was) repeatingly and got right into bios where I enabled USB boot and put it at the top at the sequence.After that he managed to install Linux just fine without my supervision.But it made me realise that the two first steps in installing Linux, that are second nature to me and probably everyone involved with Linux from people just using it to people working on huge distributions, makes them virtually impossible for most people to install it.I don't know enough about programming to know of this is possible:Instead of an .iso file for download some sort of .exe file can be downloaded that is able to create a bootable USB-stick and change the boot order?That would 'open up' Linux to  more people, probably orders of magnitude..]]></content:encoded></item><item><title>Eating From Plastic Takeout Containers Can Increase Heart Failure Risk, Study Finds</title><link>https://science.slashdot.org/story/25/02/15/0555235/eating-from-plastic-takeout-containers-can-increase-heart-failure-risk-study-finds?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>BeauHD</author><category>tech</category><pubDate>Sat, 15 Feb 2025 10:00:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[A new study suggests that frequent consumption of food from plastic takeout containers significantly increases the risk of congestive heart failure due to gut biome changes that trigger inflammation and circulatory damage. The Guardian reports: The authors used a two-part approach, first looking into the frequency with which over 3,000 people in China ate from plastic takeout containers, and whether they had heart disease. They then exposed rats to plastic chemicals in water that was boiled and poured in carryout containers to extract chemicals. "The data revealed that high-frequency exposure to plastics is significantly associated with an increased risk of congestive heart failure," the authors wrote. [...] They put boiling water in the containers for one, five or 15 minutes because plastic chemicals leach at much higher rates when hot contents are placed in containers -- the study cited previous research that found as many as 4.2m microplastic particles per sq cm can leach from plastic containers that are microwaved.
 
The authors then gave rats the water contaminated with leachate to drink for several months, then analyzed the gut biome and metabolites in the feces. It found notable changes. "It indicated that ingestion of these leachates altered the intestinal microenvironment, affected gut microbiota composition, and modified gut microbiota metabolites, particularly those linked to inflammation and oxidative stress," the authors wrote. They then checked the rats' heart muscle tissue and found it had been damaged. The study did not find a statistical difference in the changes and damage among rats that were exposed to water that had been in contact with plastic for one minute versus five or fifteen. The study has been published in the journal Ecotoxicology and Environmental Safety.]]></content:encoded></item><item><title>Jane Street&apos;s Figgie card game</title><link>https://www.figgie.com/</link><author>eamag</author><category>hn</category><pubDate>Sat, 15 Feb 2025 09:59:20 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[Jane Street's fast-paced
              Figgie game simulates exciting elements of markets and trading. At
              Jane Street, Figgie is a game we teach and also one we really
              enjoy playing.
            Read our FAQs
              for more. If you have a question that isn’t answered there, we’d
              like to hear
              what’s missing and what
              would be helpful to know, and we’ll do our best to update FAQs
              along the way.
            ]]></content:encoded></item><item><title>Lessons from David Lynch: A Software Developer&apos;s Perspective</title><link>https://lackofimagination.org/2025/02/lessons-from-david-lynch-a-software-developers-perspective/</link><author>/u/aijan1</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 09:40:30 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[David Lynch passed away in January 2025, shortly after being evacuated from his Los Angeles home due to the Southern California wildfires. He’s perhaps best known for the groundbreaking TV series Twin Peaks, which inspired countless shows, including The X-Files, The Sopranos, and Lost.Lynch was genuinely a good human being who cared deeply for his actors and crew. He discovered extraordinary talent like Naomi Watts, who had struggled to land a major role in a Hollywood movie after 10 years of auditioning. From the interviews he gave, it quickly becomes apparent that he respected people of all kinds and never put anyone down – even those who truly deserved it.Lynch is famous for refusing to explain his movies. Although not a fan of his previous work, the great film critic Roger Ebert once wrote that Mulholland Drive remained compulsively watchable while refusing to yield to interpretation.While Lynch offered very little in terms of what his movies meant, he was generous in sharing his views on creativity, work, and life in general. As a tribute to Lynch, I’d like to share my perspective on his life lessons from a software developer’s viewpoint.Ideas are like fish. If you want to catch little fish, you can stay in the shallow water. But if you want to catch the big fish, you’ve got to go deeper.We’ve all got hundreds or even thousands of ideas floating around in our brains. But the really big ones are few and far between. Once you catch a good one –because they’re so rare– write it down immediately, says Lynch. From there, ideas attract other ideas and start to grow from their initial seed state. The final job is to translate those ideas into a medium, whether it’s a film, a painting, or software.The idea is the whole thing. If you stay true to the idea, it tells you everything you need to know, really. You just keep working to make it look like that idea looked, feel like it felt, sound like it sounded, and be the way it was.Software development is part art, part engineering. We don’t build the same software over and over again – virtually all software is crafted by hand, sometimes with help from AI. If you ask two developers to create a non-trivial program, it’s very likely that the programs they produce will be different, even if the functionality is the same. Under the hood, the programming language, data structures, and overall architecture may be completely different. And on the surface, the user interfaces may look nothing alike.It’s a good habit to listen to what users have to say, but they often can only describe their problems – they rarely come up with good ideas to solve them. And that’s OK. It’s our job to find the right ideas, implement them well, and solve tricky problems in a way we, and hopefully the users, will love.My friend Bushnell Keeler, who was really responsible for me wanting to be a painter, said you need four hours of uninterrupted time to get one hour of good painting in, and that is really true.Like other creative fields, writing code requires deep concentration. We need to hold complex structures in our minds while working through problems. Switching between coding and other tasks disrupts  – that magical state of mind where we lose track of time and produce code effortlessly. That’s why many developers hate meetings – they are toxic to our productivity.I believe you need technical knowledge. And also, it’s really, really great to learn by doing. So, you should make a film.Software development is one of those rare fields where a college degree isn’t required to succeed. Yes, we should all know the basics, but in my experience, new college graduates often lack the practical knowledge to be effective developers.The real learning happens through hands-on experience: building real projects, debugging tricky problems, collaborating with teams, and maintaining code over time. It’s crucial to never stop learning, experimenting, and iterating on our craft.Happy accidents are real gifts, and they can open the door to a future that didn’t even exist.Tim Berners-Lee invented the web in 1989, while working at CERN, the European Organization for Nuclear Research. Originally conceived to meet the demand for information sharing between scientists around the world, the web went mainstream within just a few years.Linus Torvalds created Git due to a licensing dispute over BitKeeper, the original version control system used for Linux development. The need for a new tool led to Git becoming the most widely used version control system today.I feel that a set should be like a happy family. Almost like Thanksgiving every day, happily going down the road together.Be kind to your teammates, don’t embarrass them. They may not be perfect, but accept them for who they are. The most important trait of an effective software development team is psychological safety –that is, team members feel safe to take risks and be vulnerable in front of each other, as corroborated by Google’s research on the subject.It’s OK to make mistakes, as long as you learn from them. Knowing that your team has your back when things go south is a wonderful feeling.Most of Hollywood is about making money - and I love money, but I don’t make the films thinking about money.Just like Lynch prioritizes creativity over financial gain, some of the most impactful software projects started with an open source model, and they literally changed the world, such as Linux, PostgreSQL, and Node.js, just to name a few.What makes these projects remarkable is that they didn’t emerge from corporate boardrooms – they were built by communities of passionate developers, collaborating across the world.Money is just a means to an end. Unfortunately, many get this confused.David, thank you for making the world a better place!]]></content:encoded></item><item><title>Macro-Less, Highly Integrated OpenAPI Document Generation in Rust with Ohkami</title><link>https://dev.to/kanarus/macro-less-highly-integrated-openapi-document-generation-in-rust-with-ohkami-9b2</link><author>kanarus</author><category>dev</category><category>rust</category><pubDate>Sat, 15 Feb 2025 08:49:29 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[This is a cross post from Medium.In Rust web dev, utoipa is the most popular crate for generating OpenAPI document from server code. While it’s a great tool, it can be frustrating due to excessive macro use.A new web framework Ohkami offers a macro-less, highly integrated way to generate OpenAPI document with its  feature.Let’s take following code as an example. It’s the same sample from the “openapi” section of the README, but with openapi-related parts removed:While this compiles and works as a pseudo user management server, activating  feature causes a compile error, telling that  and  don’t implement .As indicated by this, Ohkami with  feature effectively handles type information and intelligently collects its endpoints’ metadata. It allows code like:to assemble metadata into an OpenAPI document and output it to a file .Then, how we implement ? Actually we can easily  by hand, or just  is available! In this case, derive is enough:That’s it! Just adding these derives allows  to output following file:Additionally, it’s easy to define the  schema as a component instead of duplicating inline schemas.
In derive, just add  helper attribute:And  attribute is available to set , , and override  and each response’s :Let’s take a look at how this document generation works!First, the s are expanded as following:The organized DSL enables to easily impl manually. trait links the struct to an item of type called .
  
  
  2.  hooks of , , They're Ohkami’s core traits appeared in the handler bound:When  feature is activated, they additionally have following methods:Ohkami leverages these methods in  to generate consistent , reflecting the actual handler signature like this.Moreover, Ohkami properly propagates schema information in common cases like this, allowing users to focus only on the types and schemas of their app.
  
  
  3.  metadata of Router
In Ohkami, what’s called  has  property that stores all the routes belonging to an Ohkami instance. This is returned alongside  from  step, and is used to assemble metadata of all endpoints.What  itself does is just to serialize an item of type openapi::document::Document and write it to a file.The openapi::document::Document item is created by  of , summarized as follows:That’s how Ohkami generates OpenAPI document!
  
  
  Appendix: Cloudflare Workers
There is, however, a problem in , Cloudflare Workers: where Ohkami is loaded to Miniflare or Cloudflare Workers as WASM, so it can only generate OpenAPI document as data and cannot write it to the user’s local file system.generates OpenAPI document!Thank you for reading. If you’re interested in Ohkami, check out the GitHub repo and start coding!]]></content:encoded></item><item><title>&quot;Dongly Things&quot; by Douglas Adams (of Hitchhikers Guide) - Adams wrote this article in the early days of Mac computers, about manufacturers making things difficult with a million different proprietary cables/ports etc.</title><link>https://www.douglasadams.com/dna/980707-03-a.html</link><author>/u/CaesarSalvage</author><category>linux</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 07:47:36 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Container Networking - Kubernetes with Calico</title><link>https://www.reddit.com/r/kubernetes/comments/1ipw9bu/container_networking_kubernetes_with_calico/</link><author>/u/tkr_2020</author><category>reddit</category><category>k8s</category><category>devops</category><pubDate>Sat, 15 Feb 2025 07:25:55 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Kubernetes</source><content:encoded><![CDATA[: VLAN 10: VLAN 20When traffic flows from VLAN 10 to VLAN 20, the outer IP header shows:The inner IP header reflects:The firewall administrator notices that both the source and destination ports appear as , indicating they are set to . This prevents the creation of granular security policies, as all ports must be permitted.Could you please advise on how to set specific source and destination ports at the outer IP layer to allow the firewall administrator to apply more granular and secure policies?]]></content:encoded></item><item><title>The Danger of IP Volatility, (Sat, Feb 15th)</title><link>https://isc.sans.edu/diary/rss/31688</link><author></author><category>infosec</category><pubDate>Sat, 15 Feb 2025 07:22:45 +0000</pubDate><source url="https://isc.sans.edu/">Sans Edu Diaries</source><content:encoded><![CDATA[What do I mean by “IP volatility”? Today, many organizations use cloud services and micro-services. In such environments, IP addresses assigned to virtual machines or services can often be volatile, meaning they can change or be reassigned to other organizations or users. This presents a risk for services relying on static IPs for security configurations and may introduce impersonation or data leakage issues.This morning, I was setting up a new environment. I got a new IP address assigned by my hosting company and deployed a classic configuration: a reverse-proxy redirecting to many web services and generating Let’s Encrypt certificates.Once the reverse proxy was in place, I started to deploy more services but detected some activity in the log (always keep an eye on your logs!) and saw this:{"level":"debug","time":"2025-02-15T06:22:33Z","caller":"github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:228","message":"Serving default certificate for request: \"postmaster.xxxxxxxx.hu\""}
{"level":"debug","time":"2025-02-15T06:46:36Z","caller":"github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:228","message":"Serving default certificate for request: \"pop3.xxxxxxxx.hu\""}
{"level":"debug","time":"2025-02-15T07:04:16Z","caller":"github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:228","message":"Serving default certificate for request: \”xxxxxxxx.hu\""}
A quick DNS request confirmed that these hosts are resolving to my newly assigned IP!Worse, this organization seems to still be using POP3, and a user (or a script) is still trying to fetch emails using this protocol!When you move to another hosting solution, update your DNS recordsCleanup your DNS zones and remove unwanted entriesUse mechanisms to preserve your IP addresses (like “Elastic IPs” provided by AWS)Xavier Mertens (@xme)
Xameco
Senior ISC Handler - Freelance Cyber Security ConsultantPGP Key

 
 (c) SANS Internet Storm Center. https://isc.sans.edu Creative Commons Attribution-Noncommercial 3.0 United States License.]]></content:encoded></item><item><title>The TechBeat: Futures of Ethereum II - Censorship Resistance (2/15/2025)</title><link>https://hackernoon.com/2-15-2025-techbeat?source=rss</link><author>Techbeat</author><category>tech</category><pubDate>Sat, 15 Feb 2025 07:11:04 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[By @rootstock_io [ 3 Min read ] 
 Rootstock merges Bitcoin’s security with Ethereum’s flexibility, enabling AI-driven blockchain apps for trustless governance, security, and fraud detection. Read More.By @boxhero [ 13 Min read ] 
 Discover how AI-powered sentiment analysis tools deliver accurate insights from customer reviews and feedback to help improve your business strategy. Read More.By @lumoz [ 3 Min read ] 
 On February 13, Lumoz announced the official launch of Lumoz Chain and released the migration guide and reward plan for Verifier nodes.  Read More.By @stellar [ 5 Min read ] 
 Regulatory shifts in 2025 will shape crypto wallets. Learn how compliance, DeFi, and Stellar’s Soroban ecosystem will impact the future of Web3 wallets. Read More.By @adambakay [ 22 Min read ] 
 By understanding market microstructure, you might be able to add more precision into your trading. Read More.By @mexcmedia [ 6 Min read ] 
 Liquidity is key to crypto trading, ensuring price stability, seamless transactions, and reduced slippage. Learn how MEXC excels in liquidity management. Read More.By @2077research [ 11 Min read ] 
 Explore the evolution of crypto options and perpetual futures, diving into innovations like panoptions, liquidity challenges, and decentralized trading. Read More.By @2077research [ 17 Min read ] 
 The article explores Ethereum's efforts to ensure censorship resistance, focusing on solutions like PBS and encrypted mempools amid regulatory pressures. Read More.By @hayday [ 4 Min read ] 
 Is the rise of vibe coding also the end of software engineering? How will vibeware change the nature of the software entrepreneur, and the meaning of work? Read More.By @mexcmedia [ 5 Min read ] 
 Discover key crypto trends of 2025, from Bitcoin’s surge to MEXC’s role in shaping the future of digital asset trading with liquidity, security, & innovation. Read More.By @noda [ 4 Min read ] 
 2025 is the tipping point for pay-by-bank. Lower fees, instant payments, and new regulations make it the future of digital transactions.  Read More.By @matteopisani91 [ 34 Min read ] 
 A cybersecurity engineer built a sci-fi bass from scratch, packed with a synth, a wireless transmitter, a hacked built-in tuner and voltmeters. Read More.By @ishanpandey [ 4 Min read ] 
 Discover how CrossFi is revolutionizing crypto payments in this exclusive interview with CEO Alex Mamasidikov. Read More.By @menaskop [ 6 Min read ] 
 Ethereum has many so-called "killers," though most of them look more like self-destructive projects. Read More.By @wezam [ 4 Min read ] 
 There’s plenty of disagreement on how AI will change the product management landscape.  Read More.By @awsmarketplace [ 8 Min read ] 
 Discover the best endpoint protection solutions, top platforms to consider, and key evaluation criteria to enhance your organization's cybersecurity defenses. Read More.By @vitae [ 5 Min read ] 
 We present a deterministic game incorporating two key mechanisms: Controlled Chaos Shifts (CCS) and Accepting Loss of Control (ALC). Read More.By @edwinliavaa [ 3 Min read ] 
 While Bitcoin's design brilliantly enables decentralization, human nature consistently pulls us toward centralization. Read More.]]></content:encoded></item><item><title>AI Used To Design a Multi-Step Enzyme That Can Digest Some Plastics</title><link>https://science.slashdot.org/story/25/02/15/0549201/ai-used-to-design-a-multi-step-enzyme-that-can-digest-some-plastics?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>BeauHD</author><category>tech</category><pubDate>Sat, 15 Feb 2025 07:00:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[Leveraging AI tools like RFDiffusion and PLACER, researchers were able to design a novel enzyme capable of breaking down plastic by targeting ester bonds, a key component in polyester. Ars Technica reports: The researchers started out by using the standard tools they developed to handle protein design, including an AI tool named RFDiffusion, which uses a random seed to generate a variety of protein backgrounds. In this case, the researchers asked RFDiffusion to match the average positions of the amino acids in a family of ester-breaking enzymes. The results were fed to another neural network, which chose the amino acids such that they'd form a pocket that would hold an ester that breaks down into a fluorescent molecule so they could follow the enzyme's activity using its glow.
 
Of the 129 proteins designed by this software, only two of them resulted in any fluorescence. So the team decided they needed yet another AI. Called PLACER, the software was trained by taking all the known structures of proteins latched on to small molecules and randomizing some of their structure, forcing the AI to learn how to shift things back into a functional state (making it a generative AI). The hope was that PLACER would be trained to capture some of the structural details that allow enzymes to adopt more than one specific configuration over the course of the reaction they were catalyzing. And it worked. Repeating the same process with an added PLACER screening step boosted the number of enzymes with catalytic activity by over three-fold.
 
Unfortunately, all of these enzymes stalled after a single reaction. It turns out they were much better at cleaving the ester, but they left one part of it chemically bonded to the enzyme. In other words, the enzymes acted like part of the reaction, not a catalyst. So the researchers started using PLACER to screen for structures that could adopt a key intermediate state of the reaction. This produced a much higher rate of reactive enzymes (18 percent of them cleaved the ester bond), and two -- named "super" and "win" -- could actually cycle through multiple rounds of reactions. The team had finally made an enzyme.
 
By adding additional rounds alternating between structure suggestions using RFDiffusion and screening using PLACER, the team saw the frequency of functional enzymes increase and eventually designed one that had an activity similar to some produced by actual living things. They also showed they could use the same process to design an esterase capable of digesting the bonds in PET, a common plastic. The research has been published in the journal Science.]]></content:encoded></item><item><title>Reading Documentation Shouldn&apos;t Be a Chore</title><link>https://hackernoon.com/reading-documentation-shouldnt-be-a-chore?source=rss</link><author>Rami James</author><category>tech</category><pubDate>Sat, 15 Feb 2025 06:48:29 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[As a developer, documentation is both your greatest ally and your worst nemesis. It's the key to unlocking the power of libraries, frameworks, APIs, and even entire programming languages. Yet, many developers struggle to effectively navigate and extract the information they need from documentation. It's a skill that can be learned, and it's one that can make a huge difference in your productivity and the quality of your work. New developers often lack this critical skill, and find themselves stopped in their progress towards becoming a better dev because of it.\
I'm currently writing the docs for Vewrite, a project management tool for writing teams. It occurs to me that I've been writing documentation for a long time, and I've gotten pretty good at it. I've also gotten pretty good at reading documentation, and I think that this is a skill that is often overlooked.\
Let's talk about how to equip you with the skills to read documentation better, turning this often daunting task into a smooth and efficient process.Why is reading documentation challenging?\
Good documentation is essential. It provides the definitive guide to how software works, saving you countless hours of pointless, frustrating trial and error. Bad documentation is a nightmare. It's like trying to navigate a maze blindfolded, with no map and no sense of direction, guided by a liar.\
If you have access to the code you are working against, that's great and you should use it. Poke around and see what you're supposed to do by reading the code. But, in many cases (and almost all of the time with proprietary software), you're going to have to rely on the documentation to get you through. However, documentation can vary wildly in quality. Some is meticulously crafted, while others can be uninformative, outdated, or even misleading. This inconsistency is one of the reasons why reading documentation can be challenging.Some docs are just a dumping ground for information, with no clear structure or organization. This can make it difficult to find what you're looking for, and you end up spending more time searching than actually learning. A well-structured set of documentation will have a clear table of contents, with sections and subsections that guide you through the material in a logical order. This makes it easier to navigate and find the information you need.In general, I'll also recommend some Getting Started section which points different types of users to the information which is most critical to them.Information overload is another common hurdle. Docs can cover a vast range of features and functionalities, making it difficult to find the specific information you need. For example, a large framework might have hundreds of classes and methods, and trying to find the one you need can feel like searching for a needle in a haystack.Unclear technical jargon can also be a barrier, as documentation is inherently technical, and sometimes the terminology can be confusing, especially for newcomers. This often stems from the assumption that the reader has a certain level of prior knowledge as it is largely written by the team who has developed the software and has an intimate knowledge of its innner workings.Outdated information can be a major problem. Software evolves rapidly, and documentation can sometimes lag behind, leading to frustration and wasted time. A library might have deprecated a certain function, but the documentation might still describe it as the primary way to perform a task. The teams who produce software should be including accurate documentation creation and upkeep in their backlog as part of their process. Unfortunately, in the haste to get features shipped to market, corners are often cut. I've spent the better part of the last decade advocating for better processes that lead to better docs at a number of companies, and the biggest challenge here has been explaining to stakeholders where the value is.How to read documentation effectivelyOver the years, I've developed a structured approach to how I tackle reading new documentation. I've found that this approach helps me quickly get up to speed with new tools and technologies, and I hope it can help you too.\
By and large this method has three parts: understanding the structure of the documentation itself, understanding the way that the system I'm learning works, and lastly engaging with the material in the docs. First I get the lay of the land, and then I try to focus in on the details.Understand the structure of the documentationDocs are written by people, and every sysyem is going to be different. That means that every set of docs is going to be different. Some docs are organized by feature, others by use case, and still others by API endpoint. Understanding the structure of the documentation is key to finding the information you need quickly. Start by scanning the table of contents to get an overview of the topics covered. This will help you get a sense of the scope of the documentation and where to find specific information. You'll want to quickly click through the docs and get a sense of how things work, how they are organized, and where you can find reference materials if there are any.\
I find that this initial run through also trickles some information about the system and its components into my brain. It's not comprehensive at all, but it's a good start.Every piece of software is a system, and understanding how that system works is key to understanding how to use it. This is where the documentation can be a huge help. Good documentation will provide you with a high-level overview of the system, explaining how the different components fit together and how they interact. This can help you understand the context in which a particular feature or function is used, and how it relates to the rest of the system. This is where you start to get a sense of how the system is supposed to work, and how you can use it to solve your problems.\
A lot of the problems that you'll encounter when building software will be because you fundamentally don't understand how what you're building with actually works. This is where the documentation can be a huge help. It can provide you with the context you need to understand how the system is supposed to work, and how you can use it to solve your problems. Use that to your advantage and you'll be able to build better software, faster.This is often the most tedious and boring part. You have to actually take a few hours and read through the entire docs. For smaller libraries or APIs, this isn't going to be a big deal and you'll be able to fit most of it into your head. For larger systems, this is going to be a multi-day process. You'll want to take notes, ask questions, and engage with the material in a way that helps you understand it. This is where you start to get a sense of how the system is supposed to work, and how you can use it to solve your problems. If it doesn't all fit into your head now, that's ok. You'll remember more than you think you will, and when you're actually doing development it will be an order of magnitude faster to find an answer if you've already seen it once.I've actually found that modern AIs are absolutely awesome for this step. You can use them as you would a more experienced developer and ask them questions about the system, the functionality, and the docs themselves. You can't trust everything that they say, but you can't really trust what another developer always tells you. I've found that being able to have a discussion with an AI about a library or API really helps me understand how stuff works at a deeper level.Strategies for effectively reading docsDespite these challenges, mastering the art of reading documentation is doable. Here are some strategies to keep in mind while you are digging around in docs, looking for an answer.If you don't know where you're going, you may never get there. Before you dive into a set of docs, you may want to set a clear objective for yourself. Are you trying to understand a specific function, integrate a new library, or troubleshoot an error? Having a clear objective will help you focus your search.\
For example, if you're trying to fix a bug where a specific function isn't returning the expected value, and your code matches what the docs say that you're supposed to do, your goal is to understand the function's place in the wider system. The problem is going to be a few levels up and the docs are likely going to be the key to understanding how the software works at a higher level.\
Don't immediately jump into the nitty-gritty details. Begin with the introductory sections, tutorials, or quick start guides to get a high-level understanding of the system. Your assumptions will often be wrong, and it is good to base your work on a foundation of truth. Think of it like reading the abstract of a research paper before diving into the full text. These introductory materials often provide a roadmap to the rest of the documentation.Use the structure of the docs to your advantageUse the table of contents and search function (these are your best friends) to quickly locate the sections you need. Don't be afraid to experiment with different search terms. Scan through the entire table of contents. Poke around and get a really good feel for how the documentation is structured. Sometimes you will find that your answers are hidden adjacent to where you thought that they would be.Real-world examples are invaluable, and the best docs are going to include them. They demonstrate how to use the code in practice and can often clarify confusing concepts. Pay close attention to the context in which the examples are used. A code snippet demonstrating how to use a particular function is much more helpful if it's accompanied by an explanation of what the function does and why it's being used in that specific scenario.Pay attention to the detailsWhen looking at function or method definitions, carefully examine the data types of the parameters and return values. This will help you understand how to use them correctly. Sometimes, crucial information is hidden in footnotes, warnings, or less prominent sections. Make sure you scan the entire page, not just the headlines. A seemingly minor note might contain a critical piece of information that can save you a lot of trouble. Documentation often contains links to related topics or other parts of the documentation. Don't hesitate to follow these links to gain a deeper understanding. These links can often lead you to more detailed explanations, examples, or even the source code itself.This is one of the biggest reasons why I believe that open-source can be such a boon for companies who want to build an ecosystem of developers around their software. Sometimes, the best way to understand how something works is to look at the source code itself. Don't be afraid to dive in, especially if the documentation is unclear. Reading the source code can give you a much clearer picture of what's happening under the hood. Try out the code examples and modify them to see how they behave. This is a great way to solidify your understanding and discover edge cases. Experimenting with the code is like conducting your own little science experiment. You can change the inputs, observe the outputs, and gain a deeper understanding of how the code works. If you're still stuck, don't hesitate to reach out to the community for help. Forums, mailing lists, and online communities are valuable resources for getting your questions answered. The developer community is generally very helpful, and there are often people who have encountered the same problems you're facing.Reading documentation shouldn't be a passive activity. Engage with the material by taking notes, jotting down key points, examples, and any questions you have. Annotating the documentation (if possible), highlighting important sections and adding your own comments can also be helpful. Creating your own examples, writing small programs that use the features you're learning about, is a great way to reinforce your understanding. It's like practicing a musical instrument – the more you do it, the better you get.Reading documentation is a skill that improves with practice. By adopting these strategies and actively engaging with the material, you can transform documentation from a source of frustration into a powerful tool for learning and development. So, embrace the documentation, and unlock the full potential of the software you're working with!]]></content:encoded></item><item><title>How to Expose (And Fix) Hidden Bottlenecks in Adobe Experience Manager</title><link>https://hackernoon.com/how-to-expose-and-fix-hidden-bottlenecks-in-adobe-experience-manager?source=rss</link><author>Giuseppe Baglio</author><category>tech</category><pubDate>Sat, 15 Feb 2025 06:45:41 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[Learn how to read thread dumps and take control of your application’s runtime behaviour.\
When your Adobe Experience Manager (or in general any JAVA application) instance shows signs of sluggishness, it’s time to roll up your sleeves and dive into the world of thread dumps. IBM Thread Analyzer (TDA) is here to help you untangle the web of threads and pinpoint performance bottlenecks. In this guide, we’ll walk you through how to use IBM TDA to diagnose performance issues in AEM like a pro.Before you can start analyzing thread dumps, you’ll need to download and install IBM Thread Analyzer. Head over to the official IBM website or your organization’s repository to grab the latest version. Once downloaded, follow the installation instructions for your operating system. It’s quick, easy, and sets the stage for some serious troubleshooting.Thread dumps are snapshots of all the threads running in your AEM instance at a specific moment. To capture them:Use tools like , , or AEM’s built-in functionality to generate thread dumps. There is a well-documented page on Adobe Docs.Save the thread dump files to your local machine.\
Pro Tip: Capture multiple thread dumps at intervals (e.g., every 10 seconds) to get a clearer picture of long-running issues.Launch IBM TDA and open the thread dump files you’ve captured. Simply drag and drop the files into the application or use the “Open” option to load them. Once loaded, you’ll see a list of thread dumps on the left-hand panel.To analyze a specific thread dump:Select the file from the listing.Click the Thread Detail button at the top\
This will display a detailed view of all the threads in that dump. Now, let’s sort the threads by Stack Depth, ensuring the longest stacks appear at the top. Why? Threads with deeper stacks often indicate more complex operations, which are usually where performance issues hide.Focus on threads with a stack depth of 10 lines or longer. These threads are typically the ones consuming the most resources. Take notes on any threads that stand out — whether due to their names, states, or stack traces.Next, sort the threads by their State. Scroll down to the Runnable threads. These are the threads that were actively using CPU time when the dump was taken. Keep an eye out for application-specific threads, such as:Background job threads: Handling tasks like indexing or replication.Request threads: Named like 127.0.0.1 [timestamp] GET /path HTTP/1.1.For each request thread, extract the timestamp from its name (e.g., ). This Unix epoch timestamp tells you when the user’s browser made the request. Convert it to a human-readable date/time using a tool like https://www.epochconverter.com/. Compare this with the thread dump’s timestamp to calculate how long the request has been active.If the difference is unusually large (e.g., several seconds or minutes), it could indicate a bottleneck in your application.\
Pro Tip: Keep an eye out for patterns. Are certain types of requests consistently taking longer? For example, requests involving complex queries or resource-heavy operations might be worth optimizing. Additionally, if you notice that specific URLs or endpoints are frequently associated with long-running threads, consider profiling those areas of your codebase.Thread analysis requires a nuanced approach that goes beyond simple waiting states. While the IBM Thread Analyzer (TDA) interface provides valuable insights into thread relationships, understanding the full context of thread behavior helps create a more complete picture of your application’s performance characteristics.Understanding Thread StatesWhen examining threads in TDA, you’ll encounter several important states:: These threads are either currently executing or ready to execute when CPU time becomes available. A Runnable state doesn’t necessarily indicate a problem — it’s the natural state for actively working threads.: These threads have temporarily paused execution while waiting for a condition to be met. The waiting state can occur for many legitimate reasons, including:Resource availability (database connections, file handles)Task completion in other threads\
: These threads are specifically waiting to acquire a monitor or lock. While similar to waiting, blocked states specifically indicate synchronization-related pauses.Analyzing Thread RelationshipsWhen you identify a thread of interest, examine its relationships with other threads using this systematic approach:Direct Lock Relationships:Examine the Waiting Threads panel for immediate dependenciesReview the stack traces of waiting threads to understand why they’re blockedNote the duration of the wait states if available\
2. Resource Usage Patterns:Look for patterns in resource acquisition and releaseIdentify potential resource bottlenecksConsider alternative resource management strategies\
3. Architectural Implications:Evaluate if the observed behaviour aligns with the system’s designConsider if the current threading model is appropriateAssess the impact on scalabilityUnderstanding Lock Types and VisibilityThread dumps may not show all types of contention. Modern Java applications use various synchronization mechanisms:Intrinsic Locks (synchronized keyword):Show clear owner-waiter relationshipsStack traces indicate synchronization points\
2. Explicit Locks (java.util.concurrent):May require additional tooling to visualize\
3. Non-blocking Mechanisms (Don’t appear as traditional locks but can impact performance):When you identify genuine contention issues, consider these approaches:Implement finer-grained lockingConsider non-blocking alternativesImplement backoff strategiesConsider caching solutions\
3. Architectural ChangesEvaluate asynchronous processingConsider parallel execution pathsImplement queue-based approaches\
Remember that thread analysis is an iterative process. Patterns that emerge in one thread dump might not represent consistent behaviour. Always validate your findings across multiple dumps and different time periods before making significant changes to your application.Comparing thread dumps across time reveals important performance patterns in your AEM instance. Start by establishing a baseline during normal operation, including peak usage periods and maintenance windows. This baseline provides context for identifying abnormal thread behaviour.To determine if a thread is persistent across time:Select multiple thread dumps from different points in time.Click the Compare Threads button in IBM TDA.Look for threads that remain in the Runnable state across all dumps, especially those with consistently long stack traces.\
Use IBM TDA’s Compare Threads feature to analyze dumps from different time points. Focus on threads that persist across multiple dumps, examining their states, stack depths, and resource usage. Remember that thread persistence alone doesn’t automatically indicate a problem — background services naturally run continuously, while request threads should complete within expected timeframes.\
When analyzing persistent Runnable threads, correlate their behaviour with system metrics like CPU usage, memory consumption, and response times. Consider the thread’s purpose: background services, request processing, or maintenance tasks each have different expected patterns. For request threads, compare their duration against defined service level agreements and business requirements.\
Got a suspicious thread pattern? Don’t jump to conclusions just yet! Try to recreate the issue in your test environment first — it’s like having a dress rehearsal before the main show. Take a good look at your code, double-check those config settings, and consider what else might be stirring up trouble in your environment. Keep track of what you find with real performance numbers and test results — you’ll thank yourself later.\
Once you’re sure you’ve caught a real performance culprit (backed by solid evidence, of course), it’s time to fix it.If analyzing threads doesn’t yield actionable insights, switch to the Monitor Detail view:Go back to the thread listing.Select a thread dump and click the Monitor Detail button.IBM TDA will display a tree view of monitor-owning threads and their waiting threads.\
This view helps you identify threads that are holding monitors and causing contention. Understanding thread monitors is like viewing the nervous system of your application. These synchronization mechanisms control how threads access shared resources, preventing potential conflicts and ensuring smooth operation.\
Monitor interactions can reveal critical performance insights. Some threads will be actively processing requests, while others wait for resource acquisition or participate in coordinated activities. Not all waiting or idle threads indicate a problem — they’re often part of the application’s natural resource management strategy.\
However, not all threads are equally important:Ignore idle thread pool threads: These threads typically have ≤10 stack lines and are part of thread pools like the servlet engine. They’re usually harmless unless they dominate the thread pool.Focus on application-specific monitors: Look for monitors tied to your application’s business logic, such as database connections, caching mechanisms, or custom synchronization blocks.\
Remember that thread and monitor analysis is both an art and a science. Each application has unique characteristics, so approach performance optimization with curiosity and a holistic perspective. The goal is not to eliminate all waiting threads but to understand and optimize their interactions.\
Advanced Tip: If you notice certain monitors are frequently contended, consider refactoring your code to reduce lock granularity. For example:Replace coarse-grained locks with fine-grained ones.Use non-blocking algorithms or concurrent data structures where possible.Optimize database queries to reduce the time threads spend waiting for locks.In some thread dumps, you might notice the  appearing frequently. This service handles tasks like Garbage Collection, memory management, and resource cleanup. While the Collector Service might seem like a mysterious background process, understanding its behaviour is key to maintaining optimal system performance — think of it like a diligent janitor in a large office building.\
When you notice frequent Collector Service activity, don’t immediately assume disaster. It’s normal for the Collector Service to show up occasionally, but excessive activity could indicate underlying issues:Memory leaks: Objects that are not being garbage collected can cause frequent GC cycles.High object churn: Rapid creation and destruction of objects can overwhelm the garbage collector.Improper JVM settings: Misconfigured heap sizes or GC algorithms can lead to inefficiencies.\
Here are some considerations to optimize resource usage:Tuning your JVM settings (e.g., increasing heap size, switching to G1GC).Reviewing your application’s memory allocation patterns to reduce unnecessary object creation.\
Garbage Collection is not a problem to be solved, but a dynamic system to be understood and optimized. Each application has unique characteristics, and there’s no universal solution.Thread dump analysis is a developer’s superpower — transforming you from a code writer to a performance detective. IBM Thread Analyzer (TDA) is your key to understanding complex system behaviours, revealing hidden bottlenecks that impact your Java/AEM instance’s performance.\
Like learning an instrument, your skill improves with practice. Each thread dump becomes clearer, revealing intricate patterns of system interactions. The more you analyze, the more intuitive performance optimization becomes.\
Remember, practice makes perfect — the more you analyze thread dumps, the sharper your diagnostic skills will become. 📊💪\
🛠 ️Happy troubleshooting! And don’t forget to share your findings with your team to keep your Java/AEM instance running smoothly.]]></content:encoded></item><item><title>Launch a Product in a New Market Is Hard, So I Made a 4-Step Framework for Success</title><link>https://hackernoon.com/launch-a-product-in-a-new-market-is-hard-so-i-made-a-4-step-framework-for-success?source=rss</link><author>Roman Shimanskiy</author><category>tech</category><pubDate>Sat, 15 Feb 2025 06:43:26 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[ because there’s just no real demand for what they’re offering. A staggering number and a logical reason behind it – and it’s the main one, according to CB Insights. It’s not about a lack of funding, bad hires, or tough competition. The real question is whether people actually need what you’re about to offer them.\
Plus, having a great product isn’t enough. To win, you need to understand the competitive landscape, your audience, and how to get your brand in front of the right people. Drawing from my experience launching Yango Play in MENA — where we developed an AI-powered Entertainment SuperApp that quickly became one of the region’s leading streaming platforms — I want to share the key steps we took to make it the success it is now.Selecting the right market is a balance between competition and profitability. Some regions offer low competition but limited revenue potential, while others may be more lucrative but very, very saturated. Sub-Saharan Africa, for example, has a large population and low competition, making it an appealing early-stage entry option. But, lower consumer spending restricts growth. MENA, on the other hand, has a smaller population but significantly higher consumer purchasing power, making it an attractive place for expansion.\
 is just as critical as market selection. Entering too early may mean slow adoption while entering too late risks facing intense competition.If competition is low, it provides an advantage and accelerates market growth. The key is to enter before the market experiences a surge in adoption.\
In the CIS region, the subscription economy remained relatively flat at 1–2 million subscribers for several years before suddenly accelerating to 100% annual growth. The same pattern emerged in MENA, indicating that the region was nearing a similar tipping point, making it the optimal time to enter.\
Market data is here to reinforce this statement. MENA’s total population is around 500 million, with 13.5 million already subscribed to video streaming services. Just for reference, penetration of subscription services in CIS region stands at 15-20%, with slight differences between countries. Even without complex economic modeling, these figures indicated a major opportunity for subscription-based services in MENA. So, an ideal market for expansion. In this case, the potential formed the perfect ground for selecting the market and strategy – the choice was easy.\
Still, the region was already highly competitive, with more than 50 video streaming platforms and many global and local music services. We had strong competitors in each category, so for us entering the market required more than just identifying demand.Product and Content DifferentiationCreating a strong differentiator was key, and competing head-on with zero brand awareness would have been very much an uphill battle.\
Take YANGO’s case study on product differentiation. We simultaneously implemented two strategies — with **differentiation through the product and content. \n An Entertainment SuperApp — a single subscription combining music, movies, and games. At the time, there wasn’t anything similar, so we gladly took the opportunity for this strategic entry point. Users typically juggle multiple subscriptions: one for music, another for video, and yet another for gaming. We built everything into one app under a single subscription. This way, we got on the growing global trend toward bundled entertainment services and also filled a gap in our target market. Win-win.Netflix has long become the go-to platform for global content. We took a different route and built an ecosystem tailored to local tastes. Our SuperApp has regional music, Arabic-language films, and localized gaming options, making it much more relevant to MENA audiences. This became a critical differentiator, making our product not just another streaming service but a culturally attuned entertainment hub.\
Conclusion: To successfully differentiate a product, the best strategy is to identify weaknesses or unmet needs in competing products — and fill those gaps.\
In crowded markets, pricing is as crucial as the product. It’s not the features that make or break the product – it’s about making your product the most logical choice.\
So, we introduced a long trial period and a bundled pricing model, allowing users to get music and movies for the price of one. Instead of discounting, we maximized perceived value, making the subscription an easy, rational decision.\
Expanding into a new market meant building a local team and adapting to language and cultural nuances. With deep market research, perfect timing, and a product tailored to real consumer needs, the SuperApp secured a strong foothold in a high-growth market. How did we tackle these challenges? That’s a story for another article.Audience Differentiation: Defining the Target UserUsers have mental “boxes” where they sort every new product they see. Food delivery? That goes into one box. A streaming service? Another box. But if your product doesn’t fit neatly into a box, it triggers confusion — people don’t know what to do with it. And when something feels unfamiliar, the default reaction is to ignore it.\
That’s why crystal-clear positioning isn’t optional — it’s survival. If users can’t instantly grasp who your product is for and why they need it, you’re fighting an uphill battle. But just fitting into a category isn’t enough. You have to own it. When people think about entertainment subscriptions, they should immediately think of your brand.\
How do you make that happen? Precision. Messaging needs to be sharp, clear, and unmistakable. Instead of vague positioning, spell it out: “This is a service for modern Arabic-speaking users.” That clarity eliminates confusion and makes it easier for potential subscribers to see how the product fits into their everyday world.\
Brand anchoring is everything— the simpler and more memorable the positioning, the stronger the audience connection. If users struggle to define what the product is or who it’s for, they’ll tune it out. That’s a death sentence for any brand. The fix? Build an instant mental link. The moment someone thinks “entertainment subscription,” your SuperApp should be the first thing they recall.For startups that can’t outspend competitors, traditional marketing funnels — awareness → consideration → purchase — might not be the best play. Instead, skip the awareness stage and go straight for user acquisition.\
Here’s the logic: if someone downloads your app, they already know it exists. There’s no need to waste resources on brand awareness before conversion. Yes, this approach raises the cost per acquisition (CPA) since users are coming in cold, but the trade-off is greater control over spending and a more direct path to growth.\
The real power lies in performance-driven marketing, which focuses on conversions rather than broad exposure. Even brands with large media budgets rely on performance marketing as the most efficient way to drive actual user engagement. For lean startups, this strategy isn’t just viable — it’s essential.A product launch is a one-time shot at grabbing audience attention —  over a long, drawn-out campaign. The smartest play? Go loud.\
The launch moment is your biggest marketing asset — a rare window where PR and buzz can be built just around your existence. Instead of slow, passive brand-building, focus on making a splash that gets people talking.\
Once the initial hype kicks in, then comes the next phase — brick by brick, reinforcing brand awareness and earning user trust. We also saw this proven in the case of Kinopoisk (video streaming platform). We focused our marketing around major premieres such as Zack Snyder's Justice League, , and big exclusive original premieres.Shifting from Traditional Advertising to Alternative ChannelsFrom experience, buying direct media ads is often far less effective than leveraging influencers, word of mouth, and strong PR.\
Spending time on finding the right influencer, crafting a viral PR angle, or developing creative content that resonates delivers higher ROI than just pouring money into paid ads. In a budget-constrained environment, the smarter play is a two-step approach:Performance marketing first — drive installs and conversions while simultaneously learning how users interact with the product.Organic & influencer-driven marketing second — building credibility and momentum through earned media, viral content, and strategic partnerships.With influencers, you’re hitting two targets at once. First, their audience gets exposed to your service, boosting brand awareness. But the real power of influencer marketing is in its high conversion rates — it doesn’t just build visibility; it drives action. It works like performance marketing in many ways. Even better? The creative content influencers produce often performs exceptionally well in paid performance campaigns, making it a valuable asset beyond the initial collaboration. So, really, you’re getting even more value out of every campaign.\
This keeps acquisition costs under control and ensures real engagement and long-term user retention.\
One of the most successful cases of leveraging PR instead of direct advertising is Netflix. When expanding into new regions, the company rarely invests in traditional media ads. Instead, it focuses on localized content, influencer collaborations, and large-scale PR campaigns. This approach has allowed Netflix to dominate new markets without massive ad spending, making the brand recognizable through organic user discussions and viral interest.\
There are plenty of examples of viral brands and services — take Dubai Chocolate or Clubhouse, for instance. These apps and platforms managed to gain massive audiences with little to no marketing spend, relying purely on organic growth and word of mouth.The Founder as the Brand’s Leading AmbassadorIn a competitive market, PR isn’t just about press releases and media coverage — it’s about people. A founder holds a unique advantage: their voice becomes the product’s most powerful marketing tool.\
People don’t engage with companies — they engage with other people. Instead of relying on corporate statements or press releases, modern PR is about creating shareable content and building influence through authentic, human-driven narratives.\n Whether you are a startup or an established company, entering a new market requires more than a strong product — it asks for adaptability to evolving industry rules and dynamics. The strategies that worked in the past may no longer be effective in an environment where competition is fierce, consumer behavior is shifting, and digital ecosystems are rapidly changing. Success hinges on thorough market research, precise audience targeting, strategic product differentiation, and a well-structured promotional approach.]]></content:encoded></item><item><title>Every New Apple Device Expected in 2025</title><link>https://hackernoon.com/every-new-apple-device-expected-in-2025?source=rss</link><author>David Perru</author><category>tech</category><pubDate>Sat, 15 Feb 2025 06:21:59 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>How Hospitals Use AI to Boost Efficiency in Medical Imaging Technology</title><link>https://hackernoon.com/how-hospitals-use-ai-to-boost-efficiency-in-medical-imaging-technology?source=rss</link><author>Beth Rush</author><category>tech</category><pubDate>Sat, 15 Feb 2025 06:21:57 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[\
Advancing health care technologies are crucial for doctors and patients. They could make medical services easier to provide while giving people better results, but only if everyone understands the bigger picture. Artificial intelligence (AI) is a critical tool that may become part of your health care services in the near future. Check out how physicians are using AI in medical imaging and diagnostics to learn why it could revolutionize the industry.What Is Medical Imaging Technology?Medical imaging technology is any tool that  to monitor normal and abnormal cases. The term includes various services that assist health care providers in making diagnoses. While they’ve existed long before automation, artificial intelligence in medical imaging is becoming more widespread through software updates.Different Types of Imaging TechniquesYou’ll better understand why AI could be an essential scientific tool if you know which imaging techniques people undergo. Learn more about each form of technology to understand AI’s advantages and challenges more easily.X-ray machines are penetrative imaging tools that look at targeted areas inside the body before sending the results to imaging technology. The machine sends ionizing radiation into a patient to gather pictures for diagnosis. X-rays are especially useful for bone inquiries because the radiation passes through them and makes them bright white.Magnetic Resonance Imaging (MRI)If you need an MRI, a doctor might inject a contrast agent into your bloodstream  before you sit in the machine. Radiowaves, a magnet and a computer processor look inside the selected part of your body to reveal everything from tissues to joints.Ultrasound imaging  to see what’s in your body. The machinery bounces soundwaves off of your organs and tissues instead. This isn’t a penetrative imaging technique, even though tools like transvaginal wands do work inside the vaginal canal.Doctors needing more complex imaging may order CT scans. They combine an X-ray with a computer to  before it bounces back on a plate behind the patient. The machinery scans in a circle, making it more useful for 3D images of internal damage or tumors.How Each Technique Benefits From AIIf health care experts have used imaging techniques since before AI existed, why would they benefit from it? There are a few key ways AI in medical imaging and diagnostics could improve each technique for providers and patients.Algorithms Can Process Images FasterWhen doctors order penetrative imaging, they wait for specialized hospital staff to conduct the process and return the pictures. The physician needs time to sit and analyze the image, which may not happen immediately if they have a busy schedule. Given that the U.S. will have a health care worker shortage , the high work demand on doctors is a long-term challenge.\
You don’t need to worry about not getting medical imaging results back quickly if your local hospital uses machine-learning algorithms to process patient results. AI can review results , providing recommendations for doctors when they have time to check the scans. A health care provider will still review your results, but they could get back to you faster with computerized assistance.AI May Catch Small Details BetterArtificial intelligence in medical imaging can do much more than summarize scans. The algorithms can also delineate structures in the human body. Advanced programs , tumors, and blood vessels and catch abnormalities in imaging results.\
Doctors might accidentally overlook similar developments if they’re too small to see with the human eye. Instead of going back for additional imaging in a few weeks or months, you could get earlier and more precise results with AI-supported medical imaging techniques.\
Remember — your doctor will still have the final say over your diagnosis. AI provides additional insights, but you’ll always need to talk with your health care provider before moving forward with treatments.Predictive Analytics May Provide Personalized Treatment SuggestionsPersonalized treatment plans start with diagnostic tools like medical imaging before combining your results with your health history. AI may assist with that process in more hospitals over time. Advanced algorithms can  while checking your scan results. Afterward, your doctor will review its recommended treatment options and use that data to start conversations with you.\
Together, you’ll decide the next best steps. AI won’t determine how you get medical care. Machine learning programs are an evergrowing tool that could make those conversations more straightforward by supplying potentially more accurate data.Some surgeries require medical imagery techniques for real-time data. Machine learning  in specialties like cardiothoracic, ophthalmology and general surgery. When health care professionals use it in real time, the algorithms can review images guiding surgeons through a procedure and assist in augmented visualization. Decision support may also be helpful for instant recommendations based on the patient’s collective medical history, like the likelihood of complications.Does AI Medical Imaging Guarantee Increased Efficiency?There’s no guarantee that AI medical imaging will increase the efficiency of real-time surgical decisions, diagnoses or treatment plans. Algorithms are only as good as their programming. Your doctor will always need to consider the data provided by any machine learning program before using their comprehensive medical knowledge and understanding of your needs to give an informed opinion.Potential Challenges Hospitals May FaceAs more hospitals start using AI programs to read results like medical scans, it’s important to understand the barriers that may prevent implementation. Keep those factors in mind if you’re hoping to see AI-assisted medical services where you live.Data Storage and ProtectionEverything processed and produced by artificial intelligence in medical imaging consists of sensitive data. Hospitals need robust storage capabilities to utilize AI-assisted medical imaging and keep patient information safe. Experts estimate data breaches  in 2024 and may get worse in years to come.\
Hospital administrative teams may need to partner with information technology experts internally or externally to set up data storage methods with extra protection. The process may delay AI implementation, depending on where each facility’s current cybersecurity measures stand.Accurate InterpretabilityMedical imaging technology with AI programs is relatively new. Hospital staff will likely need some form of training before they can use it with patients. Human error could cause less accurate interpretability as medical providers get used to reading and considering AI results while making recommendations.Integrating AI With Current Workflow SystemsAdding a software system to a new service is much less complicated than integrating it into something people are already doing. Hospitals are serving patients around the clock, so adding AI to their medical imaging processes without compromising patient care or service speed is challenging.\
Researchers also point out that health care systems  due to things like mismatching software programs or outdated technology. Analyzing, collecting and storing imaging data may require other updates before it can happen smoothly. Communicating AI information across departments or between hospitals may create additional struggles for health care providers.Anticipate More AI in Medical Imaging and DiagnosticsHealth care professionals are interested in artificial intelligence in medical imaging because it could help them work faster, provide personalized results and give more accurate treatment plans. It can also require complex integration planning before patients benefit from it. Staying up to date on those factors will keep you in the know with the ever-changing health care industry.]]></content:encoded></item><item><title>[D] What&apos;s the most promising successor to the Transformer?</title><link>https://www.reddit.com/r/MachineLearning/comments/1ipvau4/d_whats_the_most_promising_successor_to_the/</link><author>/u/jsonathan</author><category>dev</category><category>ai</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 06:17:01 +0000</pubDate><source url="https://www.reddit.com/r/MachineLearning/top/?sort=top&amp;t=day&amp;limit=3">Reddit - ML</source><content:encoded><![CDATA[All I know about is MAMBA, which looks promising from an efficiency perspective (inference is linear instead of quadratic), but AFAIK nobody's trained a big model yet. There's also xLSTM and Aaren.What do y'all think is the most promising alternative architecture to the transformer?]]></content:encoded></item><item><title>Tech Leaders Reveal New Approaches to Corporate Sustainability</title><link>https://devops.com/executive-strategies-driving-corporate-sustainability/</link><author>Bonnie Schneider</author><category>devops</category><pubDate>Sat, 15 Feb 2025 05:54:47 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[Over the past two years, I’ve interviewed more than 100 executives on tech innovation. Key insights emerged. But one stood out: sustainability is no longer a “nice to have.” It’s now a core business strategy. That’s the focus of my inaugural, exclusive report: Decisions That Define: Executive Strategies Driving Corporate Sustainability. Why 2025 is a […]]]></content:encoded></item><item><title>Concurrency vs Parallelism | Golang | Which is better and Why?</title><link>https://dev.to/gargkunal/concurrency-vs-parallelism-golang-which-is-better-and-why-m5j</link><author>Kunal Garg</author><category>dev</category><category>go</category><pubDate>Sat, 15 Feb 2025 05:38:24 +0000</pubDate><source url="https://dev.to/t/go">Dev.to Go</source><content:encoded><![CDATA[In this video, I’ll dive deep into Concurrency vs Parallelism in Golang, explaining the key differences, when to use each, and which one is better for different scenarios. I'll cover various ways to implement concurrency in Golang, with practical code examples and hands-on demonstrations. Whether you're new to Go or looking to optimize your programs, this video will give you a solid understanding of how to leverage goroutines, channels, and worker pools effectively.🔹 What is Concurrency?
🔹 What is Parallelism?
🔹 Key Differences & Use Cases
🔹 Writing Concurrent Code in Golang
🔹 Live Code Examples & Best Practices]]></content:encoded></item><item><title>Kafka Delay Queue: When Messages Need a Nap Before They Work</title><link>https://beyondthesyntax.substack.com/p/kafka-delay-queue-when-messages-need</link><author>/u/Sushant098123</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 05:08:28 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Webassembly and go 2025</title><link>https://www.reddit.com/r/golang/comments/1ipu4wd/webassembly_and_go_2025/</link><author>/u/KosekiBoto</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Feb 2025 05:00:37 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[so I found this video and was thinking about doing something similar for my game as a means to implement modding, however I also stumbled upon a 3 y/o post when looking into it essentially stating that it's a bad idea and I wasn't able to really find anything on the state of go wasm, so can someone please enlighten me as to the current state of WASM and Go, thank you   submitted by    /u/KosekiBoto ]]></content:encoded></item><item><title>Ikey Doherty&apos;s Serpent OS Rebranding As AerynOS</title><link>https://www.phoronix.com/news/Serpent-OS-To-AerynOS</link><author>Michael Larabel</author><category>tech</category><pubDate>Sat, 15 Feb 2025 05:00:00 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[The nearly three year old Serpent OS Linux distribution started by Ikey Doherty of Solus fame is going to re-brand as AerynOS...]]></content:encoded></item><item><title>How to Implement Redis Caching in Golang for Beginners: A Step-by-Step Guide(Windows Edition)</title><link>https://dev.to/arijit_das_24c46c6f02b06b/how-to-implement-redis-caching-in-golang-for-beginners-a-step-by-step-guidewindows-edition-1g1a</link><author>Arijit das</author><category>dev</category><category>go</category><pubDate>Sat, 15 Feb 2025 04:15:44 +0000</pubDate><source url="https://dev.to/t/go">Dev.to Go</source><content:encoded><![CDATA[In this post, I'll walk you through how to set up and use Redis caching in a Golang project. This setup helps in reducing  and improving  by caching frequently requested data.  
  
  
  🔹 Why Use Redis for Caching?✅ Reduces database load
✅ Supports expiration & invalidation  
  
  
  📌 Step 1: Install Redis PackageWe use the  package to interact with Redis. Install it using:go get github.com/redis/go-redis/v9

  
  
  📌 Step 2: Initialize Redis ClientCreate a file  and add the following:🔹 If using a local Redis instance, set  and remove .For cloud Redis providers (like Aiven, AWS, etc.), use the TLS setup.  
  
  
  📌 Step 3: Implement Caching FunctionsAdd the following caching functions to manage data in Redis:🔹  → Checks if the key exists, retrieves & unmarshals data. → Stores JSON-encoded data with an expiration time. → Deletes a cache entry (useful when data updates).  
  
  
  📌 Step 4: Use Redis Cache in Database QueriesModify your database query functions to  before querying the database:🔹  using ., query the database. for future use with .  
  
  
  📌 Step 5: Invalidate Cache When Data ChangesWhenever new categories are added, remove the outdated cache:🔹 Use this after adding/updating/deleting data to keep cache fresh.  If you want to test Redis caching locally on , follow these steps:
  
  
  ✅ Step 1: Install & Run Redis LocallyDownload Redis for Windows:  (Redis is not natively supported on Windows)Install and run the Redis server. or a , start it using:Check if Redis is Running:
Open  and run:
If Redis is running, it should return:
  
  
  ✅ Step 2: Set & Get Keys in Redis (Local Testing)To manually check your cache for the key , use the following commands in :Check if  exists:If it returns , the key exists. If , it's missing.This should return the cached JSON data.]]></content:encoded></item><item><title>The Phenomenology of Dark Matter Explained</title><link>https://hackernoon.com/the-phenomenology-of-dark-matter-explained?source=rss</link><author>Phenomenology Technology</author><category>tech</category><pubDate>Sat, 15 Feb 2025 03:44:56 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[3.4 Phenomenology of dark matter\
• The relic density coming from Planck satellite data [49]\
The total relic abundance of DM in our model is given by the sum of the scalar (𝜒) and fermion (𝑁3) relic abundances:\
Only for solutions falling exactly within the band given in Eq. (3.31) the totality of the DM can be explained by 𝜒 and 𝑁3.\
• Direct detection cross-section of DM scattering of nucleon set by various experiments such as XENON1T [66], LUX [65] and PandaX-II [174]\
We implemented the model in the SARAH package [175] to calculate all the vertices, mass matrices, tadpole equations etc. The thermal cross sections and DM relic abundance are determined using micrOMEGAS-5.0.8 [176]. Even though the model introduces new free parameters, not all of them are important to DM analysis. For example, self-quartic coupling 𝜆𝜒 does not play any role in DM phenomenology. Hence we choose to fix 𝜆𝜒 = 0.1 in our analysis. The remaining free parameters relevant for DM analysis can be chosen as:\
In the next sections, we will study how the DM phenomenology of this model depends on the free parameters and to do that we choose the following benchmark points which are allowed from all the above-mentioned constraints:\
which we can be utilized to compute the relic density of both the components,The direct detection study of our DM candidates 𝜒𝑅 and 𝑁3 are done here. The current experimental constraints on the DM direct detection assume the existence of only one DM candidate. As in our model, two-component DM candidates are predicted, and the contribution of each candidate to the direct detection cross-section should be rescaled by the fraction contributing to the total relic density. Hence it is convenient to define the fraction of the mass density of 𝑖th DM in the case of multi-component DM [156,157,178,179]\
The upper limit on the direct detection now can be recast as\
The above formula in Eq. (3.40) is an extension of the expression corresponding to the singlet scalar DM case [180]. The relative negative sign between the ℎ1 and ℎ2 contributions arises in our considered model as the couplings get modified according to Eq. (3.42). Due to the presence of the two different channels, depending on the parameter space, we can have destructive interference between these two channels, and direct detection can be very small.(1) Shivam Gola, The Institute of Mathematical Sciences, Chennai.]]></content:encoded></item><item><title>No Personal Liability For DOGE Yet, But With Two More Lawsuits We Get Closer</title><link>https://www.techdirt.com/2025/02/14/no-personal-liability-for-doge-yet-but-with-two-more-lawsuits-we-get-closer/</link><author>Cathy Gellis</author><category>tech</category><pubDate>Sat, 15 Feb 2025 03:39:00 +0000</pubDate><source url="https://www.techdirt.com/">Techdirt</source><content:encoded><![CDATA[I’m going to keep pounding the drum for personal liability against Musk and DOGE, partly to scare them into backing off from their unlawful seizure of our government, and eventually to compensate us for the immense harm they’ve caused. So far it doesn’t seem like anyone has tried to personally sue them for damages, but several lawsuits are taking what might be a predicate step to establish the lawlessness of their claimed power, upon which liability claims would later be based. In addition to the AFGE litigation against OPM we already wrote about, which also names OPM itself for it wrongfully giving DOGE access to its systems, and the states’ lawsuit against the Treasury department for giving DOGE access to theirs, now we have (at this writing at least) two more lawsuits. But while those lawsuits were directed at specific agencies and the wrongfulness of Musk and DOGE’s misuse of power at these agencies, these new lawsuits come gunning for Musk and DOGE and their illegal seizure of power generally.They both base this argument on the Appointments Clause of the Constitution, but we’ll use the states’ complaint to illustrate how. As it sets forth:The Founders of this country fought for independence from the British monarchy due in no small part to the King’s despotic power to create an unlimited number of governmental offices and to fill those offices with the King’s supporters. In fact, this practice so severely undermined the Founders’ freedoms that it is a listed grievance in the Declaration of Independence. Informed by that history, the Framers of the Constitution crafted the Appointments Clause to protect against such tyranny in our system of government. The Appointments Clause was designed to buttress the separation of powers in two ways: first by requiring that Congress create an office before the President can fill it, and second by requiring that the Senate confirm a nominee to an office created by law. These limitations on the President’s power make executive appointments accountable to Congress and make the Senate’s confirmation decisions accountable to the people. See United States v. Arthrex, 594 U.S. 1, 12 (2021). In this way, the Appointments Clause serves a vital role in curbing Executive abuses of power.Yet here we have Musk wielding a shocking amount of power, the complaint continues:Mr. Musk’s seemingly limitless and unchecked power to strip the government of its workforce and eliminate entire departments with the stroke of a pen or click of a mouse would have been shocking to those who won this country’s independence. There is no office of the United States, other than the President, with the full power of the Executive Branch, and the sweeping authority now vested in a single unelected and unconfirmed individual is antithetical to the nation’s entire constitutional structure.We have an Appointments Clause for this very reason, the complaint reminds, “because it prevents one branch from “aggrandizing its power” or “dispensing it too freely . . . to inappropriate members of the Executive Branch.” It explains that there are three types of personnel that can work for the Executive Branch, “Principle Officers,” “Inferior Officers,” and employees. The last category doesn’t require Senate confirmation, but it also isn’t endowed with the sort of executive power that Musk has been claiming. The other categories are, which is why they require nominations by the President and Senate approval, unless Congress has already passed a law foregoing that process. But Congress can only do that for inferior officers, it has not done so here, and in any case Musk is acting more like a Principle Officer anyway.Furthermore, even for Principle Officers the President simply can’t make up a job with such power and appoint someone to it. And even Justice Thomas agrees! The complaint cites what he wrote less than a year ago in :Importantly, the Appointments Clause only grants the President the power to nominate officers to offices that Congress has already “established by Law.” U.S. Const. art. II, § 2, cl. 2. “If Congress has not reached a consensus that a particular office should exist, the Executive lacks the power to unilaterally create and then fill that office.” Trump v. United States, 603 U.S. 593, 650 (2024) (Thomas, J., concurring). “By keeping the ability to create offices out of the President’s hands, the Founders ensured that no President could unilaterally create an army of officer positions to then fill with his supporters. Instead, our Constitution leaves it in the hands of the people’s elected representatives to determine whether new executive offices should exist.” Id. at 646 (Thomas, J., concurring).Yet here we are, with Trump having done exactly what Justice Thomas said he could not, for the very reasons Justice Thomas himself said he could not.The complaint then takes 30 pages to document Musk and DOGE’s unlawful rampage through executive branch agencies, in what is surely only scratching the surface of the full depth of how he has abused his unlawful power, and still continues to abuse it.And so the lawsuit asks for this power to be enjoined so that Musk and DOGE are forced to stop their destruction. In fact, it’s also now asked for a temporary restraining order to get Musk and DOGE to stop what they are doing immediately:[T]he States ask the court to issue a temporary restraining order that immediately and temporarily, until such time as the Court may hear a motion for preliminary injunction, orders Mr. Musk to identify all ways in which any data obtained through unlawful agency access was used, including whether it was used to train any algorithmic models or create or obtain derivative data, orders Mr. Musk to destroy any copies or any derivative data from such unauthorized access in his or DOGE’s possession, custody, or control, and bars Mr. Musk and personnel associated with DOGE from:(a) ordering any change in the disbursement of public funds by agencies;(b) extending offers on behalf of the United States that would bind the government to anappropriation that has not been authorized by law;(c) cancelling government contracts;(d) disposing of government property;(e) ordering the rescission or amendment of regulations;(f) making personnel decisions for agency employees;(g) taking steps to dismantle agencies created by law or otherwise asserting control oversuch agencies, including, e.g., placing employees on administrative leave;(h) accessing sensitive and confidential agency data, using agency data for other than itsauthorized purpose;(i) altering agency data systems without authorization by law and without taking allappropriate protections against cybersecurity risks;(j) engaging in any other conduct that violates the Appointments Clause or exceedsstatutory authority.But beyond that the complaint also asks for declaratory relief such that a court finally speaks to the unlawful nature of Musk’s power (as well as that of its DOGE agency, which, as the complaint explains, is also malformed if it is to claim the sort of supervisory power that it has, which is a power that can only be endowed by Congress):DOGE has purported to exercise authority of its own, and not merely to have acted as an adviser to the President. “Administrative agencies are creatures of statute. They accordingly possess only the authority that Congress has provided.” Nat’l Fed’n of Indep. Bus. v. Dep’t of Lab., Occupational Safety & Health Admin., 595 U.S. 109, 117 (2022) (per curiam). Congress has not provided any authority to DOGE. The Constitution does not provide any authority to DOGE. The temporary organization statute, 5 U.S.C. § 3161, [that Trump claimed in his Executive Order was empowering DOGE] does not provide DOGE with the authority it has purported to exercise. That statute provides that a “temporary organization” is defined as an organization “established by law or Executive order for a specific period not in excess of three years for the purpose of performing a specific study or other project.” 5 U.S.C. § 3161(a)(1) (emphasis added). There is no plausible definition of “project” that would include DOGE’s attempt to remake the entire Executive Branch, as described above, or to destroy agencies, fire personnel, halt funding, or dispose of government property.In asking for declaratory relief a few things are accomplished. For one thing, it gives those whom Musk and DOGE are bossing around the ability to say no. In fact, if gives them the obligation to say no, because what they are being asked to do would be an unlawful order and thus unlawful for them to do. (Of course, the injunction/TRO would also restrict Musk and DOGE from even making such demands.)But it also inches us forward to the real prize here: holding everyone involved with DOGE personally liable for the harm they have caused. By establishing that what they have done has been unlawful it provides the predicate basis for potentially all sorts of forms of liability, including the CFAA, which the USAID workers suit also provides more evidence of liability for, including in its allegations that . See page 6-7 of the complaint:*J. Doe 2 understands that the DOGE personnel had administrative privileges into all the USAID systems and tools and that DOGE personnel took information out of the agency and sent it elsewhere. DOGE’s actions have caused J. Doe 2 emotional injury, as J. Doe 2 is aware of the extent of confidential information that has been breached and the privacy laws broken.And the declaratory judgment would help overcome another legal issue: whether anyone associated with DOGE would be entitled to any sort of governmental immunity for the harm they’ve caused. This will be an issue to analyze further, because we have, and would normally want to have, some immunity shielding government officials from liability for doing their jobs, if we are going to leave them sufficiently free to do their jobs. But here no one in DOGE actually had a job that would have entitled them to do what they have done. Which is what these 14 states are asking a court to finally and declaratively say.]]></content:encoded></item><item><title>The 20 year old PSP can now connect to WPA2 WiFi Networks</title><link>https://wololo.net/2025/02/14/the-20-year-old-psp-can-now-connect-to-wpa2-wifi-networks/</link><author>zdw</author><category>hn</category><pubDate>Sat, 15 Feb 2025 03:31:56 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[Screenshot source: Zekiu_ on youtubeAcid_Snake and the ARK Development team have released a significant update to the ARK custom Firmware for the Sony PSP. Custom Firmware now allows the Playstation Portable to connect to WPA2 encrypted Wifi networks. This is thanks to the recently released  plugin, created by developer  and published on the PSP Homebrew discord.Playstation Portable gets WPA2 Wifi accessThe PSP has been out of official support from Sony for years, but lots of enthusiasts keep maintaining this great handheld through homebrew and custom Firmware updates. As technology evolves around us, older devices such as the PlayStation Portable can lose some of their features.For example, as WPA2 has become the defacto encryption standard for home wifi networks (WPA3’s adoption rate remains low), older devices such as the PSP, that do not support these new* encryption standards become technically unable to access the internet.Wifi access was a very strong feature of the PSP when it was released, and, although it’s probably less important nowadays, losing that feature because newer networks aren’t compatible is a bummer.WPA2 support has been a request by many enthusiasts for years on PSP discussion channels, and it seems that the wpa2psp plugin by developer Moment now brings this to life. According to Acid_Snake, the developer was kind enough to provide the source code of the plugin, which allowed the ARK team to embed it into the ARK Custom Firmware for PSP.This reddit thread by Nebula_NL covers a lot of details on how to install and use the plugin. But the bottom line is: install the latest release of the ARK CFW on your PSP, and take it from there. (Note that you can also manually install the plugin if you’re using another CFW than ARK)This is of course the first iteration of this plugin, and it comes with limitations, specifically:2.4 GHz Only
WPA2 support works with 2.4 GHz WiFi.If your router uses a single SSID for both 2.4 GHz and 5 GHz, you may need to separate them and connect your PSP to the 2.4 GHz network.WPA2 AES Only
Requires WPA2 with AES (AES-CCMP) encryption.TKIP is not supported and will not work.WEP/WPA Compatibility
While WPA2 is active, WEP and WPA encryption will not work.To use WEP or WPA again, disable WPA2, and they will function normally.WPA2/WPA3 Mixed Mode
If your router is set to WPA2/WPA3 mixed mode, your PSP may struggle to obtain an IP address.Try manually setting the IP address instead of using DHCP in [AUTO] mode.Download and install ARK-4 + enable WPA2 Support for the PSP* WPA2 was certified in 2004… It’s “new” from the PSP’s perspective which launched the same year and didn’t “need” to support it at the time. WPA3 launched in 2018 but its adoption is taking time]]></content:encoded></item><item><title>Brake Pad Dust Can Be More Toxic Than Exhaust Emissions, Study Says</title><link>https://tech.slashdot.org/story/25/02/15/0016236/brake-pad-dust-can-be-more-toxic-than-exhaust-emissions-study-says?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>BeauHD</author><category>tech</category><pubDate>Sat, 15 Feb 2025 03:30:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[Bruce66423 shares a report from The Guardian: Microscopic particles emitted from brake pads can be more toxic than those emitted in diesel vehicle exhaust, a study has found. This research shows that even with a move to electric vehicles, pollution from cars may not be able to be eradicated. The researchers found that a higher concentration of copper in some commonly used brake pads was associated with increased harmful effects on sensitive cells from people's lungs, as a result of particles being breathed in.
 
Exposure to pollution generated by cars, vans and lorries has been previously been linked to an increased risk of lung and heart disease. While past attention has mainly concentrated on exhaust emissions, particles are also released into the air from tyre, road and brake pad wear. These emissions are largely unregulated by legislation and the study found that these âoenon-exhaustâ pollution sources are now responsible for the majority of vehicle particulate matter emissions in the UK and parts of Europe, with brake dust the main contributor among them.
 
[...] The scientists examined the effects on lung health of particulate matter from four different types of brake pad with differing chemical compositions; low metallic, semi-metallic, non-asbestos organic and hybrid-ceramic. Results showed that of the four types of brake pads, non-asbestos organic pads were the most potent at inducing inflammation and other markers of toxicity, and were found to be more toxic to human lung cells than diesel exhaust particles. Ceramic pads were the second most toxic. Dr. Ian Mudway, senior lecturer at the school of public health at Imperial College London, cautioned that while the research on brake pad emissions appears sound, it is premature to conclude they are worse than diesel exhaust due to "uncontrolled variables" like brake disc types and particle composition.
 
Slashdot reader Bruce66423 also notes it "doesn't discuss the significance of regenerative breaking, which is a feature of at least some electric cars [that reduces brake pad wear by using the electric motor to slow down the vehicle and recover energy]."
 
The research has been published in the journal Particle and Fibre Technology.]]></content:encoded></item><item><title>Theoretical and Experimental Constraints: Discussing Different Constraints on the Model Parameters</title><link>https://hackernoon.com/theoretical-and-experimental-constraints-discussing-different-constraints-on-the-model-parameters?source=rss</link><author>Phenomenology Technology</author><category>tech</category><pubDate>Sat, 15 Feb 2025 03:06:41 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[3.3 Theoretical and experimental constraintsWe discuss different constraints on the model parameters such as𝑈(1)𝑋 gauge coupling and scalar mixing angle. To estimate the constraints we consider vacuum stability, perturbative unitarity, and collider searches of BSM Higgs and 𝑍′ boson respectively.The above scalar potential must be bounded from below. To determine the conditions for 𝑉(𝐻, Φ, 𝜒) to be bounded from below, we need to check the following symmetric matrix which comes from the quadratic part of the potential,\
Requiring such a matrix to be positive-definite, we obtain the following conditions,3.3.2 Higgs Invisible decay\
Hence the total invisible decay width of SM Higgs boson ℎ1 is given a\
Accordingly, the invisible branching ratio for ℎ1 is given b3.3.4 Bounds on the mixing parameter between physical mass eigenstates(1) Shivam Gola, The Institute of Mathematical Sciences, Chennai.]]></content:encoded></item><item><title>A Phenomenological Study of WIMP Models: Scalar Sector, Gauge Sector, and More</title><link>https://hackernoon.com/a-phenomenological-study-of-wimp-models-scalar-sector-gauge-sector-and-more?source=rss</link><author>Phenomenology Technology</author><category>tech</category><pubDate>Sat, 15 Feb 2025 03:00:22 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[\
In the next subsections, we discuss various parts of the lagrangian of the model,\
where 𝛼 is the mixing angle. The rotation matrix satisfies\
The real and imaginary components of 𝜒 have the following massesTo determine the gauge boson spectrum, we have to expand the scalar kinetic terms and replaceThe Yukawa sector of the model can be written in a gauge-invariant way as(1) Shivam Gola, The Institute of Mathematical Sciences, Chennai.]]></content:encoded></item><item><title>Studying a Two-Component Dark Matter Model: An Introduction</title><link>https://hackernoon.com/studying-a-two-component-dark-matter-model-an-introduction?source=rss</link><author>Phenomenology Technology</author><category>tech</category><pubDate>Sat, 15 Feb 2025 02:55:36 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[In this chapter, we study a two-component DM model interacting with SM via Higgs and Z portals. The results are based on the work: Arindam Das, Shivam Gola, Sanjoy Mondal, Nita Sinha, "Two-Components Scalar and Fermionic Dark Matter candidates in a generic U(1)𝑋 model, Phys.Lett.B 2022.137117”.Underpinning the origin of neutrino mass and elucidating the nature of DM would constitute a major step forward in particle physics. Several simple extensions of the SM that can account for the DM have already been studied [136–143]. In these models, the SM particle content is extended by additional fields, and a discrete symmetry is usually introduced to guarantee the stability of the DM particle in cosmological scale. In recent years, a class of models has been proposed to incorporate the neutrino mass generation and the existence of DM in a unified framework. Motivated by this, people have studied well-motivated BSM framework based on the gauged 𝑈(1)𝑋 model [144–146]. The most intriguing aspect of this model is that including three generations of right-handed neutrinos, as in the type-I seesaw process for creating light neutrino masses, is no longer an option, but emerges as the simplest solution to eliminate the gauge and mixed gauge-gravity anomalies [147]. The scalar DM can be inherently stable in such models due to its 𝑈(1)𝑋 charge, but the fermionic DM cannot be realized in the simplest 𝑈(1)𝑋 model. Additional discrete symmetries can be introduced, which can stabilize one of the right-handed neutrinos to play the role of DM, while the other two neutrinos participate in the type I seesaw process to generate the required light neutrino masses and flavor mixing. Also, there are many models proposed in the literature, where neutrino mass generation is intimately connected with DM [148–153]. In these types of models, DM is a mediator of neutrino mass generation.\
A single-particle DM model may not be sufficient to account for the relic density of DM observed in the universe. Many such models face strong constraints from direct detection experiments and other observations. Therefore, it is reasonable to consider multi-particle DM scenarios, where two or more particles contribute to the DM abundance. [24,62,126]. Multi-component DM refers to a situation in which two or more particles contribute to the measured DM density. This has been already studied in many BSM scenarios [31, 56, 57, 154–166]. The multi-component DM model has also some benefits over the single dark matter scenario. For instance, it can avoid some stringent constraints arising from various experiments that probe the properties and interactions of dark matter and other particles. A multi-component DM model can also accommodate different observational features of dark matter, such as its distribution and abundance in the universe.(1) Shivam Gola, The Institute of Mathematical Sciences, Chennai.]]></content:encoded></item><item><title>Bringing Nest.js to Rust: Meet Toni.rs, the Framework You’ve Been Waiting For! 🚀</title><link>https://www.reddit.com/r/rust/comments/1iprsmo/bringing_nestjs_to_rust_meet_tonirs_the_framework/</link><author>/u/Mysterious-Rust</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 02:42:18 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[As a Rust developer coming from TypeScript, I’ve been missing a Nest.js-like framework — its modularity, dependency injection, and CLI superpowers. But since the Rust ecosystem doesn’t have a direct counterpart (yet!), I decided to build one myself! 🛠️Introducing… Toni.rs — a Rust framework inspired by the Nest.js architecture, designed to bring the same developer joy to our favorite language. And it’s live in beta! 🎉Here’s what makes this project interesting:Scalable maintainability 🧩:A modular architecture keeps your business logic decoupled and organized. Say goodbye to spaghetti code — each module lives in its own context, clean and focused.Need a complete CRUD setup? Just run a single CLI command. And I have lots of ideas for CLI ease. Who needs copy and paste?Automatic Dependency Injection 🤖:Stop wasting time wiring dependencies. Declare your providers, add them to your structure, and let the framework magically inject them. Less boilerplate, more coding.Leave your thoughts below — suggestions, questions, or even just enthusiasm! 🚀 ]]></content:encoded></item><item><title>How I Became A Machine Learning Engineer (No CS Degree, No Bootcamp)</title><link>https://towardsdatascience.com/how-i-became-a-machine-learning-engineer-no-cs-degree-no-bootcamp/</link><author>Egor Howell</author><category>dev</category><category>ai</category><pubDate>Sat, 15 Feb 2025 02:33:01 +0000</pubDate><source url="https://towardsdatascience.com/">Towards Data Science</source><content:encoded><![CDATA[Machine learning and AI are among the most popular topics nowadays, especially within the tech space. I am fortunate enough to work and develop with these technologies every day as a machine learning engineer!In this article, I will walk you through my journey to becoming a machine learning engineer, shedding some light and advice on how you can become one yourself!In one of my previous articles, I extensively wrote about my journey from school to securing my first Data Science job. I recommend you check out that article, but I will summarise the key timeline here.Pretty much everyone in my family studied some sort of STEM subject. My great-grandad was an engineer, both my grandparents studied physics, and my mum is a maths teacher.So, my path was always paved for me.I chose to study physics at university after watching The Big Bang Theory at age 12; it’s fair to say everyone was very proud!At school, I wasn’t dumb by any means. I was actually relatively bright, but I didn’t fully apply myself. I got decent grades, but definitely not what I was fully capable of.I was very arrogant and thought I would do well with zero work.I applied to top universities like Oxford and Imperial College, but given my work ethic, I was delusional thinking I had a chance. On results day, I ended up in clearing as I missed my offers. This was probably one of the saddest days of my life.Clearing in the UK is where universities offer places to students on certain courses where they have space. It’s mainly for students who don’t have a university offer.I was lucky enough to be offered a chance to study physics at the University of Surrey, and I went on to earn a first-class master’s degree in physics!There is genuinely no substitute for hard work. It is a cringy cliche, but it is true!My original plan was to do a PhD and be a full-time researcher or professor, but during my degree, I did a research year, and I just felt a career in research was not for me. Everything moved so slowly, and it didn’t seem there was much opportunity in the space.During this time, DeepMind released theirdocumentary on YouTube, which popped up on my home feed.From the video, I started to understand how AI worked and learn about neural networks, reinforcement learning, and deep learning. To be honest, to this day I am still not an expert in these areas.Naturally, I dug deeper and found that a data scientist uses AI and machine learning algorithms to solve problems. I immediately wanted in and started applying for data science graduate roles.I spent countless hours coding, taking courses, and working on projects. I applied to and eventually landed my first data science graduate scheme in September 2021.You can hear more about my journey from a podcast.I started my career in an insurance company, where I built various supervised learning models, mainly using gradient boosted tree packages like CatBoost, XGBoost, and generalised linear models (GLMs).I built models to predict: — Did someone fraudulently make a claim to profit.— What’s the premium we should give someone.— How many claims will someone have. — What’s the average claim value someone will have.I made around six models spanning the regression and classification space. I learned so much here, especially in statistics, as I worked very closely with Actuaries, so my maths knowledge was excellent.However, due to the company’s structure and setup, it was difficult for my models to advance past the PoC stage, so I felt I lacked the “tech” side of my toolkit and understanding of how companies use machine learning in production.After a year, my previous employer reached out to me asking if I wanted to apply to a junior data scientist role that specialises in time series forecasting and optimisation problems. I really liked the company, and after a few interviews, I was offered the job!I worked at this company for about 2.5 years, where I became an expert in forecasting and combinatorial optimisation problems.I developed many algorithms and deployed my models to production through AWS using software engineering best practices, such as unit testing, lower environment, shadow system, CI/CD pipelines, and much more.Fair to say I learned a lot. I worked very closely with software engineers, so I picked up a lot of engineering knowledge and continued self-studying machine learning and statistics on the side.Over time, I realised the actual value of data science is using it to make live decisions. There is a good quote by Pau Labarta BajoML models inside Jupyter notebooks have a business value of $0There is no point in building a really complex and sophisticated model if it will not produce results. Seeking out that extra 0.1% accuracy by staking multiple models is often not worth it.You are better off building something simple that you can deploy, and that will bring real financial benefit to the company.With this in mind, I started thinking about the future of data science. In my head, there are two avenues: -> You work primarily to gain insight into what the business should be doing and what it should be looking into to boost its performance. -> You ship solutions (models, decision algorithms, etc.) that bring business value.I feel the data scientist who analyses and builds PoC models will become extinct in the next few years because, as we said above, they don’t provide tangible value to a business.That’s not to say they are entirely useless; you have to think of it from the business perspective of their return on investment. Ideally, the value you bring in should be more than your salary.You want to say that you did “X that produced Y”, which the above two avenues allow you to do.The engineering side was the most interesting and enjoyable for me. I genuinely enjoy coding and building stuff that benefits people, and that they can use, so naturally, that’s where I gravitated towards.To move to the ML engineering side, I asked my line manager if I could deploy the algorithms and ML models I was building myself. I would get help from software engineers, but I would write all the production code, do my own system design, and set up the deployment process independently.And that’s exactly what I did.Coincidentally, my current employer contacted me around this time and asked if I wanted to apply for a machine learning engineer role that specialises in general ML and optimisation at their company!Call it luck, but clearly, the universe was telling me something. After several interview rounds, I was offered the role, and I am now a fully fledged machine learning engineer!Fortunately, a role kind of “fell to me,” but I created my own luck through up-skilling and documenting my learning. That is why I always tell people to show their work — you don’t know what may come from it.I want to share the main bits of advice that helped me transition from a machine learning engineer to a data scientist. — A machine learning engineer is  an entry-level position in my opinion. You need to be well-versed in data science, machine learning, software engineering, etc. You don’t need to be an expert in all of them, but have good fundamentals across the board. That’s why I recommend having a couple of years of experience as either a software engineer or data scientist and self-study other areas. — If you are from data science, you must learn to write good, well-tested production code. You must know things like typing, linting, unit tests, formatting, mocking and CI/CD. It’s not too difficult, but it just requires some practice. I recommend asking your current company to work with software engineers to gain this knowledge, it worked for me! — Most companies nowadays deploy many of their architecture and systems on the cloud, and machine learning models are no exception. So, it’s best to get practice with these tools and understand how they enable models to go live. I learned most of this on the job, to be honest, but there are courses you can take. — I am sure most of you know this already, but every tech professional should be proficient in the command line. You will use it extensively when deploying and writing production code. I have a basic guide you can checkout here.Data Structures & Algorithms — Understanding the fundamental algorithms in computer science are very useful for MLE roles. Mainly because you will likely be asked about it in interviews. It’s not too hard to learn compared to machine learning; it just takes time. Any course will do the trick. — Again, most tech professionals should know Git, but as an MLE, it is essential. How to squash commits, do code reviews, and write outstanding pull requests are musts. — Many MLE roles I saw required you to have some specialisation in a particular area. I specialise in time series forecasting, optimisation, and general ML based on my previous experience. This helps you stand out in the market, and most companies are looking for specialists nowadays.The main theme here is that I basically up-skilled my software engineering abilities. This makes sense as I already had all the math, stats, and machine learning knowledge from being a data scientist.If I were a software engineer, the transition would likely be the reverse. This is why securing a machine learning engineer role can be quite challenging, as it requires proficiency across a wide range of skills.Summary & Further ThoughtsI have a free newsletter, , where I share weekly tips and advice as a practising data scientist. Plus, when you subscribe, you will get my and short PDF version of my AI roadmap!]]></content:encoded></item><item><title>AI and the Future of Work: Transforming Industries</title><link>https://hackernoon.com/ai-and-the-future-of-work-transforming-industries?source=rss</link><author>Ombir Sharma</author><category>tech</category><pubDate>Sat, 15 Feb 2025 02:13:22 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[AI or artificial intelligence is the capability and ability of a machine to imitate human intelligence. Intelligent systems are capable of learning, reasoning, and self-correcting. AI includes a number of technologies such as machine learning, natural language processing, robotics, and computer vision. It is able to perform a wide array of functions from simple repetitive work to making complex decisions which changes the very fabric of industries.The Rise of Robotics and AIThe combination of AI and robotics is changing the world at an unprecedented rate; human errors are greatly reduced and proficiency is greatly improved across multiple industries. Robots powered by AI can be programmed to accomplish tasks that previously only humans could perform. From AI-trained chatbots at customer service to assembly lines in factories, this newly developed technology changes the workplace alongside societal norms.Effect of Artificial Intelligence on EmploymentAI is a double-edged sword with its impact on employment. The technology has created several new opportunities and increased overall productivity in numerous ways, however, it has also posed great threats to certain jobs and industries which can lead to displacement of employees.An important shift is on the horizon as the job market is about to undergo a role reversal change. As AI technology evolves, it is taking over the more labor-intensive tasks and as a result, human workers are becoming more strategic and analytic. AI alleviates repetitive tasks and allows employees to focus on creative problem-solving.The new approach AI takes centers around, just like the Industrial Revolution. While focusing on increasing productivity, ChatGPT and AutoGPT have the potential to perform tasks such as data entry, scheduling, and even more complex problem-solving, increasing overall demand for customer service representatives and support agents. In every age, these shifts in productivity have led to increased job opportunities, just like the multiple industries that formed alongside the technology integrations.Facilitation of EmploymentThe introduction of ChatGPT can aid everyday business operations, serving as virtual assistants that communicate primarily with customers. By streamlining business functions for flexible resource allocation, productivity is sure to increase. Efficient use of ChatGPT makes it incredibly simple for businesses to automate their customer inquiries, increasing profit margins.ChatGPT encourages an environmentally friendly approach by seamlessly optimizing supply chains with effective waste reduction strategies. AI, without a doubt, would optimize ChatGPT-provided decision-making to improve overall energy consumption and ensure economic goals are catered towards too.In the absence of people, ChatGPT opens doors to new interactions that drastically improve service and business operations through automation. Communication via virtual assistants and chatbots allows for effortless collaboration and automated customer interactions on a new level.\
In every way possible, AI improves business decision-making by offering adequate utility and data for correct allocation. Business AI helps set prices, predict market movement, and analyze how much risk varies. Keeping track of tools like ChatGPT can aid project-based decisions by providing up-to-date information.Elimination of Junior and Mid-level Staff PositionsAs a result of automation, junior and mid-level roles, particularly in data entry and administrative duties and tasks, are being skinned out. More companies seem to be using AI, which, in turn, is leading to an increased need for highly specialized and senior positions that require a supervisor to think strategically.Across different industries, AI is changing the future of work. From performing simple services to making complex decisions, AI has a broad range of applications, and as time goes by, the list only seems to grow.The Use Of AI In BusinessArtificial intelligence is being adopted in all sectors to boost productivity, accuracy, and satisfaction of customers. It is used in recruitment HR, in through chatbots, and in marketing through brand campaigns. Work processes are now being automated with AI, thereby, minimizing the costs of running the business.Impact Of AI On Business OperationsSoftware developments with regard to Artificial intelligence utilizing machine learning and automation present the future of the workplace, resulting in increased productivity. Businesses will continuously adopt AI to better their decisions, improve work processes, and promote creativity. Because of this, more skills in AI will be needed which will translate to new positions being created.In the field of finance, AI handles fraud detection, automates trading, and enhances risk assessments. Robo-advisors make investment suggestions based on a client’s unique profile, and AI chatbots provide further engagement with customers.AI assists in diagnosing diseases and personalizes treatments for patients in healthcare. With the help of AI-led robots, humans can make fewer mistakes while performing surgeries, which helps enhance patient care.In the automotive sector, AI enables self-driving cars, predictive maintenance, and smart traffic control. AI technologies also help improve vehicle safety and fuel efficiency.Cybersecurity is enhanced by AI technologies that assess new threats, detect anomalies, and provide assistance during the occurrence of cyber-attacks. Data security is also improved and business risks are suppressed by AI technologies.In the e-commerce sector, AI improves customer experiences, automates supply chains, and increases the level of service. Recommendation systems based on users' behavior increase the total sales and satisfaction level of customers.We see the growth of AI in hospitality in chatbots, smart booking systems, and customer experience applications. AI analytics also help with effective guest price settings and greater guest satisfaction.AI greatly assists in providing relevant lists of jobs that best suit a candidate's skills. AI technology helps to read a CV, understand the candidate's level of skills, and determine his success.Are My Working Opportunities On The Line Due To AI?Filling positions for repetitive work is indeed scalable with AI which is why it poses a threat for employment. In reality, AI also creates new possibilities by taking up low-productivity tasks. It is expected that new jobs that require creative thinking, emotions, and strategy-based decision-making will still exist. To ensure that they remain employed, workers must learn new skills and adjust to the new reality.AI is enabling the future of work by performing tasks that require time and effort, growing productivity, and changing the existing categorization of industries. Some roles may be lost, but there are always new positions that have to be filled. Being able to utilize AI together with other novel technologies is crucial to be successful for business professionals in the new world.]]></content:encoded></item><item><title>Refactor and cleaup yacc: Making sense of legacy code</title><link>https://dev.to/mbver/refactor-and-clean-up-goyacc-making-sense-of-legacy-code-1pm0</link><author>mbver</author><category>dev</category><category>go</category><pubDate>Sat, 15 Feb 2025 02:04:48 +0000</pubDate><source url="https://dev.to/t/go">Dev.to Go</source><content:encoded><![CDATA[, a widely used LALR(1) parser generator, is efficient but burdened by archaic, unreadable code from the 1970s. Its Go adaptation, , inherits these issues despite the modern language.While exploring compilers, I found  to be a gold mine of insights, though buried under outdated practices. Following Allan Holub’s , I dissected its code—clarifying, simplifying, and refactoring convoluted sections. I then tested the revised version in a real-world scenario to ensure it retained its original functionality. The full code is published on github.I aimed to explore real-world open-source code, bridge ideals with reality, and stay sane as a reader. By refining and clarifying it, I made learning smoother and reuse easier.The first issue is poor naming—cryptic, vague, or misleading names. Here’s how naming was improved.original | cleanup          | intent
--------------------------------------------------------------------------------------------------
cpfir    | computeFirstsets | compute the first sets for non-terminal symbols
cpemp    | computeEmpty     | compute compute table to check if a non-terminal symbol is nullable
cpres    | computeYields    | compute compute the production yields for non-terminal symbols
curres   | prds             | the productions having the same non-terminal symbol as LHS
wSet     | wItem            | type of a working item generated during closure
wSets    | wSet             | store working items generated during closure
statemem | kernls           | store kernel items
mstate   | statechain       | chain a state's previous state to track where it cames from
pstate   | kernlp           | pointer to a kernel item
putitem  | addKernItem      | add a kernel item
writem   | item.string()    | get the string representation of a kernel item
apack    | packGotosRow     | compress newly goto row after closing state, not action as "a" implies
prectfn  | handleShiftReduceConflict | handle shift-reduce conflict of a state during processing closed states
go2out   | packGotosByCol   | compress goto table by column
go2gen   | computeGotoCol   | compute the goto column for a non-terminal symbol
callopt  | storeShiftsAndGotos | store shift-row for a state or goto column for a non-terminal symbol in action-store
gin      | storeGotoCol     | store a column of compressed goto table for a terminal symbol into action-store
stin     | storeShifts      | store shifts of a row in action table for a state into action-store
setbit   | lkset.set        | set a bit ON
bitset   | lkset.check      | check if a bit is ON (mix up with setbit easily)

The second issue is cramming everything into one place, burying core logic (closure and state generation) under the bulky input parsing.  Refactoring separates it to files by functionality, improving clarity and focus.The third issue is poor organization. A key component, the lookahead set, should have its own type with all related methods grouped together, not lying elsewhere. This improves maintainability and makes adding methods easier. Similarly, the kernel item should define its own string representation method. These structs also include a Clone method for copying instances.The fourth issue is convolution. The  variable determines whether closure is  or  for state generation and  for processing closed states. However, it pops up in unexpected places like kernel item addition, state generation, and packing gotos. Furthermore, it creates twists and turns in the  logic, making it harder to follow.To resolve this, I split  into  for  and closure0 for . While slightly redundant, this separation prevents their logic from getting entangled, making the flow easier to follow. With this change, the confusing  is completely eliminated.Similarly,  determines whether we're handling an  but is tangled with  in closed state processing. By explicitly storing and processing , the confusion caused by  is eliminated.The fifth issue is redundant complications. An example is  -production rules with the same . The code extracts only  to construct the  while calling it  in kernel item. By consistently using full production rules, we remove this friction. It helps to eliminate further redundancies like keeping production number in kernel item for comparison and tricky code to print the dot for a kernel item. Here is the code with comments highlighting the problems.Another example is the redundant outer loop of .Another redundant outer loop is in closure's work item processing.The sixth issue is that several lines can be made more readable by adopting a clearer style. Let's review some snippets.Thanks for reading to the end. Hope this helps on your journey.]]></content:encoded></item><item><title>&apos;Please Stop Inviting AI Notetakers To Meetings&apos;</title><link>https://slashdot.org/story/25/02/15/006253/please-stop-inviting-ai-notetakers-to-meetings?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>BeauHD</author><category>tech</category><pubDate>Sat, 15 Feb 2025 02:02:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[Most virtual meeting platforms these days include AI-powered notetaking tools or bots that join meetings as guests, transcribe discussions, and/or summarize key points. "The tech companies behind them might frame it as a step forward in efficiency, but the technology raises troubling questions around etiquette and privacy and risks undercutting the very communication it's meant to improve (paywalled; alternative source)," writes Chris Stokel-Walker in a Weekend Essay for Bloomberg. From the article: [...] The push to document every workplace interaction and utterance is not new. Having a paper trail has long been seen as a useful thing, and a record of decisions and action points is arguably what makes a meeting meaningful. The difference now is the inclusion of new technology that lacks the nuance and depth of understanding inherent to human interaction in a meeting room. In some ways, the prior generation of communication tools, such as instant messaging service Slack, created its own set of problems. Messaging that previously passed in private via email became much more transparent, creating a minefield where one wrong word or badly chosen emoji can explode into a dispute between colleagues. There is a similar risk with notetaking tools. Each utterance documented and analyzed by AI includes the potential for missteps and misunderstandings.
 
Anyone thinking of bringing an AI notetaker to a meeting must consider how other attendees will respond, says Andrew Brodsky, assistant professor of management at the McCombs School of Business, part of the University of Texas at Austin. Colleagues might think you want to better focus on what is said without missing out on a definitive record of the discussion. Or they might think, "You can't be bothered to take notes yourself or remember what was being talked about," he says. For the companies that sell these AI interlopers, the upside is clear. They recognize we're easily nudged into different behaviors and can quickly become reliant on tools that we survived without for years. [...] There's another benefit for tech companies getting us hooked on AI notetakers: Training data for AI systems is increasingly hard to come by. Research group Epoch AI forecasts there will be a drought of usable text possibly by next year. And with publishers unleashing lawsuits against AI companies for hoovering up their content, the tech firms are on the hunt for other sources of data. Notes from millions of meetings around the world could be an ideal option.
 
For those of us who are the source of such data, however, the situation is more nuanced. The key question is whether AI notetakers make office meetings more useless than so many already are. There's an argument that meetings are an important excuse for workers to come together and talk as human beings. All that small talk is where good ideas often germinate -- that's ostensibly why so many companies are demanding staff return to the office. But if workers trade in-person engagement for AI readbacks, and colleagues curb their words and ideas for fear of being exposed by bots, what's left? If the humans step back, all that remains is a series of data points and more AI slop polluting our lives.]]></content:encoded></item><item><title>Uber sues DoorDash, alleging anti-competitive tactics</title><link>https://techcrunch.com/2025/02/14/uber-sues-doordash-alleging-anti-competitive-tactics/</link><author>Kirsten Korosec, Maxwell Zeff</author><category>tech</category><pubDate>Sat, 15 Feb 2025 01:35:37 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Ride-share giant Uber filed a lawsuit Friday against DoorDash, accusing the delivery outfit of stifling competition by intimidating restaurant owners into exclusive deals. Uber alleges in the lawsuit, filed in Superior Court of California, that its chief rival bullied restaurants into only working with DoorDash. Uber claims that DoorDash, which holds the largest share of […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>what was the Linux expirance like in the 90&apos;s and 00&apos;s?</title><link>https://www.reddit.com/r/linux/comments/1ipql9k/what_was_the_linux_expirance_like_in_the_90s_and/</link><author>/u/mrcrabs6464</author><category>linux</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 01:35:10 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[I started using Linux about 2 years ago really right at the beginning of the proton revolution. And I know that Gaming in specif was the biggest walls for mass adaption of Linux throughout the 2010's and late 2000's but Ive heard things about how most software ran through WINE until Direct x and other API's became more common. but gaming aside what was the expirance and community like at the time?   submitted by    /u/mrcrabs6464 ]]></content:encoded></item><item><title>NYC Is Giving Free E-Bikes To Delivery Workers Using Unsafe Models</title><link>https://hardware.slashdot.org/story/25/02/14/2336232/nyc-is-giving-free-e-bikes-to-delivery-workers-using-unsafe-models?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>BeauHD</author><category>tech</category><pubDate>Sat, 15 Feb 2025 01:25:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[New York City's Department of Transportation is offering delivery workers the opportunity to swap out uncertified e-bikes for safer UL-compliant models. "Millions of people rely on such workers for timely deliveries, yet the low wages and brutal conditions of the job have forced many riders to seek out low-cost electric bicycles to perform the work -- exactly the kind of e-bikes that are least likely to have received safety certifications," reports Electrek. From the report: The NYC DOT has already begun accepting applications for the new E-Bike Trade-In Program, which is open to delivery workers with non-compliant electric bicycles as well as the often-seen electric scooters/mopeds that don't really qualify as e-bikes, despite their ubiquitous use in the industry. Interestingly, the program even accepts gasoline-powered mopeds that are not able to be legally registered with the DMV, including those that lack VINs. In exchange for trading in a non-certified vehicle, the delivery worker will receive a new UL-certified electric bike with a spare UL-certified battery.
 
There are a few requirements for eligibility. The worker has to have earned at least US $1,500 by working in the food delivery industry last year in 2024, live in one of the five New York City boroughs, be at least 18 years old, and own/use one of the eligible devices for trade-in. The program is free to participate in with no additional cost for the delivery workers. However, the supply of free electric bicycles is described as "limited." Those interested need to submit an application before the window closes on March 10, 2025.]]></content:encoded></item><item><title>Go 1.24 Brings Performance Improvements, Better WebAssembly Support</title><link>https://www.phoronix.com/news/Go-1.24-Released</link><author>Michael Larabel</author><category>tech</category><pubDate>Sat, 15 Feb 2025 01:24:33 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Go 1.24 was released this week by Google engineers as the newest step forward for this popular programming language...]]></content:encoded></item><item><title>Introducing Impressions at Netflix</title><link>https://netflixtechblog.com/introducing-impressions-at-netflix-e2b67c88c9fb?source=rss----2615bd06b42e---4</link><author>Netflix Technology Blog</author><category>dev</category><category>official</category><pubDate>Sat, 15 Feb 2025 01:13:20 +0000</pubDate><source url="https://netflixtechblog.com/?source=rss----2615bd06b42e---4">Netflix Tech Blog</source><content:encoded><![CDATA[Part 1: Creating the Source of Truth for ImpressionsImagine scrolling through Netflix, where each movie poster or promotional banner competes for your attention. Every image you hover over isn’t just a visual placeholder; it’s a critical data point that fuels our sophisticated personalization engine. At Netflix, we call these images ‘impressions,’ and they play a pivotal role in transforming your interaction from simple browsing into an immersive binge-watching experience, all tailored to your unique tastes.Capturing these moments and turning them into a personalized journey is no simple feat. It requires a state-of-the-art system that can track and process these impressions while maintaining a detailed history of each profile’s exposure. This nuanced integration of data and technology empowers us to offer bespoke content recommendations.In this multi-part blog series, we take you behind the scenes of our system that processes billions of impressions daily. We will explore the challenges we encounter and unveil how we are building a resilient solution that transforms these client-side impressions into a personalized content discovery experience for every Netflix viewer.Why do we need impression history?To tailor recommendations more effectively, it’s crucial to track what content a user has already encountered. Having impression history helps us achieve this by allowing us to identify content that has been displayed on the homepage but not engaged with, helping us deliver fresh, engaging recommendations.By maintaining a history of impressions, we can implement frequency capping to prevent over-exposure to the same content. This ensures users aren’t repeatedly shown identical options, keeping the viewing experience vibrant and reducing the risk of frustration or disengagement.Highlighting New ReleasesFor new content, impression history helps us monitor initial user interactions and adjust our merchandising efforts accordingly. We can experiment with different content placements or promotional strategies to boost visibility and engagement.Additionally, impression history offers insightful information for addressing a number of platform-related analytics queries. Analyzing impression history, for example, might help determine how well a specific row on the home page is functioning or assess the effectiveness of a merchandising strategy.The first pivotal step in managing impressions begins with the creation of a Source-of-Truth (SOT) dataset. This foundational dataset is essential, as it supports various downstream workflows and enables a multitude of use cases.Collecting Raw Impression EventsAs Netflix members explore our platform, their interactions with the user interface spark a vast array of raw events. These events are promptly relayed from the client side to our servers, entering a centralized event processing queue. This queue ensures we are consistently capturing raw events from our global user base.After raw events are collected into a centralized queue, a custom event extractor processes this data to identify and extract all impression events. These extracted events are then routed to an Apache Kafka topic for immediate processing needs and simultaneously stored in an Apache Iceberg table for long-term retention and historical analysis. This dual-path approach leverages Kafka’s capability for low-latency streaming and Iceberg’s efficient management of large-scale, immutable datasets, ensuring both real-time responsiveness and comprehensive historical data availability.Filtering & Enriching Raw ImpressionsOnce the raw impression events are queued, a stateless Apache Flink job takes charge, meticulously processing this data. It filters out any invalid entries and enriches the valid ones with additional metadata, such as show or movie title details, and the specific page and row location where each impression was presented to users. This refined output is then structured using an Avro schema, establishing a definitive source of truth for Netflix’s impression data. The enriched data is seamlessly accessible for both real-time applications via Kafka and historical analysis through storage in an Apache Iceberg table. This dual availability ensures immediate processing capabilities alongside comprehensive long-term data retention.Ensuring High Quality ImpressionsMaintaining the highest quality of impressions is a top priority. We accomplish this by gathering detailed column-level metrics that offer insights into the state and quality of each impression. These metrics include everything from validating identifiers to checking that essential columns are properly filled. The data collected feeds into a comprehensive quality dashboard and supports a tiered threshold-based alerting system. These alerts promptly notify us of any potential issues, enabling us to swiftly address regressions. Additionally, while enriching the data, we ensure that all columns are in agreement with each other, offering in-place corrections wherever possible to deliver accurate data.We handle a staggering volume of 1 to 1.5 million impression events globally every second, with each event approximately 1.2KB in size. To efficiently process this massive influx in real-time, we employ Apache Flink for its low-latency stream processing capabilities, which seamlessly integrates both batch and stream processing to facilitate efficient backfilling of historical data and ensure consistency across real-time and historical analyses. Our Flink configuration includes 8 task managers per region, each equipped with 8 CPU cores and 32GB of memory, operating at a parallelism of 48, allowing us to handle the necessary scale and speed for seamless performance delivery. The Flink job’s sink is equipped with a data mesh connector, as detailed in our Data Mesh platform which has two outputs: Kafka and Iceberg. This setup allows for efficient streaming of real-time data through Kafka and the preservation of historical data in Iceberg, providing a comprehensive and flexible data processing and storage solution.We utilize the ‘island model’ for deploying our Flink jobs, where all dependencies for a given application reside within a single region. This approach ensures high availability by isolating regions, so if one becomes degraded, others remain unaffected, allowing traffic to be shifted between regions to maintain service continuity. Thus, all data in one region is processed by the Flink job deployed within that region.Addressing the Challenge of Unschematized EventsAllowing raw events to land on our centralized processing queue unschematized offers significant flexibility, but it also introduces challenges. Without a defined schema, it can be difficult to determine whether missing data was intentional or due to a logging error. We are investigating solutions to introduce schema management that maintains flexibility while providing clarity.Automating Performance Tuning with AutoscalersTuning the performance of our Apache Flink jobs is currently a manual process. The next step is to integrate with autoscalers, which can dynamically adjust resources based on workload demands. This integration will not only optimize performance but also ensure more efficient resource utilization.Improving Data Quality AlertsRight now, there’s a lot of business rules dictating when a data quality alert needs to be fired. This leads to a lot of false positives that require manual judgement. A lot of times it is difficult to track changes leading to regression due to inadequate data lineage information. We are investing in building a comprehensive data quality platform that more intelligently identifies anomalies in our impression stream, keeps track of data lineage and data governance, and also, generates alerts notifying producers of any regressions. This approach will enhance efficiency, reduce manual oversight, and ensure a higher standard of data integrity.Creating a reliable source of truth for impressions is a complex but essential task that enhances personalization and discovery experience. Stay tuned for the next part of this series, where we’ll delve into how we use this SOT dataset to create a microservice that provides impression histories. We invite you to share your thoughts in the comments and continue with us on this journey of discovering impressions.We are genuinely grateful to our amazing colleagues whose contributions were essential to the success of Impressions: Julian Jaffe, Bryan Keller, Yun Wang, Brandon Bremen, Kyle Alford, Ron Brown and Shriya Arora.]]></content:encoded></item><item><title>Microsoft Study Finds Relying on AI Kills Your Critical Thinking Skills</title><link>https://slashdot.org/story/25/02/14/2320203/microsoft-study-finds-relying-on-ai-kills-your-critical-thinking-skills?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>BeauHD</author><category>tech</category><pubDate>Sat, 15 Feb 2025 00:45:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[A new study (PDF) from researchers at Microsoft and Carnegie Mellon University found that increased reliance on AI tools leads to a decline in critical thinking skills. Gizmodo reports: The researchers tapped 319 knowledge workers -- a person whose job involves handling data or information -- and asked them to self-report details of how they use generative AI tools in the workplace. The participants were asked to report tasks that they were asked to do, how they used AI tools to complete them, how confident they were in the AI's ability to do the task, their ability to evaluate that output, and how confident they were in their own ability to complete the same task without any AI assistance.
 
Over the course of the study, a pattern revealed itself: the more confident the worker was in the AI's capability to complete the task, the more often they could feel themselves letting their hands off the wheel. The participants reported a "perceived enaction of critical thinking" when they felt like they could rely on the AI tool, presenting the potential for over-reliance on the technology without examination. This was especially true for lower-stakes tasks, the study found, as people tended to be less critical. While it's very human to have your eyes glaze over for a simple task, the researchers warned that this could portend to concerns about "long-term reliance and diminished independent problem-solving."
 
By contrast, when the workers had less confidence in the ability of AI to complete the assigned task, the more they found themselves engaging in their critical thinking skills. In turn, they typically reported more confidence in their ability to evaluate what the AI produced and improve upon it on their own. Another noteworthy finding of the study: users who had access to generative AI tools tended to produce "a less diverse set of outcomes for the same task" compared to those without.]]></content:encoded></item><item><title>AI’s Hallucinations Are Over</title><link>https://hackernoon.com/ais-hallucinations-are-over?source=rss</link><author>Oleksandr Zabashnyi</author><category>tech</category><pubDate>Sat, 15 Feb 2025 00:39:38 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[First of all, let me describe the problem. I am a software developer, and I don't use AI to write code just because of hallucinations. For creating pictures or writing texts they are not so critical, but for the task of writing code, they are overkill. I have identified two subproblems. Firstly, it is difficult to identify the errors made by AI. It is quite easy for a designer as he counts the fingers in the pictures and that's it; the picture is accepted as the result. \
However, I have to deal with the code and seek the mistakes in it. I hate to do it. Secondly, it is the irreproducibility of the result. For example, I tried to write unit tests: the first generated unit test is successful, but the second one is not, even for the same method. This makes working with it impossible.\
Now, about the solution. Our hypothesis was as follows: what if we could assign the corresponding result data to a certain set of input information? And do that at least sometimes during the task-solving process. Would that reduce the number of hallucinations? Oh yes! After thorough research, we have come to the conclusion that the presence of a critical mass of such ‘rigidly fixed’ nodes almost completely removed hallucinations from the output. All that remained was to find the criteria for identifying these correspondences between input and output information and to modify the math apparatus to enable the use of this approach. We called this method the "preset landscape."\
Certainly, our approach has several limitations. First of all, the subject area should imply the existence of only one correct answer for a given set of output data. Fortunately, software development is exactly such an area. The second limitation is that at the stage of landscape formation, the participation of an expert in the subject field is required. In other words, it is impossible to apply the math apparatus to the areas where a human cannot articulate the rules. These limitations greatly narrow the scope of application of our approach. However, its usage in such areas as software development, law, healthcare, and engineering tasks is more than enough.\
To demonstrate the capabilities of the math apparatus, we have developed a plugin for IntelliJ Idea (JetBrains). You can install it and make sure that there are no hallucinations. Here, you can find the instructions.\
While we were working on the plugin, AI services came into vogue, which provides API and you can use them in your own solutions. Therefore, we are planning to make such a platform for software development tasks. We will most likely start with Java. If you have an insight into how this approach can be implemented for lawyers or healthcare professionals - feel free to share.]]></content:encoded></item><item><title>Tabiew 0.8.4 Released</title><link>https://www.reddit.com/r/rust/comments/1ipp72r/tabiew_084_released/</link><author>/u/shshemi</author><category>dev</category><category>rust</category><category>reddit</category><pubDate>Sat, 15 Feb 2025 00:21:42 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Tabiew is a lightweight TUI application that allows users to view and query tabular data files, such as CSV, Parquet, Arrow, Sqlite, and ...📊 Support for CSV, Parquet, JSON, JSONL, Arrow, FWF, and Sqlite🗂️ Multi-table functionalityUI is updated to be more modern and responsiveHorizontally scrollable tablesVisible data frame can be referenced with name "_"Compatibility with older versions of glibcTwo new themes (Tokyo Night and Catppuccin)]]></content:encoded></item><item><title>PIN AI Launches Mobile App Letting You Make Your Own Personalized, Private AI Model</title><link>https://mobile.slashdot.org/story/25/02/14/2227222/pin-ai-launches-mobile-app-letting-you-make-your-own-personalized-private-ai-model?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>BeauHD</author><category>tech</category><pubDate>Sat, 15 Feb 2025 00:02:00 +0000</pubDate><source url="https://slashdot.org/">Slashdot</source><content:encoded><![CDATA[An anonymous reader quotes a report from VentureBeat: A new startup PIN AI (not to be confused with the poorly reviewed hardware device the AI Pin by Humane) has emerged from stealth to launch its first mobile app, which lets a user select an underlying open-source AI model that runs directly on their smartphone (iOS/Apple iPhone and Google Android supported) and remains private and totally customized to their preferences. Built with a decentralized infrastructure that prioritizes privacy, PIN AI aims to challenge big tech's dominance over user data by ensuring that personal AI serves individuals -- not corporate interests. Founded by AI and blockchain experts from Columbia, MIT and Stanford, PIN AI is led by Davide Crapis, Ben Wu and Bill Sun, who bring deep experience in AI research, large-scale data infrastructure and blockchain security. [...]
 
PIN AI introduces an alternative to centralized AI models that collect and monetize user data. Unlike cloud-based AI controlled by large tech firms, PIN AI's personal AI runs locally on user devices, allowing for secure, customized AI experiences without third-party surveillance. At the heart of PIN AI is a user-controlled data bank, which enables individuals to store and manage their personal information while allowing developers access to anonymized, multi-category insights -- ranging from shopping habits to investment strategies. This approach ensures that AI-powered services can benefit from high-quality contextual data without compromising user privacy.
[...]
The new mobile app launched in the U.S. and multiple regions also includes key features such as: - The "God model" (guardian of data): Helps users track how well their AI understands them, ensuring it aligns with their preferences. - Ask PIN AI: A personalized AI assistant capable of handling tasks like financial planning, travel coordination and product recommendations. - Open-source integrations: Users can connect apps like Gmail, social media platforms and financial services to their personal AI, training it to better serve them without exposing data to third parties. - "With our app, you have a personal AI that is your model," Crapis added. "You own the weights, and it's completely private, with privacy-preserving fine-tuning." Davide Crapis, co-founder of PIN AI, told VentureBeat that the app currently supports several open-source AI models, including small versions of DeepSeek and Meta's Llama. "With our app, you have a personal AI that is your model," Crapis added. "You own the weights, and it's completely private, with privacy-preserving fine-tuning."
 
You can sign up for early access to the PIN AI app here.]]></content:encoded></item><item><title>Ctrl-Alt-Speech: Backdoors And Backsteps</title><link>https://www.techdirt.com/2025/02/14/ctrl-alt-speech-backdoors-and-backsteps/</link><author>Mike Masnick</author><category>tech</category><pubDate>Sat, 15 Feb 2025 00:01:03 +0000</pubDate><source url="https://www.techdirt.com/">Techdirt</source><content:encoded><![CDATA[In this week’s round-up of the latest news in online speech, content moderation and internet regulation, Mike and Ben are joined by a group of students from the Media Law and Policy class at the American University School of Communication. Together they cover:This episode is brought to you with financial support from the Future of Online Trust & Safety Fund.]]></content:encoded></item><item><title>Conditional types in TypeScript</title><link>https://2ality.com/2025/02/conditional-types-typescript.html</link><author>Dr. Axel Rauschmayer</author><category>dev</category><category>frontend</category><category>blog</category><pubDate>Sat, 15 Feb 2025 00:00:00 +0000</pubDate><source url="https://feeds.feedburner.com/2ality">Axel Raushmayer</source><content:encoded><![CDATA[In TypeScript, conditional types let us make decisions (think if-then-else expressions) – which is especially useful in generic types. They are also an essential tool for working with union types because they let use “loop” over them. Read on if you want to know how all of that works.]]></content:encoded></item><item><title>Court filings show Meta paused efforts to license books for AI training</title><link>https://techcrunch.com/2025/02/14/court-filings-show-meta-paused-efforts-to-license-books-for-ai-training/</link><author>Kyle Wiggers</author><category>tech</category><pubDate>Fri, 14 Feb 2025 23:35:33 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[New court filings in an AI copyright case against Meta add credence to earlier reports that the company “paused” discussions with book publishers on licensing deals to supply some of its generative AI models with training data. The filings are related to the case Kadrey v. Meta Platforms — one of many such cases winding through […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>Show HN: VimLM – A Local, Offline Coding Assistant for Vim</title><link>https://github.com/JosefAlbers/VimLM</link><author>JosefAlbers</author><category>dev</category><category>hn</category><pubDate>Fri, 14 Feb 2025 23:34:41 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[VimLM is a local, offline coding assistant for Vim. It’s like Copilot but runs entirely on your machine—no APIs, no tracking, no cloud.- Deep Context: Understands your codebase (current file, selections, references).  
- Conversational: Iterate with follow-ups like "Add error handling".  
- Vim-Native: Keybindings like `Ctrl-l` for prompts, `Ctrl-p` to replace code.  
- Inline Commands: `!include` files, `!deploy` code, `!continue` long responses.Perfect for privacy-conscious devs or air-gapped environments.Try it:  
```
pip install vimlm
vimlm
```]]></content:encoded></item><item><title>AI Alexa and AI Siri face bugs and delays</title><link>https://techcrunch.com/2025/02/14/ai-alexa-and-ai-siri-face-bugs-and-delays/</link><author>Maxwell Zeff</author><category>tech</category><pubDate>Fri, 14 Feb 2025 23:24:47 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Amazon and Apple are struggling to put generative AI technology in their digital assistants — Alexa and Siri, respectively — according to a pair of reports that came out on Friday. Amazon hoped to release its new Alexa during an event in New York on February 26. Now Amazon plans to delay the release of […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>A decade later, a decade lost (2024)</title><link>https://meyerweb.com/eric/thoughts/2024/06/07/a-decade-later-a-decade-lost/</link><author>ZeWaka</author><category>hn</category><pubDate>Fri, 14 Feb 2025 23:10:36 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[I woke up this morning about an hour ahead of my alarm, the sky already light, birds calling.  After a few minutes, a brief patter of rain swept across the roof and moved on.I just lay there, not really thinking.  Feeling.  Remembering.Almost sixteen years to the minute before I awoke, my second daughter was born.  Almost ten years to the same minute before, she’d turned six years old, already semi-unconscious, and died not quite twelve hours later.So she won’t be taking her first solo car drive today.  She won’t be celebrating with dinner at her favorite restaurant in the whole world.  She won’t kiss her niece good night or affectionately rag on her siblings.Or maybe she wouldn’t have done any of those things anyway, after a decade of growth and changes and paths taken.  What would she really be like, at sixteen?We will never know.  We can’t even guess.  All of that, everything she might have been, is lost.This afternoon, we’ll visit Rebecca’s grave, and then go to hear her name read in remembrance at one of her very happiest places, Anshe Chesed Fairmount Temple, for the last time.  At the end of the month, the temple will close as part of a merger.  Another loss.A decade ago, I said that I felt the weight of all the years she would never have, and that they might crush me.  Over time, I have come to realize all the things she never saw or did adds to that weight.  Even though it seems like it should be the same weight.  Somehow, it isn’t.I was talking about all of this with a therapist a few days ago, about the time and the losses and their accumulated weight.  I said, “I don’t know how to be okay when I failed my child in the most fundamental way possible.”“You didn’t fail her,” they said gently.“I know that,” I replied. “But I don’t feel it.”A decade, it turns out, does not change that.  I’m not sure now that any stretch of time ever could.]]></content:encoded></item><item><title>Pull Request Testing on Kubernetes: How to Test Locally and on GitHub Workflows</title><link>https://hackernoon.com/pull-request-testing-on-kubernetes-how-to-test-locally-and-on-github-workflows?source=rss</link><author>Nicolas Fränkel</author><category>tech</category><pubDate>Fri, 14 Feb 2025 23:05:57 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[Imagine an organization with the following practices:Runs its CI/CD pipelines with GitHub ActionsRuns its production workload on Kubernetes\
A new engineer manager arrives and asks for the following:On every PR, run integration tests in a Kubernetes cluster similar to the production one.\
In this series of posts, I'll show how you can do it. My plan is the following:This blog post focuses on the app, the basic GitHub workflow setup, and testing both locally and during the workflow run.The second blog post will detail the setup of a Google Kubernetes Engine instance and how to adapt the workflow to use it.Unit Testing vs. Integration TestingIntegration Testing is a strategy to test the collaboration of at least two components.\
I translated it in Object-Oriented Programming as:Integration Testing is a strategy to test the collaboration of at least two classes.Let’s consider the making of a car. Single-class testing is akin to testing each nut and bolt separately. Imagine testing of such components brought no issue to light. Still, it would be very risky to mass manufacture the car without having built a prototype and sent it to a test drive.\
However, technology has evolved since that time.I use the word "technology" very generally, but I have Testcontainers in mind:Unit tests with real dependencies\
  Testcontainers is an open source library for providing throwaway, lightweight instances of databases, message brokers, web browsers, or just about anything that can run in a Docker container.\
In effect, Testcontainers replaces  with "real" dependencies-containerized. It's a real game-changer: instead of painfully writing mocking code to stub dependencies just set them up regularly.\
For example, without Testcontainers, you'd need to provide mocks for your  in tests; with it, you only need to start a database container, and off you go.\
At the time, the cost of having a local Docker daemon in your testing environment offset many benefits. It's not the case anymore, as Docker daemons are available (nearly) everywhere.\
My definition of Integration Testing has changed a bit:Integration Testing is testing that requires significant setup.\
The definition is vague on purpose, as significance has a different meaning depending on the organization, the team, and the individual. Note that Google defines two categories of tests: fast and slow. Their definition is equally vague, meant to adapt to different contexts.In any case, the golden rule still applies: the closer you are to the final environment, the more risks you cover, and the more valuable your tests are. \
If our target production environment is Kubernetes, we will reap the most benefits from running the app on Kubernetes and testing it as a black box. It doesn't mean that white box testing in a more distant environment is not beneficial; it means that the more significant the gap between the testing environment and the target environment, the fewer issues we will uncover.\
For the purposes of this blog post, we will use GitHub as the base testing environment for unit testing and a full-fledged Kubernetes cluster for integration testing. There is no absolute truth regarding what is the best practice™, as contexts vary widely across organizations and even across teams within the same organization. It's up to every engineer to decide within their specific context the ROI of setting up such an environment because the closer you are to production, the more complex and, thus, expensive it will be.Use-case: Application With DatabaseLet's jump into how to test an app that uses a database to store its data. I don't want anything fancy, just solid, standard engineering practices. I'll be using a CRUD(Create Read Update Delete) JVM-based app, but most of the following can easily apply to other stacks as well. The following blog posts will involve less language-specific content.Kotlin, because I love the languageSpring Boot: it's the most widespread framework for JVM-based applicationsMaven-there's nothing elseProject Reactor and coroutines, because it makes things more interestingPostgreSQL-at the moment, it's a very popular database, and it's well-supported by Spring\
If you don't know Flyway, it allows you to track database schemas and data in a code repository and manage changes, known as migrations, between versions. Each migration has a unique version, , v1.0, v1.1, v2.1.2, etc. Flyway tries to apply migration in order. If it has already applied a migration, it skips it. Flyway stores its data in a dedicated table to track the applied migrations.\
This approach is a must-have; Liquibase is an alternative that follows the same principles.\
Spring Boot fully integrates Flyway and Liquibase. When the app starts, the framework will kickstart them. If a pod is killed and restarted, Flyway will first check the migrations table to apply only the one that didn't run previously.\
I don't want to bore you with the app details; you can find the code on GitHub.Per my definition above, unit testing should be easy to set up. With Testcontainers, it is.\
The testing code counts the number of items in a table, inserts a new item, and counts the number of items again. It then checks that:There's one additional item compared to the initial countThat the new item is the one we inserted@SpringBootTest                                                              //1
class VClusterPipelineTest @Autowired constructor(private val repository: ProductRepository) { //2

    @Test
    fun `When inserting a new Product, there should be one more Product in the database and the last inserted Product should be the one inserted`() { //3
        runBlocking {                                                        //4
            val initialCount = repository.count()                            //5
            // The rest of the test
        }
    }
}
Initialize the Spring contextPraise Kotlin for allowing for descriptive function namesRun non-blocking code in a blocking function\
We now need a PostgreSQL database; Testcontainers can provide one for us. However, to avoid conflicts, it will choose a random port until it finds an unused one. We need it to connect to the database, run the Flyway migration, and run the testing code.\
For this reason, we must write a bit of additional code:@Profile("local")                                                              //1
class TestContainerConfig {

    companion object {
        val name = "test"
        val userName = "test"
        val pass = "test"
        val postgres = PostgreSQLContainer<Nothing>("postgres:17.2").apply {   //1
            withDatabaseName(name)
            withUsername(userName)
            withPassword(pass)
            start()
        }
    }
}

class TestContainerInitializer : ApplicationContextInitializer<ConfigurableApplicationContext> {
    override fun initialize(applicationContext: ConfigurableApplicationContext) {
        if (applicationContext.environment.activeProfiles.contains("local")) {
            TestPropertyValues.of(                                             //2
                "spring.r2dbc.url=r2dbc:postgresql://${TestContainerConfig.postgres.host}:${TestContainerConfig.postgres.firstMappedPort}/$name",
                "spring.r2dbc.username=$name",
                "spring.r2dbc.password=$pass",
                "spring.flyway.url=jdbc:postgresql://${TestContainerConfig.postgres.host}:${TestContainerConfig.postgres.firstMappedPort}/$name",
                "spring.flyway.user=$name",
                "spring.flyway.password=$pass"
            ).applyTo(applicationContext.environment)
        }
    }
}
Start the container, but only if the Spring Boot profile  is active.Override the configuration values.\
We need to specify neither the  nor the  if we hacked the  to reuse the R2BC parameters of the same name:spring:
  application:
    name: vcluster-pipeline
  r2dbc:
    username: test
    password: test
    url: r2dbc:postgresql://localhost:8082/flyway-test-db
  flyway:
    user: ${SPRING_R2DBC_USERNAME}                                             #1
    password: ${SPRING_R2DBC_PASSWORD}                                         #1
    url: jdbc:postgresql://localhost:8082/flyway-test-db
Smart hack to DRY configuration further down.\
We also annotate the previous test class to use the initializer:@SpringBootTest
@ContextConfiguration(initializers = [TestContainerInitializer::class])
class VClusterPipelineTest @Autowired constructor(private val repository: ProductRepository) {

    // No change
}
\
Spring Boot offers a couple of options to activate profiles. For local development, we can use a simple JVM property, , mvn test -Dspring.profiles.active=local; in the CI pipeline, we will use environment variables instead.I'll also use Flyway to create the database structure for integration testing. In the scope of this example, the System Under Test will be the entire app; hence, I'll test from the HTTP endpoints. It's end-to-end testing for APIs. The code will test the same behavior, albeit treating the System Under Test as a black box.class VClusterPipelineIT {

    val logger = LoggerFactory.getLogger(this::class.java)

    @Test
    fun `When inserting a new Product, there should be one more Product in the database and the last inserted Product should be the one inserted`() {

        val baseUrl = System.getenv("APP_BASE_URL") ?: "http://localhost:8080" //1

        logger.info("Using base URL: $baseUrl")

        val client = WebTestClient.bindToServer()                              //2
            .baseUrl(baseUrl)
            .build()

        val initialResponse: EntityExchangeResult<List<Product?>?> = client.get() //3
            .uri("/products")
            .exchange()
            .expectStatus().isOk
            .expectBodyList(Product::class.java)
            .returnResult()

        val initialCount = initialResponse.responseBody?.size?.toLong()        //4

        val now = LocalDateTime.now()
        val product = Product(
            id = UUID.randomUUID(),
            name = "My awesome product",
            description = "Really awesome product",
            price = 100.0,
            createdAt = now
        )

        client.post()                                                          //5
            .uri("/products")
            .bodyValue(product)
            .exchange()
            .expectStatus().isOk
            .expectBody(Product::class.java)

        client.get()                                                           //6
            .uri("/products")
            .exchange()
            .expectStatus().isOk
            .expectBodyList(Product::class.java)
            .hasSize((initialCount!! + 1).toInt())
    }
}
Get the deployed app URL.Create a web client that uses the former.Get the initial item list.Get the size; we definitely should offer a count function if there are too many items.Insert a new item and assert everything works out fine.Get the list of items and assert the item count is higher by one.\
Before going further, let's run the tests in a GitHub workflow.I'll assume you're familiar with GitHub workflows. If you aren't, a GitHub workflow is a declarative description of an automated job. A job consists of several steps. GitHub offers several triggers: Manual, scheduled, or depending on an event.\
We want the workflow to run on each Pull Request to verify that tests run as expected.name: Test on PR                                                               #1

on:
  pull_request:
    branches: [ "master" ]                                                     #2
Trigger on a PR to the master branch.\
The first steps are pretty standard:jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install JRE
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven                                                         #1
The  action includes a caching option for build tools. Here, it will cache dependencies across runs, speeding up consecutive runs. Unless you have good reasons not to, I recommend using this option.\
For the same reason, we should cache our built artifacts. While researching for this post, I learned that GitHub discards them across runs and steps in the same run. Hence, we can speed up the runs by caching them explicitly:      - name: Cache build artifacts
        uses: actions/cache@v4                                                 <1>
        with:
          path: target
          key: ${{ runner.os }}-build-${{ github.sha }}                        <2>
          restore-keys:
            ${{ runner.os }}-build                                             <3>
Use the same action that  uses under the hood.Compute the cache key. In our case, the  should be immutable, but this should be how you run matrices across different operating systems.Reuse the cache if it's the same OS.      - name: Run "unit" tests
        run: ./mvnw -B test
        env:
          SPRING_PROFILES_ACTIVE: local                                        <1>
Activate the local profile. The workflow's environment provides a Docker daemon. Hence, Testcontainer successfully downloads and runs the database container.\
At this point, we should run the integration test. Yet, we need the app deployed to run this test. For this, we need available infrastructure.Alternative "Unit testing" on GitHubThe above works perfectly on GitHub, but we can move closer to the deployment setup by leveraging GitHub service containers. Let's migrate PostgreSQL from Testcontainers to a GitHub service container.\
Removing Testcontainers is pretty straightforward: we do not activate the  profile.\
Using GitHub's service container requires an additional section in our workflow:jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GH_PG_USER: testuser                                                     #1
      GH_PG_PASSWORD: testpassword                                             #1
      GH_PG_DB: testdb                                                         #1
    services:
      postgres:
        image: postgres:15
        options: >-                                                            #2
          --health-cmd "pg_isready -U $POSTGRES_USER"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
            - 5432/tcp                                                         #3
        env:
          POSTGRES_USER: ${{ env.GH_PG_USER }}                                 #4
          POSTGRES_PASSWORD: ${{ env.GH_PG_PASSWORD }}                         #4
          POSTGRES_DB: ${{ env.GH_PG_DB }}                                     #4
Define environment variables at the job level to use them across steps. You can use secrets, but in this case, the database instance is not exposed outside the workflow and will be switched off when the latter finishes. Environment variables are good enough to avoid adding unnecessary secrets.Make sure that PostgreSQL works before going further.Assign a random port and map it to the underlying  port.Use the environment variables.\
To run the tests using the above configuration is straightforward.      - name: Run "unit" tests
        run: ./mvnw -B test
        env:
          SPRING_FLYWAY_URL: jdbc:postgresql://localhost:${{ job.services.postgres.ports['5432'] }}/${{ env.GH_PG_DB }} #1
          SPRING_R2DBC_URL: r2dbc:postgresql://localhost:${{ job.services.postgres.ports['5432'] }}/${{ env.GH_PG_DB }} #1
          SPRING_R2DBC_USERNAME: ${{ env.GH_PG_USER }}
          SPRING_R2DBC_PASSWORD: ${{ env.GH_PG_PASSWORD }}
GitHub runs PostgreSQL on a local Docker, so the host is . We can get the random port with the ${{ job.services.postgres.ports['5432'] }} syntax.In this post, we laid the ground for a simple app's unit- and integration-testing, leveraging Testcontainers in the local environment. We then proceeded to automate unit testing via a GitHub workflow with the help of GitHub service containers. In the next post, we will prepare the Kubernetes environment on a Cloud provider infrastructure, build the image, and deploy it to the latter.\
The complete source code for this post can be found on GitHub.Originally published on A Java Geek on February 9th, 2025]]></content:encoded></item><item><title>Kay Hayen: Nuitka this week #16</title><link>https://nuitka.net/posts/nuitka-this-week-16.html</link><author></author><category>dev</category><category>python</category><pubDate>Fri, 14 Feb 2025 23:00:00 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[Hey Nuitka users! This started out as an idea of a weekly update, but
that hasn’t happened, and so we will switch it over to just writing up
when something interesting happens and then push it out relatively
immediately when it happens.Nuitka Onefile Gets More Flexible:  and We’ve got a couple of exciting updates to Nuitka’s onefile mode that
give you more control and flexibility in how you deploy your
applications. These enhancements stem from real-world needs and
demonstrate Nuitka’s commitment to providing powerful and adaptable
solutions.Taking Control of Onefile Unpacking: Onefile mode is fantastic for creating single-file executables, but the
management of the unpacking directory where the application expands has
sometimes been a bit… opaque. Previously, Nuitka would decide whether
to clean up this directory based on whether the path used
runtime-dependent variables. This made sense in theory, but in practice,
it could lead to unexpected behavior and made debugging onefile issues
harder.Now, you have complete control! The new  option
lets you explicitly specify what happens to the unpacking directory:: This is the default behavior. Nuitka
will remove the unpacking directory unless runtime-dependent values
were used in the path specification. This is the same behavior as
previous versions.: The unpacking directory is 
removed and becomes a persistent, cached directory. This is useful
for debugging, inspecting the unpacked files, or if you have a use
case that benefits from persistent caching of the unpacked data. The
files will remain available for subsequent runs.: The unpacking directory 
removed after the program exits.This gives you the power to choose the behavior that best suits your
needs. No more guessing!Relative Paths with Another common request, particularly from users deploying applications
in more restricted environments, was the ability to specify the onefile
unpacking directory  to the executable itself. Previously, you
were limited to absolute paths or paths relative to the user’s temporary
directory space.We’ve introduced a new variable, , that you can use in
the  option. This variable is dynamically
replaced at runtime with the full path to the directory containing the
onefile executable.This would create a directory named  the same
directory as the  (or  on Linux/macOS)
and unpack the application there. This is perfect for creating truly
self-contained applications where all data and temporary files reside
alongside the executable.Nuitka Commercial and Open SourceThese features, like many enhancements to Nuitka, originated from a
request by a Nuitka commercial customer. This highlights the close
relationship between the commercial offerings and the open-source core.
While commercial support helps drive development and ensures the
long-term sustainability of Nuitka, the vast majority of features are
made freely available to all users.This change will be in 2.7 and is currentlyWe encourage you to try out these new features and let us know what you
think! As always, bug reports, feature requests, and contributions are
welcome on GitHub.]]></content:encoded></item><item><title>Figure AI is in talks to raise $1.5B at 15x its last valuation</title><link>https://techcrunch.com/2025/02/14/figure-ai-is-in-talks-to-raise-1-5b-at-15x-its-last-valuation/</link><author>Charles Rollet</author><category>tech</category><pubDate>Fri, 14 Feb 2025 22:51:49 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Robotics startup Figure AI is raising $1.5 billion at a $39.5 billion valuation, a whopping 15 times higher than before.© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>We were wrong about GPUs</title><link>https://fly.io/blog/wrong-about-gpu/</link><author>mxstbr</author><category>hn</category><pubDate>Fri, 14 Feb 2025 22:36:31 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[We’re building a public cloud, on hardware we own. We raised money to do that, and to place some bets; one of them: GPU-enabling our customers. A progress report: GPUs aren’t going anywhere, but: GPUs aren’t going anywhere.A Fly Machine is a Docker/OCI container running inside a hardware-virtualized virtual machine somewhere on our global fleet of bare-metal worker servers. A GPU Machine is a Fly Machine with a hardware-mapped Nvidia GPU. It’s a Fly Machine that can do fast CUDA.Like everybody else in our industry, we were right about the importance of AI/ML. If anything, we underestimated its importance. But the product we came up with probably doesn’t fit the moment. It’s a bet that doesn’t feel like it’s paying off.If you’re using Fly GPU Machines, don’t freak out; we’re not getting rid of them. But if you’re waiting for us to do something bigger with them, a v2 of the product, you’ll probably be waiting awhile.GPU Machines were not a small project for us. Fly Machines run on an idiosyncratically small hypervisor (normally Firecracker, but for GPU Machines Intel’s Cloud Hypervisor, a very similar Rust codebase that supports PCI passthrough). The Nvidia ecosystem is not geared to supporting micro-VM hypervisors.GPUs terrified our security team. A GPU is just about the worst case hardware peripheral: intense multi-directional direct memory transfers(not even bidirectional: in common configurations, GPUs talk to each other)with arbitrary, end-user controlled computation, all operating outside our normal security boundary.We did a couple expensive things to mitigate the risk. We shipped GPUs on dedicated server hardware, so that GPU- and non-GPU workloads weren’t mixed. Because of that, the only reason for a Fly Machine to be scheduled on a GPU machine was that it needed a PCI BDF for an Nvidia GPU, and there’s a limited number of those available on any box. Those GPU servers were drastically less utilized and thus less cost-effective than our ordinary servers.We funded two very large security assessments, from Atredis and Tetrel, to evaluate our GPU deployment. Matt Braun is writing up those assessments now. They were not cheap, and they took time.Security wasn’t directly the biggest cost we had to deal with, but it was an indirect cause for a subtle reason.We could have shipped GPUs very quickly by doing what Nvidia recommended: standing up a standard K8s cluster to schedule GPU jobs on. Had we taken that path, and let our GPU users share a single Linux kernel, we’d have been on Nvidia’s driver happy-path.Alternatively, we could have used a conventional hypervisor. Nvidia suggested VMware (heh). But they could have gotten things working had we used QEMU. We like QEMU fine, and could have talked ourselves into a security story for it, but the whole point of Fly Machines is that they take milliseconds to start. We could not have offered our desired Developer Experience on the Nvidia happy-path.Instead, we burned months trying (and ultimately failing) to get Nvidia’s host drivers working to map virtualized GPUs into Intel Cloud Hypervisor. At one point, we hex-edited the closed-source drivers to trick them into thinking our hypervisor was QEMU.I’m not sure any of this really mattered in the end. There’s a segment of the market we weren’t ever really able to explore because Nvidia’s driver support kept us from thin-slicing GPUs. We’d have been able to put together a really cheap offering for developers if we hadn’t run up against that, and developers love “cheap”, but I can’t prove that those customers are real.On the other hand, we’re committed to delivering the Fly Machine DX for GPU workloads. Beyond the PCI/IOMMU drama, just getting an entire hardware GPU working in a Fly Machine was a lift. We needed Fly Machines that would come up with the right Nvidia drivers; our stack was built assuming that the customer’s OCI container almost entirely defined the root filesystem for a Machine. We had to engineer around that in our  orchestrator. And almost everything people want to do with GPUs involves efficiently grabbing huge files full of model weights. Also annoying!And, of course, we bought GPUs. A lot of GPUs. Expensive GPUs.The biggest problem: developers don’t want GPUs. They don’t even want AI/ML models. They want LLMs.  may have smart, fussy opinions on how to get their models loaded with CUDA, and what the best GPU is. But  don’t care about any of that. When a software developer shipping an app comes looking for a way for their app to deliver prompts to an LLM, you can’t just give them a GPU.For those developers, who probably make up most of the market, it doesn’t seem plausible for an insurgent public cloud to compete with OpenAI and Anthropic. Their APIs are fast enough, and developers thinking about performance in terms of “tokens per second” aren’t counting milliseconds.(you should all feel sympathy for us)This makes us sad because we really like the point in the solution space we found. Developers shipping apps on Amazon will outsource to other public clouds to get cost-effective access to GPUs. But then they’ll faceplant trying to handle data and model weights, backhauling gigabytes (at significant expense) from S3. We have app servers, GPUs, and object storage all under the same top-of-rack switch. But inference latency just doesn’t seem to matter yet, so the market doesn’t care.Past that, and just considering the system engineers who do care about GPUs rather than LLMs: the hardware product/market fit here is really rough.People doing serious AI work want galactically huge amounts of GPU compute. A whole enterprise A100 is a compromise position for them; they want an SXM cluster of H100s.Near as we can tell, MIG gives you a UUID to talk to the host driver, not a PCI device.We think there’s probably a market for users doing lightweight ML work getting tiny GPUs. This is what Nvidia MIG does, slicing a big GPU into arbitrarily small virtual GPUs. But for fully-virtualized workloads, it’s not baked; we can’t use it. And I’m not sure how many of those customers there are, or whether we’d get the density of customers per server that we need.That leaves the L40S customers. There are a bunch of these! We dropped L40S prices last year, not because we were sour on GPUs but because they’re the one part we have in our inventory people seem to get a lot of use out of. We’re happy with them. But they’re just another kind of compute that some apps need; they’re not a driver of our core business. They’re not the GPU bet paying off.Really, all of this is just a long way of saying that for most software developers, “AI-enabling” their app is best done with API calls to things like Claude and GPT, Replicate and RunPod.A very useful way to look at a startup is that it’s a race to learn stuff. So, what’s our report card?First off, when we embarked down this path in 2022, we were (like many other companies) operating in a sort of phlogiston era of AI/ML. The industry attention to AI had not yet collapsed around a small number of foundational LLM models. We expected there to be a diversity of  models, the world Elixir Bumblebee looks forward to, where people pull different AI workloads off the shelf the same way they do Ruby gems.But Cursor happened, and, as they say, how are you going to keep ‘em down on the farm once they’ve seen Karl Hungus? It seems much clearer where things are heading.GPUs were a test of a Fly.io company credo: as we think about core features, we design for 10,000 developers, not for 5-6. It took a minute, but the credo wins here: GPU workloads for the 10,001st developer are a niche thing.Another way to look at a startup is as a series of bets. We put a lot of chips down here. But the buy-in for this tournament gave us a lot of chips to play with. Never making a big bet of any sort isn’t a winning strategy. I’d rather we’d flopped the nut straight, but I think going in on this hand was the right call.A really important thing to keep in mind here, and something I think a lot of startup thinkers sleep on, is the extent to which this bet involved acquiring assets. Obviously, some of our costs here aren’t recoverable. But the hardware parts that aren’t generating revenue will ultimately get liquidated; like with our portfolio of IPv4 addresses, I’m even more comfortable making bets backed by tradable assets with durable value.In the end, I don’t think GPU Fly Machines were going to be a hit for us no matter what we did. Because of that, one thing I’m very happy about is that we didn’t compromise the rest of the product for them. Security concerns slowed us down to where we probably learned what we needed to learn a couple months later than we could have otherwise, but we’re scaling back our GPU ambitions without having sacrificed any of our isolation story, and, ironically, GPUs  are making that story a lot more important. The same thing goes for our Fly Machine developer experience.We started this company building a Javascript runtime for edge computing. We learned that our customers didn’t want a new Javascript runtime; they just wanted their native code to work. We shipped containers, and no convincing was needed. We were wrong about Javascript edge functions, and I think we were wrong about GPUs. That’s usually how we figure out the right answers:  by being wrong about a lot of stuff.]]></content:encoded></item><item><title>Django Weblog: DjangoCongress JP 2025 Announcement and Live Streaming!</title><link>https://www.djangoproject.com/weblog/2025/feb/14/djangocongress-jp-2025-announcement-and-livestream/</link><author></author><category>dev</category><category>python</category><pubDate>Fri, 14 Feb 2025 22:12:10 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[It will be streamed on the following YouTube Live channels:This year there will be talks not only about Django, but also about FastAPI and other asynchronous web topics. There will also be talks on Django core development, Django Software Foundation (DSF) governance, and other topics from around the world. Simultaneous translation will be provided in both English and Japanese.The Async Django ORM: Where Is it?Speed at Scale for Django Web ApplicationsImplementing Agentic AI Solutions in Django from scratchDiving into DSF governance: past, present and futureGetting Knowledge from Django Hits: Using Grafana and PrometheusCulture Eats Strategy for Breakfast: Why Psychological Safety Matters in Open SourceµDjango. The next step in the evolution of asynchronous microservices technology.A public viewing of the event will also be held in Tokyo. A reception will also be held, so please check the following connpass page if you plan to attend.]]></content:encoded></item><item><title>SailPoint’s dull debut did little to loosen the stuck IPO window, expert says</title><link>https://techcrunch.com/2025/02/14/sailpoints-dull-debut-did-little-to-loosen-the-stuck-ipo-window-expert-says/</link><author>Julie Bort</author><category>tech</category><pubDate>Fri, 14 Feb 2025 22:00:53 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[SailPoint’s IPO on Thursday was a disappointment for anyone hoping it would indicate that tech IPOs are hot again. The first day’s trading ended below the $23 initial price. The stock fared a tad better Friday, closing at over $24. But that’s nothing close to the big bang companies and VCs hope for. For instance, […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>Eli Bendersky: Decorator JITs - Python as a DSL</title><link>https://eli.thegreenplace.net/2025/decorator-jits-python-as-a-dsl/</link><author></author><category>dev</category><category>python</category><pubDate>Fri, 14 Feb 2025 21:49:31 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[Spend enough time looking at Python programs and packages for machine learning,
and you'll notice that the "JIT decorator" pattern is pretty popular. For
example, this JAX snippet:In both cases, the function decorated with  doesn't get executed by the
Python interpreter in the normal sense. Instead, the code inside is more like
a DSL (Domain Specific Language) processed by a special purpose compiler built
into the library (JAX or Triton). Another way to think about it is that Python
is used as a  to describe computations.In this post I will describe some implementation strategies used by libraries to
make this possible.Preface - where we're goingThe goal is to explain how different kinds of  decorators work by using
a simplified, educational example that implements several approaches from
scratch. All the approaches featured in this post will be using this flow: Expr IR --> LLVM IR --> Execution" /> Expr IR --> LLVM IR --> Execution" class="align-center" src="https://eli.thegreenplace.net/images/2025/decjit-python.png" />
These are the steps that happen when a Python function wrapped with
our educational  decorator is called:The function is translated to an "expression IR" - .This expression IR is converted to LLVM IR.Finally, the LLVM IR is JIT-executed.First, let's look at the  IR. Here we'll make a big simplification -
only supporting functions that define a single expression, e.g.:Naturally, this can be easily generalized - after all, LLVM IR can be used to
express fully general computations.Here are the  data structures:To convert an  into LLVM IR and JIT-execute it, we'll use this function:It uses the  class to actually generate LLVM IR from .
This process is straightforward and covered extensively in the resources I
linked to earlier; take a look at the full code here.My goal with this architecture is to make things simple, but .
On one hand - there are several simplifications: only single expressions are
supported, very limited set of operators, etc. It's very easy to extend this!
On the other hand, we could have just trivially evaluated the 
without resorting to LLVM IR; I do want to show a more complete compilation
pipeline, though, to demonstrate that an arbitrary amount of complexity can
be hidden behind these simple interfaces.With these building blocks in hand, we can review the strategies used by
 decorators to convert Python functions into s.Python comes with powerful code reflection and introspection capabilities out
of the box. Here's the  decorator:This is a standard Python decorator. It takes a function and returns another
function that will be used in its place ( ensures that
function attributes like the name and docstring of the wrapper match the
wrapped function).After  is applied to , what  holds is the
wrapper. When  is called, the wrapper is invoked with
.The wrapper obtains the AST of the wrapped function, and then uses
 to convert this AST into an :When  finishes visiting the AST it's given, its
 field will contain the  representing the function's
return value. The wrapper then invokes  with this .Note how our decorator interjects into the regular Python execution process.
When  is called, instead of the standard Python compilation and
execution process (code is compiled into bytecode, which is then executed
by the VM), we translate its code to our own representation and emit LLVM from
it, and then JIT execute the LLVM IR. While it seems kinda pointless in this
artificial example, in reality this means we can execute the function's code
in any way we like.AST JIT case study: TritonThis approach is almost exactly how the Triton language works. The body of a
function decorated with  gets parsed to a Python AST, which then
- through a series of internal IRs - ends up in LLVM IR; this in turn is lowered
to PTX by the
NVPTX LLVM backend.
Then, the code runs on a GPU using a standard CUDA pipeline.Naturally, the subset of Python that can be compiled down to a GPU is limited;
but it's sufficient to run performant kernels, in a language that's much
friendlier than CUDA and - more importantly - lives in the same file with the
"host" part written in regular Python. For example, if you want testing and
debugging, you can run Triton in "interpreter mode" which will just run the
same kernels locally on a CPU.Note that Triton lets us import names from the  package
and use them inside kernels; these serve as the  for the language
- special calls the compiler handles directly.Python is a fairly complicated language with  of features. Therefore,
if our JIT has to support some large portion of Python semantics, it may make
sense to leverage more of Python's own compiler. Concretely, we can have it
compile the wrapped function all the way to bytecode,
and start our translation from there.Here's the  decorator that does just this :The Python VM is a stack machine; so we emulate a stack to convert the
function's bytecode to  IR (a bit like an RPN evaluator).
As before, we then use our  utility function to lower
 to LLVM IR and JIT execute it.Using this JIT is as simple as the previous one - just swap 
for :Bytecode JIT case study: NumbaNumba is a compiler for Python itself. The idea
is that you can speed up specific functions in your code by slapping a
 decorator on them. What happens next is similar in spirit to
our simple , but of course much more complicated because it
supports a very large portion of Python semantics.Numba uses the Python compiler to emit bytecode, just as we did; it then
converts it into its own IR, and then to LLVM using .By starting with the bytecode, Numba makes its life easier (no need to rewrite
the entire Python compiler). On the other hand, it also makes some analyses
, because by the time we're in bytecode, a lot of semantic information
existing in higher-level representations is lost. For example, Numba has to
sweat a bit to recover control flow information from the bytecode (by
running it through a special interpreter first).The two approaches we've seen so far are similar in many ways - both rely on
Python's introspection capabilities to compile the source code of the JIT-ed
function to some extent (one to AST, the other all the way to bytecode), and
then work on this lowered representation.The tracing strategy is very different. It doesn't analyze the source code of
the wrapped function at all - instead, it  its execution by means of
specially-boxed arguments, leveraging overloaded operators and functions, and
then works on the generated trace.The code implementing this for our smile demo is surprisingly compact:Each runtime argument of the wrapped function is assigned a , and
that is placed in a , a placeholder class which lets us
do operator overloading:The remaining key function is :To understand how this works, consider this trivial example:After the decorated function is defined,  holds the wrapper function
defined inside . When  is called, the wrapper runs:For each argument of  itself (that is  and ), it creates
a new  holding a . This denotes a named variable in
the  IR.It then calls the wrapped function, passing it the boxes as runtime
parameters.When (the wrapped)  runs, it invokes . This is caught by the overloaded
 operator of , and it creates a new  with
the s representing  and  as children. This
 is then returned .The wrapper unboxes the returned  and passes it to
 to emit LLVM IR from it and JIT execute it with the
actual runtime arguments of the call: .This might be a little mind-bending at first, because there are two different
executions that happen:The first is calling the wrapped  function itself, letting the Python
interpreter run it as usual, but with special arguments that build up the IR
instead of doing any computations. This is the .The second is lowering this IR our tracing step built into LLVM IR and then
JIT executing it with the actual runtime argument values ; this is
the .This tracing approach has some interesting characteristics. Since we don't
have to analyze the source of the wrapped functions but only trace through
the execution, we can "magically" support a much richer set of programs, e.g.:This  with our basic . Since Python variables are
placeholders (references) for values, our tracing step is oblivious to them - it
follows the flow of values. Another example:This also just works! The created  will be a long chain of 
additions of 's runtime values through the loop, added to the 
for .This last example also leads us to a limitation of the tracing approach; the
loop cannot be  - it cannot depend on the function's arguments,
because the tracing step has no concept of runtime values and wouldn't know
how many iterations to run through; or at least, it doesn't know this unless
we want to perform the tracing run for every runtime execution .Tracing JIT case study: JAXThe JAX ML framework uses a tracing
approach very similar to the one described here. The first code sample in this
post shows the JAX notation. JAX cleverly wraps Numpy with its own version which
is traced (similar to our , but JAX calls these boxes "tracers"),
letting you write regular-feeling Numpy code that can be JIT optimized and
executed on accelerators like GPUs and TPUs via XLA. JAX's tracer builds up an underlying IR (called
jaxpr) which can then be
emitted to XLA ops and passed to XLA for further lowering and execution.For a fairly deep overview of how JAX works, I recommend reading the
autodidax doc.As mentioned earlier, JAX has some limitations
with things like data-dependent control flow in native Python. This won't work,
because there's control flow
that depends on a runtime value ():When  is executed, JAX will throw an exception, saying something
like:
This concrete value was not available in Python because it depends on the
value of the argument count.As a remedy, JAX has its
own built-in intrinsics from the jax.lax package.
Here's the example rewritten in a way that actually works: (and many other built-ins in the  package) is something JAX
can trace through, generating a corresponding XLA operation (XLA has support for
While loops, to which this
 can be lowered).The tracing approach has clear benefits for JAX as well; because it only cares
about the flow of values, it can handle arbitrarily complicated Python code,
as long as the flow of values can be traced. Just like the local variables and
data-independent loops shown earlier, but also things like closures. This makes
meta-programming and templating easy .The full code for this post is available on GitHub.]]></content:encoded></item><item><title>Trump’s DOJ Corruption Laid Bare… By His Own Conservative Prosecutors</title><link>https://www.techdirt.com/2025/02/14/trumps-doj-corruption-laid-bare-by-his-own-conservative-prosecutors/</link><author>Mike Masnick</author><category>tech</category><pubDate>Fri, 14 Feb 2025 21:49:29 +0000</pubDate><source url="https://www.techdirt.com/">Techdirt</source><content:encoded><![CDATA[ make sure you read the update at the end of this story.Here’s a fun thing about corruption investigations: Usually when prosecutors uncover one quid pro quo, they don’t resolve it by offering an even bigger quid pro quo. And yet, that appears to be exactly what’s happening with NYC Mayor Eric Adams, who was indicted last fall for allegedly trading favors with Turkish officials, and is now watching those charges evaporate in exchange for helping the Trump administration with its immigration agenda.The twist — and there’s always a twist — is that the people most effectively pointing out this corruption aren’t the usual suspects. Instead, it’s coming from a bunch of dyed-in-the-wool conservative prosecutors at SDNY who are resigning en masse rather than participate in what they see as a perversion of justice. When the Federalist Society crowd starts quitting over corruption, you know something interesting is happening.The apparent corruption here isn’t just brazen — it’s documented in black and white. The Justice Department’s order to drop the case doesn’t even pretend to assess the merits of the charges. Instead, Acting Deputy Attorney General Emil Bove explicitly tied the dismissal to Adams’ willingness to assist with federal deportation efforts — a textbook example of weaponizing prosecutorial discretion for political ends.Even more disturbing is the mechanism: the dismissal is “without prejudice,” meaning charges could be refiled at any time. This isn’t just prosecutorial discretion — it’s prosecutorial extortion. The Trump administration has effectively created a sword of Damocles to hang over Adams’ head, ensuring his continued compliance with their immigration agenda. The message is clear: step out of line, and those charges might suddenly become relevant again. It’s the kind of institutional corruption that would make a banana republic blush.It means that Adams’ personal freedom now outweighs the best interests of the people of New York City.The system’s response to this corruption has been revealing. For several days after the initial order, an unusual silence descended over the Southern District office — a silence that spoke volumes about the internal struggle taking place. Then came something remarkable: a scathing letter from Acting US Attorney Danielle Sassoon to Attorney General Pam Bondi. Sassoon — a Federalist Society stalwart and former Scalia clerk who’s about as far from a “progressive prosecutor” as you can get — laid bare the rot at the core of this decision in a document that reads like a conservative legal scholar’s manifesto against institutional corruption.Because the law does not support a dismissal, and because I am confident that Adams has committed the crimes with which he is charged, I cannot agree to seek a dismissal driven by improper considerations. As Justice Robert Jackson explained, “the prosecutor at his best is one of the most beneficent forces in our society, when he acts from malice or other base motives, he is one of the worst.” The Federal Prosecutor, 24 J. Am. Jud. Soc’y 18 (“This authority has been granted by people who really wanted the right thing done—wanted crime eliminated— but also wanted the best in our American traditions preserved. “). I understand my duty as a prosecutor to mean enforcing the law impartially, and that includes prosecuting a validly returned indictment regardless whether its dismissal would be politically advantageous, to the defendant or to those who appointed me. A federal prosecutor “is the representative not of an ordinary party to a controversy, but of a sovereignty whose obligation to govern impartially is as compelling as its obligation to govern at all.” Berger v. United States, 295 U.S. 78, 88 (1935).For the reasons explained above, I do not believe there are reasonable arguments in support of a Rule 48(a) motion to dismiss a case that is well supported by the evidence and the law. I understand that Mr. Bove disagrees, and I am mindful of your recent order reiterating prosecutors’ duty to make good-faith arguments in support of the Executive Branch’s positions. See Feb. 5, 2025 Mem. “General Policy Regarding Zealous Advocacy on Behalf of the United States.” But because I do not see any good-faith basis for the proposed position, I cannot make such arguments consistent with my duty of candor. N.Y.R.P.C.3.3; id. cmt. 2 (“A lawyer acting as an advocate in an adjudicative proceeding has an obligation to present the client’s case with persuasive force. Performance of that duty while maintaining confidences of the client, however, is qualified by the advocate’s duty of candor to the tribunal. ” ).In particular, the rationale given by Mr. Bove—an exchange between a criminal defendant and the Department of Justice akin to the Bout exchange with Russia— is, as explained above, a bargain that a prosecutor should not make. Moreover, dismissing without prejudice and with the express option of again indicting Adams in the future creates obvious ethical problems, by implicitly threatening future prosecution if Adams’s cooperation with enforcing the immigration laws proves unsatisfactory to the Department. See In re Christoff, 690 N.E.2d 1135 (Ind. 1997) (disciplining prosecutor for threatening to renew a dormant criminal investigation against a potential candidate for public office in order to dissuade the candidate from running); Bruce A. Green & Rebecca Roiphe, Who Should Police Politicization of the DOJ?, 35 Notre Dame J.L. Ethics & Pub. Pol’y 671, 681 (2021) (noting that the Arizona Supreme Court disbarred the elected chief prosecutor of Maricopa County, Arizona, and his deputy, in part, for misusing their power to advance the chief prosecutor’s partisan political interests) . Finally, given the highly generalized accusations of weaponization, weighed against the strength of the evidence against Adams, a court will likely question whether that basis is pretextual. See, e.g. , United States v. Greater Blouse, Skirt & Neckwear Contractors, 228 F. Supp. 483, 487 (S.D.N.Y. 1964)(courts “ should be satisfied that the reasons advanced for the proposed dismissal are substantial and the real grounds upon which the application is based”)I remain baffled by the rushed and superficial process by which this decision was reached, in seeming collaboration with Adams’s counsel and without my direct input on the ultimate stated rationales for dismissal. Mr. Bove admonished me to be mindful of my obligation to zealously defend the interests of the United States and to advance good-faith arguments on behalf of the Administration. I hope you share my view that soliciting and considering the concerns of the U.S. Attorney overseeing the case serves rather than hinders that goal, and that we can find time to meet.But wait, it gets better! There’s a footnote in Sassoon’s letter that tells you everything you need to know about how modern corruption works. The old-school way was to have your shady meetings in smoke-filled back rooms. The new way, apparently, is to have them in official conference rooms while actively preventing anyone from taking notes:I attended a meeting on January 31, 2025, with Mr. Bove, Adams’s counsel, and members of my office. Adams’s attorneys repeatedly urged what amounted to a quid pro quo, indicating that Adams would be in a position to assist with the Department’s enforcement priorities only if the indictment were dismissed. Mr. Bove admonished a member of my team who took notes during that meeting and directed the collection of those notes at the meeting’s conclusionNothing quite says you know you’re engaging in some shady ass shit like demanding you collect the notes of anyone in attendance.What makes this story particularly significant is who’s blowing the whistle. Sassoon isn’t some “woke prosecutor” that the MAGA world can easily dismiss. She’s a card-carrying member of the conservative legal establishment who, until this week, was seen as a rising star in those circles. Her willingness to sacrifice her standing in that world to uphold basic constitutional principles reveals just how far the corruption has spread — and perhaps offers a glimmer of hope that some institutional guardrails still hold.Sassoon’s stand has triggered a cascade of resignations within SDNY, with seven prosecutors (and counting) choosing to walk away rather than participate in this corruption of justice. The latest resignation letter, a scorching indictment from lead prosecutor Hagan Scotten, is particularly noteworthy. Scotten — who clerked for both Justices Roberts and Kavanaugh and explicitly states his support for the Trump administration — makes it clear that this isn’t about politics; it’s about fundamental principles of justice being trampled for political gain.There is a tradition in public service of resigning in a last-ditch effort to head off a serious mistake. Some will view the mistake you are committing here in the light of their generally negative views of the new Administration. I do not share those views. I can even understand how a Chief Executive whose background is in business and politics might see the contemplated dismissal-with-leverage as a good, if distasteful, deal. But any assistant U.S. attorney would know that our laws and traditions do not allow using the prosecutorial power to influence other citizens, much less elected officials, in this way.If no lawyer within earshot of the President is willing to give him that advice, then I expect you will eventually find someone who is enough of a fool, or enough of a coward, to file your motion. But it was never going to be me.Scotten’s prediction proved grimly prophetic. As reported just hours ago, Bove and Bondi found their willing executioner — though the circumstances reveal yet another layer of institutional corruption:The prosecutor acquiesced to file the motion in an attempt to spare other career staff from potentially being fired by Emil Bove, the acting US deputy attorney general and former personal lawyer to Trump, sources briefed on the matter told Reuters. The news agency named the lawyer as Ed Sullivan, a veteran career prosecutor, who agreed to alleviate pressure on his colleagues in the department’s public integrity section of 30 attorneys, two sources said, after his team was given an hour by Bove to decide between them who would file the motion.“This is not a capitulation – this is a coercion,” one of the people briefed on the meeting later told Reuters. “That person, in my mind, is a hero.” The whole section had reportedly discussed resigning en masse.The cruel irony of forcing the Public Integrity Section to compromise its own integrity isn’t lost on anyone. This is how institutions die — not with a bang, but with an ultimatum.There’s a special kind of institutional poetry here: The Public Integrity Section was given an hour to decide who would compromise their integrity. And someone did, not out of cowardice or foolishness, but to protect their colleagues. “A hero,” his colleague called him, and maybe that’s right. But it’s the kind of heroism that only exists in broken systems.The NY Times has revealed even more disturbing details about the behind-the-scenes machinations. In what reads like a playbook for corrupting justice, Bove apparently coached Adams’ legal team (including Alex Spiro, better known as Elon Musk’s go-to counsel) in a wink-wink-nudge-nudge fashion on exactly what political commitments would make the charges disappear.During the meeting, Mr. Bove signaled that the decision about whether to dismiss the case had nothing to do with its legal merits.Instead, Mr. Bove said he was interested in whether the case was hindering Mr. Adams’s leadership, particularly with regard to the city’s ability to cooperate with the federal government on Mr. Trump’s crackdown on illegal immigration.Mr. Bove also said he was interested in whether the case, brought by the former U.S. attorney, Damian Williams, was a politically motivated prosecution meant to hurt Mr. Adams’s re-election prospects.In her letter to Ms. Bondi, Ms. Sassoon said that she was “baffled by the rushed and superficial process by which this decision was reached, in seeming collaboration with Adams’s counsel and without my direct input on the ultimate stated rationales for dismissal.”There’s something almost elegant about it, in a horrifying sort of way. The Justice Department has managed to transform a corruption prosecution into what amounts to a compliance manual for corruption. It’s like they’ve created a template: “Here’s how to trade criminal charges for political favors while maintaining plausible deniability.” And the really wild part? This is all happening after years of the MAGA world screaming about supposed “lawfare” against conservatives. Turns out they weren’t complaining about weaponized justice — they were planning how to do it themselves.History rhymes: While mass resignations of principled lawyers helped topple Nixon’s presidency, in Trump’s second term they’ve become just another item in the daily digest of institutional erosion. The difference this time? It’s not the usual suspects sounding the alarm. Instead, it’s career conservatives — products of the Federalist Society pipeline — who are putting their careers on the line to preserve what’s left of prosecutorial independence.As we’ve previously discussed, any path through this constitutional crisis requires principled conservatives to find their voice. The fact that it’s taking career prosecutors to do what elected Republicans won’t speaks volumes about where the real courage in conservative circles resides.The question now isn’t just whether our institutions can survive this assault, but whether these acts of principled resistance can inspire others before the machinery of justice is fully converted into a tool of political control. The American experiment has survived previous challenges through the courage of individuals willing to place principle above party. We’re about to find out if enough of those individuals still exist. Incredibly, that report that a prosecutor had agreed to file the dismissal turned out to not be accurate. Many hours later, after no such filing was actually made a few very bizarre things happened. First, Emil Bove filed a notice of appearance in the case. That is… not normal.Finally, the “nolle prosequi” (a notice saying “we no longer want to prosecute”) was filed. But even the way it was filed is weird and somewhat unprecedented. Two lawyers, including Ed Sullivan (who was mentioned above as effectively agreeing to be the fool to protect his coworkers) signed , but they did not sign the final statement. Instead, there was a further “order” from the DOJ, signed by Bove alone, telling the Court to effectively dismiss the case: Even the language here is bizarre. The prosecutors don’t get to “direct” the Court to do anything. That’s likely why Bacon and Sullivan signed the part about “respectfully requests” that the Court issue an order. But Bove leaps in, acting like he gets to order around the judge, and separately signs that part.What will be interesting now, is to see what Judge Dale Ho does.]]></content:encoded></item><item><title>The hardest working font in Manhattan</title><link>https://aresluna.org/the-hardest-working-font-in-manhattan/</link><author>robinhouston</author><category>hn</category><pubDate>Fri, 14 Feb 2025 21:45:49 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[
		In 2007, on my first trip to New York City, I grabbed a brand-new DSLR camera and photographed all the fonts I was supposed to love. I admired American Typewriter in all of the I <3 NYC logos, watched Akzidenz Grotesk and Helvetica fighting over the subway signs, and even caught an occasional appearance of the flawlessly-named Gotham, still a year before it skyrocketed in popularity via Barack Obama’s first campaign. 
	
		But there was one font I didn’t even notice, even though it was everywhere around me.
			
		Last year in New York, I walked over 100 miles and took thousands of photos of one and one font only.
			
		The font’s name is Gorton.
			
		It’s hard to believe today that there was a time before I knew of Gorton and all its quirks and mysteries. The first time I realized the font even existed was some time in 2017, when I was researching for my book about the history of typing. 
			
		Many keyboards, especially older ones, sported a particular distinctive font on their keycaps. It was unusually square in proportions, and a weird mélange of “mechanical” and “childish.”
			 
		The more I looked at it, the more I realized how bizarre and amateurish it was. The G always felt like it was about to roll away on its side. There was a goofy wavy hook sticking out of Q. P and R were often too wide. & and @ symbols would be laughed away in a type crit, and the endings of C felt like grabbing something next to it – a beginning of a ligature that never came.
			
		The strangeness extended to the digits. There was a top-flatted 3 resembling a Cyrillic letter, 7 sloping down in a unique way, a very geometric 4, an unusual – perhaps even naïve – symmetry between 6 and 9, and a conflation of O with 0 that would be a fireable offense elsewhere.
				
		Looking at just a few keyboards, it was also obvious that it wasn’t just one rigid font. There were always variations, sometimes even on one keyboard. 0 came square, dotted, or slashed. The usually very narrow letter I sometimes sported serifs. The R and the 6 moved their middles higher or lower. There also seemed to be a narrower version of the font, deployed when a keycap needed a word and not just a letter. (Lowercase letters existed too, but not very often.) 
			
		My first thought was: What a mess. Is this how “grotesque” fonts got their name?
			
		Then, the second thought: I kind of like it.
	The most distinctive letterforms of Gorton		
		But what font was it? What The Font website posited TT Rounds, Identifont suggested it could be Divulge, my early guess was DIN Rounded or something related to road signage. Whatever it was, a flat R clearly separated it from Helvetica, and the shapes were not as round as even the un-rounded Gotham’s.
			
		A few places for keyboard nerds referred to the font as “Gorton,” but that phrase yielded zero results anywhere I typically looked for fonts I could download and install.
					
		I originally thought this had to do with how keys were made. Only in newer keyboards are the letters printed on top of the keys, or charred from their surface by a laser. In older ones – those from the early 1960s laboratory computers, or the 1980s microcomputers – the way every key was constructed was by first molding the letter from plastic of one color, and then grabbing a different plastic and molding the key around the letter. A Gorton letter was as physical as the key itself. It made the keys virtually indestructible – the legend could not wear off any more than its key – and I imagined required some specialized keyboard-making machinery that came with the “keyboard font” already there.
	
		An example of a “double-shot” key from above and from below
				
		But then, I started seeing Gorton in other places.
						
		Hours of looking at close-ups of keys made me sensitive to the peculiar shapes of some of its letters. No other font had a Q, a 9, or a C that looked like this.
						
		One day, I saw what felt like Gorton on a ferry traversing the waters Bay Area. A few weeks later, I spotted it on a sign in a national park. Then on an intercom. On a street lighting access cover. In an elevator. At my dentist’s office. In an alley. 
							
		These had one thing in common. All of the letters were carved into the respective base material – metal, plastic, wood. The removed shapes were often filled in with a different color, but sometimes left alone.
						
		At one point someone explained to me Gorton must have been a routing font, meant to be carved out by a milling machine rather than painted on top or impressed with an inked press.
								
		Some searches quickly led me to George Gorton Machine Co., a Wisconsin-based company which produced various engraving machines. The original model 1 led to model 1A and then 3U and then, half a decade later, P1-2. They were all pantograph engravers: They allowed you to install one or more letter templates and then trace their shape by hand. A matching rotating cutter would mimic your movements, and the specially configured arms would enlarge or reduce the output to the size you wanted.
									
		This immediately explained both the metaphorical and literal rough edges of Gorton.
						
		A lot of typography has roots in calligraphy – someone holding a brush in their hand and making natural but delicate movements that result in nuanced curves filled with thoughtful interchanges between thin and thick. Most of the fonts you ever saw follow those rules; even the most “mechanical” fonts have surprising humanistic touches if you inspect them close enough.
				
		But not Gorton. Every stroke of Gorton is exactly the same thickness (typographers would call such fonts “monoline”). Every one of its endings is exactly the same rounded point. The italic is merely an oblique, slanted without any extra consideration, and while the condensed version has some changes compared to the regular width, those changes feel almost perfunctory.
		
		Monoline fonts are not respected highly, because every type designer will tell you: This is not how you design a font. 
			
		It seemed at this point that perhaps P1-2 and its predecessors were a somewhat popular machining product during the 20th century’s middle decades. But casual research through materials preserved by some of George Gorton Machine Company’s fans – including the grandson of the founder – revealed something even more interesting. Gorton the font was a lot older than I expected. 
			
		I found a 1935 catalog showing the very same font. Then one from 1925. And then, there was one all the way from 1902, showing the shapes I was starting to be mildly obsessed with.
				
		To put it in perspective: the font I first assumed was a peer to 1950s Helvetica was already of retirement age the day Helvetica was born. Gorton was older than Gill Sans, Futura, or Johnston’s London Underground font. It was contemporaneous to what today we recognize as the first modern sans serif font, Akzidenz-Grotesk, released but three years before the end of the century.
	
		Imagine how stripped down and exotic Gorton must have felt right next to George Gorton Machine’s then-current logo!
						
		I started researching Gorton more. Unfortunately, as I already suspected, no one ever wrote “I used Gorton to typeset this,” because Gorton was a tenuous name at best. It was the first font, and perhaps originally the  font that came with the engraver, so it suffered a nameless fate, familiar later to many bespoke bitmap fonts adorning the screens of early computers.
						
		The difference from these fonts, however, was that Gorton was meant to travel. And so, since searching for it by name was impossible, for months and years I just kept looking around for the now-familiar shapes.
	
		Gorton wasn’t just on computer keyboards, intercom placards, and sidewalk messages visited by many shoes. Gorton was there on typewriter keyboards, too. And on office signs and airline name tags. On boats, desk placards, rulers, and various home devices from fridges to tape dispensers.
						
		It was also asked to help in situations other fonts rarely did. I spotted Gorton on overengineered buttons that were put to heavy industrial and military use. I saw it carved into surfaces of traffic control devices, elevators and escalators, locomotives and subway trains, submarines and jet fighters. Gorton made its way to peace- and wartime nuclear facilities, it was there on the elevator at the Kennedy Space Center with labels marked EARTH and SPACE… and it went  and then the Moon, as key legends on Apollo’s onboard computer.
								
		But why? Why would anyone choose this kind of an ugly font where so many nicer fonts have already been around for ages?
						
		Some of it might be the power of the default. Popular engraving equipment comes with a built-in font that’s so standard it reuses the router’s name? Of course you will see it, the same way you saw a lot of Arial in the 1990s, or Calibri today.
	
		Gorton was also convenient. If your previous engraving work required you do to the routing equivalent of handwriting or lettering – every letter done by hand – then a modern font you could simply  and one designed with “a minimum of sharp corners for rapid tracing with a smooth stroke,” must have felt like a breath of fresh air.
								
		But why engraving to begin with? Because the affordable and casual printing options we enjoy today – the office laser printers and home inkjets, the FedEx Kinko’s, the various cheap labelers – weren’t there. Even things that today feel obsolete, like dot matrix printers, Letraset, and popular letter stencils, were yet to be invented. Often, your only realistic option was the complicated and time-consuming lettering by hand.
				
		On top of that, Gorton’s longevity must have felt attractive. Ink smudges. Paint fades away. Paper can catch fire (quickly) or germs (slowly). Carve something into plastic, on the other hand, and it can survive decades. Substitute plastic for metal, and you just turned decades into centuries. The text is not added atop heavy-duty material. The text  the material.
	Various items from the 20th century typeset in Gorton					
		I felt good about all my findings: What a strange story of a strange routing font! 
	
		But it turns out I was just getting started. Because soon, I noticed Gorton as ink on paper, and as paint on metal.
	We’re used to the flexibility of fonts today. Fonts as bits inside a computer can become a website, paint on paper, CNC routing, a wall projection, and many other things. But those freedoms weren’t as easy back when fonts were made out of metal. Life’s not as much fun outside of the glamor of a TTF file, and a routing font couldn’t immediately become a regular font – so seeing Gorton being additive and not subtractive was an unexpected discovery.
								
		It turns out that there developed a small cottage industry of things that extended Gorton past its engraving origins.
								
		A company called Keuffel & Esser Co. grabbed Gorton’s machines, and used them to create lettering sets called Leroy. This was Gorton abstracted away – still a pantograph, but cheap, small, completely manual, and a vastly simplified one: no possibility to make things bigger and smaller, and no carving – instead, you’d mount a special pen and draw letters by tracing them.
								
		Another company, Wood-Regan Instrument Co., made a similar set called (semi-eponymously) Wrico. But then, they simplified the process even more. Instead of a pantograph, they offered for sale a set of simple lettering guides used to guide your pen directly on paper.
								
		Some of the traditional draftspeople pooh-poohed these inventions – one handbook wrote “[Those are] of value chiefly to those who are not skilled in lettering. A professional show-card writer could work better and faster without it. A Leroy or Wrico lettering set permits work that is neat, rapid, and nearly foolproof, if not inspired.”
				
		But the products ended up being popular and influential. Their output appeared in many technical documents, but spread even a bit further than that. Eventually, there were stencils made by Unitech, Lutz, Tacro, Teledyne Post, Tamaya, Tech Graphic, Ridgway’s, Faber Castell, Zephyr, Charvoz, Rotring, Pickett, and probably many more.
				
		Then, both EC Comics and All-Star Comics used Leroy in the 1940s and 1950s, most notably in the first comic book that introduced Wonder Woman. This was Gorton spreading further than just technical documents, and inspiring more people.
				
		Elsewhere silkscreening – a pretty cool technique of applying paint on surfaces through a wet mesh of fabric – took Gorton and Leroy in a different direction, by allowing paint on metal.
				
		There was more. The popular plastic letters attached to felt boards, popularized by restaurants decades ago, and more recently revisited by Instagram mom influencers, also clearly derive from Gorton and Leroy.
	
		I also counted at least three different systems of “Gorton movable type” – some where you could assemble physical letters, and some where you could impress them into soft materials using steel types – and I imagine there were probably more.
				
		Letraset, a cheap technique of applying a font by rubbing a letter from a provided sheet onto paper, popular throughout the 1960s, introduced first- or second-hand Leroy too – and so did a few competitors.
						
		In the regulatory space, the U.S. military canonized Gorton in 1968 as a standard called MIL-SPEC-33558 for aircraft and other equipment dials, cancelled it in 1998… then brought it back again in 2007. NATO and STANAG followed. ANSI, American standardization body, made a more rounded Leroy an official font for technical lettering via ANSI Y14.2M, and so did institutions like the US National Park Service.
					
		Gorton went on and on and on. The early Hershey vector fonts, developed on very early computers and still popular in CAD applications today, were also derived from Gorton/Leroy shapes, simplified so that the already-simple curves weren’t even necessary – any letter could now be drawn by a series of straight lines.
						
		And even in the first universe Gorton inhabited things weren’t standing still. 
	
		As the engraving industry learned what’s popular and what is not, the offerings started getting more and more sophisticated. A promotional booklet called “The Whereabouts of 230 Engraving Machines” listed Gorton customers ranging from biscuit makers to fire engine constructors. Othercatalogsproudly listed applications like book covers, billiard balls, organ keys, and toothbrushes, as well as “tools making more tools” – using Gorton engravers to create legends for other machines.
			
		After you bought your pantograph engraver, you could buy attachments for sometimes surprising use cases:
	
		The original machine-shop pantographs were supplanted by smaller portable units (called Pantoetchers) on one side, and by increasingly complex  devices on the other. First generation of those were still huge room-size endeavors with Nixie tubes and complex interfaces labeled… in Gorton itself. 
	
		But the technology matured quickly and soon more and more early manual “tracer-guided” pantographs that forced the operator to put letters side by side and then trace them by hand, were superseded by computerized ones, with both the composition and the routing completely automated. They came from George Gorton Machine Co., and from competitors like New Hermes or H.P. Preis.
					
		You no longer had to buy the chromium-plated brass alphabets weighing up to 13 pounds, choosing the right size from 3/8´´ to 3´´ ahead of time (pantographs allowed for reductions and enlargements, but only gave you a few steps within a specific range.) 
	
		Now, fonts came as digits or formulas built into computer memory, or – for a moment in time – as separate cartridges you’d insert in eager slots. (And yes, before you ask: there were other routing monoline fonts, too. But I really don’t care about any of them.)
						
		It was the same story as in word processing right next door, where old-fashioned Gutenberg-era typesetting was being replaced by increasingly smaller and cheaper computers equipped with first-laughable-then-capable software.
						
		And automation came for the Leroy branch of the tree as well. A few companies grabbed Leroy lettering templates and abstracted them away once more. They created curious small typewriter/plotter hybrids where typing letters on a keyboard would make the pen draw them on paper for you. (I own one of them, a Max Cadliner. It might be one of the strangest typewriters I’ve seen – a weird combination of a machine pretending to be another machine pretending to be a human hand.)
					
		If this was a Gorton typewriter, there were also Gorton , even more sophisticated 1980s machines whose text could be programmed in advance rather than typed one line at a time, and mixed with graphics.
				
		I don’t think the – by now 80 years and counting – fractal explosion of Gorton made its original creators rich.
				
		Copy protection in the world of typography is complicated. The font’s name can be trademarked and other companies legally prevented from using it, and you can’t just grab matrices or font files and copy them without appropriate licenses. But take any text output using a font and then redraw it – and you are within your right to do so, and even to sell the final result. At least in America, or in some other countries until somewhat recently, the shapes of the letters themselves are not legally protected.
				
		This is why Keuffel & Esser, Wood-Regan Instrument, and Letraset could potentially grab Gorton and claim it their own, as long as they didn’t name it Gorton. 
								
		But of course, Gorton was barely named “Gorton” to begin with. In the early days of George Gorton pantographs, as the default pantograph font, it came without a name. (The font sets for purchase were called “standard copies.”) Then, as other fonts were added, it was retroactively named Gorton Normal – the name of the company and the most generic word possible.
						
		Leroy lettering sets started with one font, so similarly to Gorton the font started to be known as “Leroy,” then “Series C,” then “Gothic.” New Hermes called it simply “Block,” Letraset went with “Engineering Standard,” and Rotring – another producer of little computerized plotters – with “Universal.” I’ve also seen “A style,” “Plain Gothic,” and, mysteriously, “Standpoint.” 
								
		I don’t think this was meant to be disrespectful. “Standard,“ “Universal,” “A style” might not have had the connotations of “generic” we associate with them today, but rather meaning “the only one you need,” “approved of by millions,” or “the ultimate.”
								
		But there  one name that felt somewhat inconsiderate. It appeared in one product in the 1980s, a few decades after the birth of another font whose name became recognizable and distinguished. In that product, Gorton was referred to as “Linetica.”
	A few rare examples of Gorton Extended in use						
		Each of these reappearances made small changes to the shapes of some letters. Leroy’s ampersand was a departure from Gorton’s. Others softened the middle of the digit 3, and Wrico got rid of its distinctive shape altogether. Sometimes the tail of the Q got straightened, the other times K cleaned up. Punctuation – commas, quotes, question marks – was almost always redone. But even without hunting down the proof confirming the purchase of a Gorton’s pantograph or a Leroy template set as a starting point, the lineage of its lines was obvious. (The remixes riffed off of Gorton Condensed or the normal, squareish edition… and at times both. The extended version – not that popular to begin with – was often skipped.)
	Classic Gorton vs. Gorton Modified						
		The only “official” update to Gorton I know of, and one actually graced with a name, was Gorton Modified. It was made some time in the 1970s by one of the main keyboard keycap manufacturers, Comptec (later Signature Plastics). It was almost a fusion of Gorton and Futura, with more rounded letterforms. Gone was the quirkiness of 3, 7, Q, C, and the strange, tired ampersand. This is the version people might recognize from some of the 1980s computers, or mechanical keyboards today. 
	
		It is also that last Gorton that mattered.
	A collection of movies and TV shows featuring Gorton							
		My every walk in Chicago or San Francisco was counting down “time to Gorton” – sometimes mere minutes before I saw a placard or an intercom with the familiar font.
								
		This might be embarrassing to admit, but I have never been so happy seeing a font in the wild, particularly as there was almost always some new surprise – a numero, a line going through the Z, a new use, or a new imperfection. And, for a font that didn’t exist, I saw it surprisingly often.
										
		I even spotted Gorton a few times in Spain, or the U.K., and didn’t make too much of it, not thinking about the likelihood of machines from George Gorton’s company in a small town of Racine, Wisconsin making it all the way to different continents. In hindsight I should have.
	Gorton on old British cars, with a particularly delightful Rolls Royce logo made by a simple duplication of the classic Gorton letter R						
		It was only on a trip to Australia where something started connecting. Here, once more, I saw Gorton on the streets, put to work in all sorts of unglamorous situations:
								
		Some letterforms in the above photos felt slightly odd, and so did Gorton on the heavy machinery in an abandoned shipyard on an island near Sydney:
								
		And a visit to a naval museum cemented it all:
	
		It was Gorton, although with some consistent quirks: 2, 5, 6, and 9 were shorter, the centers of M and W didn’t stretch all the way across, and the distinctive shape of S was slightly different here.
								
		Fortunately, this time around, a type designer familiar with my now-public obsession with Gorton clued me in. Gorton didn’t actually originate from Racine, Wisconsin in the late 19th century. It started a bit earlier, and quite a bit further away, at a photographic lens maker in the U.K. called Taylor, Taylor & Hobson. 
								
		In 1894, TT&H needed some way to put markings on their lenses. This being late 19th century, their options were limited to manual engraving, which must have felt tricky given the small font sizes necessary. So the company did what makers sometimes do – instead of searching for a solution that might not have even existed, they made new types of machines to carve out letters, and then designed a font to be used with them.
	
		I don’t know how this first proto-Gorton was designed – unfortunately, Taylor, Taylor & Hobson’s history seems sparse and despite personal travels to U.K. archives, I haven’t found anything interesting – but I know simple technical writing standards existed already, and likely influenced the appearance of the newfangled routing font.
	From a 1895 “Free-hand lettering” book by Frank T. Daniels					
		This was perhaps the first modern pantograph engraver, and perhaps even the arrival of a concept of an engraving font – the first time technical writing was able to be replicated consistently via the aid of the machine.
				
		No wonder that other companies came knocking. Only a few years later, still deep within the 19th century, Taylor, Taylor & Hobson licensed their stuff to a fledgling American company named after its founder. Gorton Model 1 was the first U.S. version of the engraver, and the TT&H font must have been slightly adjusted on arrival. 
	A Taylor-Hobson pantograph in use in 1942			
		This adds to the accomplishments of Gorton – the font was actually  than even Akzidenz-Grotesk, and has been used on World War II equipment and later on on British rifles and motorcycles (and 3,775 finger posts in one of the UK’s national parks), but it complicates the story of the name even more. Turns out, the font without a name has even less of a name than I suspected.
				
		If the Taylor, Taylor & Hobson (or, Taylor-Hobson, as their engravers were known) “branch” of Gorton were more used, should it usurp the at least somewhat popular Gorton name? Or should it just because it was first and the letterform changes were small? Does it matter? Where does one font end and another begin? (Unsurprisingly, TT&H didn’t properly name the font either, eventually calling it “A style” for regular and “C style” for condensed variants. Google searches for “taylor hobson font” are a lot more sparse than those for Gorton.)  
	GortonGorton CondensedThe Gorton quasisuperfamily
		In the end, I’m sticking with Gorton for the whole branch since that feels the most well-known name, but I feel ill-equipped to make that call for everyone. You might choose to call it Gorton, Leroy, TT&H, Taylor-Hobson, or one of the many other names. (Just, ideally, not Linetica.)
	A comparison of all major editions of Gorton					
		And so, throughout the 20th century, Gorton has lived two parallel lives – one originating in the U.K. and later expanding to its colonies and the rest of Europe, and another one in America. 
								
		I am still tracing various appearences of Gorton and perhaps you, dear reader, will help me with that. (Chances are, you will see Gorton later today!) I’m curious about whether Gorton made it to Eastern Europe, Africa, or Asia. I’m interested in seeing if it appeared in Germany where the objectively better-designed DIN fonts became much more popular in Gorton’s niche.
	
		The history of this strange font spans over a century and I’ve seen it in so many countries by now, used in so many situations. But it’s impossible for me to say Gorton is the most hard-working font in the world.
								
		To this title, there are many contenders. Garamond has a head start of 300+ years and has been released in more versions than letters in any alphabet. Helvetica is so famous and used so much that even its ugly copy, Arial, became a household name. Whatever font MS Office or a popular operating system appoint to be “the default” – from Times New Roman through Calibri to Roboto – immediately enjoys the world premiere that any Hollywood movie would be envious of. There is even a 5×7 pixel font originally started by Hitachi that you can see everywhere on cheap electronic displays in cash registers and intercoms.
								
		But there is one place in the world where Gorton pulls triple duty, and I feel confident in saying at least this: Gorton is the hardest working font in Manhattan.
							
		In 2007, on my first trip to New York City, I grabbed my brand-new DSLR camera and photographed all the fonts I was supposed to love: American Typewriter, Helvetica, Gotham. But, in hindsight, I missed the most obvious one.
								
		Gorton is everywhere in Manhattan. It’s there in the elevators, in the subway, on ambulances, in various plaques outside and inside buildings. And god knows it’s there on so, so many intercoms.
						
		I wouldn’t be surprised if there weren’t a single block without any Gorton in a whole of Manhattan.
	A complete inventory of Gorton outside, near my hotel, between 5th and 7th avenues and 25th and 35th streets. I didn’t have access to the interiors of most buildings.	
		The omnipresence of Gorton makes it easy to collect all the type crimes layered on top of the font’s already dubious typographical origins. Walking through Manhattan, you can spot the abominable lowercase that should better be forgotten:
								
		You can see all sorts of kerning mistakes:
										
		You will notice the many, many routing imperfections – an unfinished stroke, a shaky hand, or services of a pantograph that never felt the loving touch of regular maintenance:
	
		There are all the strange decisions to haphazardly mix various styles of Gorton, or even to mix Gorton with other fonts:
												
		You can even spot reappearing strange characters like a weirdly deep 3, or a flattened 4:
	
    I wish I understood how they came to be, but I have a hunch. The nature of pantographic reproduction is that Gorton carved into metal is not that far away from the original Gorton font template you started with! So in addition to the George Gorton and Taylor Hobson originals, and the other named and above-the-table copies, they might have been bigger or smaller Gorton . I have one myself, carved into acrylic, of unknown provenance and even more nameless than I thought possible for an already name-free font.
  
		But New York Gorton holds pleasant surprises, too. Despite the simplicity of Gorton itself, the combinations of font sizes, cutter sizes, materials, reproductions, and applications can still yield some striking effects:
	
	
			All my Gorton walks in Manhattan in 2024
		

		This was what made me walk 100 miles. Over and over again, Gorton found ways to make itself interesting. Without hyperbole, I consider the above photos simply beautiful.
	
		In a city that never sleeps, Gorton wasn’t allowed to sleep, either. Even in the richest and most glamorous neighborhoods of Manhattan, the font would be there, doing the devil’s work without complaining. Gorton made Gotham feel bougie; American Typewriter touristy.
	
		And once in a while, I’d find Gorton that would wink at me with a story – followed by that aching in the heart as I realized I’d never know what the story was.
				
		You’re not supposed to fall in love with an ugly font. No one collects specimens of Arial. No one gets into eBay fights for artifacts set in Papyrus. No one walks a hundred miles in a hot New York summer, sweating beyond imagination, getting shouted at by security guys, to capture photos of Comic Sans.
								
		So why do I love Gorton so much? 
								
		The Occam’s Razor seems sharp on this one. Perhaps I like it because I’m a boy and Gorton is often attached to heavy machinery. 
					
		But there must be more to it. Perhaps it’s all about the strange contrasts Gorton represents. The font is so ubiquitous, but also profoundly unrecognizable, sporting no designer and no name. Gorton is a decidedly toy-like, amateurish font deployed to for some of the most challenging type jobs: nuclear reactors, power plants, spacecraft. More than most other fonts, Gorton feels it’s been made by machines for machines – but in its use, it’s also the font that allows you to see so many human mistakes and imperfections.
					
		Gorton also feels mistake-friendly. The strange limitations of Gorton mean that some of the transgressions of other fonts don’t apply here. The monoline nature of the font means that messing with the size of Gorton is okay: Shrinking the font for small caps or superscript, for example, gives you still-valid letterforms, almost by accident. 
	
		Stretching or slanting Gorton is not as much a typographical crime as it would be with other fonts because you don’t stretch the tip of the router itself.
								
		There are genuinely moments where I felt Gorton gave people freedoms to maul it decades before variable fonts allowed us similar flexibility.
		And on top of that, the simplicity of the letterforms themselves feels compatible with the typical naïveté of Gorton’s typesetting. 
	Various accessories and attachments allowing you to shift Gorton around in a way other fonts would not allow
    Sure, there are really bad renditions that are inexcusable. 

		But most of the time, the imperfections and bad decisions are what makes Gorton come alive. They don’t feel like a profound misunderstandings of typography, typesetting, or Gorton itself. They don’t feel like abuses or aberrations. No, they feel exactly how Gorton was supposed to be used – haphazardly, without much care, to solve a problem and walk away. (Later routing fonts copied Helvetica, but seeing Helvetica in this context with all the same mistakes grates so much more.)
				
		The transgressions are not really transgressions. They all feel honest. The font and its siblings just show up to work without pretense, without ego, without even sporting a nametag. Gorton isn’t meant to be admired, celebrated, treasured. It’s meant to do some hard work and never take credit for it. Gorton feels like it was always a font, and never a typeface. (Depending on how rigid you are with your definitions, some versions of Gorton – especially those without instructions on how letters are positioned against each other – might not even classify as a font!)
						
		And I think I love Gorton because over the years I grew a little tired of the ultra flat displays rendering miniature pixels with immaculate precision. 	
		With Gorton, carving into metal or plastic means good-looking fixes are impossible:
	
		And unsurprising given its roots, Gorton has dimensionality that most fonts cannot ever enjoy: A routing tip picked in the 1980s and a sun coming in from just the right angle forty years later can create a moment that thousands of letterpress cards can only dream of.
	
		Perhaps above everything else, Gorton is all about . 
  
    Every kind of engraving has it, of course. But these are not precise submillimeter letters at the bottom of your MacBook Pro or Apple Watch. This is the utilitarian, often harried, sometimes downright  Gorton, carved into steel of a  
		mid-century intercom and filled in with special paste or wax, or put on an office placard made out of a special two-layer material made especially so engraving it reveals the second color underneath, without the need for infill. 
				
		(This is also true when it comes to the original reason I learned of Gorton. Letters on keycaps show the same artifacts – you just have to look very, very closely.)
	
		That’s the last, and perhaps the best thing to fall in love with. 
	
		You won’t be able to fully appreciate it here, of course, but maybe this will give an approximation of how beautiful Gorton’s non-beauty can be:
						
		This has been a strange thing to write. Gorton has been around for over 135 years and used in so many countries for so many reasons, and yet I found no single article about it. 
						
		I feel the burden of being an amateur historian, wanting to know and share so much more, but only being able to provide little. I don’t know the full extent of Gorton’s use. I don’t know who designed it. My chronology is rickety and pieced together from a few breadcrumbs. I dream of seeing the original drawings or drafts once laid on the tables of Taylor, Taylor & Hobson offices, or some notes, or some correspondence. I fear they might no longer exist.
						
		Also, if part of the allure of Gorton is shying away from the limelight and not being admired, am I doing it a disservice by writing about it?
						
		But mostly, I can’t shake the feeling that we all missed a window. That this essay can’t be just a celebration, but also needs to be the beginnings of a eulogy.
						
		Walking around New York, you get a sense that even Gorton carved into metal can disappear. Some of the signs are rusted or destroyed beyond repair. Others get replaced by more modern, charmless equivalents.
								
		Gorton itself is obsolete. All the keyboards that use Gorton Modified you can still buy new today are tipping a hat to nostalgia. The omnipresence of Gorton in New York City is already time shifted from its decades of glory, a simple confirmation of what Robert Moses knew so well: that once built, cities don’t change all that much. But few of the new placards use Gorton, and none of the new intercoms do. 
	
		Taylor, Taylor & Hobson went through multiple splits and mergers and survives as a subsidiary of Ametek, chiefly working on measuring devices. George Gorton Machine Co. from Racine has been bought by Kearny & Trecker, which became Cross & Trecker, was acquired by Giddings & Lewis, and then acquired  by ThyssenKrupp, but not before the Gorton branch was spun off as Lars, and in a sequence of events now resembling a telenovella, eventually bought by Famco in 1987. I do not believe any corporate grandchildren of TT&H and George Gorton’s company are today selling Gorton in any capacity.
								
		It will take decades, perhaps even centuries, but one day the last of this font will be gone. The modern recreations (I eventually found quite a few) won’t help. They are perhaps all missing a point, anyway.
	
		But there’s a somewhat silver lining. Yes, when Gorton is carved into fresh metal, there might be nothing more pretty than seeing its depths glistening in the sun.
	
		But fresh, shining metal is at this point rare. Fortunately, the Gorton I love most is the weathered Gorton.
								
		Manhattan’s tired Gorton is the best variant of Gorton: infill cracked by hot summers followed by frigid winters, the surface scratched by keys or worn out by many finger presses, the routing snafus meeting decades of wear and tear. Gorton’s no stranger to water, snow, rust, or dirt.
			
		This is, perhaps, how you become gortonpilled. You learn to recognize the 7 with a crooked hook, the Q with a swung dash, the strange top-heavy 3, the simple R. You start noticing the endings of each character being consistently circular, rather than occasionally flat. A routing mistake, suspicious kerning, or the absence of lowercase are not a wrongdoing – they’re a .
								
		You find yourself enchanted with how this simple font went so very far. And then you touch the letters, just to be sure. If you can  them, chances are this is Gorton.		
	]]></content:encoded></item><item><title>OpenAI says its board of directors ‘unanimously’ rejects Elon Musk’s bid</title><link>https://techcrunch.com/2025/02/14/openai-says-its-board-of-directors-unanimously-rejects-musks-bid/</link><author>Kyle Wiggers</author><category>tech</category><pubDate>Fri, 14 Feb 2025 21:45:07 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[OpenAI’s board of directors has “unanimously” rejected billionaire Elon Musk’s offer to buy the nonprofit that effectively governs OpenAI, the company said on Friday. In a statement shared via OpenAI’s press account on X, Bret Taylor, board chair, called Musk’s bid “an attempt to disrupt his competition.” “OpenAI is not for sale, and the board […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>Bluesky gets growth and analytics tools with BlueSkyHunter launch</title><link>https://techcrunch.com/2025/02/14/bluesky-gets-growth-and-analytics-tools-with-blueskyhunter-launch/</link><author>Sarah Perez</author><category>tech</category><pubDate>Fri, 14 Feb 2025 21:42:35 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[A new startup is addressing the need for an all-in-one toolset built for people who want to grow, manage, and track their Bluesky presence and following. The subscription service BlueSkyHunter, which launched Friday, introduces an online dashboard that combines access to analytics and other tools to schedule posts and automate DMs (direct messages), alongside other […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>Global electricity demand expected to grow 4% annually through 2027</title><link>https://techcrunch.com/2025/02/14/global-electricity-demand-expected-to-grow-4-annually-through-2027/</link><author>Tim De Chant</author><category>tech</category><pubDate>Fri, 14 Feb 2025 21:40:05 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Meeting that demand will require adding more generating capacity than all of Japan — every year. © 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>How this weekend’s ‘Tesla Takeover’ protests against Elon Musk came together on Bluesky</title><link>https://techcrunch.com/2025/02/14/how-this-weekends-tesla-takeover-protests-against-elon-musk-came-together-on-bluesky/</link><author>Sean O&apos;Kane</author><category>tech</category><pubDate>Fri, 14 Feb 2025 21:34:09 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[As Elon Musk and his acolytes rip through the federal government looking for agencies to throw into the “wood chipper,” a grassroots effort to hit the world’s richest man where it hurts is picking up steam. The courts are busy contesting the actions of Musk’s Department of Government Efficiency, but the judicial system is slow […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>An art exhibit in Japan where a chained robot dog will try to attack you to showcase the need for AI safety.</title><link>https://v.redd.it/sglstazd96je1</link><author>/u/eternviking</author><category>dev</category><category>ai</category><category>reddit</category><pubDate>Fri, 14 Feb 2025 21:24:03 +0000</pubDate><source url="https://www.reddit.com/r/artificial/top/?sort=top&amp;t=day&amp;limit=3">Reddit - AI</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>What is device code phishing, and why are Russian spies so successful at it?</title><link>https://arstechnica.com/information-technology/2025/02/russian-spies-use-device-code-phishing-to-hijack-microsoft-accounts/</link><author>Dan Goodin</author><category>tech</category><enclosure url="https://cdn.arstechnica.net/wp-content/uploads/2022/03/phishing.jpeg" length="" type=""/><pubDate>Fri, 14 Feb 2025 21:16:11 +0000</pubDate><source url="https://arstechnica.com/">Biz &amp; IT – Ars Technica</source><content:encoded><![CDATA[Researchers have uncovered a sustained and ongoing campaign by Russian spies that uses a clever phishing technique to hijack Microsoft 365 accounts belonging to a wide range of targets, researchers warned.The technique is known as device code phishing. It exploits “device code flow,” a form of authentication formalized in the industry-wide OAuth standard. Authentication through device code flow is designed for logging printers, smart TVs, and similar devices into accounts. These devices typically don’t support browsers, making it difficult to sign in using more standard forms of authentication, such as entering user names, passwords, and two-factor mechanisms.Rather than authenticating the user directly, the input-constrained device displays an alphabetic or alphanumeric device code along with a link associated with the user account. The user opens the link on a computer or other device that’s easier to sign in with and enters the code. The remote server then sends a token to the input-constrained device that logs it into the account.]]></content:encoded></item><item><title>DeepSeek founder Liang Wenfeng is reportedly set to meet with China’s Xi Jinping</title><link>https://techcrunch.com/2025/02/14/deepseek-founder-liang-wenfeng-is-reportedly-set-to-meet-with-chinas-xi-jinping/</link><author>Kyle Wiggers</author><category>tech</category><pubDate>Fri, 14 Feb 2025 20:45:17 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Chinese AI startup DeepSeek founder Liang Wenfeng is reportedly set to meet with China’s top politicians, including Chinese leader Xi Jinping, during a summit that Alibaba founder Jack Ma is also expected to attend. The summit, which could happen as soon as next week, may be intended as a signal by China’s Communist Party that […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>Why PAUL Needs a Massive Dataset to Improve Its Movements</title><link>https://hackernoon.com/why-paul-needs-a-massive-dataset-to-improve-its-movements?source=rss</link><author>EScholar: Electronic Academic Papers for Scholars</author><category>tech</category><pubDate>Fri, 14 Feb 2025 20:30:02 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[(1) Jorge Francisco Garcia-Samartın, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain (jorge.gsamartin@upm.es);(2) Adrian Rieker, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain;(3) Antonio Barrientos, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain.3 PAUL: Design and Manufacturing4 Data Acquisition and Open-Loop Control4.3 Dataset Generation: Table-Based ModelsDue to the complexity of the robot, model-based methodologies, such as PCC or the ones based on Cosserat Rod Theory were discarded. Although the usage of FEM is an avenue that will not be closed in future work, the large number of parameters to be set experimentally for each segment (Young’s modulus, moment of inertia. . . ), given that the manufacturing process is so variable meant that, in this first phase, we opted to use some type of PAUL modelling based on data collection.\
The output of the system is taken as the position and orientation reached by the final end –thus, at this stage, all the positions of the intermediate segments are ignored– and as input, the inflation times of each of the bladders. As there were not enough pressure sensors available at the time of the construction of the robot, it was decided to take inflation time as an input variable. As the working pressure is limited by the pressure limiting valve and the flow rate into each bladder can be assumed to be constant, the time is equivalent to the volume of air introduced into each cavity.\
All the control options considered have in common the need for a large amount of empirical data, which leads to the need to develop an experimental design to systematise the collection of this data. Since the capture of this information is done in different phases and the datasets have to represent the behaviour of the robot in an objective way, the re-applicability of the experiment takes on special importance.\
The data stored in the datasets was the position of the robot tip and the set of inflation times that achieve this configuration. The aforementioned limitation that only two of the three bladders in the segment are inflated reduces redundancies. As previously stated, more than two segments lead to redundancies, which implies that the inverse kinematic model of the robot can have multiple solutions.\
The data collection process involves several sequential steps. Initially, a set number of samples is determined. For each sample, Matlab commands dispatch a random combination of nine inflation times, corresponding to each valve of PAUL, to the actuation bench. Times are generated below a maximum time limit Tmax, and ensuring that only two cavities per segment are inflated. Following this, the robot’s bladders are inflated based on the sent times. Subsequently, the vision system’s two cameras capture images to determine the position and orientation of the robot’s end. This entire procedure is repeated for the specified number of iterations, and upon completion, the collected data is stored in the dataset\
The information on swelling times is stored as a percentage, with a value of 0 corresponding to a zero swelling of that segment and 100 corresponding to Tmax, the swelling for the maximum number of milliseconds defined for this data collection session. This value Tmax is stored, together with the values, in the dataset, in order to be able to compare different datasets. The reason for this coding comes from the lack of information, a priori, on what is the maximum pressure that a PAUL bladder admits. Although it is true that it was experimentally determined that inflation times of more than 1500 ms in a row led to punctures, the application of lower times during a repeated number of cycles also generated leaks. On this basis, it was decided never to inflate any valve, either in one or several steps, more than 1000 ms.\
Along with the inflation times of each bladder, the position and orientation reached by the end tip is stored, based on the camera readings. In particular, the position of the green marker and the orientation of the trihedron are stored. The latter is expressed in Euler angles, as it is a much efficient form of storage than a rotation matrix. In addition, the dataset also contains metadata from the collection process that are believed to influence the results, such as the pneumatic line pressure or the ambient temperature.\
Some aspects in the pneumatic system merit attention. Initially, bladder inflation and deflation are not symmetrical processes. Geometric constraints in the pneumatic components result in a lower deflation rate compared to inflation. Consequently, when the PAUL receives a deflation time, it multiplies it by an empirically derived factor, approximately 1.45 for a 1.2 bar working pressure. This multiplier compensates for the discrepancy between inflation and deflation times of a singular group of bladders, ensuring that the deflation time aligns with the time required to reach the same inflation point.\
Similarly, although it is physically possible to inflate several valves at the same time, it has been shown that this parallel flow distribution means that the effective fillings of each valve are not the same as if they were inflated individually. To prevent this phenomenon, it was decided to inflate each bladder individually both during the data acquisition process and utterly, when PAUL was asked to reach certain positions.\
Finally, there are hysteresis phenomena in the silicone that cause the position reached by inflating for a time t to be different from the position reached by inflating first for a time t1 and then for a time t2 = t − t1. The strategy employed to tackle this problem was to capture the dataset bringing PAUL back to its zero position between each sample. Nevertheless, when controlling the robot in open-loop this is not possible, or, at least, not desirable, as one may wish to follow trajectories or travel through a sequence of points. Therefore, transitioning from position x1 to x2 requires an additional factor of 1.2, also derived experimentally, to account for hysteresis effects.Once the dataset is generated, it can be used to model the behaviour of PAUL for open-loop control. It is foreseen, as a future line, to train a neural network for the direct kinematics and another one for the inverse kinematics. However, given the large amount of data that may be required (in [62] 24389 samples are used for a three-segment robot like this one), a table look-up method has been used for this work.\
The method for direct kinematics –which allows obtaining the position and orientation of the final end of the robot from the inflation times of the nine bladders– consists of searching, in the generated dataset in the previous step, the three inflation time values located at a shorter distance from the inflation time given as a reference. Obviously, if the set of inflation times sought were in the table, the value associated with these times would be returned as a result of the direct kinematic model. Otherwise, the average of the position and orientation values associated with the three closest inflation times, weighted by the distance (Euclidean norm) existing between each of them and the values of reference inflation times, is returned as the position and orientation value of the robot.\
\
with them, it is possible to calculate the position returned by the direct kinematic model using the expression:]]></content:encoded></item><item><title>NATO backs its first cohort of European dual-use startups</title><link>https://techcrunch.com/2025/02/14/nato-backs-its-first-cohort-of-european-dual-use-startups/</link><author>Mike Butcher</author><category>tech</category><pubDate>Fri, 14 Feb 2025 20:16:12 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[With both Vice President J.D. Vance and U.S. Defense Secretary Pete Hegseth making loud noises Friday about Europe stepping up to the plate in spending more on its own defense, it might come as a surprise that Europe is already on the path toward far greater investment in defense, especially in tech. Not only has […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>How PAUL the Robot Tracks Its Own Movements Using Cameras and LEDs</title><link>https://hackernoon.com/how-paul-the-robot-tracks-its-own-movements-using-cameras-and-leds?source=rss</link><author>EScholar: Electronic Academic Papers for Scholars</author><category>tech</category><pubDate>Fri, 14 Feb 2025 20:15:07 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[(1) Jorge Francisco Garcia-Samartın, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain (jorge.gsamartin@upm.es);(2) Adrian Rieker, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain;(3) Antonio Barrientos, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain.3 PAUL: Design and Manufacturing4 Data Acquisition and Open-Loop Control4 Data Acquisition and Open-Loop ControlIn order to provide the manipulator with a solid and stable fastening system, which would also allow reliable and predictable data capture of the positions and orientations of its end, the metal structure shown in Figure 10 was built. It is a cube made of steel profiles with methacrylate sheets on the walls. The pneumatic bench, the power supply and the microcontroller were placed on top of the structure.\
The aim of the data acquisition system is to be able to measure, whenever required, the position and orientation of the end of the robot in order to be able to relate it to the inflation times of each bladder and thus be able to create an open-loop model of PAUL. For this purpose, three elements are available: the cameras, the calibration grid and the trihedron.\
Two Spedal AF926H USB cameras with 1920 x 1080 px, 80◦ field of view and a frequency of 60 fps are used to capture the images. These have been placed on two tripods external to the robot’s structure. They are calibrated with a checkerboard of 11 x 8 squares of 20 mm each, which can be seen in Figure 11a.\
The vision beacon, on the other hand, has the task of being recognised in space to determine the position and orientation of the mobile system with respect to the fixed system. The trihedron, displayed in Figure 11b, consists of three spheres, manufactured by 3D printing in PLA, inside which three LED diodes have been embedded. Thanks to these, it is possible to vary the luminosity of the spheres by means of software, keeping the system functioning correctly when the workplace or the environmental or lighting conditions vary.\
The existence of the central rod, which moves the luminous spheres away from the base of the robot end, makes possible the spheres to be visible to the cameras in all the poses that the robot can adopt. If the spheres were otherwise directly attached to the\
end of the robot, there would be numerous poses in which it would not be possible to determine the position, as the spheres would be hidden by the robot itself.4.2 Vision Capture System\
\
Because coordinates of the real world are independent of the camera, if Equation (1) is applied for both cameras and rk vector cleared in the two equations, it can be said that:\
\
System of equations (2) can be solved using the Least Squares Method:\
\
and then use the Rodrigues’ rotation formula to obtain it, respect to the real world base in the form of a rotation matrix:\
\
and I denotes the identity matrix of size 3.]]></content:encoded></item><item><title>Drugs Have Won The War On Drugs: Drugged-Up Rat Infestation Edition</title><link>https://www.techdirt.com/2025/02/14/drugs-have-won-the-war-on-drugs-drugged-up-rat-infestation-edition/</link><author>Tim Cushing</author><category>tech</category><pubDate>Fri, 14 Feb 2025 20:07:39 +0000</pubDate><source url="https://www.techdirt.com/">Techdirt</source><content:encoded><![CDATA[50+ years of hardline prohibition have only resulted in better prices, better purity, and a slew of states legalizing or decriminalizing personal use amounts of any number of drugs, with marijuana leading the way in terms of overall legalization. Treating drugs users as just as terrible as drug dealers has led to a ton of incarceration and a  ton of collected evidence that is apparently being consumed by things cops and crooks are used to dealing with: rats.“Drug-addicted rats” are eating narcotics seized and stored by Houston police, prompting a change in how long the police department is required to store the evidence, officials said.Houston Mayor John Whitmire, Harris County District Attorney Sean Teare and Houston Police Chief J. Noe Diaz announced new steps Friday to dispose of drugs and other evidence kept at police headquarters downtown, some of which has been sitting there for decades, attracting rodents, even though cases they are linked to have long been adjudicated.This is where it becomes clear that drugs have won the Drug War. This single evidence locker contains enough weed to start a drug empire. “We got 400,000 pounds of marijuana in storage,” Whitmire said. “The rats are the only ones enjoying it.”The Houston PD (which has more than its share of corrupt drug cops) is sitting on 200  of marijuana it has amassed over the years. And yet, I would wager that no Houston resident has any trouble obtaining this product on short notice.The same goes for the rest of the stuff in the warehouse, which apparently (until recently) contained cocaine seized in 1996. As police chief J. Noe Diaz pointed out, the evidence has outlasted the case. The suspect pled guilty, served his time, and was free to go long before the evidence used to convict him was.It’s apparently a nationwide problem, according to some of the forensic experts interviewed by NBC News, which carried a story early last year about a similar drug-eating rat problem in New Orleans. New rules are being put in place to destroy this evidence more frequently. On one hand, it makes sense to destroy evidence after defendants serve their time in jail. On the other hand, I wouldn’t get  carried away giving PDs permission to destroy evidence, since that’s the sort of thing that lends itself to cover-ups and the disappearance of evidence prisoners might use to challenge their convictions — a process that can take years, thanks to the justice system’s reluctance to reconsider its own calls and the byzantine processes convicted people are expected to navigate just to have (a very looooong) shot at having their cases heard. But above all that, there’s the sheer amount of drugs being held in evidence warehouses. If there’s nearly a half-million pounds of weed just laying around at any given time, it would seem law enforcement isn’t scoring many meaningful wins in the Drug War. At best, it’s a game of Whack-a-mole that won’t generate enough tickets to make it worth visiting the merchandise booth at the arcade. At worst, it’s just cops looking busy, a meaningless waste of time that unfortunately results in people losing years of their lives to a system that not only can’t fix what’s broken, but clearly prefers doing the things that don’t work as often as possible in perpetuity. ]]></content:encoded></item><item><title>Elon Musk’s AI company, xAI, said to be in talks to raise $10B</title><link>https://techcrunch.com/2025/02/14/elon-musks-ai-company-xai-said-to-be-in-talks-to-raise-10b/</link><author>Kyle Wiggers</author><category>tech</category><pubDate>Fri, 14 Feb 2025 19:54:01 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Elon Musk’s AI company, xAI, is said to be in talks to raise $10 billion in a round that would value xAI at $75 billion. Bloomberg reported Friday that xAI is canvassing existing investors, including Sequoia Capital, Andreessen Horowitz, and Valor Equity Partners for the round, which would bring xAI’s total raised to $22.4 billion, […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>Discovering discovery coding (Friends)</title><link>https://changelog.com/friends/80</link><author></author><category>podcast</category><enclosure url="https://op3.dev/e/https://cdn.changelog.com/uploads/friends/80/changelog--friends-80.mp3" length="" type=""/><pubDate>Fri, 14 Feb 2025 19:45:00 +0000</pubDate><source url="https://changelog.com/podcast">Podcast - Changelog</source><content:encoded><![CDATA[Fire up a REPL, grab your favorite Stephen King novel, and hold on to the seat of your pants! Jimmy Miller returns to reveal why, at least for some of us, discovery coding is where it’s at.Changelog++ members save 9 minutes on this episode because they made the ads disappear. Join today!Temporal – Build invincible applications. Manage failures, network outages, flaky endpoints, long-running processes and more, ensuring your workflows never fail. Register for Replay in London, March 3-5 to break free from the status quo.
Augment Code – Developer AI that uses deep understanding of your large codebase and how you build software to deliver personalized code suggestions and insights. Augment provides relevant, contextualized code right in your IDE or Slack. It transforms scattered knowledge into code or answers, eliminating time spent searching docs or interrupting teammates.
Notion – Notion is a place where any team can write, plan, organize, and rediscover the joy of play. It’s a workspace designed not just for making progress, but getting inspired. Notion is for everyone — whether you’re a Fortune 500 company or freelance designer, starting a new startup or a student juggling classes and clubs.
]]></content:encoded></item><item><title>Researcher Captures Contents of ‘DEI.gov’ Before It Was Hidden Behind a Password</title><link>https://www.404media.co/dei-waste-gov-doge-list-behind-password/</link><author>Samantha Cole</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/Screenshot-2025-02-14-at-2.25.54-PM.png" length="" type=""/><pubDate>Fri, 14 Feb 2025 19:32:43 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[A German researcher captured the contents of the White House’s “DEI.gov” during a brief period when it was not password protected.The capture shows that the site contains a list of vague, alleged government-funded tasks and their costs, without sources or context, like “$1.3 million to Arab and Jewish photographers," “$1.5 million for ‘art for inclusion of people with disabilities,’” and "$3.4 million for Malaysian drug-fueled gay sex app.” DEI.gov redirects to waste.gov and is currently inaccessible without a password; Elon Musk told reporters on Tuesday that his Department of Government Efficiency (DOGE) is “trying to be as transparent as possible.”⁨The researcher is Henrik Schönemann⁩, a historian who started the Safeguarding Research & Culture archivalist project, posted screenshots on Mastodon showing the contents. Schönemann⁩ also shared the specific site scrapes that he was able to capture, which showed the contents of the site. He told 404 Media he set up a change detection app using PikaPods, and is monitoring changes across hundreds of government websites. When the dei.gov and waste.gov sites were registered 10 days ago, he started tracking them, too. Before the site administrators added a Wordpress template to the pages, the list was online at those URLs. This list was only online for a maximum of 30 minutes, starting around 4:50 p.m. EST; by 5:23 p.m. on February 11, it was gone from public view, according to the snapshots Schönemann’s app⁩ captured. According to the screenshots provided by Schönemann⁩, the list includes (all of the following are direct quotes): $78,000 to Palestinian activist group whose chairman was photographed attending an anniversary event celebrating the founding of the Popular Front for the Liberation of the Palestine terrorist group$1 Million for foreign DEI programs, including ‘indigenous language technology’ in Guatemala, per non-public funding docs reviewed by WFB$5 million for effort to treat eating disorders by “affirming” LGBTQIA+ patients’ sexual orientation and gender claimsUp to $3 million to defund the police advocacy group to pursue “climate justice” for convictsFunded performances of play “Angels in America: A Gay Fantasia on National Themes,” in which God is bisexual and communists are good, in North MacedoniaDisbursed $15,000 to “queer” Muslim writers in IndiaShelled out tens of thousands to create army of 2,500 LGBTQI+ alliesUp to $10 million worth of USAID-funded meals went to al Qaeda-linked terrorist group the Nusra Front$500,000 to group that “empowers women” in attempt to solve sectarian violence in Israel just ten days before Hamas’ Oct. 7 attacks$4.67 million to EcoHealth Alliance – one of the key NGOs funding bat virus research at Wuhan Institute of Virology — in late 2021. Later refused to answer key questions about the funding.$7.9 million to a project that would teach Sri Lankan journalists to avoid “binary-gendered language”$1.3 million to Arab and Jewish photographers$1.5 million for “art for inclusion of people with disabilities”$2 million to promote “LGBT equality through entrepreneurship…in developing Latin American countries.”Education Week: “Biden Administration Cites 1619 Project as Inspiration in History Grant Proposal”VA took at least a dozen actions aimed at bolstering DEI during the Biden-Harris administration while the number of homeless veterans increased and the amount of claims in the VA’s backlog grew from ~211,000 to ~378,000NASA has allocated roughly $10 million to grants advancing DEI and “environmental justice” since 2020Following President Trump’s executive order on DEI at federal agencies, the ATF “quietly changing the job title of its former diversity officer… to ‘senior executive’ with the ATF.The Department of Labor requested additional funding in 2023 for “The Chief Evaluation Office for a new rigorous interagency evaluation of actions aimed at improving Diversity, Equity, Inclusivity, and Accessibility across the federal workforce,” more than $6.5 million “to restore employee benefits programs that will advance equity by specifically addressing how opportunities can be expanded for underserved communities and vulnerable populations,” and $5 million “to evaluate actions aimed at improving diversity, equity, inclusion, and accessibility (DEIA) within the federal workforce.”Fox Business: “FOX Business’ ‘Trouble in the Skies,’ a six month investigation of the FAA’s new hiring practices, uncovered changes that may put the nation’s flying public at risk as well as allegations that the newest air traffic control recruits had access to answers on a key test that helped them gain jobs with the FAA…Also uncovered was an FAA effort to promote diversity that discarded 3000 qualified college graduates with degrees in air traffic control despite their following FAA procedure and obtaining FAA accredited degrees.”Schönemann⁩ told 404 Media he wanted to share a sentiment alongside his find: “People all around the world care, you are not alone. And: #TransRights.” Earlier this week, we reported that the Trump administration had set up a website called waste.gov, which was live on the internet with a sample page from a default WordPress template. Both DEI.gov and waste.gov were created at the same time, according to Reuters, and DEI.gov was recently set up to redirect to waste.gov. After our reporting, both websites were put behind a password wall.]]></content:encoded></item><item><title>Meta’s next big bet may be humanoid robotics</title><link>https://techcrunch.com/2025/02/14/metas-next-big-bet-may-be-humanoid-robotics/</link><author>Kyle Wiggers</author><category>tech</category><pubDate>Fri, 14 Feb 2025 19:16:11 +0000</pubDate><source url="https://techcrunch.com/">TechCrunch</source><content:encoded><![CDATA[Meta is forming a new team within its Reality Labs hardware division to build robots that can assist with physical tasks, Bloomberg reported. The team will be responsible for developing humanoid robotics hardware, potentially including hardware that can perform household chores. Meta’s new robotics group, which will be led by Marc Whitten, driverless car startup […]© 2024 TechCrunch. All rights reserved. For personal use only.]]></content:encoded></item><item><title>How PAUL, a Soft Robot, is Designed and Built</title><link>https://hackernoon.com/how-paul-a-soft-robot-is-designed-and-built?source=rss</link><author>EScholar: Electronic Academic Papers for Scholars</author><category>tech</category><pubDate>Fri, 14 Feb 2025 19:00:06 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[(1) Jorge Francisco Garcia-Samartın, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain (jorge.gsamartin@upm.es);(2) Adrian Rieker, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain;(3) Antonio Barrientos, Centro de Automatica y Robotica (UPM-CSIC), Universidad Politecnica de Madrid — Consejo Superior de Investigaciones Cientıficas, Jose Gutierrez Abascal 2, 28006 Madrid, Spain.3 PAUL: Design and Manufacturing4 Data Acquisition and Open-Loop ControlThe first step in the manufacturing process is to obtain the wax cores which, when inserted into the mould, are used to create the holes for what, in the finished segment, will be the bladders. These are made by pouring paraffin wax into previously made female moulds (Figure 5a).\
After half an hour, the wax has solidified and the cores can be removed and inserted into the mould (Figure 5b). The mould consists of four 3D printed parts (two sides, a bottom cap and a top grip on which the cores rest) which are screwed together and then sealed with a hot silicone bead to prevent leakage during subsequent curing (Figure 5c).\
The silicone can then be poured into the mould, which must be filled to the top to counteract the aforementioned shrinkage. In particular, TinSil8015 requires a mass ratio of 10:1 liquid to catalyst. For the dimensions of the segment, about 175 g of total mixture are required.\
The curing process lasts 24 hours at ambient temperature (Figure 5d), after which it can be removed from the mould. It may be necessary to use a scalpel to remove the silicone burrs (Figure 5e).\
Once the segment has been built, the cores that have been used to create the bladders are removed. While the wood can be removed by pulling, it is necessary to apply heat to the segment to remove the wax. Thus, it is first placed in an oven at 110 ◦C (Figure 5f) and then immersed in a boiling water bath for 15 minutes, which ensures the elimination of the residual traces of wax (Figure 5g).\
Since the males are through, it is required to close the lower part of the segment. To do this, a layer of silicone is poured onto the plate of Figure 5h, glued onto the segment and left to cure for 24 hours. Finally, the pneumatic tubes are joined to the segment, adhering them with cyanoacrylate and strengthening the tightness with the usage of plastic flanges (Figure 5i).\
The final result, a functional segment is depicted in Figure 6. Experimentally, it is found that its weight is 161 g and that, as designed, it has a height of 100 mm and an external diameter of 45 mm.Within the robot, the function of the pneumatic bench is to control the flow of compressed air from the compressor according to the control signals. Specifically, the PAUL bench consists of 6 pairs of 2/2 valves (SMC VDW20BZ1D model) and 3/2 valves (SMC Y100 model) placed in series, which will therefore allow up to 12 degrees of freedom. Both are shown in Figure 7. The physical characteristics of the 2/2 valves limited the total pressure of the assembly to 4 bar, but to reduce the risk of segment leakage, it was reduced with a flow regulator to 2 bar. Figure 8 presents a schematic of the pneumatic circuit.\
\
The valves are operated via 24 V voltage signals. A MOSFET (model IRF540) is the switch in charge of managing them. Initially, the use of relays was considered, but the high current they would consume made their use unfeasible. An Arduino Due was chosen as the bench controller. A PC power supply, capable of supplying up to 8.5 A, is responsible for powering the unit, whose final layout is illustrated in Figure 9.]]></content:encoded></item><item><title>No Startup Has Ever Failed Because it Didn’t Have a Blog</title><link>https://hackernoon.com/no-startup-has-ever-failed-because-it-didnt-have-a-blog?source=rss</link><author>susie liu</author><category>tech</category><pubDate>Fri, 14 Feb 2025 19:00:03 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[\
Somewhere along the way, startup marketing got hijacked by creator economy logic.“If I build an audience, I’ll have an easier time selling.” “If I post valuable content, customers will come to me.” “Content is how you earn trust.”No startup has ever failed because it didn’t have a blog. Name one high-growth startup that failed because it didn’t have a content marketing strategy. \
  . Because it’s never happened. \
Startups fail because: 1) They didn’t find product-market fit. 2) They spent money like fools. 3) A combo of shaky financials plus bad operations. Not because they skipped the “10 SaaS Growth Hacks” Medium post.The Case Against Content Marketing\
Content isn’t just eating up your time—it’s going to eat your startup for lunch. You think you’re building something, but really, you’re just shuffling pixels around and calling it momentum. ==You’ll die because you’re wasting your best thinking on being interesting instead of being necessary.==\
Don’t try to be a media company when you haven’t even figured out how to be a business.You Ignore Your Most Powerful Asset: Your Product\
The best startups don’t need a perfect LinkedIn strategy. They need a product so good that people can’t shut up about it.Tesla didn’t become Tesla because Musk wrote aspirational posts. (Tesla happened, then people started dissecting every Elon tweet.) Superhuman didn’t win because they ranked for “best email productivity tool”.Notion didn’t explode because they had a “high-value” newsletter.\
They each built something so good that content wasn’t necessary.\
==But content marketing makes you spend more time talking about your product than making it actually worth talking about.== If you’re creating Canva graphics explaining why your product is amazing, ask yourself: Why isn’t it obvious already?You’re Playing To Your Weakness\
If you’re a tech founder, chances are your biggest strength isn’t crafting “valuable content.” But content marketing throws you into the most crowded, attention-starved battlefield on earth that’s populated by all the creative genius humanity has to offer: the Internet. \
Content marketing pulls you away from your strengths. It forces you into a slow, bloated, competitive game where you’re fighting against seasoned creators and media companies—people whose  is content. And you’re out here thinking you can compete?\
While you’re wasting time learning how to be a copywriter, you’re neglecting the strengths that gave you the guts to build a company in the first place. \
Content marketing is a wait-and-see game.Do this long enough, and you'll start convincing yourself that the reason you're not making progress is because you haven’t published enough. So, you rinse and repeat, cranking out more content—and waiting for something to happen. I promise you, nothing will. ==Unless you’re a media company, the real problem won’t be solved through content volume==. Look at the Airbnb guys. They tackled crappy check-in rates by bringing their cameras into homes and taking better photos, not by blogging about the future of holiday stays. \
Founders love content marketing because it’s a safe way to feel productive without doing the uncomfortable shit. Well, if you want to stay away from the uncomfortable, you should consider going back to your desk job. You’re Sprinting For The Wrong Finish Line\
==Content marketing subtly shifts the goalpost of what success looks like.== Instead of $$$ in the bank, founders start measuring social impressions. Instead of customers using the product, they’re tracking newsletter signups. Instead of winning market share, they’re focused on LinkedIn comments.\
 Awareness and engagement doesn’t pay the bills. Real growth is customers in, cash in. If you don’t know the difference between attention and action, content marketing is eating your brain. Are you really growing, or have you just gotten more people to consume free content?You’re Killing Your Brand\
Weird, right? You’d think viral content will help you build your brand. Nope, because going viral means you’ve got to jump on every buzzword, every new format, and every other trend because it’s what everyone’s talking about. Well, trends don’t care two cents about what your brand stands for. \
Every time you chase a trend, you’re stretching your brand thin, trying to force it into a mold that doesn’t fit. You’re watering down your purpose for a quick hit, all while ignoring the fact that ==building a memorable brand means sticking to your guns, even if it’s what the algorithm despises.==Inbound’s Still In. You Just Don’t Need Content To Do It.The content marketing trend is a byproduct of people misunderstanding HubSpot’s whole inbound marketing thing. \
  Inbound was and still is genius, but inbound marketing was never about “just create content.” It was about ==creating undeniable value before asking for the sale.== (That, and not relying on paid ads for awareness.) \
HubSpot made content work because information was scarce in 2006—they gave away what no one else would. Today, everyone’s got an “ultimate guide” to something. And if they don’t, GPT can make something up based on a prompt. The problem now isn’t lack of content. \
Here’s how to do inbound marketing in the post-content age.1. Figure Out If Content Even Makes Sense for You\
Before you waste another hour on a blog post, ask yourself:Is my audience actively looking for information, but struggling to find it? Is there a knowledge gap that makes them hesitate to buy? Are my competitors hoarding insights instead of sharing them?\
If the answer is yes, fine. Write. Publish. Own the space. If the answer is no, STOP. No one needs your “Top 10 Trends” list. They have Google and chatbots for that.\
Know what’s better than teaching people how to do something? ***Making sure they never have to learn it in the first place. ***\
You can write another 1,500-word thesis. Or, you can build something—a tool, a feature, an experience—that solves the same problem but without needing people to read a bunch of text. Look at the content that’s dominating your space—the posts that get all the likes, shares, and comments. Then ask yourself: How can I make this educational BS obsolete?Here’s a thought: Tell your audience exactly how much time and money you’re burning on content—and then tell them you’re ditching it to build something free that actually helps them. "We were going to spend $20K this quarter on content, but instead, we’re using it to build a free AI-powered email draft generator for sales teams. Tell us what you need, and we’ll make it happen." \
People will talk about it. They’ll share it, they’ll use it, and they’ll remember the one who actually did something instead of just saying something.3. Content Isn’t The Only Thing That Gets Organic Attention\
The other principle of inbound marketing?  Yes, content generates organic awareness and conversation. So do a lot of other things. . This is a last resort because stunts could backfire (but for a startup, any PR is good PR), but at least you’re exercising your creative brain cells. If you have to force people to see your content, why not just skip the middle step and force them to see your product instead? \
Stop badgering GPT for content ideas, and use that time to hijack attention—starting fights on X, sitting on the doorsteps of potential clients for weeks on end with a cardboard sign, anything that gets people talking about your company now, not in six months when Google decides to bless you with traffic.\
(Tip: When pulling a stunt, ==just make sure it barely costs you anything to execute.== That way you won’t hate yourself if you don’t get returns.) Final Thoughts: Why Are You Marketing Like a Coward?\
You built something from nothing. You ignored the safe path, told the doubters to shove it, and bet on yourself. You made a move.\
So where’d that nerve go?The second it came time to market, you swapped instinct for “best practices.” \
  ==Innovation doesn’t come from following rules, and attention won’t be earned through compliance.== \
  It’s taken. It’s ripped out of the market’s hands by people willing to do what no one else is doing.Treat marketing like you treat your product—or get used to being ignored.]]></content:encoded></item><item><title>Police Union Still Insists NY Misconduct Records Are Secret Despite Court Decisions Saying Otherwise</title><link>https://www.techdirt.com/2025/02/14/police-union-still-insists-ny-misconduct-records-are-secret-despite-court-decisions-saying-otherwise/</link><author>Tim Cushing</author><category>tech</category><pubDate>Fri, 14 Feb 2025 18:55:00 +0000</pubDate><source url="https://www.techdirt.com/">Techdirt</source><content:encoded><![CDATA[When you’re playing with house money, playing one losing hand after another isn’t a sign of tenacity. It’s just a way of signaling you can’t be trusted with the house’s money.That’s why appeal after appeal from government entities don’t tend to indicate that they’re in the right. It just means they don’t care how much money they spend because it’s not coming from their own pockets. The same principle applies to police unions. The money they use to litigate comes from the officers they’re supposed to be serving. At some point, you’d think they would experience some fleeting shame against lighting their contributors’ money on fire repeatedly, but the sad fact is that most cops represented by New York’s Police Benevolent Association (PBA) are more than happy to keep burning their own money if it means there’s even the most remote chance their past misdeeds won’t come back to haunt them.There have been plenty of legal challenges against the repeal of 50-a, the shorthand that refers to the law that — up until June 2020 — gave law enforcement agencies the option to withhold misconduct records requested by members of the public.The Police Benevolent Association of the City of New York asked a seven-judge panel of the New York Court of appeals to apply retroactivity analysis on the question of whether or not state lawmakers intended a confidentiality provision enacted in 1976 to be conferred to police officers as a vested right after it was repealed in 2020.“We’re just stuck, at best, with a very ambiguous record,” Police Benevolent Association lawyer Matthew Daly told the appeals court on Thursday afternoon. “Policy arguments can be made on both sides — there are policy arguments for disclosure, but there’s also policy to protect rights.”Fighting off document requests from the New York Post, the union says the mandate to retroactively make those old records public would infringe vested rights of police officers and other covered employees “who for more than four decades relied on the statutory confidentiality in deciding how to respond to disciplinary matters.”PBA attorney Matthew Daly is, at best, being disingenuous here. The PBA is asking this court to basically codify something that isn’t present in the law: a limitation that prevents disclosure of records generated before the law’s repeal in 2020. As the court pointed out in late 2023, there’s nothing in the law that forbids access to records created prior to this repeal. By their nature, FOIL requests seek records that were generated prior to the request date. In amending the Public Officers Law to provide for the disclosure of records relating to law enforcement disciplinary proceedings, the Legislature did not limit disclosure under FOIL to records generated after June 12, 2020, and we will not impose such a limitation ourselves. Yet, the PBA persists, guided by little more than its access to other people’s money and a burning desire to progress the rot in its barrel of apples by pretending there’s no way the legislature intended to make this law retroactive. It’s a stupid point to make, as NY Post attorney, Jeremy Chase, told the court:“The Legislature, if they wanted to carve out this period from 1976 to June 2020, they easily could have done that, they didn’t do that,” he said.This leaves the PBA as the last bulwark against… um… serving the public trust. If the PBA (or the NYPD officers it represents) actually cared about rebuilding trust and setting it back on the path towards earning the nickname “New York’s Finest,” it wouldn’t be blowing cash in court trying to keep its dirty laundry buried under empty body cam boxes in the back of the metaphorical closet. Instead, it has chosen to spend nearly a half-decade fighting this small move towards greater transparency despite having lost at every judicial level to this point. ]]></content:encoded></item><item><title>Daily Deal: Linux/UNIX Training Bundle</title><link>https://www.techdirt.com/2025/02/14/daily-deal-linux-unix-training-bundle/</link><author>Daily Deal</author><category>tech</category><pubDate>Fri, 14 Feb 2025 18:45:29 +0000</pubDate><source url="https://www.techdirt.com/">Techdirt</source><content:encoded><![CDATA[Linux and UNIX operating systems have become increasingly popular in commercial computing environments. Due to their rapid growth in today’s businesses, Linux/UNIX administrators have also become very much in demand. This Linux/UNIX Training Bundle will help you learn the knowledge and skills to install, configure, & support a Linux/UNIX server, and more. It’s on sale for $50.Note: The Techdirt Deals Store is powered and curated by StackCommerce. A portion of all sales from Techdirt Deals helps support Techdirt. The products featured do not reflect endorsements by our editorial team.]]></content:encoded></item><item><title>Lead Asahi Linux Developer Quits Days After Leaving Kernel Maintainer Role</title><link>https://linux.slashdot.org/story/25/02/14/1842251/lead-asahi-linux-developer-quits-days-after-leaving-kernel-maintainer-role?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>msmash</author><category>slashdot</category><category>linux</category><pubDate>Fri, 14 Feb 2025 18:42:00 +0000</pubDate><source url="https://linux.slashdot.org/">Slashdot - Linux</source><content:encoded><![CDATA[Hector Martin has resigned as the project lead of Asahi Linux, weeks after stepping down from his role as a Linux kernel maintainer for Apple ARM support. His departure from Asahi follows a contentious exchange with Linus Torvalds over development processes and social media advocacy. After quitting kernel maintenance earlier this month, the conflict escalated when Martin suggested that "shaming on social media" might be necessary to effect change. 

Torvalds sharply rejected this approach, stating that "social media brigading just makes me not want to have anything at all to do with your approach" and suggested that Martin himself might be the problem. In his final resignation announcement from Asahi, Martin wrote: "I no longer have any faith left in the kernel development process or community management approach." 

The dispute reflects deeper tensions in the Linux kernel community, particularly around the integration of Rust code. It follows the August departure of another key Rust for Linux maintainer, Wedson Almeida Filho from Microsoft. According to Sonatype's research, more than 300,000 open source projects have slowed or halted updates since 2020.]]></content:encoded></item><item><title>Dynamic Triple Buffering Merged For GNOME 48</title><link>https://www.phoronix.com/news/GNOME-48-Triple-Buffering</link><author>Michael Larabel</author><category>tech</category><pubDate>Fri, 14 Feb 2025 18:35:10 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[As quite a Valentine's Day treat, the long-in-development dynamic triple buffering support for GNOME's Mutter compositor was just merged ahead of next month's GNOME 48 desktop release!..]]></content:encoded></item><item><title>Jay Xiao on the Power of Technology and Surety Through SuretyNow</title><link>https://hackernoon.com/jay-xiao-on-the-power-of-technology-and-surety-through-suretynow?source=rss</link><author>Jon Stojan Journalist</author><category>tech</category><pubDate>Fri, 14 Feb 2025 18:31:04 +0000</pubDate><source url="https://hackernoon.com/">Tech - HackerNoon</source><content:encoded><![CDATA[\
 has always believed in the power of technology to improve people's lives. As a millennial, Xiao witnessed life before the internet as we know it and how much easier things became after it became more accessible to everyday people. He is now the co-founder and president of SuretyNow, a company that works to help protect the public from dishonest businesses.A Heart and Talent for Tech\
After graduating high school, Xiao attended Queen's University in Canada for commerce and computer science. Though his original goal was to go into consulting and finance, he made a decision to switch fully into tech after an unfulfilling internship at an asset management firm his first summer. During this time, he was balancing the internship while working on a startup with friends, eventually leading him to leave the asset management internship behind to dedicate his time to that startup.\
However, Xiao did not know how to code, so he began taking computer science classes to expand his horizons. He interned at a Toronto startup called Nuology and then parlayed that internship into full-time roles at Google, where he worked on the Google Ads and Google Stadia teams.Making an Impact with the Biggest Names in TechBreaking into the tech field was difficult for Xiao, partly because he was new to the industry and didn't go to a school with a strong history of tech company recruitment. As a result, he worked to better himself in technology through education and went from zero tech experience to interning with Google within three years. At Google Stadia, he helped build Stadia's publisher analytics platform from zero to launch. He helped facilitate an analytics platform used by around 30 publishers at its peak, including Ubisoft and Electronic Arts.As the driving force behind SuretyNow, Xiao's role extends far beyond the title of co-founder and president. He single-handedly built the company's website, developed the internal tooling and infrastructure, and now manages multiple teams. His strategic vision and hands-on approach have been instrumental in the company's success, making it a prime example of his entrepreneurial prowess.\
At SuretyNow, Xiao says that their agents can produce two times the industry average due to the automation they've built to make them more efficient. SuretyNow serves businesses who wish to buy surety to work like other modern tools they love, all with fast and affordable customer service. With exceptional customer service and a commitment to innovation through technology, they aim to educate and deliver peace of mind with their expertise in surety.\
Xiao's future goals for SuretyNow are simple: to lead and inspire others by hiring and mentoring interns. Ultimately, Xiao wants to make buying surety bonds and insurance as easy as purchasing a keychain on Amazon—a fact that can be difficult for some and challenging for others.]]></content:encoded></item><item><title>Trump Admin Adds Note Rejecting ‘Gender Ideology’ on Sites Court Ordered Them to Restore</title><link>https://www.404media.co/trump-admin-adds-note-rejecting-gender-ideology-on-sites-court-ordered-them-to-restore/</link><author>Emanuel Maiberg</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/CleanShot-2025-02-14-at-10.31.48@2x.png" length="" type=""/><pubDate>Fri, 14 Feb 2025 18:25:45 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[After being forced by a court order to  about gender and diversity to government websites, the Trump administration has added a note to the top of those pages saying “Any information on this page promoting gender ideology is extremely inaccurate, and disconnected from the immutable biological reality that there are two sexes, male and female.”Per a court order, HHS is required to restore this website as of February 14, 2025 at 11:59 p.m. Any information on this page promoting gender ideology is extremely inaccurate, and disconnected from the immutable biological reality that there are two sexes, male and female. The Trump Administration rejects gender ideology and condemns the harms it causes to children, by promoting their chemical and surgical mutilation, and to women, by depriving them of their dignity, safety, well-being, and opportunities. This page does not reflect biological reality and therefore the Administration and this Department rejects it.The note essentially seems like a way for the current administration to legally comply with a court order while still signaling that it entirely rejects any government funded or endorsed research or policy sympathetic to LGBTQ+ community and diversity, equity, and inclusion, which Trump and Elon Musk’s Department of Government Efficiency have been purging from government websites. Earlier this week,  that a federal judge ordered the Department of Health and Human Services, Centers for Disease Control, and Food and Drug Administration to restore several webpages they removed as a result of Trump’s executive order attacking diversity, equity, and inclusion. The agencies were given until 11:59 p.m. on February 11 to restore the webpages. The court ordered the administration to restore the webpages “to their versions as of January 30, 2025, meaning they were supposed to revert the webpages to what they looked like on January 30 with no changes. The versions that have been restored now have this additional disclaimer.A joint status update filed Thursday by lawyers for the Department of Justice and the Public Citizen Litigation Group says that the government has provided the court with a list of websites that it has restored, though the list of websites is not available. It also specifically says that the government is refusing to restore the website reproductiverights.gov: “Defendants have objected to restoring the website ‘reproductiverights.gov.’ Plaintiff’s counsel is conferring with their client,” it says.“Plaintiff’s lists include websites from Department of Health and Human Services (HHS) components other than the Centers for Disease Control and Prevention and the Food and Drug Administration. The parties disagree about whether such websites properly fall within the scope of the Order. However, given Plaintiff’s forthcoming amended complaint and to avoid further emergency motions practice, Defendants will restore those websites consistent with the Order,” it adds.]]></content:encoded></item><item><title>OpenAI: The Age of AI Is Here!</title><link>https://www.youtube.com/watch?v=97kQRYwL3P0</link><author>Two Minute Papers</author><category>dev</category><category>ai</category><enclosure url="https://www.youtube.com/v/97kQRYwL3P0?version=3" length="" type=""/><pubDate>Fri, 14 Feb 2025 18:18:07 +0000</pubDate><source url="https://www.youtube.com/channel/UCbfYPyITQ-7l4upoX8nvctg">Two Minute Papers</source><content:encoded><![CDATA[❤️ Check out Lambda here and sign up for their GPU Cloud: https://lambdalabs.com/papers

📝 The paper "Competitive Programming with Large Reasoning Models" is available here:
https://arxiv.org/abs/2502.06807

📝 My paper on simulations that look almost like reality is available for free here:
https://rdcu.be/cWPfD 

Or this is the orig. Nature Physics link with clickable citations:
https://www.nature.com/articles/s41567-022-01788-5

🙏 We would like to thank our generous Patreon supporters who make Two Minute Papers possible:
Benji Rabhan, B Shang, Christian Ahlin, Gordon Child, John Le, Juan Benet, Kyle Davis, Loyal Alchemist, Lukas Biewald, Michael Tedder, Owen Skarpness, Richard Sundvall, Steef, Taras Bobrovytsky, Thomas Krcmar, Tybie Fitzhugh, Ueli GallizziIf you wish to appear here or pick up other perks, click here: https://www.patreon.com/TwoMinutePapers

My research: https://cg.tuwien.ac.at/~zsolnai/
X/Twitter: https://twitter.com/twominutepapers
Thumbnail design: Felícia Zsolnai-Fehér - http://felicia.hu]]></content:encoded></item><item><title>DOGE’s ‘Genius’ Coders Launch Website So Full Of Holes, Anyone Can Write To It</title><link>https://www.techdirt.com/2025/02/14/doges-genius-coders-launch-website-so-full-of-holes-anyone-can-write-to-it/</link><author>Mike Masnick</author><category>tech</category><pubDate>Fri, 14 Feb 2025 17:25:00 +0000</pubDate><source url="https://www.techdirt.com/">Techdirt</source><content:encoded><![CDATA[If you want to write something on the U.S. government’s official DOGE website, apparently you can just… do that. Not in the usual way of submitting comments through a form, mind you, but by directly injecting content into their database. This seems suboptimal.The story here is that DOGE — Elon Musk’s collection of supposed coding “geniuses” brought in to “disrupt” government inefficiency — finally launched their official website. And what they delivered is a masterclass in how not to build government infrastructure. One possibility is that they’re brilliant disruptors breaking all the rules to make things better. Another possibility is that they have no idea what they’re doing.The latter seems a lot more likely.Last week, it was reported that the proud racist 25-year-old Marko Elez had been given admin access and was pushing untested code to the US government’s $6 trillion/year payment system. While the Treasury Department initially claimed (including in court filings!) that Elez had “read-only” access, others reported he had write access. After those reports came out, the Treasury Dept. “corrected” itself and said Elez had been “accidentally” given write privileges for the payments database, but only for the data, not the code. Still, they admitted that while they had put in place some security protections, it’s possible that Elez did copy some private data which “may have occasionally included screenshots of payment systems data or records.”Now, you might think that having a racist twenty-something with admin access to trillion-dollar payment systems would concern people. But Musk’s defenders had a compelling counterargument: he must be a genius! Because… well, because Musk hired him, and Musk only hires geniuses. Or so we’re told.The DOGE team’s actual coding prowess is turning out to be quite something. First, they decided that government transparency meant hiding everything from FOIA requests. When questioned about this interesting interpretation of “transparency,” Musk explained that actually DOGE was being super transparent by putting everything on their website and ExTwitter account.There was just one small problem with this explanation. At the time he said it, the DOGE website looked like this:That was it. That was the whole website.On Thursday, they finally launched a real website. Sort of. If by “real website” you mean “a collection of already-public information presented in misleading ways by people who don’t seem to understand what they’re looking at.” But that’s not even the interesting part.These supposed technical geniuses managed to build what might be the least secure government website in history. Let’s start with something basic: where does the website actually live? According to Wired, the source code actually tells search engines that ExTwitter, not DOGE.gov, is the real home of this government information:A WIRED review of the page’s source code shows that the promotion of Musk’s own platform went deeper than replicating the posts on the homepage. The source code shows that the site’sA canonical tag is a snippet of code that tells search engines what the authoritative version of a website is. It is typically used by sites with multiple pages as a search engine optimization tactic, to avoid their search ranking being diluted.In DOGE’s case, however, the code is informing search engines that when people search for content found on, they should not show those pages in search results, but should instead display the posts on X.“It is promoting the X account as the main source, with the website secondary,” Declan Chidlow,, tells WIRED. “This isn’t usually how things are handled, and it indicates that the X account is taking priority over the actual website itself.”If you’re not a web developer, here’s what that means: When you build a website, you can tell search engines “hey, if you find copies of this content elsewhere, this version here is the real one.” It’s like telling Google “if someone copied my site, mine is the original.”But DOGE did the opposite. They told search engines “actually, ExTwitter has the real version of this government information. Our government website is just a copy.” Which is… an interesting choice for a federal agency? It’s a bit like the Treasury Department saying “don’t look at our official reports, just check Elon’s tweets.”You might think that a government agency directing people away from its official website and toward the private company of its leader would raise some conflict-of-interest concerns. And you’d be right!But wait, it gets better. Or worse. Actually, yeah, it’s worse.Who built this government website? Through some sloppy coding, security researcher Sam Curry figured out it was DOGE employee Kyle Shutt. The same Kyle Shutt who, according to Drop Site News, has admin access to the FEMA payments system. The same Kyle Shutt who used the exact same Cloudflare ID to build Musk’s America PAC Trump campaign website. Because why maintain separate secure credentials for government systems and political campaigns when you can just… not do that?But the real cherry on top came Thursday when people discovered something amazing about the DOGE site database:  Not “anyone with proper credentials.” Not “anyone who passes security checks.” Just… anyone. As 404 Media reported, if you know basic database operations, you too can be a government website administrator:The doge.gov website that was spun up to track Elon Musk’s cuts to the federal government is insecure and pulls from a database that can be edited by anyone, according to two separate people who found the vulnerability and shared it with 404 Media. One coder added at least two database entries that are visible on the live site and say “this is a joke of a .gov site” and “THESE ‘EXPERTS’ LEFT THEIR DATABASE OPEN -roro.” While I imagine those will be taken down shortly, for now, the insertions are absolutely visible:Look, there’s a reason we called this whole thing a cyberattack. When someone takes over your computer systems and leaves them wide open to anyone who wants to mess with them, we usually don’t call that “disruption” or “innovation.” We call it a cybersecurity breach.“Feels like it was completely slapped together,” they added. “Tons of errors and details leaked in the page source code.”Both sources said that the way the site is set up suggests that it is not running on government servers.has its codebase, probably through GitHub or something,” the other developer who noticed the insecurity said. “They’re deploying the website on Cloudflare Pages from their codebase, andis a custom domain that theirURL is set to. So rather than having a physical server or even something like Amazon Web Services, they’re deploying using Cloudflare Pages which supports custom domains.”Here’s the thing about government computer systems: They’re under constant attack from foreign adversaries. Yes, they can be inefficient. Yes, they can be bloated. But you know what else they usually are? Not completely exposed to the entire internet. It turns out that some of that inefficient “bureaucracy” involves basic things like “security” and “not letting random people write whatever they want in federal databases.”This isn’t some startup where “move fast and break things” is a viable strategy. This is the United States government. And it’s been handed over to people whose main qualification appears to be “posts spicy memes on 4chan.” The implications go far beyond embarrassing database injections — this level of technical negligence in federal systems creates genuine national security concerns. When your “disruption” involves ignoring decades of hard-learned lessons about government systems security, you’re not innovating — you’re inviting disaster.]]></content:encoded></item><item><title>Friday Squid Blogging: Squid the Care Dog</title><link>https://www.schneier.com/blog/archives/2025/02/friday-squid-blogging-squid-the-care-dog.html</link><author>Bruce Schneier</author><category>infosec</category><category>blog</category><pubDate>Fri, 14 Feb 2025 17:05:38 +0000</pubDate><source url="https://www.schneier.com/">Schneider on Security</source><content:encoded><![CDATA[The Vanderbilt University Medical Center has a pediatric care dog named “Squid.”]]></content:encoded></item><item><title>Upcoming Speaking Engagements</title><link>https://www.schneier.com/blog/archives/2025/02/upcoming-speaking-engagements-43.html</link><author>Bruce Schneier</author><category>infosec</category><category>blog</category><pubDate>Fri, 14 Feb 2025 17:01:21 +0000</pubDate><source url="https://www.schneier.com/">Schneider on Security</source><content:encoded><![CDATA[This is a current list of where and when I am scheduled to speak:I’m speaking at Boskone 62 in Boston, Massachusetts, USA, which runs from February 14-16, 2025. My talk is at 4:00 PM ET on the 15th.]]></content:encoded></item><item><title>Video Friday: PARTNR</title><link>https://spectrum.ieee.org/video-friday-partnr</link><author>Evan Ackerman</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjQ5NjM2MS9vcmlnaW4ucG5nIiwiZXhwaXJlc19hdCI6MTc0MDk5OTA2Nn0.hMaiDCMfAle2DiX2_S3CZKODrsXEYRxu4BQGU0eByc4/image.png?width=600" length="" type=""/><pubDate>Fri, 14 Feb 2025 17:00:04 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[Your weekly selection of awesome robot videos]]></content:encoded></item><item><title>Support the open source projects you love this Valentine’s Day</title><link>https://github.blog/open-source/support-the-open-source-projects-you-love-this-valentines-day/</link><author>Martin Woodward</author><category>official</category><pubDate>Fri, 14 Feb 2025 17:00:04 +0000</pubDate><source url="https://github.blog/">Github Blog</source><content:encoded><![CDATA[While everyone likes flowers and chocolates, why not show your love for your favorite open source projects this Valentine’s and give appreciation to the maintainers who keep them running?Many of the open source projects we rely on every day are maintained by dedicated volunteers. Sponsoring projects isn’t just about altruism, it’s about investing in the future. Many maintainers work on open source projects in their spare time. Sponsorships can help them dedicate more time to the projects you depend on. With financial support, maintainers can help cover costs such as development and hosting.When you sponsor a maintainer, you’re helping them continue their work and letting them know you value the creativity and love they’ve poured into their project. For this Valentine’s Day, let’s show love to the maintainers who keep our favorite projects alive and thriving.The benefits of financial sponsorshipSponsorship is a tangible way to show support for the open source community. It can be a huge morale boost, as well as bring visibility and validation. Sponsored projects often gain more attention, leading to a virtuous cycle of more contributors and users, which results in better software for everyone.Getting started: How to best invest in open sourceIdentify critical dependencies:Review your project’s dependencies to identify which open source libraries and tools are crucial to your operations. If you use tools like npm, pip, or maven, you can review their dependencies and prioritize which are critical to your project’s success.  Evaluate the project activity: Check the recent and trending activity of repositories and look for signs of contributions, shipped features, bug fixes, active maintenance, and community engagement. Helpful metrics like recent commits, issue resolution, and community engagement are all good markers for where funding could help. Projects with a high impact but low funding could be great candidates to prioritize for sponsorship.   Take the opportunity to look at the issues and contribution guidelines. Try to understand their funding needs and how your support makes a difference. But also consider investing in ways beyond just financial support. You could provide bug fixes if you feel confident in your code. You could also take the time to tell someone about the project and why you think it’s awesome. Maintainers can show love for their sponsors as well. Sponsors appreciate knowing their contribution is making a difference. Whether it’s a simple mention on social media to acknowledge their contribution, featuring them on your GitHub Sponsors profile, exclusive updates and behind-the-scenes insights about your project and community, or even a brief personalized thank-you message, tokens of appreciation can help bring more funding your way.This Valentine’s Day, let’s show our favorite projects a bit more appreciation. Whether it’s a heartfelt contribution to fix bugs or docs, spreading the word about why it’s a great project and helping people use it, or a sweet one-time donation, every bit helps keep our beloved digital world turning.Ready to start sponsoring? Visit GitHub Sponsors and find the projects that matter most to you.Happy Valentine’s Day to all the open source contributors and supporters out there! And remember, you don’t need to wait for a special occasion like Valentine’s Day to show your appreciation for maintainers—every day is a perfect day to support open source! 💖]]></content:encoded></item><item><title>Roadmap to Becoming a Data Scientist, Part 4: Advanced Machine Learning</title><link>https://towardsdatascience.com/roadmap-to-becoming-a-data-scientist-part-4-advanced-machine-learning/</link><author>Vyacheslav Efimov</author><category>dev</category><category>ai</category><pubDate>Fri, 14 Feb 2025 17:00:00 +0000</pubDate><source url="https://towardsdatascience.com/">Towards Data Science</source><content:encoded><![CDATA[Data science is undoubtedly one of the most fascinating fields today. Following significant breakthroughs in machine learning about a decade ago, data science has surged in popularity within the tech community. Each year, we witness increasingly powerful tools that once seemed unimaginable. Innovations such as the , , the Retrieval-Augmented Generation (RAG) framework, and state-of-the-art  — including  — have had a profound impact on our world.However, with the abundance of tools and the ongoing hype surrounding AI, it can be overwhelming — especially for beginners — to determine which skills to prioritize when aiming for a career in data science. Moreover, this field is highly demanding, requiring substantial dedication and perseverance.The first three parts of this series outlined the necessary skills to become a data scientist in three key areas: math, software engineering, and machine learning. While knowledge of classical Machine Learning and neural network algorithms is an excellent starting point for aspiring data specialists, there are still many important topics in machine learning that must be mastered to work on more advanced projects.This article will focus solely on the math skills necessary to start a career in Data Science. Whether pursuing this path is a worthwhile choice based on your background and other factors will be discussed in a separate article.The importance of learning evolution of methods in machine learningThe section below provides information about the evolution of methods in natural language processing (NLP).In contrast to previous articles in this series, I have decided to change the format in which I present the necessary skills for aspiring data scientists. Instead of directly listing specific competencies to develop and the motivation behind mastering them, I will briefly outline the most important approaches, presenting them in chronological order as they have been developed and used over the past decades in machine learning.The reason is that I believe it is crucial to study these algorithms from the very beginning. In machine learning, many new methods are built upon older approaches, which is especially true for NLP and computer vision.For example, jumping directly into the implementation details of modern large language models (LLMs) without any preliminary knowledge may make it very difficult for beginners to grasp the motivation and underlying ideas of specific mechanisms.Given this, in the next two sections, I will highlight in  the key concepts that should be studied.Natural language processing (NLP) is a broad field that focuses on processing textual information. Machine learning algorithms cannot work directly with raw text, which is why text is usually preprocessed and converted into numerical vectors that are then fed into neural networks.Before being converted into vectors, words undergo , which includes simple techniques such as , stemming, lemmatization, normalization, or removing . After preprocessing, the resulting text is encoded into . Tokens represent the smallest textual elements in a collection of documents. Generally, a token can be a part of a word, a sequence of symbols, or an individual symbol. Ultimately, tokens are converted into numerical vectors.The  method is the most basic way to encode tokens, focusing on counting the frequency of tokens in each document. However, in practice, this is usually not sufficient, as it is also necessary to account for token importance — a concept introduced in the  and  methods. While TF-IDF improves upon the naive counting approach of bag of words, researchers have developed a completely new approach called embeddings. are numerical vectors whose components preserve the semantic meanings of words. Because of this, embeddings play a crucial role in NLP, enabling input data to be trained or used for model inference. Additionally, embeddings can be used to compare text similarity, allowing for the retrieval of the most relevant documents from a collection.Embeddings can also be used to encode other unstructured data, including images, audio, and videos.As a field, NLP has been evolving rapidly over the last 10–20 years to efficiently solve various text-related problems. Complex tasks like text translation and text generation were initially addressed using recurrent neural networks (RNNs), which introduced the concept of memory, allowing neural networks to capture and retain key contextual information in long documents.Although RNN performance gradually improved, it remained suboptimal for certain tasks. Moreover, RNNs are relatively slow, and their sequential prediction process does not allow for parallelization during training and inference, making them less efficient.Additionally, the original Transformer architecture can be decomposed into two separate modules:  and . Both of these form the foundation of the most state-of-the-art models used today to solve various NLP problems. Understanding their principles is valuable knowledge that will help learners advance further when studying or working with other large language models (LLMs).When it comes to LLMs, I strongly recommend studying the evolution of at least the first three GPT models, as they have had a significant impact on the AI world we know today. In particular, I would like to highlight the concepts of  and , introduced in GPT-2, which enable LLMs to solve text generation tasks without explicitly receiving any training examples for them.Another important technique developed in recent years is retrieval-augmented generation (RAG). The main limitation of LLMs is that they are only aware of the context used during their training. As a result, they lack knowledge of any information beyond their training data.The retriever converts the input prompt into an embedding, which is then used to query a vector database. The database returns the most relevant context based on the similarity to the embedding. This retrieved context is then combined with the original prompt and passed to a generative model. The model processes both the initial prompt and the additional context to generate a more informed and contextually accurate response.A good example of this limitation is the first version of the ChatGPT model, which was trained on data up to the year 2022 and had no knowledge of events that occurred from 2023 onward.To address this limitation, OpenAI researchers developed a RAG pipeline, which includes a constantly updated database containing new information from external sources. When ChatGPT is given a task that requires external knowledge, it queries the database to retrieve the most relevant context and integrates it into the final prompt sent to the machine learning model.The goal of distillation is to create a smaller model that can imitate a larger one. In practice, this means that if a large model makes a prediction, the smaller model is expected to produce a similar result.In the modern era, LLM development has led to models with millions or even billions of parameters. As a consequence, the overall size of these models may exceed the hardware limitations of standard computers or small portable devices, which come with many constraints.Quantization is the process of reducing the memory required to store numerical values representing a model’s weights.This is where optimization techniques become particularly useful, allowing LLMs to be compressed without significantly compromising their performance. The most commonly used techniques today include ,, and .Pruning refers to discarding the least important weights of a model.Regardless of the area in which you wish to specialize, knowledge of  is a must-have skill! Fine-tuning is a powerful concept that allows you to efficiently adapt a pre-trained model to a new task.Fine-tuning is especially useful when working with very large models. For example, imagine you want to use BERT to perform semantic analysis on a specific dataset. While BERT is trained on general data, it might not fully understand the context of your dataset. At the same time, training BERT from scratch for your specific task would require a massive amount of resources.Here is where fine-tuning comes in: it involves taking a pre-trained BERT (or another model) and freezing some of its layers (usually those at the beginning). As a result, BERT is retrained, but this time only on the new dataset provided. Since BERT updates only a subset of its weights and the new dataset is likely much smaller than the original one BERT was trained on, fine-tuning becomes a very efficient technique for adapting BERT’s rich knowledge to a specific domain.Fine-tuning is widely used not only in NLP but also across many other domains.As the name suggests,  involves analyzing images and videos using machine learning. The most common tasks include image classification, object detection, image segmentation, and generation.Most CV algorithms are based on neural networks, so it is essential to understand how they work in detail. In particular, CV uses a special type of network called convolutional neural networks (CNNs). These are similar to fully connected networks, except that they typically begin with a set of specialized mathematical operations called .In simple terms, convolutions act as filters, enabling the model to extract the most important features from an image, which are then passed to fully connected layers for further analysis.The next step is to study the most popular CNN architectures for classification tasks, such as AlexNet, VGG, Inception, ImageNet, and .Speaking of the object detection task, the  algorithm is a clear winner. It is not necessary to study all of the dozens of versions of YOLO. In reality, going through the original paper of the first YOLO should be sufficient to understand how a relatively difficult problem like object detection is elegantly transformed into both classification and regression problems. This approach in YOLO also provides a nice intuition on how more complex CV tasks can be reformulated in simpler terms.While there are many architectures for performing image segmentation, I would strongly recommend learning about , which introduces an encoder-decoder architecture.Finally, image generation is probably one of the most challenging tasks in CV. Personally, I consider it an optional topic for learners, as it involves many advanced concepts. Nevertheless, gaining a high-level intuition of how generative adversial networks (GAN) function to generate images is a good way to broaden one’s horizons.In some problems, the training data might not be enough to build a performant model. In such cases, the data augmentation technique is commonly used. It involves the artificial generation of training data from already existing data (images). By feeding the model more diverse data, it becomes capable of learning and recognizing more patterns.It would be very hard to present in detail the Roadmaps for all existing machine learning domains in a single article. That is why, in this section, I would like to briefly list and explain some of the other most popular areas in data science worth exploring.First of all, recommender systems (RecSys) have gained a lot of popularity in recent years. They are increasingly implemented in online shops, social networks, and streaming services. The key idea of most algorithms is to take a large initial matrix of all users and items and decompose it into a product of several matrices in a way that associates every user and every item with a high-dimensional embedding. This approach is very flexible, as it then allows different types of comparison operations on embeddings to find the most relevant items for a given user. Moreover, it is much more rapid to perform analysis on small matrices rather than the original, which usually tends to have huge dimensions. often goes hand in hand with RecSys. When a RecSys has identified a set of the most relevant items for the user, ranking algorithms are used to sort them to determine the order in which they will be shown or proposed to the user. A good example of their usage is search engines, which filter query results from top to bottom on a web page.Closely related to ranking, there is also a  problem that aims to optimally map objects from two sets, A and B, in a way that, on average, every object pair is mapped “well” according to a matching criterion. A use case example might include distributing a group of students to different university disciplines, where the number of spots in each class is limited. is an unsupervised machine learning task whose objective is to split a dataset into several regions (clusters), with each dataset object belonging to one of these clusters. The splitting criteria can vary depending on the task. Clustering is useful because it allows for grouping similar objects together. Moreover, further analysis can be applied to treat objects in each cluster separately.The goal of clustering is to group dataset objects (on the left) into several categories (on the right) based on their similarity. is another unsupervised problem, where the goal is to compress an input dataset. When the dimensionality of the dataset is large, it takes more time and resources for machine learning algorithms to analyze it. By identifying and removing noisy dataset features or those that do not provide much valuable information, the data analysis process becomes considerably easier. is an area that focuses on designing algorithms and data structures (indexes) to optimize searches in a large database of embeddings (vector database). More precisely, given an input embedding and a vector database, the goal is to  find the most similar embedding in the database relative to the input embedding.The goal of similarity search is to approximately find the most similar embedding in a vector database relative to a query embedding.The word “approximately” means that the search is not guaranteed to be 100% precise. Nevertheless, this is the main idea behind similarity search algorithms — sacrificing a bit of accuracy in exchange for significant gains in prediction speed or data compression. involves studying the behavior of a target variable over time. This problem can be solved using classical tabular algorithms. However, the presence of time introduces new factors that cannot be captured by standard algorithms. For instance:the target variable can have an overall , where in the long term its values increase or decrease (e.g., the average yearly temperature rising due to global warming).the target variable can have a  which makes its values change based on the currently given period (e.g. temperature is lower in winter and higher in summer).Most of the time series models take both of these factors into account. In general, time series models are mainly used a lot in financial, stock or demographic analysis.Another advanced area I would recommend exploring is , which fundamentally changes the algorithm design compared to classical machine learning. In simple terms, its goal is to train an agent in an environment to make optimal decisions based on a reward system (also known as the “trial and error approach”). By taking an action, the agent receives a reward, which helps it understand whether the chosen action had a positive or negative effect. After that, the agent slightly adjusts its strategy, and the entire cycle repeats.Reinforcement learning is particularly popular in complex environments where classical algorithms are not capable of solving a problem. Given the complexity of reinforcement learning algorithms and the computational resources they require, this area is not yet fully mature, but it has high potential to gain even more popularity in the future.Currently the most popular applications are:. Existing approaches can design optimal game strategies and outperform humans. The most well-known examples are chess and Go.. Advanced algorithms can be incorporated into robots to help them move, carry objects or complete routine tasks at home.. Reinforcement learning methods can be developed to automatically drive cars, control helicopters or drones.This article was a logical continuation of the previous part and expanded the skill set needed to become a data scientist. While most of the mentioned topics require time to master, they can add significant value to your portfolio. This is especially true for the NLP and CV domains, which are in high demand today.After reaching a high level of expertise in data science, it is still crucial to stay motivated and consistently push yourself to learn new topics and explore emerging algorithms.Data science is a constantly evolving field, and in the coming years, we might witness the development of new state-of-the-art approaches that we could not have imagined in the past.All images are by the author unless noted otherwise.]]></content:encoded></item><item><title>Generate a Momento Disposable Token with Rust and Lambda</title><link>https://dev.to/aws-builders/generate-a-momento-disposable-token-with-rust-and-lambda-1a58</link><author>Benjamen Pyle</author><category>dev</category><category>rust</category><pubDate>Fri, 14 Feb 2025 16:57:29 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[Working with browser hosted code (UI) requires a developer to be cautious about exposing secrets and tokens.  A less than trustworthy person could take these secrets and do things that the user doesn't intend.  And while we are all responsible for our internet usage, token and secrets security from an application standpoint falls squarely on a developer's shoulders.  This is why when using Momento, I like to take advantage of the Authorization API.  What the Authorization API allows me to do is create a disposable token from a secure location, so that my UI clients can just refresh them as needed to work with Topics or Caches.  Thus, not having the credential leak up into the "easy to see" JavaScript code.  Let's dive into a Lambda Function coded in Rust that implements this Token Vending Machine concept with Momento.I usually like to work backwards to forwards, meaning I establish what I want in the end and then build from there.  When looking at a sample implementation, that means starting from the diagram and walking through what I'm building.A user's session will need to establish an authenticated and authorized connection to Momento by way of the JavaScript client SDK.  Every call to Momento is over an HTTP API request so it's going to get authenticated and authorized.  Which is a good thing!  However, doing this, requires a token which is what I'll be fetching from the Rust Lambda Function that will be demonstrated throughout the article.  The flow goes like this:1) User requires a token to connect to Momento
2) Browser makes a request to an endpoint backed by a Lambda Function
3) Rust Lambda Function uses a long-lived and secure API Token that has permissions to create short-lived disposable tokens
4) Rust Function uses the Momento SDK to request a token with the supplied Topic and Cache names with scopes to publish and subscribe
5) A token is returned from the Lambda Function where the client code can use to subscribe to a Momento topic.
6) The token has an expiration timestamp represented as a Unix Epoch so that the client can refresh before the token has a chance to expireSo let's walk through those steps above and explore the implementation.
  
  
  Implementing a Momento Token Vending Machine with Rust
I know I'm focusing on Lambda, Momento, and Rust, but there are many other components that go into what I'd consider a quality Lambda Function build.  To address those, let's have a look at the CDK code and what all gets shipped to AWS.TypeScript has become my goto when it comes to creating AWS infrastructure.  I like the CDK, and I especially like having the ability to use the Cargo Lambda CDK Construct.  If you haven't used it before, check out the repository and jump into the documentation.  It's straightforward and the classes inherit from AWS bases.  In addition to Cargo Lambda, I like to include the Datadog Lambda Extension.  This piece of goodness allows me to collect my OpenTelemetry traces into the Datadog UI for easy assessment of performance and any latency or error issues.  I'll highlight further as the article evolves.Here we go! The below is the CDK code that brings the above together.
  
  
  Adding the Datadog Extension
Pay special attention to the following when adding the Datadog extension.Region: I'm using the region my Lambda function is hosted inARM/x64: I'm picking the chip architecture that my Lambda Function is compiled for.
Version: 68 in this case, but  can also be used.
I'm going to use a long-lived API key with Momento so that this Lambda Function can make requests without worrying about expiration.  This is completely acceptable solution.  Think of it like a scoped API key essentially.  To set that up, I'm using AWS SecretsManager.
  
  
  Cargo Lambda Rust Function
Wrapping up the infrastructure components is the definition of the Rust Lambda Function and granting its ability to read from the secret defined above in SecretsManager.  Additionally, I'm exposing the function over a FunctionURL.  This of course could be internal behind an Application Load Balancer or exposed behind a variety of API Gateway setups.  The FunctionURL just makes this example simple to pull together.Key things to point out in the  are:Architecture: set to ARM because I prefer to run on the AWS Graviton chipsEnvironment: 

Setting RUST_LOG allows me to control crate log levels (this is a convention)
At this point, using CDK, I can easily run a  and my code will be live in AWS in just a couple of minutes.  However, I'd like to dive in further on the Rust and Lambda code, specifically addressing the Momento Auth piecesAll Rust code (unless it's a lib) starts out with a  function.  Even Lambda Functions must have a .  In my  below, I'm setting up Momento, Datadog, OpenTelemetry, and other reusable components.  Since my handler is what is called over and over, I want to have things warm and in memory, ready to use as events come in.To initialize the OpenTelemetry, I'm establishing a telemetry layer which I'm registering.The next pieces of  are about fetching the Momento API key from the AWS secret I defined in the infrastructure.  And with that secret, I'll construct an instance of the Momento Auth client so that I can communicate with the Auth API and create the disposable tokens.With all Lambda Functions, I need to define a function that will be called when the Lambda Function is supplied events.  For web APIs, that event is a request from an external client.   My  establishes this connection by the following code.As exposed, I need to send a Momento client, the expiration in minutes I want to let the token be valid for, and the event which is the web request.The Lambda Function handler does the following.Parse the body of the request 

Body in the correct format then generate the tokenIf not, return a 400 BAD REQUESTFor the request body, I'm expecting it to look like this.The Rust structure that this serializes into has the following definition.Now with a struct populated with my request data, I can look at how to generate the disposable token.  It's much easier than I thought it might be.
  
  
  Generating the Disposable Token
This disposable token logic is the heart of this Lambda Function's existence.  Remember, Client code or the UI is going to request a token that I want to scope down to the cache and topic supplied in the payload.  This will guarantee that the client has access to what's needed for the duration defined the environment variable discussed above.Let's break the above down just a little.  First up is the  and .The  plugs into OpenTelemetry that allows me to time the Momento operations by way of the Rust Instrument trait.  I highly recommend any Rust code you write take advantage of these opportunities.  Tracing in the spirit of observability will make finding errors and poor user experiences so much easier when you start to get some volume.The next piece of this function is to create the Disposable token.   are a required parameter to the generate_disposable_token function.  For my example, I'm giving the token access to Publish and Subscribe to the Cache/Topic combination.  And notice that the  parameter is finally being used to round out the function call.The last piece of the function is to create the .  The values returned from the Momento function call are used to populate the struct.
  
  
  Measuring Performance with Datadog and OpenTelemetry
So I can't end an article just demonstrating how to fetch disposable tokens written in Rust and deployed in a Lambda Function without talking about performance.  I am always blown away at the speed of Momento's services.  I hadn't done much work with the Auth API so I wanted to see if the timings that I've been accustomed to with Cache and Topics also held true with Auth.  With the observability code using OpenTelemetry that I've shown above, I'm able to not only track the Lambda Function's execution timings, but also the Momento specific API calls via the  trait that I showed above.  I bring this metrics and traces together via Datadog because there isn't a better tool on the market to help me observe my Lambda Functions as well as other cloud resources.
  
  
  High Level Function Latency
First up is looking at the high level Lambda Function latency. I'm graphing the 50th, 75th, 90th, and 95th percentiles with this Datadog line graph.I've written about Rust and Lambda performance quite a bit over the past 18 months, but I'm always amazed at how quickly and consistently my function code performs with Rust. I can also make the same statements when it comes to pairing Rust with Momento.  Time and time again, their platform performs consistently, regardless of the load and requests I throw at it.  The same can be said about the Auth API that I'm exercising here.  Consistent p95 latency at the 3ms is just fantastic and not going to be noticeable by an end user.High level tracing is great and something that I love about using Datadog, but since I took advantage of the  trait further up, let's have a look at exactly how the Momento Auth operations play into the overall function latency.This table shows the two spans that are included in the overall latency of the Lambda Functions execution.  If you remember from the code well above, I called the Momento Auth span .  I'm happy all day long with an average latency of 1.25ms and a tail p99 latency of 2.19ms.  I can't recommend their Rust SDK enough.  It is my first and preferred way to work with Momento.Working with client code that is insecure by nature that also needs to authenticate with the Momento API for things like Topic subscriptions can be a challenge.  However, by implementing a token vending machine with Rust, deployed with Lambda, and monitored with Datadog produces a solution that is fast, reliable, and observable.  I've been saying this for a while, but I truly believe that building Lambda Functions with Rust is the way to go.  And I love seeing companies like Momento invest in Rust specific SDKs.  This feature to build disposable tokens was just added in 2025 and will unlock developers to implement this vending machine pattern in Rust like I've shown the article.  Thanks for reading and happy building!]]></content:encoded></item><item><title>Behind the Blog: Backdoors and the Miracle of Wikipedia</title><link>https://www.404media.co/behind-the-blog-backdoors-and-the-miracle-of-wikipedia/</link><author>Samantha Cole</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/nl2.14--1-.png" length="" type=""/><pubDate>Fri, 14 Feb 2025 16:40:01 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[This is Behind the Blog, where we share our behind-the-scenes thoughts about how a few of our top stories of the week came together. This week, we discuss Apple's iCloud, Wikipedia is a miracle of humankind, and good soup.After our relatively unhinged BTBs last week, many of you left extremely nice comments, reached out individually, or otherwise gave us encouragement. You all are the best, and it made us feel very good. Thank you!]]></content:encoded></item><item><title>Upskilling to Rust from Python</title><link>https://dev.to/rustds/upskilling-to-rust-from-python-mok</link><author>Michael Gonzalez</author><category>dev</category><category>rust</category><pubDate>Fri, 14 Feb 2025 16:29:55 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[I’m a long-time data analyst with some data engineering experience. My overall stack time is about:Tableau Desktop – 10 yearsA few years ago, I embarked on a mission to be full stack. I picked up Python and learned how to do ETL operations on my own. I’ve heard great things about the speed and efficiency benefits of Rust over Python, so I wanted to put it to the test.The basic question I have is: what is the absolute furthest that I can take Rust in the direction of data science (to include AI applications) and data engineering? The library environment for data science is extremely robust for Python and I know it’s substantially smaller for Rust, but I’m still interested in taking it as far as I can. Over the next few months, I’m going to be upskilling in Rust and seeing where Rust for DS goes.I’m very aware of structural differences of Rust compared to Python. Memory management and static typing are elements that I’ve never had to care about, but it’s going to need to be a consideration moving forward. Ultimately, I think giving Rust a try will make me a more consciencious developer in that there are a lot of things I just took for granted with Python and SQL.I know absolutely no Rust right now, so I’m leaning on Duke University’s Rust Fundamentals course through Coursera to get me up to speed on the basics.The first week of the course revolved around setting up the VS Code environment for Rust, deploying GitHub Copilot, setting up the dev container, and dockerizing it.I’m very familiar with VS Code for local development, but actually using Docker and working in a containerized environment is new. I’ve been wanting to containerize my org’s Python development environment for at least a year (it’s further down the to-do list), so spending some time on this is gonna pay off later on.No actual Rust development work yet. Looking ahead, it appears that week 2 of the course jumps right into for and while loops. Ech, not a favorite topic of mine, but essential nonetheless.Anyone else using Rust for data operations?]]></content:encoded></item><item><title>Unlocking global AI potential with next-generation subsea infrastructure</title><link>https://engineering.fb.com/2025/02/14/connectivity/project-waterworth-ai-subsea-infrastructure/</link><author></author><category>dev</category><category>official</category><pubDate>Fri, 14 Feb 2025 16:28:06 +0000</pubDate><source url="https://engineering.fb.com/">Facebook engineering</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>LangCompiler: A Cloud-Native, High-Performance Code Execution Service</title><link>https://dev.to/bladearya/langcompiler-a-cloud-native-high-performance-code-execution-service-5a2i</link><author>Amit Kumar Rout</author><category>dev</category><category>go</category><pubDate>Fri, 14 Feb 2025 16:07:19 +0000</pubDate><source url="https://dev.to/t/go">Dev.to Go</source><content:encoded><![CDATA[Smooth, secure, and scalable execution of code is of paramount concern in modern software development for a variety of applications, from education systems to enterprise applications. LangCompiler has been created to cater to this demand by providing a cloud-native, high-performance environment for code execution across a variety of programming languages.LangCompiler is an elegantly crafted service that provides secure and scalable code execution across a wide spectrum of programming languages. It currently supports Python, Java, JavaScript, and C++, with further expansion planned in response to community requirements. Its versatility makes it a developer, educator, and enterprise favorite. The service provides code execution across four popular languages (Python, Java, JavaScript, and C++), with further expansion planned.Dynamic Resource Constraints: It is scalable, managing workloads efficiently through resource-aware execution. The service includes extensive logging and debugging to guarantee seamless execution.Comprehensive Execution Metrics: Users can monitor performance, detect inefficiencies, and optimize workloads.Secure and Isolated Execution: It includes security features to prevent unauthorized access and code protection.
  
  
  Built with Golang and Docker
To ensure high performance and reliability, LangCompiler is built using Golang, leveraging its efficiency and concurrency features. Additionally, it is Dockerized to provide an isolated execution environment, ensuring consistent and secure execution across different workloads. The service is hosted on Render, allowing seamless deployment, scaling, and management.We invite developers, educators, and enterprises to explore LangCompiler and take advantage of its robust capabilities. To further enhance API development, we encourage you to check out our premium plans.]]></content:encoded></item><item><title>Publish Interactive Data Visualizations for Free with Python and Marimo</title><link>https://towardsdatascience.com/publish-interactive-data-visualizations-for-free-with-python-and-marimo/</link><author>Sam Minot</author><category>dev</category><category>ai</category><pubDate>Fri, 14 Feb 2025 16:00:00 +0000</pubDate><source url="https://towardsdatascience.com/">Towards Data Science</source><content:encoded><![CDATA[Working in Data Science, it can be hard to share insights from complex datasets using only static figures. All the facets that describe the shape and meaning of interesting data are not always captured in a handful of pre-generated figures. While we have powerful technologies available for presenting interactive figures — where a viewer can rotate, filter, zoom, and generally explore complex data  —  they always come with tradeoffs.Here I present my experience using a recently released Python library — marimo — which opens up exciting new opportunities for publishing interactive visualizations across the entire field of data science.Interactive Data VisualizationThe tradeoffs to consider when selecting an approach for presenting data visualizations can be broken into three categories: — what visualizations and interactivity am I able to present to the user? — what are the resources needed for displaying this visualization to users (e.g. running servers, hosting websites)? – how much of a new skillset / codebase do I need to learn upfront? is the foundation of portable interactivity. Every user has a web browser installed on their computer and there are many different frameworks available for displaying any degree of interactivity or visualization you might imagine (for example, this gallery of amazing things people have made with three.js). Since the application is running on the user’s computer, no costly servers are needed. However, a significant drawback for the data science community is ease of use, as JS does not have many of the high-level (i.e. easy-to-use) libraries that data scientists use for data manipulation, plotting, and interactivity. provides a useful point of comparison. Because of its continually growing popularity, some have called this the “Era of Python”. For data scientists in particular, Python stands alongside R as one of the foundational languages for quickly and effectively wielding complex data. While Python may be easier to use than Javascript, there are fewer options for presenting interactive visualizations. Some popular projects providing interactivity and visualization have been Flask, Dash, and Streamlit (also worth mentioning — bokeh, HoloViews, altair, and plotly). The biggest tradeoff for using Python has been the cost for publishing – delivering the tool to users. In the same way that shinyapps require a running computer to serve up the visualization, these Python-based frameworks have exclusively been server-based. This is by no means prohibitive for authors with a budget to spend, but it does limit the number of users who can take advantage of a particular project. is an intriguing middle ground — Python code running directly in the web browser using WebAssembly (WASM). There are resource limitations (only 1 thread and 2GB memory) that make this impractical for doing the heavy lifting of data science. , this can be more than sufficient for building visualizations and updating based on user input. Because it runs in the browser, no servers are required for hosting. Tools that use Pyodide as a foundation are interesting to explore because they give data scientists an opportunity to write Python code which runs directly on users’ computers without their having to install or run anything outside of the web browser.As an aside, I’ve been interested previously in one project that has tried this approach: stlite, an in-browser implementation of Streamlit that lets you deploy these flexible and powerful apps to a broad range of users. However, a core limitation is that Streamlit itself is distinct from stlite (the port of Streamlit to WASM), which means that not all features are supported and that advancement of the project is dependent on two separate groups working along compatible lines.The interface resembles a Jupyter , which will be familiar to users.Execution of cells is , so that updating one cell will rerun all cells which depend on its output. can be captured with a flexible set of UI components.Notebooks can be quickly converted into , hiding the code and showing only the input/output elements.Apps can be run locally or converted into using WASM/Pyodide.marimo balances the tradeoffs of technology in a way that is well suited to the skill set of the typical data scientists: — user input and visual display features are rather extensive, supporting user input via Altair and Plotly plots. — deploying as static webpages is basically free — no servers required — for users familiar with Python notebooks, marimo will feel very familiar and be easy to pick up.Publishing Marimo Apps on the WebAs a simple example of the type of display that can be useful in data science, consisting of explanatory text interspersed with interactive displays, I have created a barebones GitHub repository. Try it out yourself here.Using just a little bit of code, users can:Generate visualizations with flexible interactivityWrite narrative text describing their findingsPublish to the web for free (i.e. using GitHub Pages)Public App / Private DataThis new technology offers an exciting new opportunity for collaboration — publish the app publicly to the world, but users can only see specific datasets that they have permission to access.Rather than building a dedicated data backend for every app, user data can be stored in a generic backend which can be securely authenticated and accessed using a Python client library — all contained within the user’s web browser. For example, the user is given an OAuth login link that will authenticate them with the backend and allow the app to temporarily access input data.As a proof of concept, I built a simple visualization app which connects to the Cirro data platform, which is used at my institution to manage scientific data. Full disclosure: I was part of the team that built this platform before it spun out as an independent company. In this manner users can:Load the public visualization app — hosted on GitHub PagesConnect securely to their private data storeLoad the appropriate dataset for displayShare a link which will direct authorized collaborators to the same dataAs a data scientist, this approach of publishing free and open-source visualization apps which can be used to interact with private datasets is extremely exciting. Building and publishing a new app can take hours and days instead of weeks and years, letting researchers quickly share their insights with collaborators and then publish them to the wider world.]]></content:encoded></item><item><title>Linux 6.15 To Ensure PlayStation 5 Controllers Use The Correct Driver</title><link>https://www.phoronix.com/news/Linux-6.15-Ensures-PS5-Driver</link><author>Michael Larabel</author><category>tech</category><pubDate>Fri, 14 Feb 2025 15:49:09 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[A change queued up by an Amazon engineer ahead of the upcoming Linux 6.15 kernel cycle will ensure that PlayStation 5 controllers on Linux load with the correctly desired driver...]]></content:encoded></item><item><title>DataRobot Acquires Agnostic to Gain Distributed Covalent Platform for AI Apps</title><link>https://devops.com/datarobot-acquires-agnostic-to-gain-distributed-covalent-platform-for-ai-apps/</link><author>Mike Vizard</author><category>devops</category><pubDate>Fri, 14 Feb 2025 15:22:34 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Top 22 Sites To Buy Verified Binance Accounts personal</title><link>https://dev.to/hiya_tili_6b6c8383c5ae8c4/top-22-sites-to-buy-verified-binance-accounts-personal-41fk</link><author>Hiya Tili</author><category>dev</category><category>go</category><pubDate>Fri, 14 Feb 2025 15:21:24 +0000</pubDate><source url="https://dev.to/t/go">Dev.to Go</source><content:encoded><![CDATA[If you want to more information just contact now.
Telegram: @itzonesmm0
WhatsApp: +1 (989) 513-2521liveitzonesmm@gmail.comBuy Verified Binance Account
Looking to Buy Verified Binance Account? Purchase one for instant access to trading features, securely. If you want to Buy Verified Binance Account then itzonesmm.com is the best option for you.In today’s fast-paced digital world, online trading platforms like Binance have become increasingly popular among individuals looking to invest in cryptocurrencies. To ensure a smooth entry into the world of crypto trading, having a verified Binance account is essential. By purchasing a verified account, you can bypass the lengthy verification process and start trading immediately.Buy Verified Binance Account
Buy Verified Binance Account
This hassle-free option saves you time and allows you to take advantage of market opportunities swiftly. Additionally, a verified account provides added security and access to advanced trading features. Ready to kickstart your crypto journey? Invest in a verified Binance account today and stay ahead in the ever-evolving crypto market.The Importance Of A Verified Binance Account
Buying and selling cryptocurrencies through a reputable platform like Binance is a popular practice. However, having a verified Binance account is of utmost importance to ensure a secure and advanced trading experience. In this section, we’ll delve into the significance of a verified Binance account and the benefits it offers.Enhanced Security Measures
When you have a verified Binance account, you can benefit from enhanced security measures that add an extra layer of protection to your account. Two-factor authentication and withdrawal whitelisting are just a few examples of the security features available to verified users. This significantly reduces the risk of unauthorized access to your account and provides peace of mind when engaging in cryptocurrency transactions.Access To Advanced Trading Features
A verified Binance account grants access to advanced trading features that are not available to unverified users. These features include higher withdrawal limits, access to futures and margin trading, and participation in token sales. By verifying your account, you can take advantage of these advanced tools and broaden your trading opportunities, allowing for a more diverse and potentially profitable trading experience.The Process Of Verifying A Binance Account
Buying a verified Binance account can be a time-saving option for cryptocurrency enthusiasts. It eliminates the need to go through the rigorous process of account verification. However, if you choose to verify your own Binance account, here is a breakdown of the steps involved.
To start the process, log in to your Binance account and navigate to the user dashboard. Choose the option for account verification and select the type of verification you wish to undergo. You will be asked to provide personal details such as your full name, address, and date of birth. Next, upload a scanned copy of your government-issued ID, such as a driver’s license or passport. Make sure all details are accurate and match the information on the ID provided.Additional Verification Steps
After submitting your identity verification, Binance may require additional steps to complete the process. This could include providing proof of address, such as a utility bill or bank statement. You may also need to go through facial recognition verification to ensure the account belongs to the rightful owner. Once all steps are completed, await approval from Binance, which typically takes a few business days.Benefits Of Buying A Verified Binance Account
If you are an aspiring cryptocurrency trader, you know how important it is to have a verified Binance account. However, going through the tedious verification process can be a hassle and time-consuming. That’s why buying a verified Binance account can offer you several benefits, allowing you to focus on what matters most – trading.If you want to more information just contact now.
Telegram: @itzonesmm0
WhatsApp: +1 (989) 513-2521liveitzonesmm@gmail.comInstant Access To Trading
When you purchase a verified Binance account, you gain immediate access to the platform’s trading services. Unlike the traditional account creation and verification method that can take days or even weeks, buying a verified account cuts the waiting time significantly. This means you can start trading and capitalizing on potential market opportunities without delay. Avoiding Verification Hassles
Verification processes can be cumbersome and time-consuming. From providing personal identification documents to answering questionnaires, the process can sometimes feel intrusive. By purchasing a verified Binance account, you eliminate the need to go through this whole process. You can skip the hassle and start trading right away. This is especially beneficial if you are looking to capitalize on time-sensitive market movements or seize profitable trade opportunities.Furthermore, buying a verified account saves you from the frustration of potential verification failures. Sometimes, applicants face rejection due to minor errors or document discrepancies, resulting in extended waiting times. By bypassing the verification process, you eliminate the risk of encountering such setbacks and can focus solely on your trading activities.With the benefits of instant access to trading and avoiding verification hassles, buying a verified Binance account provides a convenient and efficient solution for crypto enthusiasts.
When considering the purchase of a verified Binance account, it’s essential to understand the potential risks and regulatory considerations involved. This will ensure that you are making an informed decision and taking into account the potential pitfalls that may arise.
Unfortunately, the crypto industry is not immune to scams, and purchasing a verified Binance account comes with its own set of risks. There is the potential for scammers to falsely advertise verified accounts, leading to financial loss and account security issues. It’s crucial to thoroughly research the seller and verify their legitimacy to avoid falling victim to fraudulent activity.
Additionally, regulatory compliance is a key consideration when purchasing a verified Binance account. It’s important to ensure that the account has been obtained and verified through legal and compliant means. Failure to comply with regulatory requirements could result in account suspension or legal repercussions, making it essential to verify the authenticity of the account and its compliance with relevant regulations.Choosing A Reliable Service Provider
When finding a service provider to Buy Verified Binance Account, reliability is crucial. Look for reputable sellers with positive customer reviews and a track record of delivering quality, verified accounts. Taking the time to research and choose a reliable service provider can ensure a smooth and secure experience.Reputation And Trustworthiness
Reputable Binance account service providers like itzonesmm have a solid track record and are known for their trustworthiness.Look for providers with a strong reputation in the industry to ensure security and reliability. Then itzonesmm.com is the salutation for you.Customer Reviews And Feedback
Reading customer reviews and feedback can provide insight into the service quality offered by itzonesmm.Positive reviews are a good indicator that the service is reliable and trustworthy.Legal And Ethical Implications
The purchase and use of a verified Binance account raise legal and ethical implications that need to be considered. Compliance with anti-money laundering regulations, data privacy, and identity verification are crucial to ensure a secure and transparent trading environment.The Future Of Binance Account Verification
As the cryptocurrency market continues to expand, so does the need for robust security measures. In this context, the verification process for Binance accounts is evolving rapidly. This not only impacts the trading environment but also sets the stage for a more secure and reliable platform for traders.Evolution Of Verification Procedures
The evolution of Binance account verification procedures reflects the platform’s commitment to heightened security. The initial verification process mainly focused on email verification and two-factor authentication. However, as the market dynamics and regulatory requirements evolved, Binance introduced enhanced verification levels. This includes personal identification verification, know-your-customer (KYC) procedures, and even address verification. These steps are crucial in protecting user assets and ensuring compliance with industry regulations.Impact On Trading Environment
The impact of these evolving verification procedures is significant for the trading environment. With stricter verification measures in place, Binance creates a safer space for traders to engage in cryptocurrency transactions. Traders can have greater trust in the platform, knowing that stringent verification processes are in place to deter fraudulent activities. Additionally, enhanced verification procedures also pave the way for a more seamless integration with traditional financial systems, making crypto trading more accessible and widely accepted.Market Trends And User Experiences
Verified Binance accounts are becoming increasingly popular due to the heightened security they offer to users.
Users report high levels of satisfaction with verified Binance accountsTrends In Verified Account Ownership
Ownership of verified Binance accounts is on the rise as more users seek secure trading options.Faqs About Verified Binance Accounts
As more traders and investors flock to the world of cryptocurrency, platforms like Binance have gained immense popularity. One way to enhance your experience on Binance is by getting a verified account. In this section, we’ll address some frequently asked questions about verified Binance accounts and provide you with the information you need to make an informed decision.
If you’re considering getting a verified Binance account, it’s natural to have questions about security. Binance takes security seriously and implements several measures to protect its users. One of these measures is the Know Your Customer (KYC) process, which requires users to verify their identity and provide relevant documents.With a verified account, you can have peace of mind knowing that your funds and personal information are better protected. The verification process helps ensure that only legitimate users gain access to the platform, reducing the risk of fraudulent activities.Moreover, Binance employs industry-standard security protocols, such as two-factor authentication (2FA) and encryption, to safeguard user accounts. These additional layers of security give you an added level of confidence when trading or storing your cryptocurrencies on the platform.Transferability Of Verified Status
Once you acquire a verified Binance account, you might wonder if the verified status is transferable. The short answer is no. Verification is linked to the individual user account and cannot be transferred to another user.This means that if you’re looking to purchase a verified Binance account from someone else, it’s important to tread with caution. The selling or transferring of verified Binance accounts is strictly against Binance’s terms of service, and engaging in such activities could result in your account being permanently suspended.It’s important to note that Binance’s strict stance on verification transferability is in place to protect users’ security and prevent fraudulent activities. By ensuring that each user goes through the verification process individually, Binance maintains a safer trading environment for all its users.while you cannot transfer a verified Binance account, you can easily go through the verification process on your own to enjoy the benefits and added security that come with it.Conclusion And Final Thoughts
Considering the pros and cons, buying a verified Binance account can offer a range of benefits for traders. It provides a streamlined process for account verification, reducing the waiting time and frustrations associated with manual verification. However, it’s important to weigh these advantages against potential risks and drawbacks. By empowering trading decisions, a verified Binance account allows traders to quickly delve into the world of cryptocurrency and start trading. Whether you’re a beginner or an experienced trader, having a verified Binance account can give you a competitive edge in the market.Weighing The Pros And Cons
Before purchasing a verified Binance account, it is essential to evaluate the pros and cons. Let’s take a closer look at what you should consider:Streamlined verification process: By buying a verified Binance account, you can skip the hassle of manual verification, significantly reducing the waiting time and potential frustrations.
Immediate access to trading: With a verified Binance account, you can start trading cryptocurrencies right away, without any delays.
Enhanced security measures: Verified Binance accounts typically come with advanced security features, such as two-factor authentication, providing an added layer of protection for your funds.
Expert support: Some providers of verified Binance accounts offer dedicated customer support to assist you with any inquiries or issues you may encounter.Reliance on a third party: When purchasing a verified Binance account, you need to trust the provider to deliver a legitimate and secure account.
Potential risks: As with any online financial transaction, there is always a risk of encountering fraudulent or scammy providers. It’s crucial to thoroughly research and choose a reputable provider with positive reviews.Verified Binance accounts may come with a price tag, and it’s important to evaluate the cost versus the value it adds to your trading experience.
Limited personalization: When buying a verified Binance account, you may not have the option to customize certain account settings or preferences according to your specific needs.
Empowering Trading Decisions
A verified Binance account can empower your trading decisions by providing quick and efficient access to the cryptocurrency market. The streamlined verification process eliminates the frustration of waiting for manual verification, enabling you to take advantage of market opportunities swiftly. Whether you’re a day trader, swing trader, or long-term investor, having a verified Binance account equips you with the necessary tools to make informed and impactful trading decisions.while buying a verified Binance account comes with its pros and cons, it definitely offers advantages for those looking to expedite the account verification process and start trading cryptocurrencies promptly. However, one must exercise caution when choosing a provider and thoroughly evaluate the potential risks involved.Frequently Asked QuestionsHow To Get Verified In Binance?
To get verified in Binance, go to your account settings, complete identity verification, submit required documents, and wait for approval. Can I Have Two Verified Binance Accounts?
No, Binance allows only one verified account per user. Creating multiple accounts violates their terms of service.What Is A Binance Account?
A Binance account is a digital wallet for trading cryptocurrencies like Bitcoin and Ethereum. It allows users to buy, sell, and store various digital assets. With a Binance account, you can participate in the cryptocurrency market and manage your investments securely.How To Verify Entity Account Binance?
To verify entity accounts on Binance, submit required documents via the website for verification process.Can I Buy Verified Binance Account Online?
Yes, you can Buy Verified Binance Account online from itzonesmm.com What Are The Benefits Of Buying A Verified Binance Account?
Buying a verified Binance account saves time and effort required for the verification process, ensuring immediate access to the platform’s features and services.Is It Legal To Buy Verified Binance Account?
While buying a verified Binance account is not illegal, it is against Binance’s terms and conditions, which may result in the account being banned or frozen.Are Verified Binance Accounts Safe To Use?
Verified Binance accounts are generally safe to use, but it is essential to exercise caution and follow Binance’s security guidelines to protect your account from unauthorized access or hacking attempts.How Do I Find Reputable Sellers Of Verified Binance Accounts?
To find reputable sellers of verified Binance accounts, you can rely on online marketplaces, forums, or seek recommendations from trusted sources within the cryptocurrency community.
Invest in a verified Binance account to enhance your trading journey. Take advantage of security and convenience. Maximize your opportunities and streamline transactions. Don’t miss out on the benefits of a trusted account. Start your journey to success with Binance today!If you want to more information just contact now.
Telegram: @itzonesmm0
WhatsApp: +1 (989) 513-2521liveitzonesmm@gmail.com]]></content:encoded></item><item><title>Hugo van Kemenade: Improving licence metadata</title><link>https://hugovk.dev/blog/2025/improving-licence-metadata/</link><author></author><category>dev</category><category>python</category><pubDate>Fri, 14 Feb 2025 15:11:00 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[PEP 639 defines a spec on how to document licences
used in Python projects.Change  as follows.I usually use Hatchling as a build backend, and support was added in 1.27:Replace the freeform  field with a valid SPDX license expression, and add
 which points to the licence files in the repo. There’s often only one,
but if you have more than one, list them all:Optionally delete the deprecated licence classifier:Then make sure to use a PyPI uploader that supports this.pip can also show you the metadata:A lot of work went into this. Thank you to PEP authors
Philippe Ombredanne for creating the first draft in
2019, to C.A.M. Gerlach for the second draft in 2021,
and especially to Karolina Surma for getting the third
draft finish line and helping with the implementation.And many projects were updated to support this, thanks to the maintainers and
contributors of at least:]]></content:encoded></item><item><title>5 Tips for Building a Data Science Portfolio</title><link>https://www.kdnuggets.com/5-tips-building-data-science-portfolio</link><author>Nate Rosidi</author><category>dev</category><category>ai</category><enclosure url="https://www.kdnuggets.com/wp-content/uploads/Rosidi_5_Tips_for_Building_a_DS_Portfolio_4.png" length="" type=""/><pubDate>Fri, 14 Feb 2025 15:00:25 +0000</pubDate><source url="https://www.kdnuggets.com/">KDNuggets blog</source><content:encoded><![CDATA[Not every data science portfolio is worth showcasing. Follow these five tips to build a portfolio that impresses employers and gets you a job.]]></content:encoded></item><item><title>Deep Dive into net/netip AddrPort Methods 6/7</title><link>https://dev.to/rezmoss/deep-dive-into-netnetip-addrport-methods-67-3gn3</link><author>Rez Moss</author><category>dev</category><category>go</category><pubDate>Fri, 14 Feb 2025 15:00:00 +0000</pubDate><source url="https://dev.to/t/go">Dev.to Go</source><content:encoded><![CDATA[Hey there! In our previous article, we explored Addr methods in detail. Now let's dive deep into AddrPort methods. AddrPort is a crucial type when working with network services since it combines an IP address with a port number. We'll explore every method with practical examples and real-world use cases.First, let's look at all the ways to work with AddrPort.
  
  
  1. Service Discovery System
Here's a robust service discovery implementation using AddrPort:
  
  
  2. Connection Pool Manager
A connection pool that uses AddrPort for endpoint tracking:
  
  
  3. Load Balancer Implementation
A load balancer using AddrPort for backend management:
Always validate AddrPort before use:

Be careful with string conversions:

Check port numbers when needed:
In our next article, we'll explore Prefix methods in depth, completing our detailed examination of the core types in net/netip. We'll see how to work effectively with CIDR notations and subnet operations.Until then, keep experimenting with AddrPort! It's a fundamental building block for network services in Go.]]></content:encoded></item><item><title>Evolving Workflow Orchestration // Alex Milowski // #291</title><link>https://podcasters.spotify.com/pod/show/mlops/episodes/Evolving-Workflow-Orchestration--Alex-Milowski--291-e2us8at</link><author>Demetrios</author><category>podcast</category><category>ai</category><enclosure url="https://anchor.fm/s/174cb1b8/podcast/play/98492189/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-1-14%2F394870366-44100-2-f81b1b5d49c1e.mp3" length="" type=""/><pubDate>Fri, 14 Feb 2025 14:39:03 +0000</pubDate><source url="https://mlops.community/">MLOps podcast</source><content:encoded><![CDATA[ is a researcher, developer, , mathematician, and .Evolving Workflow Orchestration // MLOps Podcast #291 with Alex Milowski, Entrepreneur and Computer Scientist.// AbstractThere seems to be a shift from workflow languages to code - mostly annotation pythons - happening and getting us. It is a symptom of how complex workflow orchestration has gotten. Is it a dominant trend or will we cycle back to “DAG specifications”? At Stitchfix, we had our own DSL that “compiled” into airflow DAGs and at MicroByre, we used a external workflow langauge. Both had a batch task executor on K8s but at MicroByre, we had human and robot in the loop workflows.// BioDr. Milowski is a serial entrepreneur and computer scientist with experience in a variety of data and machine learning technologies. He holds a PhD in Informatics (Computer Science) from the University of Edinburgh, where he researched large-scale computation over scientific data. Over the years, he's spent many years working on various aspects of workflow orchestration in industry, standardization, and in research.// MLOps Swag/Merchhttps://shop.mlops.community/// Related LinksWebsite: https://www.milowski.com/ --------------- ✌️Connect With Us ✌️ -------------Join our slack community: https://go.mlops.community/slackFollow us on Twitter: @mlopscommunitySign up for the next meetup: https://go.mlops.community/registerCatch all episodes, blogs, newsletters, and more: https://mlops.community/Connect with Demetrios on LinkedIn: https://www.linkedin.com/in/dpbrinkm/Connect with Alex on LinkedIn: https://www.linkedin.com/in/alexmilowski/]]></content:encoded></item><item><title>The Largest Sofa You Can Move Around a Corner</title><link>https://www.quantamagazine.org/the-largest-sofa-you-can-move-around-a-corner-20250214/</link><author>Richard Green</author><category>Quanta Magazine</category><category>tech</category><enclosure url="https://www.quantamagazine.org/wp-content/uploads/2025/02/Moving-sofas_crTommy-Parker-Default.webp" length="" type=""/><pubDate>Fri, 14 Feb 2025 14:35:53 +0000</pubDate><source url="https://www.quantamagazine.org/">Quanta Magazine</source><content:encoded><![CDATA[If you’ve ever moved into a new home, then you know how difficult it can be to steer bulky furniture through narrow hallways or around awkward corners. Mathematicians have been trying to solve this problem, too, ever since 1966, when Leo Moser framed it in quantitative terms. Say you want to move a two-dimensional shape — your sofa (disregarding its height) — through an L-shaped hallway.]]></content:encoded></item><item><title>Black, Indigenous, and People of Color (BIPOC) Initiative Meeting - 2025-02-11</title><link>https://www.youtube.com/watch?v=eHa6GhK7L0I</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/eHa6GhK7L0I?version=3" length="" type=""/><pubDate>Fri, 14 Feb 2025 13:59:30 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io]]></content:encoded></item><item><title>Fwupd 2.0.6 Adds Support For HPE Gen10/Gen10+ Servers</title><link>https://www.phoronix.com/news/Fwupd-2.0.6-Released</link><author>Michael Larabel</author><category>tech</category><pubDate>Fri, 14 Feb 2025 13:52:56 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Fwupd 2.0.6 is out today as the newest update to this widely-used open-source solution for system and peripheral device firmware updating under Linux...]]></content:encoded></item><item><title>Price Hikes, Enshittification Trigger 700K Customer Losses At Disney+, ESPN+</title><link>https://www.techdirt.com/2025/02/14/price-hikes-enshittification-trigger-700k-customer-losses-at-disney-espn/</link><author>Karl Bode</author><category>tech</category><pubDate>Fri, 14 Feb 2025 13:29:03 +0000</pubDate><source url="https://www.techdirt.com/">Techdirt</source><content:encoded><![CDATA[That has involved chasing pointless “growth of growth’s sake” megamergers and imposing bottomless price hikes and new annoying restrictions (like equating password sharing with “piracy”) — all while simultaneously cutting corners on product quality in a bid to give Wall Street that sweet, impossible, unlimited quarterly growth it demands.Disney+, Hulu, and ESPN+ (all now owned by the same company thanks to consolidation) all recently raised prices to access streaming catalogs of deteriorating quality. Some of Disney’s price hikes were as much as 25 percent, hitting ad-based and ad-free versions alike. Customers were quick to complain.So not surprisingly, Disney+ has now seen the first quarterly subscriber loss in the streaming platform’s history, with 700,000 customers cancelling service. ESPN+, ESPN’s streaming service, also saw a 700,000 subscriber loss:“Total paid Disney+ subscriptions currently rest at 124.6 million compared with 125.3 million at the end of the fiscal fourth quarter. ESPN+ also saw a loss of 700,000 subscribers, currently at 24.9 million, compared with 25.6 million at the end of last quarter.”Publicly-traded companies can’t just provide a quality, affordable service people like. That’s simply not allowed. They have to provide Wall Street ever-escalating quarterly returns in the pursuit of scale, even if that pursuit proves disastrous. If it’s not possible to achieve those returns through innovation and subscriber growth (which is no longer possible now that the streaming market is saturated), that’s when big companies get in trouble and start creatively nickel-and-diming their user base.Traditional cable TV, of course, went through this exact life cycle. And despite the fact many of those executives have shifted over to streaming, they’ve learned nothing from history or experience because they’re not financially incentivized to learn from experience. They’re incentivized to make stock values climb at any cost, then flee when things get rough; fat executive or investor compensation in hand.Which is to say don’t expect things to change, even if the economy tightens and customers increasingly balk at higher streaming video prices.Two, I suspect companies will work tirelessly to make cancelling streaming services (a major advantage over traditional bloated cable TV) more difficult, whether that means complicated wireless/broadband bundling that makes dumping services a confusing hassle (is your Hulu subscription discount tied to your Amazon or wireless bill?), or some creative new restrictions we haven’t seen previously.]]></content:encoded></item><item><title>Handwriting an SVG Heart, With Our Hearts</title><link>https://css-tricks.com/handwriting-an-svg-heart-with-our-hearts/</link><author>Ryan Trimble</author><category>frontend</category><pubDate>Fri, 14 Feb 2025 13:25:12 +0000</pubDate><source url="https://css-tricks.com/">CSS Tricks blog</source><content:encoded><![CDATA[According to local grocery stores, it’s the Valentine’s Day season again, and what better way to express our love than with the symbol of love: . A while back on CSS-Tricks, we shared several ways to draw hearts, and the response was dreamy. Check out all these amazing, heart-filled submissions in this collection on CodePen:Temani Afif’s CSS Shapes site offers a super modern heart using only CSS:Now, to show  love, I wanted to do something personal, something crafty, something with a mild amount of effort.Handwriting a love note is a classic romantic gesture, but have you considered handwriting an SVG? We won’t need some fancy vector drawing tool to express our love. Instead, we can open a blank HTML document and add an  tag:We’ll need a way to see what we are doing inside the “SVG realm” (as I like to call it), which is what the  attribute provides. The 2D plane upon which vector graphics render is as infinite as our love, quite literally, complete with an x- and y-axis and all (like from math class).We’ll set the start coordinates as  and end coordinates as  to make a handsome, square . Oh, and by the way, we don’t concern ourselves over pixels,  values, or any other unit types; this is , and we play by our own rules.We add in these coordinates to the  as a string of values:<svg viewBox="0 0 10 10">

</svg>Now we can begin drawing our heart,  our heart. Let’s make a line. To do that, we’ll need to know a lot more about coordinates, and where to stick ’em. We’re able to draw a line with many points using the  element, which defines paths using the  attribute. SVG path commands are difficult to memorize, but the effort means you care. The path commands are:, , , , , , We’re only interested in drawing line segments for now, so together we’ll explore the first two:  and . MDN romantically describes MoveTo as picking up a drawing instrument, such as a pen or pencil: we aren’t yet drawing anything, just moving our pen to the point where we want to begin our confession of love.We’ll  the coordinates of  represented in the  attribute as :<svg viewBox="0 0 10 10">
  <path d="M2,2" />
</svg>Not surprising then to find that  is akin to putting pen to paper and  from one point to another. Let’s draw the first segment of our heart by drawing a  with coordinates , represented as  next in the  attribute:<svg viewBox="0 0 10 10">
  <path d="M2,2 L4,4" />
</svg>We’ll add a final line segment as another LineTo  with coordinates , again appended to the  attribute as :<svg viewBox="0 0 10 10">
  <path d="M2,2 L4,4 L6,2" />
</svg>If you stop to preview what we’ve accomplished so far, you may be confused as it renders an upside-down triangle; that’s not quite a heart yet, Let’s fix that.SVG shapes apply a  by default, which we can remove with :<svg viewBox="0 0 10 10">
  <path d="M2,2 L4,4 L6,2" fill="none" />
</svg>Rather than filling in the shape, instead, let’s display our line path by adding a , adding color to our heart.<svg viewBox="0 0 10 10">
  <path 
    d="M2,2 L4,4 L6,2" 
    fill="none" 
    stroke="rebeccapurple" />
</svg>Next, add some weight to the stroke by increasing the :<svg viewBox="0 0 10 10">
  <path 
    d="M2,2 L4,4 L6,2" 
    fill="none" 
    stroke="rebeccapurple" 
    stroke-width="4" />
</svg>Finally, apply a  of  (sorry, no time for  jokes) to round off the start and end points of our line path, giving us that classic symbol of love:<svg viewBox="0 0 10 10">
  <path 
    d="M2,2 L4,4 L6,2" 
    fill="none"
    stroke="rebeccapurple"
    stroke-width="4"
    stroke-linecap="round" />
</svg>. Now all that’s left to do is send it to that special someone. ]]></content:encoded></item><item><title>Show HN: Transform your codebase into a single Markdown doc for feeding into AI</title><link>https://tesserato.web.app/posts/2025-02-12-CodeWeaver-launch/index.html</link><author>tesserato</author><category>dev</category><category>hn</category><pubDate>Fri, 14 Feb 2025 13:23:23 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[CodeWeaver is a command-line tool designed to weave your codebase into a single, easy-to-navigate Markdown document. It recursively scans a directory, generating a structured representation of your project's file hierarchy and embedding the content of each file within code blocks. This tool simplifies codebase sharing, documentation, and integration with AI/ML code analysis tools by providing a consolidated and readable Markdown output.
The output for the current repository can be found here.Comprehensive Codebase Documentation: Generates a Markdown file that meticulously outlines your project's directory and file structure in a clear, tree-like format. Embeds the complete content of each file directly within the Markdown document, enclosed in syntax-highlighted code blocks based on file extensions.  Utilize regular expressions to define ignore patterns, allowing you to exclude specific files and directories from the generated documentation (e.g., , build artifacts, specific file types). Choose to save lists of included and excluded file paths to separate files for detailed tracking and debugging of your ignore rules.Simple Command-Line Interface:  Offers an intuitive command-line interface with straightforward options for customization.If you have Go installed, run go install github.com/tesserato/CodeWeaver@latestto install the latest version of CodeWeaver or go install github.com/tesserato/CodeWeaver@vX.Y.Z to install a specific version.Alternatively, download the appropriate pre built executable from the releases page.If necessary, make the  executable by using the  command:The root directory to scan and document.The name of the output Markdown file.-ignore "<regex patterns>"Comma-separated list of regular expression patterns for paths to exclude.-included-paths-file <filename>File to save the list of paths that were included in the documentation.-excluded-paths-file <filename>File to save the list of paths that were excluded from the documentation.Display this help message and exit.Generate documentation for the current directory:This will create a file named  in the current directory, documenting the structure and content of the current directory and its subdirectories (excluding paths matching the default ignore pattern ).Specify a different input directory and output file:./codeweaver -dir=my_project -output=project_docs.md
This command will process the  directory and save the documentation to .Ignore specific file types and directories:./codeweaver -ignore="\.log,temp,build" -output=detailed_docs.md
This example will generate , excluding any files or directories with names containing , , or . Regular expression patterns are comma-separated.Save lists of included and excluded paths:./codeweaver -ignore="node_modules" -included-paths-file=included.txt -excluded-paths-file=excluded.txt -output=code_overview.md
This command will create  while also saving the list of included paths to  and the list of excluded paths (due to the  ignore pattern) to .Contributions are welcome! If you encounter any issues, have suggestions for new features, or want to improve CodeWeaver, please feel free to open an issue or submit a pull request on the project's GitHub repository.CodeWeaver is released under the MIT License. See the  file for complete license details.]]></content:encoded></item><item><title>AI and Civil Service Purges</title><link>https://www.schneier.com/blog/archives/2025/02/ai-and-civil-service-purges.html</link><author>Bruce Schneier</author><category>infosec</category><category>blog</category><pubDate>Fri, 14 Feb 2025 13:03:22 +0000</pubDate><source url="https://www.schneier.com/">Schneider on Security</source><content:encoded><![CDATA[Donald Trump and Elon Musk’s chaotic approach to reform is upending government operations. Critical functions have been halted, tens of thousands of federal staffers are being encouraged to resign, and congressional mandates are being disregarded. The next phase: The Department of Government Efficiency reportedly wants to use AI to cut costs. According to , Musk’s group has started to run sensitive data from government systems through AI programs to analyze spending and determine what could be pruned. This may lead to the elimination of human jobs in favor of automation. As one government official who has been tracking Musk’s DOGE team told the, the ultimate aim is to use AI to replace “the human workforce with machines.” (Spokespeople for the White House and DOGE did not respond to requests for comment.)Using AI to make government more efficient is a worthy pursuit, and this is not a new idea. The Biden administration disclosed more than 2,000 AI applications in development across the federal government. For example, FEMA has started using AI to help perform damage assessment in disaster areas. The Centers for Medicare and Medicaid Services has started using AI to look for fraudulent billing. The idea of replacing dedicated and principled civil servants with AI agents, however, new—and complicated.The civil service—the massive cadre of employees who operate government agencies—plays a vital role in translating laws and policy into the operation of society. New presidents can issue sweeping executive orders, but they often have no real effect until they actually change the behavior of public servants. Whether you think of these people as essential and inspiring do-gooders, boring bureaucratic functionaries, or as agents of a “deep state,” their sheer number and continuity act as ballast that resists institutional change.This is why Trump and Musk’s actions are so significant. The more AI decision making is integrated into government, the easier change will be. If human workers are widely replaced with AI, executives will have unilateral authority to instantaneously alter the behavior of the government, profoundly raising the stakes for transitions of power in democracy. Trump’s unprecedented purge of the civil service might be the last time a president needs to replace the human beings in government in order to dictate its new functions. Future leaders may do so at the press of a button.To be clear, the use of AI by the executive branch doesn’t have to be disastrous. In theory, it could allow new leadership to swiftly implement the wishes of its electorate. But this could go very badly in the hands of an authoritarian leader. AI systems concentrate power at the top, so they could allow an executive to effectuate change over sprawling bureaucracies instantaneously. Firing and replacing tens of thousands of human bureaucrats is a huge undertaking. Swapping one AI out for another, or modifying the rules that those AIs operate by, would be much simpler.Social-welfare programs, if automated with AI, could be redirected to systematically benefit one group and disadvantage another with a single prompt change. Immigration-enforcement agencies could prioritize people for investigation and detainment with one instruction. Regulatory-enforcement agencies that monitor corporate behavior for malfeasance could turn their attention to, or away from, any given company on a whim.Even if Congress were motivated to fight back against Trump and Musk, or against a future president seeking to bulldoze the will of the legislature, the absolute power to command AI agents would make it easier to subvert legislative intent. AI has the power to diminish representative politics. Written law is never fully determinative of the actions of government—there is always wiggle room for presidents, appointed leaders, and civil servants to exercise their own judgment. Whether intentional or not, whether charitably or not, each of these actors uses discretion. In human systems, that discretion is widely distributed across many individuals—people who, in the case of career civil servants, usually outlast presidencies.Today, the AI ecosystem is dominated by a small number of corporations that decide how the most widely used AI models are designed, which data they are trained on, and which instructions they follow. Because their work is largely secretive and unaccountable to public interest, these tech companies are capable of making changes to the bias of AI systems—either generally or with aim at specific governmental use cases—that are invisible to the rest of us. And these private actors are both vulnerable to coercion by political leaders and self-interested in appealing to their favor. Musk himself created and funded xAI, now one of the world’s largest AI labs, with an explicitly ideological mandate to generate anti-“woke” AI and steer the wider AI industry in a similar direction.But there’s a second way that AI’s transformation of government could go. AI development could happen inside of transparent and accountable public institutions, alongside its continued development by Big Tech. Applications of AI in democratic governments could be focused on benefitting public servants and the communities they serve by, for example, making it easier for non-English speakers to access government services, making ministerial tasks such as processing routine applications more efficient and reducing backlogs, or helping constituents weigh in on the policies deliberated by their representatives. Such AI integrations should be done gradually and carefully, with public oversight for their design and implementation and monitoring and guardrails to avoid unacceptable bias and harm.Governments around the world are demonstrating how this could be done, though it’s early days. Taiwan has pioneered the use of AI models to facilitate deliberative democracy at an unprecedented scale. Singapore has been a leader in the development of public AI models, built transparently and with public-service use cases in mind. Canada has illustrated the role of disclosure and public input on the consideration of AI use cases in government. Even if you do not trust the current White House to follow any of these examples, U.S. states—which have much greater contact and influence over the daily lives of Americans than the federal government—could lead the way on this kind of responsible development and deployment of AI.As the political theorist David Runciman has written, AI is just another in a long line of artificial “machines” used to govern how people live and act, not unlike corporations and states before it. AI doesn’t replace those older institutions, but it changes how they function. As the Trump administration forges stronger ties to Big Tech and AI developers, we need to recognize the potential of that partnership to steer the future of democratic governance—and act to make sure that it does not enable future authoritarians.This essay was written with Nathan E. Sanders, and originally appeared in The Atlantic.]]></content:encoded></item><item><title>How Neurodiversity Can Help Your Life, Team &amp; Business • Katrine Hald Kjeldsen • GOTO 2024</title><link>https://www.youtube.com/watch?v=CIBlbmk1U_c</link><author>GOTO Conferences</author><category>video</category><category>learning</category><enclosure url="https://www.youtube.com/v/CIBlbmk1U_c?version=3" length="" type=""/><pubDate>Fri, 14 Feb 2025 13:00:16 +0000</pubDate><source url="https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA">GOTO Conferences yt</source><content:encoded><![CDATA[This presentation was recorded at GOTO Copenhagen 2024. #GOTOcon #GOTOcph
https://gotocph.com

Katrine Hald Kjeldsen - Neuro-inclusion Specialist @katrinehaldkjeldsen6145 

ORIGINAL TALK TITLE
Change Your Life, Help Your Team & Boost Your Business with Neurodiversity

RESOURCES
https://www.linkedin.com/in/katrinekjeldsen

ABSTRACT
Are you a little spicy? If not, your colleague most probably is. Either way, this talk is for you.

In this session, Katrine will shine a light on neurodiversity and the transformative impact it can have on your life, your team, and your business.

Neurodiversity is not only abundantly prevalent in tech organizations; it is a powerful, often underutilized asset that manifests in every corner of our work environments. It is paramount that we adjust our understanding and strategies around this diversity to thrive. Katrine will explore how neurodiversity shows up in the most unexpected ways and why it’s both surprisingly easy and surprisingly challenging to harness its potential in team collaboration and leadership.

This talk will emphasize practical daily strategies to strengthen collaboration and leverage the advantages of neurodiversity in everyday work contexts, whether it’s adopting clear communication methods, allowing flexible work arrangements, or designing team workflows that play to diverse cognitive strengths. [...]

TIMECODES
00:00 Intro
04:58 Neurodivergent
16:37 Dopamine & ADHD
21:25 Autism
24:47 Diverse perspective
34:40 Conclusions
42:52 Outro

Download slides and read the full abstract here:
https://gotocph.com/2024/sessions/3472

RECOMMENDED BOOKS
Ph.D. Thomas Armstrong • The Power of Neurodiversity • https://amzn.to/3OrbPOg
Maureen Dunne • The Neurodiversity Edge • https://amzn.to/494dGSE
Emily Kircher-Morris & Amanda Morin • Neurodiversity-Affirming Schools • https://amzn.to/3ZjJRdI
Nancy Doyle & Almuth McDowall • Neurodiversity Coaching • https://amzn.to/4fGDdnn

https://bsky.app/profile/gotocon.com
https://twitter.com/GOTOcon
https://www.linkedin.com/company/goto-
https://www.instagram.com/goto_con
https://www.facebook.com/GOTOConferences
#Neurodiversity #Neurodivergent #Autism #ADHD #ParallelPlay #DeepCuriosity #Diversity #Inclusivity #Autism #DiverseTeams #Teams #KatrineHaldKjeldsen

CHANNEL MEMBERSHIP BONUS
Join this channel to get early access to videos & other perks:
https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join

Looking for a unique learning experience?
Attend the next GOTO conference near you! Get your ticket at https://gotopia.tech
Sign up for updates and specials at https://gotopia.tech/newsletter

SUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.
https://www.youtube.com/user/GotoConferences/?sub_confirmation=1]]></content:encoded></item><item><title>[Boost]</title><link>https://dev.to/jisbruzzi/-2734</link><author>José Ignacio Sbruzzi</author><category>dev</category><category>go</category><pubDate>Fri, 14 Feb 2025 12:23:06 +0000</pubDate><source url="https://dev.to/t/go">Dev.to Go</source><content:encoded><![CDATA[Advanced RabbitMQ and Go: Tackling Channel Closures in Exclusive Queues]]></content:encoded></item><item><title>Fake BSOD Delivered by Malicious Python Script, (Fri, Feb 14th)</title><link>https://isc.sans.edu/diary/rss/31686</link><author></author><category>infosec</category><pubDate>Fri, 14 Feb 2025 12:18:05 +0000</pubDate><source url="https://isc.sans.edu/">Sans Edu Diaries</source><content:encoded><![CDATA[I found a Python script that implements a funny anti-analysis trick. The script has a low score on VT (4/59) (SHA256:d716c2edbcdb76c6a6d31b21f154fee7e0f8613617078b69da69c8f4867c9534)[1]. This sample attracted my attention because it uses the tkinter[2] library. This library is used to create graphical user interfaces (GUIs). It provides tools to create windows, dialogs, buttons, labels, text fields, and other interactive elements, allowing developers to build desktop applications with visual interfaces in Python. Most Python scripts are intended to be executed from a command line. That's why I consider this library as a good sign of suspicious behavior (It does not mean that all Python scripts using this library are malicious!)While reviewing the script, a variable contains an interesting piece of text:info = "\nA problem has been detected and windows has been shut down to prevent damage\nto your computer ... (removed) ..."The interesting piece of code is here:root = tk.Tk()
root.configure(background="dark blue")
ex = Example(root)
w, h = root.winfo_screenwidth(), root.winfo_screenheight()
root.overrideredirect(1)
root.geometry("%dx%d+0+0" % (w, h))
root.wm_attributes("-topmost", 1)
root.mainloop()
The attribute "-topmost" set to "1" or "TRUE" will make the window remain open on top of all windows. The window will also be created to fill the screen without any control elements to close or resize it. When the script is executed, you will get this screen:To be honest, that's not the best BSOD ("Blue Screen of Death") that I saw... but it's a nice trick to annoy the victim or slow down (a bit) the analysis of the file.Xavier Mertens (@xme)
Xameco
Senior ISC Handler - Freelance Cyber Security ConsultantPGP Key

 
 (c) SANS Internet Storm Center. https://isc.sans.edu Creative Commons Attribution-Noncommercial 3.0 United States License.]]></content:encoded></item><item><title>Show HN: A New Way to Learn Languages</title><link>https://www.langturbo.com/</link><author>sebnun</author><category>dev</category><category>hn</category><pubDate>Fri, 14 Feb 2025 12:08:58 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Ubuntu Making Progress On Replacing initramfs-tools With Dracut</title><link>https://www.phoronix.com/news/Ubuntu-Dracut-Still-WIP</link><author>Michael Larabel</author><category>tech</category><pubDate>Fri, 14 Feb 2025 12:00:19 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[As a follow-up to the news from last October of Ubuntu considering Dracut to replace initramfs-tools for initrd generation, that work remains ongoing with some improvements since having been prepared for the upcoming Ubuntu 25.04 release but it remains overall an active affair...]]></content:encoded></item><item><title>Real Python: The Real Python Podcast – Episode #239: Behavior-Driven vs Test-Driven Development &amp;amp; Using Regex in Python</title><link>https://realpython.com/podcasts/rpp/239/</link><author></author><category>dev</category><category>python</category><pubDate>Fri, 14 Feb 2025 12:00:00 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[What is behavior-driven development, and how does it work alongside test-driven development? How do you communicate requirements between teams in an organization? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.]]></content:encoded></item><item><title>GNOME Software May Eventually Drop RPM Support In Favor Of Flatpaks</title><link>https://www.phoronix.com/news/GNOME-Software-RPM-Flatpak</link><author>Michael Larabel</author><category>tech</category><pubDate>Fri, 14 Feb 2025 11:37:56 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Stemming from the ongoing discussion around the issues raised with Fedora's Flatpak package of OBS Studio and how Flatpaks should be prioritized within the GNOME Software app center/store, the future of RPM support within GNOME Software raised...]]></content:encoded></item><item><title>Show Your Love For Linux Hardware Coverage This Valentine&apos;s Day</title><link>https://www.phoronix.com/news/Phoronix-Premium-Valentine-2025</link><author>Michael Larabel</author><category>tech</category><pubDate>Fri, 14 Feb 2025 11:30:02 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[If you wish to show your appreciation for all of the Linux hardware reviews, Linux benchmarking, and open-source news provided on Phoronix each and every day, you can join Phoronix Premium this Valentine's Day weekend at a discounted rate...]]></content:encoded></item><item><title>Vulkan 1.4.308 Brings NVIDIA&apos;s Provisional Present Metering Extension</title><link>https://www.phoronix.com/news/Vulkan-1.4.308-Present-Metering</link><author>Michael Larabel</author><category>tech</category><pubDate>Fri, 14 Feb 2025 11:14:26 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Vulkan 1.4.308 was quietly released last week and besides a few fixes what makes it interesting is the provisional VK_NV_present_metering extension...]]></content:encoded></item><item><title>Valkey 8.1-rc1 Delivers Fresh Performance Improvements</title><link>https://www.phoronix.com/news/Valkey-8.1-rc1</link><author>Michael Larabel</author><category>tech</category><pubDate>Fri, 14 Feb 2025 11:05:55 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Valkey as the open-source in-memory store forked from Redis is preparing for its next feature release...]]></content:encoded></item><item><title>Alaa Abd El Fattah&apos;s Mother, Laila Soueif, Calls on UK Government to Help as She Continues Hunger Strike</title><link>https://www.eff.org/deeplinks/2025/02/alaa-abd-el-fattahs-mother-laila-soueif-calls-uk-government-help-hunger-strike</link><author>Karen Gullo</author><category>tech</category><enclosure url="https://www.eff.org/files/banner_library/offline-alaa.png" length="" type=""/><pubDate>Fri, 14 Feb 2025 10:48:50 +0000</pubDate><source url="https://www.eff.org/rss/updates.xml">Deeplinks</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Learning Microsoft Azure • Jonah Andersson &amp; Håkan Silfvernagel</title><link>https://www.youtube.com/watch?v=gEQZBmoN8LM</link><author>GOTO Conferences</author><category>video</category><category>learning</category><enclosure url="https://www.youtube.com/v/gEQZBmoN8LM?version=3" length="" type=""/><pubDate>Fri, 14 Feb 2025 10:41:00 +0000</pubDate><source url="https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA">GOTO Conferences yt</source><content:encoded><![CDATA[This interview was recorded for the GOTO Book Club.
http://gotopia.tech/bookclub

Read the full transcription of the interview here
 (https://gotopia.tech/episodes/339) 
Jonah Andersson - Senior Azure Consultant at Solidify & Author of "Learning Microsoft Azure"
Håkan Silfvernagel - Senior AI Architect at Sopra Steria & Microsoft AI MVP

RESOURCES
Jonah
https://x.com/cjkodare
https://medium.com/@jonah.andersson
https://www.linkedin.com/in/jonahandersson
https://github.com/jonahandersson
https://jonahandersson.tech

Håkan
https://x.com/agrevlis
https://www.linkedin.com/in/hakansilfvernagel
https://sessionize.com/hakan-silfvernagel

Links
https://www.meetup.com/azureusergroupsundsvallsverige
https://podcasters.spotify.com/pod/show/extendwomenintechpodcast

DESCRIPTION
Jonah Andersson, interviewed by Håkan Silfvernagel, shared her experiences writing "Learning Microsoft Azure". With a focus on making the content accessible for beginners, she carefully structured the book to cover essential Azure topics such as cloud computing fundamentals, security, and AI, while drawing on insights from experts in her network, including Microsoft Certified Trainers and MVPs.

Over nearly two years, Jonah Andersson navigated the challenges of a rapidly evolving tech landscape, incorporating emerging trends like generative AI. Passionate about fostering inclusivity in tech, she emphasized the importance of mentorship and community support for underrepresented groups, particularly women. Looking ahead, Jonah Andersson expressed a desire to write a biography that reflects her life lessons and professional journey in technology.

RECOMMENDED BOOKS
Jonah Andersson • Learning Microsoft Azure
 (https://amzn.to/48cOw3T) Adrienne Braganza Tacke • "Looks Good to Me": Constructive Code Reviews
 (https://amzn.to/3E75XrD) Adrienne Braganza Tacke • Coding for Kids
 (https://amzn.to/3Ukd5Gw) Martin Fowler • Refactoring
 (https://amzn.to/3EVcHXQ) Matthew Skelton & Manuel Pais • Team Topologies (http://amzn.to/3sVLyLQ) 


Bluesky (https://bsky.app/profile/gotocon.com) 
Twitter (https://twitter.com/GOTOcon) 
Instagram (https://www.instagram.com/goto_con) 
LinkedIn (https://www.linkedin.com/company/goto-) 
Facebook (https://www.facebook.com/GOTOConferences) 

CHANNEL MEMBERSHIP BONUS
Join this channel to get early access to videos & other perks:
https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join

Looking for a unique learning experience?
Attend the next GOTO conference near you! Get your ticket: gotopia.tech (https://gotopia.tech) 

SUBSCRIBE TO OUR YOUTUBE CHANNEL (https://www.youtube.com/user/GotoConferences/?sub_confirmation=1)  - new videos posted daily!]]></content:encoded></item><item><title>Daniel Roy Greenfeld: Building a playing card deck</title><link>https://daniel.feldroy.com/posts/2025-02-deck-of-cards</link><author></author><category>dev</category><category>python</category><pubDate>Fri, 14 Feb 2025 09:50:04 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[Today is Valentine's Day. That makes it the perfect day to write a blog post about showing how to not just build a deck of cards, but show off cards from the heart suite.]]></content:encoded></item><item><title>1BRC in PHP FFI + Rust</title><link>https://dev.to/gfabrizi/1brc-in-php-ffi-rust-5ed9</link><author>Gianluca Fabrizi</author><category>dev</category><category>rust</category><pubDate>Fri, 14 Feb 2025 09:13:00 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[We have tried multi-threading in PHP to speed up execution time; the results are good, but far from perfect. Is there another way we can improve PHP's performance?In the previous post, we gave an overview of 1BRC, tried to push the limits of PHP when discussing performance optimization, and ran our best PHP script on an EC2 instance.The results were not bad, but not noteworthy either: 17.0636 seconds (the fastest Java code took 1.535 seconds).So what are we supposed to do? Call it a day and get on with our lives? No, obviously not!
We could "cheat" our way to a better score, by abusing one of Python's winning strategies: letting external libraries do the heavy lifting job!
  
  
  Foreign Function Interface
One of the ways to optimize an interpreted language is by moving the slow operations in an external module, usually written in a low-level language.
In PHP you can write system-wide modules and enable them in ; this is useful for generic functions or for code that is not specific to one application.
Since version 7.4 PHP introduced a new feature: Foreign Function Interface (FFI).
FFI is a method for calling external libraries in your PHP coding, without changing global PHP configuration.
This method is more flexible than dealing with modules, but configuring it could be a bit daunting at first.Let's try to wrap a Rust solution of 1BRC in a PHP script (yes, ok, we are definitely cheating).To keep things simple we need a Rust solution that:it's written in a clear wayit's composed of a few filesThere's no need to explain point ; points  and  are needed because we are going to modify the code to make it work as a module.
I love Rust, but I'm not a Rust programmer, so the simpler the code the better.  First of all, we clone the repository, then we edit the  file to add some options:In the  section, we enabled additional performance optimizations (, , ); we added the  section, where we specify that we want to compile the source as a  library (shared libraries that can be linked into external programs).   file is used just to call ; we remove this file and add a  method in : disables the mangle (in short: it keeps the function's name in the exported library) and marks this function as "to export".  We are cheating, but in a responsible way 😅: from PHP code, we pass the weather data filename to the Rust module. Then the Rust module returns the station's aggregated data to be displayed.
PHP is a loosely-typed language, while Rust is a strongly-typed language, so moving data between the two can be a bit of a challenge-in-the-challenge. We need  crate and  from .  The code needed to convert from PHP String to Rust string slice has been taken from ; using it's words:Getting a Rust string slice (&str) requires a few steps:We need to make sure that the C pointer is not  as Rust references are not allowed to be .Use  to wrap the pointer.  will compute the string's length based on the terminating . This requires an  block as we will be dereferencing a raw pointer, which the Rust compiler cannot verify meets all the safety guarantees so the programmer must do it instead.Ensure the C string is valid UTF-8 and convert it to a Rust string slice.In  we use this code:to return a JSON string to the PHP script.  That's it for Rust; we can compile the library with:On the PHP side first of all we need a class to manage the input and output of th Rust module. Let's create a file called :The constructor's code uses  to import the Rust function from the  file.
Here we have to declare the extern function's signature using C code, so the Rust  parameters, become .: it's also possible to use a  header file to specify the function(s) that PHP needs to know about; since we only need one simple function, it is easier to declare it inline in PHP code.The  method invokes the  method of the Rust module (self::$ffi->run($filename)). We called both this wrapper method and the Rust function with the same name (); this is only a coincidence (...or lack of fantasy); it's not mandatory. converts the pointer to a String usable in PHP.We also need an  file to instantiate this  class and to print the results:Nothing interesting here: we call our  method, passing it the measurements filename.
The JSON string from Rust contains temperatures as integers, so we need to divide them by 10 and calculate the average temperature for each station.Let's run this code on the EC2 instance. The configuration is the same as last time: an  with 32 vCPUs and 128GB of memory. For the hard disk, I opted for a 200GB io1 volume (to reach 10,000 IOPS).perf  1B-ffi.log  10  php app/index.php
and these are the results: Performance counter stats for 'php app/index.php' (10 runs):

          58802.93 msec task-clock                       #   29.718 CPUs utilized            ( +-  0.26% )
              4736      context-switches                 #   80.191 /sec                     ( +-  3.80% )
                57      cpu-migrations                   #    0.965 /sec                     ( +- 13.37% )
             52703      page-faults                      #  892.378 /sec                     ( +-  1.33% )
   <not supported>      cycles                                                      
   <not supported>      instructions                                                
   <not supported>      branches                                                    
   <not supported>      branch-misses                                               
   <not supported>      L1-dcache-loads                                             
   <not supported>      L1-dcache-load-misses                                       
   <not supported>      LLC-loads                                                   
   <not supported>      LLC-load-misses                                             

            1.9787 +- 0.0197 seconds time elapsed  ( +-  1.00% )
1.9787 seconds! 🥳 🎉
This is a surprising result, considering the overhead of calling an external module and the fact that we are still making some calculations on the PHP side of the app.After this 2-parts-journey we can affirm that:PHP is slow, but the performance improves significantly when using threadsPerformance tuning is a game of trade-offs: you can improve the speed of a task by saturating all the CPU cores, but your system will become unresponsive. In PHP this is a problem if your application needs to accept more than one connection at a timeFor heavy tasks, you can delegate to optimized external librariesI hope you enjoyed the post!]]></content:encoded></item><item><title>How I Built Open Source Fastest URL Shortener Ever With Rust</title><link>https://dev.to/abdibrokhim/how-i-built-open-source-fastest-url-shortener-ever-with-rust-4ggm</link><author>Ibrohim Abdivokhidov</author><category>dev</category><category>rust</category><pubDate>Fri, 14 Feb 2025 06:53:49 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[In this tutorial, I’ll be walking you thro building notlink - an open source, blazingly fast URL shortener ever. If you are Rust luver. You should definitely check this out. ✨Shuttle (cloud deployment)Actix Web (backend framework)Neon (serverless PostgreSQL)Diesel (ORM for database magic)What we’ll be covering:
✅ Setting up a Rust project from scratch
✅ Integrating Diesel ORM with PostgreSQL (Neon)
✅ Building API endpoints (URL shortening/redirection)
✅ Database migrations, models, and helper functions (crypto, random code generation)
✅ Shuttle deployment hacks (including fixing libpq.so.5 issues with a custom script!)
✅ Testing with curl and troubleshootingInstructor:
Hi, I'm Ibrohim. I build things and make content about it. Known mostly for 70+ Hackathons, 400+ Fails, 4+ Papers, 200K+ Creators, 2+ OS Contributions and $OC, $TROC Meme Coins. 👻Chapters:
00:00 introduction
01:13 getting started with backend
02:54 creating a new Rust project
04:00 Diesel ORM integration
08:15 testing simple app
09:48 DB migration and creating tables
11:55 creating models
13:25 DB operations
15:50 encryption and decryption
19:00 main.rs
19:45 running and testing the app
20:38 deploy to Shuttle and testing real url
22:00 looking thro Neon DB tables and data
22:30 final notes. wrap up.
27:45 outro. my message to ya'll]]></content:encoded></item><item><title>Anyone Can Push Updates to the DOGE.gov Website</title><link>https://www.404media.co/anyone-can-push-updates-to-the-doge-gov-website-2/</link><author>Jason Koebler</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/Screen-Shot-2025-02-13-at-10.38.20-PM.png" length="" type=""/><pubDate>Fri, 14 Feb 2025 06:42:14 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[The doge.gov website that was spun up to track Elon Musk’s cuts to the federal government is insecure and pulls from a database that can be edited by anyone, according to two separate people who found the vulnerability and shared it with 404 Media. One coder added at least two database entries that are visible on the live site and say “this is a joke of a .gov site” and “THESE ‘EXPERTS’ LEFT THEIR DATABASE OPEN -roro.” Doge.gov was hastily deployed after Elon Musk  that his Department of Government Efficiency is “trying to be as transparent as possible. In fact, our actions—we post our actions to the DOGE handle on X, and to the DOGE website.” At the time, DOGE was an essentially blank webpage. It was built out further Wednesday and Thursday, and now shows a mirror of the @DOGE X account posts, as well as various stats about the U.S. government’s federal workforce. Two different web development experts who asked to remain anonymous because they were probing a federal website told 404 Media that doge.gov is seemingly built on a Cloudflare Pages site that is not currently hosted on government servers. The database it is pulling from can be and has been written to by third parties, and will show up on the live website. Both sources told 404 Media that they noticed Doge.gov is pulling from a Cloudflare Pages website, where the code that runs it is actually deployed.]]></content:encoded></item><item><title>ChatLoopBackOff Episode 46 (Dragonfly)</title><link>https://www.youtube.com/watch?v=gd6HRgr8KcA</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/gd6HRgr8KcA?version=3" length="" type=""/><pubDate>Fri, 14 Feb 2025 05:56:56 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Dragonfly, a CNCF Incubating project, is an open-source, cloud-native image and file distribution system optimized for large-scale data delivery. It is designed to enhance the efficiency, speed, and reliability of distributing container images and other data files across distributed systems. 

This CNCF project is for organizations looking to improve the speed, efficiency, and reliability of artifact distribution in cloud-native environments. Join CNCF Ambassador Nitish Kumar as he explores how it works, Kubernetes integration, as well as its simplified setup and usage.]]></content:encoded></item><item><title>TrueNAS 25.04 &quot;Fangtooth&quot; Beta Unifies Linux SCALE &amp; FreeBSD CORE Efforts</title><link>https://www.phoronix.com/news/TrueNAS-25.04-Beta</link><author>Michael Larabel</author><category>tech</category><pubDate>Fri, 14 Feb 2025 05:00:00 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[TrueNAS 25.04 beta was released on Thursday as another step toward unifying the TrueNAS CORE OS derived from FreeBSD and the Linux-based TrueNAS SCALE...]]></content:encoded></item><item><title>Mississippi’s Top Court Says Rights Violations Are OK If Cops Don’t Know How To Do Their Jobs</title><link>https://www.techdirt.com/2025/02/13/mississippis-top-court-says-rights-violations-are-ok-if-cops-dont-know-how-to-do-their-jobs/</link><author>Tim Cushing</author><category>tech</category><pubDate>Fri, 14 Feb 2025 04:10:01 +0000</pubDate><source url="https://www.techdirt.com/">Techdirt</source><content:encoded><![CDATA[There are things you can and can’t do when setting up checkpoints. If it’s DUI enforcement, you can talk to drivers and see if they seem intoxicated. If it’s near a border, you can stop every vehicle to search for undocumented immigrants or contraband.What you can’t do, however, is just set up a checkpoint to stop all cars just to eyeball the interiors and question occupants in hopes of discovering contraband or evidence of illegal activity. That’s pretty much the same thing as entering every house on the block to search for criminal evidence. Just because cars aren’t houses and are traveling on public roads doesn’t give the government the right to engage in some “general rummaging.” In a 6-3 opinion delivered by Justice Sandra Day O’Connor, the Court held that because the checkpoint program’s primary purpose was indistinguishable from the general interest in crime control, the checkpoints violated the Fourth Amendment. “We cannot sanction stops justified only by the generalized and ever-present possibility that interrogation and inspection may reveal that any given motorist has committed some crime,” wrote Justice O’Connor.The city argued it had a justifiable reason for these checkpoints — during which occupants were questioned and drug dogs performed open-air sniffs: drug interdiction. Not good enough, said the Supreme Court. And yet, law enforcement agencies seem convinced they can still do this sort of thing. They can’t. Not legally. But they  get away with it, especially if they hand the job to the officer with the least amount of experience. Once again, ignorance of the law is the best excuse… at least if you’re a cop. That’s the upshot of this Mississippi Supreme Court decision [PDF], brought to our attention by FourthAmendment.com. In this case, two Puckett, MS police officers set up a “safety checkpoint” at a four-way intersection connecting two local highways. Lavern Kendrick was stopped and questioned by Officer Adam McGuffee. McGuffee claimed Kendrick was nervous, that he smelled “burnt plastic” which he took to be indicative of meth use, and happened to see a meth pipe inside Kendrick’s car. One thing led to another, which led to Kendrick’s arrest, and this suppression motion. The trial court saw no problem with any of this, even though Officer McGuffee testified that this checkpoint was mostly exploratory, allowing the officer to check licenses, registration, insurance, and “then whatever is seen in the vehicles.” That alone should have put it out of constitutional bounds, especially 23 years after the Supreme Court’s ruling in .But the lower court decided the cop was just too ignorant to understand what he was doing or saying, and credited the officer’s inexperience, rather than decide it was a clear and obvious violation of the Fourth Amendment.Following the hearing, the trial court acknowledged that Officer McGuffee’s testimony “was a little bit all over the board about the purpose for the stop.” The trial court stated that it was not surprised by this because Officer McGuffee“…was the most inexperienced law enforcement officer for the Town of Puckett. That’s not his fault. That’s just the nature of what it is. He started in January of 2023. He’s a part-time worker. He does other work primarily. This is a part-time job for him.“In other words, the less a cop knows, the more they can get away with. Kendrick argued more logically that McGuffee’s testimony during the trial made it clear the real purpose of the checkpoint was “general crime control,” rather than just ensuring drivers were properly licensed and insured. Unfortunately, the state’s top court agrees with the lower court: inexperience is a halo. We find that the record supports the trial court’s conclusion. With permission from the chief of police, Officer McGuffee and Officer Lathum set up a safety checkpoint, the primary purpose of which was to check that each driver passing through it was properly licensed and insured. Evidence was presented that this was a routine safety checkpoint and that every vehicle passing through was briefly stopped.The primary purpose of checking driver’s licenses and insurance cards substantially outweighed the minimal intrusion of Kendrick’s individual liberty. And the safety checkpoint did not violate the search-and-seizure provision of either the Fourth Amendment or the state constitution.And there it is: if a cop doesn’t have the experience to do this job properly, he can just blunder around and allow the court to undo the constitutional damage he has done… at least in Mississippi. My guess is these “safety checkpoints” are really the kind outlawed by the Supreme Court’s  decision but McGuffee just hadn’t been on the job long enough to know to how to better hide this fact from trial courts while testifying. He did his job just poorly enough to salvage an illicit possession/DUI bust. And the state’s law enforcement get their free pass on shady checkpoints extended.]]></content:encoded></item><item><title>Building a Data Engineering Center of Excellence</title><link>https://towardsdatascience.com/building-a-data-engineering-center-of-excellence/</link><author>Richie Bachala</author><category>dev</category><category>ai</category><pubDate>Fri, 14 Feb 2025 02:35:48 +0000</pubDate><source url="https://towardsdatascience.com/">Towards Data Science</source><content:encoded><![CDATA[As data continues to grow in importance and become more complex, the need for skilled data engineers has never been greater. But what is data engineering, and why is it so important? In this blog post, we will discuss the essential components of a functioning data engineering practice and why data engineering is becoming increasingly critical for businesses today, and how you can build your very own Data Engineering Center of Excellence!I’ve had the privilege to build, manage, lead, and foster a sizeable high-performing team of data warehouse & ELT engineers for many years. With the help of my team, I have spent a considerable amount of time every year consciously planning and preparing to manage the growth of our data month-over-month and address the changing reporting and analytics needs for our 20000+ global data consumers. We built many data warehouses to store and centralize massive amounts of data generated from many OLTP sources. We’ve implemented Kimball methodology by creating star schemas both within our on-premise data warehouses and in the ones in the cloud.The objective is to enable our user-base to perform fast analytics and reporting on the data; so our analysts’ community and business users can make accurate data-driven decisions.It took me about three years to transform  () of data warehouse and ETL programmers into one cohesive Data Engineering team.I have compiled some of my learnings building a global data engineering team in this post in hopes that Data professionals and leaders of all levels of technical proficiency can benefit.Evolution of the Data EngineerIt has never been a better time to be a data engineer. Over the last decade, we have seen a massive awakening of enterprises now recognizing their data as the company’s heartbeat, making data engineering the job function that ensures accurate, current, and quality data flow to the solutions that depend on it.Historically, the role of Data Engineers has evolved from that of data warehouse developers and the  (extract, transform and load).The data warehouse developers are responsible for designing, building, developing, administering, and maintaining data warehouses to meet an enterprise’s reporting needs. This is done primarily via extracting data from operational and transactional systems and piping it using extract transform load methodology (ETL/ ELT) to a storage layer like a data warehouse or a data lake. The data warehouse or the data lake is where data analysts, data scientists, and business users consume data. The developers also perform transformations to conform the ingested data to a data model with aggregated data for easy analysis.A data engineer’s prime responsibility is to produce and make data securely available for multiple consumers.Data engineers oversee the ingestion, transformation, modeling, delivery, and movement of data through every part of an organization. Data extraction happens from many different data sources & applications. Data Engineers load the data into data warehouses and data lakes, which are transformed not just for the Data Science & predictive analytics initiatives (as everyone likes to talk about) but primarily for data analysts. Data analysts & data scientists perform operational reporting, exploratory analytics, service-level agreement (SLA) based business intelligence reports and dashboards on the catered data. In this book, we will address all of these job functions.The role of a data engineer is to acquire, store, and aggregate data from both cloud and on-premise, new, and existing systems, with data modeling and feasible data architecture. Without the data engineers, analysts and data scientists won’t have valuable data to work with, and hence, data engineers are the first to be hired at the inception of every new data team. Based on the data and analytics tools available within an enterprise, data engineering teams’ role profiles, constructs, and approaches have several options for what should be included in their responsibilities which we will discuss in this chapter.Software is increasingly automating the historically manual and tedious tasks of data engineers. Data processing tools and technologies have evolved massively over several years and will continue to grow. For example, cloud-based data warehouses (Snowflake, for instance) have made data storage and processing affordable and fast. Data pipeline services (like Informatica IICS, Apache Airflow, Matillion, Fivetran) have turned data extraction into work that can be completed quickly and efficiently. The data engineering team should be leveraging such technologies as force multipliers, taking a consistent and cohesive approach to integration and management of enterprise data, not just relying on legacy siloed approaches to building custom data pipelines with fragile, non-performant, hard to maintain code. Continuing with the latter approach will stifle the pace of innovation within the said enterprise and force the future focus to be around managing data infrastructure issues rather than how to help generate value for your business.The primary role of an enterprise Data Engineering team should be to  into a shape that’s ready for analysis — laying the foundation for real-world analytics and data science application.The Data Engineering team should serve as the  for enterprise-level data with the responsibility to curate the organization’s data and act as a resource for those who want to make use of it, such as Reporting & Analytics teams, Data Science teams, and other groups that are doing more self-service or business group driven analytics leveraging the enterprise data platform. This team should serve as the  of organizational knowledge, managing and refining the catalog so that analysis can be done more effectively. Let’s look at the essential responsibilities of a well-functioning Data Engineering team.Responsibilities of a Data Engineering TeamThe Data Engineering team should provide a  within the enterprise that cuts across to support both the Reporting/Analytics and Data Science capabilities to provide access to clean, transformed, formatted, scalable, and secure data ready for analysis. The Data Engineering teams’ core responsibilities should include:· Build, manage, and optimize the core data platform infrastructure· Build and maintain custom and off-the-shelf data integrations and ingestion pipelines from a variety of structured and unstructured sources· Manage overall data pipeline orchestration· Manage transformation of data either before or after load of raw data through both technical processes and business logic· Support analytics teams with design and performance optimizations of data warehousesData is an Enterprise Asset.Data as an Asset should be shared and protected.Data should be valued as an Enterprise asset, leveraged across all Business Units to enhance the company’s value to its respective customer base by accelerating decision making, and improving competitive advantage with the help of data. Good data stewardship, legal and regulatory requirements dictate that we protect the data owned from unauthorized access and disclosure.In other words, managing Security is a crucial responsibility.Why Create a Centralized Data Engineering Team?Treating Data Engineering as a standard and core capability that underpins both the Analytics and Data Science capabilities will help an enterprise evolve how to approach Data and Analytics. The enterprise needs to stop vertically treating data based on the technology stack involved as we tend to see often and move to more of a horizontal approach of managing a  or  that cuts across the organization and can connect to various technologies as needed drive analytic initiatives. This is a new way of thinking and working, but it can drive efficiency as the various data organizations look to scale. Additionally — there is value in creating a dedicated structure and career path for Data Engineering resources. Data engineering skill sets are in high demand in the market; therefore, hiring outside the company can be costly. Companies must enable programmers, database administrators, and software developers with a career path to gain the needed experience with the above-defined skillsets by working across technologies. Usually, forming a data engineering center of excellence or a capability center would be the first step for making such progression possible.Challenges for creating a centralized Data Engineering TeamThe centralization of the Data Engineering team as a service approach is different from how Reporting & Analytics and Data Science teams operate. It does, in principle, mean giving up some level of control of resources and establishing new processes for how these teams will collaborate and work together to deliver initiatives.The Data Engineering team will need to demonstrate that it can effectively support the needs of both Reporting & Analytics and Data Science teams, no matter how large these teams are. Data Engineering teams must effectively prioritize workloads while ensuring they can bring the right skillsets and experience to assigned projects.Data engineering is essential because it serves as the backbone of data-driven companies. It enables analysts to work with clean and well-organized data, necessary for deriving insights and making sound decisions. To build a functioning data engineering practice, you need the following critical components:The Data Engineering team should be a core capability within the enterprise, but it should effectively serve as a support function involved in almost everything data-related. It should interact with the Reporting and Analytics and Data Science teams in a collaborative support role to make the entire team successful.The Data Engineering team doesn’t create direct business value — but the value should come in making the Reporting and Analytics, and Data Science teams more productive and efficient to ensure delivery of maximum value to business stakeholders through Data & Analytics initiatives. To make that possible, the six key responsibilities within the data engineering capability center would be as follow –Let’s review the 6 pillars of responsibilities:1. Determine Central Data Location for Collation and WranglingUnderstanding and having a strategy for a (a centralized data repository or data warehouse for the mass consumption of data for analysis). Defining requisite data tables and where they will be joined in the context of data engineering and subsequently converting raw data into digestible and valuable formats.2. Data Ingestion and TransformationMoving data from one or more sources to a new destination (your data lake or cloud data warehouse) where it can be stored and further analyzed and then converting data from the format of the source system to that of the destinationExtracting, transforming, and loading data from one or more sources into a destination system to represent the data in a new context or style.Data modeling is an essential function of a data engineering team, granted not all data engineers excel with this capability. Formalizing relationships between data objects and business rules into a conceptual representation through understanding information system workflows, modeling required queries, designing tables, determining primary keys, and effectively utilizing data to create informed output.I’ve seen engineers in interviews mess up more with this than coding in technical discussions. It’s essential to understand the differences between Dimensions, Facts, Aggregate tables.Ensuring that sensitive data is protected and implementing proper authentication and authorization to reduce the risk of a data breach6. Architecture and AdministrationDefining the models, policies, and standards that administer what data is collected, where and how it is stored, and how it such data is integrated into various analytical systems.The six pillars of responsibilities for data engineering capabilities center on the ability to determine a central data location for collation and wrangling, ingest and transform data, execute ETL/ELT operations, model data, secure access and administer an architecture. While all companies have their own specific needs with regards to these functions, it is important to ensure that your team has the necessary skillset in order to build a foundation for big data success.Besides the Data Engineering following are the other capability centers that need to be considered within an enterprise:Analytics Capability CenterThe analytics capability center enables consistent, effective, and efficient BI, analytics, and advanced analytics capabilities across the company. Assist business functions in triaging, prioritizing, and achieving their objectives and goals through reporting, analytics, and dashboard solutions, while providing operational reports and visualizations, self-service analytics, and required tools to automate the generation of such insights.Data Science Capability CenterThe data science capability center is for exploring cutting-edge technologies and concepts to unlock new insights and opportunities, better inform employees and create a culture of prescriptive information usage using Automated AI and Automated ML solutions such as H2O.ai, Dataiku, Aible, DataRobot, C3.aiThe data governance office empowers users with trusted, understood, and timely data to drive effectiveness while keeping the integrity and sanctity of data in the right hands for mass consumption.As your company grows, you will want to make sure that the data engineering capabilities are in place to support the six pillars of responsibilities. By doing this, you will be able to ensure that all aspects of data management and analysis are covered and that your data is safe and accessible by those who need it. Have you started thinking about how your company will grow? What steps have you taken to put a centralized data engineering team in place?]]></content:encoded></item><item><title>ISC Stormcast For Friday, February 14th, 2025 https://isc.sans.edu/podcastdetail/9324, (Fri, Feb 14th)</title><link>https://isc.sans.edu/diary/rss/31684</link><author></author><category>infosec</category><pubDate>Fri, 14 Feb 2025 02:00:02 +0000</pubDate><source url="https://isc.sans.edu/">Sans Edu Diaries</source><content:encoded><![CDATA[
 
 (c) SANS Internet Storm Center. https://isc.sans.edu Creative Commons Attribution-Noncommercial 3.0 United States License.]]></content:encoded></item><item><title>OBS Studio Raises Issues With Fedora&apos;s Flatpak Package</title><link>https://www.phoronix.com/news/OBS-Studio-Poor-Fedora-Flatpak</link><author>Michael Larabel</author><category>tech</category><pubDate>Fri, 14 Feb 2025 01:39:52 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[The OBS Studio open-source screencasting and streaming app has called out Fedora's poor Flatpak packaging of the application and is threatening as going as far as legal action if it isn't addressed...]]></content:encoded></item><item><title>Risky Biz Soap Box: Run your own open source IDP with Authentik</title><link>https://risky.biz/soapbox93/</link><author></author><category>infosec</category><category>podcast</category><enclosure url="https://dts.podtrac.com/redirect.mp3/media3.risky.biz/soapbox93.mp3" length="" type=""/><pubDate>Fri, 14 Feb 2025 00:24:24 +0000</pubDate><source url="https://risky.biz/">Risky Business blog</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>5 Learnings from sharing Kafka vs Fluvio Benchmarks on Reddit</title><link>https://dev.to/debadyuti/5-learnings-from-sharing-kafka-vs-fluvio-benchmarks-on-reddit-34</link><author>Deb</author><category>dev</category><category>rust</category><pubDate>Fri, 14 Feb 2025 00:22:53 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[To have a readable blog, all the links are at the bottom except the link to the Fluvio project.Yesterday, I shared a blog on benchmarking results comparing Fluvio, our next-generation streaming engine, with Apache Kafka. The response from the Rust community was encouraging, with over 30,000 impressions, 80+ upvotes, and 40+ comments in just 24 hours. The feedback was invaluable, and I want to share the 5 things I learned from all the developer feedback.Fluvio is a distributed streaming engine built in Rust over the past six years. While it follows Apache Kafka's conceptual patterns, it introduces programmable design patterns through Rust and WebAssembly-based stream processing called Stateful DataFlow (SDF). This makes Fluvio a complete platform for event streaming.
  
  
  1. Developers care a lot about the benchmark environment.
The community emphasized the importance of comprehensive testing environments:Need for bare metal servers to eliminate virtualization artifactsProduction-grade setups with proper replication (factor of 3)Large-scale validation with terabyte-scale live dataThe ideal benchmarks will be using real-world data from Blockchain, High-Frequency Trading, or Ad-Tech on bare metal servers and compare multiple systems like Kafka, RedPanda, Pulsar.
  
  
  2. Intelligent developers know about the trade-offs of using different hardware.
Developers highlighted several hardware-specific considerations:ARM Graviton chips' latency variations in virtualized environmentsImportance of testing across different CPU architectures including x86Thermal throttling differences between consumer laptops and server-grade hardware
  
  
  3. Seasoned developers want production-ready configuration for each solution being configured
Runtime mechanics need to reflect real-world scenarios:Specific JVM and Garbage Collector configurations for Kafka benchmarkingResource utilization patterns under various loadsMulti-node deployment testing at scale
  
  
  4. While benchmarks are great benchmarking in mature categories require mention of table-stakes features
Key functionality developers look for:Consumer groups for ordered delivery per partitionStream and batch processing capabilitiesRobust delivery guarantees
  
  
  5. Benchmarks also immediately makes developers think of reliability and debugging experience
Critical operational features:Dead letter queue implementationsRetry strategies for network issuesDelivery proof mechanisms beyond best-effort
  
  
  The New Streaming Paradigm
Event streaming is a basic pattern in a world filled with agents.Wise developers focus on:Practical performance over theoretical maximaTransparent benchmarking methodologyIntuitive deployment and management
  
  
  Our Vision for Next Generation Data Intensive Applications
We believe the next wave of intelligent applications will come from builders who:Challenge traditional infrastructure assumptionsRequire millisecond latencies at scalePrioritize resource efficiencyWe don't just need faster systems - we need smarter ones that don't drain budgets or sanity.The future belongs to systems that balance raw performance with operational wisdom. The question isn't just about speed—it's about enabling rapid innovation delivering an intuitive developer ergonomics while maintaining efficiency and reliability.]]></content:encoded></item><item><title>The Cloud Controller Manager Chicken and Egg Problem</title><link>https://kubernetes.io/blog/2025/02/14/cloud-controller-manager-chicken-egg-problem/</link><author></author><category>official</category><category>k8s</category><category>devops</category><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><source url="https://kubernetes.io/">Kubernetes Blog</source><content:encoded><![CDATA[Kubernetes 1.31
completed the largest migration in Kubernetes history, removing the in-tree
cloud provider. While the component migration is now done, this leaves some additional
complexity for users and installer projects (for example, kOps or Cluster API) . We will go
over those additional steps and failure points and make recommendations for cluster owners.
This migration was complex and some logic had to be extracted from the core components,
building four new subsystems.One of the most critical functionalities of the cloud controller manager is the node controller,
which is responsible for the initialization of the nodes.As you can see in the following diagram, when the  starts, it registers the Node
object with the apiserver, Tainting the node so it can be processed first by the
cloud-controller-manager. The initial Node is missing the cloud-provider specific information,
like the Node Addresses and the Labels with the cloud provider specific information like the
Node, Region and Instance type information.Chicken and egg problem sequence diagramThis new initialization process adds some latency to the node readiness. Previously, the kubelet
was able to initialize the node at the same time it created the node. Since the logic has moved
to the cloud-controller-manager, this can cause a chicken and egg problem
during the cluster bootstrapping for those Kubernetes architectures that do not deploy the
controller manager as the other components of the control plane, commonly as static pods,
standalone binaries or daemonsets/deployments with tolerations to the taints and using
 (more on this below)Examples of the dependency problemAs noted above, it is possible during bootstrapping for the cloud-controller-manager to be
unschedulable and as such the cluster will not initialize properly. The following are a few
concrete examples of how this problem can be expressed and the root causes for why they might
occur.These examples assume you are running your cloud-controller-manager using a Kubernetes resource
(e.g. Deployment, DaemonSet, or similar) to control its lifecycle. Because these methods
rely on Kubernetes to schedule the cloud-controller-manager, care must be taken to ensure it
will schedule properly.Example: Cloud controller manager not scheduling due to uninitialized taintAs noted in the Kubernetes documentation, when the kubelet is started with the command line
flag --cloud-provider=external, its corresponding  object will have a no schedule taint
named node.cloudprovider.kubernetes.io/uninitialized added. Because the cloud-controller-manager
is responsible for removing the no schedule taint, this can create a situation where a
cloud-controller-manager that is being managed by a Kubernetes resource, such as a 
or , may not be able to schedule.If the cloud-controller-manager is not able to be scheduled during the initialization of the
control plane, then the resulting  objects will all have the
node.cloudprovider.kubernetes.io/uninitialized no schedule taint. It also means that this taint
will not be removed as the cloud-controller-manager is responsible for its removal. If the no
schedule taint is not removed, then critical workloads, such as the container network interface
controllers, will not be able to schedule, and the cluster will be left in an unhealthy state.Example: Cloud controller manager not scheduling due to not-ready taintThe next example would be possible in situations where the container network interface (CNI) is
waiting for IP address information from the cloud-controller-manager (CCM), and the CCM has not
tolerated the taint which would be removed by the CNI."The Node controller detects whether a Node is ready by monitoring its health and adds or removes this taint accordingly."One of the conditions that can lead to a Node resource having this taint is when the container
network has not yet been initialized on that node. As the cloud-controller-manager is responsible
for adding the IP addresses to a Node resource, and the IP addresses are needed by the container
network controllers to properly configure the container network, it is possible in some
circumstances for a node to become stuck as not ready and uninitialized permanently.This situation occurs for a similar reason as the first example, although in this case, the
node.kubernetes.io/not-ready taint is used with the no execute effect and thus will cause the
cloud-controller-manager not to run on the node with the taint. If the cloud-controller-manager is
not able to execute, then it will not initialize the node. It will cascade into the container
network controllers not being able to run properly, and the node will end up carrying both the
node.cloudprovider.kubernetes.io/uninitialized and node.kubernetes.io/not-ready taints,
leaving the cluster in an unhealthy state.There is no one “correct way” to run a cloud-controller-manager. The details will depend on the
specific needs of the cluster administrators and users. When planning your clusters and the
lifecycle of the cloud-controller-managers please consider the following guidance:For cloud-controller-managers running in the same cluster, they are managing.Use host network mode, rather than the pod network: in most cases, a cloud controller manager
will need to communicate with an API service endpoint associated with the infrastructure.
Setting “hostNetwork” to true will ensure that the cloud controller is using the host
networking instead of the container network and, as such, will have the same network access as
the host operating system. It will also remove the dependency on the networking plugin. This
will ensure that the cloud controller has access to the infrastructure endpoint (always check
your networking configuration against your infrastructure provider’s instructions).Use a scalable resource type.  and  are useful for controlling the
lifecycle of a cloud controller. They allow easy access to running multiple copies for redundancy
as well as using the Kubernetes scheduling to ensure proper placement in the cluster. When using
these primitives to control the lifecycle of your cloud controllers and running multiple
replicas, you must remember to enable leader election, or else your controllers will collide
with each other which could lead to nodes not being initialized in the cluster.Target the controller manager containers to the control plane. There might exist other
controllers which need to run outside the control plane (for example, Azure’s node manager
controller). Still, the controller managers themselves should be deployed to the control plane.
Use a node selector or affinity stanza to direct the scheduling of cloud controllers to the
control plane to ensure that they are running in a protected space. Cloud controllers are vital
to adding and removing nodes to a cluster as they form a link between Kubernetes and the
physical infrastructure. Running them on the control plane will help to ensure that they run
with a similar priority as other core cluster controllers and that they have some separation
from non-privileged user workloads.
It is worth noting that an anti-affinity stanza to prevent cloud controllers from running
on the same host is also very useful to ensure that a single node failure will not degrade
the cloud controller performance.Ensure that the tolerations allow operation. Use tolerations on the manifest for the cloud
controller container to ensure that it will schedule to the correct nodes and that it can run
in situations where a node is initializing. This means that cloud controllers should tolerate
the node.cloudprovider.kubernetes.io/uninitialized taint, and it should also tolerate any
taints associated with the control plane (for example, node-role.kubernetes.io/control-plane
or node-role.kubernetes.io/master). It can also be useful to tolerate the
node.kubernetes.io/not-ready taint to ensure that the cloud controller can run even when the
node is not yet available for health monitoring.For cloud-controller-managers that will not be running on the cluster they manage (for example,
in a hosted control plane on a separate cluster), then the rules are much more constrained by the
dependencies of the environment of the cluster running the cloud-controller-manager. The advice
for running on a self-managed cluster may not be appropriate as the types of conflicts and network
constraints will be different. Please consult the architecture and requirements of your topology
for these scenarios.This is an example of a Kubernetes Deployment highlighting the guidance shown above. It is
important to note that this is for demonstration purposes only, for production uses please
consult your cloud provider’s documentation.apiVersion: apps/v1
kind: Deployment
metadata:
labels:
app.kubernetes.io/name: cloud-controller-manager
name: cloud-controller-manager
namespace: kube-system
spec:
replicas: 2
selector:
matchLabels:
app.kubernetes.io/name: cloud-controller-manager
strategy:
type: Recreate
template:
metadata:
labels:
app.kubernetes.io/name: cloud-controller-manager
annotations:
kubernetes.io/description: Cloud controller manager for my infrastructure
spec:
containers: # the container details will depend on your specific cloud controller manager
- name: cloud-controller-manager
command:
- /bin/my-infrastructure-cloud-controller-manager
- --leader-elect=true
- -v=1
image: registry/my-infrastructure-cloud-controller-manager@latest
resources:
requests:
cpu: 200m
memory: 50Mi
hostNetwork: true # these Pods are part of the control plane
nodeSelector:
node-role.kubernetes.io/control-plane: ""
affinity:
podAntiAffinity:
requiredDuringSchedulingIgnoredDuringExecution:
- topologyKey: "kubernetes.io/hostname"
labelSelector:
matchLabels:
app.kubernetes.io/name: cloud-controller-manager
tolerations:
- effect: NoSchedule
key: node-role.kubernetes.io/master
operator: Exists
- effect: NoExecute
key: node.kubernetes.io/unreachable
operator: Exists
tolerationSeconds: 120
- effect: NoExecute
key: node.kubernetes.io/not-ready
operator: Exists
tolerationSeconds: 120
- effect: NoSchedule
key: node.cloudprovider.kubernetes.io/uninitialized
operator: Exists
- effect: NoSchedule
key: node.kubernetes.io/not-ready
operator: Exists
When deciding how to deploy your cloud controller manager it is worth noting that
cluster-proportional, or resource-based, pod autoscaling is not recommended. Running multiple
replicas of a cloud controller manager is good practice for ensuring high-availability and
redundancy, but does not contribute to better performance. In general, only a single instance
of a cloud controller manager will be reconciling a cluster at any given time.]]></content:encoded></item><item><title>It&apos;s time to go ESM-only</title><link>https://javascriptweekly.com/issues/723</link><author></author><category>dev</category><category>frontend</category><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><source url="https://javascriptweekly.com/">Javascript Weekly</source><content:encoded><![CDATA[🤯 Pfft, vehicle data is a joke without CarsXE. API goes brrrrr. VIN decoding, plate lookup, market value reports. Get Serious!]]></content:encoded></item><item><title>Mapped types in TypeScript</title><link>https://2ality.com/2025/02/mapped-types-typescript.html</link><author>Dr. Axel Rauschmayer</author><category>dev</category><category>frontend</category><category>blog</category><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><source url="https://feeds.feedburner.com/2ality">Axel Raushmayer</source><content:encoded><![CDATA[A mapped type is a loop over keys that produces an object or tuple type and looks as follows:{[]: }
In this blog post, we examine how mapped types work and see examples of using them. Their most importing use cases are transforming objects and mapping tuples.]]></content:encoded></item><item><title>We Were Wrong About GPUs</title><link>https://fly.io/blog/wrong-about-gpu/</link><author>Fly</author><category>dev</category><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><source url="https://fly.io/blog/feed.xml">Fly.io blog</source><content:encoded><![CDATA[We’re building a public cloud, on hardware we own. We raised money to do that, and to place some bets; one of them: GPU-enabling our customers. A progress report: GPUs aren’t going anywhere, but: GPUs aren’t going anywhere.A Fly Machine is a Docker/OCI container running inside a hardware-virtualized virtual machine somewhere on our global fleet of bare-metal worker servers. A GPU Machine is a Fly Machine with a hardware-mapped Nvidia GPU. It’s a Fly Machine that can do fast CUDA.Like everybody else in our industry, we were right about the importance of AI/ML. If anything, we underestimated its importance. But the product we came up with probably doesn’t fit the moment. It’s a bet that doesn’t feel like it’s paying off.If you’re using Fly GPU Machines, don’t freak out; we’re not getting rid of them. But if you’re waiting for us to do something bigger with them, a v2 of the product, you’ll probably be waiting awhile.GPU Machines were not a small project for us. Fly Machines run on an idiosyncratically small hypervisor (normally Firecracker, but for GPU Machines Intel’s Cloud Hypervisor, a very similar Rust codebase that supports PCI passthrough). The Nvidia ecosystem is not geared to supporting micro-VM hypervisors.GPUs terrified our security team. A GPU is just about the worst case hardware peripheral: intense multi-directional direct memory transfers(not even bidirectional: in common configurations, GPUs talk to each other)with arbitrary, end-user controlled computation, all operating outside our normal security boundary.We did a couple expensive things to mitigate the risk. We shipped GPUs on dedicated server hardware, so that GPU- and non-GPU workloads weren’t mixed. Because of that, the only reason for a Fly Machine to be scheduled on a GPU machine was that it needed a PCI BDF for an Nvidia GPU, and there’s a limited number of those available on any box. Those GPU servers were drastically less utilized and thus less cost-effective than our ordinary servers.We funded two very large security assessments, from Atredis and Tetrel, to evaluate our GPU deployment. Matt Braun is writing up those assessments now. They were not cheap, and they took time.Security wasn’t directly the biggest cost we had to deal with, but it was an indirect cause for a subtle reason.We could have shipped GPUs very quickly by doing what Nvidia recommended: standing up a standard K8s cluster to schedule GPU jobs on. Had we taken that path, and let our GPU users share a single Linux kernel, we’d have been on Nvidia’s driver happy-path.Alternatively, we could have used a conventional hypervisor. Nvidia suggested VMware (heh). But they could have gotten things working had we used QEMU. We like QEMU fine, and could have talked ourselves into a security story for it, but the whole point of Fly Machines is that they take milliseconds to start. We could not have offered our desired Developer Experience on the Nvidia happy-path.Instead, we burned months trying (and ultimately failing) to get Nvidia’s host drivers working to map virtualized GPUs into Intel Cloud Hypervisor. At one point, we hex-edited the closed-source drivers to trick them into thinking our hypervisor was QEMU.I’m not sure any of this really mattered in the end. There’s a segment of the market we weren’t ever really able to explore because Nvidia’s driver support kept us from thin-slicing GPUs. We’d have been able to put together a really cheap offering for developers if we hadn’t run up against that, and developers love “cheap”, but I can’t prove that those customers are real.On the other hand, we’re committed to delivering the Fly Machine DX for GPU workloads. Beyond the PCI/IOMMU drama, just getting an entire hardware GPU working in a Fly Machine was a lift. We needed Fly Machines that would come up with the right Nvidia drivers; our stack was built assuming that the customer’s OCI container almost entirely defined the root filesystem for a Machine. We had to engineer around that in our  orchestrator. And almost everything people want to do with GPUs involves efficiently grabbing huge files full of model weights. Also annoying!And, of course, we bought GPUs. A lot of GPUs. Expensive GPUs.The biggest problem: developers don’t want GPUs. They don’t even want AI/ML models. They want LLMs.  may have smart, fussy opinions on how to get their models loaded with CUDA, and what the best GPU is. But  don’t care about any of that. When a software developer shipping an app comes looking for a way for their app to deliver prompts to an LLM, you can’t just give them a GPU.For those developers, who probably make up most of the market, it doesn’t seem plausible for an insurgent public cloud to compete with OpenAI and Anthropic. Their APIs are fast enough, and developers thinking about performance in terms of “tokens per second” aren’t counting milliseconds.(you should all feel sympathy for us)This makes us sad because we really like the point in the solution space we found. Developers shipping apps on Amazon will outsource to other public clouds to get cost-effective access to GPUs. But then they’ll faceplant trying to handle data and model weights, backhauling gigabytes (at significant expense) from S3. We have app servers, GPUs, and object storage all under the same top-of-rack switch. But inference latency just doesn’t seem to matter yet, so the market doesn’t care.Past that, and just considering the system engineers who do care about GPUs rather than LLMs: the hardware product/market fit here is really rough.People doing serious AI work want galactically huge amounts of GPU compute. A whole enterprise A100 is a compromise position for them; they want an SXM cluster of H100s.Near as we can tell, MIG gives you a UUID to talk to the host driver, not a PCI device.We think there’s probably a market for users doing lightweight ML work getting tiny GPUs. This is what Nvidia MIG does, slicing a big GPU into arbitrarily small virtual GPUs. But for fully-virtualized workloads, it’s not baked; we can’t use it. And I’m not sure how many of those customers there are, or whether we’d get the density of customers per server that we need.That leaves the L40S customers. There are a bunch of these! We dropped L40S prices last year, not because we were sour on GPUs but because they’re the one part we have in our inventory people seem to get a lot of use out of. We’re happy with them. But they’re just another kind of compute that some apps need; they’re not a driver of our core business. They’re not the GPU bet paying off.Really, all of this is just a long way of saying that for most software developers, “AI-enabling” their app is best done with API calls to things like Claude and GPT, Replicate and RunPod.A very useful way to look at a startup is that it’s a race to learn stuff. So, what’s our report card?First off, when we embarked down this path in 2022, we were (like many other companies) operating in a sort of phlogiston era of AI/ML. The industry attention to AI had not yet collapsed around a small number of foundational LLM models. We expected there to be a diversity of  models, the world Elixir Bumblebee looks forward to, where people pull different AI workloads off the shelf the same way they do Ruby gems.But Cursor happened, and, as they say, how are you going to keep ‘em down on the farm once they’ve seen Karl Hungus? It seems much clearer where things are heading.GPUs were a test of a Fly.io company credo: as we think about core features, we design for 10,000 developers, not for 5-6. It took a minute, but the credo wins here: GPU workloads for the 10,001st developer are a niche thing.Another way to look at a startup is as a series of bets. We put a lot of chips down here. But the buy-in for this tournament gave us a lot of chips to play with. Never making a big bet of any sort isn’t a winning strategy. I’d rather we’d flopped the nut straight, but I think going in on this hand was the right call.A really important thing to keep in mind here, and something I think a lot of startup thinkers sleep on, is the extent to which this bet involved acquiring assets. Obviously, some of our costs here aren’t recoverable. But the hardware parts that aren’t generating revenue will ultimately get liquidated; like with our portfolio of IPv4 addresses, I’m even more comfortable making bets backed by tradable assets with durable value.In the end, I don’t think GPU Fly Machines were going to be a hit for us no matter what we did. Because of that, one thing I’m very happy about is that we didn’t compromise the rest of the product for them. Security concerns slowed us down to where we probably learned what we needed to learn a couple months later than we could have otherwise, but we’re scaling back our GPU ambitions without having sacrificed any of our isolation story, and, ironically, GPUs  are making that story a lot more important. The same thing goes for our Fly Machine developer experience.We started this company building a Javascript runtime for edge computing. We learned that our customers didn’t want a new Javascript runtime; they just wanted their native code to work. We shipped containers, and no convincing was needed. We were wrong about Javascript edge functions, and I think we were wrong about GPUs. That’s usually how we figure out the right answers:  by being wrong about a lot of stuff.]]></content:encoded></item><item><title>AWS CloudTrail network activity events for VPC endpoints now generally available</title><link>https://aws.amazon.com/blogs/aws/aws-cloudtrail-network-activity-events-for-vpc-endpoints-now-generally-available/</link><author>Esra Kayabali</author><category>devops</category><pubDate>Thu, 13 Feb 2025 23:17:54 +0000</pubDate><source url="https://aws.amazon.com/blogs/aws/">AWS blog</source><content:encoded><![CDATA[Today, I’m happy to announce the general availability of network activity events for Amazon Virtual Private Cloud (Amazon VPC) endpoints in AWS CloudTrail. This feature helps you to record and monitor AWS API activity traversing your VPC endpoints, helping you strengthen your data perimeter and implement better detective controls.Previously, it was hard to detect potential data exfiltration attempts and unauthorized access to the resources within your network through VPC endpoints. While VPC endpoint policies could be configured to prevent access from external accounts, there was no built-in mechanism to log denied actions or detect when external credentials were used at a VPC endpoint. This often required you to build custom solutions to inspect and analyze TLS traffic, which could be operationally costly and negate the benefits of encrypted communications.With this new capability, you can now opt in to log all AWS API activity passing through your VPC endpoints. CloudTrail records these events as a new event type called network activity events, which capture both control plane and data plane actions passing through a VPC endpoint.Network activity events in CloudTrail provide several key benefits: – Log all API activity traversing VPC endpoints, regardless of the AWS account initiating the action.External credential detection – Identify when credentials from outside your organization are accessing your VPC endpoint.Data exfiltration prevention – Detect and investigate potential unauthorized data movement attempts.Enhanced security monitoring – Gain insights into all AWS API activity at your VPC endpoints without the need to decrypt TLS traffic.Visibility for regulatory compliance – Improve your ability to meet regulatory requirements by tracking all API activity passing through.To enable network activity events, I go to the AWS CloudTrail console and choose  in the navigation pane. I choose  to create a new one. I enter a name in the  field and choose an Amazon Simple Storage Service (Amazon S3) bucket to store the event logs. When I create a trail in CloudTrail, I can specify an existing Amazon S3 bucket or create a new bucket to store my trail’s event logs.If you set Log file SSE-KMS encryption to , you have two options: Choose  to create a new AWS Key Management Service (AWS KMS) key or choose  to choose an existing KMS key. If you chose , you need to type an alias in the  field. CloudTrail encrypts your log files with this KMS key and adds the policy for you. The KMS key and Amazon S3 must be in the same AWS Region. For this example, I use an existing KMS key. I enter the alias in the  field and leave the rest as default for this demo. I choose for the next step.In the  step, I choose  under . I choose the event source from the list of AWS services, such as , , , , and secretsmanager.amazonaws.com. I add two network activity event sources for this demo. For the first source, I select  option. For , I can use templates for common use cases or create fine-grained filters for specific scenarios. For example, to log all API activities traversing the VPC endpoint, I can choose the  template. I choose Log network activity access denied events template to log only access denied events. Optionally, I can enter a name in the  field to identify the log selector template, such as Include network activity events for Amazon EC2.As a second example, I choose  to create custom filters on multiple fields, such as  and . I can specify specific VPC endpoint IDs or filter the results to include only the VPC endpoints that match specific criteria. For Advanced event selectors, I choose  from the  dropdown, choose  as , and enter the VPC endpoint ID. When I expand the JSON view, I can see my event selectors as a JSON block. I choose  and after reviewing the selections, I choose .After it’s configured, CloudTrail will begin logging network activity events for my VPC endpoints, helping me analyze and act on this data. To analyze AWS CloudTrail network activity events, you can use the CloudTrail console, AWS Command Line Interface (AWS CLI), and AWS SDK to retrieve relevant logs. You can also use CloudTrail Lake to capture, store and analyze your network activity events. If you are using Trails, you can use Amazon Athena to query and filter these events based on speciﬁc criteria. Regular analysis of these events can help you maintain security, comply with regulations, and optimize your network infrastructure in AWS.CloudTrail network activity events for VPC endpoint logging provide you with a powerful tool to enhance your security posture, detect potential threats, and gain deeper insights into your VPC network traffic. This feature addresses your critical needs for comprehensive visibility and control over your AWS environments.Network activity events for VPC endpoints are available in all commercial AWS Regions.— Esra]]></content:encoded></item><item><title>Show HN: SQL Noir – Learn SQL by solving crimes</title><link>https://www.sqlnoir.com/</link><author>chrisBHappy</author><category>dev</category><category>hn</category><pubDate>Thu, 13 Feb 2025 21:49:16 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Bojan Mihelac: Prefixed Parameters for Django querystring tag</title><link>http://code.informatikamihelac.com/en/query-string-with-prefixed-parameters/</link><author></author><category>dev</category><category>python</category><pubDate>Thu, 13 Feb 2025 21:37:18 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[An overview of Django 5.1's new querystring tag and how to add support for prefixed parameters.]]></content:encoded></item><item><title>Learnings from a Machine Learning Engineer — Part 5: The Training</title><link>https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-5-the-training/</link><author>David Martin</author><category>dev</category><category>ai</category><pubDate>Thu, 13 Feb 2025 21:04:32 +0000</pubDate><source url="https://towardsdatascience.com/">Towards Data Science</source><content:encoded><![CDATA[In this fifth part of my series, I will outline the steps for creating a Docker container for training your image classification model, evaluating performance, and preparing for deployment.AI/ML engineers would prefer to focus on model training and data engineering, but the reality is that we also need to understand the infrastructure and mechanics behind the scenes.I hope to share some tips, not only to get your training run running, but how to streamline the process in a cost efficient manner on cloud resources such as Kubernetes.I will reference elements from my previous articles for getting the best model performance, so be sure to check out Part 1 and Part 2 on the data sets, as well as Part 3 and Part 4 on model evaluation.Here are the learnings that I will share with you, once we lay the groundwork on the infrastructure:Building your Docker containerExecuting your training runFirst, let me provide a brief description of the setup that I created, specifically around Kubernetes. Your setup may be entirely different, and that is just fine. I simply want to set the stage on the infrastructure so that the rest of the discussion makes sense.This is a server you deploy that provides a user interface to for your subject matter experts to label and evaluate images for the image classification application. The server can run as a pod on your Kubernetes cluster, but you may find that running a dedicated server with faster disk may be better.Image files are stored in a directory structure like the following, which is self-documenting and easily modified.Image_Library/
  - cats/
    - image1001.png
  - dogs/
    - image2001.pngIdeally, these files would reside on local server storage (instead of cloud or cluster storage) for better performance. The reason for this will become clear as we see what happens as the image library grows.Cloud Storage allows for a virtually limitless and convenient way to share files between systems. In this case, the image library on your management system could access the same files as your Kubernetes cluster or Docker engine.However, the downside of cloud storage is the latency to open a file. Your image library will have  of images, and the latency to read each file will have a significant impact on your training run time. Longer training runs means more cost for using the expensive GPU processors!The way that I found to speed things up is to create a  file of your image library on your management system and copy them to cloud storage. Even better would be to create multiple tar files , each containing 10,000 to 20,000 images.This way you only have network latency on a handful of files (which contain thousands, once extracted) and you start your training run much sooner.Kubernetes or Docker engineA Kubernetes cluster, with proper configuration, will allow you to dynamically scale up/down nodes, so you can perform your model training on GPU hardware as needed. Kubernetes is a rather heavy setup, and there are other container engines that will work.The technology options change constantly!The main idea is that you want to spin up the resources you need — for only as long as you need them — then scale down to reduce your time (and therefore cost) of running expensive GPU resources.Once your GPU node is started and your Docker container is running, you can extract the  files above to  storage, such as an , on your node. The node typically has high-speed SSD disk, ideal for this type of workload. There is one caveat — the storage capacity on your node must be able to handle your image library.Assuming we are good, let’s talk about building your Docker container so that you can train your model on your image library.Building your Docker containerBeing able to execute a training run in a consistent manner lends itself perfectly to building a Docker container. You can “pin” the version of libraries so you know exactly how your scripts will run every time. You can version control your containers as well, and revert to a known good image in a pinch. What is really nice about Docker is you can run the container pretty much anywhere.The tradeoff when running in a container, especially with an Image Classification model, is the speed of file storage. You can attach any number of volumes to your container, but they are usually  attached, so there is latency on each file read. This may not be a problem if you have a small number of files. But when dealing with hundreds of thousands of files like image data, that latency adds up!This is why using the  file method outlined above can be beneficial.Also, keep in mind that Docker containers could be terminated unexpectedly, so you should make sure to store important information outside the container, on cloud storage or a database. I’ll show you how below.Knowing that you will need to run on GPU hardware (here I will assume Nvidia), be sure to select the right base image for your Dockerfile, such as  with the “devel flavor that will contain the right drivers.Next, you will add the script files to your container, along with a “batch” script to coordinate the execution. Here is an example Dockerfile, and then I’ll describe what each of the scripts will be doing.#####   Dockerfile   #####
FROM nvidia/cuda:12.8.0-devel-ubuntu24.04

# Install system software
RUN apt-get -y update && apg-get -y upgrade
RUN apt-get install -y python3-pip python3-dev

# Setup python
WORKDIR /app
COPY requirements.txt
RUN python3 -m pip install --upgrade pip
RUN python3 -m pip install -r requirements.txt

# Pythong and batch scripts
COPY ExtractImageLibrary.py .
COPY Training.py .
COPY Evaluation.py .
COPY ScorePerformance.py .
COPY ExportModel.py .
COPY BulkIdentification.py .
COPY BatchControl.sh .

# Allow for interactive shell
CMD tail -f /dev/nullDockerfiles are declarative, almost like a cookbook for building a small server — you know what you’ll get every time. Python libraries benefit, too, from this declarative approach. Here is a sample  file that loads the TensorFlow libraries with CUDA support for GPU acceleration.#####   requirements.txt   #####
numpy==1.26.3
pandas==2.1.4
scipy==1.11.4
keras==2.15.0
tensorflow[and-cuda]Extract Image Library scriptIn Kubernetes, the Docker container can access local, high speed storage on the physical node. This can be achieved via the  volume type. As mentioned before, this will only work if the local storage on your node can handle the size of your library.#####   sample 25GB emptyDir volume in Kubernetes   #####
containers:
  - name: training-container
    volumeMounts:
      - name: image-library
        mountPath: /mnt/image-library
volumes:
  - name: image-library
    emptyDir:
      sizeLimit: 25GiYou would want to have another  to your cloud storage where you have the  files. What this looks like will depend on your provider, or if you are using a persistent volume claim, so I won’t go into detail here.Now you can extract the  files — ideally in parallel for an added performance boost — to the local mount point.As AI/ML engineers, the model training is where we want to spend most of our time.This is where the magic happens!With your image library now extracted, we can create our train-validation-test sets, load a pre-trained model or build a new one, fit the model, and save the results.One key technique that has served me well is to load the most recently trained model as my base. I discuss this in more detail in Part 4 under “Fine tuning”, this results in faster training time and significantly improved model performance.Be sure to take advantage of the local storage to checkpoint your model during training since the models are quite large and you are paying for the GPU even while it sits idle writing to disk.This of course raises a concern about what happens if the Docker container dies part-way though the training. The risk is (hopefully) low from a cloud provider, and you may not want an incomplete training anyway. But if that does happen, you will at least want to understand , and this is where saving the main log file to cloud storage (described below) or to a package like MLflow comes in handy.After your training run has completed and you have taken proper precaution on saving your work, it is time to see how well it performed.Normally this evaluation script will pick up on the model that just finished. But you may decide to point it at a previous model version through an interactive session. This is why have the script as stand-alone.With it being a separate script, that means it will need to read the completed model from disk — ideally local disk for speed. I like having two separate scripts (training and evaluation), but you might find it better to combine these to avoid reloading the model.Now that the model is loaded, the evaluation script should generate predictions on  image in the training, validation, test, and benchmark sets. I save the results as a  matrix with the softmax confidence score for each class label. So, if there are 1,000 classes and 100,000 images, that’s a table with 100 million scores!I save these results in  files that are then used in the score generation next.Taking the matrix of scores produced by the evaluation script above, we can now create various metrics of model performance. Again, this process could be combined with the evaluation script above, but my preference is for independent scripts. For example, I might want to regenerate scores on previous training runs. See what works for you.Here are some of the  functions that produce useful insights like F1, log loss, AUC-ROC, Matthews correlation coefficient.from sklearn.metrics import average_precision_score, classification_report
from sklearn.metrics import log_loss, matthews_corrcoef, roc_auc_scoreAside from these basic statistical analyses for each dataset (train, validation, test, and benchmark), it is also useful to identify:Which  labels get the most number of errors?Which  labels get the most number of incorrect guesses?How many ground-truth-to-predicted label pairs are there? In other words, which classes are easily confused?What is the  when applying a minimum softmax confidence score threshold?What is the  above that softmax threshold?For the “difficult” benchmark sets, do you get a sufficiently  score?For the “out-of-scope” benchmark sets, do you get a sufficiently  score?As you can see, there are multiple calculations and it’s not easy to come up with a single evaluation to decide if the trained model is good enough to be moved to production.In fact, for an image classification model, it is helpful to manually review the images that the model got wrong, as well as the ones that got a low softmax confidence score. Use the scores from this script to create a list of images to manually review, and then get a  for how well the model performs.Check out Part 3 for more in-depth discussion on evaluation and scoring.All of the heavy lifting is done by this point. Since your Docker container will be shutdown soon, now is the time to copy the model artifacts to cloud storage and prepare them for being put to use.The example Python code snippet below is more geared to Keras and TensorFlow. This will take the trained model and export it as a . Later, I will show how this is used by TensorFlow Serving in the  section below.# Increment current version of model and create new directory
next_version_dir, version_number = create_new_version_folder()

# Copy model artifacts to the new directory
copy_model_artifacts(next_version_dir)

# Create the directory to save the model export
saved_model_dir = os.path.join(next_version_dir, str(version_number))

# Save the model export for use with TensorFlow Serving
tf.keras.backend.set_learning_phase(0)
model = tf.keras.models.load_model(keras_model_file)
tf.saved_model.save(model, export_dir=saved_model_dir)This script also copies the other training run artifacts such as the model evaluation results, score summaries, and log files generated from model training. Don’t forget about your label map so you can give human readable names to your classes!Bulk identification scriptYour training run is complete, your model has been scored, and a new version is exported and ready to be served. Now is the time to use this latest model to assist you on trying to identify unlabeled images.As I described in Part 4, you may have a collection of “unknowns” — really good pictures, but no idea what they are. Let your new model provide a best guess on these and record the results to a file or a database. Now you can create filters based on closest match and by high/low scores. This allows your subject matter experts to leverage these filters to find new image classes, add to existing classes, or to remove images that have very low scores and are no good.By the way, I put this step inside the GPU container since you may have thousands of “unknown” images to process and the accelerated hardware will make light work of it. However, if you are not in a hurry, you could perform this step on a separate CPU node, and shutdown your GPU node sooner to save cost. This would especially make sense if your “unknowns” folder is on slower cloud storage.All of the scripts described above perform a specific task — from extracting your image library, executing model training, performing evaluation and scoring, exporting the model artifacts for deployment, and perhaps even bulk identification.One script to rule them allTo coordinate the entire show, this batch script gives you the entry point for your container and an easy way to trigger everything. Be sure to produce a log file in case you need to analyze any failures along the way. Also, be sure to write the log to your cloud storage in case the container dies unexpectedly.#!/bin/bash
# Main batch control script

# Redirect standard output and standard error to a log file
exec > /cloud_storage/batch-logfile.txt 2>&1

/app/ExtractImageLibrary.py
/app/Training.py
/app/Evaluation.py
/app/ScorePerformance.py
/app/ExportModel.py
/app/BulkIdentification.pyExecuting your training runSo, now it’s time to put everything in motion…Let’s go through the steps to prepare your image library, fire up your Docker container to train your model, and then examine the results.Image library ‘tar’ filesYour image management system should now create a  file backup of your data. Since  is a single-threaded function, you will get significant speed improvement by creating multiple tar files in parallel, each with a portion of you data.Now these files can be copied to your shared cloud storage for the next step.All the hard work you put into creating your container (described above) will be put to the test. If you are running Kubernetes, you can create a Job that will execute the  script.Inside the Kubernetes Job definition, you can pass environment variables to adjust the execution of your script. For example, the batch size and number of epochs are set here and then pulled into your Python scripts, so you can alter the behavior without changing your code.#####   sample Job in Kubernetes   #####
containers:
  - name: training-job
    env:
      - name: BATCH_SIZE
        value: 50
      - name: NUM_EPOCHS
        value: 30
    command: ["/app/BatchControl.sh"]Once the Job is completed, be sure to verify that the GPU node properly scales back down to zero according to your scaling configuration in Kubernetes — you don’t want to be saddled with a huge bill over a simple configuration error.With the training run complete, you should now have model artifacts saved and can examine the performance. Look through the metrics, such as F1 and log loss, and benchmark accuracy for high softmax confidence scores.As mentioned earlier, the reports only tell part of the story. It is worth the time and effort to manually review the images that the model got wrong or where it produced a low confidence score.Don’t forget about the bulk identification. Be sure to leverage these to locate new images to fill out your data set, or to find new classes.Once you have reviewed your model performance and are satisfied with the results, it is time to modify your TensorFlow Serving container to put the new model into production.TensorFlow Serving is available as a Docker container and provides a very quick and convenient way to serve your model. This container can listen and respond to API calls for your model.Let’s say your new model is version 7, and your  script (see above) has saved the model in your cloud share as /image_application/models/007. You can start the TensorFlow Serving container with that volume mount. In this example, the  points to folder for version 007.#####   sample TensorFlow pod in Kubernetes   #####
containers:
  - name: tensorflow-serving
    image: bitnami/tensorflow-serving:2.18.0
    ports:
      - containerPort: 8501
    env:
      - name: TENSORFLOW_SERVING_MODEL_NAME
        value: "image_application"
    volumeMounts:
      - name: models-subfolder
        mountPath: "/bitnami/model-data"

volumes:
  - name: models-subfolder
    azureFile:
      shareName: "image_application/models/007"A subtle note here — the export script should create a sub-folder, named 007 (same as the base folder), with the saved model export. This may seem a little confusing, but TensorFlow Serving will mount this share folder as  and detect the numbered sub-folder inside it for the version to serve. This will allow you to query the API for the model version as well as the identification.As I mentioned at the start of this article, this setup has worked for my situation. This is certainly not the only way to approach this challenge, and I invite you to customize your own solution.I wanted to share my hard-fought learnings as I embraced cloud services in Kubernetes, with the desire to keep costs under control. Of course, doing all this while maintaining a high level of model performance is an added challenge, but one that you can achieve.I hope I have provided enough information here to help you with your own endeavors. Happy learnings!]]></content:encoded></item><item><title>Learnings from a Machine Learning Engineer — Part 3: The Evaluation</title><link>https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/</link><author>David Martin</author><category>dev</category><category>ai</category><pubDate>Thu, 13 Feb 2025 21:00:06 +0000</pubDate><source url="https://towardsdatascience.com/">Towards Data Science</source><content:encoded><![CDATA[In this third part of my series, I will explore the evaluation process which is a critical piece that will lead to a cleaner data set and elevate your model performance. We will see the difference between evaluation of a  model (one not yet in production), and evaluation of a  model (one making real-world predictions).In Part 1, I discussed the process of labelling your image data that you use in your Image Classification project. I showed how to define “good” images and create sub-classes. In Part 2, I went over various data sets, beyond the usual train-validation-test sets, such as benchmark sets, plus how to handle synthetic data and duplicate images.Evaluation of the trained modelAs machine learning engineers we look at accuracy, F1, log loss, and other metrics to decide if a model is ready to move to production. These are all important measures, but from my experience, these scores can be deceiving especially as the number of classes grows.Although it can be time consuming, I find it very important to manually review the images that the model gets , as well as the images that the model gives a  softmax “confidence” score to. This means adding a step immediately after your training run completes to calculate scores for  images — training, validation, test, and the benchmark sets. You only need to bring up for manual review the ones that the model had problems with. This should only be a small percentage of the total number of images. See the Double-check process belowWhat you do during the manual evaluation is to put yourself in a “” to ensure that the labelling standards are being followed that you setup in Part 1. Ask yourself:“Is this a good image?” Is the subject front and center, and can you clearly see all the features?“Is this the correct label?” Don’t be surprised if you find wrong labels.You can either remove the bad images or fix the labels if they are wrong. Otherwise you can keep them in the data set and force the model to do better next time. Other questions I ask are:“Why did the model get this wrong?”“Why did this image get a low score?”“What is it about the image that caused confusion?”Sometimes the answer has nothing to do with  specific image. Frequently, it has to do with the  images, either in the ground truth class or in the predicted class. It is worth the effort to Double-check all images in both sets if you see a consistently bad guess. Again, don’t be surprised if you find poor images or wrong labels.When doing the evaluation of the trained model (above), we apply a lot of subjective analysis — “Why did the model get this wrong?” and “Is this a good image?” From these, you may only get a .Frequently, I will decide to hold off moving a model forward to production based on that gut feel. But how can you justify to your manager that you want to hit the brakes? This is where putting a more  analysis comes in by creating a weighted average of the softmax “confidence” scores.In order to apply a weighted evaluation, we need to identify sets of classes that deserve adjustments to the score. Here is where I create a list of “commonly confused” classes.Commonly confused classesCertain animals at our zoo can easily be mistaken. For example, African elephants and Asian elephants have different ear shapes. If your model gets these two mixed up, that is not as bad as guessing a giraffe! So perhaps you give partial credit here. You and your subject matter experts (SMEs) can come up with a list of these pairs and a weighted adjustment for each.This weight can be factored into a modified cross-entropy loss function in the equation below. The back half of this equation will reduce the impact of being wrong for specific pairs of ground truth and prediction by using the “weight” function as a lookup. By default, the weighted adjustment would be 1 for all pairings, and the commonly confused classes would get something like 0.5.In other words, it’s better to be unsure (have a  confidence score) when you are wrong, compared to being super confident and wrong.Once this weighted log loss is calculated, I can compare to previous training runs to see if the new model is ready for production.Confidence threshold reportAnother valuable measure that incorporates the confidence threshold (in my example, 95) is to report on accuracy and false positive rates. Recall that when we apply the confidence threshold before presenting results, we help reduce false positives from being shown to the end user.In this table, we look at the breakdown of “true positive above 95” for each data set. We get a sense that when a “good” picture comes through (like the ones from our train-validation-test set) it is very likely to surpass the threshold, thus the user is “happy” with the outcome. Conversely, the “false positive above 95” is extremely low for good pictures, thus only a small number of our users will be “sad” about the results.We expect the train-validation-test set results to be exceptional since our data is curated. So, as long as people take “good” pictures, the model should do very well. But to get a sense of how it does on extreme situations, let’s take a look at our benchmarks.The “difficult” benchmark has more modest true positive and false positive rates, which reflects the fact that the images are more challenging. These values are much easier to compare across training runs, so that lets me set a min/max target. So for example, if I target a minimum of 80% for true positive, and maximum of 5% for false positive on this benchmark, then I can feel confident moving this to production.The “out-of-scope” benchmark has no true positive rate because  of the images belong to any class the model can identify. Remember, we picked things like a bag of popcorn, etc., that are not zoo animals, so there cannot be any true positives. But we do get a false positive rate, which means the model gave a confident score to that bag of popcorn as some animal. And if we set a target maximum of 10% for this benchmark, then we may not want to move it to production.Right now, you may be thinking, “Well, what animal did it pick for the bag of popcorn?” Excellent question! Now you understand the importance of doing a manual review of the images that get bad results.Evaluation of the deployed modelThe evaluation that I described above applies to a model immediately after . Now, you want to evaluate how your model is doing in the . The process is similar, but requires you to shift to a “” and asking yourself, “Did the model get this correct?” and “Should it have gotten this correct?” and “Did we tell the user the right thing?”So, imagine that you are logging in for the morning — after sipping on your cold brew coffee, of course — and are presented with 500 images that your zoo guests took yesterday of different animals. Your job is to determine how satisfied the guests were using your model to identify the zoo animals.Using the softmax “confidence” score for each image, we have a threshold before presenting results. Above the threshold, we tell the guest what the model predicted. I’ll call this the “happy path”. And below the threshold is the “sad path” where we ask them to try again.Your review interface will first show you all the “happy path” images one at a time. This is where you ask yourself, “Did we get this right?” Hopefully, yes!But if not, this is where things get tricky. So now you have to ask, “Why not?” Here are some things that it could be:“Bad” picture — Poor lighting, bad angle, zoomed out, etc — refer to your labelling standards.Out-of-scope — It’s a zoo animal, but unfortunately one that isn’t found in  zoo. Maybe it belongs to another zoo (your guest likes to travel and try out your app). Consider adding these to your data set.Out-of-scope — It’s not a zoo animal. It could be an animal in your zoo, but not one typically  there, like a neighborhood sparrow or mallard duck. This might be a candidate to add.Out-of-scope — It’s something found in the zoo. A zoo usually has interesting trees and shrubs, so people might try to identify those. Another candidate to add.Prankster — Completely out-of-scope. Because people like to play with technology, there’s the possibility you have a prankster that took a picture of a bag of popcorn, or a soft drink cup, or even a selfie. These are hard to prevent, but hopefully get a low enough score (below the threshold) so the model did not identify it as a zoo animal. If you see enough pattern in these, consider creating a class with special handling on the front-end.After reviewing the “happy path” images, you move on to the “sad path” images — the ones that got a low confidence score and the app gave a “sorry, try again” message. This time you ask yourself, “ the model have given this image a higher score?” which would have put it in the “happy path”. If so, then you want to ensure these images are added to the training set so next time it will do better. But most of time, the low score reflects many of the “bad” or out-of-scope situations mentioned above.Perhaps your model performance is suffering and it has nothing to do with your model. Maybe it is the ways you users interacting with the app. Keep an eye out of non-technical problems and share your observations with the rest of your team. For example:Are your users using the application in the ways you expected?Are they not following the instructions?Do the instructions need to be stated more clearly?Is there anything you can do to improve the experience?Collect statistics and new imagesBoth of the manual evaluations above open a gold mine of data. So, be sure to collect these statistics and feed them into a dashboard — your manager and your future self will thank you!Keep track of these stats and generate reports that you and your can reference:How often the model is being called?What times of the day, what days of the week is it used?Are your system resources able to handle the peak load?What classes are the most common?After evaluation, what is the accuracy for each class?What is the breakdown for confidence scores?How many scores are above and below the confidence threshold?The single best thing you get from a deployed model is the additional real-world images! You can add these now images to improve coverage of your existing zoo animals. But more importantly, they provide you insight on  classes to add. For example, let’s say people enjoy taking a picture of the large walrus statue at the gate. Some of these may make sense to incorporate into your data set to provide a better user experience.Creating a new class, like the walrus statue, is not a huge effort, and it avoids the false positive responses. It would be more embarrassing to identify a walrus statue as an elephant! As for the prankster and the bag of popcorn, you can configure your front-end to quietly handle these. You might even get creative and have fun with it like, “Thank you for visiting the food court.”It is a good idea to double-check your image set when you suspect there may be problems with your data. I’m not suggesting a top-to-bottom check, because that would a monumental effort! Rather specific classes that you suspect could contain bad data that is degrading your model performance.Immediately after my training run completes, I have a script that will use this new model to generate predictions for my  data set. When this is complete, it will take the list of incorrect identifications, as well as the low scoring predictions, and automatically feed that list into the Double-check interface.This interface will show, one at a time, the image in question, alongside an example image of the ground truth and an example image of what the model predicted. I can visually compare the three, side-by-side. The first thing I do is ensure the original image is a “good” picture, following my labelling standards. Then I check if the ground-truth label is indeed correct, or if there is something that made the model think it was the predicted label.Remove the original image if the image quality is poor.Relabel the image if it belongs in a different class.During this manual evaluation, you might notice dozens of the same wrong prediction. Ask yourself why the model made this mistake when the images seem perfectly fine. The answer may be some incorrect labels on images in the ground truth, or even in the predicted class!Don’t hesitate to add those classes and sub-classes back into the Double-check interface and step through them all. You may have 100–200 pictures to review, but there is a good chance that one or two of the images will stand out as being the culprit.With a different mindset for a trained model versus a deployed model, we can now evaluate performances to decide which models are ready for production, and how well a production model is going to serve the public. This relies on a solid Double-check process and a critical eye on your data. And beyond the “gut feel” of your model, we can rely on the benchmark scores to support us.In Part 4, we kick off the training run, but there are some subtle techniques to get the most out of the process and even ways to leverage throw-away models to expand your library image data.]]></content:encoded></item><item><title>Zed Editor Introduces Open-Source &quot;Zeta&quot; Edit Prediction Model</title><link>https://www.phoronix.com/news/Zed-Zeta-AI-Model-Edit-Predict</link><author>Michael Larabel</author><category>tech</category><pubDate>Thu, 13 Feb 2025 20:58:48 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[The Zed code editor for macOS and Linux systems has proven to be quite popular for this Rust-based editor started by the creators of the Atom editor. Their latest feature being introduced is Zeta as an open-source edit prediction model to further enhance this code editor with AI capabilities...]]></content:encoded></item><item><title>Build a dynamic, role-based AI agent using Amazon Bedrock inline agents</title><link>https://aws.amazon.com/blogs/machine-learning/build-a-dynamic-role-based-ai-agent-using-amazon-bedrock-inline-agents/</link><author>Ishan Singh</author><category>dev</category><category>ai</category><pubDate>Thu, 13 Feb 2025 20:56:28 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[AI agents continue to gain momentum, as businesses use the power of generative AI to reinvent customer experiences and automate complex workflows. We are seeing Amazon Bedrock Agents applied in investment research, insurance claims processing, root cause analysis, advertising campaigns, and much more. Agents use the reasoning capability of foundation models (FMs) to break down user-requested tasks into multiple steps. They use developer-provided instructions to create an orchestration plan and carry out that plan by securely invoking company APIs and accessing knowledge bases using Retrieval Augmented Generation (RAG) to accurately handle the user’s request.Although organizations see the benefit of agents that are defined, configured, and tested as managed resources, we have increasingly seen the need for an additional, more dynamic way to invoke agents. Organizations need solutions that adjust on the fly—whether to test new approaches, respond to changing business rules, or customize solutions for different clients. This is where the new inline agents capability in Amazon Bedrock Agents becomes transformative. It allows you to dynamically adjust your agent’s behavior at runtime by changing its instructions, tools, guardrails, knowledge bases, prompts, and even the FMs it uses—all without redeploying your application.In this post, we explore how to build an application using Amazon Bedrock inline agents, demonstrating how a single AI assistant can adapt its capabilities dynamically based on user roles.Inline agents in Amazon Bedrock AgentsThis runtime flexibility enabled by inline agents opens powerful new possibilities, such as: – Inline agents minimize the time-consuming create/update/prepare cycles traditionally required for agent configuration changes. Developers can instantly test different combinations of models, tools, and knowledge bases, dramatically accelerating the development process.A/B testing and experimentation – Data science teams can systematically evaluate different model-tool combinations, measure performance metrics, and analyze response patterns in controlled environments. This empirical approach enables quantitative comparison of configurations before production deployment.Subscription-based personalization – Software companies can adapt features based on each customer’s subscription level, providing more advanced tools for premium users.Persona-based data source integration – Institutions can adjust content complexity and tone based on the user’s profile, providing persona-appropriate explanations and resources by changing the knowledge bases associated to the agent on the fly. – Developers can create applications with hundreds of APIs, and quickly and accurately carry out tasks by dynamically choosing a small subset of APIs for the agent to consider for a given request. This is particularly helpful for large software as a service (SaaS) platforms needing multi-tenant scaling.Inline agents expand your options for building and deploying agentic solutions with Amazon Bedrock Agents. For workloads needing managed and versioned agent resources with a pre-determined and tested configuration (specific model, instructions, tools, and so on), developers can continue to use InvokeAgent on resources created with CreateAgent. For workloads that need dynamic runtime behavior changes for each agent invocation, you can use the new InvokeInlineAgent API. With either approach, your agents will be secure and scalable, with configurable guardrails, a flexible set of model inference options, native access to knowledge bases, code interpretation, session memory, and more.Our HR assistant example shows how to build a single AI assistant that adapts to different user roles using the new inline agent capabilities in Amazon Bedrock Agents. When users interact with the assistant, the assistant dynamically configures agent capabilities (such as model, instructions, knowledge bases, action groups, and guardrails) based on the user’s role and their specific selections. This approach creates a flexible system that adjusts its functionality in real time, making it more efficient than creating separate agents for each user role or tool combination. The complete code for this HR assistant example is available on our GitHub repo.This dynamic tool selection enables a personalized experience. When an employee logs in without direct reports, they see a set of tools that they have access to based on their role. They can select from options like requesting vacation time, checking company policies using the knowledge base, using a code interpreter for data analysis, or submitting expense reports. The inline agent assistant is then configured with only these selected tools, allowing it to assist the employee with their chosen tasks. In a real-world example, the user would not need to make the selection, because the application would make that decision and automatically configure the agent invocation at runtime. We make it explicit in this application so that you can demonstrate the impact.Similarly, when a manager logs in to the same system, they see an extended set of tools reflecting their additional permissions. In addition to the employee-level tools, managers have access to capabilities like running performance reviews. They can select which tools they want to use for their current session, instantly configuring the inline agent with their choices.The inclusion of knowledge bases is also adjusted based on the user’s role. Employees and managers see different levels of company policy information, with managers getting additional access to confidential data like performance review and compensation details. For this demo, we’ve implemented metadata filtering to retrieve only the appropriate level of documents based on the user’s access level, further enhancing efficiency and security.Let’s look at how the interface adapts to different user roles.The employee view provides access to essential HR functions like vacation requests, expense submissions, and company policy lookups. Users can select which of these tools they want to use for their current session.The manager view extends these options to include supervisory functions like compensation management, demonstrating how the inline agent can be configured with a broader set of tools based on user permissions.The manager view extends these capabilities to include supervisory functions like compensation management, demonstrating how the inline agent dynamically adjusts its available tools based on user permissions. Without inline agents, we would need to build and maintain two separate agents.As shown in the preceding screenshots, the same HR assistant offers different tool selections based on the user’s role. An employee sees options like Knowledge Base, Apply Vacation Tool, and Submit Expense, whereas a manager has additional options like Performance Evaluation. Users can select which tools they want to add to the agent for their current interaction.This flexibility allows for quick adaptation to user needs and preferences. For instance, if the company introduces a new policy for creating business travel requests, the tool catalog can be quickly updated to include a Create Business Travel Reservation tool. Employees can then choose to add this new tool to their agent configuration when they need to plan a business trip, or the application could automatically do so based on their role.With Amazon Bedrock inline agents, you can create a catalog of actions that is dynamically selected by the application or by users of the application. This increases the level of flexibility and adaptability of your solutions, making them a perfect fit for navigating the complex, ever-changing landscape of modern business operations. Users have more control over their AI assistant’s capabilities, and the system remains efficient by only loading the necessary tools for each interaction.Technical foundation: Dynamic configuration and action selectionInline agents allow dynamic configuration at runtime, enabling a single agent to effectively perform the work of many. By specifying action groups and modifying instructions on the fly, even within the same session, you can create versatile AI applications that adapt to various scenarios without multiple agent deployments.The following are key points about inline agents: – Change the agent’s configuration, including its FM, at runtime. This enables rapid experimentation and adaptation without redeploying the application, reducing development cycles. – Apply governance and access control at the tool level. With agents changing dynamically at runtime, tool-level governance helps maintain security and compliance regardless of the agent’s configuration. – Provide only necessary tools and instructions at runtime to reduce token usage and improve the agent accuracy. With fewer tools to choose from, it’s less complicated for the agent to select the right one, reducing hallucinations in the tool selection process. This approach can also lead to lower costs and improved latency compared to static agents because removing unnecessary tools, knowledge bases, and instructions reduces the number of input and output tokens being processed by the agent’s large language model (LLM). – Create reusable actions for dynamic selection based on specific needs. This modular approach simplifies maintenance, updates, and scalability of your AI applications.The following are examples of reusable actions:Enterprise system integration – Connect with systems like Salesforce, GitHub, or databases – Perform common tasks such as sending emails or managing calendars – Interact with specialized internal tools and services – Analyze text, structured data, or other information – Fetch weather updates, stock prices, or perform web searches – Use specific machine learning (ML) models for targeted tasksWhen using inline agents, you configure parameters for the following:Contextual tool selection based on user intent or conversation flowAdaptation to different user roles and permissionsSwitching between communication styles or personasModel selection based on task complexityThe inline agent uses the configuration you provide at runtime, allowing for highly flexible AI assistants that efficiently handle various tasks across different business contexts.Building an HR assistant using inline agentsLet’s look at how we built our HR Assistant using Amazon Bedrock inline agents: – We developed a demo catalog of HR-related tools, including: 
   – Using Amazon Bedrock Knowledge Bases for accessing company policies and guidelines based on the role of the application user. In order to filter the knowledge base content based on the user’s role, you also need to provide a metadata file specifying the type of employee’s roles that can access each file– For requesting and tracking time off.– For submitting and managing expense reports. – For performing calculations and data analysis.– for conducting and reviewing employee compensation assessments (manager only access). – We defined multiple conversation tones to suit different interaction styles: 
   – For formal, business-like interactions. – For friendly, everyday support. – For upbeat, encouraging assistance. – We implemented role-based access control. The application backend checks the user’s role (employee or manager) and provides access to appropriate tools and information and passes this information to the inline agent. The role information is also used to configure metadata filtering in the knowledge bases to generate relevant responses. The system allows for dynamic tool use at runtime. Users can switch personas or add and remove tools during their session, allowing the agent to adapt to different conversation needs in real time.Integrate the agent with other services and tools – We connected the inline agent to: 
  Amazon Bedrock Knowledge Bases for company policies, with metadata filtering for role-based access.AWS Lambda functions for executing specific actions (such as submitting vacation requests or expense reports).A code interpreter tool for performing calculations and data analysis. – We created a Flask-based UI that performs the following actions: 
  Displays available tools based on the user’s role.Allows users to select different personas.Provides a chat window for interacting with the HR assistant.To understand how this dynamic role-based functionality works under the hood, let’s examine the following system architecture diagram.As shown in preceding architecture diagram, the system works as follows:The end-user logs in and is identified as either a manager or an employee.The user selects the tools that they have access to and makes a request to the HR assistant.The agent breaks down the problems and uses the available tools to solve for the query in steps, which may include: 
  Amazon Bedrock Knowledge Bases (with metadata filtering for role-based access).Lambda functions for specific actions.Code interpreter tool for calculations.Compensation tool (accessible only to managers to submit base pay raise requests).The application uses the Amazon Bedrock inline agent to dynamically pass in the appropriate tools based on the user’s role and request.The agent uses the selected tools to process the request and provide a response to the user.This approach provides a flexible, scalable solution that can quickly adapt to different user roles and changing business needs.In this post, we introduced the Amazon Bedrock inline agent functionality and highlighted its application to an HR use case. We dynamically selected tools based on the user’s roles and permissions, adapted instructions to set a conversation tone, and selected different models at runtime. With inline agents, you can transform how you build and deploy AI assistants. By dynamically adapting tools, instructions, and models at runtime, you can:Create personalized experiences for different user rolesOptimize costs by matching model capabilities to task complexityStreamline development and maintenanceScale efficiently without managing multiple agent configurationsFor organizations demanding highly dynamic behavior—whether you’re an AI startup, SaaS provider, or enterprise solution team—inline agents offer a scalable approach to building intelligent assistants that grow with your needs. To get started, explore our GitHub repo and HR assistant demo application, which demonstrate key implementation patterns and best practices.To learn more about how to be most successful in your agent journey, read our two-part blog series:To get started with Amazon Bedrock Agents, check out the following GitHub repository with example code. is a Generative AI Data Scientist at Amazon Web Services, where he helps customers build innovative and responsible generative AI solutions and products. With a strong background in AI/ML, Ishan specializes in building Generative AI solutions that drive business value. Outside of work, he enjoys playing volleyball, exploring local bike trails, and spending time with his wife and dog, Beau. is a Senior Generative AI Data Scientist at AWS. With a background in machine learning, she has over 10 years of experience architecting and building AI applications with customers across industries. As a technical lead, she helps customers accelerate their achievement of business value through generative AI solutions on Amazon Bedrock. In her free time, Maira enjoys traveling, playing with her cat, and spending time with her family someplace warm. is a Principal Machine Learning Architect for AWS, helping customers design and build generative AI solutions. His focus since early 2023 has been leading solution architecture efforts for the launch of Amazon Bedrock, the flagship generative AI offering from AWS for builders. Mark’s work covers a wide range of use cases, with a primary interest in generative AI, agents, and scaling ML across the enterprise. He has helped companies in insurance, financial services, media and entertainment, healthcare, utilities, and manufacturing. Prior to joining AWS, Mark was an architect, developer, and technology leader for over 25 years, including 19 years in financial services. Mark holds six AWS certifications, including the ML Specialty Certification. is a Sr. Enterprise Solutions Architect at AWS, experienced in Software Engineering, Enterprise Architecture, and AI/ML. He is deeply passionate about exploring the possibilities of generative AI. He collaborates with customers to help them build well-architected applications on the AWS platform, and is dedicated to solving technology challenges and assisting with their cloud journey. is a Software Development Engineer at Amazon Web Services (AWS). He specializes in backend system design, distributed architectures, and scalable solutions, contributing to the development and launch of high-impact systems at Amazon. Outside of work, he spends his time playing ping pong and hiking through Cascade trails, enjoying the outdoors as much as he enjoys building systems. is a Software Development Engineer at Amazon Web Services (AWS), working in Agents for Amazon Bedrock. He focuses on developing scalable systems on the cloud that enable AI applications frameworks and orchestrations. Shubham also has a background in building distributed, scalable, high-volume-high-throughput systems in IoT architectures. is a Principal Engineer for Amazon Bedrock. He focuses on building deep learning-based AI and computer vision solutions for AWS customers. Oustide of work, Vivek enjoys trekking and following cricket.]]></content:encoded></item><item><title>Learnings from a Machine Learning Engineer — Part 1: The Data</title><link>https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/</link><author>David Martin</author><category>dev</category><category>ai</category><pubDate>Thu, 13 Feb 2025 20:55:53 +0000</pubDate><source url="https://towardsdatascience.com/">Towards Data Science</source><content:encoded><![CDATA[It is said that in order for a machine learning model to be successful, you need to have good data. While this is true (and pretty much obvious), it is extremely difficult to define, build, and sustain good data. Let me share with you the unique processes that I have learned over several years building an ever-growing image classification system and how you can apply these techniques to your own application.With persistence and diligence, you can avoid the classic “garbage in, garbage out”, maximize your model accuracy, and demonstrate real business value.In this series of articles, I will dive into the care and feeding of a multi-class, single-label image classification app and what it takes to reach the highest level of performance. I won’t get into any coding or specific user interfaces, just the main concepts that you can incorporate to suit your needs with the tools at your disposal.Here is a brief description of the articles. You will notice that the model is last on the list since we need to focus on curating the data first and foremost:Over the past six years, I have been primarily focused on building and maintaining an image classification application for a manufacturing company. Back when I started, most of the software did not exist or was too expensive, so I created these from scratch. In this time, I have deployed two identifier applications, the largest handles 1,500 classes and achieves 97–98% accuracy.It was about eight years ago that I started online studies for Data Science and machine learning. So, when the exciting opportunity to create an AI application presented itself, I was prepared to build the tools I needed to leverage the latest advancements. I jumped in with both feet!I quickly found that building and deploying a model is probably the easiest part of the job. Feeding high quality data into the model is the best way to improve performance, and that requires focus and patience. Attention to detail is what I do best, so this was a perfect fit.It all starts with the dataI feel that so much attention is given to the model selection (deciding which neural network is best) and that the data is just an afterthought. I have found the hard way that even one or two pieces of bad data can significantly impact model performance, so that is where we need to focus.For example, let’s say you train the classic cat versus dog image classifier. You have 50 pictures of cats and 50 pictures of dogs, however one of the “cats” is clearly (objectively) a picture of a dog. The computer doesn’t have the luxury of ignoring the mislabelled image, and instead adjusts the model weights to make it fit. Square peg meets round hole.Another example would be a picture of a cat that climbed up into a tree. But when you take a wholistic view of it, you would describe it as a picture of a tree (first) with a cat (second). Again, the computer doesn’t know to ignore the big tree and focus on the cat — it will start to identify trees as cats, even if there is a dog. You can think of these pictures as outliers and should be removed.It doesn’t matter if you have the best neural network in the world, you can count on the model making poor predictions when it is trained on “bad” data. I’ve learned that any time I see the model make mistakes, it’s time to review the data.Example Application — Zoo animalsFor the rest of this write-up, I will use an example of identifying zoo animals. Let’s assume your goal is to create a mobile app where guests at the zoo can take pictures of the animals they see and have the app identify them. Specifically, this is a multi-class, single-label application. — There are a lot of different animals at the zoo and many of them look very similar. — Guests using the app don’t always take good pictures (zoomed out, blurry, too dark), so we don’t want to provide an answer if the image is poor. — The zoo keeps expanding and adding new species all the time. — Occasionally you might find that people take pictures of the sparrows near the food court grabbing some dropped popcorn. — Just for fun, guests may take a picture of the bag of popcorn just to see what it comes back with.These are all real challenges — being able to tell the subtle differences between animals, handling out-of-scope cases, and just plain poor images.Before we get there, let’s start from the beginning.There are a lot of tools these days to help you with this part of the process, but the challenge remains the same — collecting, labelling, and curating the data.Having data to collect is challenge #1. Without images, you have nothing to train. You may need to get creative on sourcing the data, or even creating synthetic data. More on that later.A quick note about image pre-processing. I convert all my images to the input size of my neural network and save them as PNG. Inside this square PNG, I preserve the aspect ratio of the original picture and fill the background black. I don’t stretch the image nor crop any features out. This also helps center the subject.Challenge #2 is to establish standards for data quality…and ensure that these standards are followed! These standards will guide you toward that “good” data. And this assumes, of course, correct labels. Having both is much easier said than done!I hope to show how “good” and “correct” actually go hand-in-hand, and how important it is to apply these standards to every image.First, I want to point out that the image data discussed here is for the training set. What qualifies as a good image for  is a bit different than what qualifies as a good image for . More on that in Part 3.So, what is “good” data when talking about images? “A picture is worth a thousand words”, and if the  you use to describe the picture do not include the subject you are trying to label, then it is not good and you need remove it from your training set.For example, let’s say you are shown a picture of a zebra and (removing bias toward your application) you describe it as an “open field with a zebra in the distance”. In other words, if “open field” is the first thing you notice, then you likely do  want to use that image. The opposite is also true — if the picture is way too close, you would described it as “zebra pattern”.What you want is a description like, “a zebra, front and center”. This would have your subject taking up about 80–90% of the total frame. Sometimes I will take the time to crop the original image so the subject is framed properly.Keep in mind the use of image augmentation at the time of training. Having that buffer around the edges will allow “zoom in” augmentation. And “zoom out” augmentation will simulate smaller subjects, so don’t start out less than 50% of the total frame for your subject since you lose detail.Another aspect of a “good” image relates to the label. If you can only see the back side of your zoo animal, can you really tell, for example, that it is a cheetah versus a leopard? The key identifying features need to be visible. If a human struggles to identify it, you can’t expect the computer to learn anything.What does a “bad” image look like? Here is what I frequently watch out for:Wide angle lens stretchingHigh contrast or dark shadows“Doctored” images, drawn lines and arrows“Unusual” angles or situationsPicture of a mobile device that has a picture of your subjectIf you have a team of subject matter experts (SMEs) on hand to label the images, you are in a good starting position. Animal trainers at the zoo know the various species, and can spot the differences between, for example, a chimpanzee and a bonobo.To a Machine Learning Engineer, it is easy for you to assume all labels from your SMEs are correct and move right on to training the model. However, even experts make mistakes, so if you can get a second opinion on the labels, your error rate should go down.In reality, it can be prohibitively expensive to get one, let alone two, subject matter experts to review image labels. The SME usually has years of experience that make them more valuable to the business in other areas of work. My experience is that the machine learning engineer (that’s you and me) becomes the second opinion, and often the first opinion as well.Over time, you can become pretty adept at labelling, but certainly not an SME. If you do have the luxury of access to an expert, explain to them the labelling standards and how these are required for the application to be successful. Emphasize “quality over quantity”.It goes without saying that having a  label is so important. However, all it takes is one or two mislabelled images to degrade performance. These can easily slip into your data set with careless or hasty labelling. So, take the time to get it right.Ultimately, we as the ML engineer are responsible for model performance. So, if we take the approach of only working on model training and deployment, we will find ourselves wondering why performance is falling short.A lot of times, you will come across a really good picture of a very interesting subject, but have no idea what it is! It would be a shame to simply dispose of it. What you can do is assign it a generic label, like “Unknown Bird” or “Random Plant” that are  included in your training set. Later in Part 4, you’ll see how to come back to these images at a later date when you have a better idea what they are, and you’ll be glad you saved them.If you have done any image labelling, then you know how time consuming and difficult it can be. But this is where having a model, even a less-than-perfect model, can help you.Typically, you have a large collection of unlabelled image and you need to go through them one at a time to assign labels. Simply having the model offer a best guess and display the top 3 results lets you step through each image in a matter of seconds!Even if the top 3 results are wrong, this can help you narrow down your search. Over time, newer models will get better, and the labelling process can even be somewhat fun!In Part 4, I will show how you can bulk identify images and take this to the next level for faster labelling.I mentioned the example above of two species that look very similar, the chimpanzee and the bonobo. When you start out building your data set, you may have very sparse coverage of one or both of these species. In machine learning terms, we these “classes”. One option is to roll with what you have and hope that the model picks up on the differences with only a handful of example images.The option that I have used is to merge two or more classes into one, at least temporarily. So, in this case I would create a class called “chimp-bonobo”, which is composed of the limited example pictures of chimpanzee and bonobo species classes. Combined, these may give me enough to train the model on “chimp-bonobo”, with the trade-off that it’s a more generic identification.Sub-classes can even be normal variations. For example,  pink flamingos are grey instead of pink. Or, male and female orangutans have distinct facial features. You wan to have a fairly balanced number of images for these normal variations, and keeping sub-classes will allow you to accomplish this.Don’t be concerned that you are merging completely different looking classes — the neural network does a nice job of applying the “OR” operator. This works both ways — it can help you identify male or female variations as one species, but it can hurt you when “bad” outlier images sneak in like the example “open field with a zebra in the distance.”Over time, you will (hopefully) be able to collect more images of the sub-classes and then be able to successfully split them apart (if necessary) and train the model to identify them separately. This process has worked very well for me. Just be sure to double-check all the images when you split them to ensure the labels didn’t get accidentally mixed up — it will be time well spent.All of this certainly depends on your user requirements, and you can handle this in different ways either by creating a unique class label like “chimp-bonobo”, or at the front-end presentation layer where you notify the user that you have intentionally merged these classes and provide guidance on further refining the results. Even after you decide to split the two classes, you may want to caution the user that the model could be wrong since the two classes are so similar.I realize this was a long write-up for something that on the surface seems intuitive, but these are all areas that I have tripped me up in the past because I didn’t give them enough attention. Once you have a solid understanding of these principles, you can go on to build a successful application.In Part 2, we will take the curated data we collected here to create the classic data sets, with a custom benchmark set that will further enhance your data. Then we will see how best to evaluate our trained model using a specific “training mindset”, and switch to a “production mindset” when evaluating a deployed model.]]></content:encoded></item><item><title>Learnings from a Machine Learning Engineer — Part 4: The Model</title><link>https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/</link><author>David Martin</author><category>dev</category><category>ai</category><pubDate>Thu, 13 Feb 2025 20:53:42 +0000</pubDate><source url="https://towardsdatascience.com/">Towards Data Science</source><content:encoded><![CDATA[In this latest part of my series, I will share what I have learned on selecting a model for Image Classification and how to fine tune that model. I will also show how you can leverage the model to accelerate your labelling process, and finally how to justify your efforts by generating usage and performance statistics.In Part 1, I discussed the process of labelling your image data that you use in your image classification project. I showed how define “good” images and create sub-classes. In Part 2, I went over various data sets, beyond the usual train-validation-test sets, with benchmark sets, plus how to handle synthetic data and duplicate images. In Part 3, I explained how to apply different evaluation criteria to a trained model versus a deployed model, and using benchmarks to determine when to deploy a model.So far I have focused a lot of time on labelling and curating the set of images, and also evaluating model performance, which is like putting the cart before the horse. I’m not trying to minimize what it takes to design a massive neural network — this is a very important part of the application you are building. In my case, I spent a few weeks experimenting with different available models before settling on one that fit the bill.Once you pick a model structure, you usually don’t make any major changes to it. For me, six years into deployment, I’m still using the same one. Specifically, I chose Inception V4 because it has a large input image size and an adequate number of layers to pick up on subtle image features. It also performs inference fast enough on CPU, so I don’t need to run expensive hardware to serve the model.Your mileage may vary. But again, the main takeaway is that focusing on your data will pay dividends versus searching for the best model.I will share a process that I found to work extremely well. Once I decided on the model to use, I randomly initialized the weights and let the model train for about 120 epoch before improvements plateau at a fairly modest accuracy, like 93%. At this point, I performed the evaluation of the trained model (see Part 3) to clean up the data set. I also incorporated new images as part of the data pipeline (see Part 1) and prepared the data sets for the next training run.Before starting the next training run, I simply take the last trained model, pop the output layer, and add it back in with random weights. Since the number of output classes are constantly increasing in my case, I have to pop that layer anyway to account for the new number of classes. Importantly, I leave the rest of the trained weights as they were and allow them to continue updating for the new classes.This allows the model to train much faster before improvements stall. After repeating this process dozens of times, the training reaches plateau after about 20 epochs, and the test accuracy can reach 99%! The model is building upon the low-level features that it established from the previous runs while re-learning the output weights to prevent overfitting.It took me a while to trust this process, and for a few years I would train from scratch every time. But after I attempted this and saw the training time (not to mention the cost of cloud GPU) go down while the accuracy continued to go up, I started to embrace the process. More importantly, I continue to see the evaluation metrics of the deployed model return solid performances.During training, you can apply transformations on your images (called “augmentation”) to give you more diversity from you data set. With our zoo animals, it is fairly safe to apply left-right flop, slight rotations clockwise and counterclockwise, and slight resize that will zoom in and out.With these transformations in mind, make sure your images are still able to act as good training images. In other words, an image where the subject is already small will be even smaller with a zoom out, so you probably want to discard the original. Also, some of your original pictures may need to be re-oriented by 90 degrees to be upright since a further rotation would make them look unusual.As I mentioned in Part 1, you can use the trained model to assist you in labelling images one at a time. But the way to take this even further is to have your newly trained model identify hundreds at a time while building a list of the results that you can then filter.Typically, we have large collections of  images that have come in either through regular usage of the application or some other means. Recall from Part 1 assigning “unknown” labels to interesting pictures but you have no clue what it is. By using the bulk identification method, we can sift through the collections quickly to target the labelling once we know what they are.By combining your current image counts with the bulk identification results, you can target classes that need expanded coverage. Here are a few ways you can leverage bulk identification:Increase low image counts — Some of your classes may have just barely made the cutoff to be included in the training set, which means you need more examples to improve coverage. Filter for images that have low counts.Replace staged or synthetic images — Some classes may be built entirely using non-real-world images. These pictures may be good enough to get started with, but may cause performance issues down the road because they look different than what typically comes through. Filter for classes that depend on staged images. — A class in your data set may look like another one. For example, let’s say your model can identify an antelope, and that looks like a gazelle which your model cannot identify yet. Setting a filter for antelope and a lower confidence score may reveal gazelle images that you can label. — You may not have known how to identify the dozens of cute wallaby pictures, so you saved them under “Unknown” because it was a good image. Now that you know what it is, you can filter for its look-alike kangaroo and quickly add a new class.Mass removal of low scores — As a way to clean out your large collection of unlabelled images that have nothing worth labelling, set a filter for lowest scores.Recall the decision I made to have image cutoffs from Part 2, which allows us to ensure an adequate number of example images of a class before we train and server a model to the public. The problem is that you may have a number of classes that are  below your cutoff (in my case, 40) and don’t make it into the model.The way I approach this is with a “throw-away” training run that I do not intend to move to production. I will decrease the lower cutoff from 40 to perhaps 35, build my train-validation-test sets, then train and evaluate like I normally do. The most important part of this is the bulk identification at the end!There is a chance that somewhere in the large collection of unlabelled images I will find the few that I need. Doing the bulk identification with this throw-away model helps find them.One very important aspect of any machine learning application is being able to show usage and performance reports. Your manager will likely want to see how many times the application is being used to justify the expense, and you as the ML engineer will want to see how the latest model is performing compared to the previous one.You should build logging into your model serving to record every transaction going through the system. Also, the manual evaluations from Part 3 should be recorded so you can report on performance for such things as accuracy over time, by model version, by confidence scores, by class, etc. You will be able to detect trends and make adjustments to improve the overall solution.There are a lot of reporting tools, so I won’t recommend one over the other. Just make sure you are collecting as much information as you can to build these dashboards. This will justify the time, effort, and cost associated with maintaining the application.We covered a lot of ground across this four-part series on building an image classification project and deploying it in the real world. It all starts with the data, and by investing the time and effort into maintaining the highest quality image library, you can reach impressive levels of model performance that will gain the trust and confidence of your business partners.As a Machine Learning Engineer, you are primarily responsible for building and deploying your model. But it doesn’t stop there — dive into the data. The more familiar you are with the data, the better you will understand the strengths and weaknesses of your model. Take a close look at the evaluations and use them as an opportunity to adjust the data set.I hope these articles have helped you find new ways to improve your own machine learning project. And by the way, don’t let the machine do all the learning — as humans, our job is to continue our own learning, so don’t ever stop!Thank you for taking this deep dive with me into a data-driven approach to model optimization. I look forward to your feedback and how you can apply this to your own application.]]></content:encoded></item><item><title>Use language embeddings for zero-shot classification and semantic search with Amazon Bedrock</title><link>https://aws.amazon.com/blogs/machine-learning/use-language-embeddings-for-zero-shot-classification-and-semantic-search-with-amazon-bedrock/</link><author>Tom Rogers</author><category>dev</category><category>ai</category><pubDate>Thu, 13 Feb 2025 20:53:32 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[In this post, we discuss what embeddings are, show how to practically use language embeddings, and explore how to use them to add functionality such as zero-shot classification and semantic search. We then use Amazon Bedrock and language embeddings to add these features to a really simple syndication (RSS) aggregator application.Amazon Bedrock is a fully managed service that makes foundation models (FMs) from leading AI startups and Amazon available through an API, so you can choose from a wide range of FMs to find the model that is best suited for your use case. Amazon Bedrock offers a serverless experience, so you can get started quickly, privately customize FMs with your own data, and integrate and deploy them into your applications using Amazon Web Services (AWS) services without having to manage infrastructure. For this post, we use the Cohere v3 Embed model on Amazon Bedrock to create our language embeddings.To demonstrate some of the possible uses of these language embeddings, we developed an RSS aggregator website. RSS is a web feed that allows publications to publish updates in a standardized, computer-readable way. On our website, users can subscribe to an RSS feed and have an aggregated, categorized list of the new articles. We use embeddings to add the following functionalities:This post uses this application as a reference point to discuss the technical implementation of the semantic search and zero-shot classification features.This solution uses the following services:The following diagram illustrates the solution architecture.This section offers a quick primer on what embeddings are and how they can be used.Embeddings are numerical representations of concepts or objects, such as language or images. In this post, we discuss language embeddings. By reducing these concepts to numerical representations, we can then use them in a way that a computer can understand and operate on.Let’s take Berlin and Paris as an example. As humans, we understand the conceptual links between these two words. Berlin and Paris are both cities, they’re capitals of their respective countries, and they’re both in Europe. We understand their conceptual similarities almost instinctively, because we can create a model of the world in our head. However, computers have no built-in way of representing these concepts.To represent these concepts in a way a computer can understand, we convert them into language embeddings. Language embeddings are high dimensional vectors that learn their relationships with each other through the training of a neural network. During training, the neural network is exposed to enormous amounts of text and learns patterns based on how words are colocated and relate to each other in different contexts.Embedding vectors allow computers to model the world from language. For instance, if we embed “Berlin” and “Paris,” we can now perform mathematical operations on these embeddings. We can then observe some fairly interesting relationships. For instance, we could do the following: Paris – France + Germany ~= Berlin. This is because the embeddings capture the relationships between the words “Paris” and “France” and between “Germany” and “Berlin”—specifically, that Paris and Berlin are both capital cities of their respective countries.The following graph shows the word vector distance between countries and their respective capitals.Subtracting “France” from “Paris” removes the country semantics, leaving a vector representing the concept of a capital city. Adding “Germany” to this vector, we are left with something closely resembling “Berlin,” the capital of Germany. The vectors for this relationship are shown in the following graph.For our use case, we use the pre-trained Cohere Embeddings model in Amazon Bedrock, which embeds entire texts rather than a single word. The embeddings represent the meaning of the text and can be operated on using mathematical operations. This property can be useful to map relationships such as similarity between texts.One way in which we use language embeddings is by using their properties to calculate how similar an article is to one of the topics.To do this, we break down a topic into a series of different and related embeddings. For instance, for culture, we have a set of embeddings for sports, TV programs, music, books, and so on. We then embed the incoming title and description of the RSS articles, and calculate the similarity against the topic embeddings. From this, we can assign topic labels to an article.The following figure illustrates how this works. The embeddings that Cohere generates are highly dimensional, containing 1,024 values (or dimensions). However, to demonstrate how this system works, we use an algorithm designed to reduce the dimensionality of the embeddings, t-distributed Stochastic Neighbor Embedding (t-SNE), so that we can view them in two dimensions. The following image uses these embeddings to visualize how topics are clustered based on similarity and meaning.You can use the embedding of an article and check the similarity of the article against the preceding embeddings. You can then say that if an article is clustered closely to one of these embeddings, it can be classified with the associated topic.This is the k-nearest neighbor (k-NN) algorithm. This algorithm is used to perform classification and regression tasks. In k-NN, you can make assumptions around a data point based on its proximity to other data points. For instance, you can say that an article that has proximity to the music topic shown in the preceding diagram can be tagged with the culture topic.The following figure demonstrates this with an ArsTechnica article. We plot against the embedding of an article’s title and description: (The climate is changing so fast that we haven’t seen how bad extreme weather could get: Decades-old statistics no longer represent what is possible in the present day).The advantage of this approach is that you can add custom, user-generated topics. You can create a topic by first creating a series of embeddings of conceptually related items. For instance, an AI topic would be similar to the embeddings for AI, Generative AI, LLM, and Anthropic, as shown in the following screenshot.In a traditional classification system, we’d be required to train a classifier—a supervised learning task where we’d need to provide a series of examples to establish whether an article belongs to its respective topic. Doing so can be quite an intensive task, requiring labeled data and training the model. For our use case, we can provide examples, create a cluster, and tag articles without having to provide labeled examples or train additional models. This is shown in the following screenshot of results page of our website.In our application, we ingest new articles on a schedule. We use EventBridge schedules to periodically call a Lambda function, which checks if there are new articles. If there are, it creates an embedding from them using Amazon Bedrock and Cohere.We calculate the article’s distance to the different topic embeddings, and can then determine whether the article belongs to that category. This is done with Aurora PostgreSQL with pgvector. We store the embeddings of the topics and then calculate their distance using the following SQL query:const topics = await sqlClient.then(it=> it.query(
    `SELECT name, embedding_description, similarity
     FROM (SELECT topic_id as name, embedding_description, (1- ABS( 1 –(embed.embedding <-> $1))) AS "similarity" FROM topic_embedding_link embed)  topics
     ORDER BY similarity desc`,
    [toSql(articleEmbedding)]
  ))
The <-> operator in the preceding code calculates the Euclidean distance between the article and the topic embedding. This number allows us to understand how close an article is to one of the topics. We can then determine the appropriateness of a topic based on this ranking.We then tag the article with the topic. We do this so that the subsequent request for a topic is as computationally as light as possible; we do a simple join rather than calculating the Euclidean distance.const formattedTopicInsert = pgformat(
    `INSERT INTO feed_article_topic_link(topic_id, feed_article_id) VALUES %L ON CONFLICT DO NOTHING`,
    topicLinks
  )We also cache a specific topic/feed combination because these are calculated hourly and aren’t expected to change in the interim.As previously discussed, the embeddings produced by Cohere contain a multitude of features; they embed the meanings and semantics of a word of phrase. We’ve also found that we can perform mathematical operations on these embeddings to do things such as calculate the similarity between two phrases or words.We can use these embeddings and calculate the similarity between a search term and an embedding of an article with the k-NN algorithm to find articles that have similar semantics and meanings to the search term we’ve provided.For example, in one of our RSS feeds, we have a lot of different articles that rate products. In a traditional search system, we’d rely on keyword matches to provide relevant results. Although it might be simple to find a specific article (for example, by searching “best digital notebooks”), we would need a different method to capture multiple product list articles.In a semantic search system, we first transform the term “Product list” in an embedding. We can then use the properties of this embedding to perform a search within our embedding space. Using the k-NN algorithm, we can find articles that are semantically similar. As shown in the following screenshot, despite not containing the text “Product list” in either the title or description, we’ve been able to find articles that contain a product list. This is because we were able to capture the semantics of the query and match it to the existing embeddings we have for each article.In our application, we store these embeddings using pgvector on Aurora PostgreSQL. pgvector is an open source extension that enables vector similarity search in PostgreSQL. We transform our search term into an embedding using Amazon Bedrock and Cohere v3 Embed.After we’ve converted the search term to an embedding, we can compare it with the embeddings on the article that have been saved during the ingestion process. We can then use pgvector to find articles that are clustered together. The SQL code for that is as follows:SELECT *
FROM (
    SELECT feed_articles.id as id, title, feed_articles.feed_id as feed, feedName, slug, description, url, author, image, published_at as published, 1 - ABS(1 - (embedding <-> $2)) AS "similarity"
    FROM feed_articles
    INNER JOIN (select feed_id, name as feedName from feed_user_subscription fus where fus.user_id=$1) sub on feed_articles.feed_id=sub.feed_id
    ${feedId != undefined ? `WHERE feed_articles.feed_id = $4` : ""}
)
WHERE similarity > 0.95
ORDER BY similarity desc
LIMIT $3;
This code calculates the distance between the topics, and the embedding of this article as “similarity.” If this distance is close, then we can assume that the topic of the article is related, and we therefore attach the topic to the article.To deploy this application in your own account, you need the following prerequisites:Model access for Cohere Embed English. On the Amazon Bedrock console, choose  in the navigation pane, then choose . Select the FMs of your choice and request access.When the prerequisite steps are complete, you’re ready to set up the solution:Navigate to the solution directory:In your terminal, export your AWS credentials for a role or user in ACCOUNT_ID. The role needs to have all necessary permissions for AWS CDK deployment: 
  export AWS_REGION=”<region>” – The AWS Region you want to deploy the application toexport AWS_ACCESS_KEY_ID=”<access-key>” – The access key of your role or userexport AWS_SECRET_ACCESS_KEY=”<secret-key>” – The secret key of your role or userIf you’re deploying the AWS CDK for the first time, run the following command:To synthesize the AWS CloudFormation template, run the following command:cdk synth -c vpc_id=<ID Of your VPC>To deploy, use the following command:cdk deploy -c vpc_id=<ID Of your VPC>When deployment is finished, you can check these deployed stacks by visiting the AWS CloudFormation console, as shown in the following screenshot.Run the following command in the terminal to delete the CloudFormation stack provisioned using the AWS CDK:In this post, we explored what language embeddings are and how they can be used to enhance your application. We’ve learned how, by using the properties of embeddings, we can implement a real-time zero-shot classifier and can add powerful features such as semantic search.The code for this application can be found on the accompanying GitHub repo. We encourage you to experiment with language embeddings and find out what powerful features they can enable for your applications!is a Solutions Architect based in Amsterdam, the Netherlands. He has a background in software engineering. At AWS, Thomas helps customers build cloud solutions, focusing on modernization, data, and integrations.]]></content:encoded></item><item><title>Learnings from a Machine Learning Engineer — Part 2: The Data Sets</title><link>https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/</link><author>David Martin</author><category>dev</category><category>ai</category><pubDate>Thu, 13 Feb 2025 20:29:39 +0000</pubDate><source url="https://towardsdatascience.com/">Towards Data Science</source><content:encoded><![CDATA[In Part 1, we discussed the importance of collecting good image data and assigning proper labels for your Image Classification project to be successful. Also, we talked about classes and sub-classes of your data. These may seem pretty straight forward concepts, but it’s important to have a solid understanding going forward. So, if you haven’t, please check it out.Now we will discuss how to build the various data sets and the techniques that have worked well for my application. Then in the next part, we will dive into the evaluation of your models, beyond simple accuracy.I will again use the example zoo animals image classification app.As machine learning engineers, we are all familiar with the train-validation-test sets, but when we include the concept of sub-classes discussed in Part 1, and incorporate to concepts discussed below to set a minimum and maximum image count per class, as well as staged and synthetic data to the mix, the process gets a bit more complicated. I had to create a custom script to handle these options.I will walk you through these concepts before we split the data for training: — Too few images and your model performance will suffer. Too many and you spend more time training than it’s worth. — Your model indicates how confident it is in the predictions. Let’s use that to decide when to present results to the user. — Real-world data is messy and the benchmark sets should reflect that. These need to stretch the model to the limit and help us decide when it is ready for production.Staged and synthetic data — Real-world data is king, but sometimes you need to produce the your own or even generate data to get off the ground. Be careful it doesn’t hurt performance. — Repeat data can skew your results and give you a false sense of performance. Make sure your data is diverse. — Combine sub-classes, apply cutoffs, and create your train-validation-test sets. Now we are ready to get the show started.In my experience, using a minimum of 40 images per class provides descent performance. Since I like to use 10% each for the test set and validation set, that means at least 4 images will be used to check the training set, which feels just barely adequate. Using fewer than 40 images per class, I notice my model evaluation tends to suffer.On the other end, I set a maximum of about 125 images per class. I have found that the performance gains tend to plateau beyond this, so having more data will slow down the training run with little to show for it. Having more than the maximum is fine, and these “overflow” can be added to the test set, so they don’t go to waste.There are times when I will drop the minimum cutoff to, say 35, with no intention of moving the trained model to production. Instead, the purpose is to leverage this throw-away model to find more images from my unlabelled set. This is a technique that I will go into more detail in Part 3.You are likely familiar with the softmax score. As a reminder, softmax is the probability assigned to each label. I like to think of it as a confidence score, and we are interested in the class that receives the highest confidence. Softmax is a value between zero and one, but I find it easier to interpret confidence scores between zero and 100, like a percentage.In order to decide if the model is confident enough with its prediction, I have chosen a threshold of 95. I use this threshold when determining if I want to present results to the user.Scores above the threshold have a better changes of being right, so I can confidently provide the results. Scores below the threshold may not be right — in fact it could be “out-of-scope”, meaning it’s something the model doesn’t know how to identify. So, instead of taking the risk of presenting incorrect results, I instead prompt the user to try again and offer suggestions on how to take a “good” picture.Admittedly this is somewhat arbitrary cutoff, and you should decide for your use-case what is appropriate. In fact, this score could probably be adjusted for each trained model, but this would make it harder to compare performance across models.I will refer to this confidence score frequently in the evaluations section in Part 3.Let me introduce what I call the benchmark sets, which you can think of as extended test sets. These are hand-picked images designed to stretch the limits of your model, and provide a measure for specific classes of your data. Use these benchmarks to justify moving your model to production, and for an objective measure to show to your manager. — These are the “extra credit” images, like the bonus questions a professor would add to the quiz to see which students are paying attention. You need a keen eye to spot the difference between the ground truth and a similar looking class. For example, a cheetah sleeping in the shade that could pass as a leopard if you don’t look closely. — These are the “trick question” images. Our model is trained on zoo animals, but people are known for not following the rules. For example, a zoo guest takes a picture of their child wearing cheetah face paint. — These are your “bread and butter” classes that need to get near perfect scores and zero errors. This would be a make-or-break benchmark for moving to production. — These are your “rare but exceptional” classes that again need to be correct, but reach a minimum score like the confidence threshold.When looking for images to add to the benchmarks, you can likely find them in real-world images from your deployed model. See the evaluation in Part 3.For each benchmark, calculate the min, max, median, and mean scores, and also how many images get scores above and below the confidence threshold. Now you can compare these measures against what is currently in production, and against your minimum requirements, to help decide if the new model is production worthy.Perhaps the biggest hurdle to any supervised machine learning application is having data to train the model. Clearly, “real-world” data that comes from actual users of the application is ideal. However you can’t really collect these until the model is deployed. Chicken and egg problem.One way to get started to is to have volunteers collect “staged” images for you, trying to act like real users. So, let’s have our zoo staff go around taking pictures of the animals. This is a good start, but there will be a certain level of bias introduced in these images. For example, the staff may take the photos over a few days, so you may not get the year-round weather conditions.Another way to get pictures is use computer-generated “synthetic” images. I would avoid these at all costs, to be honest. Based on my experience, the model struggles with these because they look…different. The lighting is not natural, the subject may superimposed on a background and so the edges look too sharp, etc. Granted, some of the AI generated images look very realistic, but if you look closely you may spot something unusual. The neural network in your model will notice these, so be careful.The way that I handle these staged or synthetic images is as a sub-class that gets merged into the training set, but only  giving preference to the real-world images. I cap the number of staged images to 60, so if I have 10 real-world, I now only need 50 staged. Eventually, these staged and synthetic images are phased out completely, and I rely entirely on real-world.One problem that can creep into your image set are duplicate images. These can be exact copies of pictures, or they can be extremely similar. You may think that this is harmless, but imagine having 100 pictures of an elephant that are exactly the same — your model will not know what to do with a different angle of the elephant.Now, let’s say you have only  pictures that are nearly the same. Not so bad, right? Well, here is what can happen to them:Both pictures go in the training set — The model doesn’t learn anything from the repeated image and it wastes time processing them.One goes into the training set, the other goes into the test set — Your test score will be higher, but it is not an accurate evaluation.Both are in the test set — Your test score will be compounded either higher or lower than it should be.None of these will help your model.There are a few ways to find duplicates. The approach I have taken is to calculate a hamming distance on all the pictures and identify the ones that are very close. I have an interface that displays the duplicates and I decide which one I like best, and remove the other.Another way (I haven’t tried this yet) is to create a vector representation of your images. Store these a vector database, and you can do a similarity search to find nearly identical images.Whatever method you use, it is important to clean up the duplicates.Now we are ready to build the traditional training, validation, and test sets. This is no longer a straight forward task since I want to:Merge sub-classes into a main class.Prioritize real-world images over staged or synthetic images.Apply a minimum number of images per class.Apply a maximum number of images per class, sending the “overflow” to the test set.This process is somewhat complicated and depends on how you manage your image library. First, I would recommend keeping your images in a folder structure that has sub-class folders. You can get image counts by using a script to simply read the folders. Second is to keep a configuration of how the sub-classes are merged. To really set yourself up for success, put these image counts and merge rules in a database for faster lookups.My train-validation-test set splits are usually 90–10–0. I originally started out using 80–10–10, but with diligence on keeping the entire data set clean, I noticed validation and test scores became pretty even. This allowed me to increase the training set size, and use “overflow” to become the test set, as well as using the benchmark sets.In this part, we’ve built our data sets by merging sub-classes and using the image count cutoffs. Plus we handle staged and synthetic data as well as cleaning up duplicate images. We also created benchmark sets and defined confidence thresholds, which help us decide when to move a model to production.In Part 3, we will discuss how we are going to evaluate the different model performances. And then finally we will get to the actual model training and the techniques to enhance accuracy.]]></content:encoded></item><item><title>Nearly a Year Later, Mozilla is Still Promoting OneRep</title><link>https://krebsonsecurity.com/2025/02/nearly-a-year-later-mozilla-is-still-promoting-onerep/</link><author>BrianKrebs</author><category>infosec</category><pubDate>Thu, 13 Feb 2025 20:14:47 +0000</pubDate><source url="https://krebsonsecurity.com/">Krebs on Security</source><content:encoded><![CDATA[In mid-March 2024, KrebsOnSecurity revealed that the founder of the personal data removal service  also founded dozens of people-search companies. Shortly after that investigation was published,  said it would stop bundling Onerep with the  browser and wind down its partnership with the company. But nearly a year later, Mozilla is still promoting it to Firefox users.Mozilla offers Onerep to Firefox users on a subscription basis as part of Mozilla Monitor Plus. Launched in 2018 under the name Firefox Monitor, Mozilla Monitor also checks data from the website Have I Been Pwned? to let users know when their email addresses or password are leaked in data breaches.The ink on that partnership agreement had barely dried before KrebsOnSecurity published a story showing that Onerep’s Belarusian CEO and founder  launched dozens of people-search services since 2010, including a still-active data broker called  that sells background reports on people. This seemed to contradict Onerep’s stated motto, “We believe that no one should compromise personal online security and get a profit from it.”Shelest released a lengthy statement (PDF) wherein he acknowledged maintaining an ownership stake in , a consumer data broker he founded in 2015 — around the same time he started Onerep.Onerep.com CEO and founder Dimitri Shelest, as pictured on the “about” page of onerep.com.Shelest maintained that Nuwber has “zero cross-over or information-sharing with Onerep,” and said any other old domains that may be found and associated with his name are no longer being operated by him.“I get it,” Shelest wrote. “My affiliation with a people search business may look odd from the outside. In truth, if I hadn’t taken that initial path with a deep dive into how people search sites work, Onerep wouldn’t have the best tech and team in the space. Still, I now appreciate that we did not make this more clear in the past and I’m aiming to do better in the future.”When asked to comment on the findings, Mozilla said then that although customer data was never at risk, the outside financial interests and activities of Onerep’s CEO did not align with their values.“We’re working now to solidify a transition plan that will provide customers with a seamless experience and will continue to put their interests first,” Mozilla said.In October 2024, Mozilla published a statement saying the search for a different provider was taking longer than anticipated.“While we continue to evaluate vendors, finding a technically excellent and values-aligned partner takes time,” Mozilla wrote. “While we continue this search, Onerep will remain the backend provider, ensuring that we can maintain uninterrupted services while we continue evaluating new potential partners that align more closely with Mozilla’s values and user expectations. We are conducting thorough diligence to find the right vendor.”Asked for an update, Mozilla said the search for a replacement partner continues.“The work’s ongoing but we haven’t found the right alternative yet,” Mozilla said in an emailed statement. “Our customers’ data remains safe, and since the product provides a lot of value to our subscribers, we’ll continue to offer it during this process.”It’s a win-win for Mozilla that they’ve received accolades for their principled response while continuing to partner with Onerep almost a year later. But if it takes so long to find a suitable replacement, what does that say about the personal data removal industry itself?Onerep appears to be working in partnership with another problematic people-search service: , which has a history of ignoring opt-out requests or failing to honor them. A week before breaking the story about Onerep, KrebsOnSecurity published research showing the co-founders of Radaris were two native Russian brothers who’d built a vast network of affiliate marketing programs and consumer data broker services.Lawyers for the Radaris co-founders threatened to sue KrebsOnSecurity unless that story was retracted in full, claiming the founders were in fact Ukrainian and that our reporting had defamed the brothers by associating them with the actions of Radaris. Instead, we published a follow-up investigation which showed that not only did the brothers from Russia create Radaris, for many years they issued press releases quoting a fictitious CEO seeking money from investors.Several readers have shared emails they received from Radaris after attempting to remove their personal data, and those messages show Radaris has been promoting Onerep.An email from Radaris promoting Onerep.]]></content:encoded></item><item><title>Bcachefs Freezes Its On-Disk Format With Future Updates Optional</title><link>https://www.phoronix.com/news/Bcachefs-On-Disk-Format-Freeze</link><author>Michael Larabel</author><category>tech</category><pubDate>Thu, 13 Feb 2025 19:18:32 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[The latest round of Bcachefs file-system fixes have been submitted today for the in-development Linux 6.14 kernel. Besides fixes for the current kernel, it was announced today that the on-disk format for the file-system is now considered frozen in its latest development "master" branch...]]></content:encoded></item><item><title>Why We Built an AI Gateway in Rust: A Performance-Centric Decision</title><link>https://dev.to/langdb/why-we-built-an-ai-gateway-in-rust-a-performance-centric-decision-2nb8</link><author>Mrunmay Shelar</author><category>dev</category><category>rust</category><pubDate>Thu, 13 Feb 2025 18:44:14 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[When building our AI gateway, we knew performance would be a critical factor. Unlike most AI software written in Python, an AI gateway acts as the  between users and inference engines. This gateway must handle , , and  efficiently. Python, while dominant in the AI ecosystem, struggles under these demands due to its  and limitations with concurrency.To demonstrate why we chose , we benchmarked three popular programming environments—, , and —to evaluate their performance under high-load conditions. Rust emerged as the clear winner, offering predictable and stable performance even at scale.
  
  
  Benchmark Setup: Simulating Real-World AI Traffic
We built an  and a corresponding client to mimic real-world AI workloads. Here’s how the setup worked:Streams tokens at a fixed inter-token latency of 25ms, similar to the tokenized output of an AI inference engine.Uses HTTP/2 to deliver tokenized data efficiently to multiple clients.Implements asynchronous programming to support thousands of connections concurrently.Gradually establishes up to 15,000 simultaneous connections to the server.Measures the —the time between consecutive tokens received from the server. This metric reflects the server’s ability to scale under increasing load.Ensures that connections remain stable and records latency for each connection.The server was implemented in , , and  to ensure a fair comparison.The client progressively increased the number of active connections, starting with a small number and scaling up to 15,000.Intra-token latency measurements were collected for each implementation to evaluate performance under load.
  
  
  Results: Rust vs. Python vs. JavaScript (Node.js)
The chart below illustrates the  (in milliseconds) as the number of concurrent connections increases:Rust exhibited the most stable performance, maintaining a near-linear increase in latency as connections scaled.At , Rust's intra-token latency reached approximately , only 3x the baseline inter-token latency of 25ms.Rust’s efficiency highlights its ability to handle high concurrency without significant degradation.Python's intra-token latency grew exponentially, exceeding 200ms at 15,000 connections.This exponential growth demonstrates Python's inherent limitations in managing large-scale concurrency and resource contention.Node.js initially performed better than Python, maintaining lower latency up to .However, its performance began to degrade significantly beyond this point, reaching over 150ms at 15,000 connections.This result underscores Node.js’s event-driven model, which works well for moderate concurrency but struggles under extreme loads.
  
  
  Why Rust is the Best Choice for an AI Gateway
Predictable, Scalable Performance:Rust’s ability to maintain 75ms latency at 15,000 connections demonstrates its scalability. Its near-linear latency growth makes it ideal for high-concurrency systems.Concurrency Without Compromise:Rust’s async programming model (e.g., Tokio) efficiently manages thousands of simultaneous connections. Unlike Python, Rust avoids the bottlenecks of the Global Interpreter Lock (GIL) and utilizes system resources optimally.Rust compiles directly to machine code, ensuring minimal runtime overhead. Its memory safety and zero-cost abstractions allow for predictable and efficient resource management.Rust provides fine-grained control over threading and memory, making it the best choice for performance-critical applications like AI gateways.
  
  
  Why Python and JavaScript Fall Short
: The GIL prevents true multi-threading, causing severe bottlenecks under high load.: Python's interpreted nature adds significant latency, making it unsuitable for latency-sensitive applications.: As connections increase, Python's performance deteriorates rapidly, with latency exceeding acceptable thresholds.: Node.js performs well under moderate concurrency but struggles as the number of simultaneous connections grows beyond 7,500.: While Node.js handles asynchronous I/O well, it lacks the low-level control offered by Rust, leading to degraded performance at scale.
  
  
  Why AI Gateways Must Be Built with Performance in Mind
An AI gateway is more than a simple intermediary. It plays a critical role in ensuring: Users expect tokenized outputs to arrive with minimal delay, making low latency essential. AI gateways must handle thousands or tens of thousands of simultaneous connections to accommodate large-scale applications. Inconsistent performance or connection drops can severely impact user experience and application reliability.Rust excels in all these areas, delivering predictable, stable performance at scale, making it the ideal language for building high-performance AI gateways.
  
  
  The Takeaway: Rust is the Future of AI Gateways
Our benchmark results clearly show that while Python and JavaScript (Node.js) have their strengths, they are ill-suited for building performance-critical AI gateways: struggles with concurrency and runtime overhead, leading to exponential latency growth. performs better but falters under extreme loads, making it unreliable for high-concurrency scenarios., on the other hand, delivers consistent, scalable performance with low latency, even at . By choosing Rust for our AI gateway, we’ve built an infrastructure that can handle the demands of modern AI applications with ease.If you’re building an AI gateway or any performance-critical infrastructure, Rust isn’t just an option—it’s the solution. When every millisecond matters, Rust is the language that ensures you meet the challenge head-on.]]></content:encoded></item><item><title>First Trump DOJ Assembled “Tiger Team” To Rewrite Key Law Protecting Online Speech</title><link>https://www.eff.org/deeplinks/2025/02/first-trump-doj-assembled-tiger-team-rewrite-key-law-protecting-online-speech</link><author>Aaron Mackey</author><category>tech</category><enclosure url="https://www.eff.org/files/banner_library/section_230_banner.jpeg" length="" type=""/><pubDate>Thu, 13 Feb 2025 17:51:58 +0000</pubDate><source url="https://www.eff.org/rss/updates.xml">Deeplinks</source><content:encoded><![CDATA[As President Donald Trump issued an Executive Order in 2020 to retaliate against online services that fact-checked him, a team within the Department of Justice (DOJ) was finalizing a proposal to substantially weaken a key law that protects internet users’ speech.Documents released to EFF as part of a Freedom of Information Act (FOIA) suit reveal that the DOJ officials—a self-described “Tiger Team”—were caught off guard by Trump’s retaliatory effort, which was aimed at the same online social services they wanted to regulate further by amending 47 U.S.C. § 230 (Section 230).Section 230 protects users’ online speech by protecting the online intermediaries we all rely on to communicate on blogs, social media platforms, and educational and cultural platforms like Wikipedia and the Internet Archive. Section 230 embodies that principle that we should all be responsible for our own actions and statements online, but generally not those of others. The law prevents most civil suits against users or services that are based on what others say.The correspondence among DOJ officials shows that the group delayed unveiling the agency’s official plans to amend Section 230 in light of Trump’s executive order, which was challenged on First Amendment grounds and later rescinded by President Joe Biden. EFF represented the groups who challenged Trump’s Executive Order and filed two FOIA suits for records about the administration’s implementation of the order.In the most recent FOIA case, the DOJ has been slowly releasing records detailing its work to propose amendments to Section 230, which predated Trump’s Executive Order. The DOJ released the text of its proposed amendments to Section 230 in September 2020, and the proposal would have substantially narrowed the law’s protections.For example, the DOJ’s proposal would have allowed federal civil suits and state and federal criminal prosecutions against online services if they learned that users’ content broke the law. It also would have established notice-and-takedown liability for user-generated content that was deemed to be illegal. Together, these provisions would likely result in online services screening and removing a host of legal content, based on a fear that any questionable material might trigger liability later.The DOJ’s proposal had a distinct emphasis on imposing liability on services should they have hosted illegal content posted by their users. That focus was likely the result of the team DOJ assembled to work on the proposal, which included officials from the agency’s cybercrime division and the FBI.The documents also show that DOJ officials met with attorneys who brought lawsuits against online services to get their perspective on Section 230. This is not surprising, as the DOJ had been meeting with multiple groups throughout 2020 while it prepared a report about Section 230.EFF’s FOIA suit is ongoing, as the DOJ has said that it still has thousands of potential pages to review and possibly release. Although these documents reflect DOJ’s activity from Trump’s first term, they are increasingly relevant as the administration appoints officials who have previously threatened online intermediaries for exercising their own First Amendment rights. EFF will continue to publish all documents released in this FOIA suit and push back on attempts to undermine internet users’ rights to speak online.]]></content:encoded></item><item><title>Lawyers Caught Citing AI-Hallucinated Cases Call It a &apos;Cautionary Tale&apos;</title><link>https://www.404media.co/lawyers-caught-citing-ai-hallucinated-cases-call-it-a-cautionary-tale/</link><author>Samantha Cole</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/photo-1620424393934-04e772be09f4.jpeg" length="" type=""/><pubDate>Thu, 13 Feb 2025 17:33:00 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[After a judge called out a law firm for citing fake cases in court documents, the attorneys admitted to AI “hallucinating” the cases. In a court order filed last week, Wyoming District Judge Kelly Rankin demanded the attorneys explain why they shouldn’t be sanctioned or disciplined for citing made-up information, including referencing eight non-existent cases. , first filed in 2023, is against Walmart and Jetson Electronic Bikes, Inc., which makes hoverboards for sale at Walmart. The plaintiffs, including a woman, her husband, and four minor children, claim a Jetson hoverboard’s lithium ion battery malfunctioned and caught fire while they were sleeping and burned their house down, severely injuring several members of the family.In a motion in limine filed by the plaintiff’s attorneys in January, they cited multiple cases (a "motion in limine" is a pretrial motion where attorneys request specific evidence or arguments be excluded from presentation during the trial) that don’t exist. “The cases are not identifiable by their Westlaw cite, and the Court cannot locate the District of Wyoming cases by their case name in its local Electronic Court Filing System,” Rankin wrote. She demanded each of the attorneys “provide a thorough explanation for how the motion and fake cases were generated,” and “explain their role in drafting or supervising the motion.” Four days later, they responded: “Our internal artificial intelligence platform ‘hallucinated’ the cases in question while assisting our attorney in drafting the motion in limine,” the law firm said in a filed response. “This matter comes with great embarrassment and has prompted discussion and action regarding the training, implementation, and future use of artificial intelligence within our firm. This serves as a cautionary tale for our firm and all firms, as we enter this new age of artificial intelligence.” Lawyers increasingly use AI tools for research and analyzing documents. But this isn’t the first time using AI to draft legal cases has gotten lawyers in trouble. In 2022, a man filed an action alleging he was injured by an Avianca airlines metal serving cart during an Avianca Airlines flight. His lawyers cited non-existent cases, and instead of admitting it and apologizing immediately, they doubled down and defended the filings. Eventually, they were fined $5,000 for fabricating the case,  that they “abandoned their responsibilities when they submitted non-existent judicial opinions with fake quotes and citations created by the artificial intelligence tool ChatGPT, then continued to stand by the fake opinions after judicial orders called their existence into question.” And , disbarred former celebrity attorney Michael Cohen gave his own lawyer, David Schwartz fake case citations generated by Google Bard. Cohen and Schwartz weren’t fined, but the judge who let them off without discipline did call the error “embarrassing” for them. ]]></content:encoded></item><item><title>Coding Interviews were HARD Until I Learned These 20 Tips</title><link>https://blog.algomaster.io/p/20-coding-interviews-tips</link><author>Ashish Pratap Singh</author><category>dev</category><category>learning</category><enclosure url="https://substack-post-media.s3.amazonaws.com/public/images/61c3f6c0-4027-4d37-b4a7-a30fc183fa12_1602x1032.png" length="" type=""/><pubDate>Thu, 13 Feb 2025 17:30:27 +0000</pubDate><source url="https://blog.algomaster.io/">Algomaster</source><content:encoded><![CDATA[I gave my first  in 2016—and failed. I failed the next five interviews as well before finally landing my first job at .Since then, I’ve interviewed with many companies and faced my fair share of rejections. However, over the years, my failure rate in coding interviews dropped significantly.By 2022, with just 1.5 months of focused preparation, I successfully cleared interviews at  and .Surprisingly, my success wasn’t due to a dramatic improvement in problem-solving skills. The real game-changer was my approach— and  during the interview.In this article, I’ll share  that made coding interviews significantly easier for me.These tips cover everything you need to know, including:How to systematically approach coding interview problemsKey concepts and patterns you should knowThe type of problems you should practiceHow to choose the right algorithm for a given problemTechniques to optimize your solutionHow to communicate your thought process effectivelyBy applying these strategies, you’ll be able to tackle coding interviews with confidence and massively increase your chances of success.In a coding interview, interviewers want to see how well you , , and  under pressure.Here's a breakdown of what they look for:Understanding the problem: Do you ask clarifying questions instead of making assumptions to ensure you fully understand the problem?: Can you decompose the problem into smaller, manageable parts?: Can you design an optimal solution in terms of time and space complexity?: Do you handle edge cases like empty inputs, duplicates, large values, or special conditions?: Can you explain why one approach is better than another?: Do you have a strong grasp of data structures and algorithms, and can you choose the right one for the problem?Can you quickly compute the time and space complexity of your solution?Explaining your thought process: Can you clearly articulate your approach and why it works?: Are you receptive to hints and able to adjust your approach accordingly?: Do you follow good coding practices (meaningful variable names, proper indentation, modular functions etc..)?Improving the initial solution: Can you optimize and refine your first solution when prompted?Are you able to tackle variations of the original problem?Can you manually walk through your code with sample inputs to verify correctness?Most coding interviews last Depending on the company and interviewer, you may be asked to solve 2-3easy/medium problems or 1 hard problem with follow-ups.Lets assume you are given one problem, with a follow up in a 45-minute interview. Here’s how you can optimally allocate your time:The interviewer may ask you to introduce yourself. Prepare a concise 1-2 minute introduction that highlights your background, experience, and key strengths. Practice it beforehand so that you can deliver it smoothly.Understand the Problem (5-10 mins):  Carefully read the problem statement, ask clarifying questions, and walk through sample inputs and expected outputs.Plan the Approach (10-20 mins): Brainstorm possible solutions, evaluate trade-offs, and discuss time and space complexity.Implement the Code (20-30 mins): Write a clean, modular and readable code.Dry-run your code with sample inputs, debug any issues, and ensure edge cases are handled.Follow-ups and Wrap Up (35-45 mins): Answer follow up questions, and ask thoughtful questions to the interviewer about the company, role, or team.One of the biggest mistakes candidates make in coding interviews is jumping into coding too soon.If you don't fully understand the question, you might end up solving the Here’s how to ensure you grasp the problem before coding:Read the Problem CarefullyTake a moment to absorb the problem statement. Rephrase it in your own words to confirm your understanding. Identify the expected input/output format and any hidden constraints.If anything is unclear, ask questions before diving into the solution. Interviewers appreciate when you seek clarity. Never assume details that aren’t explicitly mentioned in the problem statement.Common clarifications include:Are there duplicate values?Can the input be empty? If so, what should the output be?Should the solution handle negative numbers?Should the output maintain the original order of elements?Is the graph directed or undirected?Does the input contain only lowercase English letters, or can it have uppercase, digits, or special characters?What should happen if multiple solutions exist? Should I return any valid solution, or does the problem have specific requirements?Walk Through Input/Output ExamplesOnce you understand the problem statement and constraints, go over a few input and output examples to make sure you get it.Draw them out if it helps, especially for visual data structures like trees or graphs.Try to take examples that cover different scenarios of the problem. Think about any  that might come up.]]></content:encoded></item><item><title>A Cheap Jammer That Disrupted Airport Communications</title><link>https://www.youtube.com/watch?v=n_izoDLdUW0</link><author>Jack Rhysider</author><category>infosec</category><category>video</category><category>podcast</category><enclosure url="https://www.youtube.com/v/n_izoDLdUW0?version=3" length="" type=""/><pubDate>Thu, 13 Feb 2025 17:00:54 +0000</pubDate><source url="https://www.youtube.com/channel/UCMIqrmh2lMdzhlCPK5ahsAg">Darknet diaries</source><content:encoded><![CDATA[A Cheap Jammer That Disrupted Airport Communications

#podcast #airport #privacy 

Listen to the full episode 🎙 Darknet Diaries Ep: Jammer! He Just Wanted Privacy, But This Little Device Caused Big Trouble]]></content:encoded></item><item><title>Looking back at our Bug Bounty program in 2024</title><link>https://engineering.fb.com/2025/02/13/security/looking-back-at-our-bug-bounty-program-in-2024/</link><author></author><category>dev</category><category>official</category><pubDate>Thu, 13 Feb 2025 17:00:46 +0000</pubDate><source url="https://engineering.fb.com/">Facebook engineering</source><content:encoded><![CDATA[Ads audience tools designed to help people choose a target audience for their ads: Mixed reality hardware products:Organizing community events and presenting joint research:Providing resources and timely updates for the research community:]]></content:encoded></item><item><title>Terraform Architecture Explained , Terraform Core, State, and Plugins: How Terraform Works Under…</title><link>https://blog.devops.dev/terraform-architecture-explained-terraform-core-state-and-plugins-how-terraform-works-under-a19e4d4dbb09?source=rss----33f8b2d9a328---4</link><author>Kuseh Simon Wewoliamo</author><category>devops</category><pubDate>Thu, 13 Feb 2025 16:51:38 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[Terraform Architecture Explained , Terraform Core, State, and Plugins: How Terraform Works Under the Hood.1. Introduction 2. Terraform Architecture4. Terraform Best Practices6. ReferencesInfrastructure as Code (IaC), is an approach to managing and provisioning infrastructure by writing code instead of the manual processes , “ClickOps”. IaC can be described as a mindset where you treat all aspects of operations (servers, databases, networks) as software. When you define your infrastructure using code , it enables you to automate and use all the best practices of software development. IaC eliminates human errors , speeds up infrastructure deployments and ensures infrastructure is version-controlled, just like software code.Terraform is an open-source tool developed by HashiCorp and the most popular and widely used IaC tool used by DevOps, SREs and cloud architects. Terraform is widely used because of it’s declarative syntax, platform agnostic and its simplicity. Understanding how terraform works behind the hood will go along way to help you in write better terraform code.In this article, we will explore Terraform architecture, its core components, and how it orchestrates infrastructure provisioning efficiently.2. Terraform ArchitectureTerraform follows a standard architecture to fulfill the necessary IaC tasks. Terraform architecture mainly consists of the following components: 1 Terraform core 2 Plugins (Providers and Provisioners) Terraform core is the engine/brain behind how terraform works. It is responsible for reading configurations files , building the dependency graphs from resources and data sources, managing state and applying changes. Terraform Core does not directly interact with cloud providers but communicates with plugins via remote procedure calls (RPCs) and the plugins in turn communicates with their corresponding platforms via HTTPs.Plugins (Providers and Provisioners)Terraform ability is enhance by plugins, which enable terraform to interact with cloud services and configure resources dynamically. Plugins acts as connectors or the glue between terraform and external APIs such as AWS, Azure, GCP, Kubernetes, Docker etc. Each plugin is written in the Go programming language and implements a specific interface. Terraform core knows how to install and execute plugins. Provisioners in Terraform are used to execute scripts or commands on a resource after it has been created or modified.State is one of the most important core components of Terraform. Terraform state is a record about all the infrastructure and resources it created. It is a costumed JSON file that terraform uses to map real world resources to your configuration, keep track of metadata, and to improve performance for large infrastructures. By default, state is stored in a local file named “terraform.tfstate”. You can read more about terraform state here There are two ways to manage state: Local State refers to the default way by which Terraform stores state files (terraform.tfstate). It is suitable for small-scale projects or development environments and single person managing Terraform.Remote State refers to storing the Terraform state file (terraform.tfstate) in a remote backend rather than locally on your machine. This enables collaboration, prevents state loss, and supports features like state locking and versioning. Some common remote backends include AWS S3,Terraform Cloud, Azure Blob Storage etc. More on Remote StateTerraform follows a structured execution flow to provision, update, and manage infrastructure. This process ensures that infrastructure is deployed in a controlled and predictable manner. Terraform workflow consist of mainly three steps: The first step is to write your terraform configuration just like any other code using any editor of your choice. This is the step where you review your configurations. Terraform plan will define the infrastructure to be created, modified, or destroyed depending on the current configuration and infrastructure. The final step in the workflow is Apply, where you are ready to provision real infrastructure. Once you approve of the changes ,terraform will go ahead perform the desired actions as defined execution.4. Terraform Best Practices1. You should never edit the Terraform state files by hand or write code that reads them directly. If for some reason you need to manipulate the state file which should be a relatively rare occurrence, use the terraform import or terraform state commands.2. It’s a good practice to store your work in a version controlled repository even when you’re just operating as an individual.3. When working as a team, it’s important to delegate ownership of infrastructure across these teams and empower them to work in parallel without conflicts.4. Never Store your state file in a version controlled repository.5. Always use state locking on your state files to prevent data loss, conflicts and state file corruption.6. Integrate Terraform to your CI/CD pipelines to make your DevOps pipeline efficient.Well well, we have come to the end of this deep dive into terraform Architecture. To learn more about Terraform visit the official Terraform page. Don’t forget to add your comments , till then keep coding.6. Terraform:Up & Running , Third Edition by Yevgeniy Brikman]]></content:encoded></item><item><title>The Micro Frontend Revolution</title><link>https://blog.devops.dev/the-micro-frontend-revolution-29b6eedc8783?source=rss----33f8b2d9a328---4</link><author>Adem KORKMAZ</author><category>devops</category><pubDate>Thu, 13 Feb 2025 16:51:32 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Free AI models: Running Local LLMS with Llama 3.3,</title><link>https://blog.devops.dev/running-local-llms-with-llama-3-3-deepseek-r1-and-other-large-language-models-using-ollama-5d0dc2d09358?source=rss----33f8b2d9a328---4</link><author>Joel Wembo</author><category>devops</category><pubDate>Thu, 13 Feb 2025 16:51:03 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[Part 4 of 10 Part series on DeepSeek MLOpsFree AI models: Running Local LLMS with Llama 3.3, DeepSeek-R1, and other Large Language Models using OllamaStep-by-Step Guide: Installing a Web UI for Local LLMs on WindowsWith the rise of powerful open-source large language models (LLMs) like , , Phi-4, and Gemma 2, many users want to run these models locally for privacy, performance, and customization. However, interacting with these models via the command line can be limiting. The solution? A web-based user interface (UI) that allows easy interaction with your local LLMs.In this article, we will explore the best web UIs for running LLMs locally on Windows and guide you through the installation process. is a lightweight, high-performance framework designed for running large language models (LLMs) locally with optimized execution. It works by leveraging GGUF (GGML Unified Format), an efficient model storage format that supports quantization, allowing models to run smoothly even on consumer hardware.Why Use a Web UI for Local LLMs?Using a web UI for local LLMs offers several advantages:: No need to work with command-line tools.: Manage multiple models in one place.: Chat history, prompt engineering, and adjustable settings.: Access your models remotely via a web browserStep 1 : Download and Install OllamaDownload Ollama from https://ollama.com/download/windows, then right click on the downloaded OllamaSetup.exe file and run the installer as administrator. Once the installation is complete, Ollama is ready to use on your Windows system. An Ollama icon will be added to the tray area at the bottom of the desktop.To run Ollama and start utilizing its AI models, you’ll need to use a terminal on Windows. We’ll skip it here and let’s see how to install WebUI for a better experience.Now open the browser and type localhost:11434 to check is Ollama is up and runningAlso, Check in your system TrayNext, Open your CMD to pull some free AI modelsStep 2 — Install Ollama WebUIRun the below docker command to deploy ollama-webui docker container on your local machine. If Ollama is on your computer, use this command:docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:mainTo connect to Ollama on another server, change the OLLAMA_BASE_URL to the server’s URL. So if Ollama is on a Different Server, use this command:docker run -d -p 3000:8080 -e OLLAMA_BASE_URL=https://example.com -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:mainNext, Open your browser and type localhost:3000Ollama utilizes Metal on macOS and CUDA on Windows/Linux for hardware acceleration, enabling faster inference by directly leveraging GPU tensor operations. It runs a persistent server in the background, managing requests via an  that communicates with models using optimized token streaming.Internally, it uses low-level memory-efficient inference kernels, minimizing VRAM and RAM usage while maintaining performance. It also supports LoRA (Low-Rank Adaptation) fine-tuning, allowing users to personalize models on their local machine with minimal compute overhead.Run the following command:ollama run deepseek-r1:671bChoosing the Right Web UI for Your Needs: LM Studio (Simple setup, user-friendly UI): Oobabooga (More features, customization options): Gradio (Custom interface, lightweight solution): Open WebUI (Accessible over the internet)Setting up a web UI for local LLMs on Windows significantly enhances your experience, making it easier to interact with AI models without complex command-line operations. Whether you’re a beginner or an advanced user, the right UI can streamline your workflow and unlock new possibilities with local AI models.Start today with one of these web UIs and bring AI power to your local machine! 🚀Thank you for Reading !! 🙌🏻, don’t forget to subscribe and give it a CLAP, cloud Solutions architect, Back-end developer, and AWS Community Builder, currently working at prodxcloud as a DevOps & Cloud Architect. I bring a powerful combination of expertise in cloud architecture, DevOps practices, and a deep understanding of high availability (HA) principles. For more information about the author ( ]]></content:encoded></item><item><title>Understanding Container Orchestration (AWS ECS, AWS EKS &amp; Kubernetes)</title><link>https://blog.devops.dev/understanding-container-orchestration-aws-ecs-aws-eks-kubernetes-baee401db009?source=rss----33f8b2d9a328---4</link><author>Althaf Hussain</author><category>devops</category><pubDate>Thu, 13 Feb 2025 16:50:55 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[Why Do We Need Container Orchestration?1️⃣ We use Docker to create and run containersDocker  using a Dockerfile with :: Packages and compiles the app.: Runs the app and exposes ports.docker run -p 80:80 my-appNow the app is running inside a . 🎉2️⃣ But what if the app crashes due to high traffic?Docker cannot restart or scale the app.If there’s high traffic (e.g., festive season sales), .3️⃣ Solution? We need a tool to manage containers automatically!This is where Container Orchestration Tools come in!Examples: Kubernetes, AWS ECS, AWS EKS, Azure AKS, Google GKE, OpenShift.🚀 Kubernetes — Full Control but Complex Setup✅  When you want  over your cluster.✅ Manages multiple containers (Docker is just for one container). (if traffic increases, it adds more containers). (if an app crashes, Kubernetes restarts it).What is Kubernetes (Self-Managed)?If you want  over your cluster, you can set up Kubernetes manually.How Kubernetes Works (Practical Steps)1️⃣ Create a VM or server (EC2, Azure VM, GCP VM, on-premise server, etc.).2️⃣ Install Kubernetes, kubeadm, kubectl, networking, storage, etc.3️⃣ Set up a  and .4️⃣ Deploy your app using a .5️⃣ Manage scaling, auto-healing, networking, etc. manually.🛠️ Steps to Deploy an App Using Kubernetes:1️⃣ Set up a server (EC2 instance or VM)sudo apt update && sudo apt install -y curl apt-transport-httpscurl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.listsudo apt updatesudo apt install -y kubelet kubeadm kubectl2️⃣ Initialize Kubernetes clustermkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/configapiVersion: apps/v1kind: Deployment  name: my-app  replicas: 3    matchLabels:  template:      labels:    spec:      - name: my-app        image: my-docker-image:latest        ports:kubectl apply -f deployment.yamlapiVersion: v1kind: Service  name: my-app-service  type: LoadBalancer    app: my-app    - protocol: TCP      targetPort: 80kubectl apply -f service.yaml🎯 Your app is now running inside Kubernetes! 🚀✅ Advantages of Self-Managed Kubernetes✔  → You can configure every part of the cluster.✔  → On-premise, AWS, Azure, GCP, or hybrid cloud.✔  → You’re not tied to AWS, Azure, or any provider.✔  → Most companies use  for flexibility.❌ Disadvantages of Self-Managed Kubernetes✖  → You need to manually configure networking, storage, security, etc.✖  → You have to patch, upgrade, and secure the cluster yourself.✖  → Setting up and managing Kubernetes is .🚀 AWS ECS — AWS Manages Everything✅  Running containers without managing Kubernetes.✅ You don’t need to set up Kubernetes.Just  what app you want to run, and it does everything. over cluster management.🛠️ Steps to Deploy an App in AWS ECS1️⃣  in the AWS Console.2️⃣  (Choose Fargate or EC2).3️⃣ :Go to ECS > Task Definitions > Create new task definition.Choose  (serverless) or  (self-managed).Define  (Docker image, ports, CPU, memory).4️⃣ :Go to ECS > Services > Create Service.Choose the cluster and task definition you created.Define  (number of tasks).5️⃣  🎉🎯 Your app is running inside AWS ECS without managing infrastructure! 🚀✔  → AWS takes care of the infrastructure.✔  → No need to set up Kubernetes manually.✔ Tightly integrated with AWS → Works great with AWS services like ALB, IAM, CloudWatch, etc.✔ Less operational overhead → No need to worry about maintaining a cluster.❌ Disadvantages of AWS ECS✖  → If you want to move your app from AWS to , or , you have to set up everything from scratch.✖  → You don’t have full control over how the cluster is managed.✖  → Most companies prefer  over ECS for multi-cloud strategies.🚀 AWS EKS — AWS Manages Kubernetes for You✅  When you want Kubernetes but don’t want to install it manually.✅ AWS  (no need to install manually).You  to deploy apps. than ECS but  than DIY Kubernetes.🛠️ Steps to Deploy an App in AWS EKS1️⃣  in the AWS Console.2️⃣ :Set Cluster name, VPC, IAM role.AWS will create & configure the Kubernetes control plane.3️⃣ aws eks update-kubeconfig --region your-region --name your-cluster-name4️⃣  (same as Kubernetes DIY)kubectl apply -f deployment.yaml5️⃣ Expose the app using a Kubernetes service (same as before).🎯 Your app is running in AWS EKS with Kubernetes, but AWS helps with the setup! 🚀✔  → Works exactly like Kubernetes, so it’s easy to move to another cloud (Azure AKS, Google GKE, etc.).✔ Fully managed control plane → AWS handles the  (setting up Kubernetes).✔  than ECS → You can tweak networking, security, and scaling.✔  → You can run Kubernetes anywhere (AWS, Azure, GCP, or on-premise).❌ Disadvantages of AWS EKS✖  → You still need to understand Kubernetes concepts.✖ More operational overhead → Though AWS sets up Kubernetes, you still .✖  → You  for the Kubernetes control plane.🎯 Real-World Example of How These Work TogetherImagine you’re running an :1️⃣ You  to package your app into a container.2️⃣ You deploy it to Kubernetes (DIY) if you want full control.3️⃣ If you don’t want to manage Kubernetes, you use  (simplest).4️⃣ If you need Kubernetes but don’t want manual setup, you use .📌 Think of Kubernetes as a powerful machine where you control everything.📌 Think of AWS ECS as a service where AWS does the heavy lifting for you.📌 Think of AWS EKS as Kubernetes, but AWS helps with setup.Conclusion: Which One Should You Use?👉  if you  and don’t care about moving to another cloud.👉  if you  but don’t want to set it up manually.👉 Use Self-Managed Kubernetes if you  and plan to run across multiple clouds (AWS, Azure, GCP, on-premise, etc.).💡 If you’re , start with .If you’re building , go for .If you want , use .]]></content:encoded></item><item><title>Understanding APIs: A Developer’s Guide to Building and Using APIs</title><link>https://blog.devops.dev/understanding-apis-a-developers-guide-to-building-and-using-apis-4253418d18ba?source=rss----33f8b2d9a328---4</link><author>Subbareddysangham</author><category>devops</category><pubDate>Thu, 13 Feb 2025 16:50:21 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[An Application Programming Interface (API) acts as a bridge between different software applications, allowing them to communicate with each other. Think of an API like a waiter in a restaurant — customers (the client application) don’t need to know how the kitchen (the server) prepares their food; they need to know how to place their order through the waiter (the API).I designed and developed an e-commerce web application with HTML, CSS, and JavaScript for the front end,  for the back end, and  for the database. I will use this as an example to explain the core concepts of APIs.E-commerce Web Application API Flow Chart:To check the complete source code:APIs in the E-Commerce ApplicationThis E-Commerce application consists of the following API endpoints:1. Authentication API (auth_routes): /api/auth/login (POST) → Authenticates users and starts a session.: /api/auth/logout (POST) → Clears session and logs out users.2. Product API (product_routes): /api/products (GET) → Returns a list of products.: /api/products/<int:product_id> (GET) → Fetches details of a specific product.3. Cart API (cart_routes): /api/cart (GET) → Returns the current user's cart.: /api/cart (POST) → Adds a product to the cart.: /api/cart/<int:item_id> (DELETE) → Removes an item from the cart.4. Order API (order_routes): /api/orders (POST) → Places an order with the items in the cart.: /api/orders/<int:order_id> (GET) → Fetches details of a specific order.: /api/health (GET) → Provides API uptime, session data, and frontend path.: /<path:filename> (GET) → Serves frontend files.: / (GET) → Serves index.html or API running message.: Handles missing resources.500 Internal Server Error: Handles unexpected issues.: Handles invalid requests.An API consists of several key components that work together:These are the URLs where the  can be accessed. Similar to a , each endpoint serves a specific purpose. For example,📌 https://api.ecommerce.com/products → Retrieves a list of available products.📌 https://api.ecommerce.com/cart → Fetches the current user's shopping cart details.📌 https://api.ecommerce.com/orders → Handles order-related operations.These actions can be performed on the allowed endpoints. They’re like verbs telling the API what to do with the data. → Read data (View products, orders, cart items). → Create new data (Add product, register user, place order). → Update existing data (Update profile, modify cart quantity). → Remove data (Delete cart item, cancel order). Additional data is sent to fine-tune the API request, such as specifying which page of results you want to see.: Parameters are extra details added to an API request to filter or refine the results.Fetch  of products:GET /api/products?category=laptopsSecurity measures ensure that only authorized users can access the API.: Ensures that only authorized users can access the API.When a user logs in, the API gives a :{  "message": "Login successful",  "token": "eyJhbGciOiJIUz..."}To add a product to the cart, the request must include this :POST /api/cart/addAuthorization: Bearer eyJhbGciOiJIUz... Prevents unauthorized access and protects user data. The structure of the data returned by the API, commonly in formats like JSON or XML.: The structure of the data sent back by the API. (because it’s easy to read and use).{  "id": 1,  "price": 799.99,} Frontend uses this data to display products to users.APIs are classified according to their usage patterns and architectures.API Types According to Purposes of Use🔹  — Used within a company, hidden from public access. Helps teams share data securely.🔹  — Available to everyone, can be free or paid. Example: Google Maps API.🔹  — Used between business partners for secure data exchange. Example: E-commerce & shipping company integration.🔹  — Combines multiple APIs into one request for efficiency. Example: Fetching account balance + transaction history in one call.API Types According to Architectural Structure:1. Web APIs (HTTP/HTTPS APIs)These are the most common APIs, operating over the internet using HTTP protocols. They come in several varieties:1.1. REST (Representational State Transfer):The most popular type of web API today. REST APIs follow these principles:Stateless: Each request contains all the information neededResource-based: Everything is treated as a resource with a unique URLUses standard HTTP methods (GET, POST, PUT, DELETE)Supports multiple data formats (usually JSON)Example REST API Request in an E-Commerce Web Application:This request fetches all available products from the online store.✅ Request (Client → Server)GET /api/products HTTP/1.1Host: api.ecommerce.comAuthorization: Bearer <User_Token>Content-Type: application/json✅ Response (Server → Client)[    {"id": 1, "name": "iPhone 15", "price": 999.99, "stock": 20},    {"id": 2, "name": "Samsung Galaxy S24", "price": 899.99, "stock": 15}]catalog.html Fetches and Displays Products1️⃣ User Visits catalog.htmlThe user opens the  page in their browser (http://52.90.222.178:5000/catalog.html).The browser  to fetch product data.2️⃣ Frontend (JavaScript) Sends an API RequestJavaScript code in catalog.html makes a GET request to the  /api/products.3️⃣ Backend API (GET /api/products) Fetches DataThe get_all_products() function runs when the frontend calls /api/products.4️⃣ Database Retrieves Product InformationThe backend queries the  in the databaseExample database response:[    {"id": 1, "name": "Laptop", "price": 799.99},    {"id": 2, "name": "Smartphone", "price": 499.99}]5️⃣ Frontend Renders Product Data in catalog.htmlThe JavaScript loops through the  and dynamically  to display products.<div class="product-card">  <h3>Laptop</h3>  <button onclick="addToCart(1)">Add to Cart</button><div class="product-card">  <p>Price: $499.99</p>  <button onclick="addToCart(2)">Add to Cart</button></div>1.2. SOAP (Simple Object Access Protocol):SOAP has strict rules and rigid messaging standards that can make it more secure than protocols such as REST. These types of APIs are frequently used in enterprise applications, particularly for payment processing and customer management, as they are highly safe in nature.A more rigid, protocol-specific API style used in enterprise environments:Highly structured messaging<soap:Envelope>  <soap:Header>    <Authorization>Bearer abc123</Authorization>  </soap:Header>    <GetUser>    </GetUser></soap:Envelope>A modern API query language that gives clients more control:Clients specify precisely what data they needSingle endpoint for all requestsReduces over-fetching and under-fetching of dataFacebook initially developed GraphQL to simplify endpoint management for REST-based APIs. Instead of maintaining multiple endpoints with small amounts of disjointed data, GraphQL provides a single endpoint that inputs complex queries and outputs only as much information as is needed for the query.query {  user(id: "123") {    email      title  }These are programming interfaces provided by software libraries or frameworks:Used directly in your codeNo network requests are neededUsually specific to a programming languageExample using a Python library API:import pandas as pd# Using pandas API to read a CSV filedf = pd.read_csv('data.csv')These allow applications to interact with the operating system:Example using Python’s OS API:import os# Using OS API to create a directoryos.mkdir('new_folder')The foundation of web APIs, using well-defined methods and status codes:PUT: Update existing dataPATCH: Partially update data2xx: Success (e.g., 200 OK)Enables real-time, two-way communication:Ideal for chat apps and live updatesExample WebSocket connection:const ws = new WebSocket('wss://api.example.com/chat');ws.onmessage = (event) => {    console.log('Received:', event.data);};gRPC (Google Remote Procedure Call) is a  framework for inter-service communication in microservices architecture. Unlike REST APIs that use , gRPC uses Protocol Buffers (Protobuf), making it faster and more efficient.Google’s high-performance RPC framework:Excellent for microservicesExample Protocol Buffer definition:📌 How gRPC Works in a Web ApplicationIn an , gRPC can be used for fast communication between microservices.A  must fetch a  from the backend .1️⃣ Defining gRPC Service (product.proto)gRPC services use Protocol Buffers (Protobuf) to define API contracts.GetAllProducts(): Returns a list of products.GetProductById(): Fetches a single product by ID.Product: Defines the product structure.2️⃣ Implementing gRPC Server (product_server.py)The gRPC server implements the service logic.Implements ProductService methods (GetAllProducts, GetProductById).3️⃣ Implementing gRPC Client (product_client.py)The client  to fetch data.Calls GetAllProducts() to fetch all products.Calls GetProductById() to fetch a single product.4️⃣ Running gRPC Server & Client# 1. Generate Python code from Protobufpython -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. product.protopython product_server.pypython product_client.pyProductService gRPC Server is running on port 50051...Product List: products {  name: "Laptop"}  id: 2  price: 499.991. GET: Used to retrieve dataIt is a request used to retrieve data. Never used to delete, update or insert data.Product API in E-Commerce Web Applicationcurl -X GET http://52.90.222.178:5000/api/products[   {"id": 1, "name": "iPhone 15", "price": 999.99},   {"id": 2, "name": "Samsung Galaxy S24", "price": 899.99}]If the API returns JSON, you can format the response using curl -X GET http://52.90.222.178:5000/api/products | jqDebugging & TroubleshootingIf you’re not getting the expected response, check:Is the Flask server running?curl -X GET http://52.90.222.178:5000/api/healthHow the /api/health Endpoint Works in FlaskThe endpoint is a  that provides the current status of the application, including . It helps in monitoring the system and ensuring that the API is .I have configured this /api/health endpoint in my E-Commerce Web Application.@app.route("/api/health", methods=["GET"])def health_check():    uptime = time.time() - start_time    return jsonify({        "uptime": f"{uptime:.2f} seconds",        "session_active": "username" in session    }), 2002. POST: Creates new resourcesThe  method is a request used to insert data. Posted data type — JSON.✅ Authentication EndpointsThis is handled in auth_routes.py, prefixed with /api/auth. → The frontend sends a request to the backend API (POST /api/auth/login). This is handled in auth_routes.py, prefixed with /api/auth.User sends a  with username & password.If credentials are valid:The user session is stored.API returns a success message.3. If credentials are invalid:API returns 3. PUT : Updates existing resourcesPUT method is used to create or update (replace) a resource. Useful for syncing data.Ex: We can add a “Change Password” feature for an existing user using a PUT /api/auth/change-password API endpoint.Steps to Implement “Change Password” APIPUT request with their old and new password.curl -X PUT http://localhost:5000/api/auth/change-password      -H "Content-Type: app     -d '{"old_password": "currentPass123", "new_password": "newPass456"}'2. API verifies the old password:If incorrect, return an error (401 Unauthorized).3. If correct, update the password in the database.4. Save the new password (after hashing it for security).5. Return a success message.{"message": "Password changed successfully"}In an e-commerce application like yours, a PUT method would typically be used in: → PUT /api/auth/update-profileUpdating Product Information (Admin) → PUT /api/products/<product_id> → PUT /api/cart/<cart_id> → PUT /api/orders/<order_id>4. DELETE: Removes resourcesThe DELETE method deletes the specified resource./api/cart API to Remove a Product from the Cart1️⃣ Endpoint Definition (Flask API):@cart_bp.route('/cart', methods=['DELETE'])def remove_from_cart():    Remove a product from the cart for the logged-in user.    Expects JSON payload: { product_id }.    """        user_id = session.get('user_id')            return jsonify({"message": "User not authenticated"}), 401        product_id = data.get('product_id')            return jsonify({"message": "'product_id' is required"}), 400        connection = get_db_connection()        cursor = connection.cursor()        delete_query = "DELETE FROM cart_items WHERE user_id = %s AND product_id = %s"        cursor.execute(delete_query, (user_id, product_id))            return jsonify({"message": "Product not found in cart"}), 404        return jsonify({"message": "Product removed from cart successfully"}), 200        return jsonify({"message": "Failed to remove product from cart", "error": str(e)}), 500        close_db_connection(connection)User sends a DELETE request with the product_id they want to remove.API verifies if the user is logged in (checks session['user_id']). (if missing, returns 400 Bad Request). to remove the product from the cart_items table.If the product does not exist, it returns 404 Not Found., it commits the transaction and returns a success message (200 OK).Handles database errors and ensures the connection is closed.3️⃣ Example API Request & Response:Now User wanted to delete iPhone 15 Pro from the cart:Click the  button under “iPhone 15 Pro”.The item should disappear, and the cart total should update.Run this command in the terminal:curl -X DELETE http://52.90.222.178:5000/api/cart      -H "Content-Type: application/json"      -H "Cookie: session=00068d4c-4b41-4e3e-8884-7389cabbb9b0"     -d '{"product_id": 4}'{    "message": "Product removed from cart successfully"After deletion of that item:5. PATCH: Partially updates resourcesPATCH method is to request used to update data. Only passed data will be updated. You don’t need to provide all the data set.The  method is used to  a resource. Instead of sending the entire data set, we only send the fields that need to be updated.Use Case: Updating a User’s Profile (PATCH /api/auth/update-profile)Imagine a user wants to update  or  without changing their username.1️⃣ PATCH Endpoint: PATCH /api/auth/update-profile2️⃣ Sending a PATCH RequestIf the user wants to update curl -X PATCH http://52.90.222.178:5000/api/auth/update-profile \     -H "Content-Type: application/json" \     -H "Cookie: session=your_valid_session_id" \     -d '{"email": "newemail@example.com"}'🔹 Only the  field will be updated.✅ {    "message": "Profile updated successfully"❌ If no fields are provided:{    "message": "No valid fields provided for update"{    "message": "User not authenticated"4️⃣ Why Use PATCH Instead of PUT?Conclusion: Understanding APIs, Endpoints, and Methods in Web DevelopmentAPIs (Application Programming Interfaces) allow different systems to  with each other. They define how requests and responses are exchanged between a client (browser, app) and a server.An  acts as a bridge between two applications, enabling data exchange.Example: A shopping website uses an API to fetch product details from a database.An  is a URL that clients use to request or send data.Example: GET /api/products retrieves all products. → Uses HTTP methods (GET, POST, PUT, DELETE) to manage data. → Lets clients request specific data fields, reducing unnecessary data transfer. → Uses XML messaging, mainly in enterprise applications. → Maintains a continuous connection for real-time updates (e.g., live chat).Use  (JWT, API Keys, OAuth) to restrict access.Protect sensitive data with .Implement  to prevent abuse.APIs are the backbone of modern applications, enabling data sharing between different services. Developers create smooth and efficient digital experiences by designing well-structured and secure APIs.I’d love to hear what you think about this article — feel free to share your opinions in the comments below (or above, depending on your device!). If you found this helpful or enjoyable, a clap, a comment, or a highlight of your favourite sections would mean a lot.For more insights into the world of technology and data, visit  There’s plenty of exciting content waiting for you to explore!Thank you for reading, and happy learning! 🚀]]></content:encoded></item><item><title>Most Developers Get This Wrong in Docker Networking!</title><link>https://blog.devops.dev/most-developers-get-this-wrong-in-docker-networking-359dbb3eac16?source=rss----33f8b2d9a328---4</link><author>Gaddam.Naveen</author><category>devops</category><pubDate>Thu, 13 Feb 2025 16:50:15 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Jenkins in Kubernetes: Deployment and Persistent Storage(volume) Setup</title><link>https://blog.devops.dev/jenkins-in-kubernetes-deployment-and-persistent-storage-volume-setup-a70fe0579ac8?source=rss----33f8b2d9a328---4</link><author>th@n@n</author><category>devops</category><pubDate>Thu, 13 Feb 2025 16:50:10 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[Jenkins, a popular automation server, becomes even more powerful when deployed in Kubernetes. Ensuring its availability and data persistence is crucial for uninterrupted CI/CD pipelines. In this guide, we’ll walk through deploying Jenkins in Kubernetes, configuring its resources, and setting up persistent storage to safeguard critical data.In this configuration, we have a Deployment resource for deploying Jenkins in Kubernetes, along with associated PersistentVolumeClaim (PVC), PersistentVolume (PV), Service, and StorageClass resources. Let’s break down each partkind: StorageClassapiVersion: storage.k8s.io/v1  name: localstorageprovisioner: kubernetes.io/no-provisionervolumeBindingMode: WaitForFirstConsumerThis StorageClass resource defines storage provisioning and management policies.Since provisioner is set to kubernetes.io/no-provisioner, it indicates that no dynamic provisioning is performed by Kubernetes.volumeBindingMode: WaitForFirstConsumer ensures that volume binding waits for the first Pod using the PersistentVolumeClaim to be created.PersistentVolumeClaim (PVC) Resource:apiVersion: v1kind: PersistentVolumeClaim  name: pvc-jenkinsspec:  storageClassName: localstorage  accessModes:  resources:      storage: 2GiThis PVC resource requests storage from a PersistentVolume using the localstorage StorageClass.It requests 2Gi of storage with access mode ReadWriteOnce, meaning it can be mounted as read-write by a single node.PersistentVolume (PV) Resource:apiVersion: v1kind: PersistentVolume  name: pv-jenkins    type: local  claimRef:    namespace: jenkins    storage: 3Gi    - ReadWriteOnce    path: /mnt  storageClassName: localstorageThis PV resource represents the actual storage volume available for use by the PVC.It is bound to the PVC pvc-jenkins within the jenkins namespace.The PV has a capacity of 3Gi and is accessible in ReadWriteOnce mode.The storage is provided by a hostPath /mnt on the host machine, with storage class localstorage.apiVersion: apps/v1kind: Deployment  name: jenkins-deployment    name: jenkinsspec:    matchLabels:  replicas: 1    metadata:      labels:    spec:        - name: deployment-jenkins          image: jenkins/jenkins:lts          resources:              memory: "0.5Gi"            requests:              cpu: "125m"            - name: http-port            - name: jnlp-port          livenessProbe:              path: "/login"            initialDelaySeconds: 60            timeoutSeconds: 5          readinessProbe:              path: "/login"            initialDelaySeconds: 60            timeoutSeconds: 5          volumeMounts:              mountPath: /var/jenkins_home        - name: data-jenkins            claimName: pvc-jenkins        runAsUser: 0        fsGroup: 0This Deployment resource defines how Jenkins is deployed.It specifies a single replica (replicas: 1) of the Jenkins container.The container is based on the jenkins/jenkins:lts image.Resource limits and requests for CPU and memory are set to ensure resource allocation.Ports 8080 and 50000 are exposed for HTTP and JNLP respectively.Liveness and readiness probes are configured to check the health of the container.The Jenkins home directory (/var/jenkins_home) is mounted to a PersistentVolumeClaim (pvc-jenkins) named data-jenkins.SecurityContext ensures that Jenkins runs with the appropriate user and group permissions. securityContext:        runAsUser: 0        fsGroup: 0When you deploy this deployment instance in kubernetes cluster, make sure the user have the right privileges to read and write the host volume For this demo purpose, I am using the root user to do this task, but this is not encouraged to do in real environment.apiVersion: v1kind: Service  name: jenkins-servicespec:    app: jenkins-pod  ports:      port: 8080      nodePort: 32000This Service resource exposes the Jenkins deployment internally within the jenkins namespace.It selects pods with the label app: jenkins-pod.The service type is NodePort, making the service accessible from outside the cluster on each node's IP at a static port (nodePort: 32000).Port 8080 is mapped to the targetPort 8080 where Jenkins is listening.Once you execute all the manifiest file in kubernetes cluster.Check the host volume path ls -al /mntExecute the below command to see the whether the same files are present in the jenkins containerkubectl exec -it POD_NAME /bin/bash -n jenkinsls -al /var/jenkins_homeThis configuration sets up Jenkins deployment in Kubernetes with persistence using a PersistentVolume and PersistentVolumeClaim. It ensures that Jenkins data stored in /var/jenkins_home persists across container restarts and pod rescheduling. Additionally, the Service resource exposes Jenkins for external access within the Kubernetes cluster.For now, that’s it guys, If you like this article don’t forget to give a clap. 👏]]></content:encoded></item><item><title>How to Build and Deploy a Simple Frontend App with Python Backend</title><link>https://blog.devops.dev/how-to-build-and-deploy-a-simple-frontend-app-with-python-backend-108b505be2be?source=rss----33f8b2d9a328---4</link><author>krth1k</author><category>devops</category><pubDate>Thu, 13 Feb 2025 16:50:06 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[Building a full-stack web application might seem daunting, especially if you’re primarily a backend developer. However, with the right approach, you can create a simple frontend and connect it to a Python backend with ease.In this guide, we’ll walk through the process of:Setting up a basic Python backend with FlaskCreating a simple frontend with HTML, CSS, and JavaScriptConnecting the frontend to the backend using REST APIDeploying the app on a local Kubernetes cluster1. Setting Up the Python BackendWe’ll use , a lightweight Python web framework, to create a REST API that serves data to the frontend.Ensure you have Python installed, then install Flask:Create a new file called app.py:from flask import Flask, jsonify@app.route('/api/message')def get_message():    return jsonify({"message": "Hello from the Python backend!"})if __name__ == '__main__':    app.run(host='0.0.0.0', port=5000, debug=True)This API exposes a single endpoint /api/message that returns a JSON response.For the frontend, we’ll use HTML, CSS, and JavaScript to display the data from our backend.Create an HTML File (index.html)<!DOCTYPE html><html lang="en">    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Frontend App</title>        body {            font-family: Arial, sans-serif;            text-align: center;        }            padding: 10px 20px;        }</head>    <h1>Simple Frontend App</h1>    <button onclick="fetchMessage()">Get Message</button>    <p id="message"></p>        function fetchMessage() {            fetch('http://127.0.0.1:5000/api/message')                .then(response => response.json())                    document.getElementById("message").innerText = data.message;                .catch(error => console.error('Error:', error));    </script></html>This page has a button that fetches and displays a message from the Flask backend.3. Connecting the Frontend to the BackendNow, let’s serve the frontend using  itself so that both frontend and backend are accessible from the same origin.Update app.py to Serve HTMLModify app.py to serve the index.html file:from flask import Flask, jsonify, send_from_directoryapp = Flask(__name__, static_folder='static')@app.route('/api/message')def get_message():    return jsonify({"message": "Hello from the Python backend!"})@app.route('/')def serve_frontend():    return send_from_directory('static', 'index.html')if __name__ == '__main__':    app.run(host='0.0.0.0', port=5000, debug=True)Move index.html to a static FolderYour project structure should now look like this:/project-folder│-- app.py│   └── index.htmlNow, visit http://127.0.0.1:5000/ in your browser, and your frontend will be served!Now, let’s deploy this app using .# Use Python base imageFROM python:3.9# Set the working directoryWORKDIR /app# Copy application filesCOPY . .# Install dependenciesRUN pip install flask# Expose port 5000EXPOSE 5000# Run the appCMD ["python", "app.py"]Build and Run the Docker Containerdocker build -t myapp .docker run -p 5000:5000 myappCreate a Kubernetes Deployment YAML (apiVersion: apps/v1kind: Deployment  name: myapp  replicas: 1    matchLabels:  template:      labels:    spec:        - name: myapp          ports:---kind: Service  name: myapp-service  selector:  ports:      port: 80  type: NodePortkubectl apply -f deployment.yamlminikube service myapp-service --urlVisit the displayed URL in your browser!In this tutorial, we covered: ✅ Creating a Flask backend ✅ Building a simple HTML/JavaScript frontend ✅ Connecting the frontend to the backend ✅ Deploying the app with Docker and KubernetesThis is a basic example, but you can expand it by:Adding user authenticationUsing React or Vue.js for a modern frontendStoring and retrieving data from a databaseIf you found this helpful, let me know in the comments! 🚀]]></content:encoded></item><item><title>Best Practices For Database Authorization In Multi-Tenant Systems</title><link>https://blog.devops.dev/best-practices-for-database-authorization-in-multi-tenant-systems-001a1bcf2568?source=rss----33f8b2d9a328---4</link><author>Noel</author><category>devops</category><pubDate>Thu, 13 Feb 2025 16:49:43 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[Multi-tenant databases allow multiple companies or organizations (tenants) to securely share the same database infrastructure while ensuring data isolation and integrity. However, this shared structure introduces complexities in managing access and authorization. A robust authorization strategy is essential to ensure that users can only access resources belonging to their tenant without compromising scalability or performance.This article explores the best practices and technical solutions that we adopt at Xinthe, for implementing efficient authorization mechanisms in multi-tenant systems, with a focus on nested resource structures, such as companies, clients, projects, and tasks. After having read this entire article, you will be armed with actionable insights to build secure, efficient, and future-proof authorization strategies for multi-tenant applications.Understanding Multi-Tenant Database AuthorizationDefinition Of Multi-TenancyMulti-tenancy refers to an architectural pattern where a single instance of a software application and its database serves multiple tenants (e.g., companies, organizations, or users). Each tenant’s data remains logically isolated, ensuring that no tenant can access another’s data, while sharing underlying resources for efficiency.Key Multi-Tenancy Models:Each tenant has a dedicated database or schema.Offers strong isolation and security.Higher costs and maintenance complexity due to multiple instances.Multiple tenants share the same database.Logical separation is maintained through identifiers (e.g., tenant_id or company_id).Cost-effective and scalable but requires robust authorization mechanisms.Challenges Of AuthorizationImplementing authorization in multi-tenant systems is a non-trivial task, especially as the scale and complexity of resources grow. Common challenges include -Cross-Tenant Data Leakage:Risk: Improper queries or configurations can expose data to unauthorized tenants.Example: A user from Company A inadvertently accessing tasks belonging to Company B due to a missing or incorrect WHERE clause.Deeply nested resource structures often require joins across multiple tables.Queries with extensive joins can degrade performance as data volume increases.Scalability & Maintainability:The need to balance fast access controls with a maintainable schema.Adding new authorization rules or resource types without overhauling the system.Data Localization & Compliance:For multi-tenant systems spanning regions, ensuring that tenant data complies with regulations like GDPR can complicate authorization logic.Importance Of Nested Resource StructuresIn many applications, resources are interconnected in a hierarchical fashion. Consider the following nested structure -Company → Client → Project → TaskA  has multiple .Each  manages several .Each  contains multiple .Why Nested Structures Matter:Access Control Complexity: Permissions must flow through the hierarchy (e.g., a user’s access to a task must be verified against their company). Hierarchical access often necessitates multiple joins, impacting query efficiency. Hierarchical structures reflect real-world use cases like SaaS platforms, where users must operate within their organization’s boundaries.A user from Company A should only edit tasks within their projects. Authorization must ensure that the task → project → client → company linkage is maintained without exposing data from Company B.Comparing Authorization ApproachesWhen implementing authorization in a multi-tenant database, there are three common strategies to choose from: the , the , and Tenant-Specific Databases or Tables. Each comes with its own set of benefits and trade-offs. Let’s break them down -1. Flat Model (Adding Tenant IDs)In this approach, a tenant_id or company_id is added to every resource table (e.g., tasks, projects, clients), enabling direct filtering for authorization. Queries can directly filter by tenant_id without traversing the hierarchy.SELECT * FROM tasks WHERE tenant_id = :tenant_id AND id = :task_id; Reduces query complexity by avoiding multiple table joins to enforce access. Straightforward implementation makes it easy to debug and maintain. tenant_id is replicated across multiple tables, introducing redundancy. Adding tenant_id and other metadata can lead to bloated schemas, especially as the number of attributes grows. Schema updates (e.g., adding new relationships) might require extensive changes across multiple tables.Ideal for systems where performance is critical and the schema is relatively stable, such as SaaS platforms with many small tenants.2. Hierarchical Model (Enforcing Relationships)In this approach, the relationships between resources (e.g., task → project → client → company) are strictly enforced through foreign keys. Authorization is achieved by traversing the hierarchy. Avoids redundant fields by relying on inherent relationships.CREATE TABLE tasks (    id SERIAL PRIMARY KEY,    project_id INT REFERENCES projects(id),    ...    id SERIAL PRIMARY KEY,    client_id INT REFERENCES clients(id),    ...    id SERIAL PRIMARY KEY,    company_id INT REFERENCES companies(id),    ... Reduces duplication of metadata like tenant_id.Relationship-Centric Queries: Makes it easier to enforce hierarchical constraints and maintain referential integrity. Queries require multiple joins to verify access, which can impact performance.SELECT t.*FROM tasks tJOIN projects p ON t.project_id = p.idJOIN clients c ON p.client_id = c.idWHERE c.company_id = :tenant_id AND t.id = :task_id; Deep hierarchies with large datasets can significantly increase query execution time. As the hierarchy grows, maintaining performance becomes challenging.Suitable for applications where maintaining strict relationships between resources is essential, such as ERP systems or large enterprise applications.3. Tenant-Specific Databases Or TablesThis approach creates separate databases or tables for each tenant, isolating their data entirely. Each tenant’s data can be managed independently, making it easier to scale horizontally by distributing databases across servers. Ensures complete data isolation, reducing the risk of cross-tenant data leakage. Simplifies adherence to regulations like GDPR by enabling tenant-specific backups, retention policies, and deletions. Managing multiple databases or schemas requires sophisticated deployment and CI/CD pipelines. Schema updates need to be applied consistently across all tenant databases. For tenants with small datasets, the resource consumption of separate databases might be inefficient.Best for large organizations with high regulatory or security requirements, or when dealing with tenants that require dedicated resources (e.g., enterprise customers).Summary Table — Comparing ApproachesCriteria For Choosing An Authorization ModelSelecting the right authorization model for a multi-tenant database is critical for ensuring scalability, performance, and compliance. The decision hinges on a combination of technical, regulatory, and operational factors. Below are the primary criteria to consider -The level of traffic and query complexity your application handles directly impacts the choice of an authorization model.High-Traffic Applications:Benefit from simpler and faster queries, such as those enabled by the .SELECT * FROM tasks WHERE tenant_id = :tenant_id AND id = :task_id;Minimal joins mean lower query latency, ensuring the system performs well under heavy loads.Suitable for SaaS platforms or e-commerce systems with a high volume of tenant interactions.:Can afford the  with more joins, as performance trade-offs are less significant.Allows for cleaner schema designs and strict relational integrity.Suitable for internal enterprise tools or smaller-scale applications.2. Regulatory RequirementsCompliance with data protection and privacy regulations often dictates how data is stored and accessed.Using Tenant-Specific Databases or Tables simplifies compliance for regulations like GDPR or HIPAA.Tenant isolation reduces the risk of data leakage and ensures tenant-specific data retention and deletion policies.An enterprise customer requires dedicated storage with separate backups and audit logs.A  can still meet compliance needs with appropriate access controls and audit mechanisms.Challenges arise in managing and enforcing tenant-specific data governance policies within shared infrastructure.The ability to handle growth in the number of tenants and data volumes is a critical factor.Planning For Tenant Growth:For a rapidly scaling user base, Tenant-Specific Databases or Tables provide the most flexibility -Each tenant can be distributed across servers to balance load.Tenant databases can be independently scaled based on specific needs.A B2B SaaS platform serving both small businesses and large enterprises can allocate resources dynamically based on tenant size.The  can handle larger datasets more efficiently as indexes on tenant_id make filtering faster.The  may struggle as table sizes grow, requiring optimization for complex joins.Ease of schema management and updates is essential for long-term maintainability.Simplified Schema Updates:The  simplifies schema updates by centralizing data attributes like tenant_id.However, redundant fields may increase the risk of errors during updates.The  enforces relational integrity, ensuring data consistency.Complex queries for nested structures may require more effort to maintain and optimize.Automated CI/CD Pipelines:For Tenant-Specific Databases, CI/CD automation becomes critical to manage schema changes across multiple databases.Tools like Octopus Deploy or Liquibase can help automate schema migrations and ensure consistency.Key Considerations SummaryDesigning Authorization Strategies For Multi-TenancyDesigning robust authorization strategies for multi-tenant systems requires careful consideration of schema design, indexing, and data partitioning to ensure scalability, security, and performance. This section outlines best practices for implementing these strategies effectively.The foundation of a successful multi-tenant authorization system lies in a well-thought-out schema.Add a tenant_id column to all relevant tables (e.g., clients, projects, tasks) for direct tenant filtering.CREATE TABLE tasks (    id BIGINT PRIMARY KEY,    tenant_id BIGINT NOT NULL,    project_id BIGINT NOT NULL,    status VARCHAR(20),    FOREIGN KEY (project_id) REFERENCES projects(id));Ensure tenant_id is a mandatory field in all write operations to enforce multi-tenancy constraints.Defining Relationships In Hierarchical Structures:Maintain strict referential integrity between hierarchical entities.Example for hierarchical relationships -CREATE TABLE projects (    id BIGINT PRIMARY KEY,    tenant_id BIGINT NOT NULL,    client_id BIGINT NOT NULL,    FOREIGN KEY (client_id) REFERENCES clients(id)Flat schema enables quick lookups for tenant-specific data.Hierarchical relationships ensure data consistency and logical separation.2. Indexing Best PracticesIndexes are essential for optimizing queries in multi-tenant systems. However, improper indexing can lead to inefficiencies.Compound Indexes For Tenant-Specific Queries:Use composite indexes combining tenant_id with frequently queried columns.CREATE INDEX idx_tasks_tenant_projectON tasks (tenant_id, project_id, status);This enables efficient filtering and sorting within a tenant’s scope.Balancing Indexing Depth & Query Speed:Avoid over-indexing, which can slow down write operations.Prioritize indexing columns involved in filtering, joining, and sorting operations.Regularly analyze query performance using tools like  in PostgreSQL or  in MySQL.Partitioning improves scalability by dividing data into smaller, more manageable segments, reducing query times for tenant-specific operations.Horizontal Partitioning By Tenants:Partition data within a single database based on tenant_id.CREATE TABLE tasks_1 PARTITION OF tasksFOR VALUES IN (1); -- Partition for tenant_id 1Faster tenant-specific queries as partitions reduce the search space.Simplifies maintenance for large datasets.Database Sharding For High-Scale Systems:Distribute tenant data across multiple databases (shards).Example Sharding Strategy -Use tenant_id % shard_count to assign tenants to shards.Tools like  or  can manage sharding in distributed database systems.Eliminates contention in single-database systems.Enhances fault isolation and scalability.Example Use Case — Applying These StrategiesAn application manages 100,000 tenants, each with thousands of projects and tasks.Add tenant_id to all tables.Use foreign keys to link tasks → projects → clients.Create a compound index on tasks (tenant_id, project_id) for common queries like -SELECT * FROM tasks WHERE tenant_id = 123 AND project_id = 456;For smaller tenants, use horizontal partitioning -CREATE TABLE tasks_tenant_123 PARTITION OF tasks FOR VALUES IN (123);For larger tenants, shard data across multiple databases to scale.A well-designed schema with tenant_id simplifies multi-tenant data filtering.Proper indexing ensures efficient queries, even at scale.Partitioning and sharding prepare the system for growth, reducing query times and enhancing reliability.This section provides concrete examples of implementing different authorization models for multi-tenant systems, including schemas, queries, and tooling. Each approach demonstrates how to enforce tenant-specific access effectively.1. Flat Model ImplementationThe flat model relies on adding a tenant_id column to all relevant tables, ensuring that queries are scoped to the tenant directly.CREATE TABLE tasks (    id BIGINT PRIMARY KEY,    tenant_id BIGINT NOT NULL,    project_id BIGINT NOT NULL,    status VARCHAR(20),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (project_id) REFERENCES projects(id)    id BIGINT PRIMARY KEY,    tenant_id BIGINT NOT NULL,    client_id BIGINT NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (client_id) REFERENCES clients(id));: Access tasks for a user’s company -SELECT * FROM tasks WHERE tenant_id = 123 AND status = 'in_progress';Simplifies authorization logic with direct lookups.Reduces query complexity by avoiding joins.Potential schema bloat with additional tenant_id columns.2. Hierarchical Model ImplementationIn this model, tenant authorization is enforced by traversing relationships between resources (e.g., Company → Client → Project → Task).CREATE TABLE companies (    id BIGINT PRIMARY KEY,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP    id BIGINT PRIMARY KEY,    company_id BIGINT NOT NULL,    name VARCHAR(255),    FOREIGN KEY (company_id) REFERENCES companies(id));    id BIGINT PRIMARY KEY,    client_id BIGINT NOT NULL,    name VARCHAR(255),    FOREIGN KEY (client_id) REFERENCES clients(id));    id BIGINT PRIMARY KEY,    project_id BIGINT NOT NULL,    description TEXT,    FOREIGN KEY (project_id) REFERENCES projects(id): Check task access by traversing relationships -SELECT t.* FROM tasks tINNER JOIN projects p ON t.project_id = p.idINNER JOIN clients c ON p.client_id = c.idINNER JOIN companies co ON c.company_id = co.idWHERE co.id = 123 AND t.status = 'in_progress';Maintains normalized relationships.Avoids redundant tenant_id columns.Complex joins increase query costs.Requires optimized indexes to maintain performance.3. Tenant-Specific Database/Table ImplementationFor scenarios requiring strict isolation, separate databases or tables for each tenant can be used.Create a separate database or schema for each tenant -CREATE DATABASE company_123;CREATE TABLE company_123.tasks (    project_id BIGINT NOT NULL,    status VARCHAR(20),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);: Access tasks for a specific tenant -USE company_123;SELECT * WHERE status = 'in_progress';: Use CI/CD tools like  to manage multi-tenant databases:Automate schema changes across databases.Track versioning for each tenant’s database.Complete tenant isolation for security and compliance (e.g., GDPR).Simplifies data archival and backup for individual tenants.Deployment complexity increases with the number of tenants.Resource-intensive for systems with many small tenants.Choosing The Right ImplementationUse the flat model for simplicity in high-traffic environments.Use the hierarchical model when data relationships must be preserved and redundancy minimized.Opt for tenant-specific databases for strict isolation and compliance requirements.Each implementation can be tailored based on application needs, tenant size, and regulatory requirements. Balancing performance, scalability, and maintainability is key to successful multi-tenant authorization systems.Security Best Practices For AuthorizationEnsuring robust security in multi-tenant systems is essential to prevent data breaches, maintain compliance, and build user trust. This section outlines key practices for implementing secure and reliable authorization mechanisms.1. Strict Access ControlsImplementing strong access controls ensures that only authorized users can access or modify resources.Role-Based Access Control (RBAC):Assign roles (e.g., Admin, Manager, User) to users based on their responsibilities.Enforce role-specific permissions at the application and database layers.Example: Use database roles to restrict access to tenant-specific tables.CREATE ROLE company_admin;GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO company_admin;REVOKE ALL ON ALL TABLES FROM PUBLIC; -- Restrict public access:Enforce tenant-level data segregation directly at the database layer.RLS ensures that queries automatically filter data based on the user’s tenant.PostgreSQL Example For RLS:CREATE POLICY tenant_policyON tasksUSING (tenant_id = current_setting('app.current_tenant')::BIGINT);ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;SET app.current_tenant = '123'; -- Simulate tenant contextSELECT * FROM tasks; -- Only tasks with tenant_id = 123 will be visible2. Preventing Cross-Tenant Data LeaksPreventing accidental or intentional cross-tenant data leaks is critical in multi-tenant architectures.Multi-Layer Access Checks:Enforce tenant isolation at both the database and application layers.Validate all queries to ensure they are scoped to the user’s tenant.Always include a tenant_id check in database queries.Use database views or abstractions to simplify tenant-specific filtering.Application-Layer Validation:Add additional validation at the application level as a guardrail.Ensure that APIs restrict data access to the authenticated tenant context.def get_user_tasks(user):    if user.tenant_id != request.tenant_id:        raise PermissionDenied("Cross-tenant access is not allowed.")    return db.query(Tasks).filter(Tasks.tenant_id == user.tenant_id).all()Audit logs are essential for monitoring, compliance, and debugging. They provide visibility into access patterns and help detect unauthorized access attempts.User ID and tenant ID for all queries.Access attempts (successful and failed).Data modification operations (insert, update, delete).Timestamps and IP addresses for requests.SQL Example For Logging Queries:CREATE TABLE audit_logs (    id SERIAL PRIMARY KEY,    tenant_id BIGINT,    table_name VARCHAR(255),    executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMPINSERT INTO audit_logs (user_id, tenant_id, action, table_name, query)VALUES (123, 456, 'SELECT', 'tasks', 'SELECT * FROM tasks WHERE tenant_id = 456');Integrating Logging Tools:Use database triggers to log operations automatically.Combine with external tools like  (Elasticsearch, Logstash, Kibana) or  for advanced monitoring.CREATE OR REPLACE FUNCTION log_task_changes()RETURNS TRIGGER AS $$    INSERT INTO audit_logs (user_id, tenant_id, action, table_name, query)    VALUES (current_user_id(), NEW.tenant_id, TG_OP, TG_TABLE_NAME, current_query());    RETURN NEW;$$ LANGUAGE plpgsql;CREATE TRIGGER audit_task_changesAFTER INSERT OR UPDATE OR DELETE ON tasksFOR EACH ROW EXECUTE FUNCTION log_task_changes();Combine RBAC, RLS, and application-level validation for comprehensive protection.Use multi-layered access checks and robust query scoping to ensure tenant isolation.Maintain detailed audit logs to track access and modifications for accountability and compliance.These practices create a secure foundation for multi-tenant authorization systems, ensuring that each tenant’s data is isolated, protected, and auditable.Designing a robust multi-tenant authorization system involves navigating a set of challenges and trade-offs. Each approach has its own set of complexities that must be carefully managed to ensure scalability, performance, and maintainability.1. Balancing Performance & FlexibilityChoosing between speed and schema cleanliness can significantly impact your database design and performance.Prioritizing Performance (Flat Model):Direct lookups using a tenant_id column ensure fast query execution.Reduced join complexity leads to quicker response times.: May result in data redundancy (e.g., repeating tenant IDs across multiple tables).SQL Example For Optimized Query:SELECT * FROM tasks WHERE tenant_id = 123 AND status = 'pending';Prioritizing Schema Cleanliness (Hierarchical Model):Using a normalized schema ensures a clean and consistent database structure.: Requires more complex joins and increased query times, especially for deeply nested relationships.Hierarchical Query Example:SELECT tasks.*FROM tasksJOIN projects ON tasks.project_id = projects.idJOIN clients ON projects.client_id = clients.idWHERE clients.tenant_id = 123;Managing tenant-specific setups adds complexity, particularly as the number of tenants grows.Tenant-Specific Databases:Each tenant has its own database, simplifying compliance and data isolation.: Maintaining consistency across databases for schema changes.: Use automation tools like  or  to manage schema migrations across tenants.# Liquibase command to apply migrations to multiple tenant databasesliquibase --url="jdbc:mysql://db_host/tenant1" updateliquibase --url="jdbc:mysql://db_host/tenant2" updateSingle Multi-Tenant Database:Shared schema reduces maintenance but requires more sophisticated query scoping and indexing.: Tracking and isolating tenant data effectively without introducing query overhead.3. Handling Schema Updates In Multi-Tenant DatabasesEnsuring all tenants have consistent schemas while minimizing downtime is one of the most significant challenges in multi-tenant systems.Use versioned migrations to apply incremental updates across all tenants.Maintain backward compatibility to prevent disruptions during updates.CREATE TABLE schema_versions (    tenant_id BIGINT,    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMPApply updates to a subset of tenants, validate, and then roll out to the rest.Use feature flags to selectively enable new schema features.Code Example For Rolling Updates:tenants = get_tenant_list()for tenant in tenants:    apply_schema_update(tenant_id=tenant.id)Testing & CI/CD For Multi-Tenant Systems:Test migrations on a staging environment with realistic tenant data before deploying.Use CI/CD tools like  to automate and track updates across tenant databases.Performance Vs. Flexibility:Use a flat model for high-speed queries or hierarchical models for cleaner schemas but expect performance trade-offs.Tenant-specific databases simplify compliance but require robust automation for schema management.Implement version control and rolling updates to ensure seamless schema changes across all tenants.Addressing these challenges with well-defined strategies ensures a scalable and maintainable multi-tenant authorization system, capable of adapting to evolving application needs.Real-world applications of multi-tenant database authorization vary depending on the complexity of the resource structure, performance requirements, and compliance needs. Below are three illustrative scenarios demonstrating how different authorization models can be applied effectively.Scenario 1 — Flat Model For A SaaS CRM AppA SaaS customer relationship management (CRM) application needs to store and manage customer interactions for multiple companies, ensuring users can only access data associated with their organization.: Each company has its own sales team, and users need quick access to customer records and sales data.: Use a flat model by adding tenant_id to every table, such as customers, leads, and sales.CREATE TABLE customers (    id BIGINT AUTO_INCREMENT PRIMARY KEY,    tenant_id BIGINT NOT NULL,    name VARCHAR(255),    phone VARCHAR(20),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);    id BIGINT AUTO_INCREMENT PRIMARY KEY,    tenant_id BIGINT NOT NULL,    customer_id BIGINT,    status VARCHAR(50),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);SELECT * FROM customers Simple queries without joins for tenant-specific data.High performance due to direct lookups.Wider tables due to the inclusion of tenant_id.Potential redundancy if relationships between entities are not properly normalized.Scenario 2 — Hierarchical Model For A Project Management ToolA project management tool with a nested structure: Company → Client → Project → Task. Users need to manage projects while maintaining strict access control based on their organization.: Each company has multiple clients, each with its own projects and tasks. Users must only access tasks related to their company.: Use a hierarchical model to enforce relationships and control access through joins.CREATE TABLE companies (    id BIGINT AUTO_INCREMENT PRIMARY KEY,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP    id BIGINT AUTO_INCREMENT PRIMARY KEY,    company_id BIGINT NOT NULL,    name VARCHAR(255),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);    id BIGINT AUTO_INCREMENT PRIMARY KEY,    client_id BIGINT NOT NULL,    name VARCHAR(255),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);    id BIGINT AUTO_INCREMENT PRIMARY KEY,    project_id BIGINT NOT NULL,    description TEXT,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMPSELECT tasks.*FROM tasksJOIN projects ON tasks.project_id = projects.idJOIN clients ON projects.client_id = clients.idWHERE clients.company_id = 123;Clean, normalized schema without redundant data.Access naturally follows the hierarchy.Complex queries due to multi-level joins.Slower query performance for deep hierarchies.Scenario 3 — Single-Tenant Databases For An Enterprise AppAn enterprise application handles sensitive data, requiring strict data isolation for compliance with GDPR and HIPAA regulations.: Each tenant’s data must be completely isolated to ensure compliance and scalability.: Use a single-tenant database model where each company has its own dedicated database.Database Names:  tenant_1_db  tenant_3_db: Use  to manage database updates across multiple tenants.deploy:  steps:    - name: Update Tenant Databases      script: |        for db in $(list_databases); do          apply_migrations $dbComplete isolation ensures compliance with regulatory requirements.Scalability: Large tenants can have dedicated resources (e.g., separate hardware).Higher operational complexity in managing multiple databases.Requires robust CI/CD pipelines for schema updates.Each use case demonstrates how careful consideration of application requirements, data relationships, and compliance needs can guide the choice of the best authorization model for a multi-tenant database.Efficient, scalable, and secure authorization in multi-tenant databases as we’ve found often at Xinthe, requires a well-thought-out approach tailored to the application’s needs.Authorization in multi-tenant databases isn’t a one-size-fits-all challenge. Developers and database architects must carefully evaluate their application’s structure, expected growth, and regulatory needs to select the most effective approach. Armed with the insights and strategies outlined in this article, you can design multi-tenant database systems that are secure, scalable, and efficient, ensuring both developer productivity and a seamless user experience.]]></content:encoded></item><item><title>Docker, Kubernetes, and NATS — The Backbone of Cloud-Native Apps</title><link>https://blog.devops.dev/docker-kubernetes-and-nats-the-backbone-of-cloud-native-apps-af724f41c17d?source=rss----33f8b2d9a328---4</link><author>Cristhian Ferrufino</author><category>devops</category><pubDate>Thu, 13 Feb 2025 16:48:09 +0000</pubDate><source url="https://blog.devops.dev/?source=rss----33f8b2d9a328---4">Devops.dev blog</source><content:encoded><![CDATA[Docker, Kubernetes, and NATS — The Backbone of Cloud-Native AppsWelcome back to the ! In the last article, we explored the world of message brokers and why NATS is a standout choice for modern microservices. Now, it’s time to dive into the backbone of cloud-native applications:  and . If microservices are the chefs in our restaurant analogy, containers are the kitchen tools that keep everything running smoothly. And Kubernetes? That’s the head chef, making sure everyone works in harmony.In this article, we’ll break down  and , explore how they work together, and even touch on how  fits into the mix. By the end, you’ll have a solid understanding of how to containerize your applications and orchestrate them like a pro. Let’s get cooking!What Is Containerization, and Why Is It Important?Imagine you’re shipping a fragile package across the world. You’d want to pack it in a sturdy container, right? That’s exactly what containerization does for your applications. It packages your app and all its dependencies (libraries, frameworks, etc.) into a lightweight, portable unit called a . This ensures that your app runs consistently across different environments — whether it’s your laptop, a testing server, or a production cluster.Why developers love containers:✅ : “Works on my machine” becomes “Works everywhere.”✅ : No more dependency hell — each app lives in its own bubble.✅ : Deploy to AWS, Azure, or your grandma’s PC (if she’s cool with Kubernetes).✅ : 10x lighter than VMs. Think EVs vs. a gas-guzzling truckIntroduction to Docker: Building, Running, and Managing ContainersDocker is the most popular tool for containerization, and for good reason. It’s simple, powerful, and widely supported. Let’s break it down:To create a container, you start with a  — a text file that defines the steps to build your app’s environment. Here’s a simple example:# Use a lightweight Python image (because nobody likes bloat)FROM python:3.9-slim# Set the stage for your appWORKDIR /app# Install dependencies (Pro tip: Skip the cache to shrink your image)COPY requirements.txt .RUN pip install --no-cache-dir -r requirements.txt# Copy the rest of the codeCOPY . .# Open the app’s “front door”EXPOSE 8080CMD ["python", "app.py"]With this Dockerfile, you can build a container image using the `` command:🚀 Run this: docker build -t my-python-app .Once you’ve built your image, you can run it as a container:🎯 Pro tip: Map ports like a pirate mapping treasure.  docker run -p 8080:8080 my-python-appThis command starts your app and maps port 8080 on your host to port 8080 in the container. Easy, right?Docker also provides tools to manage your containers:: List running containers.docker logs <container_id>: View logs for a specific containerdocker stop <container_id>: Stop a running container.Docker vs. Podman: A Detailed ComparisonWhile Docker is the most popular containerization tool, it’s not the only one.  is a rising star in the container world, and it’s worth understanding how it compares to Docker.+----------------------+-------------------------------------+-----------------------------------+| Feature              | Docker 🐳                           | Podman 📦                         |+----------------------+-------------------------------------+-----------------------------------+| Daemon Requirement   | Requires a daemon (dockerd)         | Daemonless (runs containers       ||                      |                                     | directly)                         |+----------------------+-------------------------------------+-----------------------------------+| Root vs. Rootless    | Runs as root by default              | Supports rootless containers out  ||                      |                                     | of the box                        |+----------------------+-------------------------------------+-----------------------------------+| Compatibility        | Uses Docker CLI and Dockerfiles     | Fully compatible with Docker CLI  ||                      |                                     | and Dockerfiles                   |+----------------------+-------------------------------------+-----------------------------------+| Security             | Requires root privileges, which can | Rootless mode reduces attack      ||                      | be a security risk                  | surface                           |+----------------------+-------------------------------------+-----------------------------------+| Orchestration        | Requires Docker Swarm for           | Integrates with Kubernetes        ||                      | orchestration                       | natively                          |+----------------------+-------------------------------------+-----------------------------------+| Community Support    | Larger community and ecosystem      | Growing community, backed by Red  ||                      |                                     | Hat                               |+----------------------+-------------------------------------+-----------------------------------+You need a mature, widely supported tool with a large ecosystem.You’re already using Docker Swarm for orchestration.You’re okay with running containers as root.You want a daemonless, more secure alternative to Docker.You’re working in environments where root privileges are restricted.You’re already using Kubernetes and want tighter integration.Both tools are excellent choices, so pick the one that best fits your needs.Kubernetes Overview: Orchestration, Scaling, and Self-HealingWhile Docker is great for running containers, managing them at scale can get tricky. Enter  (or K8s for short), the de facto standard for container orchestration. Think of Kubernetes as the conductor of an orchestra — it ensures all your containers play in harmony.Key Features of Kubernetes: Automates deployment, scaling, and management of containers.: Automatically adjusts the number of running containers based on demand.: Restarts failed containers and replaces unhealthy ones.: Automatically assigns IP addresses and DNS names to containers.Kubernetes organizes containers into , which are the smallest deployable units. A pod can contain one or more containers that share resources like storage and networking. Here’s a simple Kubernetes deployment file:apiVersion: apps/v1kind: Deployment  name: my-python-app  replicas: 3    matchLabels:  template:      labels:    spec:      - name: my-python-app        image: my-python-app:latest        ports:his file tells Kubernetes to run three replicas of your app and expose it on port 8080. You can apply it using:🔥 Run this: kubectl apply -f deployment.yamlHow NATS Shines in a Kubernetes EnvironmentNow, let’s talk about . As a lightweight, high-performance messaging system, NATS plays well with Kubernetes. Here’s how it stands out:Use Cases for NATS in KubernetesService-to-Service Communication: NATS excels at enabling fast, reliable communication between microservices. Its lightweight design makes it perfect for Kubernetes’ dynamic environment.Event-Driven Architectures: NATS’s pub/sub, request-reply or streams patterns make it ideal for event-driven systems, where services need to react to events in real time.Scalability: NATS can handle millions of messages per second, making it a great fit for high-throughput applications running on Kubernetes.Resilience: NATS’s built-in fault tolerance ensures that your messaging system remains reliable, even in the face of node failures.Deploying NATS on KubernetesDeploying NATS on Kubernetes is straightforward. Here’s a basic NATS deployment file:apiVersion: apps/v1kind: Deployment  name: nats  replicas: 1    matchLabels:  template:      labels:    spec:      - name: nats        ports:        - containerPort: 4222 # The messaging highway 🛣️Once deployed, NATS can be used by your microservices for seamless communication.Best Practices for Containerizing MicroservicesTo wrap things up, here are some best practices for containerizing your microservices:Keep Containers Lightweight: Use minimal base images (e.g.,  or  versions) to reduce size and improve performance.: Separate the build and runtime environments to keep production images small.Leverage Kubernetes Features: Use ConfigMaps and Secrets to manage configuration and sensitive data.: Integrate tools like Prometheus and Fluentd for monitoring and logging.: Use CI/CD pipelines to automate building, testing, and deploying containers.In the next article, we’ll explore “NATS as a Service Mesh — The Lightweight Superhero Your Microservices Deserve” and how it simplifies communication between microservices. Spoiler alert: it’s like giving your microservices a supercharged walkie-talkie. Stay tuned!Until then, feel free to drop a comment or share your thoughts. What’s your experience with Docker and Kubernetes? Any tips or tricks you’d like to share? Let’s keep the conversation going. 💬 What’s your #1 Kubernetes struggle? Scaling? Debugging? Share below! ❤️ Happy containerizing, and stay tuned for the next chapter in the !]]></content:encoded></item><item><title>Bezos&apos; Blue Origin to layoff about 10% across its space, launch business</title><link>https://www.cnbc.com/2025/02/13/bezos-blue-origin-to-layoff-about-10percent-across-its-space-launch-business-.html</link><author>pinewurst</author><category>hn</category><pubDate>Thu, 13 Feb 2025 16:26:09 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[A Blue Origin New Glenn rocket stands ready for its inaugural launch at the Cape Canaveral Space Force Station in Cape Canaveral, Florida, U.S., January 10, 2025.The CEO of Jeff Bezos' Blue Origin announced in an all-hands call on Thursday company-wide layoffs of "about 10 percent" of its employees, a sweeping readjustment as it aims to cut costs and ramp up rocket launches.The layoffs affect roughly 1,400 of the company's nearly 14,000 employees — mostly concentrated in Florida, Texas and Washington — and comes as  Blue Origin starts production of its giant New Glenn rocket, which had its first long-awaited debut launch last month."There's no easy way to communicate this," Dave Limp told employees in the meeting, which was scheduled the night prior and lasted about 10 minutes. "There's no question that we've had a lot of successes over the last few months.""But that being said, when you look at the foundation of the company and what we need to get to over the next three to five years, we just came to the painful conclusion that we aren't set up for the kind of success that we really wanted to have," Limp said.Limp said the decision would help Blue Origin scale New Glenn manufacturing and increase the rocket's launch cadence, two goals crucial to competing with Elon Musk's SpaceX and its dominant Falcon 9.To do that, the company needs a culture that is "quick, nimble, decisive, and very focused on our customers," said Limp, who was plucked by Bezos from  customer-focused devices unit in late 2023 to lead Blue Origin.Limp has been tasked with streamlining Blue Origin's many business units — from space stations to lunar landers for NASA — and pushing for greater focus on New Glenn, giving the company a fresh sense of urgency after years of development paralysis, multiple employees say.But some employees believe morale and the company's culture has suffered amid Limp's push for speed, two employees said, adding some staff are seeking jobs elsewhere regardless of who survives Thursday's layoffs.]]></content:encoded></item><item><title>Google is on the Wrong Side of History</title><link>https://www.eff.org/deeplinks/2025/02/google-wrong-side-history</link><author>Matthew Guariglia</author><category>tech</category><enclosure url="https://www.eff.org/files/banner_library/ai-soldiers-3b.png" length="" type=""/><pubDate>Thu, 13 Feb 2025 16:08:57 +0000</pubDate><source url="https://www.eff.org/rss/updates.xml">Deeplinks</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Hector Martin Resigns From The Asahi Linux Project</title><link>https://www.phoronix.com/news/Hector-Martin-Resigns-Asahi</link><author>Michael Larabel</author><category>tech</category><pubDate>Thu, 13 Feb 2025 15:56:26 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Last week Hector Martin resigned from upstream maintainership of the Apple Silicon code for the Linux kernel. At the time he was still going to contribute to the Asahi Linux project's downstream kernel but in a surprise move today, he has decided to resign as project leader of Asahi Linux...]]></content:encoded></item><item><title>Linux 6.14-rc3 To Fix Platform Profile Support For Newer AMD-Powered ThinkPads</title><link>https://www.phoronix.com/news/Linux-6.14-rc3-Newer-AMD-PP</link><author>Michael Larabel</author><category>tech</category><pubDate>Thu, 13 Feb 2025 15:41:24 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Submitted today via the x86 platform driver updates ahead of Linux 6.14-rc3 on Sunday are some Lenovo ThinkPad patches that may interest some users...]]></content:encoded></item><item><title>Python vs R for data science: Which should you choose?</title><link>https://www.datasciencecentral.com/python-vs-r-for-data-science-which-should-you-choose/</link><author>Mike Steven</author><category>dev</category><category>ai</category><pubDate>Thu, 13 Feb 2025 15:37:52 +0000</pubDate><source url="https://www.datasciencecentral.com/">Data Science Central</source><content:encoded><![CDATA[Welcome to another comparison article where you will understand the features, intricacies, pros, and cons of two different stacks of the information technology industry. Today’s comparison blog is especially for data scientists who spend their day and night with datasets, insights, trends, and analysis of many other factors. From a long list of skills that… Read More »]]></content:encoded></item><item><title>Sprint 2 - Picking Up the Pace</title><link>https://dev.to/theoforger/sprint-2-picking-up-the-pace-420a</link><author>TheoForger</author><category>dev</category><category>rust</category><pubDate>Thu, 13 Feb 2025 15:37:18 +0000</pubDate><source url="https://dev.to/t/rust">Dev.to Rust</source><content:encoded><![CDATA[This is the end of Sprint 2. This Sprint has gotten me into a lot of joy and pain, and let me tell you all about it.A proposal to add an  queryGET https://foo.com
HTTP 200
[Asserts]
ip == "192.168.0.1"
GET https://foo.com
HTTP 200
[Asserts]
ip matches /2001:0000:130F:0000:0000:09C0:876A:\d*/
There is also a  but I've the impression that user expectation is more on primary ip.Question: what's about port ? Does the query  exctract the IP address and the port (), or do we have a separate  query that we can do latter?GET https://foo.com
HTTP 200
[Asserts]
ip == "192.168.0.1"
port == 8080
With /as separated queries, we can also have  and  predicates:GET https://foo.com
HTTP 200
[Asserts]
ip isIPv6

This week I've been working to implement this feature to enable hurl users to assert on IP addresses for each request. Since there were quite a few things to do, I decided to break it into multiple PRs.

  
  
  Add ip address to http::Response (Link)
This was a continuation from last week's research. To make the asserts work, first I had to capture that from libcurl and include it in Hurl's  module.To achieve that, I used the method  provided by the  crate. There was some issues regarding the return type of this method and the implementation of type conversions, but we worked it out during the previous Sprint.Other than that, nothing much happened in this PR. There was some changes regarding names and documentation, but it was merged quickly after.
  
  
  Allow assert on ip address (Link)
After last week's discussion, we decided to simply use the  type to handle ip address queries in the Hurl file. At that point I didn't really understand much of the code, but I was able to find a similar query option : . Imitating the code, I was able to create a new query entry.To my surprise, when I tested it afterwards, everything worked! ,  or ... All the keywords was properly working. Turned out Hurl already had the code to handle all string typed queries generically, so all I had to do was creating the query and plugging it right in. Super cool!
  
  
  Allow asserts on ip versions (Link)
This was technically a different feature but it was still a part of the original issue. In this PR, instead of treating the IP address as a string and query on the text content, I had to figure out way to evaluate the IP version.The maintainer suggested to simply take the IP query strings and convert them to . Since this is an enum built-in with the  and  variants, if the conversion succeeds, I could match the pattern to get the IP version.However, this task was not nearly as straightforward as the last PR. Since I didn't fully understand the code, I had a very difficult time locating where I even implement this conversion.First I was determined to figure this out myself. I sat down and carefully read the code, I drafted a few diagrams to help me understand the workflow. However, in Hurl's file parser, whenever I tried to print something, or use the debugger to display something, I would get a strange-looking structure instead of actual text like so:I was beyond confused. I had to ask the maintainer about this. Turned out they were using something called an AST (abstract syntax tree). This structure maps the relative locations of each section of the file without actually parsing them. You can read more in the maintainer's comment.With that knowledge in mind and a bit more research, I finally was able to implement this feature. Now I'm still going back and forth with the maintainer regarding error handling, but I'm sure this feature will land soon!
  
  
  Update @aws-sdk/client-route-53 (Link)
I was looking at Starchart yesterday and saw a list of pull requests opened by , one of which had a failed CI check. I decided to look in a little further. This pull request attempted to update the package  from 3.360.0 to 3.744.0. That's quite a bit gap in version numbers.The CI pipeline failed because of a type mismatch. I started by checking the changelog but I didn't notice any changes regarding types.Fortunately, my IDE was able to help me with locate two new types introduced in the new version:/**
 * @public
 * @enum
 */
export declare const RRType: {
    readonly A: "A";
    readonly AAAA: "AAAA";
    readonly CAA: "CAA";
    readonly CNAME: "CNAME";
    readonly DS: "DS";
    readonly HTTPS: "HTTPS";
    readonly MX: "MX";
    readonly NAPTR: "NAPTR";
    readonly NS: "NS";
    readonly PTR: "PTR";
    readonly SOA: "SOA";
    readonly SPF: "SPF";
    readonly SRV: "SRV";
    readonly SSHFP: "SSHFP";
    readonly SVCB: "SVCB";
    readonly TLSA: "TLSA";
    readonly TXT: "TXT";
};
/**
 * @public
 */
export type RRType = (typeof RRType)[keyof typeof RRType];

/**
 * @public
 * @enum
 */
export declare const ChangeAction: {
    readonly CREATE: "CREATE";
    readonly DELETE: "DELETE";
    readonly UPSERT: "UPSERT";
};
/**
 * @public
 */
export type ChangeAction = (typeof ChangeAction)[keyof typeof ChangeAction];

This part of the code is responsible for managing DNS records.  defines the type of DNS record and  defines the type of changes to perform on an existing record. While all these types were previously represented by .I changed the code to the new types and filed a PR. Later the review came back, suggesting that I create a utility function to handle the type conversion. And this is where I'm at right now.
  
  
  📝 Conclusion and What's Next
This Sprint felt much more eventful than the last one. In the Hurl project, I was working on a different area of code, which means that more time were spent on search and asking questions. I also made more mistakes because of this unfamiliarity. On the Starchart's side, although I haven't taken much action yet, I suspect there to be more to come:For the next Sprint, I might need to dial back a little on the Hurl project, since the maintainer mentioned that they have stopped taking in new features until the next release (). So my plan is to pick a few bugs to investigate there, while shifting my focus a little more to Starchart.]]></content:encoded></item><item><title>A ‘True Crime’ Documentary Series Has Millions of Views. The Murders Are All AI-Generated</title><link>https://www.404media.co/a-true-crime-documentary-series-has-millions-of-views-the-murders-are-all-ai-generated/</link><author>Henry Larson</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/CleanShot-2025-02-12-at-10.36.04@2x.png" length="" type=""/><pubDate>Thu, 13 Feb 2025 15:09:44 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[Elizabeth Hernandez found out about the decade-old  from a flurry of tips sent to her newsroom in August last year.The tips were all reacting to a YouTube video with a shocking title: "Husband's Secret Gay Love Affair with Step Son Ends in Grisly Murder.” It described a gruesome crime that apparently took place in Littleton, Colorado. Almost two million people had watched it.“Some people in fact were saying, ‘Why didn't The Denver Post cover this?’” Hernandez, a reporter at the paper, told me. “Because in the video, it makes it sound like it was a big news event and yet, when you Google it, there is no coverage.”The reason for the lack of coverage was pretty clear to her. In the 26-minute long video, a stilted voice narrated over hazy still images of a neighborhood that really didn’t look like Littleton.Hernandez called several law enforcement officials and quickly confirmed her suspicions. The murder was fake, and the video was made using generative AI.]]></content:encoded></item><item><title>A new tool for visualizing Rust lifetimes</title><link>https://www.youtube.com/watch?v=NV6Xo_el_2o</link><author>Let&apos;s Get Rusty</author><category>dev</category><category>rust</category><category>video</category><category>learning</category><enclosure url="https://www.youtube.com/v/NV6Xo_el_2o?version=3" length="" type=""/><pubDate>Thu, 13 Feb 2025 15:00:34 +0000</pubDate><source url="https://www.youtube.com/channel/UCSp-OaMpsO8K0KkOqyBl7_w">Let&apos;s get Rusty</source><content:encoded><![CDATA[See how RustOwl can help you understand lifetimes in a real Rust codebase. A brand-new tool designed to visualize Rust lifetimes and make learning Rust easier. Check it out and see how it can change the way you write Rust!

Free Rust training: https://letsgetrusty.com/bootcamp

RustOwl: https://github.com/cordx56/rustowl

Corrections:
- Bacon is a CLI tool, not a library. Check it out here: https://github.com/Canop/bacon]]></content:encoded></item><item><title>Bridging the Gap: Democratizing AI for All</title><link>https://www.kdnuggets.com/bridging-gap-democratizing-ai</link><author>Vidhi Chugh</author><category>dev</category><category>ai</category><enclosure url="https://www.kdnuggets.com/wp-content/uploads/chugh_Bridging-the-Gap-Democratizing-AI-for-All_1.png" length="" type=""/><pubDate>Thu, 13 Feb 2025 15:00:03 +0000</pubDate><source url="https://www.kdnuggets.com/">KDNuggets blog</source><content:encoded><![CDATA[Let’s explore how democratizing AI can level the playing field and create opportunities for all, no matter the background or resources.]]></content:encoded></item><item><title>Google Releases AOM-AV1 3.12 With More Performance Optimizations</title><link>https://www.phoronix.com/news/AOM-AV1-3.12</link><author>Michael Larabel</author><category>tech</category><pubDate>Thu, 13 Feb 2025 14:51:26 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[For those preferring the AOM-AV1 open-source AV1 video encoder over SVT-AV1, Rav1e, or other AV1 encoders, Google this week unveiled AOM-AV1 3.12...]]></content:encoded></item><item><title>Rust vs C++ Performance</title><link>https://www.youtube.com/watch?v=WnMin9cf78g</link><author>Anton Putra</author><category>dev</category><category>video</category><enclosure url="https://www.youtube.com/v/WnMin9cf78g?version=3" length="" type=""/><pubDate>Thu, 13 Feb 2025 14:30:41 +0000</pubDate><source url="https://www.youtube.com/channel/UCeLvlbC754U6FyFQbKc0UnQ">Anton Putra</source><content:encoded><![CDATA[C++ vs Rust Speed.

🔴 To support my channel, I'd like to offer Mentorship/On-the-Job Support/Consulting (me@antonputra.com)

🍿 Benchmarks: https://youtube.com/playlist?list=PLiMWaCMwGJXmcDLvMQeORJ-j_jayKaLVn&si=p-UOaVM_6_SFx52H

👋 AWS is expensive - Infra Support Fund: https://buymeacoffee.com/antonputra

▬▬▬▬▬ Experience & Location 💼 ▬▬▬▬▬
►  I’m a Senior Software Engineer at Juniper Networks (13+ years of experience)
►  Located in San Francisco Bay Area, CA (US citizen)

▬▬▬▬▬▬ Connect with me 👋 ▬▬▬▬▬▬
►  LinkedIn: https://www.linkedin.com/in/anton-putra
►  Twitter/X: https://twitter.com/antonvputra
►  GitHub: https://github.com/antonputra
►  Email: me@antonputra.com

▬▬▬▬▬▬▬ Source Code 📚 ▬▬▬▬▬▬▬
► Original Source Code: https://github.com/antonputra/tutorials/tree/245/lessons/245

PR to improve Rust - https://github.com/antonputra/tutorials/pull/429
PR to improve Rust - https://github.com/antonputra/tutorials/pull/431
PR to improve Rust - https://github.com/antonputra/tutorials/pull/433

#rust #golang #devops]]></content:encoded></item><item><title>Are You Ready to Let an AI Agent Use Your Computer?</title><link>https://spectrum.ieee.org/ai-agents-computer-use</link><author>Eliza Strickland</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjM3NTc5Ni9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc3MzQzMDIzNX0.q8-_ndmeOkmbC-IEhxZy5uOZIw7195YebXH8q88gz48/image.jpg?width=600" length="" type=""/><pubDate>Thu, 13 Feb 2025 14:00:04 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[AI agents from OpenAI, Anthropic, and Google want to lighten your load]]></content:encoded></item><item><title>Sri Lanka scrambles to restore power after monkey causes islandwide outage</title><link>https://www.reuters.com/world/asia-pacific/sri-lanka-scrambles-restore-power-after-monkey-causes-islandwide-outage-2025-02-13/</link><author>abe94</author><category>hn</category><pubDate>Thu, 13 Feb 2025 13:47:25 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Wayland Color Management &amp; HDR Protocol Support Merged</title><link>https://www.phoronix.com/news/Wayland-CM-HDR-Merged</link><author>Michael Larabel</author><category>tech</category><pubDate>Thu, 13 Feb 2025 13:25:18 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[As a quick follow-up to the article earlier today... The Wayland Color Management and HDR protocol support is now merged to upstream Wayland Protocols!..]]></content:encoded></item><item><title>Scroll Driven Animations Notebook</title><link>https://css-tricks.com/scroll-driven-animations-notebook/</link><author>Geoff Graham</author><category>frontend</category><pubDate>Thu, 13 Feb 2025 13:24:29 +0000</pubDate><source url="https://css-tricks.com/">CSS Tricks blog</source><content:encoded><![CDATA[One of his latest is a notebook of scroll-driven animations. They’re all impressive as heck, as you’d expect from Adam. But it’s the simplicity of the first few examples that I love most. Here I am recreating two of the effects in a CodePen, which you’ll want to view in the latest version of Chrome for support.This is a perfect example of how a scroll-driven animation is simply a normal CSS animation, just tied to scrolling instead of the document’s default timeline, which starts on render. We’re talking about the same set of keyframes:@keyframes slide-in-from-left {
  from {
    transform: translateX(-100%);
  }
}All we have to do to trigger scrolling is call the animation and assign it to the timeline:li {
  animation: var(--animation) linear both;
  animation-timeline: view();
}Notice how there’s no duration set on the animation. There’s no need to since we’re dealing with a scroll-based timeline instead of the document’s timeline. We’re using the  function instead of the  function, which acts sort of like JavsScript’s Intersection Observer where scrolling is based on where the element comes into view and intersects the scrollable area.It’s easy to drop your jaw and ooo and ahh all over Adam’s demos, especially as they get more advanced. But just remember that we’re still working with plain ol’ CSS animations. The difference is the timeline they’re on.]]></content:encoded></item><item><title>How to Scale Sklearn with Dask</title><link>https://www.kdnuggets.com/how-to-scale-sklearn-dask</link><author>Iván Palomares Carrascosa</author><category>dev</category><category>ai</category><enclosure url="https://www.kdnuggets.com/wp-content/uploads/crVYYGyvTE2Jilsmvukhpw.jpeg" length="" type=""/><pubDate>Thu, 13 Feb 2025 13:00:49 +0000</pubDate><source url="https://www.kdnuggets.com/">KDNuggets blog</source><content:encoded><![CDATA[Here's how Dask applies the building blocks of sklearn to bring ML modeling workflows to the next level of scalability via high-performance parallel computing]]></content:encoded></item><item><title>Better Value Sooner Safer Happier • Simon Rohrer &amp; Eduardo da Silva • GOTO 2025</title><link>https://www.youtube.com/watch?v=8oqT5tjqf-0</link><author>GOTO Conferences</author><category>video</category><category>learning</category><enclosure url="https://www.youtube.com/v/8oqT5tjqf-0?version=3" length="" type=""/><pubDate>Thu, 13 Feb 2025 13:00:11 +0000</pubDate><source url="https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA">GOTO Conferences yt</source><content:encoded><![CDATA[This interview was recorded for the GOTO Book Club. #GOTOcon #GOTObookclub
http://gotopia.tech/bookclub

Read the full transcription of the interview here:
https://gotopia.tech/episodes/356

Simon Rohrer - Co-Author of "Better Value Sooner Safer Happier" & Senior Director at Saxo Bank @SimonRohrer 
Eduardo da Sliva - Independent Consultant on Organization, Architecture, and Leadership Modernization @emgsilva 

RESOURCES
Simon
https://bsky.app/profile/simon.bvssh.com
https://mastodon.social/@simonr
https://x.com/sirohrer
https://www.linkedin.com/in/simonrohrer
https://github.com/sirohrer
https://www.soonersaferhappier.com

Eduardo
https://bsky.app/profile/esilva.net
https://mastodon.social/@eduardodasilva
https://x.com/emgsilva
https://www.linkedin.com/in/emgsilva
https://github.com/emgsilva
https://esilva.net

Links
https://youtu.be/oOYddleBsuk
https://youtu.be/ESOaDiv3lXA
https://youtu.be/B3b4tremI5o
https://youtu.be/WPCrGYjrJ1Y
https://youtu.be/48g7CRlMUD8
https://youtu.be/86-Dy5U2p5Y
https://youtu.be/l1tyfb5we7I
https://youtu.be/B7JqZh9A2pQ
https://youtu.be/yuEbZYKgZas
https://youtu.be/hBxV3Cr0lXY
https://youtu.be/HKS5sKsIkkc

DESCRIPTION
Eduardo da Silva and Simon Rohrer discuss the core ideas of "Better Value Sooner Safer Happier" diving into the principles of organizational transformation.

Simon shares insights on the shift from output-driven to outcome-focused thinking, emphasizing value over productivity, and the need for continuous improvement in delivery speed, stakeholder satisfaction, and safety.
The conversation explores key concepts like technical excellence, integrating safety into development, and balancing incremental changes with occasional larger steps.

Simon Rohrer discusses organizational patterns and the importance of decentralizing decision-making, recommending a flexible, context-driven approach to transformation. The session concludes with practical advice on how to start implementing these ideas, using the book’s map to guide organizations toward the right transformation strategy based on their specific goals.

TIMECODES
00:00 Intro
01:55 The journey to "Better Value Sooner Safer Happier"
06:14 Antipatterns & patterns for business agility
14:09 Embracing continuous attention to technical excellence
24:43 Embedding safety in continuous delivery
33:31 Balancing incremental change & big leaps in transformation
40:18 Exploring organizational patterns
44:12 Outro

RECOMMENDED BOOKS
Jonathan Smart, Zsolt Berend, Myles Ogilvie & Simon Rohrer • Sooner Safer Happier • https://amzn.to/3Emm9p2
Stephen Fishman & Matt McLarty • Unbundling the Enterprise • https://amzn.to/3W2EcXw
Carliss Y. Baldwin • Design Rules, Vol. 2 • https://amzn.to/4hdllRr
Matthew Skelton & Manuel Pais • Team Topologies • http://amzn.to/3sVLyLQ
Forsgren, Humble & Kim • Accelerate: The Science of Lean Software and DevOps • https://amzn.to/3tCz1xO
Kim, Humble, Debois, Willis & Forsgren • The DevOps Handbook • https://amzn.to/47oAf3l

https://twitter.com/GOTOcon
https://www.linkedin.com/company/goto-
https://www.instagram.com/goto_con
https://www.facebook.com/GOTOConferences
#BetterValue #SoonerSaferHappier #OrganizationalTransformation #BusinessAgility #Agility #ValueOverProductivity #ContinuousDelivery #ContinuousAttention #Safety #TechnicalExcellence #BookClub

CHANNEL MEMBERSHIP BONUS
Join this channel to get early access to videos & other perks:
https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join

Looking for a unique learning experience?
Attend the next GOTO conference near you! Get your ticket at https://gotopia.tech
Sign up for updates and specials at https://gotopia.tech/newsletter

SUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.
https://www.youtube.com/user/GotoConferences/?sub_confirmation=1]]></content:encoded></item><item><title>Brain-inspired Computing Is Ready for the Big Time</title><link>https://spectrum.ieee.org/neuromorphic-computing-2671121824</link><author>Edd Gent</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjM3Njk2NC9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc1MTg1NjUyMH0.WiISOGfkZPanzeo80jgQnL_WWY8h_Ot84nPBMWFvyuY/image.jpg?width=600" length="" type=""/><pubDate>Thu, 13 Feb 2025 13:00:03 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[Neuromorphic pioneer Steve Furber says it's just awaiting a killer app]]></content:encoded></item><item><title>Is It Time For a Change In GNOME Leadership?</title><link>https://tech.slashdot.org/story/25/02/13/0150244/is-it-time-for-a-change-in-gnome-leadership?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>BeauHD</author><category>slashdot</category><category>linux</category><pubDate>Thu, 13 Feb 2025 13:00:00 +0000</pubDate><source url="https://linux.slashdot.org/">Slashdot - Linux</source><content:encoded><![CDATA[Longtime Slashdot reader BrendaEM writes: Command-line aside, Cinnamon is the most effective keeper of the Linux desktop flame -- by not abandoning desktop and laptop computers. Yes, there are other desktop GUIs, such as MATE, and the lightweight Xfce, which are valuable options when low overhead is important, such as in LinuxCNC. However, among the general public lies a great expanse of office workers who need a full-featured Linux desktop.
 
The programmers who work on GNOME and its family of supporting applications enrich many other desktops do their more than their share. These faithful developers deserve better user-interface leadership. GNOME has tried to steer itself into tablet waters, which is admirable, but GNOME 3.x diminished the desktop experience for both laptop and desktop users. For instance, the moment you design what should be a graphical user interface with words such as "Activities," you ask people to change horses midstream. That is not to say that the command line and GUI cannot coexist -- because they can, as they do in many CAD programs.
 
I remember a time when GNOME ruled the Linux desktop -- and I can remember when GNOME left those users behind. Perhaps in a future, GNOME could return to the Linux desktop and join forces with Cinnamon -- so that we may once again have the year of the Linux desktop.]]></content:encoded></item><item><title>Fostering open source culture (Interview)</title><link>https://changelog.com/podcast/628</link><author></author><category>podcast</category><enclosure url="https://op3.dev/e/https://cdn.changelog.com/uploads/podcast/628/the-changelog-628.mp3" length="" type=""/><pubDate>Thu, 13 Feb 2025 13:00:00 +0000</pubDate><source url="https://changelog.com/podcast">Podcast - Changelog</source><content:encoded><![CDATA[Arun Gupta is back, this time with his latest book in hand titled “Fostering Open Source Culture” to share his wisdom and experiences of fostering open source culture. BTW you can use the code  to get 20% off (both print and e-book). Use this link and enjoy.Changelog++ members save 8 minutes on this episode because they made the ads disappear. Join today!Temporal – Build invincible applications. Manage failures, network outages, flaky endpoints, long-running processes and more, ensuring your workflows never fail. Register for Replay in London, March 3-5 to break free from the status quo.
Augment Code – Developer AI that uses deep understanding of your large codebase and how you build software to deliver personalized code suggestions and insights. Augment provides relevant, contextualized code right in your IDE or Slack. It transforms scattered knowledge into code or answers, eliminating time spent searching docs or interrupting teammates.
Notion – Notion is a place where any team can write, plan, organize, and rediscover the joy of play. It’s a workspace designed not just for making progress, but getting inspired. Notion is for everyone — whether you’re a Fortune 500 company or freelance designer, starting a new startup or a student juggling classes and clubs.
Fly.io – The home of Changelog.com — Deploy your apps close to your users — global Anycast load-balancing, zero-configuration private networking, hardware isolation, and instant WireGuard VPN connections. Push-button deployments that scale to thousands of instances. Check out the speedrun to get started in minutes.
]]></content:encoded></item><item><title>Peter Bengtsson: get in JavaScript is the same as property in Python</title><link>http://www.peterbe.com/plog/get-in-javascript-is-the-same-as-property-in-python</link><author></author><category>dev</category><category>python</category><pubDate>Thu, 13 Feb 2025 12:41:56 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[Prefix a function, in an object or class, with `get` and then that acts as a function call without brackets. Just like Python's `property` decorator.]]></content:encoded></item><item><title>AI Coding Assistants are Not the Solution You Think</title><link>https://devops.com/ai-coding-assistants-are-not-the-solution-you-think/</link><author>Anish Dhar</author><category>devops</category><pubDate>Thu, 13 Feb 2025 12:31:35 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>How to add a directory to your PATH</title><link>https://jvns.ca/blog/2025/02/13/how-to-add-a-directory-to-your-path/</link><author>Julia Evans</author><category>blog</category><pubDate>Thu, 13 Feb 2025 12:27:56 +0000</pubDate><source url="https://jvns.ca/atom.xml">Julia Evans</source><content:encoded><![CDATA[I was talking to a friend about how to add a directory to your PATH today. It’s
something that feels “obvious” to me since I’ve been using the terminal for a
long time, but when I searched for instructions for how to do it, I actually
couldn’t find something that explained all of the steps – a lot of them just
said “add this to ”, but what if you’re not using bash? What if your
bash config is actually in a different file? And how are you supposed to figure
out which directory to add anyway?So I wanted to try to write down some more complete directions and mention some
of the gotchas I’ve run into over the years.Here’s a table of contents:step 1: what shell are you using?If you’re not sure what shell you’re using, here’s a way to find out. Run this:if you’re using , it’ll print out if you’re using , it’ll print out if you’re using , it’ll print out an error like “In fish, please use
$fish_pid” ( isn’t valid syntax in fish, but in any case the error
message tells you that you’re using fish, which you probably already knew)Also bash is the default on Linux and zsh is the default on Mac OS (as of
2024). I’ll only cover bash, zsh, and fish in these directions.step 2: find your shell’s config filein zsh, it’s probably in bash, it might be , but it’s complicated, see the note in the next sectionin fish, it’s probably ~/.config/fish/config.fish (you can run  if you want to be 100% sure)a note on bash’s config fileBash has three possible config files: , , and .If you’re not sure which one your system is set up to use, I’d recommend
testing this way:add  to your If you see “hi there”, that means  is being used! Hooray!Otherwise remove it and try the same thing with You can also try  if the first two options don’t work.(there are a lot of elaborate flow charts out there that explain how bash
decides which config file to use but IMO it’s not worth it and just testing is
the fastest way to be sure)step 3: figure out which directory to addLet’s say that you’re trying to install and run a program called 
and it doesn’t work, like this:$ npm install -g http-server
$ http-server
bash: http-server: command not found
How do you find what directory  is in? Honestly in general this is
not that easy – often the answer is something like “it depends on how npm is
configured”. A few ideas:Often when setting up a new installer (like , , , etc),
when you first set it up it’ll print out some directions about how to update
your PATH. So if you’re paying attention you can get the directions then.Sometimes installers will automatically update your shell’s config file
to update your  for youSometimes just Googling “where does npm install things?” will turn up the
answerSome tools have a subcommand that tells you where they’re configured to
install things, like:
Node/npm:  (then append )Go:  (then append )asdf: asdf info | grep ASDF_DIR (then append  and )step 3.1: double check it’s the right directoryOnce you’ve found a directory you think might be the right one, make sure it’s
actually correct! For example, I found out that on my machine,  is
in . I can make sure that it’s the right directory by trying to
run the program  in that directory like this:$ ~/.npm-global/bin/http-server
Starting up http-server, serving ./public
It worked! Now that you know what directory you need to add to your ,
let’s move to the next step!step 4: edit your shell configNow we have the 2 critical pieces of information we need:Which directory you’re trying to add to your PATH (like  )Where your shell’s config is (like , , or ~/.config/fish/config.fish)Now what you need to add depends on your shell:Open your shell’s config file, and add a line like this:export PATH=$PATH:~/.npm-global/bin/
(obviously replace  with the actual directory you’re trying to add)You can do the same thing as in bash, but zsh also has some slightly fancier
syntax you can use if you prefer:path=(
  $path
  ~/.npm-global/bin
)
In fish, the syntax is different:set PATH $PATH ~/.npm-global/bin
(in fish you can also use , some notes on that further down)step 5: restart your shellNow, an extremely important step: updating your shell’s config won’t take
effect if you don’t restart it!open a new terminal (or terminal tab), and maybe close the old one so you don’t get confusedRun  to start a new shell (or  if you’re using zsh, or  if you’re using fish)I’ve found that both of these usually work fine.And you should be done! Try running the program you were trying to run and
hopefully it works now.If not, here are a couple of problems that you might run into:problem 1: it ran the wrong programIf the wrong  of a is program running, you might need to add the
directory to the  of your PATH instead of the end.For example, on my system I have two versions of  installed, which I
can see by running :$ which -a python3
/usr/bin/python3
/opt/homebrew/bin/python3
The one your shell will use is the .If you want to use the Homebrew version, you need to add that directory
() to the  of your PATH instead, by putting this in
your shell’s config file (it’s  instead of the usual )export PATH=/opt/homebrew/bin/:$PATH
set PATH ~/.cargo/bin $PATH
problem 2: the program isn’t being run from your shellAll of these directions only work if you’re running the program . If you’re running the program from an IDE, from a GUI, in a cron job,
or some other way, you’ll need to add the directory to your PATH in a different
way, and the exact details might depend on the situation.use the full path to the program you’re running, like /home/bork/bin/my-programput the full PATH you want as the first line of your crontab (something like
PATH=/bin:/usr/bin:/usr/local/bin:….). You can get the full PATH you’re
using in your shell by running .I’m honestly not sure how to handle it in an IDE/GUI because I haven’t run into
that in a long time, will add directions here if someone points me in the right
direction.problem 3: duplicate  entries making it harder to debugIf you edit your path and start a new shell by running  (or , or
), you’ll often end up with duplicate  entries, because the shell
keeps adding new things to your  every time you start your shell.Personally I don’t think I’ve run into a situation where this kind of
duplication breaks anything, but the duplicates can make it harder to debug
what’s going on with your  if you’re trying to understand its contents.Some ways you could deal with this:If you’re debugging your , open a new terminal to do it in so you get
a “fresh” state. This should avoid the duplication.Deduplicate your  at the end of your shell’s config  (for example in
zsh apparently you can do this with )Check that the directory isn’t already in your  when adding it (for
example in fish I believe you can do this with fish_add_path --path /some/directory)How to deduplicate your  is shell-specific and there isn’t always a
built in way to do it so you’ll need to look up how to accomplish it in your
shell.problem 4: losing your history after updating your Here’s a situation that’s easy to get into in bash or zsh:Run  to reload your configPress the up arrow a couple of times to rerun the failed command (or open a new terminal)The failed command isn’t in your history! Why not?This happens because in bash, by default, history is not saved until you exit
the shell.Some options for fixing this:Instead of running  to reload your config, run  (or
 in zsh). This will reload the config inside your current
session.Configure your shell to continuously save your history instead of only saving
the history when the shell exits. (How to do this depends on whether you’re
using bash or zsh, the history options in zsh are a bit complicated and I’m
not exactly sure what the best way is)When you install  (Rust’s installer) for the first time, it gives you
these instructions for how to set up your PATH, which don’t mention a specific
directory at all.This is usually done by running one of the following (note the leading DOT):

. "$HOME/.cargo/env"        	# For sh/bash/zsh/ash/dash/pdksh
source "$HOME/.cargo/env.fish"  # For fish
The idea is that you add that line to your shell’s config, and their script
automatically sets up your  (and potentially other things) for you.This is pretty common (for example Homebrew suggests you eval ), and there are
two ways to approach this:Just do what the tool suggests (like adding  to your shell’s config)Figure out which directories the script they’re telling you to run would add
to your PATH, and then add those manually. Here’s how I’d do that:
Run  in my shell (or the fish version if using fish)Run echo "$PATH" | tr ':' '\n' | grep cargo to figure out which directories it addedSee that it says  and shorten that to Add the directory  to PATH (with the directions in this post)I don’t think there’s anything wrong with doing what the tool suggests (it
might be the “best way”!), but personally I usually use the second approach
because I prefer knowing exactly what configuration I’m changing.fish has a handy function called  that you can run to add a directory to your  like this:fish_add_path /some/directory
This is cool (it’s such a simple command!) but I’ve stopped using it for a couple of reasons:Sometimes  will update the  for every session in the
future (with a “universal variable”) and sometimes it will update the 
just for the current session and it’s hard for me to tell which one it will
do. In theory the docs explain this but I could not understand them.Hopefully this will help some people. Let me know (on Mastodon or Bluesky) if
you there are other major gotchas that have tripped you up when adding a
directory to your PATH, or if you have questions about this post!]]></content:encoded></item><item><title>DOGE as a National Cyberattack</title><link>https://www.schneier.com/blog/archives/2025/02/doge-as-a-national.html</link><author>Bruce Schneier</author><category>infosec</category><category>blog</category><pubDate>Thu, 13 Feb 2025 12:03:26 +0000</pubDate><source url="https://www.schneier.com/">Schneider on Security</source><content:encoded><![CDATA[In the span of just weeks, the US government has experienced what may be the most consequential security breach in its history—not through a sophisticated cyberattack or an act of foreign espionage, but through official orders by a billionaire with a poorly defined government role. And the implications for national security are profound.First, it was reported that people associated with the newly created Department of Government Efficiency (DOGE) had accessedtheUSTreasury computer system, giving them the ability to collect data on and potentially control the department’s roughly $5.45 trillion in annual federal payments.Then, we learned that uncleared DOGE personnel had gained access to classified data from the US Agency for International Development, possibly copying it onto their own systems. Next, the Office of Personnel Management—which holds detailed personal data on millions of federal employees, including those with security clearances—wascompromised. After that, Medicaid and Medicare records were compromised.Meanwhile, only partially redacted names of CIA employees were sent over an unclassified email account. DOGE personnel are also reported to be feeding Education Department data into artificial intelligence software, and they have also started working at the Department of Energy.This story is moving very fast. On Feb. 8, a federal judge blocked the DOGE team from accessing the Treasury Department systems any further. But given that DOGE workers have already copied data and possibly installed and modified software, it’s unclear how this fixes anything.In any case, breaches of other critical government systems are likely to follow unless federal employees stand firm on the protocols protecting national security.The systems that DOGE is accessing are not esoteric pieces of our nation’s infrastructure—they are the sinews of government.For example, the Treasury Department systems contain the technical blueprints for how the federal government moves money, while the Office of Personnel Management (OPM) network contains information on who and what organizations the government employs and contracts with.What makes this situation unprecedented isn’t just the scope, but also the method of attack. Foreign adversaries typically spend years attempting to penetrate government systems such as these, using stealth to avoid being seen and carefully hiding any tells or tracks. The Chinese government’s 2015 breach of OPM was a significant US security failure, and it illustrated how personnel data could be used to identify intelligence officers and compromise national security.In this case, external operators with limited experience and minimal oversight are doing their work in plain sight and under massive public scrutiny: gaining the highest levels of administrative access and making changes to the United States’ most sensitive networks, potentially introducing new security vulnerabilities in the process.But the most alarming aspect isn’t just the access being granted. It’s the systematic dismantling of security measures that would detect and prevent misuse—including standard incident response protocols, auditing, and change-tracking mechanisms—by removing the career officials in charge of those security measures and replacing them with inexperienced operators.The Treasury’s computer systems have such an impact on national security that they were designed with the same principle that guides nuclear launch protocols: No single person should have unlimited power. Just as launching a nuclear missile requires two separate officers turning their keys simultaneously, making changes to critical financial systems traditionally requires multiple authorized personnel working in concert.This approach, known as “separation of duties,” isn’t just bureaucratic red tape; it’s a fundamental security principle as old as banking itself. When your local bank processes a large transfer, it requires two different employees to verify the transaction. When a company issues a major financial report, separate teams must review and approve it. These aren’t just formalities—they’re essential safeguards against corruption and error. These measures have been bypassed or ignored. It’s as if someone found a way to rob Fort Knox by simply declaring that the new official policy is to fire all the guards and allow unescorted visits to the vault.The implications for national security are staggering. Sen. Ron Wyden said his office had learned that the attackers gained privileges that allow them to modify core programs in Treasury Department computers that verify federal payments, access encrypted keys that secure financial transactions, and alter audit logs that record system changes. Over at OPM, reports indicate that individuals associated with DOGE connected an unauthorized server into the network. They are also reportedly trainingAI software on all of this sensitive data.This is much more critical than the initial unauthorized access. These new servers have unknown capabilities and configurations, and there’s no evidence that this new code has gone through any rigorous security testing protocols. The AIs being trained are certainly not secure enough for this kind of data. All are ideal targets for any adversary, foreign or domestic, also seeking access to federal data.There’s a reason why every modification—hardware or software—to these systems goes through a complex planning process and includes sophisticated access-control mechanisms. The national security crisis is that these systems are now much more vulnerable to dangerous attacks at the same time that the legitimate system administrators trained to protect them have been locked out.By modifying core systems, the attackers have not only compromised current operations, but have also left behind vulnerabilities that could be exploited in future attacks—giving adversaries such as Russia and China an unprecedentedopportunity. These countries have long targeted these systems. And they don’t just want to gather intelligence—they also want to understand how to disrupt these systems in a crisis.Now, the technical details of how these systems operate, their security protocols, and their vulnerabilities are now potentially exposed to unknown parties without any of the usual safeguards. Instead of having to breach heavily fortified digital walls, these parties  can simply walk through doors that are being propped open—and then erase evidence of their actions.The security implications span three critical areas.First, system manipulation: External operators can now modify operations while also altering audit trails that would track their changes. Second, data exposure: Beyond accessing personal information and transaction records, these operators can copy entire system architectures and security configurations—in one case, the technical blueprint of the country’s federal payment infrastructure. Third, and most critically, is the issue of system control: These operators can alter core systems and authentication mechanisms while disabling the very tools designed to detect such changes. This is more than modifying operations; it is modifying the infrastructure that those operations use.To address these vulnerabilities, three immediate steps are essential. First, unauthorized access must be revoked and proper authentication protocols restored. Next, comprehensive system monitoring and change management must be reinstated—which, given the difficulty of cleaning a compromised system, will likely require a complete system reset. Finally, thorough audits must be conducted of all system changes made during this period.This is beyond politics—this is a matter of national security. Foreign national intelligence organizations will be quick to take advantage of both the chaos and the new insecurities to steal US data and install backdoors to allow for future access.Each day of continued unrestricted access makes the eventual recovery more difficult and increases the risk of irreversible damage to these critical systems. While the full impact may take time to assess, these steps represent the minimum necessary actions to begin restoring system integrity and security protocols.Assuming that anyone in the government still cares.This essay was written with Davi Ottenheimer, and originally appeared in Foreign Policy.]]></content:encoded></item><item><title>Device Trees For Apple T2 SoCs Slated For Upstreaming In Linux 6.15</title><link>https://www.phoronix.com/news/Linux-6.15-Apple-T2-SoC-DTs</link><author>Michael Larabel</author><category>tech</category><pubDate>Thu, 13 Feb 2025 11:58:31 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[While there has been the recent drama over upstream maintainership over Apple Silicon / Asahi Linux code, Sven Peter is continuing to move things forward for the upstream kernel and this week sent out a set of Apple SoC DeviceTree updates intended for the upcoming Linux 6.15 kernel cycle...]]></content:encoded></item><item><title>NVIDIA Wiring Up Autonomous Performance Level Selection To Linux CPPC CPUFreq Driver</title><link>https://www.phoronix.com/news/NVIDIA-Auto-Perf-CPPC-CPUFreq</link><author>Michael Larabel</author><category>tech</category><pubDate>Thu, 13 Feb 2025 11:40:09 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Similar to the Autonomous Performance Level Selection and Energy Performance Preference (EPP) support already found within the Intel P-State and AMD P-State CPU frequency scaling drivers for their modern processors, NVIDIA engineers are working on similar support for the CPPC CPUFreq driver that can benefit their Grace processor...]]></content:encoded></item><item><title>Wayland Color Management &amp; HDR Protocols Expected To Be Merged Imminently</title><link>https://www.phoronix.com/news/Wayland-Color-HDR-Merging-Soon</link><author>Michael Larabel</author><category>tech</category><pubDate>Thu, 13 Feb 2025 11:30:10 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Today could finally be the day. In the works for 5+ years, the Wayland color management and HDR protocol additions look like they will finally be merged in the coming hours...]]></content:encoded></item><item><title>Kubernetes History Inspector, with Kakeru Ishii</title><link>http://sites.libsyn.com/419861/kubernetes-history-inspector-with-kakeru-ishii</link><author>gdevs.podcast@gmail.com (gdevs.podcast@gmail.com)</author><category>podcast</category><category>k8s</category><category>devops</category><enclosure url="https://traffic.libsyn.com/secure/e780d51f-f115-44a6-8252-aed9216bb521/KPOD247.mp3?dest-id=3486674" length="" type=""/><pubDate>Thu, 13 Feb 2025 11:23:00 +0000</pubDate><source url="https://kubernetespodcast.com/">Kubernetes Podcast</source><content:encoded><![CDATA[Kakeru is the initiator of the Kubernetes History Inspector or KHI. An open source tool that allows you to visualise Kubernetes Logs and troubleshoot issues. We discussed what the tool does, how it's built and what was the motivation behind Open sourcing it.Do you have something cool to share? Some questions? Let us know: News of the week ]]></content:encoded></item><item><title>Bridging the AI Learning Gap</title><link>https://www.oreilly.com/radar/bridging-the-ai-learning-gap/</link><author>Andrew Stellman</author><category>dev</category><category>ai</category><pubDate>Thu, 13 Feb 2025 11:09:50 +0000</pubDate><source url="https://www.oreilly.com/radar">Oreilly ML</source><content:encoded><![CDATA[When I started working on the new edition of  back in 2023, AI tools like ChatGPT and Copilot were already changing how developers write and learn code. It was clear that I needed to cover them. But that raised an interesting challenge: How do you teach new and intermediate developers to use AI effectively?Almost all of the material that I found was aimed at senior developers—people who can recognize patterns in code, spot the subtle errors often found in AI-generated code, and refine and refactor AI output. But the audience for the book—a developer learning C# as their first, second, or third language—doesn’t yet have these skills. It became increasingly clear that they would need a new strategy.Designing an effective AI learning path that worked with the Head First method—which engages readers through active learning and interactive puzzles, exercises, and other elements—took months of intense research and experimentation. The result was , a new series of hands-on elements that I designed to teach developers how to learn with AI, not just generate code. The name is a play on “sensei,” reflecting the role of AI as a teacher or instructor rather than just a tool.The key realization was that there’s a big difference between using AI as a code generation tool and using it as a learning tool. That distinction is a critical part of the learning path, and it took time to fully understand. Sens-AI guides learners through a series of incremental learning elements that get them working with AI immediately, creating a satisfying experience from the start while they progressively learn the prompting skills they’ll lean on as their development skills grow.The Challenge of Building an AI Learning Path That WorksI developed Sens-AI for the fifth edition of . After more than two decades of writing and teaching for O’Reilly, I’ve learned a lot about how new and intermediate developers learn—and just as importantly, what trips them up. In some ways AI-assisted coding is just another skill to learn, but it comes with its own challenges that make it uniquely difficult for new and intermediate learners to pick up. My goal was to find a way to integrate AI into the learning path without letting it short-circuit the learning process.Step 1: Show Learners Why They Can’t Just Trust AIOne of the biggest challenges for new and intermediate developers trying to integrate AI into their learning is that an overreliance on AI-generated code can actually prevent them from learning. Coding is a skill, and like all skills it takes practice, which is why  has dozens of hands-on coding exercises designed to teach specific concepts and techniques. A learner who uses AI to do the exercises will struggle to build those skills.The key to using AI safely is —AI-generated explanations and code may look correct, but they often contain subtle mistakes. Learning to spot these errors is critical for using AI effectively, and developing that skill is an important stepping stone on the path to becoming a senior developer. The first step in Sens-AI was to make this lesson clear immediately. I designed an early Sens-AI exercise to demonstrate how AI can be confidently wrong.Early in the book, learners complete a pencil-and-paper exercise where they analyze a simple loop and determine how many times it executes.Most readers get the correct answer, but when they feed the same question into an AI chatbot, the AI almost never gets it right.The AI typically explains the logic of the loop well—but its final answer is , because LLM-based AIs don’t execute code.This reinforces an important lesson: AI can be wrong—and sometimes, you are better at solving problems than AI. By seeing AI make a mistake on a problem they already solved correctly, learners immediately understand that they can’t just assume AI is right.Step 2: Show Learners That AI Still Requires EffortThe next challenge was teaching learners to see AI as a tool, not a crutch. AI can solve almost all of the exercises in the book, but a reader who lets AI do that won’t actually learn the skills they came to the book to learn.This led to an important realization: Writing a coding exercise for a person is exactly the same as writing a prompt for an AI.In fact, I realized that I could test my exercises by pasting them verbatim into an AI. If the AI was able to generate a correct solution, that meant my exercise contained all the information a human learner needed to solve it too.This turned into another key Sens-AI exercise:Learners complete a full-page coding exercise by following step-by-step instructions.After solving it themselves, they paste the entire exercise into an AI chatbot to see how it solves the same problem.The AI almost always generates the correct answer, and it often generates exactly the same solution they wrote.This reinforces another critical lesson: Telling an AI what to do is just as difficult as telling a person what to do. Many new developers assume that prompt engineering is just writing a quick instruction—but Sens-AI demonstrates that a good AI prompt is as detailed and structured as a coding exercise. This gives learners an immediate hands-on experience with AI while teaching them that writing effective prompts requires real effort.By first having the learner see that AIs can make mistakes, and then having them generate code for a problem they solved and compare it to their own solution—and even use the AI’s code source of ideas for refactoring—they gain a deeper understanding of how to engage with AI critically. These two opening Sens-AI elements laid the groundwork for a successful AI learning path.The Sens-AI Approach—Making AI a Learning ToolThe final challenge in developing the Sens-AI approach was finding a way to help learners develop a habit of engaging with AI in a positive way. Solving that problem required me to develop a series of practical exercises, each of which gives the learner a specific tool that they can use immediately but also reinforces a positive lesson about how to use AI effectively.One of AI’s most powerful features for developers is its ability to explain code. I built the next Sens-AI element around this by having learners ask AI to add comments to code they just wrote. Since they already understand their own code, they can evaluate the AI’s comments—checking whether the AI understood their logic, spotting where it went wrong, and identifying gaps in its explanations. This provides hands-on training in prompting AI while reinforcing a key lesson: AI doesn’t always get it right, and reviewing its output critically is essential.The next step in the Sens-AI learning path focuses on using , helping learners explore C# topics effectively through prompt engineering techniques. Learners experiment with different AI personas and response styles—casual versus precise explanations, bullet points versus long answers—to see what works best for them. They’re also encouraged to ask follow-up questions, request reworded explanations, and ask for concrete examples that they can use to refine their understanding. To put this into practice, learners research a new C# topic that wasn’t covered earlier in the book. This reinforces the idea that AI is a useful research tool, but only if you guide it effectively.Sens-AI focuses on understanding code first, generating code second. That’s why the learning path only returns to AI-generated code after reinforcing good AI habits. Even then, I had to carefully design exercises to ensure AI was an aid to learning, not a replacement for it. After experimenting with different approaches, I found that generating unit tests was an effective next step.Unit tests work well because their logic is simple and easy to verify, making them a safe way to practice AI-assisted coding. More importantly, writing a good prompt for a unit test forces the learner to describe the code they’re testing—including its behavior, arguments, and return type. This naturally builds strong prompting skills and positive AI habits, encouraging developers to think carefully about their design before asking AI to generate anything.Learning  AI, Not Just Using ItAI is a powerful tool for developers, but using it effectively requires more than just knowing how to generate code. The biggest mistake new developers can make with AI is using it as a crutch for generating code, because that keeps them from learning the coding skills they need to critically evaluate all of the code that AI generates. By giving learners a step-by-step approach that reinforces safe use of AI and great AI habits, and reinforcing it with examples and practice, Sens-AI gives new and intermediate learners an effective AI learning path that works for them.AI-assisted coding isn’t about shortcuts. It’s about learning how to think critically, and about using AI as a positive tool to help us build and learn. Developers who engage critically with AI, refine their prompts, question AI-generated output, and develop effective AI learning habits will be the ones who benefit the most. By helping developers include AI as a part of their skillset from the start, Sens-AI ensures that they don’t just use AI to generate code—they learn how to think, problem-solve, and improve as developers in the process.On April 24, O’Reilly Media will be hosting Coding with AI: The End of Software Development as We Know It—a live virtual tech conference spotlighting how AI is already supercharging developers, boosting productivity, and providing real value to their organizations. If you’re in the trenches building tomorrow’s development practices today and interested in speaking at the event, we’d love to hear from you by March 5. You can find more information and our call for presentations here. ]]></content:encoded></item><item><title>Financially motivated hackers are helping their espionage counterparts and vice versa</title><link>https://arstechnica.com/security/2025/02/financially-motivated-hackers-are-helping-their-espionage-counterparts-and-vice-versa/</link><author>Dan Goodin</author><category>tech</category><enclosure url="https://cdn.arstechnica.net/wp-content/uploads/2018/10/GettyImages-981636794-1152x648.jpg" length="" type=""/><pubDate>Thu, 13 Feb 2025 11:00:40 +0000</pubDate><source url="https://arstechnica.com/">Biz &amp; IT – Ars Technica</source><content:encoded><![CDATA[There’s a growing collaboration between hacking groups engaging in espionage on behalf of nation-states and those seeking financial gains through ransomware and other forms of cybercrime, researchers noted this week.There has always been some level of overlap between these two groups, but it has become more pronounced in recent years. On Tuesday, the Google-owned Mandiant security firm said the uptick comes amid tighter purse strings and as a means for concealing nation-state-sponsored espionage by making it blend in with financially motivated cyberattacks.“Modern cybercriminals are likely to specialize in a particular area of cybercrime and partner with other entities with diverse specializations to conduct operations,” Mandiant researchers explained. “The specialization of cybercrime capabilities presents an opportunity for state-backed groups to simply show up as another customer for a group that normally sells to other criminals. Purchasing malware, credentials, or other key resources from illicit forums can be cheaper for state-backed groups than developing them in-house, while also providing some ability to blend in to financially motivated operations and attract less notice."]]></content:encoded></item><item><title>GenAI Patterns: Reranker</title><link>https://martinfowler.com/articles/gen-ai-patterns/#reranker</link><author>Martin Fowler</author><category>dev</category><category>blog</category><pubDate>Thu, 13 Feb 2025 10:16:00 +0000</pubDate><source url="https://martinfowler.com/feed.atom">Martin Fowler</source><content:encoded><![CDATA[LLMs struggle with large amounts of context. Bharani
      Subramaniam and I explain how to mitigate this common RAG
      problem with a Reranker which takes the document
      fragments from the retriever, and ranks them according to their usefulness.]]></content:encoded></item><item><title>EuroPython: EuroPython February 2025 Newsletter</title><link>https://blog.europython.eu/europython-february-2025-newsletter/</link><author></author><category>dev</category><category>python</category><pubDate>Thu, 13 Feb 2025 08:36:11 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[Hope you&aposre all having a fantastic February. We sure have been busy and got some exciting updates for you as we gear up for EuroPython 2025, which is taking place once again in the beautiful city of Prague. So let&aposs dive right in!EuroPython 2025 is right around the corner and our programme team is hard at work putting together an amazing lineup. But we need your help to shape the conference! We received over 572 fantastic proposals, and now it’s time for Community Voting! 🎉 If you&aposve attended EuroPython before or submitted a proposal this year, you’re eligible to vote.📢 More votes = a stronger, more diverse programme! Spread the word and get your EuroPython friends to cast their votes too.🏃The deadline is , so don’t miss your chance!Want to play a key role in building an incredible conference? Join our review team and help select the best talks for EuroPython 2025! Whether you&aposre a Python expert or an enthusiastic community member, your insights matter.We’d like to also thank the over 100 people who have already signed up to review! For those who haven’t done so yet, please remember to accept your Pretalx link and get your reviews in by You can already start reviewing proposals, and each review takes as little as 5 minutes. We encourage reviewers to go through at least 20-30 proposals, but if you can do more, even better! With almost 600 submissions to pick from, your help ensures we curate a diverse and engaging programme.🏃The deadline is Monday next week, so don’t delay!EuroPython isn’t just present at other Python events—we actively support them too! As a community sponsor, we love helping local PyCons grow and thrive. We love giving back to the community and strengthening Python events across Europe! 🐍💙The EuroPython team had a fantastic time at PyCon + Web in Berlin, meeting fellow Pythonistas, exchanging ideas, and spreading the word about EuroPython 2025. It was great to connect with speakers, organizers, and attendees. Ever wondered how long it takes to walk from Berlin to Prague? A huge thank you to our co-organizers, Cheuk, Artur, and Cristián, for answering that in their fantastic lightning talk about EuroPython!We had some members of the EuroPython team at FOSDEM 2025, connecting with the open-source community and spreading the Python love! 🎉 We enjoyed meeting fellow enthusiasts, sharing insights about the EuroPython Society, and giving away the first EuroPython 2025 stickers. If you stopped by—thank you and we hope to see you in Prague this July.🦒 Speaker Mentorship ProgrammeThe signups for The Speaker Mentorship Programme closed on 22nd January 2025. We’re excited to have matched 43 mentees with 24 mentors from our community. We had an increase in the number of mentees who signed up and that’s amazing! We’re glad to be contributing to the journey of new speakers in the Python community. A massive thank you to our mentors for supporting the mentees and to our mentees; we’re proud of you for taking this step in your journey as a speaker. 26 mentees submitted at least 1 proposal. Out of this number, 13 mentees submitted 1 proposal, 9 mentees submitted 2 proposals, 2 mentees submitted 3 proposals, 1 mentee submitted 4 proposals and lastly, 1 mentee submitted 5 proposals. We wish our mentees the best of luck. We look forward to the acceptance of their proposals.In a few weeks, we will host an online panel session with 2–3 experienced community members who will share their advice with first-time speakers. At the end of the panel, there will be a Q&A session to answer all the participants’ questions.You can watch the recording of the previous year’s workshop here:EuroPython is one of the largest Python conferences in Europe, and it wouldn’t be possible without our sponsors. We are so grateful for the companies who have already expressed interest. If you’re interested in sponsoring EuroPython 2025 as well, please reach out to us at sponsoring@europython.eu.🎤 EuroPython Speakers Share Their ExperiencesWe asked our past speakers to share their experiences speaking at EuroPython. These videos have been published on YouTube as shorts, and we&aposve compiled them into brief clips for you to watch.A big thanks goes to Sebastian Witowski, Jan Smitka, Yuliia Barabash, Jodie Burchell, Max Kahan, and Cheuk Ting Ho for sharing their experiences.Why You Should Submit a Proposal for EuroPython? Part 2Why You Should Submit a Proposal for EuroPython? Part 3📊 EuroPython Society Board Report The EuroPython conference wouldn’t be what it is without the incredible volunteers who make it all happen. 💞 Behind the scenes, there’s also the EuroPython Society—a volunteer-led non-profit that manages the fiscal and legal aspects of running the conference, oversees its organization, and works on a few smaller projects like the grants programme. To keep everyone in the loop and promote transparency, the Board is sharing regular updates on what we’re working on.That&aposs all for now! Keep an eye on your inbox and our website for more news and announcements. We&aposre counting down the days until we can come together in Prague to celebrate our shared love for Python. 🐍❤️Cheers,The EuroPython Team]]></content:encoded></item><item><title>Sandbox environments: Creating efficient and isolated testing realms</title><link>https://www.youtube.com/watch?v=fh7-lQVmX-o</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/fh7-lQVmX-o?version=3" length="" type=""/><pubDate>Thu, 13 Feb 2025 06:00:33 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io]]></content:encoded></item><item><title>KitOps: AI Model Packaging Standards</title><link>https://www.youtube.com/watch?v=1TD-e_wVe4Q</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/1TD-e_wVe4Q?version=3" length="" type=""/><pubDate>Thu, 13 Feb 2025 06:00:00 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Chat with us on Discord:  https://discord.gg/Tapeh8agYy

Check out our repos:
KitOps      https://github.com/jozu-ai/kitops
PyKitOps Python Library  https://github.com/jozu-ai/pykitops
KitOps MLFlow Plugin   https://github.com/jozu-ai/mlflow-jozu-plugin]]></content:encoded></item><item><title>OpenSUSE Tumbleweed Switching From AppArmor To SELinux For New Installations</title><link>https://www.phoronix.com/news/OpenSUSE-Tumble-Goes-SELinux</link><author>Michael Larabel</author><category>tech</category><pubDate>Thu, 13 Feb 2025 01:47:35 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[SUSE/openSUSE has a long history with the AppArmor Linux security module going back to the Novell days and when AppArmor was originally known as SubDomain. OpenSUSE/SUSE and Ubuntu Linux have been big proponents of AppArmor for Linux security but now moving forward on new installations of openSUSE Tumbleweed it will be defaulting to Security Enhanced Linux (SELinux)...]]></content:encoded></item><item><title>ISC Stormcast For Thursday, February 13th, 2025 https://isc.sans.edu/podcastdetail/9322, (Thu, Feb 13th)</title><link>https://isc.sans.edu/diary/rss/31682</link><author></author><category>infosec</category><pubDate>Thu, 13 Feb 2025 01:26:50 +0000</pubDate><source url="https://isc.sans.edu/">Sans Edu Diaries</source><content:encoded><![CDATA[
 
 (c) SANS Internet Storm Center. https://isc.sans.edu Creative Commons Attribution-Noncommercial 3.0 United States License.]]></content:encoded></item><item><title>DShield SIEM Docker Updates, (Thu, Feb 13th)</title><link>https://isc.sans.edu/diary/rss/31680</link><author></author><category>infosec</category><pubDate>Thu, 13 Feb 2025 01:23:59 +0000</pubDate><source url="https://isc.sans.edu/">Sans Edu Diaries</source><content:encoded><![CDATA[Over the past several weeks, I have been testing various enhancements to the DShield SIEM, to process DShield sensor log from local and cloud sensors with Filebeat and Filebeat modules to easily send Zeek and NetFlow logs back to a local network ELK stack via home router natting. This is a list of updates and enhancements:- Upgrade to the current version of Elastic 8.17.2
- A single script to configure the base configuration of all the docker files (change_perms.sh)
- Addition of docker filebeat for cloud DShield sensor collection (Cowrie, Zeek & NetFlow logs)
- Second filebeat to ingest ISC & Rosti Threat Intel IP data [3]
- Separation of GitHub DShield SIEM & DShield sensor scripts
- Addition to docker Metricbeat for ELK Stack metric information
- Updated dashboard that includes Zeek in the tab lists
- Query in one dashboard is linked to the others
- Tested the ELK Stack in a LXC Proxmox container [4]
- The addition of ELK Stack monitoring of all the Beats and Logstash
- Configured Logstash to parse logs with Beats pipelines (Zeek & NetFlow)
- Removed and merged multiple steps to simplify the installation (change_perms.sh)
- Updated some sections of the Troubleshooting document [5]
- Updated some sections of the docker useful commands [6]
- Updated the DShield SIEM network flow [7]
- Docker update steps to current version [8][1] https://github.com/bruneaug/DShield-SIEM/tree/main
[2] https://github.com/bruneaug/DShield-Sensor
[3] https://github.com/bruneaug/DShield-SIEM/blob/main/AddOn/ISC_threatintel.md
[4] https://github.com/bruneaug/DShield-SIEM/blob/main/AddOn/LXC_Container_DShield-SIEM.md
[5] https://github.com/bruneaug/DShield-SIEM/blob/main/Troubleshooting/Troubleshooting_SIEM_and_Sensor.md
[6] https://github.com/bruneaug/DShield-SIEM/blob/main/Troubleshooting/docker_useful_commands..md
[7] https://github.com/bruneaug/DShield-SIEM/blob/main/Troubleshooting/DShield-SIEM-Flow.png
[8] https://github.com/bruneaug/DShield-SIEM/blob/main/Troubleshooting/docker_useful_commands..md#update-dshield-elk-to-the-latest-version
[9] https://www.elastic.co/guide/en/elasticsearch/reference/current/release-notes-8.17.2.html

 
 (c) SANS Internet Storm Center. https://isc.sans.edu Creative Commons Attribution-Noncommercial 3.0 United States License.]]></content:encoded></item><item><title>Ubuntu 24.04.2 LTS Delayed To Next Week</title><link>https://www.phoronix.com/news/Ubuntu-24.04.2-LTS-Delayed</link><author>Michael Larabel</author><category>tech</category><pubDate>Thu, 13 Feb 2025 00:06:58 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Ubuntu 24.04.2 LTS along with new point releases for its derivatives had been scheduled for release on Thursday. But a last minute issue has delayed this release...]]></content:encoded></item><item><title>2024 State of Rust Survey Results</title><link>https://blog.rust-lang.org/2025/02/13/2024-State-Of-Rust-Survey-results.html</link><author>The Rust Survey Team</author><category>dev</category><category>official</category><category>rust</category><pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate><source url="https://blog.rust-lang.org/">Rust Blog</source><content:encoded><![CDATA[The Rust Survey Team is excited to share the results of our 2024 survey on the Rust Programming language, conducted between December 5, 2024 and December 23, 2024.
As in previous years, the 2024 State of Rust Survey was focused on gathering insights and feedback from Rust users, and all those who are interested in the future of Rust more generally.This ninth edition of the survey surfaced new insights and learning opportunities straight from the global Rust language community, which we will summarize below. In addition to this blog post,  containing charts with aggregated results of all questions in the survey.Our sincerest thanks to every community member who took the time to express their opinions and experiences with Rust over the past year. Your participation will help us make Rust better for everyone.There's a lot of data to go through, so strap in and enjoy!As shown above, in 2024, we have received fewer survey views than in the previous year. This was likely caused simply by the fact that the survey ran only for two weeks, while in the previous year it ran for almost a month. However, the completion rate has also dropped, which seems to suggest that the survey might be a bit too long. We will take this into consideration for the next edition of the survey.The State of Rust survey not only gives us excellent insight into how many Rust users around the world are using and experiencing the language but also gives us insight into the makeup of our global community. This information gives us a sense of where the language is being used and where access gaps might exist for us to address over time. We hope that this data and our related analysis help further important discussions about how we can continue to prioritize global access and inclusivity in the Rust community.Same as every year, we asked our respondents in which country they live in. The top 10 countries represented were, in order: United States (22%), Germany (14%), United Kingdom (6%), France (6%), China (5%), Canada (3%), Netherlands (3%), Russia (3%), Australia (2%), and Sweden (2%). We are happy to see that Rust is enjoyed by users from all around the world! You can try to find your country in the chart below:We also asked whether respondents consider themselves members of a marginalized community. Out of those who answered, 74.5% selected no, 15.5% selected yes, and 10% preferred not to say.We have asked the group that selected “yes” which specific groups they identified as being a member of. The majority of those who consider themselves a member of an underrepresented or marginalized group in technology identify as lesbian, gay, bisexual, or otherwise non-heterosexual. The second most selected option was neurodivergent at 46% followed by trans at 35%.Each year, we must acknowledge the diversity, equity, and inclusivity (DEI) related gaps in the Rust community and open source as a whole. We believe that excellent work is underway at the Rust Foundation to advance global access to Rust community gatherings and distribute grants to a diverse pool of maintainers each cycle, which you can learn more about here. Even so, global inclusion and access is just one element of DEI, and the survey working group will continue to advocate for progress in this domain.The number of respondents that self-identify as a Rust user was quite similar to last year, around 92%. This high number is not surprising, since we primarily target existing Rust developers with this survey.Similarly as last year, around 31% of those who did not identify as Rust users cited the perception of difficulty as the primary reason for not using Rust. The most common reason for not using Rust was that the respondents simply haven’t had the chance to try it yet.Of the former Rust users who participated in the 2024 survey, 36% cited factors outside their control as a reason why they no longer use Rust, which is a 10pp decrease from last year. This year, we also asked respondents if they would consider using Rust again if an opportunity comes up, which turns out to be true for a large fraction of the respondents (63%). That is good to hear!Closed answers marked with N/A were not present in the previous version(s) of the survey.Those not using Rust anymore told us that it is because they don't really need it (or the goals of their company changed) or because it was not the right tool for the job. A few reported being overwhelmed by the language or its ecosystem in general or that switching to or introducing Rust would have been too expensive in terms of human effort.Of those who used Rust in 2024, 53% did so on a daily (or nearly daily) basis — an increase of 4pp from the previous year. We can observe an upward trend in the frequency of Rust usage over the past few years, which suggests that Rust is being increasingly used at work. This is also confirmed by other answers mentioned in the Rust at Work section later below.Rust expertise is also continually increasing amongst our respondents! 20% of respondents can write (only) simple programs in Rust (a decrease of 3pp from 2023), while 53% consider themselves productive using Rust — up from 47% in 2023. While the survey is just one tool to measure the changes in Rust expertise overall, these numbers are heartening as they represent knowledge growth for many Rustaceans returning to the survey year over year.Unsurprisingly, the most popular version of Rust is , either the most recent one or whichever comes with the users' Linux distribution. Almost a third of users also use the latest nightly release, due to various reasons (see below). However, it seems that the beta toolchain is not used much, which is a bit unfortunate. We would like to encourage Rust users to use the beta toolchain more (e.g. in CI environments) to help test soon-to-be stabilized versions of Rust.People that use the nightly toolchain mostly do it to gain access to specific unstable language features. Several users have also mentioned that rustfmt works better for them on nightly or that they use the nightly compiler because of faster compilation times.To use Rust, programmers first have to learn it, so we are always interested in finding out how do they approach that. Based on the survey results, it seems that most users learn from Rust documentation and also from The Rust Programming Language book, which has been a favourite learning resource of new Rustaceans for a long time. Many people also seem to learn by reading the source code of Rust crates. The fact that both the documentation and source code of tens of thousands of Rust crates is available on docs.rs and GitHub makes this easier.In terms of answers belonging to the "Other" category, they can be clustered into three categories: people using LLM (large language model) assistants (Copilot, ChatGPT, Claude, etc.), reading the official Rust forums (Discord, URLO) or being mentored while contributing to Rust projects. We would like to extend a big thank you to those making our spaces friendly and welcoming for newcomers, as it is important work and it pays off. Interestingly, a non-trivial number of people "learned by doing" and used rustc error messages and clippy as a guide, which is a good indicator of the quality of Rust diagnostics.In terms of formal education, it seems that Rust has not yet penetrated university curriculums, as this is typically a very slowly moving area. Only a very small number of respondents (around 3%) have taken a university Rust course or used university learning materials.In terms of operating systems used by Rustaceans, Linux was the most popular choice, and it seems that it is getting increasingly popular year after year. It is followed by macOS and Windows, which have a very similar share of usage.As you can see in the wordcloud, there are also a few users that prefer Arch, btw.Rust programmers target a diverse set of platforms with their Rust programs. We saw a slight uptick in users targeting embedded and mobile platforms, but otherwise the distribution of platforms stayed mostly the same as last year. Since the WebAssembly target is quite diverse, we have split it into two separate categories this time. Based on the results it is clear that when using WebAssembly, it is mostly in the context of browsers (23%) rather than other use-cases (7%).We cannot of course forget the favourite topic of many programmers: which IDE (developer environment) they use. Although Visual Studio Code still remains the most popular option, its share has dropped by 5pp this year. On the other hand, the Zed editor seems to have gained considerable traction recently. The small percentage of those who selected "Other" are using a wide range of different tools: from CursorAI to classics like Kate or Notepad++. Special mention to the 3 people using "ed", that's quite an achievement.You can also take a look at the linked wordcloud that summarizes open answers to this question (the "Other" category), to see what other editors are also popular.We were excited to see that more and more people use Rust at work for the majority of their coding, 38% vs 34% from last year. There is a clear upward trend in this metric over the past few years.The usage of Rust within companies also seems to be rising, as 45% of respondents answered that their organisation makes non-trivial use of Rust, which is a 7pp increase from 2023.Once again, the top reason employers of our survey respondents invested in Rust was the ability to build relatively correct and bug-free software. The second most popular reason was Rust’s performance characteristics. 21% of respondents that use Rust at work do so because they already know it, and it's thus their default choice, an uptick of 5pp from 2023. This seems to suggest that Rust is becoming one of the baseline languages of choice for more and more companies.Similarly to the previous year, a large percentage of respondents (82%) report that Rust helped their company achieve its goals. In general, it seems that programmers and companies are quite happy with their usage of Rust, which is great!In terms of technology domains, the situation is quite similar to the previous year. Rust seems to be especially popular for creating server backends, web and networking services and cloud technologies. It also seems to be gaining more traction for embedded use-cases.You can scroll the chart to the right to see more domains. Note that the Automotive domain was not offered as a closed answer in the 2023 survey (it was merely entered through open answers), which might explain the large jump.It is exciting to see the continued growth of professional Rust usage and the confidence so many users feel in its performance, control, security and safety, enjoyability, and more!As always, one of the main goals of the State of Rust survey is to shed light on challenges, concerns, and priorities on Rustaceans’ minds over the past year.We have asked our users about aspects of Rust that limit their productivity. Perhaps unsurprisingly, slow compilation was at the top of the list, as it seems to be a perennial concern of Rust users. As always, there are efforts underway to improve the speed of the compiler, such as enabling the parallel frontend or switching to a faster linker by default. We invite you to test these improvements and let us know if you encounter any issues.Other challenges included subpar support for debugging Rust and high disk usage of Rust compiler artifacts. On the other hand, most Rust users seem to be very happy with its runtime performance, the correctness and stability of the compiler and also Rust's documentation.In terms of specific unstable (or missing) features that Rust users want to be stabilized (or implemented), the most desired ones were async closures and if/let while chains. Well, we have good news! Async closures will be stabilized in the next version of Rust (1.85), and if/let while chains will hopefully follow soon after, once Edition 2024 is released (which will also happen in Rust 1.85).Other coveted features are generators (both sync and async) and more powerful generic const expressions. You can follow the Rust Project Goals to track the progress of these (and other) features.In the open answers to this question, people were really helpful and tried hard to describe the most notable issues limiting their productivity. We have seen mentions of struggles with async programming (an all-time favourite), debuggability of errors (which people generally love, but they are not perfect for everyone) or Rust tooling being slow or resource intensive (rust-analyzer and rustfmt). Some users also want a better IDE story and improved interoperability with other languages.This year, we have also included a new question about the speed of Rust's evolution. While most people seem to be content with the status quo, more than a quarter of people who responded to this question would like Rust to stabilize and/or add features more quickly, and only 7% of respondents would prefer Rust to slow down or completely stop adding new features.Interestingly, when we asked respondents about their main worries for the future of Rust, one of the top answers remained the worry that Rust will become too complex. This seems to be in contrast with the answers to the previous question. Perhaps Rust users still seem to consider the complexity of Rust to be manageable, but they worry that one day it might become too much.We are happy to see that the amount of respondents concerned about Rust Project governance and lacking support of the Rust Foundation has dropped by about 6pp from 2023.Each year, the results of the State of Rust survey help reveal the areas that need improvement in many areas across the Rust Project and ecosystem, as well as the aspects that are working well for our community.If you have any suggestions for the Rust Annual survey, please let us know!We are immensely grateful to those who participated in the 2024 State of Rust Survey and facilitated its creation. While there are always challenges associated with developing and maintaining a programming language, this year we were pleased to see a high level of survey participation and candid feedback that will truly help us make Rust work better for everyone.If you’d like to dig into more details, we recommend you to browse through the full survey report.]]></content:encoded></item><item><title>Extensible Wasm Applications with Go</title><link>https://go.dev/blog/wasmexport</link><author>Cherry Mui</author><category>dev</category><category>official</category><category>go</category><pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate><source url="http://blog.golang.org/feed.atom">Golang Blog</source><content:encoded><![CDATA[
      Cherry Mui
      13 February 2025
      Go 1.24 enhances its WebAssembly (Wasm) capabilities with the
addition of the  directive and the ability to build a reactor
for WebAssembly System Interface (WASI).
These features enable Go developers to export Go functions to Wasm,
facilitating better integration with Wasm hosts and expanding the possibilities
for Go-based Wasm applications.WebAssembly and the WebAssembly System InterfaceWebAssembly (Wasm) is a binary instruction format
that was initially created for web browsers, providing the execution of
high-performance, low-level code at speeds approaching native performance.
Since then, Wasm’s utility has expanded, and it is now used in various
environments beyond the browser.
Notably, cloud providers offer services that directly execute Wasm
executables, taking advantage of the
WebAssembly System Interface (WASI) system call API.
WASI allows these executables to interact with system resources.Go first added support for compiling to Wasm in the 1.11 release, through the
 port.
Go 1.21 added a new port targeting the WASI preview 1 syscall API through the
new  port.Exporting Go Functions to Wasm with Go 1.24 introduces a new compiler directive, , which allows
developers to export Go functions to be called from outside of the
Wasm module, typically from a host application that runs the Wasm runtime.
This directive instructs the compiler to make the annotated function available
as a Wasm export
in the resulting Wasm binary.To use the  directive, simply add it to a function definition://go:wasmexport add
func add(a, b int32) int32 { return a + b }
With this, the Wasm module will have an exported function named  that
can be called from the host.This is analogous to the cgo  directive,
which makes the function available to be called from C,
though  uses a different, simpler mechanism.A WASI reactor is a WebAssembly module that operates continuously, and
can be called upon multiple times to react on events or requests.
Unlike a “command” module, which terminates after its main function finishes,
a reactor instance remains live after initialization, and its exports remain
accessible.With Go 1.24, one can build a WASI reactor with the  build
flag.$ GOOS=wasip1 GOARCH=wasm go build -buildmode=c-shared -o reactor.wasm
The build flag signals to the linker not to generate the  function
(the entry point for a command module), and instead generate an
 function, which performs runtime and package initialization,
along with any exported functions and their dependencies.
The  function must be called before any other exported functions.
The  function will not be automatically invoked.To use a WASI reactor, the host application first initializes it by calling
, then simply invoke the exported functions.
Here is an example using Wazero, a Go-based Wasm runtime
implementation:// Create a Wasm runtime, set up WASI.
r := wazero.NewRuntime(ctx)
defer r.Close(ctx)
wasi_snapshot_preview1.MustInstantiate(ctx, r)

// Configure the module to initialize the reactor.
config := wazero.NewModuleConfig().WithStartFunctions("_initialize")

// Instantiate the module.
wasmModule, _ := r.InstantiateWithConfig(ctx, wasmFile, config)

// Call the exported function.
fn := wasmModule.ExportedFunction("add")
var a, b int32 = 1, 2
res, _ := fn.Call(ctx, api.EncodeI32(a), api.EncodeI32(b))
c := api.DecodeI32(res[0])
fmt.Printf("add(%d, %d) = %d\n", a, b, c)

// The instance is still alive. We can call the function again.
res, _ = fn.Call(ctx, api.EncodeI32(b), api.EncodeI32(c))
fmt.Printf("add(%d, %d) = %d\n", b, c, api.DecodeI32(res[0]))
The  directive and the reactor build mode allow applications to
be extended by calling into Go-based Wasm code.
This is particularly valuable for applications that have adopted Wasm as a
plugin or extension mechanism with well-defined interfaces.
By exporting Go functions, applications can leverage the Go Wasm modules to
provide functionality without needing to recompile the entire application.
Furthermore, building as a reactor ensures that the exported functions can be
called multiple times without requiring reinitialization, making it suitable
for long-running applications or services.Supporting rich types between the host and the clientGo 1.24 also relaxes the constraints on types that can be used as input and
result parameters with  functions.
For example, one can pass a bool, a string, a pointer to an , or a
pointer to a struct which embeds  and contains supported
field types
(see the documentation for detail).
This allows Go Wasm applications to be written in a more natural and ergonomic
way, and removes some unnecessary type conversions.While Go 1.24 has made significant enhancements to its Wasm capabilities,
there are still some notable limitations.Wasm is a single-threaded architecture with no parallelism.
A  function can spawn new goroutines.
But if a function creates a background goroutine, it will not continue
executing when the  function returns, until calling back into
the Go-based Wasm module.While some type restrictions have been relaxed in Go 1.24, there are still
limitations on the types that can be used with  and
 functions.
Due to the unfortunate mismatch between the 64-bit architecture of the client
and the 32-bit architecture of the host, it is not possible to pass pointers in
memory.
For example, a  function cannot take a pointer to a struct that
contains a pointer-typed field.The addition of the ability to build a WASI reactor and export Go functions to
Wasm in Go 1.24 represent a significant step forward for Go’s WebAssembly
capabilities.
These features empower developers to create more versatile and powerful Go-based
Wasm applications, opening up new possibilities for Go in the Wasm ecosystem.]]></content:encoded></item><item><title>Giampaolo Rodola: psutil: drop Python 2.7 support</title><link>https://gmpy.dev/blog/2025/psutil-drop-python-27-support</link><author></author><category>dev</category><category>python</category><pubDate>Wed, 12 Feb 2025 23:00:00 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[About dropping Python 2.7 support in psutil, 3 years ago
I stated:Not a chance, for many years to come. [Python 2.7] currently represents 7-10%
of total downloads, meaning around 70k / 100k downloads per day.Only 3 years later, and to my surprise, downloads for Python 2.7 dropped to
0.36%! As such, as of psutil 7.0.0, I finally decided to drop support for
Python 2.7!These are downloads per month:According to pypistats.org Python 2.7 downloads
represents the 0.28% of the total, around 15.000 downloads per day.Maintaining 2.7 support in psutil had become increasingly difficult, but still
possible. E.g. I could still run tests by using old PYPI
backports.
GitHub Actions could still be
tweaked
to run tests and produce 2.7 wheels on Linux and macOS. Not on Windows though,
for which I had to use a separate service (Appveyor). Still, the amount of
hacks in psutil source code necessary to support Python 2.7 piled up over the
years, and became quite big. Some disadvantages that come to mind:Having to maintain a Python compatibility layers like
  psutil/_compat.py.
  This translated in extra extra code and extra imports.The C compatibility layer to differentiate between Python 2 and 3 (#if
  PY_MAJOR_VERSION <= 3, etc.).Dealing with the string vs. unicode differences, both in Python and in C.Inability to use modern language features, especially f-strings.Inability to freely use s, which created a difference on how CONSTANTS
  were exposed in terms of API.Having to install a specific version of  and other (outdated)
  deps.Relying on the third-party Appveyor CI service to run tests and produce 2.7
  wheels.Running 4 extra CI jobs on every commit (Linux, macOS, Windows 32-bit,
  Windows 64-bit) making the CI slower and more subject to failures (we have
  quite a bit of flaky tests).The distribution of 7 wheels specific for Python 2.7. E.g. in the previous
  release I had to upload:psutil-6.1.1-cp27-cp27m-macosx_10_9_x86_64.whl
psutil-6.1.1-cp27-none-win32.whl
psutil-6.1.1-cp27-none-win_amd64.whl
psutil-6.1.1-cp27-cp27m-manylinux2010_i686.whl
psutil-6.1.1-cp27-cp27m-manylinux2010_x86_64.whl
psutil-6.1.1-cp27-cp27mu-manylinux2010_i686.whl
psutil-6.1.1-cp27-cp27mu-manylinux2010_x86_64.whl
The removal was done in
PR-2841, which removed around
1500 lines of code (nice!). . In doing so, in the doc I
still made the promise that the 6.1.* serie will keep supporting Python 2.7
and will receive  (no new features). It will be
maintained in a specific python2
branch. I explicitly kept
the
setup.py
script compatible with Python 2.7 in terms of syntax, so that, when the tarball
is fetched from PYPI, it will emit an informative error message on . The user trying to install psutil on Python 2.7 will see:$pip2installpsutil
Asofversion.0.0psutilnolongersupportsPython.7.
LatestversionsupportingPython.7ispsutil.1.X.
Installitwith:.
As the informative message states, users that are still on Python 2.7 can still
use psutil with:pip2 install psutil==6.1.*
]]></content:encoded></item><item><title>Kay Hayen: Nuitka Release 2.6</title><link>https://nuitka.net/posts/nuitka-release-26.html</link><author></author><category>dev</category><category>python</category><pubDate>Wed, 12 Feb 2025 23:00:00 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[ Path normalization to native Windows format was required
in more places for the  variant of .The  function doesn’t normalize to native Win32
paths with MSYS2, instead using forward slashes. This required manual
normalization in additional areas. (Fixed in 2.5.1) Fix, give a proper error when extension modules asked to
include failed to be located. instead of a proper error message.
(Fixed in 2.5.1)Fix, files with illegal module names (containing ) in their
basename were incorrectly considered as potential sub-modules for
. These are now skipped. (Fixed in 2.5.1) Improved stability by preventing crashes when stubgen
encounters code it cannot handle. Exceptions from it are now ignored.
(Fixed in 2.5.1) Addressed a crash that occurred when encountering
assignments to non-variables. (Fixed in 2.5.1) Fixed a regression introduced in 2.5 release that could
lead to segmentation faults in exception handling for generators.
(Fixed in 2.5.2) Corrected an issue where dictionary copies of large
split directories could become corrupted. This primarily affected
instance dictionaries, which are created as copies until updated,
potentially causing problems when adding new keys. (Fixed in 2.5.2) Removed the assumption that module dictionaries
always contain only strings as keys. Some modules, like
 on macOS, use non-string keys. (Fixed in 2.5.2) Ensured that the  option correctly
affects the C compilation process. Previously, only individual
disables were applied. (Fixed in 2.5.2) Fixed a crash that could occur during compilation
when unary operations were used within binary operations. (Fixed in
2.5.3) Corrected the handling of
, which could lead to crashes. (Fixed
in 2.5.4) Resolved a segmentation fault occurring at runtime
when calling  with only keyword arguments.
(Fixed in 2.5.5) Harmless warnings generated for x64 DLLs on arm64 with
newer macOS versions are now ignored. (Fixed in 2.5.5) Addressed a crash in Nuitka’s dictionary code that
occurred when copying dictionaries due to internal changes in Python
3.13. (Fixed in 2.5.6) Improved onefile mode signing by applying
 to the signature of binaries, not just
app bundles. (Fixed in 2.5.6) Corrected an issue where too many paths were added as
extra directories from the Nuitka package configuration. This
primarily affected the  package, which currently relies
on the  import hack. (Fixed in 2.5.6) Prevented crashes on macOS when creating onefile
bundles with Python 2 by handling negative CRC32 values. This issue
may have affected other versions as well. (Fixed in 2.5.6) Restored the functionality of code provided in
, which was no longer being applied due to a
regression. (Fixed in 2.5.6) Suppressed the app bundle mode recommendation when it is
already in use. (Fixed in 2.5.6) Corrected path normalization when the output directory
argument includes “~”. GitHub Actions Python is now correctly identified as a
Homebrew Python to ensure proper DLL resolution. (Fixed in 2.5.7) Fixed a reference leak that could occur with
values sent to generator objects. Asyncgen and coroutines were not
affected. (Fixed in 2.5.7) The  scan now correctly handles
cases where both a package init file and competing Python files
exist, preventing compile-time conflicts. (Fixed in 2.5.7) Resolved an issue where handling string constants in
modules created for Python 3.12 could trigger assertions, and modules
created with 3.12.7 or newer failed to load on older Python 3.12
versions when compiled with Nuitka 2.5.5-2.5.6. (Fixed in 2.5.7) Corrected the tuple code used when calling certain
method descriptors. This issue primarily affected a Python 2
assertion, which was not impacted in practice. (Fixed in 2.5.7) Updated resource readers to accept multiple
arguments for , and correctly handle
 and  as keyword-only arguments. The platform encoding is no longer used to decode
 logs. Instead,  is used, as it is sufficient for
matching filenames across log lines and avoids potential encoding
errors. (Fixed in 2.5.7) Requests to statically link libraries for 
are now ignored, as these libraries do not exist. (Fixed in 2.5.7) Fixed a memory leak affecting the results of
functions called via specs. This primarily impacted overloaded hard
import operations. (Fixed in 2.5.7) When multiple distributions for a package are found,
the one with the most accurate file matching is now selected. This
improves handling of cases where an older version of a package (e.g.,
) is overwritten with a different variant (e.g.,
), ensuring the correct version is used for
Nuitka package configuration and reporting. (Fixed in 2.5.8) Prevented a potential crash during onefile
initialization on Python 2 by passing the directory name directly
from the onefile bootstrap, avoiding the use of  which
may not be fully loaded at that point. (Fixed in 2.5.8) Preserved necessary  environment variables on
Windows for packages that require loading DLLs from those locations.
Only  entries not pointing inside the installation prefix are
removed. (Fixed in 2.5.8) Corrected the  check to function
properly when distribution names and package names differ. (Fixed in
2.5.8) Improved package name resolution for Anaconda
distributions by checking conda metadata when file metadata is
unavailable through the usual methods. (Fixed in 2.5.8) Normalized the downloaded gcc path to use native Windows
slashes, preventing potential compilation failures. (Fixed in 2.5.9) Restored static libpython functionality on Linux by
adapting to a signature change in an unexposed API. (Fixed in 2.5.9) Prevented  from being resurrected when a
finalizer is attached, resolving memory leaks that could occur with
 in the presence of exceptions. (Fixed in 2.5.10) Suppressed the gcc download prompt that could appear during
 output on Windows systems without MSVC or with an
improperly installed gcc.Ensured compatibility with monkey patched  or 
functions, which are used in some testing scenarios. Improved the determinism of the JSON statistics
output by sorting keys, enabling reliable build comparisons. Fixed a memory leak in  with finalizers,
which could lead to significant memory consumption when using
 and encountering exceptions. Optimized empty generators (an optimization result) to
avoid generating unused context code, eliminating C compilation
warnings. Fixed a reference leak affecting the  value
in . While typically , this could lead to
observable reference leaks in certain cases. Improved handling of  and 
resurrection, preventing memory leaks with  and
, and ensuring correct execution of  code in
coroutines. Corrected the handling of  objects
resurrecting during deallocation. While not explicitly demonstrated,
this addresses potential issues similar to those encountered with
coroutines, particularly for old-style coroutines created with the
 decorator. Fixed a potential crash during runtime trace collection by
ensuring timely initialization of the output mechanism.]]></content:encoded></item><item><title>Precision agriculture powered by AI for climate-resilient crops</title><link>https://www.datasciencecentral.com/precision-agriculture-powered-by-ai-for-climate-resilient-crops/</link><author>Shanthababu Pandian</author><category>dev</category><category>ai</category><pubDate>Wed, 12 Feb 2025 21:25:50 +0000</pubDate><source url="https://www.datasciencecentral.com/">Data Science Central</source><content:encoded><![CDATA[AI in Agriculture Precision Farming AI-Powered Agriculture Climate-Resilient Crops
Sustainable Farming Practices AI for Pest Control AI for Soil Analysis Machine Learning in Agriculture Smart Farming Solutions IoT in Agriculture Crop Monitoring with AI
Predictive Analytics in Farming AI for Weather Prediction in Agriculture
AI-Driven Precision Irrigation AI in Fertilization Optimization Sustainable Agriculture Technology Advanced Farming Techniques Agriculture Data Analysis with AI
AI-Powered Smart Irrigation Agricultural Innovation with AI]]></content:encoded></item><item><title>Show HN: I made my own OS from scratch because I was bored</title><link>https://jotalea.com.ar/misc/jotaleaos/</link><author>Jotalea</author><category>dev</category><category>hn</category><pubDate>Wed, 12 Feb 2025 20:55:12 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>GitHub Availability Report: January 2025</title><link>https://github.blog/news-insights/company-news/github-availability-report-january-2025/</link><author>Jakub Oleksy</author><category>official</category><pubDate>Wed, 12 Feb 2025 20:49:36 +0000</pubDate><source url="https://github.blog/">Github Blog</source><content:encoded><![CDATA[In January, we experienced three incidents that resulted in degraded performance across GitHub services.January 09 1:26 UTC (lasting 31 minutes)On January 9, 2025, between 01:26 UTC and 01:56 UTC, GitHub experienced widespread disruption to many services, with users receiving 500 responses when trying to access various functionality. This was due to a deployment which introduced a query that saturated a primary database server. On average, the error rate was 6% and peaked at 6.85% of update requests.We were able to mitigate the incident by identifying the source of the problematic query and rolling back the deployment. The internal tooling and our dashboards surfaced the relevant data that helped us quickly identify the problematic query. It took us a total of 14 minutes from the time to engage to finding the errant query.However, we are investing in tooling to detect problematic queries prior to deployment to prevent and to reduce our time to detection and mitigation of issues like this one in the future.January 13 23:35 UTC (lasting 49 minutes)On January 13, 2025, between 23:35 UTC and 00:24 UTC, all Git operations were unavailable due to a configuration change related to traffic routing and testing that caused our internal load balancer to drop requests between services that Git relies upon.We mitigated the incident by rolling back the configuration change.We are improving our monitoring and deployment practices to improve our time to detection and automated mitigation for issues like this in the future.January 30 14:22 UTC (lasting 26 minutes)On January 30, 2025, between 14:22 UTC and 14:48 UTC, web requests to github.com experienced failures (at peak the error rate was 44%), with the average successful request taking over three seconds to complete.This outage was caused by a hardware failure in the caching layer that supports rate limiting. In addition, the impact was prolonged due to a lack of automated failover for the caching layer. A manual failover of the primary to trusted hardware was performed following recovery to ensure that the issue would not reoccur under similar circumstances.As a result of this incident, we will be moving to a high availability cache configuration and adding resilience to cache failures at this layer to ensure requests are able to be handled should similar circumstances happen in the future.Please follow our status page for real-time updates on status changes and post-incident recaps. To learn more about what we’re working on, check out the GitHub Engineering Blog.]]></content:encoded></item><item><title>Show HN: yknotify – Notify when YubiKey needs touch on macOS</title><link>https://github.com/noperator/yknotify</link><author>noperator</author><category>dev</category><category>hn</category><pubDate>Wed, 12 Feb 2025 20:24:59 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Yes, You Have the Right to Film ICE</title><link>https://www.eff.org/deeplinks/2025/02/yes-you-have-right-film-ice</link><author>Matthew Guariglia</author><category>tech</category><enclosure url="https://www.eff.org/files/banner_library/OG-PoliceRecording.png" length="" type=""/><pubDate>Wed, 12 Feb 2025 19:58:33 +0000</pubDate><source url="https://www.eff.org/rss/updates.xml">Deeplinks</source><content:encoded><![CDATA[What to Know When Recording Law EnforcementYour First Amendment Right to Record Law Enforcement Officers Exercising Their Official Duties in PublicSpecial Considerations for Recording AudioDo Not Interfere With Law Enforcement]]></content:encoded></item><item><title>Show HN: A no-build fullstack SSR TypeScript web framework</title><link>https://jsr.io/@fullsoak/fullsoak</link><author>thesephi</author><category>dev</category><category>hn</category><pubDate>Wed, 12 Feb 2025 19:54:52 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>IEEE Unveils the 2025–2030 Strategic Plan</title><link>https://spectrum.ieee.org/ieee-2025-2030-strategic-plan</link><author>IEEE</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjM3NzA5My9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc2MTI3MTcwNn0.LrFFj3crdpb3QjS2y-oZ-dHy3RYNn9U8HYdHYssKuhE/image.jpg?width=600" length="" type=""/><pubDate>Wed, 12 Feb 2025 19:00:06 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[The new strategic goals bolster IEEE’s long-standing mission]]></content:encoded></item><item><title>ARCTIC Freezer 4U-SP5 Provides Effective Cooling For AMD EPYC 9004/9005 CPUs</title><link>https://www.phoronix.com/review/arctic-freezer-4u-sp5</link><author>Michael Larabel</author><category>tech</category><pubDate>Wed, 12 Feb 2025 19:00:00 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Along with the recently reviewed ARCTIC Freezer 4U-M for Ampere Altra, ARCTIC Cooling had also recently sent over their ARCTIC Freezer 4U-SP5 heatsink for cooling AMD EPYC 9004/9005 server processors within 4U rackmount height requirements. This cooler does a very good job at keeping even 400 Watt processors running well.]]></content:encoded></item><item><title>Oracle&apos;s Ellison Calls for Governments To Unify Data To Feed AI</title><link>https://developers.slashdot.org/story/25/02/12/1857208/oracles-ellison-calls-for-governments-to-unify-data-to-feed-ai?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>msmash</author><category>dev</category><category>slashdot</category><pubDate>Wed, 12 Feb 2025 18:56:00 +0000</pubDate><source url="https://developers.slashdot.org/">Slashdot - Dev</source><content:encoded><![CDATA[Oracle co-founder and chairman Larry Ellison said governments should consolidate all national data for consumption by AI models, calling this step the "missing link" for them to take full advantage of the technology. From a report: Fragmented sets of data about a population's health, agriculture, infrastructure, procurement and borders should be unified into a single, secure database that can be accessed by AI models, Ellison said in an on-stage interview with former British Prime Minister Tony Blair at the World Government Summit in Dubai. 

Countries with rich population data sets, such as the UK and United Arab Emirates, could cut costs and improve public services, particularly health care, with this approach, Ellison said. Upgrading government digital infrastructure could also help identify wastage and fraud, Ellison said. IT systems used by the US government are so primitive that it makes it difficult to identify "vast amounts of fraud," he added, pointing to efforts by Elon Musk's team at the Department of Government Efficiency to weed it out.]]></content:encoded></item><item><title>When Platforms and the Government Unite, Remember What’s Private and What Isn’t</title><link>https://www.eff.org/deeplinks/2025/02/when-platforms-and-government-unite-remember-whats-private-and-what-isnt</link><author>Matthew Guariglia</author><category>tech</category><enclosure url="https://www.eff.org/files/banner_library/social-media-surveillance-1b_0.jpg" length="" type=""/><pubDate>Wed, 12 Feb 2025 18:07:52 +0000</pubDate><source url="https://www.eff.org/rss/updates.xml">Deeplinks</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Mesa 25.0-rc3 Released With Numerous RADV &amp; RadeonSI Fixes</title><link>https://www.phoronix.com/news/Mesa-25.0-rc3-Released</link><author>Michael Larabel</author><category>tech</category><pubDate>Wed, 12 Feb 2025 17:51:35 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Mesa 25.0-rc3 is out today as a rather large weekly release candidate to Mesa 25.0 that will be debuting as stable later this month...]]></content:encoded></item><item><title>Fine-tune LLMs with synthetic data for context-based Q&amp;A using Amazon Bedrock</title><link>https://aws.amazon.com/blogs/machine-learning/fine-tune-llms-with-synthetic-data-for-context-based-qa-using-amazon-bedrock/</link><author>Sue Cha</author><category>dev</category><category>ai</category><pubDate>Wed, 12 Feb 2025 17:44:10 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[There’s a growing demand from customers to incorporate generative AI into their businesses. Many use cases involve using pre-trained large language models (LLMs) through approaches like Retrieval Augmented Generation (RAG). However, for advanced, domain-specific tasks or those requiring specific formats, model customization techniques such as fine-tuning are sometimes necessary. Amazon Bedrock provides you with the ability to customize leading foundation models (FMs) such as Anthropic’s Claude 3 Haiku and Meta’s Llama 3.1.Amazon Bedrock is a fully managed service that makes FMs from leading AI startups and Amazon available through an API, so you can choose from a wide range of FMs to find the model that is best suited for your use case. Amazon Bedrock offers a serverless experience, so you can get started quickly, privately customize FMs with your own data, and integrate and deploy them into your applications using AWS tools without having to manage any infrastructure.Fine-tuning is a supervised training process where labeled prompt and response pairs are used to further train a pre-trained model to improve its performance for a particular use case. One consistent pain point of fine-tuning is the lack of data to effectively customize these models. Gathering relevant data is difficult, and maintaining its quality is another hurdle. Furthermore, fine-tuning LLMs requires substantial resource commitment. In such scenarios, synthetic data generation offers a promising solution. You can create synthetic training data using a larger language model and use it to fine-tune a smaller model, which has the benefit of a quicker turnaround time.In this post, we explore how to use Amazon Bedrock to generate synthetic training data to fine-tune an LLM. Additionally, we provide concrete evaluation results that showcase the power of synthetic data in fine-tuning when data is scarce.The solution comprises two main steps:Generate synthetic data using the Amazon Bedrock InvokeModel API.Fine-tune using an Amazon Bedrock custom model.For synthetic data generation, we use a larger language model (such as Anthropic’s Claude 3 Sonnet on Amazon Bedrock) as the teacher model, and a smaller language model (such as Anthropic’s Claude Instant 1.2 or Claude 3 Haiku on Amazon Bedrock) as the student model for fine-tuning. We use the larger teacher model to generate new data based on its knowledge, which is then used to train the smaller student model. This concept is similar to knowledge distillation used in deep learning, except that we’re using the teacher model to generate a new dataset from its knowledge rather than directly modifying the architecture of the student model.The following diagram illustrates the overall flow of the solution.Finally, we share our experiment results, where we compare the performance of the model fine-tuned with synthetic data to the baseline (not fine-tuned) model and to a model fine-tuned with an equal amount of original training data.To generate synthetic data and fine-tune models using Amazon Bedrock, you first need to create an AWS Identity and Access Management (IAM) service role with the appropriate permissions. This role is used by Amazon Bedrock to access the necessary resources on your behalf.If you’re running this code using an Amazon SageMaker notebook instance, edit the IAM role that’s attached to the notebook (for example, AmazonSageMaker-ExecutionRole-XXX) instead of creating a new role. Follow Create a service role for model customization to modify the trust relationship and add the S3 bucket permission. Additionally, on the role’s tab, create the following inline policies:Policy name: bedrock-customization{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "bedrock:InvokeModel",
                "bedrock:ListModelCustomizationJobs",
                "bedrock:DeleteCustomModel",
                "bedrock:CreateModelCustomizationJob",
                "bedrock:StopModelCustomizationJob",
                "bedrock:ListCustomModels",
                "bedrock:GetCustomModel",
                "bedrock:GetModelCustomizationJob"
            ],
            "Resource": "*"
        }
    ]
}
Policy name: iam-pass-role{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
                "${sagemaker-execution-role-arn}"
            ]
        }
    ]
}The final permission policies for the SageMaker execution role should look like the following, which include AmazonSageMaker-ExecutionPolicy, AmazonSageMakerFullAccess, bedrock-customization, and iam-pass-role.Generate synthetic data using the Amazon Bedrock InvokeModel APIWe use the Amazon Bedrock InvokeModel API to generate synthetic data for fine-tuning. You can use the API to programmatically send an inference (text generation) request to the model of your choice. All you need is a well-crafted prompt tailored for data synthesis. We used the following sample prompt for our use case:PROMPT = """
You are an AI assistant who is an expert in Amazon services. Your task is to understand a system that takes in a list of documents, and based on that, answers a question by providing citations for the documents that it referred the answer from.

Your job is to generate three new Question/Answer pairs, emulating the tone, style, and grammar of the original data provided.

Here is the original data :
Input Documents and Question : {document}\n\nQuestion: {question}
Output Answer : {answer}

Strictly return a jsonl with the keys (question, answer, topic). Every topic should be different. The answers should be in the exact same format as the original. The question and the answer should be different in content from the original data provided, and all questions should be diverse and different from each other. Do not answer in any other format. The response should be parsable as a jsonl.
"""The goal of our use case was to fine-tune a model to generate a relevant and coherent answer based on a given reference document and a question. RAG is a popular technique used for such Q&A tasks; however, one significant challenge with RAG is the potential for retrieving unrelated or irrelevant documents, which can lead to inaccurate responses. You can apply fine-tuning to guide the model to better focus on the relevance of the documents to the question instead of using the provided documents without context to answer the question.Our dataset includes Q&A pairs with reference documents regarding AWS services. Each sample has up to five reference documents as context, and a single-line question follows. The following table shows an example.Step 1: Prepare to work with AWS CodeStar projectsIn this step, you create an AWS CodeStar service role and an Amazon EC2 key pair, so that you can begin creating and working with AWS CodeStar projects. If you have used AWS CodeStar before, skip ahead to Step 2Step 2: Create a Project in AWS CodeStar.For this step, follow the instructions in Setting Up AWS CodeStar in the AWS CodeStar User Guide. Do not create a new AWS account, IAM user, or IAM group as part of those instructions. Use the ones you created or identified in Team Setup for AWS Cloud9. When you finish following those instructions, return to this topic.Before you can start using AWS CodeStar, you must complete the following steps.Step 1: Create an accountStep 2: Create the AWS CodeStar Service RoleStep 3: Configure the User’s IAM PermissionsStep 4: Create an Amazon EC2 Key Pair for AWS CodeStar ProjectsStep 5: Open the AWS CodeStar ConsoleHow Do I Get Started with AWS CodeStar?To get started with AWS CodeStar:Prepare to use AWS CodeStar by following the steps in Setting Up AWS CodeStar.Experiment with AWS CodeStar by following the steps in the Getting Started with AWS CodeStar tutorial.Share your project with other developers by following the steps in Add Team Members to an AWS CodeStar Project.Integrate your favorite IDE by following the steps in Use an IDE with AWS CodeStar.Step 2: Create a project in AWS CodeStarIn this step, you create a project in AWS CodeStar.If you already have a project in AWS CodeStar you want to use, skip ahead to Step 3: Create an AWS Cloud9 Development Environment and Connect It to the Project.For this step, follow the instructions in Create a Project in AWS CodeStar in the AWS CodeStar User Guide. In the AWS CodeStar create project wizard, when you get to the Setup tools page or Connect to your source repository page, choose Skip, and then return to this topic.Create a Project in AWS CodeStarYou use the AWS CodeStar console to create a project. If you use a project template, it sets up the required resources for you. The template also includes sample code that you can use to start coding.To create a project, sign in to the AWS Management Console with an IAM user that has the AWSCodeStarFullAccess policy or equivalent permissions. For more information, see Setting Up AWS CodeStar.Note: You must complete the steps in Setting Up AWS CodeStar before you can complete the procedures in this topic.Create a Project in AWS CodeStar (Console)Create a Project in AWS CodeStar (AWS CLI)Answer the following question to the best of your ability. Use and paraphrase the information in the context, if it answers the question. Otherwise, rely on your knowledge and memory.How do I get started with AWS CodeStar?To get started with AWS CodeStar, follow these steps:1. Prepare to work with AWS CodeStar projects:a. Create an AWS CodeStar service role by following the instructions in “Setting Up AWS CodeStar” (Document 2) in the AWS CodeStar User Guide [1].b. Create an Amazon EC2 key pair for AWS CodeStar projects, as described in the same guide [1].2. Create a project in AWS CodeStar:a. Sign in to the AWS Management Console with an IAM user that has the AWSCodeStarFullAccess policy or equivalent permissions [2].b. In the AWS CodeStar console, select one of the available project templates, which will automatically provision all the required resources for your project [3].c. Once your project is provisioned, you can see your running application from the Application endpoints tile [3].3. Connect to the AWS CodeCommit source repository for your project:a. Use the steps provided in the CodeStar console to connect to the AWS CodeCommit source repository for your project [3].b. Begin coding and making changes to your project\’s source code.4. Track and manage changes in the release process:a. Use the project dashboard to track and manage changes in the release process [3].b. View the most recent project activity on the dashboard.5. Share your project with other developers:a. Follow the steps in “Add Team Members to an AWS CodeStar Project” to share your project with other developers [3].6. Integrate your favorite IDE:a. Follow the steps in “Use an IDE with AWS CodeStar” to integrate your preferred Integrated Development Environment (IDE) with AWS CodeStar [3].[1] https://docs.aws.amazon.com/codestar/latest/userguide/setting-up.html[2] https://docs.aws.amazon.com/codestar/latest/userguide/create-project.html[3] https://docs.aws.amazon.com/codestar/latest/userguide/getting-started.htmlFor data synthesis, we asked the model to generate three new Q&A pairs per reference document. However, you can adjust the number as needed. The crucial part is to make the model think deeply about a variety of topics. Because the purpose of generating synthetic data is to enrich the training dataset, it’s more beneficial to have the model look at different parts of the documents and create Q&A pairs with different topics than the original.The following example shows how to generate synthetic data with the Amazon Bedrock InvokeModel API. We tested the preceding prompt with Anthropic’s Claude 3 Sonnet. If you want to test a different model, retrieve the corresponding model ID from Amazon Bedrock model IDs, and replace the modelId variable in the function.import boto3
import json

bedrock = boto3.client(service_name="bedrock-runtime")

def generate_synthetic_data(document, question, answer):
    
    values = {
        "document": document,
        "question": question,
        "answer": answer
    }
    
    body = {
        "messages": [{
            "role": "user", "content": PROMPT.format(**values)
        }],
        "anthropic_version": "bedrock-2023-05-31",
        "max_tokens": 2048,
        "temperature" : 0.5
    }
    
    response = bedrock.invoke_model(
        body=json.dumps(body),
        modelId="anthropic.claude-3-sonnet-20240229-v1:0",
        accept="application/json",
        contentType="application/json"
    )
    
    response_body = json.loads(response.get('body').read())
    
    return response_body['content'][0]['text']
The preceding function returns three JSONL records in strings with question, answer, and topic as keys. The following parse_llm_output function loads the strings and uses regular expressions to retrieve the generated questions and answers. Then, the create_synthetic_samples function combines those two functionalities to produce the final synthetic training samples.import re
import pd

def parse_llm_output(jsonl_string):
    
    question_pattern = re.compile(r'"question":\s*"([^"]+)"')
    answer_pattern = re.compile(r'"answer":\s*"(.*?)"\s*,\s*"topic"') 
    questions = question_pattern.findall(jsonl_string)
    answers = answer_pattern.findall(jsonl_string)
    
    return questions, answers


def create_synthetic_samples(row: pd.Series) -> pd.DataFrame:

    jsonl_string = generate_synthetic_data(row['document'], row['question'], row['answer'])
    questions, answers = parse_llm_output(jsonl_string)
    
    return pd.DataFrame({
        "document": [row['document']] * len(questions),
        "question": questions,
        "answer": answers
    })


def to_customization_format(row):

    msg = {
        "messages": [
            {"role": "user", "content": f"{row['document']}\n\nQuestion: {row['question']}"},
            {"role": "assistant", "content": row['answer']}
        ]
    }
    
    return msg
The following script combines all of the preceding functions and gives you the final training set with both original and synthetic samples. We convert the samples into the format required by the customization job using the to_customization_format function and save them as train.jsonl. Assume the input data is a CSV file with three columns: document, question, and answer.import pandas as pd

# Load original training samples
original_train = pd.read_csv(input_df_path)

# Create synthetic training samples
synthetic_train = pd.concat(original_train.apply(create_synthetic_samples, axis=1).tolist())

# Combine original and synthetic samples
final_train_df = pd.concat([original_train, synthetic_train])

# Convert to the format required by the customization job
final_train = final_train_df.apply(to_customization_format, axis=1).tolist()

# Write to JSONL file    
with open('train.jsonl', 'w') as file:
    for item in final_train:
        json.dump(item, file)
        file.write('\n')
Fine-tune using an Amazon Bedrock custom modelNow that you have the synthetic data generated by the teacher model along with your original data, it’s time to train the student model. We fine-tune the student model using the Amazon Bedrock custom model functionality.Model customization is the process of providing training data to an FM to improve its performance for specific use cases. Amazon Bedrock offers three model customization methods as of this writing:You can create your own custom model using any of these methods through the Amazon Bedrock console or API. For more information on supported models and AWS Regions with various customization methods, please see User guide for model customization. In this section, we focus on how to fine-tune a model using the API.To create a fine-tuning job in Amazon Bedrock, complete the following prerequisite steps:Upload the jsonl file to the training data bucket.Make sure that you have created an IAM role, as described in the PrerequisitesWhen these steps are complete, run the following code to submit a new fine-tuning job. In our use case, the student model was Anthropic’s Claude Instant 1.2. At the time of writing, Anthropic’s Claude 3 Haiku is generally available, and we recommend following the rest of the code using Anthropic’s Claude 3 Haiku. For the release announcement, see Fine-tuning for Anthropic’s Claude 3 Haiku in Amazon Bedrock is now generally available.If you want to try different models, you must check the model provider’s terms of service yourself. Many providers restrict using their models to train competing models. For the latest model support information, see Supported Regions and models for model customization, and replace baseModelIdentifier accordingly. Different models have different hyperparameters. For more information, see Custom model hyperparameters.import boto3
import json
import time

bedrock = boto3.client(service_name='bedrock')
    
# Set parameters
customizationType = "FINE_TUNING"
baseModelIdentifier = "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-instant-v1:2:100k"
roleArn = "${customization-role-arn}"
jobName = "${customization-job-name}"
customModelName = "${customization-model-name}"
hyperParameters = {
    "epochCount": "1",
    "batchSize": "96",
    "learningRateMultiplier": "0.5",
 }
trainingDataConfig = {"s3Uri": "s3://${training-bucket}/train.jsonl"}
outputDataConfig = {"s3Uri": "s3://${output-bucket}/myOutputData"}

# Create job
response_ft = bedrock.create_model_customization_job(
    jobName=jobName, 
    customModelName=customModelName,
    roleArn=roleArn,
    baseModelIdentifier=baseModelIdentifier,
    hyperParameters=hyperParameters,
    trainingDataConfig=trainingDataConfig,
    outputDataConfig=outputDataConfig
)

jobArn = response_ft.get('jobArn')

# Check job status
while True:
    status = bedrock.get_model_customization_job(jobIdentifier=jobArn).get('status')
    if status != 'InProgress':
        print(status)
        break
    else:
        print(status)
    time.sleep(30)
When the status changes to , your fine-tuned student model is ready for use. To run an inference with this custom model, you need to purchase . A flexible option is available for custom models, which can be turned off when not in use and billed by the hour. A cost estimate is provided on the console prior to purchasing provisioned throughput.On the Amazon Bedrock console, choose in the navigation pane. Select the model you fine-tuned and choose Purchase provisioned throughput.The model name and type are automatically selected for you. Select  for . After you make this selection, the estimated cost is shown. If you’re okay with the pricing, choose .When the Provisioned Throughput becomes available, retrieve the ARN of the provisioned custom model and run the inference:import boto3
import json

bedrock = boto3.client(service_name="bedrock-runtime")

def run_student_model(document, question):
    
    values = {
        "document": document,
        "question": question,
    }
    
    body = {
        "messages": [{
            "role": "user", "content": PROMPT.format(**values)
        }],
        "max_tokens": 2048,
        "temperature" : 0.5
    }
    
    response = bedrock.invoke_model(
        body=json.dumps(body),
        modelId="${provisioned_model_arn}",
        accept="application/json",
        contentType="application/json"
    )
    
    response_body = json.loads(response.get('body').read())
    
    return response_body['content'][0]['text']
In this section, we share our experiment results to provide data points on how the synthetic data generated by a teacher model can improve the performance of a student model. For evaluation methods, we used an LLM-as-a-judge approach, where a judge model compares responses from two different models and picks a better response. Additionally, we conducted a manual evaluation on a small subset to assess whether the LLM-as-a-judge and human judges have aligned preferences.We carried out controlled experiments where we compared four different models as follows: 1,500 synthetic training samples for the 4 model were generated by Anthropic’s Claude 3 Sonnet, and we created three synthetic samples per one original reference document (3 samples * 500 original reference documents = 1,500 synthetic samples).Anthropic’s Claude Instant without any customizationAnthropic’s Claude Instant fine-tuned with 500 original training samplesAnthropic’s Claude Instant fine-tuned with 2,000 original training samplesAnthropic’s Claude Instant fine-tuned with 500 original training samples plus 1,500 synthetic training samplesLLM output evaluation is an important step in developing generative AI applications, but it is expensive and takes considerable time if done manually. An alternative solution to systematically evaluate output quality in large volume is the LLM-as-a-judge approach, where an LLM is used to evaluate another LLM’s responses.For our use case, we used Anthropic’s Claude 3 Sonnet and Meta Llama 3 70B as the judges. We asked the LLM judges to compare outputs from two different models and choose one over the other or state a tie. The following chart summarizes the judges’ decisions. Each number represents the percentage of times when the respective model was selected as providing a better answer, excluding tie cases. The test set contained 343 samples.As shown in the preceding chart, the Anthropic’s Claude 3 Sonnet judge preferred the response from the fine-tuned model with synthetic examples over the Anthropic’s Claude Instant base model (84.8% preference) and the fine-tuned model with original 500 samples (72.3% preference). However, the judge concluded that the fine-tuned model with 2,000 original examples was preferred over the fine-tuned model with synthetic examples (32.3% preference). This aligns with the expectation that when large, high-quality original data is available, it’s better to use the large training data that accurately reflects the target data distribution.The Meta Llama judge reached a similar conclusion. As shown in the preceding chart, it preferred the response from the fine-tuned model with synthetic samples over the Anthropic’s Claude Instant base model (75.6% preference) and the fine-tuned model with original 500 examples (76.4% preference), but the fine-tuned model with 2,000 original examples was the ultimate winner.To complement the LLM-as-a-judge result, we conducted manual evaluation with two human judges. We asked the two human evaluators to perform the same pairwise comparison task as the LLM judge, but for 20 examples. The following chart summarizes the results.As shown in the preceding chart, the two human evaluators reached a similar conclusion, reinforcing the LLM-as-a-judge result. The fine-tuned model with synthetic examples produced outputs that were more preferable than the Anthropic’s Claude Instant base model and the fine-tuned model with the original 500 examples; however, it didn’t outperform the fine-tuned model with the 2,000 original examples.These comparative evaluation results from both the LLM judges and human judges strongly demonstrate the power and potential of using data synthesis when training data is scarce. Moreover, by using high-quality data from the teacher model, we can effectively train the student model, which is lightweight and cost-effective for deployment in a production environment.Amazon Bedrock evaluationsRunning LLM-as-a-judge and human evaluation has become much easier with Amazon Bedrock. Model evaluation on Amazon Bedrock allows you to evaluate, compare, and select the best FMs for your use case. Human evaluation workflows can use your own employees or an AWS-managed team as reviewers. For more information on how to set up a human evaluation workflow, see Creating your first model evaluation that uses human workers. The latest feature, LLM-as-a-judge, is now in preview and allows you to assess multiple quality dimensions including correctness, helpfulness, and responsible AI criteria such as answer refusal and harmfulness. For step-by-step instructions, see New RAG evaluation and LLM-as-a-judge capabilities in Amazon Bedrock.Make sure to delete the following resources to avoid incurring cost:Provisioned throughput for the custom modelThe training_bucket and output_bucket S3 bucketsIn this post, we explored how to use Amazon Bedrock to generate synthetic training data using a large teacher language model and fine-tune a smaller student model with synthetic data. We provided instructions on generating synthetic data using the Amazon Bedrock InvokeModel API and fine-tuning the student model using an Amazon Bedrock custom model. Our evaluation results, based on both an LLM-as-a-judge approach and human evaluation, demonstrated the effectiveness of synthetic data in improving the student model’s performance when original training data is limited.Although fine-tuning with a large amount of high-quality original data remains the ideal approach, our findings highlight the promising potential of synthetic data generation as a viable solution when dealing with data scarcity. This technique can enable more efficient and cost-effective model customization for domain-specific or specialized use cases.If you’re interested in working with the AWS Generative AI Innovation Center and learning more about LLM customization and other generative AI use cases, visit Generative AI Innovation Center. is a Deep Learning Architect at the AWS Generative AI Innovation Center, where she specializes in model customization and optimization. She has extensive hands-on experience in solving customers’ business use cases by utilizing generative AI as well as traditional AI/ML solutions. Sujeong holds a M.S. degree in Data Science from New York University.Arijit Ghosh Chowdhury is a Scientist with the AWS Generative AI Innovation Center, where he works on model customization and optimization. In his role, he works on applied research in fine-tuning and model evaluations to enable GenAI for various industries. He has a Master’s degree in Computer Science from the University of Illinois at Urbana Champaign, where his research focused on question answering, search and domain adaptation. is a Senior Applied Scientist at Amazon Generative AI Innovation Center where he helps expedite the variety of use cases of AWS customers. Before joining Amazon, Sungmin was a postdoctoral research fellow at Harvard Medical School. He holds Ph.D. in Computer Science from New York University. Outside of work, Sungmin enjoys hiking, reading and cooking. is an Applied Scientist II at the AWS Generative AI Innovation Center, where she develops generative AI solutions for AWS customers. Her expertise encompasses designing and implementing innovative AI-driven and deep learning techniques, focusing on natural language processing, computer vision, multi-modal learning, and graph learning. Yiyue holds a Ph.D. in Computer Science from the University of Notre Dame, where her research centered on advanced machine learning and deep learning methodologies. Outside of work, she enjoys sports, hiking, and traveling. is a Machine Learning Engineer at the AWS Generative AI Innovation Center, where he works on model customization and optimization for LLMs. He also builds tools to help his team tackle various aspects of the LLM development life cycle—including fine-tuning, benchmarking, and load-testing—that accelerating the adoption of diverse use cases for AWS customers. He holds an M.S. degree in Computer Science from UC Davis. is a Senior Manager of Model Customization at the AWS Generative AI Innovation Center. Her team specializes in helping customers develop differentiating Generative AI solutions using their unique and proprietary data to achieve key business outcomes. She holds a Ph.D in Physics from the University of Iowa, with a focus on astronomical X-ray analysis and instrumentation development. Outside of work, she can be found hiking, mountain biking, and skiing around the mountains in Colorado.]]></content:encoded></item><item><title>Achieve ~2x speed-up in LLM inference with Medusa-1 on Amazon SageMaker AI</title><link>https://aws.amazon.com/blogs/machine-learning/achieve-2x-speed-up-in-llm-inference-with-medusa-1-on-amazon-sagemaker-ai/</link><author>Daniel Zagyva</author><category>dev</category><category>ai</category><pubDate>Wed, 12 Feb 2025 17:41:33 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[This blog post is co-written with Moran Beladev, Manos Stergiadis, and Ilya Gusev from Booking.com.Large language models (LLMs) have revolutionized the field of natural language processing with their ability to understand and generate humanlike text. Trained on broad, generic datasets spanning a wide range of topics and domains, LLMs use their parametric knowledge to perform increasingly complex and versatile tasks across multiple business use cases. Furthermore, companies are increasingly investing resources in customizing LLMs through few-shot learning and fine-tuning to optimize their performance for specialized applications.However, the impressive performance of LLMs comes at the cost of significant computational requirements, driven by their large number of parameters and autoregressive decoding process which is sequential in nature. This combination makes achieving low latency a challenge for use cases such as real-time text completion, simultaneous translation, or conversational voice assistants, where subsecond response times are critical.Researchers developed Medusa, a framework to speed up LLM inference by adding extra heads to predict multiple tokens simultaneously. This post demonstrates how to use Medusa-1, the first version of the framework, to speed up an LLM by fine-tuning it on Amazon SageMaker AI and confirms the speed up with deployment and a simple load test. Medusa-1 achieves an inference speedup of around two times without sacrificing model quality, with the exact improvement varying based on model size and data used. In this post, we demonstrate its effectiveness with a 1.8 times speedup observed on a sample dataset.Introduction to Medusa and its benefits for LLM inference speedLLMs generate text in a sequential manner, which involves autoregressive sampling, with each new token conditional on the previous ones. Generating K tokens necessitates K sequential executions of the model. This token-by-token processing introduces an inherent latency and computational overhead because the model needs to perform a separate forward pass for each new token in the output sequence. The following diagram from Role-Play with Large Language Models illustrates this flow.Speculative decoding tackles this challenge by using a smaller, faster draft model to generate multiple potential token continuations in parallel, which are then verified by a larger, more accurate target model. This parallelization speeds up text generation while maintaining the quality of the target model because the verification task is faster than autoregressive token generation. For a detailed explanation of the concept, refer to the paper Accelerating Large Language Model Decoding with Speculative Sampling. The speculative decoding technique can be implemented using the inference optimization toolkit on Amazon SageMaker Jumpstart.The paper Medusa: Simple LLM Inference Acceleration Framework with Multiple Decoding Heads introduced Medusa as an alternative to speculative decoding. Instead of adding a separate draft model, it adds extra decoding heads to the LLM that generate candidate continuations simultaneously. These candidates are then evaluated in parallel using a tree-based attention mechanism. This parallel processing reduces the number of sequential steps needed, leading to faster inference times. The main advantage of Medusa over speculative decoding is that it eliminates the need to acquire and maintain a separate draft model while achieving higher speedups. For example, when tested on the MT-Bench dataset, the paper reports that Medusa-2 (the second version of Medusa) speeds up inference time by 2.8 times. This outperforms speculative decoding, which only manages to speed up inference time by 1.5 times on the same dataset.The Medusa framework currently supports Llama and Mistral models. Although it offers significant speed improvements, it does come with a memory trade-off (similar to speculative decoding). For instance, adding five Medusa heads to the 7-billion-parameter Mistral model increases the total parameter count by 750 million (150 million per head), which means these additional parameters must be stored in GPU memory, leading to a higher memory requirement. However, in most cases, this increase doesn’t necessitate switching to a higher GPU memory instance. For example, you can still use an  instance with 24 GB of GPU memory to host your 7-billion-parameter Llama or Mistral model with extra Medusa heads.Training Medusa heads requires additional development time and computational resources, which should be factored into project planning and resource allocation. Another important limitation to mention is that the current framework, when deployed on an Amazon SageMaker AI endpoint, only supports a batch size of one—a configuration typically used for low-latency applications.The following diagram from the original Medusa paper authors’ FasterDecoding repository gives a visual Medusa framework overview.There are two main variants of Medusa: – Requires a two-stage approach where you first fine-tune your LLM and then add Medusa heads and train them on top of your frozen fine-tuned LLM – Introduced later as an improvement, fine-tunes both the additional heads and the backbone LLM parameters together, enabling potentially even further latency speedupsThe Medusa paper reports that across models of varying sizes, you can achieve inference speedups of around two times for Medusa-1 and around three times for Medusa-2. With Medusa-1, the predictions are identical to those of the originally fine-tuned LLM. In contrast, with Medusa-2, we might observe slightly different results compared to simple fine-tuning of the LLM because both the heads and the backbone LLM parameters are updated together. In this post, we focus on Medusa-1.We cover the following steps in our solution:Load and prepare the datasetFine-tune an LLM using a SageMaker AI training jobTrain Medusa heads on top of a frozen fine-tuned LLM using a SageMaker AI training jobDeploy the fine-tuned LLM with Medusa heads on a SageMaker AI endpointDemonstrate LLM inference speedupBy following this solution, you can accelerate LLM inference in your applications, leading to faster response times and improved user experience.To build the solution yourself, there are the following prerequisites:Load and prepare the datasetNow that you have cloned the GitHub repository and opened the  notebook, you will load and prepare the dataset in the notebook. We encourage you to read this post while running the code in the notebook. For this post, we use a dataset called sql-create-context, which contains samples of natural language instructions, schema definitions and the corresponding SQL query. It contains 78,577 examples of natural language queries, SQL CREATE TABLE statements, and SQL queries answering the question using the CREATE statement as context. For demonstration purposes, we select 3,000 samples and split them into train, validation, and test sets.You need to run the “Load and prepare the dataset” section of the  to prepare the dataset for fine-tuning. We also included a data exploration script to analyze the length of input and output tokens. After data exploration, we prepare the train, validation, and test sets and upload them to Amazon Simple Storage Service (Amazon S3).Fine-tune an LLM using SageMaker AI training jobWe use the Zephyr 7B β model as our backbone LLM. Zephyr is a series of language models trained to act as helpful assistants, and Zephyr 7B β is a fine-tuned version of Mistral-7B-v0.1, trained on a mix of publicly available and synthetic datasets using Direct Preference Optimization.To launch a SageMaker AI training job, we need to use the PyTorch or Hugging Face estimator. SageMaker AI starts and manages all the necessary Amazon Elastic Compute Cloud (Amazon EC2) instances for us, supplies the appropriate containers, downloads data from our S3 bucket to the container and uploads and runs the specified training script, in our case . We select the hyperparameters based on the QLoRA paper, but we encourage you to experiment with your own combinations. To expedite the execution of this code, we set the number of epochs to 1. However, for better results, it’s generally recommended to set the number of epochs to at least 2 or 3.from sagemaker.pytorch.estimator import PyTorch
from sagemaker.debugger import TensorBoardOutputConfig
import time
import os

def get_current_time():
    return time.strftime("%Y-%m-%d-%H-%M-%S", time.localtime())

def create_estimator(hyperparameters_dict, job_name, role, sess, train_scipt_path):
    metric=[
        {"Name": "loss", "Regex": r"'loss':\s*([0-9.]+)"},
        {"Name": "epoch", "Regex": r"'epoch':\s*([0-9.]+)"},
    ]

    tensorboard_s3_output_path = os.path.join(
       "s3://", sess.default_bucket(), job_name, 'tensorboard'
    )
    print("Tensorboard output path:", tensorboard_s3_output_path)

    tensorboard_output_config = TensorBoardOutputConfig(
        s3_output_path=tensorboard_s3_output_path,
        container_local_output_path=hyperparameters_dict['logging_dir']
    )
    estimator = PyTorch(
        sagemaker_session    = sess,
        entry_point          = train_scipt_path,    # train script
        source_dir           = 'train',      # directory which includes all the files needed for training
        instance_type        = 'ml.g5.4xlarge',   # instances type used for the training job, "local_gpu" for local mode
        metric_definitions   = metric,
        instance_count       = 1,                 # the number of instances used for training
        role                 = role,              # Iam role used in training job to access AWS ressources, e.g. S3
        volume_size          = 300,               # the size of the EBS volume in GB
        framework_version      = '2.1.0',             # the pytorch_version version used in the training job
        py_version           = 'py310',           # the python version used in the training job
        hyperparameters      =  hyperparameters_dict,  # the hyperparameters passed to the training job
        disable_output_compression = True,        # not compress output to save training time and cost
        tensorboard_output_config = tensorboard_output_config
    )
    return estimator
    
# hyperparameters, which are passed into the training job
sft_hyperparameters = {
  ### SCRIPT PARAMETERS ###
  'train_dataset_path': '/opt/ml/input/data/train/train_dataset.json', # path where sagemaker will save training dataset
  'eval_dataset_path': '/opt/ml/input/data/eval/eval_dataset.json', # path where sagemaker will save evaluation dataset
  'model_id': model_id,
  'max_seq_len': 256,                               # max sequence length for model and packing of the dataset
  'use_qlora': True,                                 # use QLoRA model
  ### TRAINING PARAMETERS ###
  'num_train_epochs': 1,                             # number of training epochs
  'per_device_train_batch_size': 1,                  # batch size per device during training
  'gradient_accumulation_steps': 16,                  # number of steps before performing a backward/update pass
  'gradient_checkpointing': True,                    # use gradient checkpointing to save memory
  'optim': "adamw_8bit",                             # use fused adamw 8bit optimizer
  'logging_steps': 15,                               # log every 10 steps
  'save_strategy': "steps",                          # save checkpoint every epoch
  'save_steps': 15,
  'save_total_limit': 2,
  'eval_strategy': "steps",
  'eval_steps': 15,
  'learning_rate': 1e-4,                             # learning rate, based on QLoRA paper
  'bf16': True,                                      # use bfloat16 precision
  'max_grad_norm': 10,                              # max gradient norm based on QLoRA paper
  'warmup_ratio': 0.03,                              # warmup ratio based on QLoRA paper
  'lr_scheduler_type': "constant",                   # use constant learning rate scheduler
  'output_dir': '/opt/ml/checkpoints/',              # Temporary output directory for model checkpoints
  'merge_adapters': True,                            # merge LoRA adapters into model for easier deployment
  'report_to': "tensorboard",                        # report metrics to tensorboard
  'logging_dir': "/opt/ml/output/tensorboard"        # tensorboard logging directory
}
 
sft_job_name = f"sft-qlora-text-to-sql-{get_current_time()}"
data = {
    'train': train_dataset_path,
    'eval': eval_dataset_path
}

sft_estimator = create_estimator(sft_hyperparameters, sft_job_name, role, sess, "fine_tune_llm.py")

sft_estimator.fit(job_name=sft_job_name, inputs=data, wait=False)When our training job has completed successfully after approximately 1 hour, we can use the fine-tuned model artifact for the next step, training the Medusa heads on top of it. To visualize the training metrics in Tensorboard, you can follow the guidance in this documentation: Load and visualize output tensors using the TensorBoard applicationTrain Medusa heads on top of frozen fine-tuned LLM using a SageMaker AI training jobFor training Medusa heads, we can reuse the functions previously mentioned to launch the training job. We selected hyperparameters based on a combination of what the Medusa paper reported and what we found to be best performing after a few experiments. We set the number of Medusa heads to 5 and used the 8-bit AdamW optimizer, as recommended by the paper. For simplicity, we maintained a constant learning rate of 1e-4 with a constant scheduler, similar to the previous fine-tuning step. Although the paper recommends an increased learning rate and a cosine scheduler, we found that our chosen combination of hyperparameters performed well on this dataset. However, we encourage you to experiment with your own hyperparameter settings to potentially achieve even better results.# hyperparameters, which are passed into the training job
medusa_hyperparameters = {
  ### SCRIPT PARAMETERS ###
  'train_dataset_path': '/opt/ml/input/data/train/train_dataset.json', # path where sagemaker will save training dataset
  'eval_dataset_path': '/opt/ml/input/data/eval/eval_dataset.json', # path where sagemaker will save evaluation dataset
  'model_path': '/opt/ml/input/data/fine-tuned-model/',
  'max_seq_len': 256,                               # max sequence length for model and packing of the dataset
  'medusa_num_heads': 5,
  ### TRAINING PARAMETERS ###
  'num_train_epochs': 3,                             # number of training epochs
  'per_device_train_batch_size': 1,                  # batch size per device during training
  'gradient_accumulation_steps': 16,                  # number of steps before performing a backward/update pass
  'gradient_checkpointing': True,                    # use gradient checkpointing to save memory
  'optim': "adamw_8bit",                             # use fused adamw 8bit optimizer
  'logging_steps': 15,                               # log every 10 steps
  'save_strategy': "steps",                          # save checkpoint every epoch
  'save_steps': 15,
  'save_total_limit':2,
  'eval_strategy': "steps",
  'eval_steps': 15,
  'learning_rate': 1e-4,                             # learning rate
  'bf16': True,                                      # use bfloat16 precision
  'max_grad_norm': 10,                              # max gradient norm based on QLoRA paper
  'warmup_ratio': 0.03,                              # warmup ratio based on QLoRA paper
  'lr_scheduler_type': "constant",                   # use constant learning rate scheduler
  'output_dir': '/opt/ml/checkpoints/',              # Temporary output directory for model checkpoints
  'report_to': "tensorboard",                        # report metrics to tensorboard
  'logging_dir': "/opt/ml/output/tensorboard"        # tensorboard logging directory
}

medusa_train_job_name = f"medusa-text-to-sql-{get_current_time()}"
data = {
    'train': train_dataset_path,
    'eval': eval_dataset_path,
    'fine-tuned-model': fine_tuned_model_path
}

medusa_estimator = create_estimator(medusa_hyperparameters, medusa_train_job_name, role, sess, "train_medusa_heads.py")

medusa_estimator.fit(job_name=medusa_train_job_name, inputs=data, wait=False)We found that after 3 epochs, the evaluation loss of Medusa heads was converging, which can be observed in the TensorBoard graph in the following image.Besides the hyperparameters, the main difference is that we pass  as the training entrypoint, where we first add Medusa heads, then freeze the fine-tuned LLM, and we create custom MedusaSFTTrainer class, which is a subclass of the transformers SFTTrainer.# Add medusa heads and freeze base model
add_medusa_heads(
    model,
    medusa_num_heads=script_args.medusa_num_heads,
)
freeze_layers(model)
model.config.torch_dtype = torch_dtype
model.config.use_cache = False

logger.info("Finished loading model and medusa heads")

tokenizer = AutoTokenizer.from_pretrained(script_args.model_path, use_fast=True)
tokenizer.pad_token = tokenizer.eos_token

################
# Training
################
trainer = MedusaSFTTrainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    max_seq_length=script_args.max_seq_length,
    tokenizer=tokenizer,
    dataset_kwargs={
        "add_special_tokens": False,  # We template with special tokens
        "append_concat_token": False,  # No need to add additional separator token
    },
    medusa_num_heads=script_args.medusa_num_heads,
    medusa_heads_coefficient=script_args.medusa_heads_coefficient,
    medusa_decay_coefficient=script_args.medusa_decay_coefficient,
    medusa_scheduler=script_args.medusa_scheduler,
    train_only_medusa_heads=script_args.train_only_medusa_heads,
    medusa_lr_multiplier=script_args.medusa_lr_multiplier
)
trainer.train()In the  function, we add the residual blocks of the Medusa heads, and also override the forward pass for our model to make sure not to train the frozen backbone LLM:def add_medusa_heads(
    model,
    medusa_num_heads,
):
    """
    Args:
        model (nn.Module): The base language model to be used.
        medusa_num_heads (int, optional): Number of additional tokens to predict
    """
    hidden_size = model.lm_head.weight.shape[-1]
    vocab_size = model.lm_head.weight.shape[0]
    model.config.medusa_num_layers = 1
    model.config.medusa_num_heads = medusa_num_heads
    model.medusa_num_heads = medusa_num_heads
    # Create a list of Medusa heads
    model.medusa_heads = nn.ModuleList(
        [
            nn.Sequential(
                ResBlock(hidden_size),
                nn.Linear(hidden_size, vocab_size, bias=False),
            )
            for _ in range(medusa_num_heads)
        ]
    )

    # Ensure medusa_head's dtype and device align with the base_model
    model.medusa_heads.to(model.dtype).to(model.device)
    logger.info(f"Loading medusa heads in {str(model.dtype)} to device {model.device}")

    for i in range(medusa_num_heads):
        # Initialize the weights of each medusa_head using the base model's weights
        model.medusa_heads[i][-1].weight.data[:] = model.lm_head.weight.data[:]

    def forward(
        self,
        input_ids: torch.LongTensor = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[List[torch.FloatTensor]] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        labels: Optional[torch.LongTensor] = None,
        use_cache: Optional[bool] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
        train_only_medusa_heads: bool = False,
    ):
        """Forward pass of the MedusaModel.
        Returns:
            torch.Tensor: A tensor containing predictions from all Medusa heads.
            (Optional) Original predictions from the base model's LM head.
        """
        maybe_grad = torch.no_grad() if train_only_medusa_heads else nullcontext()
        with maybe_grad:
            outputs = self.model(
                input_ids=input_ids,
                attention_mask=attention_mask,
                position_ids=position_ids,
                past_key_values=past_key_values,
                inputs_embeds=inputs_embeds,
                use_cache=use_cache,
                output_attentions=output_attentions,
                output_hidden_states=output_hidden_states,
                return_dict=return_dict,
            )
            hidden_states = outputs[0]
            medusa_logits = [self.lm_head(hidden_states)]
        for i in range(self.medusa_num_heads):
            medusa_logits.append(self.medusa_heads[i](hidden_states))
        return torch.stack(medusa_logits, dim=0)

    model.forward = types.MethodType(forward, model)After the model training is finished (which takes 1 hour), we prepare the model artefacts for deployment and upload it to Amazon S3. Your final model artifact contains both the original fine-tuned model from the previous step under the  prefix and the trained Medusa heads in a file named .Deploy the fine-tuned LLM with Medusa heads on a SageMaker AI endpointFirst, we create a SageMaker AI HuggingFaceModel object and then deploy the model to an endpoint with the following function:import json
from sagemaker.huggingface import HuggingFaceModel, get_huggingface_llm_image_uri


def deploy_model(endpoint_name, instance_type, model_s3_path=None, hf_model_id=None):
    llm_image = get_huggingface_llm_image_uri(
      "huggingface",
      version="2.2.0",
      session=sess,
    )

    print(f"llm image uri: {llm_image}")

    model_data = None
    if model_s3_path:
        model_data = {'S3DataSource': {'S3Uri': model_s3_path, 'S3DataType': 'S3Prefix', 'CompressionType': 'None'}}
        hf_model_id = "/opt/ml/model"
    else:
        assert hf_model_id, "You need to provide either pretrained HF model id, or S3 model data to deploy"
    config = {
      'HF_MODEL_ID': hf_model_id,  # path to where sagemaker stores the model
      'SM_NUM_GPUS': json.dumps(1),  # Number of GPU used per replica
      'MAX_INPUT_LENGTH': json.dumps(1024),  # Max length of input text
      'MAX_TOTAL_TOKENS': json.dumps(2048),  # Max length of the generation (including input text)
    }

    llm_model = HuggingFaceModel(
      name=endpoint_name,
      role=role,
      image_uri=llm_image,
      model_data=model_data,
      env=config
    )

    deployed_llm = llm_model.deploy(
      endpoint_name=endpoint_name,
      initial_instance_count=1,
      instance_type=instance_type,
      container_startup_health_check_timeout=300,
    )
    return deployed_llmWe deploy three LLMs on three SageMaker AI endpoints:Base LLM which isn’t fine-tunedThe LLM that we fine-tunedThe fine-tuned LLM that also has trained Medusa headsYou can deploy the three models in parallel by using a function that we included in the notebook, or you can deploy the models one by one by running the code below:base_deployed_llm = deploy_model( f"base-{get_current_time()}", instance_type="ml.g5.4xlarge", model_s3_path=None, hf_model_id=model_id )
sft_deployed_llm = deploy_model( f"sft-{get_current_time()}", instance_type="ml.g5.4xlarge", model_s3_path=fine_tuned_model_path )
medusa_deployed_llm = deploy_model( f"medusa-{get_current_time()}", instance_type="ml.g5.4xlarge", model_s3_path=medusa_trained_model_path )
After the status for each endpoint becomes , which should take around 15 minutes, we can invoke them for inference. We send the following input:“You are a text to SQL query translator. Users will ask you questions in English and you will generate a SQL query based on the provided SCHEMA. SCHEMA: CREATE TABLE table_name_32 (time VARCHAR, heat VARCHAR, name VARCHAR)
What was Liu Limin's time in heat 4?“We can observe the following responses:The base LLM response contains extra words that aren’t needed:“To retrieve the time of Liu Limin in heat 4 based on the provided SCHEMA, we need to write a SQL query. Since the table name is not provided, let 's assume it's "my_table".  Assuming the table has a primary key (which is not mentioned in the SCHEMA), we can join the table with itself to compare the heat and name of Liu Limin in heat 4 with all the records in the table.  Here's the SQL query:  ``sql SELECT t1.time FROM my_table t1 JOIN my_table t2 ON t1.name = t2.name AND t2.heat = 4 WHERE t1.name = 'Liu Limin' AND t1.heat <> 4; `  Explanation:  1. We're selecting the time` column from the first table (t1) in the FROM clause. 2. We're joining the table with itself (my_table t1 JOIN my_table t2) to compare the name and heat of Liu Limin in heat 4 with all the records in the table. 3. We're filtering the results using the WHERE clause. We're selecting only the records where the name is 'Liu Limin' and the heat is not equal to 4 (i.e., not heat 4). This is to ensure that we're selecting the time of Liu Limin in heat 3.  Note: This query assumes that the table has a unique primary key. If the table doesn't have a primary key, you may need to add additional conditions to the JOIN and WHERE clauses to ensure that we're selecting the correct records.“The fine-tuned LLM response is improved significantly, and contains only the required output:'SELECT time FROM table_name_32 WHERE heat = 4 AND name = "liu limin"'The fine-tuned LLM with trained Medusa heads provides the exact same response as the fine-tuned model, demonstrating that Medusa-1, by design, maintains the output (quality) of the original model:'SELECT time FROM table_name_32 WHERE heat = 4 AND name = "liu limin"'Demonstrate LLM inference speedupTo measure the inference speed improvements, we compare the response times of the deployed fine-tuned LLM and the fine-tuned LLM with Medusa heads on 450 test observations with the following code:import time
import numpy as np
from tqdm import tqdm

def request(sample, deployed_llm):
    prompt = tokenizer.apply_chat_template(sample, tokenize=False, add_generation_prompt=True)
    outputs = deployed_llm.predict({
      "inputs": prompt,
      "parameters": {
        "max_new_tokens": 512,
        "do_sample": False,
        "return_full_text": False,
      }
    })
    return {"role": "assistant", "content": outputs[0]["generated_text"].strip()}

def predict(deployed_llm, test_dataset):
    predicted_answers = []
    latencies = []

    for sample in tqdm(test_dataset):
        start_time = time.time()
        predicted_answer = request(sample["messages"][:2], deployed_llm)
        end_time = time.time()

        latency = end_time - start_time
        latencies.append(latency)
        predicted_answers.append(predicted_answer)

    # Calculate p90 and average latencies
    p90_latency = np.percentile(latencies, 90)
    avg_latency = np.mean(latencies)

    print(f"P90 Latency: {p90_latency:.2f} seconds")
    print(f"Average Latency: {avg_latency:.2f} seconds")

    return predicted_answersFirst, we run predictions using the fine-tuned LLM:sft_predictions = predict(sft_deployed_llm, test_dataset)
P90 Latency: 1.28 seconds
Average Latency: 0.95 secondsThen, we run predictions using the fine-tuned LLM with Medusa heads:medusa_predictions = predict(medusa_deployed_llm, test_dataset)
P90 Latency: 0.80 seconds
Average Latency: 0.53 secondsThe prediction runs should take around 8 and 4 minutes respectively. We can observe that the average latency decreased from 950 to 530 milliseconds, which is an improvement of 1.8 times. You can achieve even higher improvements if your dataset contains longer inputs and outputs. In our dataset, we only had an average of 18 input tokens and 30 output tokens.We want to once again highlight that, with this technique, the output quality is fully maintained, and all the prediction outputs are the same. The model responses for the test set of 450 observations are the same for both with Medusa heads and without Medusa heads:match_percentage = sum(a["content"] == b["content"] for a, b in zip(sft_predictions, medusa_predictions)) / len(sft_predictions) * 100
print(f"Predictions with the fine-tuned model with medusa heads are the same as without medusa heads: {match_percentage:.2f}% of test set ")

Predictions with fine-tuned model with medusa heads are the same as without medusa heads: 100.00% of test set You might notice in your run that a few observations aren’t exactly matching, and you might get a 99% match due to small errors in floating point operations caused by optimizations on GPUs.At the end of this experiment, don’t forget to delete the SageMaker AI endpoints you created:base_deployed_llm.delete_model()
base_deployed_llm.delete_endpoint()
sft_deployed_llm.delete_model()
sft_deployed_llm.delete_endpoint()
medusa_deployed_llm.delete_model()
medusa_deployed_llm.delete_endpoint()In this post, we demonstrated how to fine-tune and deploy an LLM with Medusa heads using the Medusa-1 technique on Amazon SageMaker AI to accelerate LLM inference. By using this framework and SageMaker AI scalable infrastructure, we showed how to achieve up to twofold speedups in LLM inference while maintaining model quality. This solution is particularly beneficial for applications requiring low-latency text generation, such as customer service chat assistants, content creation, and recommendation systems.As a next step, you can explore fine-tuning your own LLM with Medusa heads on your own dataset and benchmark the results for your specific use case, using the provided GitHub repository. is a Senior ML Engineer at AWS Professional Services. He specializes in developing scalable, production-grade machine learning solutions for AWS customers. His experience extends across different areas, including natural language processing, generative AI and machine learning operations. is a Senior Data Scientist at AWS Professional Services. She enjoys supporting customers to build innovative AI/ML solutions on AWS and she is excited about business transformations through the power of data. is a Senior ML Manager at Booking.com. She is leading the content intelligence track which is focused on building, training and deploying content models (computer vision, NLP and generative AI) using the most advanced technologies and models. Moran is also a PhD candidate, researching applying NLP models on social graphs. is a Senior ML Scientist at Booking.com. He specializes in generative NLP and has experience researching, implementing and deploying large deep learning models at scale. is a Senior Machine Learning Engineer at Booking.com. He leads the development of the several LLM systems inside Booking.com. His work focuses on building production ML systems that help millions of travelers plan their trips effectively. is a Machine Learning Engineer at AWS Professional Services. He works closely with customers building their machine learning solutions on AWS, specializes in natural language processing, experimentation and responsible AI, and is passionate about using machine learning to drive meaningful change in the world.]]></content:encoded></item><item><title>LLM-as-a-judge on Amazon Bedrock Model Evaluation</title><link>https://aws.amazon.com/blogs/machine-learning/llm-as-a-judge-on-amazon-bedrock-model-evaluation/</link><author>Adewale Akinfaderin</author><category>dev</category><category>ai</category><pubDate>Wed, 12 Feb 2025 17:36:57 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[The evaluation of large language model (LLM) performance, particularly in response to a variety of prompts, is crucial for organizations aiming to harness the full potential of this rapidly evolving technology. The introduction of an  framework represents a significant step forward in simplifying and streamlining the model evaluation process. This approach allows organizations to assess their AI models’ effectiveness using pre-defined metrics, making sure that the technology aligns with their specific needs and objectives. By adopting this method, companies can more accurately gauge the performance of their AI systems, making informed decisions about model selection, optimization, and deployment. This not only enhances the reliability and efficiency of AI applications, but also contributes to a more strategic and informed approach to technology adoption within the organization.Amazon Bedrock, a fully managed service offering high-performing foundation models from leading AI companies through a single API, has recently introduced two significant evaluation capabilities: LLM-as-a-judge under Amazon Bedrock Model Evaluation and RAG evaluation for Amazon Bedrock Knowledge Bases. Both features use the LLM-as-a-judge technique behind the scenes but evaluate different things. This blog post explores LLM-as-a-judge on Amazon Bedrock Model Evaluation, providing comprehensive guidance on feature setup, evaluating job initiation through both the console and Python SDK and APIs, and demonstrating how this innovative evaluation feature can enhance generative AI applications across multiple metric categories including quality, user experience, instruction following, and safety.Before we explore the technical aspects and implementation details, let’s examine the key features that make LLM-as-a-judge on Amazon Bedrock Model Evaluation particularly powerful and distinguish it from traditional evaluation methods. Understanding these core capabilities will help illuminate why this feature represents a significant advancement in AI model evaluation.Key features of LLM-as-a-judgeAutomated intelligent evaluation: LLM-as-a-judge uses pre-trained models to evaluate responses automatically, providing human-like evaluation quality with up to 98% cost savings. The system dramatically reduces evaluation time from weeks to hours while maintaining consistent evaluation standards across large datasets.Comprehensive metric categories: The evaluation system covers four key metric areas: quality assessment (correctness, completeness, faithfulness), user experience (helpfulness, coherence, relevance), instruction compliance (following instructions, professional style), and safety monitoring (harmfulness, stereotyping, refusal handling).: The feature integrates directly with Amazon Bedrock and remains compatible with existing Amazon Bedrock Model Evaluation features. Users can access the functionality through the AWS Management Console for Amazon Bedrock and quickly integrate their custom datasets for evaluation purposes.: The system supports the evaluation of models hosted on Amazon Bedrock, custom fine-tuned models, and imported models. Users can seamlessly connect their evaluation datasets through Amazon Simple Storage Service (Amazon S3) buckets, making the evaluation process streamlined and efficient.: Amazon Bedrock provides pre-selected, high-quality evaluation models with optimized prompt engineering for accurate assessments. Users don’t need to bring external judge models, because the Amazon Bedrock team maintains and updates a selection of judge models and associated evaluation judge prompts.: The feature enables organizations to perform comprehensive model evaluations at scale without the traditional costs and time investments associated with human evaluation. The automated process maintains high-quality assessments while significantly reducing operational overhead.These features create a powerful evaluation framework that helps organizations optimize their AI model performance while maintaining high standards of quality and safety, all within their secure AWS environment.Now that you understand the key features of LLM-as-a-judge, let’s examine how to implement and use this capability within Amazon Bedrock Model Evaluation. This section provides a comprehensive overview of the architecture and walks through each component, demonstrating how they work together to deliver accurate and efficient model evaluations.LLM-as-a-judge on Amazon Bedrock Model Evaluation provides a comprehensive, end-to-end solution for assessing and optimizing AI model performance. This automated process uses the power of LLMs to evaluate responses across multiple metric categories, offering insights that can significantly improve your AI applications. Let’s walk through the key components of this solution as shown in the following diagram:LLM-as-a-judge on Amazon Bedrock Model Evaluation follows a streamlined workflow that enables systematic model evaluation. Here’s how each component works together in the evaluation process:: The process begins with a prepared dataset containing prompts that will be used to test the model’s performance. The evaluation can be conducted with or without ground truth responses—while including ground truth provides additional comparison points, it’s entirely optional and not required for successful evaluation.: The prompt dataset is converted into JSONL format, which is specifically structured for LLM-as-a-judge evaluation jobs. This format promotes proper processing of evaluation data.: The prepared JSONL file is uploaded to an S3 bucket, serving as the secure storage location for the evaluation data.: The Amazon Bedrock LLM-as-a-judge model evaluation job processes the stored data, running comprehensive assessments across the selected metric categories (including quality, user experience, instruction following, and safety).Automated report generation: Upon completion, the system generates detailed evaluation reports containing metrics, scores, and insights at both aggregate and individual response levels.: Data scientists or machine learning engineers analyze the generated reports to derive actionable insights and make informed decisions.With this solution architecture in mind, let’s explore how to implement LLM-as-a-judge model evaluations effectively, making sure that you get the most valuable insights from your assessment process.To use the LLM-as-a-judge model evaluation, make sure that you have satisfied the following requirements:Selected  and  models enabled in Amazon Bedrock. You can confirm that the models are enabled for your account on the  page of the Amazon Bedrock console.If you’re using a custom model instead of an on-demand model for your generator model, make sure that you have sufficient quota for running a Provisioned Throughput during inference. 
  Go to the AWS Service Quotas console, and check the following quotas: 
    Model units no-commitment Provisioned Throughputs across custom models.Model units per provisioned model for [your custom model name].Both of these fields need to have enough quota to support your Provisioned Throughput model unit. Request a quota increase if necessary to accommodate your expected inference workload.When preparing your dataset for LLM-as-a-judge model evaluation jobs, each prompt must include specific key-value pairs. Here are the required and optional fields:: This key indicates the input for various tasks. It can be used for general text generation where the model needs to provide a response, question-answering tasks where the model must answer a specific question, text summarization tasks where the model needs to summarize a given text, or classification tasks where the model must categorize the provided text.referenceResponse (used for specific metrics with ground truth): This key contains the ground truth or correct response. It serves as the reference point against which the model’s responses will be evaluated if it is provided.: This key is used to generate evaluation scores reported by category, helping organize and segment evaluation results for better analysis.Each line must be a valid JSON objectThe file must use JSONL formatThe dataset should be stored in an Amazon S3 bucketExample JSONL format without ground truth ( is optional):{
    "prompt": "What is machine learning?"
    "category": "technical"
}
{
    "prompt": "Summarize climate change impacts",
    "category": "environmental"
}
Example JSONL format with ground truth ( is optional):{
    "prompt": "What is machine learning?",
    "referenceResponse": "Machine learning is a subset of artificial intelligence that enables systems to learn and improve from experience without being explicitly programmed. It uses algorithms and statistical models to analyze and draw inferences from patterns in data, allowing computers to perform specific tasks without explicit instructions.",
    "category": "technical"
}
{
    "prompt": "Summarize climate change impacts",
    "referenceResponse": "Climate change leads to rising global temperatures, extreme weather events, sea level rise, and disruption of ecosystems. These changes result in more frequent natural disasters, threats to food security, loss of biodiversity, and various public health challenges. The impacts affect agriculture, coastal communities, and vulnerable populations disproportionately.",
    "category": "environmental"
}Start an LLM-as-a-judge model evaluation job using the consoleYou can use LLM-as-a-judge on Amazon Bedrock Model Evaluation to assess model performance through a user-friendly console interface. Follow these steps to start an evaluation job:In the Amazon Bedrock console, choose and then select . On the page, choose the Choose  and select Automatic: LLM-as-a-judge.Enter a name and description and select an . This model will be used as a judge to evaluate the response of a prompt or model from your generative AI application.Choose  and select the model to be used for generating responses in this evaluation job.Select the metrics you want to use to evaluate the model response (such as helpfulness, correctness, faithfulness, relevance, and harmfulness).Select the  for  and for . You can use theoption.Select or create an IAM service role with the proper permissions. This includes service access to Amazon Bedrock, the S3 buckets in the evaluation job, and the models being used in the job. If you create a new IAM role in the evaluation setup, the service will automatically give the role the proper permissions for the job. Specify the output S3 bucket and choose .You will be able to see the evaluation job is . Wait for the job status to change to .When complete, select the job to see its details. The following is the metrics summary (such as 0.83 for helpfulness, 1.00 for correctness, 1.00 for faithfulness, 1.00 for relevance, and 0.00 for harmfulness).To view generation metrics details, scroll down in the model evaluation report and choose any individual metric (like helpfulness or correctness) to see its detailed breakdown.To see each record’s prompt input, generation output, ground truth, and individual scores, choose a metric and select “Prompt details”. Hover over any individual score to view its detailed explanation.Start an LLM-as-a-judge evaluation job using Python SDK and APIsTo use the Python SDK for creating an LLM-as-a-judge model evaluation job, use the following steps. First, set up the required configurations:import boto3
from datetime import datetime

# Generate unique name for the job
job_name = f"Model-evaluation-{datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}"

# Configure your knowledge base and model settings
evaluator_model = "mistral.mistral-large-2402-v1:0"
generator_model = "amazon.nova-pro-v1:0"
role_arn = "arn:aws:iam::<YOUR_ACCOUNT_ID>:role/<YOUR_IAM_ROLE>"

# Specify S3 locations for evaluation data and output
input_data = "s3://<YOUR_BUCKET>/evaluation_data/input.jsonl"
output_path = "s3://<YOUR_BUCKET>/evaluation_output/"

# Create Bedrock client
bedrock_client = boto3.client('bedrock')To create an LLM-as-a-judge model evaluation job:def create_llm_judge_evaluation(
    client,
    job_name: str,
    role_arn: str,
    input_s3_uri: str,
    output_s3_uri: str,
    evaluator_model_id: str,
    generator_model_id: str,
    dataset_name: str = None,
    task_type: str = "General" # must be General for LLMaaJ
):    
    # All available LLM-as-judge metrics
    llm_judge_metrics = [
        "Builtin.Correctness",
        "Builtin.Completeness", 
        "Builtin.Faithfulness",
        "Builtin.Helpfulness",
        "Builtin.Coherence",
        "Builtin.Relevance",
        "Builtin.FollowingInstructions",
        "Builtin.ProfessionalStyleAndTone",
        "Builtin.Harmfulness",
        "Builtin.Stereotyping",
        "Builtin.Refusal"
    ]

    # Configure dataset
    dataset_config = {
        "name": dataset_name or "CustomDataset",
        "datasetLocation": {
            "s3Uri": input_s3_uri
        }
    }

    try:
        response = client.create_evaluation_job(
            jobName=job_name,
            roleArn=role_arn,
            applicationType="ModelEvaluation",
            evaluationConfig={
                "automated": {
                    "datasetMetricConfigs": [
                        {
                            "taskType": task_type,
                            "dataset": dataset_config,
                            "metricNames": llm_judge_metrics
                        }
                    ],
                    "evaluatorModelConfig": {
                        "bedrockEvaluatorModels": [
                            {
                                "modelIdentifier": evaluator_model_id
                            }
                        ]
                    }
                }
            },
            inferenceConfig={
                "models": [
                    {
                        "bedrockModel": {
                            "modelIdentifier": generator_model_id
                        }
                    }
                ]
            },
            outputDataConfig={
                "s3Uri": output_s3_uri
            }
        )
        return response
        
    except Exception as e:
        print(f"Error creating evaluation job: {str(e)}")
        raise
        
 # Create evaluation job
try:
    llm_as_judge_response = create_llm_judge_evaluation(
        client=bedrock_client,
        job_name=job_name,
        role_arn=ROLE_ARN,
        input_s3_uri=input_data,
        output_s3_uri=output_path,
        evaluator_model_id=evaluator_model,
        generator_model_id=generator_model,
        task_type="General"
    )
    print(f"✓ Created evaluation job: {llm_as_judge_response['jobArn']}")
except Exception as e:
    print(f"✗ Failed to create evaluation job: {str(e)}")
    raise
To monitor the progress of your evaluation job:# Get job ARN based on job type
evaluation_job_arn = llm_as_judge_response['jobArn']
# Check job status
check_status = bedrock_client.get_evaluation_job(jobIdentifier=evaluation_job_arn) 
print(f"Job Status: {check_status['status']}")You can also compare multiple foundation models to determine which one works best for your needs. By using the same evaluator model across all comparisons, you’ll get consistent benchmarking results to help identify the optimal model for your use case.# Generator Models
GENERATOR_MODELS = [
    "anthropic.claude-3-haiku-20240307-v1:0",
    "amazon.nova-micro-v1:0"
]

# Consistent Evaluator
EVALUATOR_MODEL = "anthropic.claude-3-haiku-20240307-v1:0"

def run_model_comparison(
    generator_models: List[str],
    evaluator_model: str
) -> List[Dict[str, Any]]:
    evaluation_jobs = []
    
    for generator_model in generator_models:
        job_name = f"llmaaj-{generator_model.split('.')[0]}-{evaluator_model.split('.')[0]}-{datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}"
        
        try:
            response = create_llm_judge_evaluation(
                client=bedrock_client,
                job_name=job_name,
                role_arn=ROLE_ARN,
                input_s3_uri=input_data,
                output_s3_uri=f"{output_path}/{job_name}/",
                evaluator_model_id=evaluator_model,
                generator_model_id=generator_model,
                task_type="General"
            )
            
            job_info = {
                "job_name": job_name,
                "job_arn": response["jobArn"],
                "generator_model": generator_model,
                "evaluator_model": evaluator_model,
                "status": "CREATED"
            }
            evaluation_jobs.append(job_info)
            
            print(f"✓ Created job: {job_name}")
            print(f"  Generator: {generator_model}")
            print(f"  Evaluator: {evaluator_model}")
            print("-" * 80)
            
        except Exception as e:
            print(f"✗ Error with {generator_model}: {str(e)}")
            continue
            
    return evaluation_jobs

# Run model comparison
evaluation_jobs = run_model_comparison(GENERATOR_MODELS, EVALUATOR_MODEL)Correlation analysis for LLM-as-a-judge evaluationsYou can use the Spearman’s rank correlation coefficient to compare evaluation results between different generator models using LLM-as-a-judge in Amazon Bedrock. After retrieving the evaluation results from your S3 bucket, containing evaluation scores across various metrics, you can begin the correlation analysis.Using , compute the correlation coefficient between pairs of generator models, filtering out constant values or error messages to have a valid statistical comparison. The resulting correlation coefficients help identify how similarly different models respond to the same prompts. A coefficient closer to 1.0 indicates stronger agreement between the models’ responses, while values closer to 0 suggest more divergent behavior. This analysis provides valuable insights into model consistency and helps identify cases where different models might produce significantly different outputs for the same input.import json
import boto3
import numpy as np
from scipy import stats

def read_and_organize_metrics_from_s3(bucket_name, file_key):
    s3_client = boto3.client('s3')
    metrics_dict = {}
    
    try:
        response = s3_client.get_object(Bucket=bucket_name, Key=file_key)
        content = response['Body'].read().decode('utf-8')
        
        for line in content.strip().split('\n'):
            if line:
                data = json.loads(line)
                if 'automatedEvaluationResult' in data and 'scores' in data['automatedEvaluationResult']:
                    for score in data['automatedEvaluationResult']['scores']:
                        metric_name = score['metricName']
                        if 'result' in score:
                            metric_value = score['result']
                            if metric_name not in metrics_dict:
                                metrics_dict[metric_name] = []
                            metrics_dict[metric_name].append(metric_value)
        return metrics_dict
    
    except Exception as e:
        print(f"Error: {e}")
        return None

def get_spearmanr_correlation(scores1, scores2):
    if len(set(scores1)) == 1 or len(set(scores2)) == 1:
        return "undefined (constant scores)", "undefined"
    
    try:
        result = stats.spearmanr(scores1, scores2)
        return round(float(result.statistic), 4), round(float(result.pvalue), 4)
    except Exception as e:
        return f"error: {str(e)}", "undefined"

# Extract metrics
bucket_name = "<EVALUATION_OUTPUT_BUCKET>"
file_key1 = "<EVALUATION_FILE_KEY1>"
file_key2 = "<EVALUATION_FILE_KEY2>"

metrics1 = read_and_organize_metrics_from_s3(bucket_name, file_key1)
metrics2 = read_and_organize_metrics_from_s3(bucket_name, file_key2)

# Calculate correlations for common metrics
common_metrics = set(metrics1.keys()) & set(metrics2.keys())

for metric_name in common_metrics:
    scores1 = metrics1[metric_name]
    scores2 = metrics2[metric_name]
    
    if len(scores1) == len(scores2):
        correlation, p_value = get_spearmanr_correlation(scores1, scores2)
        
        print(f"\nMetric: {metric_name}")
        print(f"Number of samples: {len(scores1)}")
        print(f"Unique values in Model 1 scores: {len(set(scores1))}")
        print(f"Unique values in Model 2 scores: {len(set(scores2))}")
        print(f"Model 1 scores range: [{min(scores1)}, {max(scores1)}]")
        print(f"Model 2 scores range: [{min(scores2)}, {max(scores2)}]")
        print(f"Spearman correlation coefficient: {correlation}")
        print(f"P-value: {p_value}")
    else:
        print(f"\nMetric: {metric_name}")
        print("Error: Different number of samples between models")Best practices for LLM-as-a-judge implementationYou can also compare multiple foundation models to determine which one works best for your needs. By using the same evaluator model across all comparisons, you’ll get consistent, scalable results. The following best practices will help you establish standardized benchmarking when comparing different foundation models.Create diverse test datasets that represent real-world use cases and edge cases. For large workloads (more than 1,000 prompts), use stratified sampling to maintain comprehensive coverage while managing costs and completion time. Include both simple and complex prompts to test model capabilities across different difficulty levels.Choose evaluation metrics that align with your specific business objectives and application requirements. Balance quality metrics (correctness, completeness) with user experience metrics (helpfulness, coherence). Include safety metrics when deploying customer-facing applications.Maintain consistent evaluation conditions when comparing different models. Use the same evaluator model across comparisons for standardized benchmarking. Document your evaluation configuration and parameters for reproducibility.Schedule regular evaluation jobs to track model performance over time. Monitor trends across different metric categories to identify areas for improvement. Set up performance baselines and thresholds for each metric.Optimize batch sizes based on your evaluation needs and cost constraints. Consider using smaller test sets for rapid iteration and larger sets for comprehensive evaluation. Balance evaluation frequency with resource utilization.Maintain detailed records of evaluation jobs, including configurations and results. Track improvements and changes in model performance over time. Document any modifications made based on evaluation insights. The optional job description field can help you here.Use evaluation results to guide model selection and optimization. Implement feedback loops to continuously improve prompt engineering. Regularly update evaluation criteria based on emerging requirements and user feedback.Design your evaluation framework to accommodate growing workloads. Plan for increased complexity as you add more models or use cases. Consider automated workflows for regular evaluation tasks.These best practices help establish a robust evaluation framework using LLM-as-a-judge on Amazon Bedrock. For deeper insights into the scientific validation of these practices, including case studies and correlation with human judgments, stay tuned for our upcoming technical deep-dive blog post.LLM-as-a-judge on Amazon Bedrock Model Evaluation represents a significant advancement in automated model assessment, offering organizations a powerful tool to evaluate and optimize their AI applications systematically. This feature combines the efficiency of automated evaluation with the nuanced understanding typically associated with human assessment, enabling organizations to scale their quality assurance processes while maintaining high standards of performance and safety.The comprehensive metric categories, flexible implementation options, and seamless integration with existing AWS services make it possible for organizations to establish robust evaluation frameworks that grow with their needs. Whether you’re developing conversational AI applications, content generation systems, or specialized enterprise solutions, LLM-as-a-judge provides the necessary tools to make sure that your models align with both technical requirements and business objectives.We’ve provided detailed implementation guidance, from initial setup to best practices, to help you use this feature effectively. The accompanying code samples and configuration examples in this post demonstrate how to implement these evaluations in practice. Through systematic evaluation and continuous improvement, organizations can build more reliable, accurate, and trustworthy AI applications.We encourage you to explore LLM-as-a-judge capabilities in the Amazon Bedrock console and discover how automatic evaluation can enhance your AI applications. To help you get started, we’ve prepared a Jupyter notebook with practical examples and code snippets that you can find on our GitHub repository. is a Sr. Data Scientist–Generative AI, Amazon Bedrock, where he contributes to cutting edge innovations in foundational models and generative AI applications at AWS. His expertise is in reproducible and end-to-end AI/ML methods, practical implementations, and helping global customers formulate and develop scalable solutions to interdisciplinary problems. He has two graduate degrees in physics and a doctorate in engineering. is a Generative AI Data Scientist at Amazon Web Services, where he helps customers build innovative and responsible generative AI solutions and products. With a strong background in AI/ML, Ishan specializes in building Generative AI solutions that drive business value. Outside of work, he enjoys playing volleyball, exploring local bike trails, and spending time with his wife and dog, Beau. is a Senior Product Manager on Amazon Bedrock, the AWS Generative AI developer service. He works at the intersection of AI and human interaction with the goal of creating and improving generative AI products and services to meet our needs. Previously, Jesse held engineering team leadership roles at Apple and Lumileds, and was a senior scientist in a Silicon Valley startup. He has an M.S. and Ph.D. from the University of Florida, and an MBA from the University of California, Berkeley, Haas School of Business.]]></content:encoded></item><item><title>From concept to reality: Navigating the Journey of RAG from proof of concept to production</title><link>https://aws.amazon.com/blogs/machine-learning/from-concept-to-reality-navigating-the-journey-of-rag-from-proof-of-concept-to-production/</link><author>Vivek Mittal</author><category>dev</category><category>ai</category><pubDate>Wed, 12 Feb 2025 17:27:52 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[Generative AI has emerged as a transformative force, captivating industries with its potential to create, innovate, and solve complex problems. However, the journey from a proof of concept to a production-ready application comes with challenges and opportunities. Moving from proof of concept to production is about creating scalable, reliable, and impactful solutions that can drive business value and user satisfaction.One of the most promising developments in this space is the rise of Retrieval Augmented Generation (RAG) applications. RAG is the process of optimizing the output of a foundation model (FM), so it references a knowledge base outside of its training data sources before generating a response.The following diagram illustrates a sample architecture.In this post, we explore the movement of RAG applications from their proof of concept or minimal viable product (MVP) phase to full-fledged production systems. When transitioning a RAG application from a proof of concept to a production-ready system, optimization becomes crucial to make sure the solution is reliable, cost-effective, and high-performing. Let’s explore these optimization techniques in greater depth, setting the stage for future discussions on hosting, scaling, security, and observability considerations.The diagram below illustrates the tradeoffs to consider for a production-ready RAG application.The success of a production-ready RAG system is measured by its quality, cost, and latency. Machine learning (ML) engineers must make trade-offs and prioritize the most important factors for their specific use case and business requirements. For example, consider the use case of generating personalized marketing content for a luxury fashion brand. The brand might be willing to absorb the higher costs of using a more powerful and expensive FMs to achieve the highest-quality classifications, because misclassifications could lead to customer dissatisfaction and damage the brand’s reputation. Consider another use case of generating personalized product descriptions for an ecommerce site. The retailer might be willing to accept slightly longer latency to reduce infrastructure and operational costs, as long as the generated descriptions remain reasonably accurate and compelling. The optimal balance of quality, cost, and latency can vary significantly across different applications and industries.Let’s look into practical guidelines on how you can enhance the overall quality of your RAG workflow, including the quality of the retriever and quality of the result generator using Amazon Bedrock Knowledge Bases and other features of Amazon Bedrock. Amazon Bedrock Knowledge Bases provides a fully managed capability that helps you implement the entire RAG workflow from ingestion to retrieval and prompt augmentation without having to build custom integrations to data sources and manage data flows.An effective evaluation framework is crucial for assessing and optimizing RAG systems as they move from proof of concept to production. These frameworks typically include overall metrics for a holistic assessment of the entire RAG pipeline, as well as specific diagnostic metrics for both the retrieval and generation components. This allows for targeted improvements in each phase of the system. By implementing a robust evaluation framework, developers can continuously monitor, diagnose, and enhance their RAG systems, achieving optimal performance across quality, cost, and latency dimensions as the application scales to production levels. Amazon Bedrock Evaluations can help you evaluate your retrieval or end-to-end RAG workflow in Amazon Bedrock Knowledge Bases. In the following sections, we discuss these specific metrics in different phases of the RAG workflow in more detail.For better retrieval performance, the way the data is stored in the vector store has a big impact. For example, your input document might include tables within the PDF. In such cases, using an FM to parse the data will provide better results. You can use advanced parsing options supported by Amazon Bedrock Knowledge Bases for parsing non-textual information from documents using FMs. Many organizations store their data in structured formats within data warehouses and data lakes. Amazon Bedrock Knowledge Bases offers a feature that lets you connect your RAG workflow to structured data stores. This fully managed out-of-the-box RAG solution can help you natively query structured data from where it resides.Another important consideration is the way your source document is split up into chunks. If your document would benefit from inherent relationships within your document, it might be wise to use hierarchical chunking, which allows for more granular and efficient retrieval. Some documents benefit from semantic chunking by preserving the contextual relationship in the chunks, helping make sure that the related information stays together in logical chunks. You can also use your own custom chunking strategy for your RAG application’s unique requirements.RAG applications process user queries by searching across a large set of documents. However, in many situations, you might need to retrieve documents with specific attributes or content. You can use metadata filtering to narrow down search results by specifying inclusion and exclusion criteria. Amazon Bedrock Knowledge Bases now also supports auto generated query filters, which extend the existing capability of manual metadata filtering by allowing you to narrow down search results without the need to manually construct complex filter expressions. This improves retrieval accuracy by making sure the documents are relevant to the query.Writing an effective query is just as important as any other consideration for generation accuracy. You can add a prompt providing instructions to the FM to provide an appropriate answer to the user. For example, a legal tech company would want to provide instructions to restrict the answers to be based on the input documents and not based on general information known to the FM. Query decomposition by splitting the input query into multiple queries is also helpful in retrieval accuracy. In this process, the subqueries with less semantic complexity might find more targeted chunks. These chunks can then be pooled and ranked together before passing them to the FM to generate a response.Reranking, as a post-retrieval step, can significantly improve response quality. This technique uses LLMs to analyze the semantic relevance between the query and retrieved documents, reordering them based on their pertinence. By incorporating reranking, you make sure that only the most contextually relevant information is used for generation, leading to more accurate and coherent responses.Adjusting inference parameters, such as temperature and top-k/p sampling, can help in further refining the output.You can use Amazon Bedrock Knowledge Bases to configure and customize queries and response generation. You can also improve the relevance of your query responses with a reranker model in Amazon Bedrock.The key metrics for retriever quality are context precision, context recall, and context relevance. Context precision measures how well the system ranks relevant pieces of information from the given context. It considers the question, ground truth, and context. Context recall provides the percentage of ground truth claims or key information covered by the retrieved context. Context relevance measures whether the retrieved passages or chunks are relevant for answering the given query, excluding extraneous details. Together, these three metrics offer insight into how effectively the retriever is able to surface the most relevant and focused source material to support a high-quality response.Generator quality can be assessed through several key metrics. Context utilization examines how effectively the generator uses relevant information from the provided source material. Noise sensitivity gauges the generator’s propensity to include inaccurate details from the retrieved content. Hallucination measures the extent to which the generator produces incorrect claims not present in the source data. Self-knowledge reflects the proportion of accurate statements generated that can’t be found in the retrieved chunks. Finally, faithfulness evaluates how closely the generator’s output aligns with the information contained in the source material.For measuring the overall generation quality, the key metrics include measuring the precision, recall, and answer similarity. Precision suggests the proportion of the correct claims in model’s response, whereas recall suggests the proportion of the ground truth claims covered by the model’s response. Answer similarity compares the meaning and content of a generated answer with a reference or ground truth answer. It evaluates how closely the generated answer matches the intended meaning of the ground truth answer.Establishing a feedback loop with an evaluation framework against these quality metrics allows for continuous improvement, where the system can learn from user interactions and refine its performance over time. By optimizing these quality metrics, the RAG system can be designed to deliver reliable, cost-effective, and high-performing results for users.Implementing responsible AI practices is crucial for maintaining ethical and safe deployment of RAG systems. This includes using guardrails to filter harmful content, deny certain topics, mask sensitive information, and ground responses in verified sources to reduce hallucinations.Cost considers the compute resources and infrastructure required to run the system, and latency evaluates the response times experienced by end-users. To optimize cost and latency, implement caching strategies to reduce the need for expensive model inferences. Efficient query batching can also improve overall throughput and reduce resource usage. Balance performance and resource usage to find the ideal configuration that meets your application’s requirements.Use tools like Amazon Bedrock Knowledge Bases so you can take advantage of fully managed support for the end-to-end RAG workflow. It supports many of the advanced RAG capabilities we discussed earlier. By addressing these optimization techniques, you can transition your RAG-powered proof of concept to a robust, production-ready system that delivers high-quality, cost-effective, and low-latency responses to your users.In addition to the server or compute layer, you will also need to consider an orchestration tool, testing environments, and a continuous integration and delivery (CI/CD) pipeline to streamline your application deployment. Having a feedback loop established based on the quality metrics along with a CI/CD pipeline is an important first step to creating self-healing architectures.As your application grows, you will need to make sure your infrastructure can scale to meet the increasing demand. This can involve containerization with Docker or choosing serverless options, implementing load balancing, setting up auto scaling, and choosing between on-premises, cloud, or hybrid solutions. It also includes unique scaling requirements of your frontend application and backend generative AI workflow, as well as the use of content delivery networks (CDNs) and disaster recovery and backup strategies.The following is a sample architecture for a secure and scalable RAG-based web application. This architecture uses Amazon ECS for hosting the service, Amazon CloudFront as a CDN, AWS WAF as a firewall, and Amazon MemoryDB for providing a semantic cache.By carefully considering these aspects of hosting and scaling your infrastructure, you can build a resilient and adaptable system to support your growing web application or service. Stay tuned for more detailed information on these topics in upcoming blog posts.Data privacy, security, and observabilityMaintaining data privacy and security is of utmost importance. This includes implementing security measures at each layer of your application, from encrypting data in transit to setting up robust authentication and authorization controls. It also involves focusing on compute and storage security, as well as network security. Compliance with relevant regulations and regular security audits are essential. Securing your generative AI system is another crucial aspect. By default, Amazon Bedrock Knowledge Bases encrypts the traffic using AWS managed AWS Key Management Service (AWS KMS) keys. You can also choose customer managed KMS keys for more control over encryption keys. For more information on application security, refer to Safeguard a generative AI travel agent with prompt engineering and Amazon Bedrock Guardrails.Comprehensive logging, monitoring, and maintenance are crucial to maintaining a healthy infrastructure. This includes setting up structured logging, centralized log management, real-time monitoring, and strategies for system updates and migrations.By addressing these critical areas, you can build a secure and resilient infrastructure to support your growing web application or service. Stay tuned for more in-depth coverage of these topics in upcoming blog posts.To successfully transition a RAG application from a proof of concept to a production-ready system, you should focus on optimizing the solution for reliability, cost-effectiveness, and high performance. Key areas to address include enhancing retriever and generator quality, balancing cost and latency, and establishing a robust and secure infrastructure.By using purpose-built tools like Amazon Bedrock Knowledge Bases to streamline the end-to-end RAG workflow, organizations can successfully transition their RAG-powered proofs of concept into high-performing, cost-effective, secure production-ready solutions that deliver business value. is a Solution Architect at Amazon Web Services, where he helps organizations architect and implement cutting-edge cloud solutions. With a deep passion for Generative AI, Machine Learning, and Serverless technologies, he specializes in helping customers harness these innovations to drive business transformation. He finds particular satisfaction in collaborating with customers to turn their ambitious technological visions into reality. is a Sr. Enterprise Solutions Architect at AWS, experienced in Software Engineering, Enterprise Architecture, and AI/ML. He is deeply passionate about exploring the possibilities of generative AI. He collaborates with customers to help them build well-architected applications on the AWS platform, and is dedicated to solving technology challenges and assisting with their cloud journey. is a Tech Lead – Generative AI Specialists, author of the book Applied Machine Learning and High-Performance Computing on AWS, and a member of the Board of Directors for Women in Manufacturing Education Foundation Board. She leads machine learning projects in various domains such as computer vision, natural language processing, and generative AI. She speaks at internal and external conferences such AWS re:Invent, Women in Manufacturing West, YouTube webinars, and GHC 23. In her free time, she likes to go for long runs along the beach.]]></content:encoded></item><item><title>Show HN: Game Bub – open-source FPGA retro emulation handheld</title><link>https://eli.lipsitz.net/posts/introducing-gamebub/</link><author>elipsitz</author><category>dev</category><category>hn</category><pubDate>Wed, 12 Feb 2025 17:11:25 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[I’m excited to announce the project I’ve been working on for the last year and a half: , an open-source FPGA based retro emulation handheld, with support for Game Boy, Game Boy Color, and Game Boy Advance games.Game Bub can play physical cartridges, as well as emulated cartridges using ROM files loaded from a microSD card. Game Bub also supports the Game Link Cable in both GB and GBA modes for multiplayer games. I designed the hardware with a number of bonus features, like video out (HDMI) via a custom dock, a rumble motor, real-time clock (for certain games). Additionally, the hardware is designed with extensibility in mind, allowing future software improvements to expand its capabilities.Game Bub has a custom-designed 6 layer PCB featuring a Xilinx XC7A100T FPGA with integrated memory,  display, speakers, rechargable battery, GB/GBA cartridge slot, all packaged up in a custom 3D-printed enclosure.Check out the instructions, code, and design files on GitHub. Note that building a Game Bub unit is fairly complex. If you might be interested in buying a complete Game Bub kit, please fill out this form to help me gauge interest.I had a lot of fun implementing a Game Boy at the hardware level, and I started thinking about how far I could take the project. I was using a Pynq-Z2 development board, which was definitely the right way to get started, but it came with a lot of limitations.I had to use an external monitor for audio/video, and an external gamepad for input, but a real Game Boy, of course, is a portable handheld. I also wanted to add Game Boy Advance support, but the memory architecture of the Pynq-Z2 had access latency that was just barely acceptable for the Game Boy, and would have been completely unacceptable for the Game Boy Advance. I also wanted to make something less “hacky”: a real device that I could play and give to people, not just a bare PCB.Furthermore, while there are open-source FPGA retrogaming projects (e.g. MiSTer), there doesn’t appear to be anything open-source that supports physical Game Boy and Game Boy Advance cartridges, let alone an open-source handheld device.Thus, I somewhat naively set out to design what would become by far my most complex electrical engineering and hardware design project to date.I set out some goals for the project:Build a standalone, rechargable battery-powered FPGA handheldMinimize cost and complexity by using off-the-shelf components wherever possibleCapable of playing Game Boy, Game Boy Color, and Game Boy Advance gamesCapable of using physical cartridges, or emulating cartridges (reading ROM files off of a microSD card)Easy to use: graphical menu and in-game overlayIntegrated display and speakers, with headphone supportIntegrated peripherals (rumble, real-time clock, accelerometer) for emulated cartridgesHDMI video output support for playing on a big screenDecent looking design with good ergonomicsExpansion opportunities in the future: support for more systems, Wi-Fi, etc.And finally, since I was building this project for fun and learning, I wanted to be able to fully understand every single component of the system. I wanted to use my own emulator cores (e.g. not just port them from MiSTer), do my own board design, and write my own drivers to interface with peripherals.A brief rant about FPGA retrogaming#There’s a lot of misleading marketing and hype out there around FPGA retrogaming. Some claim that FPGA retrogaming devices are not emulators (because they supposedly “act like [the system] at the gate level”), that they achieve “perfect accuracy”, or that they’re superior to software emulators.In my opinion, this is blatantly wrong and actively harmful. FPGA retrogaming devices are emulators: they pretend to be something they’re not. And they’re only as accurate as they’re programmed to be, since they’re recreations. An FPGA can make certain aspects of accuracy easier to achieve, but it doesn’t guarantee it.Software emulators can be extremely accurate. Furthermore, perfect accuracy (if it’s even possible) is by no means a requirement to play an entire system’s library of games. Some people claim that FPGA emulators are the only way to “preserve” a system, but I’d argue that software emulators are a significantly more accessible (no special hardware needed!) way to further this goal.I believe that FPGA emulators have only one real advantage over software emulators: they can more easily interface with original hardware, such as physical cartridges or other consoles via link cables.I did this project not because I think that FPGA emulators are inherently better than software emulators, but because I think they’re interesting and fun to build.I began work on the project by doing some initial research and sketching out a high level design.My previous FPGA emulator project used a Xilinx Zynq chip, which integrates FPGA fabric (“PL”) with a dual-core ARM processor running Linux (“PS”). I implemented the entire emulator on the FPGA, and used the Linux system to configure the FPGA, render the UI, and load ROM files from the filesystem.I decided to keep this same division of responsibilities: using the FPGA to do the core emulation, with a separate processor to do support tasks. However, to make the overall design easier to reason about, I decided to to use an FPGA-only chip (without any hard processor cores), and an external microcontroller (MCU) to do the tasks that the ARM cores did before.The FPGA would consume input, directly interface to the game cartridges (through level shifters to support both the 3.3 volt GBA and 5 volt Game Boy), and output audio and video to the speakers and display. The MCU would handle the UI, read ROM files from the microSD card, initialize peripherals (display, DAC, IMU), handle power sequencing, and load the FPGA configuration.I wanted to have Wi-Fi and Bluetooth support: Wi-Fi for software updates, and the possibility of emulating the Game Boy Advance Wireless Adapter, and Bluetooth to support wireless game controllers (when connected to an external display). To reduce complexity (and avoid the need for careful RF design), I looked only for complete Wi-Fi/Bluetooth modules with integrated antennas.An early block diagram I sketched outI also drew out rough sketches of what the final device might look like: placement of buttons, screen, speakers, ports, cartridge slot, and battery. I settled on a vertical Game Boy Color-esque design (as opposed to a horizontal Game Boy Advance-style design), because I felt that this would maximize the space in the back of the device for full-size Game Boy Color cartridges and a battery.After sketching out the goals and high level design, I started component selection: picking out each non-trivial component of the system, evaluating features and requirements (e.g. how they communicate, power consumption and voltages needed).Since I intended to have this manufactured and assembled at JLCPCB, I strongly preferred parts that were available in their part library. One technique I even used for narrowing down part choices was finding the relevant category in their part search, and sorting by their stock count.I initially planned to use an RP2040 microcontroller, with a separate ESP32-WROOM module to support Wi-Fi and Bluetooth.The ESP32 supports both Bluetooth Classic and LE, which is essential for supporting a wide range of controllers, and the RP2040 has USB host support, to support wired controllers.During the schematic design process, I ended up simplifying the RP2040 + ESP32 combination to just a single ESP32-S3 module for a few reasons:I started running out of GPIOs on the RP2040, and I was dedicating 4 of them (2 for UART, 1 for reset, 1 for booting in firmware download mode) to communication with the ESP32. Plus, the ESP32-S3 has more GPIOs overall.I wanted to write the MCU firmware in Rust, and the ESP32-S3 had support for the Rust standard library (via ESP-IDF and esp-idf-hal). This seemed like it would be easier to get the software up and running.Fewer components means easier routing and assemblyThe ESP32-S3 has an SDIO module (for interfacing with the microSD card), and FAT filesystem support (via ESP-IDF). It would be possible to do this with the RP2040 PIO, but having a proper peripheral and driver for this makes it a lot easier.The ESP32-S3 is more powerful than the RP2040, and would probably be able to render a smoother UI.However, the ESP32-S3 has one main disadvantage compared to the original ESP32: it doesn’t have Bluetooth Classic support, only LE. This would greatly limit the range of supported wireless controllers, but I believed the compromise was worth it. I also decided to scrap USB host support, because supporting USB-C dual role (switchable device or host) would have added a lot of additional complexity.If the RP2350 microcontroller (the successor to the RP2040) had been available when I started this project, I may very well have chosen it, since it has even more power, PIO blocks, memory, and GPIO pins. I might have paired it with an RM2 radio module for Wi-Fi and Bluetooth.I wanted a display that would support integer scaling for the Game Boy Advance, which has a 240x160 pixel screen. I was also looking for a screen roughly on the order of 3.0-3.5 inches wide (diagonal), to be comfortable to hold in the hand.I found the ER-TFT035IPS-6 LCD module from EastRising, with a 3.5 inch display, and a 320x480 pixel resolution. This allows for a 2x integer scale for the Game Boy Advance (and a 2x scale plus centering for the 160x144 Game Boy display). This checked off almost all of the boxes: integer scaling, a good size, available at a reasonable price, pretty good documentation (for the ILI9488 LCD controller).ER-TFT035IPS-6 LCD moduleThe main issue, which actually ended up being fairly annoying, is that it’s a 320x480 display, not 480x320. Meaning, it’s oriented in portrait mode, not landscape. I rotated the device 90 degrees to fit in a landscape orientation, but this created two issues:In landscape orientation, the bottom of the display (containing the LCD driver chip and the flex cable) faces to the left or the right, which means that larger bazels are required on the left and right of the display to center the “active area” of the LCD within the handheld.In landscape orientation, the display refreshes from left to right, not top to bottom.The problem with refreshing from left to right is that the Game Boy and Game Boy Advance (and almost every other system) refresh from top to bottom. This means that the display can’t be refreshed perfectly in sync with the game (zero buffering), and single buffering leads to unsightly diagonal tearing. Instead, I had to use triple buffering, where the game is writing to one framebuffer, the LCD driver is reading from another buffer, and there’s one spare swap buffer. This increases the amount of memory used – and because it needed to be accessed by both the game and LCD driver simultaneously (dual port), it needed to be stored in internal block RAM in the FPGA, a scarce resource.So, even though the Game Boy emulator uses <10% of the total logic resources of the FPGA, and the Game Boy Advance uses around 30%, I had to use a large (more expensive, and power hungry) FPGA so that I had enough block RAM.I also stuck a standard size HDMI port into the design, connected directly to the FPGA. HDMI has a few additional, non-video signals that need level shifting from 5V to 3.3V (I opted for discrete transistors), and it requires the source (me!) to supply a small amount of power.I had never previously designed anything that used a lithium ion battery, so I had a fair amount of learning to do. Adafruit was a helpful resource. I needed a way to charge the battery from USB power, and a way to measure how charged it is.Lithium ion batteries can be dangerous if misused. Safely charging a battery is non-trivial, and requires a feedback loop and adjustable voltage sources. A dedicated IC seemed like the best way to do this. A lot of hobbyists use the ultra-cheap TP4056 1A battery charger, but I’d read about a lot of issues it has around safely charging the battery while using it. I decided instead to opt for the TI BQ2407x series of battery charger ICs. They seem to be widely used in commercial products, came with a comprehensive datasheet, and had a few critical features: programmable input and charge current limits, safety timers, and “power path management” for safely charging the battery while the device is on.Typical discharge curve for a 3.7V lipo battery (source: Adafruit)There are a few ways to measure the charge level of the battery, which generally relies on the fact that a lithium ion battery’s voltage depends on its charge level. A fully charged battery is about 4.2 volts, a battery with between 80% and 20% charge is about 3.7 volts, and below that a drained battery falls off pretty quickly to under 3.0 volts. If all you want is a coarse estimate of the battery level, you can use an ADC to read the voltage and estimate whether the battery is fully charged or nearly discharged. However, since the voltage curve is nearly flat between 20% and 80% charge (and is also dependent on the load), this can’t give the fine-grained battery percentage that we’re used to on phones and laptops. Instead, I opted for a discrete fuel gauge IC, the MAX17048. It’s simple to integrate and inexpensive.I decided to use a push button for the main power switch, because I needed to be able to do a graceful shutdown, where the microcontroller could save state (e.g. the current save file for an emulated cartridge) before it actually powered off.I briefly considered using an ultra-low power, always on microcontroller to act as a custom PMIC to provide power switch functionality (and perhaps avoid the need for a separate real-time clock IC, and even a battery gauge). While this would have been flexible and really cool, I figured it wasn’t worth the additional complexity.The main system power ranges from about 3.4 V when the battery is discharged, to 4.2 V when the battery is fully charged, up to 5.0 V when the device is plugged in with USB.The ESP32-S3 module required 3.3 V, and most of the other ICs in the system did too. The main exception is the FPGA, which requires a 1.0 V core power rail, a 1.8 V “auxiliary” power rail, and a 3.3 V power rail for I/O. Moreover, according to the Xilinx Artix-7 datasheet (DS181), these power rails need to be powered on in a particular sequence: for my use, this means 1.0 V, then 1.8 V, then 3.3 V. Additionally, I needed a 5.0 V supply to interface with Game Boy / Game Boy Color cartridges.There are multi-rail power regulators available, and a lot of FPGA development boards use them. However, they all seemed to be expensive and difficult to purchase in low quantities. Instead, I opted for separate power regulators for each rail. I used buck converters instead of linear regulators to maximize power efficiency.I used the TLV62585 converter for the 3.3 V, 1.8 V, and 1.0 V rails. This is a simple, performant buck converter with a “power good” output, which is useful for power sequencing: you can connect the  output of one regulator to the  pin of the next regulator, to power on the rails in the desired order.For the 5.0 V rail, I used the TPS61022 boost converter. This converter is way overkill for the 5.0 V rail (which might use 75mA ), but it was readily available, and conveniently compatible with the same 1µH inductor as the buck converters.According to the FPGA datasheet, the XC7A100T consumes more than 100mW of static power. That is, it consumes that as long as it’s connected to power, even if it’s doing absolutely nothing. I figured I might want to support a low power sleep mode, so I decided to split the FPGA into a separate power domain with an explicit power enable signal from the MCU. I also used an AP2191W load switch for the FPGA’s 3.3 V rail to be able to keep the 1.0 V → 1.8 V → 3.3 V sequencing.I wanted the device to have both speakers and a 3.5mm headphone jack. Ultimately, the FPGA generates an I2S digital audio signal, and I needed a DAC to convert it to an analog audio signal, and then an amplifier to drive the speakers (or headphones). I wanted digital volume control (to support volume buttons, rather than a volume knob or slider), and I needed some way to switch the audio output between speakers and the headphones, depending on whether or not headphones are plugged in. With no real audio experience, this seemed like a daunting task.While searching for multiple separate components, I stumbled upon the TLV320DAC3101. It combines a stereo DAC with a speaker amplifier and a headphone driver. Additionally, it supports digital volume control, and headphone detection. I think this chip is a good example of how thoughtful component selection can simplify the overall design. Looking through the datasheet, it required a 1.8 V core voltage (unlike essentially every other component other than the FPGA) and a fair amount of configuration registers to set over I2C, but it had all of the features I needed.I was originally planning to have just a single (mono) speaker, but I figured if I had a stereo DAC, I might as well put two in there. I chose the CES-20134-088PMB, an enclosed microspeaker with a JST-SH connector. Having an enclosed speaker simplified audio design, because as it turns out, you can’t just stick a speaker to a board and expect it to sound okay (Same Sky, the manufacturer of that speaker, has a blog post explaining some of the nuances).I prefer the feeling of clicky, tactile buttons (such as those found in the GBA SP, Nintendo DS (original), Nintendo 3DS, Switch) compared to “mushy” membrane buttons (such as those found in the Game Boy Color, original GBA, and Nintendo DS Lite). I learned that the tactile switches used in the GBA SP are a widely available off-the-shelf part from Alps Alpine. I used similar, but smaller buttons for the Start/Select/Home buttons, and a right-angle button from the same manufacturer for side volume and power buttons.Although I only had plans to support Game Boy and Game Boy Advance (requiring a D-pad, A and B buttons, L and R shoulder buttons, and Start/Select), I opted to add two more “X” and “Y” face buttons to leave the possibility open of supporting more systems in the future.The L and R buttons posed an additional challenge – I found numerous right-angle tactile buttons (to be soldered onto the back, facing towards the top). However, none of them seemed to have the actuator (the part of the button you make contact with) far enough away from the PCB to be easily pressed. At first, I thought about making a separate shoulder button board to move them at the correct distance, but then I started looking at what existing devices do for inspiration. The Game Boy Advance SP actually uses a more complex mechanism for the shoulder buttons: rather than a simple actuator like the face buttons, there’s a hinge with a torsion spring that hits the actuator at an angle. This is actually part of what makes the shoulder buttons pleasant to press: you don’t need to hit them from exactly the right direction, because they pivot. I ended up just going with a standard right-angle tactile button, opting to solve the problem with the mechanism in the enclosure.GBA SP shoulder button mechanismOne of my main goals was to allow ROM files to be loaded from a microSD card, rather than only being able to be played from a physical cartridge. To do this, I’d need dedicated RAM for the FPGA to hold the game. Game Boy Advance games, typically, are a maximum of 32 MB. They don’t make SRAMs that large (and if they did, they’d be very expensive). Instead, I needed to use DRAM.Asynchronous SRAM is very simple: supply a read address to the address pins, and some amount of nanoseconds later, the data you’re reading appears on the data pins. DRAM is more complex: the simplest kind is “single data rate synchronous DRAM” (SDR SDRAM, or just SDRAM, distinguishing it from the significantly more complex DDR SDRAM). However, even SDRAM is non-trivial to use. DRAM is organized into banks, rows, and columns, and accessing DRAM requires sending commands to “activate” (open) a row before reading out “columns”, and then “precharging” (closing) a row. Handling all of this requires a DRAM controller (see this simple description of the state machine required). This isn’t terribly complex, but I was signing myself up for more work.Alternatively, I could have chosen a PSRAM chip (essentially DRAM with an integrated controller to make it have a more SRAM-like interface). However, I couldn’t find a PSRAM part that I was happy with (cost, availability, interface), and so I ended up going with the inexpensive W9825G6KH 32MB 16-bit SDRAM.I also decided to stick a 512 KiB SRAM chip in the design in case I ended up needing some more simple memory later, like for emulating the SRAM used for Game Boy cartridge save files. Despite being 1/64 the capacity, this chip was about 3x the cost of the SDRAM. This ended up being a wise decision, since a lot of my internal FPGA block ram was eaten up by the triple buffer for the display (see above).Cartridge and Link Ports#The cartridge slot and link ports are no-name parts from AliExpress, easily available for cheap. These seem to mostly be GBA SP compatible, and are often used as repair parts.The Game Boy Advance can play both Game Boy [Color] and Game Boy Advance games. These run at different voltages and use different protocols, so the device needed some way of determining which type of cartridge is inserted.GBA cartridge (top) vs GB cartridge (bottom)The cartridges are physically different at the bottom: GBA cartridges (the top cartridge in the image) have a notch on either side. The GBA has a  that senses the absence of a notch on an inserted cartridge and switches the device into Game Boy Color mode.I measured the size and position of this notch, and searched Digi-Key and Mouser for switches that met these constraints. In the end, I was only able to find a single switch that would work.Miscellaneous peripherals#I used the surprisingly cheap LSM6DS3TR-C IMU from ST. This tiny IMU has a 3-axis accelerometer and gyroscope, more than sufficient for emulating the few GB/GBA cartridges that have motion controls.For keeping track of time even when the device was off, I used the PCF8563T real-time clock chip. I chose this because it was 1) I2C (no additional pins required), 2) cheap, and 3) readily available from JLCPCB. Interestingly, all of the real-time clock chips I found count in seconds/minutes/hours/days/months/years. This makes sense for a really simple device with minimal computational power. However, it’s annoying for my purposes, since all I really want is a timestamp I can pass to some other datetime library, and converting between the calendar time and a unix timestamp is non-trivial due to how the chips incompletely handle leap years.I picked up a few cheap coin vibration motors to use for vibration support (for the rare cartridge that had a built-in vibration motor).I also used a TCA9535 I2C I/O expander to connect the face buttons to the MCU. I ran out of pins, and while I  have used the FPGA as a sort of I/O expander, I figured I’d make it simpler for myself (and allow the buttons to be used even if the FPGA was powered off) by letting the MCU read them itself.For this project, as with my previous ones, I used KiCad to create my schematic and do PCB layout. I really can’t recommend KiCad enough: it’s a great program, intuitive to use, and it’s free and open source.This was a very ambitious project for my level of electrical engineering experience, and creating the schematic took a couple of weeks. I spent a lot of time designing the circuit for each component, because I was afraid I’d do something wrong and end up with a stack of useless boards without the skills needed to debug them. A lot of the component selection actually happened in parallel with schematic design, as I found new requirements or problems and had to change components.I gained a lot of experience reading component datasheets. It’s a really valuable skill, both for component selection and for creating designs that use the components. Nearly every datasheet has a “typical application” section, where the manufacturer shows how the component would fit into a circuit. At minimum, this has power supply information (e.g. these voltages to these pins with these decoupling capacitors). For more complex components like the DAC, it also has information about power sequencing, different ways the device could be connected to the rest of the system, a register list, that sort of thing. Some components also included PCB layout recommendations. This information was all really helpful, and gave me a good deal of confidence that my board would work as long as I read through the datasheet and followed the manufacturer’s recommendations.Then I got to the FPGA. Nearly every component has a single datasheet. Some of them have an additional application note or two. Particularly complex chips (like the ESP32-S3 microcontroller) have a separate datasheet, reference manual, and hardware design guide. The Xilinx Series 7 FPGAs have . Overviews, packaging and pinout, configuration guides, BGA design rules, power specifications, clocking resources, I/O specifications, PCB layout guides, design checklists… even a 4MB Excel spreadsheet for estimating power consumption! And believe me, Xilinx didn’t just write documentation for fun: there’s so much documentation because the chip  this much documentation.Designing with the FPGA was overwhelming, and  beyond my experience level. At several points I genuinely considered dropping the project altogether. Fortunately, I persevered, and gradually internalized a lot of the information. I also read through the schematics of any open-source Artix-7 development board I could get my hands on. Seeing what other people were doing gave me more confidence that I was doing the right thing.Eventually, after I placed all of the components, connected them, ensured all of the nets were labeled, and ran KiCad’s electrical rules checker (ERC) to find obvious mistakes, I moved on to layout.I did PCB layout at the same time as some of the initial enclosure CAD. The mechanics of how everything fit together influenced the placement of the display connector, cartridge slot, buttons, speakers, and connectors. After I came up with a plausible enclosure design, I placed some of the first key components onto the PCB and locked them into place while I did the rest of the routing.Rough enclosure design to help with board layoutI first focused on components that would be hardest to route. Primarily, the FPGA: the package I was using (CSG324) is a BGA, 18x18 with 0.8mm pitch between pins. “Fanning out” all of the I/O signals requires careful routing, and at 0.8mm pitch, it’s difficult to do this routing with cheap PCB manufacturing techniques. I ended up being able to do this routing with a 6-layer PCB (three signal, two ground, one power), with 0.1mm track width and spacing, and 0.4/0.25mm vias. Fortunately, this is all within the realm of JLCPCB’s capabilities.BGA fanout with thin traces and small viasAs I routed signals out from the FPGA to other parts, I assigned those signals to the FPGA pins. Similarly, with the MCU, I assigned signals to pins in a way that made routing easier. Certain signals had restrictions (e.g. on the FPGA, the main 50 MHz clock signal can only go into certain pins, or the configuration bitstream can only go to certain pins, or certain pins are differential pairs for HDMI output), but overall, I had a lot of flexibility with pin assignment.KiCad has a feature where it automatically backs up your project as you work on it. I changed the settings to save every 5 minutes and not delete old backups, which allowed me to generate this timelapse of my layout process:Revision 1 board layout timelapseOnce I finished placing and routing all of the components, I ran the design rules checker (DRC) and fixed issues. I hesitated for a while before sending the PCB for manufacturing. I re-read the schematics, reviewed the layout, and eventually felt confident enough that I was done. I submitted the order to JLCPCB, and after a few questions by their engineers about component placement, they started manufacturing it.Board testing and bring-up#After two weeks or so, I received the assembled boards in the mail:An assembled board and an unassembled boardFirst, I probed the power rail test points with a multimeter to check for shorts. Then, I plugged the boards in for the first time, and pressed the power button. To my delight, the green LED turned on, indicating that the power button circuit, power path, and 3.3V regulator worked. The microcontroller USB enumerated, and I could see that it logged some errors (since I hadn’t flashed anything to it yet).I intended to write the MCU firmware in Rust, but I did initial board testing and bring-up with MicroPython. This would let me interactively type in Python and write basic scripts to communicate with the peripherals on the board and make sure I had connected everything correctly. I didn’t have to worry about writing efficient or well-organized code, and could just focus on functionality.I flashed the MicroPython firmware image, and wrote a couple lines of Python to blink the LED. I powered on the FPGA power domain, and checked that the , , and  rails had the correct voltage.Next, I wrote a simple bitstream for the FPGA that read the state of the buttons and produced a pattern on the shared signals between the FPGA and the MCU. I wrote simple Python code to configure the FPGA, loaded up the bitstream, and polled the signals from the FPGA. Pressing buttons changed the state, and confirmed that the FPGA was properly powered, and configurable from the MCU.After I confirmed the FPGA worked, I started writing a simple display driver to initialize the LCD and push some pixels from the MCU over SPI. The initialization sequence uses a number of LCD-specific parameters (voltages, gamma correction, etc.), that I learned from the LCD manufacturer’s example code.(Slowly) pushing pixels to the LCDThe LCD module’s controller, an ILI9488, has a few quirks: despite claiming that it supports 16-bit colors over SPI, it actually only supports 18-bit colors. This unfortunately meant that the MCU’s LCD driver would be more inefficient than I expected, since it has to expand 16-bit colors to 18-bit before sending them over the bus. This didn’t end up being a huge issue, however, because the FPGA is the one driving the display most of the time.Another quirk (hardware bug?) is that the ILI9488 doesn’t stop driving its SPI output line, even when its chip-select signal is inactive. This means that the chip will interfere with any other communication on the bus… including the FPGA, which sits on the same bus. I never actually needed to read any data back from the LCD (and even if I did, it supports three-wire SPI), so I just cut the trace between the LCD’s SDO line and the SPI bus.Debugging the LCD test codeTrouble with power domains#I started trying to communicate with the I2C peripherals (I/O expander, RTC, etc.), and found that nothing was responding. A bit of probing with a logic analyzer revealed that the SCL/SDA lines were being held low, and that powering on the FPGA power domain let the lines be pulled high and communication to happen.I deduced that this was due to the DAC, which had its IOVDD powered by , which likely caused its protection diodes to pull the IO lines (SCL and SDA) low:The problematic portion of the schematicI tested out this theory by cutting the PCB traces connecting the DAC’s IOVDD and  with a knife. After this, I2C worked even with the FPGA power disabled. Then, I tested a possible fix by adding a wire to power the DAC’s IOVDD from the  rail. I confirmed that I could still talk to the other I2C devices, and once enabling FPGA power, that I could talk to the DAC too.While bringing up the LCD, I saw that the FPGA was also pulling down the shared SPI bus lines while it was unpowered. Not enough to prevent communication with the LCD, but it still wasn’t great. Between this and the DAC issue, I learned an important EE lesson: be careful when connecting components in different power domains together. A tristate buffer, such as the 74LVC1G125, could have helped here to isolate the buses.Once I2C was working, I wrote some basic driver code for the fuel gauge, real-time clock, IMU, and I/O expander, just to check that they all worked correctly. I also checked that the MCU could read from and write to the attached microSD card.Audio and video output from the FPGA#Next, I updated my testing FPGA bitstream to output a test pattern over the LCD parallel interface (“DPI”), and a test tone to the DAC over the I2S interface. Then, I began poking on the MCU side to configure the LCD controller and DAC appropriately.With some amount of trial and error, I convinced the LCD to accept input from the FPGA. Most of the trial and error revolved around the rotation of the LCD module. Soon after, I configured the DAC properly, and it played the test tone from the FPGA over the speakers and the headphones.WIP video output from the FPGAAt this point, much of the board was working, so I soldered on the rest of the components (cartridge slot, cartridge switch, link port, shoulder buttons).With the cartridge slot in place, I had everything I needed to port over the Game Boy emulator from my last project. I did a quick-and-dirty port of the emulator, with some hacking around to connect the core to the audio, video, and the physical cartridge. I was able to play the first Game Boy game on the device far sooner than I was expecting:Pokemon Silver running from cartridgeI spent the next month or so implementing things on the FPGA. I started on the SPI receiver implementation, so that the MCU and FPGA could communicate.It was relatively straightforward to write the initial version, which 4x oversampled the SPI signals from the main system clock. For the Game Boy, that was ~8 MHz, for a maximum SPI speed of 2 MHz. The MicroPython ESP32-S3 SPI implementation supported only single SPI, so that allowed for a maximum transfer speed of 256 KB/s. This was sufficient to do most of my initial testing, but I later wrote an improved SPI receiver to run with an internal 200 MHz clock (from a PLL that turned on and off with the chip-select signal to save power), communicating with the rest of the system via a pair of FIFOs. This added a lot of complexity and edge cases, but it greatly improved performance, allowing the bus to run at 40 MHz.I wrote the SPI interface to the FPGA with memory-like semantics: each SPI transfer starts with a command byte, encoding whether it’s a read or write transfer, the size of each word in the transfer (8, 16, or 32 bits), and whether the “target address” should autoincrement as the transfer progresses. Then, a 32-bit address, followed by reading or writing the data. Each thing that the MCU might want to access (control registers, blocks of memory) are mapped into the 32-bit address space.As with my previous FPGA project, I wrote almost all of the FPGA code in Chisel, a Scala-based HDL. The remaining bits were the top-level Verilog. Chisel made it really simple to parametrize, compose, and test the various modules that I wrote.Once I had the SPI receiver working, I wrote controllers for the on-board SRAM and SDRAM. The SRAM was relatively simple (although I still got it slightly wrong at first). The SDRAM was a bit tricky, and even as I write this I’m not quite satisfied with its performance, and intend to rewrite it in the future.I exposed the SRAM and SDRAM interfaces to the MCU via SPI, which allowed me to read and write to these pieces of memory from the MCU. I used this a lot for testing: writing patterns into memory and reading them back to ensure that read and write both worked.Side note: SDRAM has to be continuously refreshed, otherwise the stored data decays over time. It depends on the chip, but typically each row has to be read and written back (or auto-refreshed, which does the same thing) at least once every 64 milliseconds to avoid losing state. What I found interesting, however, is that the data can actually persist for quite a bit longer. I discovered that when I was reconfiguring the FPGA between tests, most of the test data that I had previously written would still stick around even without being refreshed. In the first few seconds some bits would start flipping, and over the course of a few minutes, most of what was written was completely unintelligible.With the SDRAM controller and SPI receiver written, I was then able to implement the “emulated cartridge” part of the Game Boy emulator, where the MCU reads a ROM file off of the microSD card and sends it to the FPGA to be stored in SDRAM. Then, the FPGA “emulates” a cartridge (rather than interfacing with a real physical cartridge). After a few stupid mistakes, I was able to run test ROMs and homebrew. As an added bonus, since I was using my own SDRAM controller directly, I didn’t have any of the performance issues I’d faced before when accessing the ROM stored in memory.Writing the microcontroller firmware in Rust#By this point I had tested, in some form or another, all of the different components of the system. I’m really surprised that everything worked in my first board revision – even the rework I did early on wasn’t actually required for functionality.I decided now was a good time to start building an interactive GUI. Up until this point, I had just been running commands in the MicroPython REPL. However, I didn’t want to build a whole UI in Python just to throw it away later, so I also started working on the “production” Rust firmware.In the last few years, a lot of progress has been made towards making Rust on the ESP32 chips work well, even on the chips that use the Xtensa ISA. I followed the Rust on ESP Book and quickly had an environment set up. I opted for the “Rust with the Standard Library” approach, so that I could benefit from ESP-IDF, especially the built-in support for USB and SD cards with the FAT filesystem.I started porting over the drivers I had written in Python. I found embedded Rust to be a bit verbose in some cases, but overall pleasant to use and worth the (little) trouble.I starting writing my own minimal GUI framework for basic menus. I poked around with the  library, but soon found that the typical patterns I was expecting to use weren’t a great fit for Rust. I also started planning out different screens and realized that I probably actually wanted to use a more comprehensive UI framework.Ultimately, I settled on Slint, a Rust-native declarative GUI framework with excellent support for embedded devices. Slint has a custom DSL to describe the UI and composable components. After a bit of practice I found myself to be really productive with it. I enjoyed using Slint, and I’d use it again in the future. The authors are responsive on GitHub, and the project has steadily improved over the year or so that I’ve been using it.There were a few rough edges for my use case, however:The built-in GUI elements and examples were all heavily oriented around mouse or touchscreen navigation. Game Bub only has buttons for navigation, however, so I had to make my own widgets (buttons, lists) that worked with key navigation. This involved a few hacks, because Slint’s focus handling was a little bit simplistic.The built-in GUI styles looked (in my opinion) bad on a low DPI screen. Text was excessively anti-aliased and hard to read at small sizes. This was also fixed by building my own widgets.Slint doesn’t have a great story around supporting different “screens” – I had to build some of my own infrastructure to be able to support navigation between the main menu, games, rom select, settings, etc.The GUI is rendered on the MCU, and then the rendered framebuffer is sent over to the FPGA. Slint supports partial rendering, where only the parts of the screen that have changed are updated, which improved performance. The FPGA maintains a copy of the framebuffer and ultimately is responsible for driving the display. This has a few advantages over driving the display directly from the MCU:Sending a framebuffer at 40 MHz QSPI to the FPGA is 16x faster than sending it to the LCD controller at 10 MHz (the fastest speed supported by the ILI9488)The UI is rendered at 240x160 to improve performance and maintain the GBA aesthetic, but the LCD controller doesn’t have a scaler, so the MCU would have to send 4x the pixels. The FPGA can easily scale the UI framebuffer itself.The FPGA can composite the emulator output with a semi-transparent “overlay” to support an in-game menu, volume / brightness bars, battery notifications, etc.An external display (e.g. monitor or TV) can be driven by the FPGA via HDMII spent some time making a variety of firmware improvements, mostly polish and quality-of-life. I added a settings screen to set the date and time, whether to use Game Boy (DMG) or Game Boy Color (CGB) mode when playing Game Boy games, etc.Then I improved the ROM select file browser, and added a battery level indicator.I also got sick of having to take the microSD card out of the device and connect it to my computer through a series of adapters (microSD to SD to USB-A to USB-C), so I implemented a basic utility to expose the microSD card as a USB Mass Storage Device, using TinyUSB and the ESP32-S3’s USB-OTG capabilities.It was a little bit more difficult than I expected, because USB Mass Storage requires the device to provide raw block access. This means that the filesystem has to be unmounted by the device, otherwise the device and host could conflict and corrupt the filesystem. The ESP32-S3 also only supports USB Full Speed, for a practical maximum transfer speed of ~600KB/sec. It’s really useful for transferring save files or updating the FPGA bitstreams, but less useful for transferring a large number of ROM files.Later, I implemented MBC7 support in the Game Boy emulator for Kirby Tilt ’n Tumble, using the on-board accelerometer.After I implemented a decent amount of software functionality, I decided to finish the enclosure design. The bare board just wasn’t cutting it anymore, and the taped LCD module/loose speakers/rubber-banded battery contraption was fragile.Game Bub looking rough without an enclosureI came into this project without any CAD or 3D printing experience. I looked at a few different CAD software packages, and I ultimately settled on FreeCAD, primarily because it was free and open source. I learned how to use the software with some video tutorials. FreeCAD, unfortunately, was a little bit rough around the edges and I ended up running into some annoying issues. Nevertheless, I powered through and finished the design.FreeCAD view of the enclosure and some buttonsI found parametric modeling, where the geometry of the model is defined by constraints and dimensions, to be intuitive. However overall, I found 3D CAD to be very time consuming. I think a large part of this is my inexperience, but thinking in three dimensions is a lot more difficult than, say, a 2D PCB layout. Creating a full assembly was even more difficult: I had to visualize how the front and rear pieces would fit together, where the screws would go, and how the buttons, screen, speaker, cartridge slot, battery, and ports would all fit in. This project definitely pushed the boundaries of my (previously non-existent) product design skills.After finishing the design, I printed out the technical drawing at a 1:1 scale and physically placed the board and other components down as a final check. Then, I sent it to JLCPCB for manufacturing. I opted for SLA resin printing, for high precision and a smooth finish.Enclosure technical drawingAfter a couple weeks, I got the finished enclosure and custom buttons back.Front and rear half, outsideI put the buttons, speakers, and screen into the enclosure, screwed on the PCB, and put the whole thing together.Assembling the front sideGame Bub, fully assembled and functionalI wasn’t sure how dimensionally accurate the 3D printing would be, so I added a lot of extra clearance around the buttons and ports. As it turned out, the printing was very precise, so the buttons rattled around a little in the oversized button holes.It’s a little bit chunky (smaller than an original Game Boy, though!) and the ergonomics aren’t ideal, but I was really happy to finally have an enclosure. It actually started (sort of) looking like a real product, and I wasn’t constantly worried about breaking it anymore.Game Boy Advance support#I won’t go into all of the details of how I wrote the emulator here (this article is already long enough!). If you’re interested, my previous article about my Game Boy FPGA emulator goes into detail about the general process of writing an emulator, and for a high-level introduction to the Game Boy Advance (from a technical perspective), I recommend Rodrigo Copetti’s article. In general, I tried to implement the emulator the way it might actually have been implemented in the original hardware: each cycle of the FPGA corresponds to one actual hardware cycle (no cheating!).As with the Game Boy, I did nearly all of my development with a simulator backed by Verilator and SDL. By the end of the development process, the simulator was running at about 8% of the real-time speed (on an M3 MacBook Air with excellent single-core performance), which was a bit painful.The Game Boy Advance CPU, the ARM7TDMI, is significantly more complicated than the Game Boy’s SM83 (a Z80 / 8080-ish hybrid). However, in some ways, it was easier to understand and implement: the ARM7TDMI is much closer to a simple modern processor architecture, and it’s extensively documented by ARM. For example, the ARM7TDMI Technical Reference Manual has block diagrams and detailed cycle-by-cycle instruction timing descriptions.I had a lot of fun implementing the CPU. The architecture has a three-stage pipeline (fetch, decode, execute) – a division that feels natural when you implement it in hardware. The ARM7TDMI has two instruction sets: the standard 32-bit ARM instruction set, and the compressed 16-bit THUMB instruction set. I implemented the CPU the way it works in hardware, where the only difference between ARM and THUMB is the decode stage.As I was implementing the CPU, I wrote test cases for each instruction. Each test checks the functionality of the instruction: processor state, register values after, as well as the cycle-by-cycle behavior and interaction with the memory bus. This was helpful for catching regressions as I implemented more and more control logic. It was also really satisfying to be able to implement individual instructions, then write the tests, and check that everything worked.Chisel made it easy to write out the CPU control logic. The CPU control logic is a state machine that generates microarchitectural control signals (e.g. bus A should hold the value from the first read register, bus B should hold an immediate value, the memory unit should start fetching the computed address, etc.). Chisel allowed me to collect common functionality into functions (e.g.  to set up the signals to dispatch the next decoded instruction, or  to signal that the pipeline should be flushed and a new instruction should be fetched from the current program counter).I found it helpful to draw out timing diagrams with WaveDrom when working through instructions, especially to deal with the pipelined memory bus.My timing diagram of the ARM7TDMI branch instructionsBy mid-May (about a month later), I finished the CPU implementation (with occasional bug fixes after) and moved onto the rest of the system.PPU, MMIO, and everything else#Over the next month and a half, I implemented the majority of the rest of the Game Boy Advance. The CPU interacts with the rest of the system via memory-mapped IO (MMIO) registers. Unlike the Game Boy CPU, which can only access memory a single byte at a time, the ARM7TDMI can make 8-bit, 16-bit, and 32-bit accesses. This complicates MMIO, and the different hardware registers and memory regions in the GBA respond to different access widths in different ways.I started with the Picture Processing Unit (PPU), which produces the video output. The author of NanoBoyAdvance, fleroviux, had helpfully documented the PPU VRAM access patterns, which gave a lot of insight into how the PPU might work internally. Tonc was also immensely helpful for implementing the PPU and testing individual pieces of functionality.(Sort of) running a Tonc PPU demoThe PPU took a few weeks, and then I moved onto DMA, followed by hardware timers, and audio. Of course, as I’d try new tests, demos, and games, I’d uncover bugs and fix them.Kirby  in Dream LandGame Boy and Game Boy Advance cartridges use the same 32-pin connector. However, they work very differently. The Game Boy cartridge bus is asynchronous: the game outputs the 16-bit address (64 KiB address space) on one set of pins and lowers the  pin. Some time later, the 8-bit read data from the ROM stabilizes on a separate set of pins.For the GBA, Nintendo extended the bus data width to 16-bit and the address space to 25-bit (32 MiB). However, they kept roughly the same set of pins, accomplishing this by multiplexing the 24 data/address pins: the console outputs the address (in increments of the data word size of 16-bits, for a 24-bit physical address), then lowers the  signal to “latch” the address in the cartridge. Then, each time the console pulses the  pin, the cartridge increments its latched address and outputs the next data over the same pins. This allows for a continuous read of sequential data without having to send a new address for each access. The GBA also allows games to configure cartridge access timings to support different ROM chips.I had to do a lot of my own research here. Software emulators don’t need to care about the precise timing of the cartridge bus, so there wasn’t much documentation. To figure out the exact cycle-accurate timing, I used a Saleae logic analyzer and connected it to the cartridge bus. I wrote a test program for the GBA to do different types of accesses (reads, writes, sequential, non-sequential, DMA) with different timing configurations.Cartridge bus analysis setupAfter coming up with numerous scenarios (especially around the interaction between DMA and the CPU, and starting and stopping burst accesses), I came up with a consistent model for how cartridge accesses worked. I created some timing diagrams to help:Timing diagram of a non-sequential access followed by a sequential accessFinally, I started implementing the cartridge controller state machine based on my observations, paired with an emulated cartridge implementation. With the emulated cartridge, I was able to properly run real games in the simulator.I quickly implemented physical cartridge support, to be able to finally run it on the actual FPGA. I connected the signals, built a new bitstream, and… it didn’t work at all. The Game Boy Advance boot screen ran, but it didn’t get any further than that. I implemented the emulated cartridge on the FPGA (reading ROM files from the SD card), and it worked! Which was great, but physical cartridges still didn’t.I used the logic analyzer to observe how my emulator was interacting with the cartridge compared to how an actual GBA, and found numerous issues.One of the first things I noticed was short glitches on the  line. I knew these had to be glitches (rather than incorrect logic), because they were 8 nanoseconds long, much shorter than the ~59.6ns clock period. Since the cartridge latches the address on a falling edge of , glitches cause it to latch an address when it shouldn’t, screwing up reads.Glitches on the cartridge busHere, I learned an important lesson in digital design: output signals should come directly from flip-flops, with no logic in between.After each flip-flop outputs a new value (on the rising edge of the clock), the signals propagate through the chip. As they propagate, taking different paths of different lengths throughout the chip, the output from each lookup table (LUT) is unstable. These values only stabilize near the end of the clock cycle (assuming the design met timing closure), and then each flip-flop stores the stable value at the next rising edge. If you output a signal from logic, this instability is visible from outside of the chip, manifesting as glitches in the output signal. If you instead output the signal from a flip-flop, it’ll change only on each clock edge, remaining stable in the middle.And of course, I had written the cartridge controller without thinking about this, and  of the output signals were generated from logic. I rewrote the controller to output everything from flip-flops, which had a series of cascading changes since all of the signals now had to be computed one clock cycle earlier than I expected.There were other issues too – part of the problem was that my emulated cartridge model was too permissive, and didn’t catch some fairly obvious incorrect behavior. After a few days of intensive debugging with the logic analyzer, I got to the point where I could play games from physical cartridges.Metroid: Zero Mission running from the cartridgeCartridge prefetch buffer#The ARM7TDMI has a single shared instruction and data memory bus. As a result, a long series of sequential memory accesses is rare. Even a linear piece of code without branches that includes “load” or “store” instructions would produce a series of non-sequential memory accesses, as the CPU fetches an instruction from one location, loads a register from a different location, and then goes back to fetching the next instruction.This poses a real performance issue on the GBA, because every non-sequential access from the cartridge incurs a multi-cycle penalty. Nintendo attempted to mitigate this somewhat with the “prefetch buffer” (read this post by endrift, the author of mGBA, for more details) which attempts to keep a cartridge read burst active between CPU accesses. Without emulating the prefetch buffer, some games lag (I noticed this the most in Mario Kart Super Circuit, and some rooms of Metroid: Zero Mission).The prefetch buffer, while simple in theory, is not well documented and has a lot of corner cases and weird interactions. Emulator developers often start by taking a shortcut: making all cartridge accesses take a single cycle when the prefetch buffer is enabled. This wouldn’t work for me, since I actually had to interface with the physical cartridge.So, I set out to do some more research to figure out exactly how the prefetch buffer worked. After making some educated guesses and tests, I came up with a reasonable model of how it might work.Notes about the prefetch state machineActually implementing it took a lot of work, and I kept stumbling upon more and more corner cases. Eventually I got to the point where all games appeared to run at full speed, and most importantly, didn’t randomly crash. My implementation isn’t perfect: there are still a few mGBA test suite timing tests I don’t pass, but it’s certainly sufficient to play games.: standard duplex SPI, used for communicating with accessories: custom multi-drop UART-like protocol, used to link up to four GBAs together for multiplayer games: the Nintendo N64 and GameCube controller protocol, used to connect to a GameCube: duplex UART with flow control, : controlling the four pins individually as GPIO, The timing of these isn’t well documented, so I did my own research.A  mode transfer with no attached consolesI did a lot of testing with examples from the gba-link-connection library, intended for homebrew GBA games, but helpful for testing the different transfer modes in a controlled environment.Multiplayer Mario Kart with Game Bub and a GBAGame Bub linked to a GameCube playing Animal CrossingDuring the emulator development, I had used various test ROMs (mentioned before) to test basic functionality in isolation. As my emulator became mature enough to run commercial games, however, I started to shift some of my focus to accuracy-focused test ROMs.These test ROMs (such as the mGBA test suite) generally test really specific hardware quirks and timing. For example, they might test what happens when you run an instruction that ARM calls “unpredictable”, or the exact number of cycles it takes to service an interrupt in specific scenarios, or the value of the “carry” flag after performing a multiplication. These are the kinds of things that don’t actually matter for playing games, but present a fun challenge and a way to “score” your emulator against others. This also highlights the collaborative nature of the emulation development community: people sharing their research and helping each other out.I won’t talk about all of the tests here (for my emulator’s test results, see this page). But I do want to mention the . This is an official test cartridge from Nintendo, likely used as part of a factory test or RMA procedure. Apparently, Nintendo has  used it to test their emulators (e.g. their GBA emulator on the Nintendo Switch). This test has generally been considered to be difficult to pass (it tests some specific hardware quirks), but it’s easier now that the tests have been thoroughly reverse engineered and documented. Still, passing it is a nice milestone:Passing the AGB Aging CartridgeSecond hardware revision#Towards the end of 2024, approximately one year after I originally designed Game Bub, I decided to make a second hardware revision. Over the past year, I had been keeping track of all of the things I would want to change in a future revision. Since the first version of Game Bub miraculously worked without any major issues, this list was primarily minor issues and ergonomics changes.I fixed the minor I2C power issues, removed the reference designators from the PCB silkscreen (they looked messy with the dense board, and I didn’t use them for anything anyway), and changed around some test points. I improved the rumble circuit to be more responsive, and switched to a PCB-mounted vibration motor.The first version of Game Bub was fairly thick, measuring 12.9mm at the top and 21.9mm on the bottom. The thickness of the rear enclosure was dictated by the thickness of Game Boy cartridges, but I made several changes to the front. I moved the  (8.5mm!) link port to the back, and removed the HDMI port (more on that later). I changed the headphone jack (5.0mm tall – no wonder they started getting removed from phones) to a mid-mount one that sunk into the PCB and reduced the overall height.I also switched from an  module (3.1mm depth) to an  (2.4mm depth). I should have done this from the beginning, I just didn’t even know the ESP32-S3-MINI existed. This had the side effect of giving me 3 more GPIOs, which allowed me to put the FPGA and LCD on separate SPI busses, avoiding the minor issue of an unpowered FPGA interfering with LCD communication, and allowed for faster boot because the LCD could be configured at the same time as the FPGA.I switched the speakers, from the fully-enclosed CES-20134-088PMB to the CMS-160903-18S-X8. I made this change primarily for ease of assembly. The first speaker had a wire connector that plugged into the board, and I found it difficult to connect during assembly without having the wire interfere with buttons. The new speaker is smaller and has a spring contact connector, so it just presses against the PCB as the device is assembled. This required some speaker enclosure design – an unenclosed speaker in free air sounds quiet and tinny.I reworked the layout of the face buttons and D-pad to match the spacing of the Nintendo DSi. This allowed me to use the silicone membranes from the DSi for an improved button feel and reduced rattling. I was also hoping to use the plastic buttons from the DSi (which were higher quality compared to my 3D printed buttons), but even with the new thinner design, the buttons weren’t quite tall enough to be easily pressed.I created another timelapse of my modifications to produce the second version of the PCB:Revision 2 board layout timelapseFor the second revision of the enclosure, I switched to Fusion 360 for the CAD work. While I would have preferred to keep using FreeCAD, I found that it was making it harder for me to be productive. Fusion 360 has a free version for hobbyists (with some limitations that have gradually increased over time), and overall I’ve found it very pleasant to use.Fusion 360 view of the second enclosure, fully assembledUnlike with the first revision, I waited until I had a final design for both the enclosure and the PCB before getting anything manufactured. This let me go back and forth, making small modifications to each of them as needed.I wanted to make the end result look more polished and professional, so I contracted a factory to produce custom LCD cover glass, made out of 0.7mm thick tempered glass with a black silkscreen. It was relatively expensive for a low quantity order, but I’m really happy with how it turned out.Custom LCD cover glass with adhesive backingManufacturing and assembly#I got the PCBs manufactured and assembled, this time with black solder mask to look .Assembled PCB, revision 2I had two enclosures made. The first was black PA-12 Nylon, printed with MJF. Nylon is strong and durable, and the MJF 3D printing technology produces a slightly grainy surface that’s really pleasant to hold in your hand.Closeup of the nylon grainy textureThe second one was made of transparent resin (SLA, like before). This lets me show off the PCB that I worked so hard on, and evokes the transparent electronics trend from the 90s.Assembly was a lot easier this time around: the silicone membranes held the face buttons in place, the speakers had a spring contact instead of wires, and the shoulder button assembly was better. In the first revision, I had excessively large tolerances because I wasn’t sure how precise the 3D printing would be. In the second version, I was able to shrink these.The final product looked and felt a lot better, too. The edges were more rounded, and the device was thinner and easier to hold. The buttons felt  better to press and didn’t rattle around, and the cover glass over the LCD added polish.First revision (left), second revision (center and right)I previously mentioned that I removed the full-size HDMI port from the first revision. I had first planned to change it to a mini-HDMI or micro-HDMI port to reduce the size, but I was worried about durability.What I  wanted to do was output video through the USB-C port, avoiding the need for any HDMI port at all. Unfortunately, I had already concluded earlier that I wouldn’t be able to output DisplayPort video signals from the FPGA, which meant that I couldn’t use the standard USB-C DisplayPort alternate mode.However, an idea struck me towards the end of 2024: I didn’t actually  to use the DisplayPort alt-mode. The USB-C connector, in addition to the USB 2.0 D+/D- pins, has four differential pairs (for USB superspeed). Conveniently, HDMI  uses four differential pairs. The USB specification allows for vendor-specific alt-modes, so I could just implement my own, outputting the HDMI signal directly from the FPGA over the additional pins. Then I could build a custom dock that takes those pins and connects them to the data lines of an HDMI port.According to the USB specification, alternate modes must be negotiated by both sides first, using the USB-C Power Delivery (USB-PD) protocol, to prevent them from interfering with devices that aren’t expecting them. I don’t actually have a USB-PD controller in Game Bub (too much added complexity), so I took a shortcut: have a microcontroller in the dock communicate with the Game Bub over regular USB and perform a handshake before enabling HDMI output from the FPGA. Once Game Bub detects that it’s been disconnected from the dock, it can just switch back to using the internal display.I realized that the dock also presents another opportunity for controller support. I originally wanted to build wireless controller support into the handheld, but the ESP32-S3 only supports Bluetooth Low Energy, and the majority of controllers use Bluetooth Classic. Fortunately, the Raspberry Pi Pico W (with an RP2040 MCU) supports both types of Bluetooth, so I just decided to use that as the microcontroller on the dock. Game controllers connect to the dock over Bluetooth, and the Pico sends the controller inputs to the device. I wired up the  and  USB-C pins as a direct connection between the FPGA and the dock for low latency input.The RP2040 acts as the USB host, and Game Bub only needs to be a device. I also added a USB hub chip and some additional USB ports on the back of the dock to allow for wired controller support too. Just like with wireless controllers, the dock handles the direct controller communication, and just passes inputs back to the main Game Bub unit.Since the dock is so simple (comparatively), it only took about a day to design and lay out.I had also hoped to use the dock to solve another problem around HDMI output: HDMI sinks (monitors, TVs) pull the HDMI data lines up to 3.3 volts, and can actually backfeed power to the HDMI source. For Game Bub, this meant that a powered-off unit would turn itself on when connected over HDMI. I used a HDMI buffer chip in the dock to try to alleviate this problem, but the chip I used wasn’t actually properly suited to this use-case and interfered with video output, so I had to carefully rework the board to bypass the chip. I’ll have to fix it in a later revision.Bypassing the HDMI buffer chipAfter the rework, HDMI output worked! The rest of the features are still a work in progress.Game Bub PCB on the dock, connected to an external monitorCongratulations on reading this far! This writeup ended up being incredibly long, even with a lot of details left out.I’m proud of what I accomplished over the last year and a half: I met all of my goals to produce a polished handheld FPGA retrogaming device. I pushed my electrical engineering and product design skills to the limit, and learned a lot in the process. Professional product and hardware designers deserve  respect.I deliberately designed this project with lots of possible extension opportunities to keep me occupied for a long time. I worked hard to get to the point where I’m comfortable sharing Game Bub with the world, but I still have a long list of TODOs for the future.In the near term, I’m going to work on finishing the dock, implementing wireless controller support (and maybe wired). I plan to use the Bluepad32 library to do so.I also want to improve the accuracy of my Game Boy Advance emulator: my goal here is to someday pass the entire mGBA test suite. I hope that I can contribute back to the wonderful  community with my emulator, and I plan to write-up some of my research around the GBA cartridge interface and link port.I have a long list of mostly minor changes to make to the MCU firmware: improving UI render performance, bits of polish like low battery notifications, eliminating display glitching when reloading the FPGA, and that sort of thing. I also plan to add more utilities, like a cartridge dumper and save backup/restore feature.Some day, I want to emulate the Game Boy Advance Wireless Adapter over Wi-Fi, e.g. with ESP-NOW. This won’t be compatible with the original wireless adapter, unfortunately, since that uses raw 2.4 GHz modulation rather than Wi-Fi.I designed Game Bub with extremely low production volumes in mind, using off-the-shelf commodity parts to keep the overall cost down. However, there are a few things I would have liked to be able to do, but are only possible with much higher volumes:A better LCD module (likely custom): native landscape mode to avoid the need for triple-buffering. Ideally a 720x480 resolution display, to allow for 3x GBA scaling and filter effects.High-quality injection molded case and buttons: 3D printing is great for low volume production, but an injection molded case would be great. It would be more precise (allowing for tighter tolerances), stronger, and allow for significantly more color options.Custom battery pack: or at least customizing the length of the connector wire. The current solution is hacky and doesn’t make the best use of internal space, due to limited off-the-shelf battery options.Smaller BGA parts for SRAM and SDRAM to free up board space (and move internal signals to 1.8 volts): this is actually something that would be possible in smaller volumes too, if I were willing to send parts from Mouser or DigiKey to JLCPCB for assembly.]]></content:encoded></item><item><title>How GitHub uses CodeQL to secure GitHub</title><link>https://github.blog/engineering/how-github-uses-codeql-to-secure-github/</link><author>Brandon Stewart</author><category>official</category><pubDate>Wed, 12 Feb 2025 17:00:04 +0000</pubDate><source url="https://github.blog/">Github Blog</source><content:encoded><![CDATA[GitHub’s Product Security Engineering team writes code and implements tools that help secure the code that powers GitHub. We use GitHub Advanced Security (GHAS) to discover, track, and remediate vulnerabilities and enforce secure coding standards at scale. One tool we rely heavily on to analyze our code at scale is CodeQL.CodeQL is GitHub’s static analysis engine that powers automated security analyses. You can use it to query code in much the same way you would query a database. It provides a much more robust way to analyze code and uncover problems than an old-fashioned text search through a codebase.The following post will detail how we use CodeQL to keep GitHub secure and how you can apply these lessons to your own organization. You will learn why and how we use:Custom query packs (and how we create and manage them).  Variant analysis to uncover potentially insecure programming practices.We employ CodeQL in a variety of ways at GitHub. with the default and security-extended query suites
Default setup with the default and security-extended query suites meets the needs of the vast majority of our over 10,000 repositories. With these settings, pull requests automatically get a security review from CodeQL.  
A few repositories, like our large Ruby monolith, need extra special attention, so we use advanced setup with a query pack containing custom queries to really tailor to our needs.  
To conduct variant analysis and quick auditing, we use MRVA. We also write custom CodeQL queries to detect code patterns that are either specific to GitHub’s codebases or patterns we want a security engineer to manually review.The specific custom Actions workflow step we use on our monolith is pretty simple. It looks like this:- name: Initialize CodeQL
    uses: github/codeql-action/init@v3
    with:
      languages: ${{ matrix.language }}
      config-file: ./.github/codeql/${{ matrix.language }}/codeql-config.yml
Our Ruby configuration is pretty standard, but advanced setup offers a variety of configuration options using custom configuration files. The interesting part is the  option, which is how we enable our custom query pack as part of the CodeQL analysis. This pack contains a collection of CodeQL queries we have written for Ruby, specifically for the GitHub codebase.So, let’s dive deeper into why we did that—and how!Publishing our CodeQL query packInitially, we published CodeQL query files directly to the GitHub monolith repository, but we moved away from this approach for several reasons:It required going through the production deployment process for each new or updated query.  Queries not included in a query pack were not pre-compiled, which slowed down CodeQL analysis in CI.  Our test suite for CodeQL queries ran as part of the monolith’s CI jobs. When a new version of the CodeQL CLI was released, it sometimes caused the query tests to fail because of changes in the query output, even when there were no changes to the code in the pull request. This often led to confusion and frustration among engineers, as the failure wasn’t related to their pull request changes.By switching to publishing a query pack to GitHub Container Registry (GCR), we’ve simplified our process and eliminated many of these pain points, making it easier to ship and maintain our CodeQL queries. So while it’s  to deploy custom CodeQL query files directly to a repository, we recommend publishing CodeQL queries as a query pack to the GCR for easier deployment and faster iteration.When setting up our custom query pack, we faced several considerations, particularly around managing dependencies like the  package.To ensure our custom queries remain maintainable and concise, we extend classes from the default query suite, such as the  library. This allows us to leverage existing functionality rather than reinventing the wheel, keeping our queries concise and maintainable. However, changes to the CodeQL library API can introduce breaking changes, potentially deprecating our queries or causing errors. Since CodeQL runs as part of our CI, we wanted to minimize the chance of this happening, as this can lead to frustration and loss of trust from developers.We develop our queries against the latest version of the  package, ensuring we’re always working with the most up-to-date functionality. To mitigate the risk of breaking changes affecting CI, we pin the  version when we’re ready to release, locking it in the  file. This guarantees that when our queries are deployed, they will run with the specific version of  we’ve tested, avoiding potential issues from unintentional updates.Here’s how we manage this setup:In our qlpack.yml, we set the dependency to use the latest version of During development, this configuration pulls in the latest version) of  when running , ensuring we’re always up to date.
// Our custom query pack's qlpack.yml

library: false
name: github/internal-ruby-codeql
version: 0.2.3
extractor: 'ruby'
dependencies:
  codeql/ruby-all: "*"
tests: 'test'
description: "Ruby CodeQL queries used internally at GitHub"
Before releasing, we lock the version in the  file, specifying the exact version to ensure stability and prevent issues in CI.
// Our custom query pack's codeql-pack.lock.yml

lockVersion: 1.0.0
dependencies:
 ...
 codeql/ruby-all:
   version: 1.0.6
This approach allows us to balance developing against the latest features of the  package while ensuring stability when we release.We also have a set of CodeQL unit tests that exercise our queries against sample code snippets, which helps us quickly determine if any query will cause errors before we publish our pack. These tests are run as part of the CI process in our query pack repository, providing an early check for issues. We strongly recommend writing unit tests for your custom CodeQL queries to ensure stability and reliability.Altogether, the basic flow for releasing new CodeQL queries via our pack is as follows:Open a pull request with the new query.  Write unit tests for the new query.  Increment the pack version in a new pull request.  Run  to resolve dependencies.  Correct unit tests as needed.  Publish the query pack to the GitHub Container Registry (GCR).  Repositories with the query pack in their config will start using the updated queries.We have found this flow balances our team’s development experience while ensuring stability in our published query pack.Configuring our repository to use our custom query packWe won’t provide a general recommendation on configuration here, given that it ultimately depends on how your organization deploys code. We opted against locking our pack to a particular version in our CodeQL configuration file (see above). Instead, we chose to manage our versioning by publishing the CodeQL package in GCR. This results in the GitHub monolith retrieving the latest published version of the query pack. To roll back changes, we simply have to republish the package. In one instance, we released a query that had a high number of false positives and we were able to publish a new version of the pack that removed that query in less than 15 minutes. This is faster than the time it would have taken us to merge a pull request on the monolith repository to roll back the version in the CodeQL configuration file.One of the problems we encountered with publishing the query pack in GCR was how to easily make the package available to multiple repositories within our enterprise. There are several approaches we explored.Grant access permissions for individual repositories. On the package management page, you can grant permissions for individual repositories to access your package. This was not a good solution for us since we have too many repositories for it to be feasible to do manually, yet there is not currently a way to configure programmatically using an API.   Mint a personal access token for the CodeQL action runner. We could have minted a personal access token (PAT) that has access to read all packages for our organization and added that to the CodeQL action runner. However, this would have required managing a new token, and it seemed a bit more permissive than we wanted because it could read  of our private packages rather than ones we explicitly allow it to have access to.  CodeQL query pack queriesWe write a variety of custom queries to be used in our custom query packs. These cover GitHub-specific patterns that aren’t included in the default CodeQL query pack. This allows us to tailor the analysis to patterns and preferences that are specific to our company and codebase. Some of the types of things we alert on using our custom query pack include:High-risk APIs specific to GitHub’s code that can be dangerous if they receive unsanitized user input.  Use of specific built-in Rails methods for which we have safer, custom methods or functions.    Required authorization methods not being used in our REST API endpoint definitions and GraphQL object/mutation definitions.  REST API endpoints and GraphQL mutations that require engineers to define access control methods to determine which actors can access them. (Specifically, the query detects the absence of this method definition to ensure that the actors’ permissions are being checked for these endpoints.)  Use of signed tokens so we can nudge engineers to include Product Security as a reviewer when using them.Custom queries can be used more for educational purposes rather than being blockers to shipping code. For example, we want to alert engineers when they use the ActiveRecord::decrypt method. This method should generally not be used in production code, as it will cause an encrypted column to become decrypted. We use the recommendation severity in the query metadata so these alerts are treated as more of an informational alert. That means this may trigger an alert in a pull request, but it won’t cause the CodeQL CI job to fail. We use this lower severity level to allow engineers to assess the impact of new queries without immediate blocking. Additionally, this alert level isn’t tracked through our Fundamentals program, meaning it doesn’t require immediate action, reflecting the query’s maturity as we continue to refine its relevance and risk assessment./**
 * @id rb/github/use-of-activerecord-decrypt
 * @description Do not use the .decrypt method on AR models, this will decrypt all encrypted attributes and save
 * them unencrypted, effectively undoing encryption and possibly making the attributes inaccessible.
 * If you need to access the unencrypted value of any attribute, you can do so by calling my_model.attribute_name.
 * @kind problem
 * @severity recommendation
 * @name Use of ActiveRecord decrypt method
 * @tags security
 *      github-internal
 */

import ruby
import DataFlow
import codeql.ruby.DataFlow
import codeql.ruby.frameworks.ActiveRecord

/** Match against .decrypt method calls where the receiver may be an ActiveRecord object */
class ActiveRecordDecryptMethodCall extends ActiveRecordInstanceMethodCall {
  ActiveRecordDecryptMethodCall() { this.getMethodName() = "decrypt" }
}

from ActiveRecordDecryptMethodCall call
select call,
  "Do not use the .decrypt method on AR models, this will decrypt all encrypted attributes and save them unencrypted.
Another educational query is the one mentioned above in which we detect the absence of the `control_access` method in a class that defines a REST API endpoint. If a pull request introduces a new endpoint without `control_access`,  a comment will appear on the pull request saying that the `control_access` method wasn’t found and it’s a requirement for REST API endpoints. This will notify the reviewer of a potential issue and prompt the developer to fix it./**
 * @id rb/github/api-control-access
 * @name Rest API Without 'control_access'
 * @description All REST API endpoints must call the 'control_access' method, to ensure that only specified actor types are able to access the given endpoint.
 * @kind problem
 * @tags security
 * github-internal
 * @precision high
 * @problem.severity recommendation
 */

import codeql.ruby.AST
import codeql.ruby.DataFlow
import codeql.ruby.TaintTracking
import codeql.ruby.ApiGraphs

// Api::App REST API endpoints should generally call the control_access method
private DataFlow::ModuleNode appModule() {
  result = API::getTopLevelMember("Api").getMember("App").getADescendentModule() and
  not result = protectedApiModule() and
  not result = staffAppApiModule()
}

// Api::Admin, Api::Staff, Api::Internal, and Api::ThirdParty REST API endpoints do not need to call the control_access method
private DataFlow::ModuleNode protectedApiModule() {
  result =
    API::getTopLevelMember(["Api"])
        .getMember(["Admin", "Staff", "Internal", "ThirdParty"])
        .getADescendentModule()
}

// Api::Staff::App REST API endpoints do not need to call the control_access method
private DataFlow::ModuleNode staffAppApiModule() {
  result =
    API::getTopLevelMember(["Api"]).getMember("Staff").getMember("App").getADescendentModule()
}

private class ApiRouteWithoutControlAccess extends DataFlow::CallNode {
  ApiRouteWithoutControlAccess() {
    this = appModule().getAModuleLevelCall(["get", "post", "delete", "patch", "put"]) and
    not performsAccessControl(this.getBlock())
  }
}

predicate performsAccessControl(DataFlow::BlockNode blocknode) {
  accessControlCalled(blocknode.asExpr().getExpr())
}

predicate accessControlCalled(Block block) {
  // the method `control_access` is called somewhere inside `block`
  block.getAStmt().getAChild*().(MethodCall).getMethodName() = "control_access"
}

from ApiRouteWithoutControlAccess api
select api.getLocation(),
  "The control_access method was not detected in this REST API endpoint. All REST API endpoints must call this method to ensure that the endpoint is only accessible to the specified actor types."
Variant analysis (VA) refers to the process of searching for variants of security vulnerabilities. This is particularly useful when we’re responding to a bug bounty submission or a security incident. We use a combination of tools to do this, including GitHub’s code search functionality, custom scripts, and CodeQL.  We will often start by using code search to find patterns similar to the one that caused a particular vulnerability across numerous repositories. This is sometimes not good enough, as code search is not semantically aware, meaning that it cannot determine whether a given variable is an Active Record object or whether it is being used in an `if` expression. To answer those types of questions we turn to CodeQL.When we write CodeQL queries for variant analysis we are much less concerned about false positives, since the goal is to provide results for security engineers to analyze. The quality of the code is also not quite as important, as these queries will only be used for the duration of the VA effort. Some of the types of things we use CodeQL for during VAs are:Where are we using SHA1 hashes?  One of our internal API endpoints was vulnerable to SQLi according to a recent bug bounty report. Where are we passing user input to that API endpoint?   There is a problem with how some HTTP request libraries in Ruby handle the proxy setting. Can we look at places we are instantiating our HTTP request libraries with a proxy setting?One recent example involved a subtle vulnerability in Rails. We wanted to detect when the following condition was present in our code:A parameter was used to look up an Active Record object.  That parameter is later reused after the Active Record object is looked up.The concern with this condition is that it could lead to an insecure direct object reference (IDOR) vulnerability because Active Record finder methods can accept an array. If the code looks up an Active Record object in one call to determine if a given entity has access to a resource, but later uses a different element from that array to find an object reference, that can lead to an IDOR vulnerability. It would be difficult to write a query to detect  vulnerable instances of this pattern, but we were able to write a query that found potential vulnerabilities that gave us a list of code paths to manually analyze. We ran the query against a large number of our Ruby codebases using CodeQL’s MRVA.The query, which is a bit hacky and not quite production grade, is below:/**
 * @name wip array query
 * @description an array is passed to an AR finder object
 */

import ruby
import codeql.ruby.AST
import codeql.ruby.ApiGraphs
import codeql.ruby.frameworks.Rails
import codeql.ruby.frameworks.ActiveRecord
import codeql.ruby.frameworks.ActionController
import codeql.ruby.DataFlow
import codeql.ruby.Frameworks
import codeql.ruby.TaintTracking

// Gets the "final" receiver in a chain of method calls.
// For example, in `Foo.bar`, this would give the `Foo` access, and in
// `foo.bar.baz("arg")` it would give the `foo` variable access
private Expr getUltimateReceiver(MethodCall call) {
  exists(Expr recv |
    recv = call.getReceiver() and
    (
      result = getUltimateReceiver(recv)
      or
      not recv instanceof MethodCall and result = recv
    )
  )
}

// Names of class methods on ActiveRecord models that may return one or more
// instances of that model. This also includes the `initialize` method.
// See https://api.rubyonrails.org/classes/ActiveRecord/FinderMethods.html
private string staticFinderMethodName() {
  exists(string baseName |
    baseName = ["find_by", "find_or_create_by", "find_or_initialize_by", "where"] and
    result = baseName + ["", "!"]
  )
  // or
  // result = ["new", "create"]
}

private class ActiveRecordModelFinderCall extends ActiveRecordModelInstantiation, DataFlow::CallNode
{
  private ActiveRecordModelClass cls;

  ActiveRecordModelFinderCall() {
    exists(MethodCall call, Expr recv |
      call = this.asExpr().getExpr() and
      recv = getUltimateReceiver(call) and
      (
        // The receiver refers to an `ActiveRecordModelClass` by name
        recv.(ConstantReadAccess).getAQualifiedName() = cls.getAQualifiedName()
        or
        // The receiver is self, and the call is within a singleton method of
        // the `ActiveRecordModelClass`
        recv instanceof SelfVariableAccess and
        exists(SingletonMethod callScope |
          callScope = call.getCfgScope() and
          callScope = cls.getAMethod()
        )
      ) and
      (
        call.getMethodName() = staticFinderMethodName()
        or
        // dynamically generated finder methods
        call.getMethodName().indexOf("find_by_") = 0
      )
    )
  }

  final override ActiveRecordModelClass getClass() { result = cls }
}

class FinderCallArgument extends DataFlow::Node {
  private ActiveRecordModelFinderCall finderCallNode;

  FinderCallArgument() { this = finderCallNode.getArgument(_) }
}

class ParamsHashReference extends DataFlow::CallNode {
  private Rails::ParamsCall params;

  // TODO: only direct element references against `params` calls are considered
  ParamsHashReference() { this.getReceiver().asExpr().getExpr() = params }

  string getArgString() {
    result = this.getArgument(0).asExpr().getConstantValue().getStringlikeValue()
  }
}

class ArrayPassedToActiveRecordFinder extends TaintTracking::Configuration {
  ArrayPassedToActiveRecordFinder() { this = "ArrayPassedToActiveRecordFinder" }

  override predicate isSource(DataFlow::Node source) { source instanceof ParamsHashReference }

  override predicate isSink(DataFlow::Node sink) {
    sink instanceof FinderCallArgument
  }

  string getParamsArg(DataFlow::CallNode paramsCall) {
    result = paramsCall.getArgument(0).asExpr().getConstantValue().getStringlikeValue()
  }

  // this doesn't check for anything fancy like whether it's reuse in a if/else
  // only intended for quick manual audit filtering of interesting candidates
  // so remains fairly broad to not induce false negatives
  predicate paramsUsedAfterLookups(DataFlow::Node source) {
    exists(DataFlow::CallNode y | y instanceof ParamsHashReference
    and source.getEnclosingMethod() = y.getEnclosingMethod()
    and source != y
    and getParamsArg(source) = getParamsArg(y)
    // we only care if it's used again AFTER an object lookup
    and y.getLocation().getStartLine() > source.getLocation().getStartLine())
  }
}

from ArrayPassedToActiveRecordFinder config, DataFlow::Node source, DataFlow::Node sink
where config.hasFlow(source, sink) and config.paramsUsedAfterLookups(source)
select source, sink.getLocation()
CodeQL can be very useful for product security engineering teams to detect and prevent vulnerabilities at scale. We use a combination of queries that run in CI using our query pack and one-off queries run through MRVA to find potential vulnerabilities and communicate them to engineers. CodeQL isn’t only useful for finding security vulnerabilities, though; it is also useful for detecting the presence or absence of security controls that are defined in code. This saves our security team time by surfacing certain security problems automatically, and saves our engineers time by detecting them earlier in the development process.Writing custom CodeQL queriesWe have a large number of articles and resources for writing custom CodeQL queries. If you haven’t written custom CodeQL queries before, here are some resources to help get you started:Michael Recachinas, GitHub Staff Security Engineer, also contributed to this blog post.]]></content:encoded></item><item><title>Current state of machine learning and intelligent systems</title><link>https://www.datasciencecentral.com/current-state-of-machine-learning-and-intelligent-systems/</link><author>Dan Wilson</author><category>dev</category><category>ai</category><pubDate>Wed, 12 Feb 2025 16:44:58 +0000</pubDate><source url="https://www.datasciencecentral.com/">Data Science Central</source><content:encoded><![CDATA[Interview with Dr. Andrea Isoni – SHOW 16 Intelligent systems are evolving faster than ever, and keeping up with the latest advancements requires expertise, foresight, and a deep understanding of both the technological and regulatory landscapes. In AI Think Tank Podcast – Show 16, I had the pleasure of sitting down with Dr. Andrea Isoni, Director and… Read More »]]></content:encoded></item><item><title>Elon Musk&apos;s Waste.gov Is Just a WordPress Theme Placeholder Page</title><link>https://www.404media.co/elon-musks-waste-gov-is-just-a-wordpress-theme-placeholder-page/</link><author>Jason Koebler</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/CleanShot-2025-02-12-at-08.15.15@2x.png" length="" type=""/><pubDate>Wed, 12 Feb 2025 16:25:59 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[A  created by the Trump administration to “track government waste” has been left unupdated with a default WordPress sample page that includes language about an imaginary architecture firm. “Waste.gov: Tracking government waste,” the tagline for the website, , says. The rest of the webpage, however, is about an imaginary architecture firm called Études, pulled from a sample webpage for a default WordPress theme called Twenty Twenty-Four. This remains the case a day after Elon Musk, in the Oval Office,  that all of DOGE’s supposed waste-cutting actions are transparent and are available on government websites. Musk is currently in charge of finding and eliminating "waste."“We actually are trying to be as transparent as possible. In fact, our actions—we post our actions to the DOGE handle on X, and to the DOGE website. So all of our actions, which are maximally transparent,” Musk said. “In fact, I don’t think there’s been — I don’t know the case that where [sic] an organization has been more transparent than the DOGE organization.”  contains the line “An official website of the United States government,” a single image of a dollar sign, the words “Department of Government Efficiency. The people voted for major reform,” and nothing else. The website for the US Digital Service, which has been renamed the US DOGE Service, has not been meaningfully updated since Trump was inaugurated. Waste.gov, meanwhile, says “Études is a pioneering firm that seamlessly merges creativity and functionality to redefine architectural excellence,” and various default images and text from the “” WordPress theme, which is also billed as “a flexible default theme.” The theme is “suitable for everyone, from casual bloggers to creative photographers or small businesses,” the theme’s page advertises. Seemingly, the inclusive nature of this theme extends its utility to those seeking to gut the federal government. Specifically, Waste.gov is an exact mirror of the “” for that theme.Notably, Waste.gov does not comply with various executive orders issued by Donald Trump because it contains the word “diverse” in the line “Our comprehensive suite of professional services caters to a diverse clientele, ranging from homeowners to commercial developers.” The imaginary architecture firm also offers “a commitment to innovation and sustainability.” Research on climate change and sustainability has been purged by this administration. The White House registered both waste.gov and DEI.gov—which redirects to waste.gov—last week, .Update: After this article was published, Waste.gov was put behind a password wall.]]></content:encoded></item><item><title>Podcast: AI Is Breaking Our Brains</title><link>https://www.404media.co/podcast-ai-is-breaking-our-brains/</link><author>Jason Koebler</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/ai-atrophy-yt-cover.jpg" length="" type=""/><pubDate>Wed, 12 Feb 2025 15:34:47 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[This week we discuss a new Microsoft study that finds using generative AI is "atrophying" people's cognition and critical thinking skills, the right's war on Wikipedia, and, in the subscriber's section, the idea of posting against fascism.Subscribers-only video and embed below:]]></content:encoded></item><item><title>AI Slop of Musk and Trump on TikTok Racks Up 700 Million Views</title><link>https://www.404media.co/ai-slop-of-musk-and-trump-on-tiktok-racks-up-700-million-views/</link><author>Emanuel Maiberg</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/image6.png" length="" type=""/><pubDate>Wed, 12 Feb 2025 15:11:06 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[Videos that use AI generated voices of President Donald Trump and Elon Musk are gaining a massive number of views on TikTok, showing that the platform is also suffering from the onslaught of AI-generated slop that has flooded every corner of the internet. According to Alexios Mantzarlis in his , 400 videos from about two dozen accounts dedicated to posting AI-generated audio of Trump and Musk making quasi-motivational statements have gained more than 700 million views between them.]]></content:encoded></item><item><title>EuroPython Society: Board Report for January 2025</title><link>https://www.europython-society.org/board-report-for-january-2025/</link><author></author><category>dev</category><category>python</category><pubDate>Wed, 12 Feb 2025 15:08:37 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[The top priority for the board in January was finishing the hiring of our event manager. We’re super excited to introduce Anežka Müller! Anežka is a freelance event manager and a longtime member of the Czech Python community. She’s a member of the Pyvec board, co-organizes PyLadies courses, PyCon CZ, Brno Pyvo, and Brno Python Pizza. She’ll be working closely with the board and OPS team, mainly managing communication with service providers. Welcome onboard! Our second priority was onboarding teams. We’re happy that we already have the Programme team in place—they started early and launched the Call for Proposals at the beginning of January. We’ve onboarded a few more teams and are in the process of bringing in the rest.Our third priority was improving our grant programme in order to support more events with our limited budget and to make it more clear and transparent. We went through past data, came up with a new proposal, discussed it, voted on it, and have already published it on our blog. Updating onboarding/offboarding checklists for Volunteers and Board MembersVarious infrastructure updates including new website deployment and self-hosted previews for Pull Requests to the website.Setting up EPS AWS account.Working out the Grant Guidelines update for 2025Attending PyConWeb and FOSDEMReviewing updates to the Sponsors setup and packages for 2025More documentation, sharing know-how and reviewing new proposals.Brand strategy: Analysis of social media posts from previous years and web analytics. Call with a European open-source maintainer and a call with a local events organizer about EP content.Comms & design: Call for proposal announcements, EP 2024 video promotions, speaker mentorship, and newsletter. Video production - gathering videos from speakers, video post-production, and scheduling them on YouTube shorts, and social media.Event management coordination: Calls with the event manager and discussions about previous events.Grants: Work on new grant guidelines and related comms.Team onboarding: Calls with potential comms team members and coordination.PR: Delivering a lightning talk at FOSDEM.Offboarding the old boardOnboarding new team membersAdministrative work on GrantsWorked on the Grants proposalFollow-up with team membersCommunity outreach: FOSDEMWorking on various infrastructure updates, mostly related to the website.Reviewing Pull Requests for the website and the internal botWorking on the infrastructure team proposal.Timeline: Discussion with the Programme Team, and planning to do the same with the other teams.Visa Request letter: Setup and Test Visa Request Automation for the current yearTeam selection discussion with past volunteers]]></content:encoded></item><item><title>Python Morsels: Avoid over-commenting in Python</title><link>https://www.pythonmorsels.com/avoid-comments/</link><author></author><category>dev</category><category>python</category><pubDate>Wed, 12 Feb 2025 15:05:39 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[Documenting instead of commentingHere is a comment I would not write in my code:That comment seems to describe what this code does... so why would I  write it?I do like that comment, but I would prefer to write it as a docstring instead:Documentation strings are for conveying the purpose of function, class, or module, typically at a high level.
Unlike comments, they can be read by Python's built-in  function:Docstrings are also read by other documentation-oriented tools, like Sphinx.Non-obvious variables and valuesHere's a potentially helpful comment:]]></content:encoded></item><item><title>Linux 6.13 Performance For 250Hz vs. 1000Hz Timer Frequency Comparison</title><link>https://www.phoronix.com/news/Linux-250Hz-1000Hz-Kernel-2025</link><author>Michael Larabel</author><category>tech</category><pubDate>Wed, 12 Feb 2025 15:05:00 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Given the recent patch proposal to raise the Linux kernel's default timer frequency from 250Hz to 1000Hz, I ran some fresh benchmarks looking at the 250Hz vs. 1000Hz comparison on some modern desktop hardware...]]></content:encoded></item><item><title>Meta’s New AI: Outrageously Good!</title><link>https://www.youtube.com/watch?v=m6aaQoPv5r8</link><author>Two Minute Papers</author><category>dev</category><category>ai</category><enclosure url="https://www.youtube.com/v/m6aaQoPv5r8?version=3" length="" type=""/><pubDate>Wed, 12 Feb 2025 15:03:46 +0000</pubDate><source url="https://www.youtube.com/channel/UCbfYPyITQ-7l4upoX8nvctg">Two Minute Papers</source><content:encoded><![CDATA[❤️ Check out Lambda here and sign up for their GPU Cloud: https://lambdalabs.com/papers

📝 The paper "VideoJAM: Joint Appearance-Motion Representations for Enhanced Motion Generation in Video Models" is available here:
https://hila-chefer.github.io/videojam-paper.github.io/

Vs Veo2: https://x.com/TomLikesRobots/status/1888279188336963725

📝 My paper on simulations that look almost like reality is available for free here:
https://rdcu.be/cWPfD 

Or this is the orig. Nature Physics link with clickable citations:
https://www.nature.com/articles/s41567-022-01788-5

🙏 We would like to thank our generous Patreon supporters who make Two Minute Papers possible:
Benji Rabhan, B Shang, Christian Ahlin, Gordon Child, John Le, Juan Benet, Kyle Davis, Loyal Alchemist, Lukas Biewald, Michael Tedder, Owen Skarpness, Richard Sundvall, Steef, Taras Bobrovytsky, Thomas Krcmar, Tybie Fitzhugh, Ueli GallizziIf you wish to appear here or pick up other perks, click here: https://www.patreon.com/TwoMinutePapers

My research: https://cg.tuwien.ac.at/~zsolnai/
X/Twitter: https://twitter.com/twominutepapers
Thumbnail design: Felícia Zsolnai-Fehér - http://felicia.hu]]></content:encoded></item><item><title>5 LLM Prompting Techniques Every Developer Should Know</title><link>https://www.kdnuggets.com/5-llm-prompting-techniques-every-developer-should-know</link><author>Bala Priya C</author><category>dev</category><category>ai</category><enclosure url="https://www.kdnuggets.com/wp-content/uploads/llm-prompting.png" length="" type=""/><pubDate>Wed, 12 Feb 2025 15:00:27 +0000</pubDate><source url="https://www.kdnuggets.com/">KDNuggets blog</source><content:encoded><![CDATA[Want to make the most out of large language models? Check out these prompting techniques you can start using today.]]></content:encoded></item><item><title>White Hat Hackers Expose Iridium Satellite Security Flaws</title><link>https://spectrum.ieee.org/iridium-satellite</link><author>Tereza Pultarova</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjIyMzgzNC9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc4NzYyODU5NX0.HBq5b9Y1gKzuYmBUj9j9OW0i6yHKWc8xIgxlrxWlo2k/image.jpg?width=600" length="" type=""/><pubDate>Wed, 12 Feb 2025 15:00:04 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[Users' locations and texts can be intercepted, including DoD employees]]></content:encoded></item><item><title>GNU Shepherd 1.0.2 Service Manager Delivers Fixes</title><link>https://www.phoronix.com/news/GNU-Shepherd-1.0.2</link><author>Michael Larabel</author><category>tech</category><pubDate>Wed, 12 Feb 2025 15:00:00 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[In addition to the recent release of SysVinit 3.14 and systemd continuing to tack on new features, the GNU Shepherd system/user service manager written in Guile Scheme is out today with a new release...]]></content:encoded></item><item><title>How Hans Bethe Stumbled Upon Perfect Quantum Theories</title><link>https://www.quantamagazine.org/how-hans-bethe-stumbled-upon-perfect-quantum-theories-20250212/</link><author>Matt von Hippel</author><category>Quanta Magazine</category><category>tech</category><enclosure url="https://www.quantamagazine.org/wp-content/uploads/2025/02/Perfect-Quantum-Theories_crSenor-Salme-Default.webp" length="" type=""/><pubDate>Wed, 12 Feb 2025 14:55:38 +0000</pubDate><source url="https://www.quantamagazine.org/">Quanta Magazine</source><content:encoded><![CDATA[By 1928, quantum physicists seemed poised to unravel matter’s final secrets. The German researcher Walter Gordon had applied the emerging theory of quantum mechanics to the hydrogen atom, the universe’s simplest atom, and worked out exactly how it behaved. A mastery of all atoms seemed sure to follow. It did not. When quantum particles influence each other, their possibilities intertwine in such…]]></content:encoded></item><item><title>Typecasting and Viewport Transitions in CSS With tan(atan2())</title><link>https://css-tricks.com/typecasting-and-viewport-transitions-in-css-with-tanatan2/</link><author>Juan Diego Rodríguez</author><category>frontend</category><pubDate>Wed, 12 Feb 2025 14:15:28 +0000</pubDate><source url="https://css-tricks.com/">CSS Tricks blog</source><content:encoded><![CDATA[We’ve been able to get the length of the viewport in CSS since… … 2013! Surprisingly, that was more than a decade ago. Getting the viewport width is as easy these days as easy as writing , but what does that translate to, say, in ? What about the other properties, like those that take a percentage, an angle, or an integer?Think about changing an element’s opacity, rotating it, or setting an animation progress based on the screen size. We would first need the  — which isn’t currently possible in CSS, right?What I am about to say isn’t a groundbreaking discovery, it was first described amazingly by Jane Ori in 2023. In short, we can use a weird hack (or feature) involving the  and  trigonometric functions to typecast a length (such as the viewport) to an integer. This opens  new layout possibilities, but my first experience was while writing an Almanac entry in which I just wanted to make an image’s opacity responsive.Resize the CodePen and the image will get more transparent as the screen size gets smaller, of course with some boundaries, so it doesn’t become invisible:This is the simplest we can do, but there is a lot more. Take, for example, this demo I did trying to combine many viewport-related effects. Resize the demo and the page feels alive: objects move, the background changes and the text smoothly wraps in place.I think it’s really cool, but I am no designer, so that’s the best my brain could come up with. Still, it may be too much for an introduction to this typecasting hack, so as a middle-ground, I’ll focus only on the title transition to showcase how all of it works:The idea behind this is to convert  to radians (a way to write angles) using , and then back to its original value using , with the perk of coming out as an integer. It should be achieved like this::root {
  --int-width: tan(atan2(100vw, 1px));
}But! Browsers aren’t too keep on this method, so a lot more wrapping is needed to make it work across all browsers. The following may seem like magic (or nonsense), so I recommend reading Jane’s post to better understand it, but this way it will work in all browsers:@property --100vw {
  syntax: "<length>";
  initial-value: 0px;
  inherits: false;
}

:root {
  --100vw: 100vw;
  --int-width: calc(10000 * tan(atan2(var(--100vw), 10000px)));
}Don’t worry too much about it. What’s important is our precious  variable, which holds the viewport size as an integer!Wideness: One number to rule them allRight now we have the viewport as an integer, but that’s just the first step. That integer isn’t super useful by itself. We oughta convert it to something else next since:different properties have different units, andwe want each property to go from a start value to an end value.Think about an image’s  going from  to , an object rotating from  to , or an element’s  going from  to . We want to interpolate between these values as  gets bigger, but right now it’s just an integer that usually ranges between  to , which is inflexible and can’t be easily converted to any of the end values.The best solution is to turn  into a number that goes from  to . So, as the screen gets bigger, we can multiply it by the desired end value. Lacking a better name, I call this “0-to-1” value . If we have , all the last examples become possible:/* If `--wideness is 0.5 */

.element {
  opacity: var(--wideness); /* is 0.5 */
  translate: rotate(calc(wideness(400px, 1200px) * 360deg)); /* is 180deg */
  offset-distance: calc(var(--wideness) * 100%); /* is 50% */
}So  is a value between  to  that represents how wide the screen is:  represents when the screen is narrow, and  represents when it’s wide. But we still have to set what those values mean in the viewport. For example, we may want  to be  and  to be , our viewport transitions will run between these values. Anything below and above is clamped to  and , respectively.In CSS, we can write that as follows::root {
  /* Both bounds are unitless */
  --lower-bound: 400; 
  --upper-bound: 1200;

  --wideness: calc(
    (clamp(var(--lower-bound), var(--int-width), var(--upper-bound)) - var(--lower-bound)) / (var(--upper-bound) - var(--lower-bound))
  );
}Besides easy conversions, the  variable lets us define the lower and upper limits in which the transition should run. And what’s even better, we can set the transition zone at a middle spot so that the user can see it in its full glory. Otherwise, the screen would need to be  so that  reaches  and who knows how wide to reach .We got the . What’s next?For starters, the title’s markup is divided into spans since there is no CSS-way to select specific words in a sentence:<h1><span>Resize</span> and <span>enjoy!</span></h1>And since we will be doing the line wrapping ourselves, it’s important to unset some defaults:h1 {
  position: absolute; /* Keeps the text at the center */
  white-space: nowrap; /* Disables line wrapping */
}The transition should work without the base styling, but it’s just too plain-looking. They are below if you want to copy them onto your stylesheet:And just as a recap, our current hack looks like this:@property --100vw {
  syntax: "<length>";
  initial-value: 0px;
  inherits: false;
}

:root {
  --100vw: 100vw;
  --int-width: calc(10000 * tan(atan2(var(--100vw), 10000px)));
  --lower-bound: 400;
  --upper-bound: 1200;

  --wideness: calc(
    (clamp(var(--lower-bound), var(--int-width), var(--upper-bound)) - var(--lower-bound)) / (var(--upper-bound) - var(--lower-bound))
  );
}OK, enough with the set-up. It’s time to use our new values and make the viewport transition. We first gotta identify  the title should be rearranged for smaller screens: as you saw in the initial demo, the first  goes up and right, while the second  does the opposite and goes down and left. So, the end position for both spans translates to the following values:h1 {
  span:nth-child(1) {
    display: inline-block; /* So transformations work */
    position: relative;
    bottom: 1.2lh;
    left: 50%;
    transform: translate(-50%);
  }

  span:nth-child(2) {
    display: inline-block; /* So transformations work */
    position: relative;
    bottom: -1.2lh;
    left: -50%;
    transform: translate(50%);
  }
}Before going forward, both formulas are basically the same, but with different signs. We can rewrite them at once bringing one new variable: . It will be either  or  and define which direction to run the transition:h1 {
  span {
    display: inline-block;
    position: relative;
    bottom: calc(1.2lh * var(--direction));
    left: calc(50% * var(--direction));
    transform: translate(calc(-50% * var(--direction)));
    }

  span:nth-child(1) {
    --direction: 1;
  }

  span:nth-child(2) {
    --direction: -1;
  }
}
The next step would be bringing  into the formula so that the values change as the screen resizes. However, we can’t just multiply everything by . Why? Let’s see what happens if we do:span {
  display: inline-block;
  position: relative;
  bottom: calc(var(--wideness) * 1.2lh * var(--direction));
  left: calc(var(--wideness) * 50% * var(--direction));
  transform: translate(calc(var(--wideness) * -50% * var(--direction)));
}As you’ll see, everything is backwards! The words wrap when the screen is too wide, and unwrap when the screen is too narrow:Unlike our first examples, in which the transition ends as  increases from  to , we want to complete the transition as  decreases from  to , i.e. while the screen gets smaller the properties need to reach their end value. This isn’t a big deal, as we can rewrite our formula as a subtraction, in which the subtracting number gets bigger as  increases:span {
  display: inline-block;
  position: relative;
  bottom: calc((1.2lh - var(--wideness) * 1.2lh) * var(--direction));
  left: calc((50% - var(--wideness) * 50%) * var(--direction));
  transform: translate(calc((-50% - var(--wideness) * -50%) * var(--direction)));
}And now everything moves in the right direction while resizing the screen!However, you will notice how words move in a straight line and some words overlap while resizing. We can’t allow this since a user with a specific screen size may get stuck at that point in the transition. Viewport transitions are cool, but not at the expense of ruining the experience for certain screen sizes.Instead of moving in a straight line, words should move in a curve such that they pass around the central word. Don’t worry, making a curve here is easier than it looks: just move the spans twice as fast in the x-axis as they do in the y-axis. This can be achieved by multiplying  by , although we have to cap it at  so it doesn’t overshoot past the final value.span {
 display: inline-block;
 position: relative;
 bottom: calc((1.2lh - var(--wideness) * 1.2lh) * var(--direction));
 left: calc((50% - min(var(--wideness) * 2, 1) * 50%) * var(--direction));
 transform: translate(calc((-50% - min(var(--wideness) * 2, 1) * -50%) * var(--direction)));
}Look at that beautiful curve, just avoiding the central text:This is just the beginning!It’s surprising how powerful having the viewport as an integer can be, and what’s even crazier, the last example is one of the most basic transitions you could make with this typecasting hack. Once you do the initial setup, I can imagine a lot more possible transitions, and  is so useful, it’s like having a new CSS feature right now.I expect to see more about “Viewport Transitions” in the future because they do make websites feel more “alive” than adaptive.]]></content:encoded></item><item><title>Real Python: Python Keywords: An Introduction</title><link>https://realpython.com/python-keywords/</link><author></author><category>dev</category><category>python</category><pubDate>Wed, 12 Feb 2025 14:00:00 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[Python keywords are reserved words with specific functions and restrictions in the language. Currently, Python has thirty-five keywords and four soft keywords. These keywords are always available in Python, which means you don’t need to import them. Understanding how to use them correctly is fundamental for building Python programs.By the end of this tutorial, you’ll understand that:There are  and  in Python.You can get a list of all keywords using  from the  module. in Python act as keywords only in specific contexts. are keywords that have been deprecated and turned into functions in Python 3.In this article, you’ll find a basic introduction to all Python keywords and soft keywords along with other resources that will be helpful for learning more about each keyword. Test your knowledge with our interactive “Python Keywords: An Introduction” quiz. You’ll receive a score upon completion to help you track your learning progress:In this quiz, you'll test your understanding of Python keywords and soft keywords. These reserved words have specific functions and restrictions in Python, and understanding how to use them correctly is fundamental for building Python programs.Python keywords are special reserved words that have specific meanings and purposes and can’t be used for anything but those specific purposes. These keywords are always available—you’ll never have to import them into your code.Python keywords are different from Python’s built-in functions and types. The built-in functions and types are also always available, but they aren’t as restrictive as the keywords in their usage. An example of something you  do with Python keywords is assign something to them. If you try, then you’ll get a . You won’t get a  if you try to assign something to a built-in function or type, but it still isn’t a good idea. For a more in-depth explanation of ways keywords can be misused, check out Invalid Syntax in Python: Common Reasons for SyntaxError.There are thirty-five keywords in Python. Here’s a list of them, each linked to its relevant section in this tutorial:Two keywords have additional uses beyond their initial use cases. The  keyword is also used with loops and with  and  in addition to in conditional statements. The  keyword is most commonly used in  statements, but also used with the  keyword.The list of Python keywords and soft keywords has changed over time. For example, the  and  keywords weren’t added until Python 3.7. Also, both  and  were keywords in Python 2.7 but were turned into built-in functions in Python 3 and no longer appear in the keywords list.As mentioned above, you’ll get an error if you try to assign something to a Python keyword. Soft keywords, on the other hand, aren’t that strict. They syntactically act as keywords only in certain conditions.This new capability was made possible thanks to the introduction of the PEG parser in Python 3.9, which changed how the interpreter reads the source code.Leveraging the PEG parser allowed for the introduction of structural pattern matching in Python. In order to use intuitive syntax, the authors picked , , and  for the pattern matching statements. Notably,  and  are widely used for this purpose in many other programming languages.To prevent conflicts with existing Python code that already used , , and  as variable or function names, Python developers decided to introduce the concept of soft keywords.Currently, there are four  in Python:You can use the links above to jump to the soft keywords you’d like to read about, or you can continue reading for a guided tour.Value Keywords: , , There are three Python keywords that are used as values. These values are singleton values that can be used over and over again and always reference the exact same object. You’ll most likely see and use these values a lot.There are a few terms used in the sections below that may be new to you. They’re defined here, and you should be aware of their meaning before proceeding:]]></content:encoded></item><item><title>Writing a Gimp 3.0 Plugin</title><link>https://schoenitzer.de/blog/2025/Gimp%203.0%20Plugin%20Ressources.html</link><author>nudin</author><category>hn</category><pubDate>Wed, 12 Feb 2025 13:26:12 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[
GIMP 3.0 is almost out, and I'm thrilled. Not only will this version bring new
features and improvements, but it finally modernizes the technology stack in two important ways:

This will make it easier and more sustainable to develop plugins for GIMP. The
old Python 2 plugins will not work anymore, but the new Python 3 plugins will
be more future-proof. I have a few ideas for plugins I want to write, so the
end of last year I started to dig into it. And while I'm far from the only one 
with this idea, information on writing GIMP 3 plugins is naturally still sparse.
So I decided to write down some collected resources and notes. If you have more
resources or tips, feel free to contact me, I'll happily update the article.

Plugins can be written in C, Python 3, Scheme, JavaScript and Vala. I will
  focus on Python 3.


As with GIMP 2.10, GIMP 3.0 ships with a Python interpreter embedded and will not use the system Python.


It currently ships Python 3.11


The Python API documentation is not yet available to read online, but can be
  found in a tarball in on the download page:
  https://download.gimp.org/pub/gimp/v3.0/api-docs/ It is however of limited
  benefit, since it doesn't contain any information not in the C-API
  documentation, except for the exact Python-method names, that can be guessed
  easily form the names for their C counterparts.


Your plugin should be placed in a subfolder of ~/.config/GIMP/3.0/plug-ins/
  and the main file must be named the same as the subfolder.


GIMP contains a Python REPL that can be started with
  Filters -> Development -> Python-Fu -> Console or quicker with the search feature ( and then type Python)


The Python REPL has some code limited completion that sadly only works for classes not for instances.


You don't need to restart GIMP, when you edit your plugin. It's loaded from disk on every run.


Run GIMP from terminal to see errors and stdout output of your plugin.


The GIMP source code repository contains several plugins that can be used as
  examples. They are located in the plug-ins folder.


If you want to use any Python modules, other than the standard library, you
  have to bundle them with your plugin. You can install them in the plugin
  folder with pip install --target /path/to/plugin somepackage. You
  can use the  module to add additional paths to the Python search path.


If you got stuck, you can ask for help on the IRC channel  on
  .

]]></content:encoded></item><item><title>EuroPython Society: Changes in the Grants Programme for 2025</title><link>https://www.europython-society.org/changes-in-the-grants-programme-for-2025/</link><author></author><category>dev</category><category>python</category><pubDate>Wed, 12 Feb 2025 13:16:30 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[We are increasing transparency and reducing ambiguity in the guidelines.We would like to support more events with our limited budgetWe’ve introduced caps for events in order to make sure all grants are fairly given and we can support more communities.We’ve set aside 10% of our budget for the local community. The EPS introduced a Grant Programme in 2017. Since then, we have granted almost EUR 350k through the programme, partly via EuroPython Finaid and by directly supporting other Python events and projects across Europe. In the last two years, the Grant Programme has grown to EUR 100k per year, with even more requests coming in.With this growth come new challenges in how to distribute funds fairly so that more events can benefit. Looking at data from the past two years, we’ve often been close to or over our budget. The guidelines haven’t been updated in a while. As grant requests become more complex, we’d like to simplify and clarify the process, and better explain it on our website.We would also like to acknowledge that EuroPython, when traveling around Europe, has an additional impact on the host country, and we’d like to set aside part of the budget for the local community.The Grant Programme is also a primary funding source for EuroPython Finaid. To that end, we aim to allocate 30% of the total Grant Programme budget to Finaid, an increase from the previous 25%.We’ve updated the text on our website, and split it into multiple sub-pages to make it easier to navigate. The website now includes a checklist of what we would like to see in a grant application, and a checklist for the Grants Workgroup – so that when you apply for the Grant you already know the steps that it will go through later and when you can expect an answer from us.We looked at the data from previous years, and size and timing of the grant requests. With the growing number and size of the grants, to make it more accessible to smaller conferences and conferences happening later in the year, we decided to introduce max caps per grant and split the budget equally between the first and second half of the year. We would also explicitly split the total budget into three categories – 30% goes to the EuroPython finaid, 10% is reserved for projects in the host country. The remaining 60% of the budget goes to fund other Python Conferences. This is similar to the split in previous years, but more explicit and transparent.Using 2024 data, and the budget available for Community Grants (60% of total), we’ve simulated different budget caps and found a sweet spot at 6000EUR, where we are able to support all the requests with most of the grants being below that limit. For 2025 we expect to receive a similar or bigger number of requests.We are introducing a special 10% pool of money to be used on projects in the host country (in 2025 that’s again Czech Republic). This pool is set aside at the beginning of the year, with one caveat that we would like to deploy it in the first half of the year. Whatever is left unused goes back to the Community Pool to be used in second half of the year.Fairer Funding: By spreading our grants out during the year, conferences that happen later won’t miss out.Easy to Follow: Clear rules and deadlines cut down on confusion about how much you can get and what it’s for.Better Accountability: We ask for simple post-event reports so we can see where the money went and what impact it made.Stronger Community: Funding more events grows our Python network across Europe, helping everyone learn, connect, and collaborate.]]></content:encoded></item><item><title>Apache Kafka Meets Apache Iceberg: Real-Time Data Streaming • Kasun Indrasiri • GOTO 2024</title><link>https://www.youtube.com/watch?v=bzVjBu5nhyM</link><author>GOTO Conferences</author><category>video</category><category>learning</category><enclosure url="https://www.youtube.com/v/bzVjBu5nhyM?version=3" length="" type=""/><pubDate>Wed, 12 Feb 2025 13:00:58 +0000</pubDate><source url="https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA">GOTO Conferences yt</source><content:encoded><![CDATA[This presentation was recorded at GOTO Chicago 2024. #GOTOcon #GOTOchgo
https://gotochgo.com

Kasun Indrasiri - Author of "Microservices for the Enterprise" @kasunindrasiri 

ORIGINAL TALK TITLE
Kafka Meets Iceberg: Real-Time Data Streaming into Modern Data Lakes & Warehouses

RESOURCES
https://twitter.com/kasunindrasiri
https://medium.com/@kasunindrasiri
https://www.linkedin.com/in/kasun-indrasiri

ABSTRACT
In this talk, we'll explore how Kafka serves as a powerful platform for capturing real-time streaming data and how organizations are increasingly adopting Apache Iceberg table format to store data in data lakes and data warehouses. We'll discuss the key benefits of using Apache Iceberg tables in your data lake such as schema evolution, ACID transactions, hidden partitioning, time traveling and efficient querying.

Next, we'll dive into how to efficiently stream data from Kafka into Iceberg-based data lakes. Confluent Tableflow will be introduced as a potential solution for streamlining the ingestion of Kafka streams into Iceberg tables within your data lake. A live demo will showcase the seamless integration of Kafka with Iceberg, equipping participants with practical knowledge to enhance their data architectures for powerful real-time analytics.

• The role of Kafka in real-time data streaming
• Why Apache Iceberg is essential for data lakes and data warehouses
• Iceberg fundamentals: Core concepts and key features
• Streaming data from Kafka to Iceberg tables in data lakes
• Use case: Leveraging Confluent Tableflow to stream Kafka data into data lakes and warehouses [...]

TIMECODES
00:00 Intro
01:10 Overview
02:06 Kafka is the standard for operational data
03:41 Iceberg for analytical data in data lakes
04:42 Apache Iceberg
05:27 Why Iceberg?
12:24 Structure of an Iceberg table
16:40 Streaming to data lakes is complicated
20:47 Tableflow materialize Kafka topics as Iceberg tables
23:47 Demo
35:37 Outro

Download slides and read the full abstract here:
https://gotochgo.com/2024/sessions/3370

RECOMMENDED BOOKS
Kasun Indrasiri & Sriskandarajah Suhothayan • Design Patterns for Cloud Native Applications • https://amzn.to/3szGx0p
Kasun Indrasiri & Danesh Kuruppu • gRPC: Up and Running • https://amzn.to/3sBGBJJ
Kasun Indrasiri & Prabath Siriwardena • Microservices for the Enterprise • https://amzn.to/40FhxkQ
Kasun Indrasiri • Beginning WSO2 ESB • https://amzn.to/3sx9NF0

https://bsky.app/profile/gotocon.com
https://twitter.com/GOTOcon
https://www.linkedin.com/company/goto-
https://www.instagram.com/goto_con
https://www.facebook.com/GOTOConferences
#ApacheKafka #Kafka #ApacheIceberg #Iceberg #AmazonAthena #DataStreaming #DataLake #DataWarehouse #ACIDTransactions #KafkaStreams #Confluent #Tableflow #ConfluentTableflow #KasunIndrasiri

CHANNEL MEMBERSHIP BONUS
Join this channel to get early access to videos & other perks:
https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join

Looking for a unique learning experience?
Attend the next GOTO conference near you! Get your ticket at https://gotopia.tech
Sign up for updates and specials at https://gotopia.tech/newsletter

SUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.
https://www.youtube.com/user/GotoConferences/?sub_confirmation=1]]></content:encoded></item><item><title>Top 5 Freelancer Websites Better Than Fiverr and Upwork</title><link>https://www.kdnuggets.com/top-5-freelancer-websites-better-fiverr-upwork</link><author>Abid Ali Awan</author><category>dev</category><category>ai</category><enclosure url="https://www.kdnuggets.com/wp-content/uploads/awan_top_5_freelancer_websites_better_fiverr_upwork_4.png" length="" type=""/><pubDate>Wed, 12 Feb 2025 13:00:35 +0000</pubDate><source url="https://www.kdnuggets.com/">KDNuggets blog</source><content:encoded><![CDATA[Discover freelancing platforms that care about you, not just your money, offering low commission rate, better policies, and higher earning potential.]]></content:encoded></item><item><title>&quot;Thinking&quot; Visually Boosts AI Problem Solving</title><link>https://spectrum.ieee.org/visual-reasoning-in-ai</link><author>Edd Gent</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjM4MjE0OC9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc5NTE3MDA5M30.vId7q-VTLZuXiKu3LB50mcqGpz6lD5N59-GuTYRzltQ/image.jpg?width=600" length="" type=""/><pubDate>Wed, 12 Feb 2025 13:00:05 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[ Giving language models a “mind’s eye” helps them tackle spatial reasoning tasks]]></content:encoded></item><item><title>Training IT Teams for Multi-Cloud DevOps Environments</title><link>https://devops.com/training-it-teams-for-multi-cloud-devops-environments/</link><author>Anne Fernandez</author><category>devops</category><pubDate>Wed, 12 Feb 2025 12:11:06 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Delivering Malware Through Abandoned Amazon S3 Buckets</title><link>https://www.schneier.com/blog/archives/2025/02/delivering-malware-through-abandoned-amazon-s3-buckets.html</link><author>Bruce Schneier</author><category>infosec</category><category>blog</category><pubDate>Wed, 12 Feb 2025 12:09:24 +0000</pubDate><source url="https://www.schneier.com/">Schneider on Security</source><content:encoded><![CDATA[Here’s a supply-chain attack just waiting to happen. A group of researchers searched for, and then registered, abandoned Amazon S3 buckets for about $400. These buckets contained software libraries that are still used. Presumably the projects don’t realize that they have been abandoned, and still ping them for patches, updates, and etc.The TL;DR is that this time, we ended up discovering ~150 Amazon S3 buckets that had previously been used across commercial and open source software products, governments, and infrastructure deployment/update pipelines—and then abandoned.Naturally, we registered them, just to see what would happen—”how many people are really trying to request software updates from S3 buckets that appear to have been abandoned months or even years ago?”, we naively thought to ourselves.Turns out they got eight million requests over two months.Had this been an actual attack, they would have modified the code in those buckets to contain malware and watch as it was incorporated in different software builds around the internet. This is basically the SolarWinds attack, but much more extensive.But there’s a second dimension to this attack. Because these update buckets are abandoned, the developers who are using them also no longer have the power to patch them automatically to protect them. The mechanism they would use to do so is now in the hands of adversaries. Moreover, often—but not always—losing the bucket that they’d use for it also removes the original vendor’s ability to identify the vulnerable software in the first place. That hampers their ability to communicate with vulnerable installations.Software supply-chain security is an absolute mess. And it’s not going to be easy, or cheap, to fix. Which means that it won’t be. Which is an even worse mess.]]></content:encoded></item><item><title>Real Python: Quiz: Python Keywords: An Introduction</title><link>https://realpython.com/quizzes/python-keywords/</link><author></author><category>dev</category><category>python</category><pubDate>Wed, 12 Feb 2025 12:00:00 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[Python keywords are reserved words with specific functions and restrictions in the language. These keywords are always available in Python, which means you don’t need to import them. Understanding how to use them correctly is fundamental for building Python programs.]]></content:encoded></item><item><title>Linux 6.15 To Bring More Improvements To DRM Panic &quot;Screen of Death&quot;</title><link>https://www.phoronix.com/news/Linux-6.15-More-DRM-Panic</link><author>Michael Larabel</author><category>tech</category><pubDate>Wed, 12 Feb 2025 11:52:00 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[Now that the Linux 6.14 merge window has passed, new feature material aiming for the Linux 6.15 kernel is beginning to get ready for staging in DRM-Next ahead of that next merge window opening up around the end of March. Sent out today was the first batch of drm-misc-next changes for Linux 6.15 that include more work on DRM Panic for that Linux equivalent to Microsoft Windows' "Blue Screen of Death" as well as changes to the other smaller Direct Rendering Manager drivers...]]></content:encoded></item><item><title>The difference between metrics and scorers</title><link>https://www.youtube.com/watch?v=67KMDSitw1M</link><author>probabl</author><category>dev</category><category>ai</category><category>video</category><category>learning</category><enclosure url="https://www.youtube.com/v/67KMDSitw1M?version=3" length="" type=""/><pubDate>Wed, 12 Feb 2025 10:41:04 +0000</pubDate><source url="https://www.youtube.com/channel/UCIat2Cdg661wF5DQDWTQAmg">Probabl</source><content:encoded><![CDATA[You can easily write custom metric functions for scikit-learn, but you need to take an extra step if you want to use those metrics in a hyperparameter search. To add a number there, you need to use a scorer instead. The goal of this video is to explain the difference and to show how to leverage the `make_scorer` helper utility here.

Website: https://probabl.ai/
LinkedIn: https://www.linkedin.com/company/probabl
Bluesky: https://bsky.app/profile/probabl.bsky.social
Twitter: https://x.com/probabl_ai
Discord: https://discord.probabl.ai

We also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:
https://rss.com/podcasts/sample-space/

#probabl]]></content:encoded></item><item><title>The Subsea Cable Network with Josh Dzieza</title><link>https://softwareengineeringdaily.com/2025/02/12/the-subsea-cable-network-with-josh-dzieza/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=the-subsea-cable-network-with-josh-dzieza</link><author>SEDaily</author><category>podcast</category><enclosure url="https://traffic.megaphone.fm/SED7608490746.mp3" length="" type=""/><pubDate>Wed, 12 Feb 2025 10:00:59 +0000</pubDate><source url="http://softwareengineeringdaily.com/category/all-episodes/exclusive-content/podcast/">Podcast - Software Engineering Daily</source><content:encoded><![CDATA[Subsea cables are high-capacity fiber-optic lines laid along the ocean floor to enable global communication by transmitting data between continents. Spanning thousands of miles, they carry an estimated 95% of international internet, phone, and data transmissions.Critically, these cables are vulnerable to sabotage by state actors, as they form critical infrastructure for global communication and economic stability. Indeed, Russia and China have been implicated in activities targeting subsea cables as recently as November 2024, and experts warn that these networks are likely to be focal points in future conflicts, heightening geopolitical tensions.Josh Dzieza is a reporter for The Verge and has covered the subsea cable industry and the strategic importance of subsea cables. He joins the podcast alongside Gregor Vand to discuss this invisible, and increasingly important, network infrastructure.You can check out Josh’s reporting here.]]></content:encoded></item><item><title>Show HN: Letting LLMs Run a Debugger</title><link>https://github.com/mohsen1/llm-debugger-vscode-extension</link><author>mohsen1</author><category>dev</category><category>hn</category><pubDate>Wed, 12 Feb 2025 09:54:14 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[I just built an experimental VSCode extension called LLM Debugger. It’s a proof-of-concept that lets a large language model take charge of debugging. Instead of only looking at the static code, the LLM also gets to see the live runtime state—actual variable values, function calls, branch decisions, and more. The idea is to give it enough context to help diagnose issues faster and even generate synthetic data from running programs.* Active Debugging: It integrates with Node.js debug sessions to gather runtime info (like variable states and stack traces).* Automated Breakpoints: It automatically sets and manages breakpoints based on both code analysis and LLM suggestions.* LLM Guidance: With live debugging context, the LLM can suggest actions like stepping through code or adjusting breakpoints in real time.I built this out of curiosity to see if combining static code with runtime data could help LLMs solve bugs more effectively. It’s rough around the edges and definitely not production-readyI’m not planning on maintaining it further. But I thought it was a fun experiment and wanted to share it with you all.Check out the attached video demo to see it in action. Would love to hear your thoughts and any feedback you might have!]]></content:encoded></item><item><title>Achieve Transformative Network Security With Cisco Hybrid Mesh Firewall</title><link>https://blogs.cisco.com/security/achieve-transformative-network-security-with-cisco-hybrid-mesh-firewall/</link><author>Rick Miles</author><category>infosec</category><pubDate>Wed, 12 Feb 2025 08:30:00 +0000</pubDate><source url="https://blogs.cisco.com/security">Cisco Security Blog</source><content:encoded><![CDATA[Hybrid Mesh Firewall addresses 3 forces: Fine-grained composition & distribution of apps in data centers, complex modern networks & sophisticated threats.]]></content:encoded></item><item><title>Cisco and Wiz Collaborate to Enhance Cloud Security: Tackling AI-Generating Threats in Complex IT Infrastructures</title><link>https://blogs.cisco.com/security/cisco-and-wiz-collaborate-to-enhance-cloud-security/</link><author>Rick Miles</author><category>infosec</category><pubDate>Wed, 12 Feb 2025 08:30:00 +0000</pubDate><source url="https://blogs.cisco.com/security">Cisco Security Blog</source><content:encoded><![CDATA[Cisco is collaborating with Wiz. Together, they aim to improve cloud security for enterprises grappling with AI-generated threats in intricate IT landscapes.]]></content:encoded></item><item><title>Zato Blog: Modern REST API Tutorial in Python</title><link>https://zato.io/en/blog/modern-rest-api-tutorial-in-python.html</link><author></author><category>dev</category><category>python</category><pubDate>Wed, 12 Feb 2025 08:00:00 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[
  2025-02-12, by Dariusz Suchojad
Great APIs don't win theoretical arguments - they just prefer to work reliably and to make developers' lives easier.Here's a tutorial on what building production APIs is really about: creating interfaces that are practical in usage,
while keeping your systems maintainable for years to come.]]></content:encoded></item><item><title>Kushal Das: pass using stateless OpenPGP command line interface</title><link>https://kushaldas.in/posts/pass-using-stateless-openpgp-command-line-interface.html</link><author></author><category>dev</category><category>python</category><pubDate>Wed, 12 Feb 2025 05:26:13 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[Yesterday I wrote about how
I am using a different tool for  signing and verification. Next, I
replaced my  usage. I have a small
patch to use
stateless OpenPGP command line interface (SOP). It is an implementation
agonostic standard for handling OpenPGP messages. You can read the whole SPEC
here.cargo install rsop rsop-oct
And copied the bash script from my repository to the path somewhere.The  binary from  follows the same SOP standard but uses the
card to signing/decryption. I stored my public key in
~/.password-store/.gpg-key file, which is in turn used for encryption.Here nothing changed related my daily  usage, except the number of time I am typing my  :)]]></content:encoded></item><item><title>This Week in Rust 586</title><link>https://this-week-in-rust.org/blog/2025/02/12/this-week-in-rust-586/</link><author>TWiR Contributors</author><category>This week in Rust</category><category>dev</category><category>rust</category><pubDate>Wed, 12 Feb 2025 05:00:00 +0000</pubDate><source url="https://this-week-in-rust.org/">This Week in Rust</source><content:encoded><![CDATA[This week's crate is esp32-mender-client, a client for ESP32 to execute firmware updates and remote commands.Thanks to Kelvin for the self-suggestion!An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:No calls for testing were issued this week.No calls for testing were issued this week.No calls for testing were issued this week.If you are a feature implementer and would like your RFC to appear on the above list, add the new 
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!Some of these tasks may also have mentors available, visit the task page for more information.No Calls for participation were submitted this week.Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.No Calls for papers or presentations were submitted this week.A relatively neutral week, with lots of real changes but most small in
magnitude. Most significant change is rustdoc's move of JS/CSS minification to
build time which cut doc generation times on most benchmarks fairly
significantly.3 Regressions, 5 Improvements, 1 Mixed; 2 of them in rollups
32 artifact comparisons made in totalNo RFCs were approved this week.Every week, the team announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.No Cargo Tracking Issues or PRs entered Final Comment Period this week.No Language Team Proposals entered Final Comment Period this week.No Language Reference RFCs entered Final Comment Period this week.No Unsafe Code Guideline Tracking Issues or PRs entered Final Comment Period this week.Rusty Events between 2025-02-12 - 2025-03-12 🦀If you are running a Rust event please add it to the calendar to get
it mentioned here. Please remember to add a link to the event too.
Email the Rust Community Team for access.Just because things are useful doesn't mean they are magically sound.]]></content:encoded></item><item><title>Microsoft Patch Tuesday, February 2025 Edition</title><link>https://krebsonsecurity.com/2025/02/microsoft-patch-tuesday-february-2025-edition/</link><author>BrianKrebs</author><category>infosec</category><pubDate>Wed, 12 Feb 2025 04:58:37 +0000</pubDate><source url="https://krebsonsecurity.com/">Krebs on Security</source><content:encoded><![CDATA[ today issued security updates to fix at least 56 vulnerabilities in its Windows operating systems and supported software, including two zero-day flaws that are being actively exploited.All supported Windows operating systems will receive an update this month for a buffer overflow vulnerability that carries the catchy name CVE-2025-21418. This patch should be a priority for enterprises, as Microsoft says it is being exploited, has low attack complexity, and no requirements for user interaction. senior staff research engineer  noted that since 2022, there have been nine elevation of privilege vulnerabilities in this same Windows component — three each year — including one in 2024 that was exploited in the wild as a zero day (CVE-2024-38193).“CVE-2024-38193 was exploited by the North Korean APT group known as Lazarus Group to implant a new version of the FudModule rootkit in order to maintain persistence and stealth on compromised systems,” Narang said. “At this time, it is unclear if CVE-2025-21418 was also exploited by Lazarus Group.”The other zero-day, CVE-2025-21391, is an elevation of privilege vulnerability in Windows Storage that could be used to delete files on a targeted system. Microsoft’s advisory on this bug references something called “CWE-59: Improper Link Resolution Before File Access,” says no user interaction is required, and that the attack complexity is low., lead software engineer at , said although the advisory provides scant detail, and even offers some vague reassurance that ‘an attacker would only be able to delete targeted files on a system,’ it would be a mistake to assume that the impact of deleting arbitrary files would be limited to data loss or denial of service.“As long ago as 2022, ZDI researchers set out how a motivated attacker could parlay arbitrary file deletion into full SYSTEM access using techniques which also involve creative misuse of symbolic links,”Barnett wrote.One vulnerability patched today that was publicly disclosed earlier is CVE-2025-21377, another weakness that could allow an attacker to elevate their privileges on a vulnerable Windows system. Specifically, this is yet another Windows flaw that can be used to steal NTLMv2 hashes — essentially allowing an attacker to authenticate as the targeted user without having to log in.According to Microsoft, minimal user interaction with a malicious file is needed to exploit CVE-2025-21377, including selecting, inspecting or “performing an action other than opening or executing the file.”“This trademark linguistic ducking and weaving may be Microsoft’s way of saying ‘if we told you any more, we’d give the game away,'” Barnett said. “Accordingly, Microsoft assesses exploitation as more likely.”The SANS Internet Storm Center has a handy list of all the Microsoft patches released today, indexed by severity. Windows enterprise administrators would do well to keep an eye on askwoody.com, which often has the scoop on any patches causing problems.It’s getting harder to buy Windows software that isn’t also bundled with Microsoft’s flagship Copilot artificial intelligence (AI) feature. Last month Microsoft started bundling Copilot with , which Redmond has since rebranded as “.” Ostensibly to offset the costs of its substantial AI investments, Microsoft also jacked up prices from 22 percent to 30 percent for upcoming license renewals and new subscribers.Office-watch.com writes that existing Office 365 users who are paying an annual cloud license do have the option of “Microsoft 365 Classic,” an AI-free subscription at a lower price, but that many customers are not offered the option until they attempt to cancel their existing Office subscription.In other security patch news,  has shipped iOS 18.3.1, which fixes a zero day vulnerability (CVE-2025-24200) that is showing up in attacks. has issued security updates that fix a total of 45 vulnerabilities across , , , , ,  and . at  notes that  is shipping an update today which will trigger updates for Chromium based browsers including , so be on the lookout for Chrome and Edge updates as we proceed through the week.]]></content:encoded></item><item><title>The Murky Ad-Tech World Powering Surveillance of US Military Personnel</title><link>https://www.404media.co/eskimi-2/</link><author>Joseph Cox</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/eskimi.png" length="" type=""/><pubDate>Wed, 12 Feb 2025 04:00:52 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[Last year, a revealed that a Florida-based data broker, Datastream Group, was selling highly sensitive location data that tracked United States military and intelligence personnel overseas. At the time, the origin of that data was unknown.Now, a letter sent to US senator Ron Wyden’s office that was obtained by an international collective of media outlets—including WIRED and 404 Media—claims that the ultimate source of that data was Eskimi, a little-known Lithuanian ad-tech company. Eskimi, meanwhile, denies it had any involvement.Eskimi’s alleged role—and its denials—highlight the opaque nature of the location data industry: A data broker in Florida claims a Lithuanian company provided data on US military personnel in Germany. That data could theoretically be sold to essentially anyone. But the exact ways in which the data is collected, compiled, and shared remains unclear. ]]></content:encoded></item><item><title>Risky Business #779 -- DOGE staffer linked to The Com</title><link>https://risky.biz/RB779/</link><author></author><category>infosec</category><category>podcast</category><enclosure url="https://dts.podtrac.com/redirect.mp3/media3.risky.biz/RB779.mp3" length="" type=""/><pubDate>Wed, 12 Feb 2025 03:18:48 +0000</pubDate><source url="https://risky.biz/">Risky Business blog</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>TL;DW: Too Long; Didn&apos;t Watch Distill YouTube Videos to the Relevant Information</title><link>https://tldw.tube/</link><author>pkaeding</author><category>hn</category><pubDate>Wed, 12 Feb 2025 02:15:17 +0000</pubDate><source url="https://news.ycombinator.com/">HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>An ontology for threats, cybercrime and digital forensic investigation on Smart City Infrastructure, (Wed, Feb 12th)</title><link>https://isc.sans.edu/diary/rss/31676</link><author></author><category>infosec</category><pubDate>Wed, 12 Feb 2025 02:05:01 +0000</pubDate><source url="https://isc.sans.edu/">Sans Edu Diaries</source><content:encoded><![CDATA[Blue teams have it hard – they maintain a watchful eye on whatever technology is deployed to detect threats, respond to incidents, perform digital forensics and reverse malware (or make malware happy!) when needed. Hopefully, no one has to handle all these roles alone since there is also the continuous learning aspect of getting up to speed with the latest threat vectors, vulnerabilities and exploit techniques. Adversaries only need one attack to succeed to gain actions on objective. In contrast, defenders have to detect and stop every attack to prevent adversaries from being successful. Let’s now extrapolate to an even bigger problem – what if this happens on emerging/future technologies and adversaries can get away with such crimes?Multiple countries are gradually considering the concept of Smart Cities, a key consideration in the United Nations Development Programme (UNDP). As such technologies are implemented, the responsibility of defending this critical infrastructure again falls on the shoulders of blue teams. Smart Cities have yet to be fully implemented, but it does not mean we should not be proactive in preparing defenders to handle future problems. Current issues, even without Smart Cities in the fray, already cause blue team grief (e.g. different technology platforms, different contexts, information sharing, collaboration and tool interoperability). Given these complexities, an ontology would allow a shared understanding of vocabulary, facilitate data sharing, and even enable automated data reasoning.Wanting to pre-emptively solve future issues of attacks and cybercrime on Smart City Infrastructure (SCI), I (along with my co-authors in the SUTD ASSET Group) set out to create the Smart City Ontological Paradigm Expression (SCOPE). SCOPE was designed to be an ontology for threats, cybercrime and digital forensic investigation on SCI. We did not create the ontology from scratch but chose to adhere to ontology best practices and extended the venerable Unified Cyber Ontology (UCO) [1] and Cyber-investigation Analysis Standard Expression (CASE) [2]. UCO and CASE have gained some traction, and these ontologies have been experimentally adopted in forensic tools such as Cellebrite, Magnet Forensics, and MSAB XRY [3]. However, UCO and CASE did not have any SCI representation, and expecting overwhelmed blue teams to create them from scratch would most certainly be the straw that broke the camel’s back. Smart City Infrastructure Definition (reproduced with permission from the authors) [4]We deliberated on several design factors. Firstly, we defined smart cities using a technology-agnostic approach while adhering to international standards (with reference to Figure 1) that adopted the United Nations (UN) Sustainable Development Goals (SDG) (this was done in a previous work) [4]. By doing so, we ensured that the evolution of technologies or vendors would not affect the fundamental principle of Smart Cities. Secondly, we identified possible threats, cybercrime, and digital forensic evidence sources from the Smart City, which were defined in the first step (also from the same previous work) [4]. Thirdly, we included MITRE ATT&CK techniques and MITRE CAPEC into SCOPE for analysts and investigators to provide additional context to forensic evidence. Finally, we followed the ontological style and design practices when creating SCOPE, an expansion profile from UCO and CASE.We evaluated SCOPE via real-world attack scenarios attributed to publicly reported real-world incidents attributed to Advanced Persistent Threat (APT) groups. With reference to Figure 2, the evaluation process workflow is shown. We successfully represented the attack scenarios, cybercrime committed, incident details, evidence and attack patterns (to name a few). SCOPE Evaluation Process (reproduced with permission from the authors) [3]Will SCOPE ever be helpful? Not yet. I hope it will come in handy in future for digital forensic investigators and law enforcement agencies when cybercrime on SCI becomes prevalent. As mentioned, SCOPE is technology-agnostic while adhering to several ISO standards. Additionally, it contains enough granularity to allow users to pinpoint key information while ensuring it can capture abstract definitions covering emerging technologies. We have made SCOPE publicly available to the digital forensic community to assist future smart city infrastructure investigations. SCOPE’s GitHub project link is https://github.com/scopeProject, and the official ontology website is https://scopeontology.org. If readers want to find out the complete details of SCOPE, you can find the full published paper in Volume 52 of Forensic Science International: Digital Investigation (FSIDI) or at https://doi.org/10.1016/j.fsidi.2025.301883.
1. https://www.scopus.com/record/display.uri?eid=2-s2.0-85021968557&origin=inward
2. https://doi.org/10.1016/j.diin.2017.08.002
3. https://doi.org/10.1016/j.fsidi.2025.301883
4. https://doi.org/10.1016/j.fsidi.2023.301540

 
 (c) SANS Internet Storm Center. https://isc.sans.edu Creative Commons Attribution-Noncommercial 3.0 United States License.]]></content:encoded></item><item><title>ISC Stormcast For Wednesday, February 12th, 2025 https://isc.sans.edu/podcastdetail/9320, (Wed, Feb 12th)</title><link>https://isc.sans.edu/diary/rss/31678</link><author></author><category>infosec</category><pubDate>Wed, 12 Feb 2025 02:00:02 +0000</pubDate><source url="https://isc.sans.edu/">Sans Edu Diaries</source><content:encoded><![CDATA[
 
 (c) SANS Internet Storm Center. https://isc.sans.edu Creative Commons Attribution-Noncommercial 3.0 United States License.]]></content:encoded></item><item><title>This Week In React #221: State of React, React Router, Rsbuild, ProseMirror, Redux, React Hook Form, Base UI, RSC, React Admin | AI &amp; RN, Expo, Strict DOM, Polygen, Ignite, New Arch, Radon, macOS, Universal RSC, Gesture Handler | TypeScript, Prettier, esbuild...</title><link>https://thisweekinreact.com/newsletter/221</link><author></author><category>frontend</category><pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate><source url="https://thisweekinreact.com/newsletter">This week in react</source><content:encoded><![CDATA[Cyril and Matthieu from Theodo Apps here 👋, standing in for Seb to bring you the latest news from React and React Native!This week we’ve been carefully reading the State of React 2024 survey results, and also found quite a few interesting articles. Things have been quieter when it comes to new releases.Check our partner conf App.js, happening May 28-30 in 🇵🇱 Kraków! The biggest React Native and Expo-focused conference gives us a 15% discount with code "TWIR". Want to submit a talk? Hurry—CFP is closing soon!As always, thanks for supporting us on your favorite platform:When you wake up in the morning how many different yaml files do you want to manage? With EAS Workflows, you have .• Automate builds• Run e2e tests• Submit to stores• GitHub triggers, lint checks, slack notifications...so much moreWith EAS Workflows you can  all your builds/updates/submissions. Package up all the commands in a workflow and go drink a coffee. You deserve it.The results of State of React 2024 are out. It is a gold mine of information and we can’t possibly talk about everything here but here are a few highlights:Of the “new” React features, Server Components are the most popular with 40% of the ~7000 respondents having “used it”, probably thanks to Next.js… is the most disliked React API, and is going away!Have you heard about React’s Taint API? It looks like 80% of React devs have not, which is understandable since it’s experimental.There’s not that much movement in the #1 spot: Next.js, TanStack Query, Axios, Jest, and Zod are still the most frequently used.A few rising stars: Zustand and Vitest got more users, TanStack Start is #1 in interest even though almost no one has used it yet.Deploying Next.js apps on Vercel is easy, but optimizing hosting costs? That’s a different story.Join Chris Lojniewski and Jakub Dakowicz of Pagepro on  for a deep analysis of Vercel cost optimization strategies. Learn how to identify what drives your costs and reduce them with  like adjusting prefetching to avoid excessive function calls, choosing proper rendering methods, and trimming unnecessary data transfers.They’ll also show you how to minimize reliance on Vercel’s premium features with feature externalization - offloading analytics, image optimization, and password protection. Plus, they’ll break down when enterprise pricing is worth considering and when you’re better off with alternatives. .We don't talk too much about LLMs in this newsletter (we guess you already hear about it more than enough 😅) but with all the announcements this week we thought it was a good time to give you an update.The big news:  to add (React-)Native mobile apps support to Bolt. Right now you can preview your AI-generated apps on the web, but you need to download the code to go further. They plan to add an integration with EAS to deploy to production in the future.Some competitors also had things to announce:]]></content:encoded></item><item><title>Go 1.24 arrives</title><link>https://golangweekly.com/issues/542</link><author></author><category>dev</category><category>go</category><pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate><source url="https://golangweekly.com/">Golang Weekly</source><content:encoded><![CDATA[DB Fiddle is a handy online database 'sandbox' for playing with various versions of MySQL, Postgres, and SQLite direct from the browser.]]></content:encoded></item><item><title>The Exit Interview: JP Phillips</title><link>https://fly.io/blog/the-exit-interview-jp/</link><author>Fly</author><category>dev</category><pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate><source url="https://fly.io/blog/feed.xml">Fly.io blog</source><content:encoded><![CDATA[JP Phillips is off to greener, or at least calmer, pastures. He joined us 4 years ago to build the next generation of our orchestration system, and has been one of the anchors of our engineering team. His last day is today. We wanted to know what he was thinking, and figured you might too.Question 1: Why, JP? Just why?LOL. When I looked at what I wanted to see from here in the next 3-4 years, it didn’t really match up with where we’re currently heading. Specifically, with our new focus on MPG  and [llm] Editorial comment: Even I don’t know what [llm] is.The Fly Machines platform is more or less finished, in the sense of being capable of supporting the next iteration of our products. My original desire to join Fly.io was to make Machines a product that would rid us of HashiCorp Nomad, and I feel like that’s been accomplished.Where were you hoping to see us headed?More directly positioned as a cloud provider, rather than a platform-as-a-service; further along the customer journey from “developers” and “startups” to large established companies.And, it’s not that I disagree with PAAS work or MPG! Rather, it’s not something that excites me in a way that I’d feel challenged and could continue to grow technically.Follow up question: does your family know what you’re doing here? Doing to us? Are they OK with it?Yes, my family was very involved in the decision, before I even talked to other companies.What’s the thing you’re happiest about having built here? It cannot be “all of ”.We’ve enabled developers to run workloads from an OCI image and an API call all over the world. On any other cloud provider, the knowledge of how to pull that off comes with a professional certification.In what file in our  repository would I find that code?So you mean, literally, the whole Fly Machines API, and , the API gateway for Fly Machines?Yes, all of it. The  API server, the  RPCs it calls, the  finite state machine system, the interface to running VMs.Is there something you especially like about that design?I like that it for the most part doesn’t require any central coordination. And I like that the P90 for Fly Machine  calls is sub-5-seconds for pretty much every region except for Johannesburg and Hong Kong.I think the FSM design is something I’m proud of; if I could take any code with me, it’d be the  in the  repo.You can read more about the  orchestrator JP led over here.  But, a quick decoder ring:  runs independently without any central coordination on thousands of “worker” servers around the globe. It’s structured as an API server for a bunch of finite state machine invocations, where an FSM might be something like “start a Fly Machine” or “create a new Fly Machine” or “cordon off a Fly Machine so we can update it”. Each FSM invocation is comprised of a bunch of steps, each of those steps has callbacks into the  code, and each step is logged in a BoltDB database.Thinking back, there are like two archetypes of insanely talented developers I’ve worked with. One is the kind that belts out ridiculous amounts of relatively sophisticated code on a whim, at like 3AM. Jerome [who leads our fly-proxy team], is that type. The other comes to projects with what feels like fully-formed, coherent designs that are not super intuitive, and the whole project just falls together around that design. Did you know you were going to do the FSM log thing when you started ?I definitely didn’t have any specific design in mind when I started on . I think the FSM stuff is a result of work I did at Compose.io / MongoHQ (where it was called “recipes”/“operations”) and the workd I did at HashiCorp using Cadence.Once I understood what the product needed to do and look like, having a way to perform deterministic and durable execution felt like a good design.Cadence is the child of AWS Step Functions and the predecessor to Temporal (the company).One of the biggest gains, with how it works in , is knowing we would need to deploy  all day, every day. If  was in the middle of doing some work, it needed to pick back up right where it left off, post-deploy.OK, next question. What’s the most impressive thing you saw someone else build here? To make things simpler and take some pressure off the interview, we can exclude any of my works from consideration.Sidebar:  is our state distribution system. While  runs individual Fly Machines for users, each instance is solely responsible for its own state; there’s no global scheduler. But we have platform components, most obviously , our Anycast router, that need to know what’s running where.  is a Rust service that does SWIM gossip to propagate information from each worker into a CRDT-structured SQLite database.  essentially means any component on our fleet can do SQLite queries to get near-real-time information about any Fly Machine around the world.If for no other reason than that we deployed , learned from it, and were able to make significant and valuable improvements — and then migrate to the new system in a short period of time.Having a “just SQLite” interface, for async replicated changes around the world in seconds, it’s pretty powerful.Just as a general-purpose gossip-based SQLite CRDT gossip system?OK, you’re being too nice. What’s your least favorite thing about the platform?GraphQL. No, Elixir. It’s a tie between GraphQL and Elixir.But probably GraphQL, by a hair.That’s not the answer I expected.GraphQL slows everyone down, and everything. Elixir only slows me down.The rest of the platform, you’re fine with? No complaints?I’m happier now that we have . is our new . When we launch a Fly Machine,  is our foothold in the machine; this is unlike a normal OCI runtime, where “pid 1” is often the user’s entrypoint program. Our original  was so simple people dunked on it and said it might as well have been a bash script; over time,  has sprouted a bunch of new features.  consolidates those features, and, more importantly, is itself a complete OCI runtime;  can natively run containers inside of Fly Machines.Before , there really wasn’t any contract between  and . And  was just “whatever we wanted  to be”. That limit its ability to serve us.Having  be an OCI-compliant runtime with an API for  to drive is  a big win for the future of the Fly Machines API.Was I right that we should have used SQLite for , or were you wrong to have used BoltDB?I still believe Bolt was the right choice. I’ve never lost a second of sleep worried that someone is about to run a SQL update statement on a host, or across the whole fleet, and then mangled all our state data. And limiting the storage interface, by not using SQL, kept ‘s scope managed.On the engine side of the platform, which is what  is, I still believe SQL is too powerful for what  does.If you had this to do over again, would Bolt be precisely what you’d pick, or is there something else you’d want to try? Some cool-ass new KV store?Nah. But, I’d maybe consider a SQLite database per-Fly-Machine. Then the scope of danger is about as small as it could possibly be.Whoah, that’s an interesting thought. People sleep on the “keep a zillion little SQLites” design.Yeah, with per-Machine SQLite, once a Fly Machine is destroyed, we can just zip up the database and stash it in object storage. The biggest hold-up I have about it is how we’d manage the schemas.OpenTelemetry: were you right all along?I basically attribute oTel at Fly.io to you.Without oTel, it’d be a disaster trying to troubleshoot the system. I’d have ragequit trying.I remember there being a cost issue, with how much Honeycomb was going to end up charging us to manage all the data. But that seems silly in retrospect.For sure. It is 100% part of the decision and the conversation. But: we didn’t have the best track record running a logs/metrics cluster at this fidelity. It was worth the money to pay someone else to manage tracing data.Strong agree. I think my only issue is just the extent to which it cruds up code. But I need to get over that.Yes, it’s very explicit. I think the next big part of oTel is going to be auto-instrumentation, for profiling.You’re a veteran Golang programmer. Say 3 nice things about Rust.Most of our backend is in Go, but , , and  are in Rust.Even I can’t say shit about Option and match.Match is so much better than anything in Go.Elixir, Go, and Rust. An honest take on that programming cocktail.Three’s a crowd, Elixir can stay home.If you could only lose one, you’d keep Rust.I’ve learned its shortcomings and the productivity far outweighs having to deal with the Rust compiler.You’d be unhappy if we moved the  API code from Go to Elixir.I kind of buy the idea of doing orchestration and scheduling code, which is policy-intensive, in a higher-level language.Maybe. If Ruby had a better concurrency story, I don’t think Elixir would have a place for us.Here I need to note that Ruby is functionally dead here, and Elixir is ascendant.We have an idiosyncratic management structure. We’re bottom-up, but ambiguously so. We don’t have roadmaps, except when we do. We have minimal top-down technical direction. Critique.It’s too easy to lose sight of whether your current focus [in what you’re building] is valuable to the company.The first thing I warn every candidate about on our “do-not-work-here” calls.I think it comes down to execution, and accountability to actually finish projects. I spun a lot trying to figure out what would be the most valuable work for Fly Machines.You don’t have to be so nice about things.We struggle a lot with consistent communication. We change direction a little too often. It got to a point where I didn’t see a point in devoting time and effort into projects, because I’d not be able to show enough value quick enough.I see things paying off later than we’d hoped or expected they would. Our secret storage system, Pet Semetary, is a good example of this. Our K8s service, FKS, is another obvious one, since we’re shipping MPG on it.This is your second time working Kurt, at a company where he’s the CEO. Give him a 1-4 star rating. He can take it! At least, I think he can take it.Whoah. I did not expect a histogram. Say more about 2023!We hired too many people, too quickly, and didn’t have the guardrails and structure in place for everybody to be successful.Yes. That was my next comment.Do we secretly agree about GPUs?Our side won the argument in the end! But at what cost?They were a killer distraction.Final question: how long will you remain in the first-responder on-call rotation after you leave? I assume at least until August. I have a shift this weekend; can you swap with me? I keep getting weekends.I am going to be asleep all weekend if any of my previous job changes are indicative.I sleep through on-call too! But nobody can yell at you for it now. I think you have the comparative advantage over me in on-calling.Yes I will absolutely take all your future on-call shifts, you have convinced me.All this aside: it has been a privilege watching you work. I hope your next gig is 100x more relaxing than this was. Or maybe I just hope that for myself. Except: I’ll never escape this place. Thank you so much for doing this.Thank you! I’m forever grateful for having the opportunity to be a part of Fly.io.]]></content:encoded></item><item><title>Meta SAM 2.1 is now available in Amazon SageMaker JumpStart</title><link>https://aws.amazon.com/blogs/machine-learning/meta-sam-2-1-is-now-available-in-amazon-sagemaker-jumpstart/</link><author>Marco Punio</author><category>dev</category><category>ai</category><enclosure url="https://d2908q01vomqb2.cloudfront.net/artifacts/DBSBlogs/ML-17926/basketball-layup-masked.mp4" length="" type=""/><pubDate>Tue, 11 Feb 2025 23:09:11 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[This blog post is co-written with George Orlin from Meta.Today, we are excited to announce that Meta’s Segment Anything Model (SAM) 2.1 vision segmentation model is publicly available through Amazon SageMaker JumpStart to deploy and run inference. Meta SAM 2.1 provides state-of-the-art video and image segmentation capabilities in a single model. This cutting-edge model supports long-context processing, complex segmentation scenarios, and fine-grained analysis, making it ideal for automating processes for various industries such as medical imaging in healthcare, satellite imagery for environment monitoring, and object segmentation for autonomous systems. Meta SAM 2.1 is well suited for zero-shot object segmentation and accurate object detection based on simple prompts such as point coordinates and bounding boxes in a frame for video tracking and image masking.This model was predominantly trained on AWS, and AWS will also be the first cloud provider to make it available to customers. In this post, we walk through how to discover and deploy the Meta SAM 2.1 model using SageMaker JumpStart.Meta SAM 2.1 is a state-of-the-art vision segmentation model designed for high-performance computer vision tasks, enabling advanced object detection and segmentation workflows. Building upon its predecessor, version 2.1 introduces enhanced segmentation accuracy, robust generalization across diverse datasets, and scalability for production-grade applications. These features enable AI researchers and developers in computer vision, image processing, and data-driven research to improve tasks that require detailed analysis segmentation across multiple fields.Meta SAM 2.1 has a streamlined architecture that is optimized for integration with popular model-serving frameworks like TorchServe and can be deployed on Amazon SageMaker AI to power real-time or batch inference pipelines. Meta SAM 2.1 empowers organizations to achieve precise segmentation outcomes in vision-centric workflows with minimal configuration and maximum efficiency.Meta SAM 2.1 offers multiple variants—Tiny, Small, Base Plus, and Large—available now on SageMaker JumpStart, balancing model size, speed, and segmentation performance to cater to diverse application needs.SageMaker JumpStart overviewSageMaker JumpStart offers access to a broad selection of publicly available foundation models (FMs). These pre-trained models serve as powerful starting points that can be deeply customized to address specific use cases. You can now use state-of-the-art model architectures, such as language models, computer vision models, and more, without having to build them from scratch.With SageMaker JumpStart, you can deploy models in a secure environment. Models hosted on JumpStart can be provisioned on dedicated SageMaker Inference instances, including AWS Trainium and AWS Inferentia based instances, and are isolated within your virtual private cloud (VPC). This enforces data security and compliance, because the models operate under your own VPC controls, rather than in a shared public environment. After deploying an FM, you can further customize and fine-tune it using the extensive capabilities of SageMaker AI, including SageMaker Inference for deploying models and container logs for improved observability. With SageMaker AI, you can streamline the entire model deployment process.Make sure you have the following prerequisites to deploy Meta SAM 2.1 and run inference:Discover Meta SAM 2.1 in SageMaker JumpStartSageMaker JumpStart provides FMs through two primary interfaces: SageMaker Studio and the SageMaker Python SDK. This provides multiple options to discover and use hundreds of models for your specific use case.SageMaker Studio is a comprehensive IDE that offers a unified, web-based interface for performing all aspects of the machine learning (ML) development lifecycle. From preparing data to building, training, and deploying models, SageMaker Studio provides purpose-built tools to streamline the entire process. In SageMaker Studio, you can access SageMaker JumpStart to discover and explore the extensive catalog of FMs available for deployment to inference capabilities on SageMaker Inference.You can access the SageMaker JumpStart UI through either Amazon SageMaker Unified Studio or SageMaker Studio. To deploy Meta SAM 2.1 using the SageMaker JumpStart UI, complete the following steps:In SageMaker Unified Studio, on the menu, choose .If you’re already on the SageMaker Studio console, choose  in the navigation pane.You will be prompted to create a project, after which you can begin deployment.Alternatively, you can use the SageMaker Python SDK to programmatically access and use SageMaker JumpStart models. This approach allows for greater flexibility and integration with existing AI/ML workflows and pipelines. By providing multiple access points, SageMaker JumpStart helps you seamlessly incorporate pre-trained models into your AI/ML development efforts, regardless of your preferred interface or workflow.Deploy Meta SAM 2.1 for inference using SageMaker JumpStartOn the SageMaker JumpStart landing page, you can discover the public pre-trained models offered by SageMaker AI. You can choose the Meta model provider tab to discover the Meta models available.If you’re using SageMaker Studio and don’t see the SAM 2.1 models, update your SageMaker Studio version by shutting down and restarting. For more information about version updates, refer to Shut down and Update Studio Classic Apps.You can choose the model card to view details about the model such as license, data used to train, and how to use. You can also find two buttons,  and , which help you use the model.When you choose , you should be prompted to the next screen to choose an endpoint name and instance type to initiate deployment.Upon defining your endpoint settings, you can proceed to the next step to use the model.Deploy Meta SAM 2.1 vision segmentation model for inference using the Python SDKWhen you choose , model deployment will start. Alternatively, you can deploy through the example notebook by choosing . The notebook provides end-to-end guidance on how to deploy the model for inference and clean up resources.To deploy using a notebook, you start by selecting an appropriate model, specified by the . You can deploy any of the selected models on SageMaker AI.You can deploy a Meta SAM 2.1 vision segmentation model using SageMaker JumpStart with the following SageMaker Python SDK code:from sagemaker.jumpstart.model import JumpStartModel 
model = JumpStartModel(model_id = "meta-vs-sam-2-1-hiera-tiny") 
predictor = model.deploy()This deploys the model on SageMaker AI with default configurations, including default instance type and default VPC configurations. You can change these configurations by specifying non-default values in JumpStartModel. After it’s deployed, you can run inference against the deployed endpoint through the SageMaker predictor. There are three tasks that are available with this endpoint: automatic mask generator, image predictor, and video predictor. We provide a code snippet for each later in this post. To use the predictor, a certain payload schema needs to be followed. The endpoint has sticky sessions enabled, so to start inference, you need to send a  payload:def start_session(asset_type, asset_path):

    asset_base64 = None
    
     with open(image_path, 'rb') as f:
            asset_base64 = base64.b64encode(f.read()).decode('utf-8')
    
    response = predictor.invoke_endpoint(
        EndpointName=endpoint_name,
        ContentType='application/json',
        Body=json.dumps({
                    "type": "start_session",
                    "input_type": asset_type,
                    "path": asset_base64 
                }),
        SessionId="NEW_SESSION",
    )
    
    session_id = response.headers.get("x-amzn-sagemaker-new-session-id")
    
    return session_id
The  invocation needs an input media type of either image or video and the base64 encoded data of the media. This will launch a session with an instance of the model and load the media to be segmented.To close a session, send a  invocation:def close_session(session_id):
    response = predictor.invoke_endpoint(
        EndpointName=endpoint_name,
        ContentType='application/json',
        Body=json.dumps({
                    "type": "close_session",
                    "session_id": session_id
                }),
        SessionId=session_id,
    )
    
    session_id = response.headers.get("x-amzn-sagemaker-closed-session-id")
    
    return session_id
If x-amzn-sagemaker-closed-session-id exists as a header, then the session has been successfully closed.To continue a session and retrieve the session ID of the existing session, the response header will have the x-amzn-sagemaker-session-id key with the current session ID for any operation that is not  or . Operations that aren’t  or  need to be invoked with a response stream. This is due to the size of the resulting payload being larger than what SageMaker real-time endpoints can return.This is a basic example of interacting with the SAM 2.1 SageMaker JumpStart endpoint with sticky sessions. The following examples for each of the tasks reference these operations without repeating them. The returned data is of mime type JSONL. For more complete examples, refer to the example notebooks for Meta SAM 2.1 on SageMaker Jumpstart.Recommended instances and benchmarksThe following table lists all the Meta SAM 2.1 models available in SageMaker JumpStart along with the , default instance types, and maximum number of total tokens (sum of number of input tokens and number of generated tokens) supported for each of these models. For increased context length, you can modify the default instance type in the SageMaker JumpStart UI.meta-vs-sam-2-1-hiera-tinyml.g6.24xlarge (5.5 MB total image or video size)meta-vs-sam-2-1-hiera-smallml.g6.24xlarge (5.5 MB total image or video size)meta-vs-sam-2-1-hiera-base-plusml.g6.24xlarge (5.5 MB total image or video size)meta-vs-sam-2-1-hiera-largeml.g6.24xlarge (5.5 MB total image or video size)Meta SAM 2.1 use cases: Inference and prompt examplesAfter you deploy the model using SageMaker JumpStart, you should be able to see a reference Jupyter notebook that references the parser and helper functions needed to begin using Meta SAM 2.1. After you follow those cells in the notebook, you should be ready to begin using the model’s vision segmentation capabilities.Meta SAM 2.1 offers support for three different tasks (automatic mask generator, image predictor, video predictor) to generate masks for various objects in images, including object tracking in videos. In the following examples, we demonstrate how to use the automatic mask generator and image predictor on a JPG of a truck. This  file is stored in the  bucket; you can access it with the following code:s3_bucket = f"jumpstart-cache-prod-{region}"
key_prefix = "inference-notebook-assets"

def download_from_s3(key_filenames):
    for key_filename in key_filenames:
        s3.download_file(s3_bucket, f"{key_prefix}/{key_filename}", key_filename)
        
truck_jpg = "truck.jpg"

#Download images.
download_from_s3(key_filenames=[truck_jpg])
display(Image(filename=truck_jpg))
After you have your image and it is encoded, you can create masks for objects in the image. For use cases where you want to generate masks for every object in the image, you can use the automatic mask generator task.The automatic mask generator is great for AI researchers for computer vision tasks and applications such as medical imaging and diagnostics to automatically segment regions of interest like tumors or specific organs to provide more accurate diagnostic support. Additionally, the automatic mask generator can be particularly useful in the autonomous vehicle space, in which it can segment out elements in a camera like pedestrians, vehicles, and other objects. Let’s use the automatic mask generator to generate masks for all the objects in .The following code is the prompt to generate masks for your base64 encoded image:# Start session
session_id = start_session("image", truck_jpg)
    
# Generate and visualize masks with basic parameters
response = runtime_client.invoke_endpoint_with_response_stream(
        EndpointName=endpoint_name,
        ContentType='application/json',
        Body=json.dumps({
            "type": "generate_automatic_masks",
            "session_id": session_id,
            "points_per_side": 32,
            "min_mask_region_area": 100
        }),
        SessionId=session_id,
        Accept="application/jsonlines"
    )
    
# Parse response stream
parser = StreamParser()
for event in response['Body']:
    parser.write(event)

masks = parser.get_responses()

# End session
end_session(session_id)
We receive the following output (parsed and visualized).Additionally, you can choose which objects in the provided image you want to create a mask for by adding points within that object for Meta SAM 2.1 to create. A use case for the image predictor can be valuable for tasks related to design and modeling by automating processes that typically require manual efforts. For example, the image predictor can automate turning 2D images into 3D models by analyzing 2D images of blueprints, sketches, or floor plans and generating preliminary 3D models. This is one of many examples of how the image predictor can act as a bridge between 2D and 3D construction across many different tasks. We use the following image with the points that we used to prompt Meta SAM 2.1 for masking the object.The following code is used to prompt Meta SAM 2.1 and plot the coordinates:# Start session
session_id = start_session("image", truck_jpg)

points = [
            {"type": "point", "coordinates": [500, 375], "label": 1},
            {"type": "point", "coordinates": [1125, 625], "label": 1}
         ]
    
# Add multiple points
response = runtime_client.invoke_endpoint_with_response_stream(
        EndpointName=endpoint_name,
        ContentType='application/json',
        Body=json.dumps({
            "type": "add_points",
            "session_id": session_id,
            "points": [p["coordinates"] for p in points],
            "labels": [p["label"] for p in points],
            "clear_old_points": clear_old_point,
        }),
        SessionId=session_id,
        Accept="application/jsonlines"
    )

# Parse response stream
parser = StreamParser()
for event in response['Body']:
    parser.write(event)

# Intermediate Response
masks = parser.get_responses()
    
response = runtime_client.invoke_endpoint_with_response_stream(
        EndpointName=endpoint_name,
        ContentType='application/json',
        Body=json.dumps({
            "type": "predict",
            "session_id": session_id,
            "multimask_output": True,
            "return_logits": True
        }),
        SessionId=session_id,
        Accept="application/jsonlines"
    )

# Parse response stream
parser = StreamParser()
for event in response['Body']:
    parser.write(event)

masks = parser.get_responses()

# End session
end_session(session_id)
We receive the following output (parsed and visualized).We now demonstrate how to prompt Meta SAM 2.1 for object tracking on video. One use case would be for ergonomic data collection and training purposes. You can use the video predictor to analyze the movement and posture of humans in real time, serving as a way to reduce injury and improve performance by setting alarms for bad posture or movements. Let’s start by accessing the  file [1] from the  S3 bucket defined in the following code:basketball_mp4 = "basketball-layup.mp4"

#Download video
download_from_s3(key_filenames=[basketball_mp4])
display(Video(filename=basketball_mp4))The following code shows how you can set up the prompt format to track objects in the video. The first object will use coordinates to track and not track, and the second object will track one coordinate.# Start session
session_id = start_session("video", basketball_mp4)

# Object 1
prompts1 = [
        {"type": "point", "coordinates": [1478, 649], "label": 1},
        {"type": "point", "coordinates": [1433, 689], "label": 0},
    ]
    
# Extract points and labels
points = []
labels = []
for prompt in prompts1:
    if prompt["type"] == "point":
        points.append(prompt["coordinates"])
        labels.append(prompt["label"])

request = {
        "type": "add_points",
        "session_id": session_id,
        "frame_index": 0,
        "object_id": 1,
        "points": points,
        "labels": labels,
        "clear_old_points": True,
    }
    
# Add multiple points
response = runtime_client.invoke_endpoint_with_response_stream(
        EndpointName=endpoint_name,
        ContentType='application/json',
        Body=json.dumps(request),
        SessionId=session_id,
        Accept="application/jsonlines"
    )

# Parse response stream
parser = StreamParser()
for event in response['Body']:
    parser.write(event)

# Intermediate Response
masks = parser.get_responses()

# Object 2
prompts2 = [{"type": "point", "coordinates": [1433, 689], "label": 1}]

# Extract points and labels
points = []
labels = []
for prompt in prompts2:
    if prompt["type"] == "point":
        points.append(prompt["coordinates"])
        labels.append(prompt["label"])

request = {
        "type": "add_points",
        "session_id": session_id,
        "frame_index": 0,
        "object_id": 2,
        "points": points,
        "labels": labels,
        "clear_old_points": True,
    }
    
# Add multiple points
response = runtime_client.invoke_endpoint_with_response_stream(
        EndpointName=endpoint_name,
        ContentType='application/json',
        Body=json.dumps(request),
        SessionId=session_id,
        Accept="application/jsonlines"
    )

# Parse response stream
parser = StreamParser()
for event in response['Body']:
    parser.write(event)

# Intermediate Response
masks = parser.get_responses()
    
response = runtime_client.invoke_endpoint_with_response_stream(
        EndpointName=endpoint_name,
        ContentType='application/json',
        Body=json.dumps({
            "type": "propagate_in_video",
            "session_id": session_id,
            "start_frame_index": 0,
        }),
        SessionId=session_id,
        Accept="application/jsonlines"
    )

# Parse response stream
parser = StreamParser()
for event in response['Body']:
    parser.write(event)

masks = parser.get_responses()

# End session
end_session(session_id)
We receive the following output (parsed and visualized).Here we can see that Meta SAM 2.1 Tiny was able to successfully track the objects based off the coordinates that were provided in prompt.To avoid incurring unnecessary costs, when you’re done, delete the SageMaker AI endpoints using the following code:predictor.delete_model()
predictor.delete_endpoint()Alternatively, to use the SageMaker AI console, complete the following steps:On the SageMaker AI console, under in the navigation pane, chooseSearch for the embedding and text generation endpoints.On the endpoint details page, choose .Choose  again to confirm.In this post, we explored how SageMaker JumpStart empowers data scientists and ML engineers to discover, access, and deploy a wide range of pre-trained FMs for inference, including Meta’s most advanced and capable models to date. Get started with SageMaker JumpStart and Meta SAM 2.1 models today. For more information about SageMaker JumpStart, see SageMaker JumpStart pretrained models and Getting started with Amazon SageMaker JumpStart.Marco Punio is a Sr. Specialist Solutions Architect focused on generative AI strategy, applied AI solutions, and conducting research to help customers hyper-scale on AWS. As a member of the 3rd Party Model Provider Applied Sciences Solutions Architecture team at AWS, he is a Global Lead for the Meta – AWS Partnership and technical strategy. Based in Seattle, WA, Marco enjoys writing, reading, exercising, and building applications in his free time.Deepak Rupakula is a Principal GTM lead in the specialists group at AWS. He focuses on developing GTM strategy for large language models like Meta across AWS services like Amazon Bedrock and Amazon SageMaker AI. With over 15 years of experience in the tech industry, his experience includes leadership roles in product management, customer success, and analytics.Harish Rao is a Senior Solutions Architect at AWS, specializing in large-scale distributed AI training and inference. He empowers customers to harness the power of AI to drive innovation and solve complex challenges. Outside of work, Harish embraces an active lifestyle, enjoying the tranquility of hiking, the intensity of racquetball, and the mental clarity of mindfulness practices.Baladithya Balamurugan is a Solutions Architect at AWS focused on ML deployments for inference and using AWS Neuron to accelerate training and inference. He works with customers to enable and accelerate their ML deployments on services such as Amazon SageMaker AI and Amazon EC2. Based in San Francisco, Baladithya enjoys tinkering, developing applications, and building his homelab in his free time.Banu Nagasundaram leads product, engineering, and strategic partnerships for Amazon SageMaker JumpStart, SageMaker AI’s machine learning and generative AI hub. She is passionate about building solutions that help customers accelerate their AI journey and unlock business value.Naman Nandan is a software development engineer at AWS, specializing in enabling large-scale AI/ML inference workloads on Amazon SageMaker AI using TorchServe, a project jointly developed by AWS and Meta. In his free time, he enjoys playing tennis and going on hikes.]]></content:encoded></item><item><title>EFF Sues OPM, DOGE and Musk for Endangering the Privacy of Millions</title><link>https://www.eff.org/press/releases/eff-sues-opm-doge-and-musk-endangering-privacy-millions</link><author>Josh Richman</author><category>tech</category><enclosure url="https://www.eff.org/files/banner_library/opm-eye-3b.jpg" length="" type=""/><pubDate>Tue, 11 Feb 2025 22:34:50 +0000</pubDate><source url="https://www.eff.org/rss/updates.xml">Deeplinks</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Show HN: Mapping the Unix Magic Poster – An Interactive Annotation Project</title><link>https://drio.github.io/unixmagic/</link><author>drio</author><category>dev</category><category>hn</category><pubDate>Tue, 11 Feb 2025 22:22:37 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[I built this as a static site that lets us annotate the Unix Magic poster by placing markers on references and adding descriptions to explain them. I've added a few so far, but there's much more to document.What I love about this approach is that contributions happen not just on the site itself but also through PRs, where we can discuss and refine the details of each reference. Feel free to send a PR!Would love feedback, suggestions, and PRs from the community!]]></content:encoded></item><item><title>Falcon 3 models now available in Amazon SageMaker JumpStart</title><link>https://aws.amazon.com/blogs/machine-learning/falcon-3-models-now-available-in-amazon-sagemaker-jumpstart/</link><author>Niithiyn Vijeaswaran</author><category>dev</category><category>ai</category><pubDate>Tue, 11 Feb 2025 22:16:27 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[Overview of the Falcon 3 family of modelsThe Falcon 3 family, developed by Technology Innovation Institute (TII) in Abu Dhabi, represents a significant advancement in open source language models. This collection includes five base models ranging from 1 billion to 10 billion parameters, with a focus on enhancing science, math, and coding capabilities. The family consists of Falcon3-1B-Base, Falcon3-3B-Base, Falcon3-Mamba-7B-Base, Falcon3-7B-Base, and Falcon3-10B-Base along with their instruct variants.These models showcase innovations such as efficient pre-training techniques, scaling for improved reasoning, and knowledge distillation for better performance in smaller models. Notably, the Falcon3-10B-Base model achieves state-of-the-art performance for models under 13 billion parameters in zero-shot and few-shot tasks. The Falcon 3 family also includes various fine-tuned versions like Instruct models and supports different quantization formats, making them versatile for a wide range of applications.Currently, SageMaker JumpStart offers the base versions of Falcon3-3B, Falcon3-7B, and Falcon3-10B, along with their corresponding instruct variants, as well as Falcon3-1B-Instruct.Get started with SageMaker JumpStartSageMaker JumpStart is a machine learning (ML) hub that can help accelerate your ML journey. With SageMaker JumpStart, you can evaluate, compare, and select pre-trained foundation models (FMs), including Falcon 3 models. These models are fully customizable for your use case with your data.Deploying a Falcon 3 model through SageMaker JumpStart offers two convenient approaches: using the intuitive SageMaker JumpStart UI or implementing programmatically through the SageMaker Python SDK. Let’s explore both methods to help you choose the approach that best suits your needs.Deploy Falcon 3 using the SageMaker JumpStart UIComplete the following steps to deploy Falcon 3 through the JumpStart UI:Deploy Falcon 3 programmatically using the SageMaker Python SDKFor teams looking to automate deployment or integrate with existing MLOps pipelines, you can use the SageMaker Python SDK:from sagemaker.serve.builder.model_builder import ModelBuilder
from sagemaker.serve.builder.schema_builder import SchemaBuilder
from sagemaker.jumpstart.model import ModelAccessConfig
from sagemaker.session import Session
import logging

sagemaker_session = Session()

artifacts_bucket_name = sagemaker_session.default_bucket()
execution_role_arn = sagemaker_session.get_caller_identity_arn()


js_model_id = "huggingface-llm-falcon-3-10B-base"

gpu_instance_type = "ml.g5.12xlarge"  

response = "Hello, I'm a language model, and I'm here to help you with your English."

sample_input = {
    "inputs": "Hello, I'm a language model,",
    "parameters": {"max_new_tokens": 128, "top_p": 0.9, "temperature": 0.6},
}

sample_output = [{"generated_text": response}]

schema_builder = SchemaBuilder(sample_input, sample_output)

model_builder = ModelBuilder(
    model=js_model_id,
    schema_builder=schema_builder,
    sagemaker_session=sagemaker_session,
    role_arn=execution_role_arn,
    log_level=logging.ERROR
)

model= model_builder.build()

predictor = model.deploy(model_access_configs={js_model_id:ModelAccessConfig(accept_eula=True)}, accept_eula=True)Run inference on the predictor:predictor.predict(sample_input)To clean up the model and endpoint, use the following code:predictor.delete_model()
predictor.delete_endpoint() is a Generative AI Specialist Solutions Architect with the Third-Party Model Science team at AWS. His area of focus is generative AI and AWS AI Accelerators. He holds a Bachelor’s degree in Computer Science and Bioinformatics. is an ML Architect with the Amazon SageMaker Service team. He focuses on helping customers design, deploy, and manage ML workloads at scale. In his spare time, he enjoys traveling and exploring new places. is a Senior ML Solutions Architect with the Amazon SageMaker Service team. He focuses on helping customers build, deploy, and migrate ML production workloads to SageMaker at scale. He specializes in machine learning, AI, and computer vision domains, and holds a master’s degree in Computer Science from UT Dallas. In his free time, he enjoys traveling and photography. leads product, engineering, and strategic partnerships for SageMaker JumpStart, SageMaker’s machine learning and GenAI hub. She is passionate about building solutions that help customers accelerate their AI journey and unlock business value.]]></content:encoded></item><item><title>New hack uses prompt injection to corrupt Gemini’s long-term memory</title><link>https://arstechnica.com/security/2025/02/new-hack-uses-prompt-injection-to-corrupt-geminis-long-term-memory/</link><author>Dan Goodin</author><category>tech</category><enclosure url="https://cdn.arstechnica.net/wp-content/uploads/2023/12/gemini_header-1152x648.jpg" length="" type=""/><pubDate>Tue, 11 Feb 2025 22:13:42 +0000</pubDate><source url="https://arstechnica.com/">Biz &amp; IT – Ars Technica</source><content:encoded><![CDATA[In the nascent field of AI hacking, indirect prompt injection has become a basic building block for inducing chatbots to exfiltrate sensitive data or perform other malicious actions. Developers of platforms such as Google's Gemini and OpenAI's ChatGPT are generally good at plugging these security holes, but hackers keep finding new ways to poke through them again and again.On Monday, researcher Johann Rehberger demonstrated a new way to override prompt injection defenses Google developers have built into Gemini—specifically, defenses that restrict the invocation of Google Workspace or other sensitive tools when processing untrusted data, such as incoming emails or shared documents. The result of Rehberger’s attack is the permanent planting of long-term memories that will be present in all future sessions, opening the potential for the chatbot to act on false information or instructions in perpetuity.More about the attack later. For now, here is a brief review of indirect prompt injections: Prompts in the context of large language models (LLMs) are instructions, provided either by the chatbot developers or by the person using the chatbot, to perform tasks, such as summarizing an email or drafting a reply. But what if this content contains a malicious instruction? It turns out that chatbots are so eager to follow instructions that they often take their orders from such content, even though there was never an intention for it to act as a prompt.]]></content:encoded></item><item><title>The TAKE IT DOWN Act: A Flawed Attempt to Protect Victims That Will Lead to Censorship</title><link>https://www.eff.org/deeplinks/2025/02/take-it-down-act-flawed-attempt-protect-victims-will-lead-censorship</link><author>Joe Mullin</author><category>tech</category><enclosure url="https://www.eff.org/files/banner_library/tossed-2_0.jpg" length="" type=""/><pubDate>Tue, 11 Feb 2025 21:01:38 +0000</pubDate><source url="https://www.eff.org/rss/updates.xml">Deeplinks</source><content:encoded><![CDATA[The Bill Will Lead To Overreach and Censorship Threatens Encrypted Services Victims Of NCII Have Legal Options Under Existing Law]]></content:encoded></item><item><title>GenAI Patterns: Query Rewriting</title><link>https://martinfowler.com/articles/gen-ai-patterns/#query-rewrite</link><author>Martin Fowler</author><category>dev</category><category>blog</category><pubDate>Tue, 11 Feb 2025 20:58:00 +0000</pubDate><source url="https://martinfowler.com/feed.atom">Martin Fowler</source><content:encoded><![CDATA[Users often have difficulty writing the most effective queries.
       and I explain Query Rewriting:
      getting an LLM to formulate alternative queries to send to a RAG's
      retriever. ]]></content:encoded></item><item><title>Building a virtual meteorologist using Amazon Bedrock Agents</title><link>https://aws.amazon.com/blogs/machine-learning/building-a-virtual-meteorologist-using-amazon-bedrock-agents/</link><author>Salman Ahmed</author><category>dev</category><category>ai</category><pubDate>Tue, 11 Feb 2025 20:53:04 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[The integration of generative AI capabilities is driving transformative changes across many industries. Although weather information is accessible through multiple channels, businesses that heavily rely on meteorological data require robust and scalable solutions to effectively manage and use these critical insights and reduce manual processes. This solution demonstrates how to create an AI-powered virtual meteorologist that can answer complex weather-related queries in natural language. We use various AWS services to deploy a complete solution that you can use to interact with an API providing real-time weather information. In this solution, we use Amazon Bedrock Agents.Amazon Bedrock Agents helps to streamline workflows and automate repetitive tasks. Amazon Bedrock Agents can securely connect to your company’s data sources and augments the user’s request with accurate responses. You can use Amazon Bedrock Agents to architect an action schema tailored to your requirements, granting you control whenever the agent initiates the specified action. This versatile approach equips you to seamlessly integrate and execute business logic within your preferred backend service, fostering a cohesive combination of functionality and flexibility. There is also memory retention across the interaction allowing a more personalized user experience.In this post, we present a streamlined approach to deploying an AI-powered agent by combining Amazon Bedrock Agents and a foundation model (FM). We guide you through the process of configuring the agent and implementing the specific logic required for the virtual meteorologist to provide accurate weather-related responses. Additionally, we use various AWS services, including AWS Amplify for hosting the front end, AWS Lambda functions for handling request logic, Amazon Cognito for user authentication, and AWS Identity and Access Management (IAM) for controlling access to the agent.The diagram gives an overview and highlights the key components. The architecture uses Amazon Cognito for user authentication and Amplify as the hosting environment for our front-end application. Amazon Bedrock Agents forwards the details from the user query to the action groups, which further invokes custom Lambda functions. Each action group and Lambda function handles a specific task: – Processes geographic coordinates (geo-coordinates) to get details about a specific location Gathers weather information for the provided location Obtains the current date and timeYou must have the following in place to complete the solution in this post:Deploy solution resources using AWS CloudFormationWhen you run the AWS CloudFormation template, the following resources are deployed (note that costs will be incurred for the AWS resources used):Lambda resources: 
  Function – <Stack name>-geo-coordinates-<auto-generated>Function – <Stack name>-weather-<auto-generated>Function – <Stack name>-date-time-<auto-generated>Amazon Bedrock Agents: virtual-meteorologist 
  Action groups (1) – obtain-latitude-longitude-from-place-nameAction groups (2) – obtain-weather-information-with-coordinatesAction groups (3) – get-current-date-time-from-timezoneAfter you deploy the CloudFormation template, copy the following from the tab on the CloudFormation console to be used during the configuration of your application after it’s deployed in AWS Amplify.Deploy the AWS Amplify applicationYou need to manually deploy the Amplify application using the front-end code found on GitHub. Complete the following steps:Download the front-end code AWS-Amplify-Frontend.zip from GitHub.Use the .zip file to manually deploy the application in Amplify.Return to the Amplify page and use the domain it automatically generated to access the application.Use Amazon Cognito for user authenticationAmazon Cognito is an identity service that you can use to authenticate and authorize users. We use Amazon Cognito in our solution to verify the user before they can use the application. We also use identity pool to provide temporary AWS credentials for the user while they interact with Amazon Bedrock API.Use Amazon Bedrock Agents to automate application tasksWith Amazon Bedrock Agents, you can build and configure autonomous agents in your application. An agent helps your end users complete actions based on organization data and user input. Agents orchestrate interactions between FMs, data sources, software applications, and user conversations.Use action group to define actions that Amazon Bedrock agents performAn action group defines a set of related actions that an Amazon Bedrock agent can perform to assist users. When configuring an action group, you have options for handling user-provided information, including adding user input to the agent’s action group, passing data to a Lambda function for custom business logic, or returning control directly through the InvokeAgent response. In our application, we created three action groups to give the Amazon Bedrock agent these essential functionalities: retrieving coordinates for specific locations, obtaining current date and time information, and fetching weather data for given locations. These action groups enable the agent to access and process crucial information, enhancing its ability to respond accurately and comprehensively to user queries related to location-based services and weather conditions.Use Lambda for Amazon Bedrock action groupAs part of this solution, three Lambda functions are deployed to support the action groups defined for our Amazon Bedrock agent:Location coordinates Lambda function – This function is triggered by the obtain-latitude-longitude-from-place-name action group. It takes a place name as input and returns the corresponding latitude and longitude coordinates. The function uses a geocoding service or database to perform this lookup.Date and time Lambda function – Invoked by the get-current-date-time-from-timezone action group, this function provides the current date and time information.Weather information Lambda function – This function is called by the obtain-weather-information-with-coordinates action group. It accepts geo-coordinates from the first Lambda function and returns current weather conditions and forecasts for the specified area. This Lambda function used a weather API to fetch up-to-date meteorological data.Each of these Lambda functions receives an input event containing relevant metadata and populated fields from the Amazon Bedrock agent’s API operation or function parameters. The functions process this input, perform their specific tasks, and return a response with the required information. This response is then used by the Amazon Bedrock agent to formulate its reply to the user’s query. By using these Lambda functions, our Amazon Bedrock agent gains the ability to access external data sources and perform complex computations, significantly enhancing its capabilities in handling user requests related to location, time, and weather information.Use AWS Amplify for front-end codeAmplify offers a development environment for building secure, scalable mobile and web applications. Developers can focus on their code rather than worrying about the underlying infrastructure. Amplify also integrates with many Git providers. For this solution, we manually upload our front-end code using the method outlined earlier in this post.Navigate to the URL provided after you created the application in Amplify. Upon accessing the application URL, you’ll be prompted to provide information related to Amazon Cognito and Amazon Bedrock Agents. This information is required to securely authenticate users and allow the front end to interact with the Amazon Bedrock agent. It enables the application to manage user sessions and make authorized API calls to AWS services on behalf of the user.You can enter information with the values you collected from the CloudFormation stack outputs. You’ll be required to enter the following fields, as shown in the following screenshot:You need to sign in with your username and password. A temporary password was automatically generated during deployment and sent to the email address you provided when launching the CloudFormation template. At first sign-in attempt, you’ll be asked to reset your password, as shown in the following video.Now you can start asking questions in the application, for example, “Can we do barbecue today in Dallas, TX?” In a few seconds, the application will provide you detailed results mentioning if you can do barbecue in Dallas, TX. The following video shows this chat.Here are a few sample queries to demonstrate the capabilities of your virtual meteorologist:“What’s the weather like in New York City today?”“Should I plan an outdoor birthday party in Miami next weekend?”“Will it snow in Denver on Christmas Day?”“Can I go swimming on a beach in Chicago today?These queries showcase the agent’s ability to provide current weather information, offer advice based on weather forecasts, and predict future weather conditions. You can even ask a question related to an activity such as swimming, and it will answer based on the weather conditions if that activity is okay to do.If you decide to discontinue using the virtual meteorologist, you can follow these steps to remove it, its associated resources deployed using AWS CloudFormation, and the Amplify deployment:Delete the CloudFormation stack: 
  On the AWS CloudFormation console, choose  in the navigation pane.Locate the stack you created during the deployment process (you assigned a name to it).Select the stack and choose .Delete the Amplify application and its resources. For instructions, refer to Clean Up Resources.This solution demonstrates the power of combining Amazon Bedrock Agents with other AWS services to create an intelligent, conversational weather assistant. By using AI and cloud technologies, businesses can automate complex queries and provide valuable insights to their users.To learn more about Amazon Bedrock, refer to the following resources:To learn more about the Anthropic’s Claude 3.5 Sonnet model, refer to the following resources: is a Senior Technical Account Manager in AWS Enterprise Support. He enjoys helping customers in the travel and hospitality industry to design, implement, and support cloud infrastructure. With a passion for networking services and years of experience, he helps customers adopt various AWS networking services. Outside of work, Salman enjoys photography, traveling, and watching his favorite sports teams. is a Senior Enterprise Support Lead at AWS, helping energy customers design and optimize cloud solutions. With a passion for software development, he guides energy customers through AWS service adoption. Outside work, Sergio is a multi-instrument musician playing guitar, piano, and drums, and he also practices Wing Chun Kung Fu. is a Senior Technical Account Manager in AWS Enterprise Support who helps customers in the travel and hospitality industry to streamline their cloud operations on AWS. He is a results-driven IT professional with over 20 years of experience. In his free time, Ravi enjoys creative activities like painting. He also likes playing cricket and traveling to new places. is a Enterprise Support Lead in AWS Enterprise Support who helps customers streamline their cloud operations on AWS. He is a results-driven IT professional with over 20 years of experience.]]></content:encoded></item><item><title>Microsoft February 2025 Patch Tuesday, (Tue, Feb 11th)</title><link>https://isc.sans.edu/diary/rss/31674</link><author></author><category>infosec</category><pubDate>Tue, 11 Feb 2025 20:02:21 +0000</pubDate><source url="https://isc.sans.edu/">Sans Edu Diaries</source><content:encoded><![CDATA[This month, Microsoft has released patches addressing a total of 141 vulnerabilities. Among these, 4 are classified as critical, highlighting the potential for significant impact if exploited. Notably, 2 vulnerabilities are currently being exploited in the wild, underscoring the urgency for immediate updates. Additionally, 1 vulnerability has been disclosed prior to this patch cycle, marking it as a zero-day. Users are strongly advised to prioritize these updates to safeguard their systems against potential threats.Significant Vulnerabilities Windows Ancillary Function Driver for WinSock Elevation of Privilege Vulnerability (CVE-2025-21418)
This vulnerability, identified as CVE-2025-21418, has a severity rating of Important with a CVSS score of 7.8. It is currently being exploited in the wild but has not been publicly disclosed, making it a significant concern for affected systems. The vulnerability allows an attacker to gain SYSTEM privileges, thereby elevating their access and control over the compromised system. Immediate attention and remediation are advised to mitigate the risk posed by this vulnerability.
This is a disclosed vulnerability with a severity rating of Important and a CVSS score of 7.1, which is currently being exploited in the wild. This vulnerability allows an attacker to elevate their privileges to delete targeted files on a system, significantly impacting the integrity and availability of the system without compromising confidentiality. The exploitation of this vulnerability can lead to the deletion of critical data, potentially rendering services unavailable. Despite its exploitation, it has not been publicly disclosed as a zero-day, and users are advised to implement appropriate security measures to mitigate its impact.
This is a disclosed zero-day vulnerability with a severity rating of Important and a CVSS score of 6.5, though it is not currently exploited in the wild. This vulnerability can lead to a total loss of confidentiality by allowing an attacker to obtain a user's NTLMv2 hash, which could be used to authenticate as the user. Exploitation requires minimal user interaction, such as selecting or inspecting a malicious file. It affects all supported versions of Microsoft Windows, and despite the retirement of Internet Explorer 11 and the deprecation of Microsoft Edge Legacy, updates are necessary due to the continued use of the MSHTML and EdgeHTML platforms in various applications. To ensure full protection, users are advised to install both Security Only updates and IE Cumulative updates.Microsoft Dynamics 365 Sales Elevation of Privilege Vulnerability (CVE-2025-21177)
This vulnerability, identified as CVE-2025-21177, has not been exploited in the wild nor disclosed publicly, classifying it as a non-zero-day. It carries a severity rating of Critical with a CVSS score of 8.7, indicating a significant risk of elevation of privilege if exploited. Although the vulnerability could potentially allow attackers to gain unauthorized access and elevate their privileges within the Microsoft Dynamics 365 Sales environment, Microsoft has fully mitigated the issue, requiring no action from users. This CVE serves to enhance transparency regarding cloud service vulnerabilities.Windows Lightweight Directory Access Protocol (LDAP) Remote Code Execution Vulnerability (CVE-2025-21376)
This is a critical vulnerability with a CVSS score of 8.1, which has not been exploited in the wild nor disclosed publicly, thus not classified as a zero-day. This vulnerability allows for remote code execution, posing a significant threat if exploited. An unauthenticated attacker could exploit this vulnerability by sending a specially crafted request to a vulnerable LDAP server, potentially causing a buffer overflow. The attack complexity is high, as successful exploitation requires the attacker to win a race condition. Mitigation efforts should focus on securing LDAP servers and monitoring for unusual activity to prevent potential exploitation.
This vulnerability, identified as CVE-2025-21381, has not been exploited in the wild nor disclosed publicly, making it a non-zero-day threat. It carries a severity rating of Critical with a CVSS score of 7.8, indicating a significant risk of remote code execution. Despite the CVSS metric indicating a local attack vector, the vulnerability allows an attacker to execute code remotely by convincing a user, through social engineering, to download and open a specially crafted file. The attack can be executed locally, with the Preview Pane serving as a potential attack vector. Users are advised to exercise caution when opening files from untrusted sources and to apply any available security updates to mitigate this risk.DHCP Client Service Remote Code Execution Vulnerability (CVE-2025-21379)
This vulnerability, identified as CVE-2025-21379, has not been exploited in the wild nor disclosed publicly, classifying it as a non-zero-day threat. It carries a severity rating of Critical with a CVSS score of 7.1, indicating a significant risk of remote code execution. The vulnerability requires a high attack complexity, necessitating a machine-in-the-middle (MITM) attack where the attacker must intercept the logical network path between the target and the resource. The attack vector is adjacent, meaning it is limited to systems on the same network segment, such as those connected to the same network switch or virtual network. This limitation prevents the attack from being executed across multiple networks, such as a WAN.Microsoft High Performance Compute (HPC) Pack Remote Code Execution Vulnerability (CVE-2025-21198)
is a critical security flaw with a CVSS score of 9.0, rated as Important, and is currently neither exploited in the wild nor publicly disclosed. This vulnerability allows for remote code execution, requiring an attacker to have low privileges and access to the network connecting the targeted HPC clusters and nodes. The attack vector is adjacent, meaning it relies on intra-net or private network access rather than exposure to the public internet. Exploitation involves sending a specially crafted HTTPS request to the head node or Linux compute node, potentially allowing the attacker to execute code on other clusters or nodes connected to the targeted head node. The scope of the attack is changed, indicating that successful exploitation could lead to broader impacts beyond the initially compromised system.Windows Telephony Service Remote Code Execution Vulnerability (CVE-2025-21190)
This is a significant security issue with a CVSS score of 8.8, classified as Important. Although it has not been exploited in the wild or disclosed publicly, this vulnerability poses a risk of remote code execution. An attacker could exploit it by deceiving a user into sending a request to a malicious server, which could then return harmful data leading to arbitrary code execution on the user's system. The attack vector is network-based, requiring user interaction, as the attacker needs a client to connect to the malicious server to execute code on the client system.Windows Telephony Service Remote Code Execution Vulnerability (CVE-2025-21200)
This is a significant security issue with a CVSS score of 8.8, rated as Important, though it has not been exploited in the wild nor disclosed publicly, thus not classified as a zero-day. This vulnerability allows for remote code execution, where an attacker could potentially trick a user into sending a request to a malicious server. The server could then return malicious data, leading to arbitrary code execution on the user's system. The attack vector is network-based, requiring user interaction, as the client must connect to a malicious server, which could enable the attacker to execute code on the client machine. Mitigation strategies should focus on user awareness and network security measures to prevent such exploitations.
This summary of Microsoft's monthly updates highlights several critical vulnerabilities, emphasizing the need for immediate attention to certain threats. The Windows Ancillary Function Driver for WinSock vulnerability (CVE-2025-21418) is currently being exploited and poses a significant risk due to its potential for SYSTEM privilege escalation. Users should prioritize patching this vulnerability. Additionally, the Windows Storage vulnerability (CVE-2025-21391) is actively exploited, risking data integrity and availability. The NTLM Hash Disclosure vulnerability (CVE-2025-21377), a zero-day, threatens confidentiality and requires prompt updates. Other critical vulnerabilities, such as those affecting Microsoft Dynamics 365 Sales and Windows LDAP, though not exploited, demand vigilance and timely updates to prevent potential exploitation. Users are advised to prioritize these updates and enhance security measures to mitigate risks effectively.February 2025 Security UpdatesFebruary 2025 Security UpdatesExploitability (old versions)Azure Network Watcher VM Extension Elevation of Privilege VulnerabilityChromium: CVE-2025-0444 Use after free in SkiaChromium: CVE-2025-0445 Use after free in V8Chromium: CVE-2025-0451 Inappropriate implementation in Extensions APIDHCP Client Service Denial of Service VulnerabilityDHCP Client Service Remote Code Execution VulnerabilityHackerOne: CVE-2023-32002 Node.js `Module._load()` policy Remote Code Execution VulnerabilityInternet Connection Sharing (ICS) Denial of Service VulnerabilityKernel Streaming WOW Thunk Service Driver Elevation of Privilege VulnerabilityMicrosoft AutoUpdate (MAU) Elevation of Privilege VulnerabilityMicrosoft Digest Authentication Remote Code Execution VulnerabilityMicrosoft Dynamics 365 Sales Elevation of Privilege VulnerabilityMicrosoft Edge (Chromium-based) Remote Code Execution VulnerabilityMicrosoft Edge (Chromium-based) Spoofing VulnerabilityMicrosoft Edge for IOS and Android Spoofing VulnerabilityMicrosoft Excel Information Disclosure VulnerabilityMicrosoft Excel Remote Code Execution VulnerabilityMicrosoft High Performance Compute (HPC) Pack Remote Code Execution VulnerabilityMicrosoft Message Queuing (MSMQ) Denial of Service VulnerabilityMicrosoft Office Remote Code Execution VulnerabilityMicrosoft Outlook Spoofing VulnerabilityMicrosoft PC Manager Elevation of Privilege VulnerabilityMicrosoft SharePoint Server Remote Code Execution VulnerabilityMicrosoft Surface Security Feature Bypass VulnerabilityNTLM Hash Disclosure Spoofing VulnerabilityVisual Studio Code Elevation of Privilege VulnerabilityVisual Studio Code JS Debug Extension Elevation of Privilege VulnerabilityVisual Studio Installer Elevation of Privilege VulnerabilityWindows Active Directory Domain Services API Denial of Service VulnerabilityWindows Ancillary Function Driver for WinSock Elevation of Privilege VulnerabilityWindows Core Messaging Elevation of Privileges VulnerabilityWindows Deployment Services Denial of Service VulnerabilityWindows Disk Cleanup Tool Elevation of Privilege VulnerabilityWindows Installer Elevation of Privilege VulnerabilityWindows Kerberos Denial of Service VulnerabilityWindows Kernel Security Feature Bypass VulnerabilityWindows Lightweight Directory Access Protocol (LDAP) Remote Code Execution VulnerabilityWindows NTFS Elevation of Privilege VulnerabilityWindows Remote Desktop Configuration Service Tampering VulnerabilityWindows Resilient File System (ReFS) Deduplication Service Elevation of Privilege VulnerabilityWindows Routing and Remote Access Service (RRAS) Remote Code Execution VulnerabilityWindows Setup Files Cleanup Elevation of Privilege VulnerabilityWindows Storage Elevation of Privilege VulnerabilityWindows Telephony Server Remote Code Execution VulnerabilityWindows Telephony Service Remote Code Execution VulnerabilityWindows Win32 Kernel Subsystem Elevation of Privilege Vulnerability

 
 (c) SANS Internet Storm Center. https://isc.sans.edu Creative Commons Attribution-Noncommercial 3.0 United States License.]]></content:encoded></item><item><title>Python 3.14.0 alpha 5 is out</title><link>https://pythoninsider.blogspot.com/2025/02/python-3140-alpha-5-is-out.html</link><author>Hugo</author><category>dev</category><category>official</category><category>python</category><pubDate>Tue, 11 Feb 2025 19:41:00 +0000</pubDate><source url="https://pythoninsider.blogspot.com/">Python official news</source><content:encoded><![CDATA[Here comes the antepenultimate alpha.This is an early developer preview of Python
3.14Python 3.14 is still in development. This release, 3.14.0a5, is the
fifth of seven planned alpha releases.Alpha releases are intended to make it easier to test the current
state of new features and bug fixes and to test the release process.During the alpha phase, features may be added up until the start of
the beta phase (2025-05-06) and, if necessary, may be modified or
deleted up until the release candidate phase (2025-07-22). Please keep
in mind that this is a preview release and its use is
 recommended for production environments.Many new features for Python 3.14 are still being planned and
written. Among the new major new features and changes so far:The next pre-release of Python 3.14 will be the penultimate alpha,
3.14.0a6, currently scheduled for 2025-03-14.2025-01-29 marked the start of a new lunar year, the Year of the
Snake 🐍 (and the Year of Python?).For centuries, π was often approximated as 3 in China. Some time
between the years 1 and 5 CE, astronomer, librarian, mathematician and
politician Liu Xin (劉歆) calculated π as 3.154.Around 130 CE, mathematician, astronomer, and geographer Zhang Heng
(張衡, 78–139) compared the celestial circle with the diameter of the
earth as 736:232 to get 3.1724. He also came up with a formula for the
ratio between a cube and inscribed sphere as 8:5, implying the ratio of
a square’s area to an inscribed circle is √8:√5. From this, he
calculated π as √10 (~3.162).Third century mathematician Liu Hui (刘徽) came up with an algorithm
for calculating π iteratively: calculate the area of a polygon inscribed
in a circle, then as the number of sides of the polygon is increased,
the area becomes closer to that of the circle, from which you can
approximate π.This algorithm is similar to the method used by Archimedes in the 3rd
century BCE and Ludolph van Ceulen in the 16th century CE (see 3.14.0a2
  release notes), but Archimedes only went up to a 96-sided polygon
(96-gon). Liu Hui went up to a 192-gon to approximate π as 157/50 (3.14)
and later a 3072-gon for 3.14159.Liu Hu wrote a commentary on the book The Nine Chapters on the
Mathematical Art which included his π approximations.In the fifth century, astronomer, inventor, mathematician,
politician, and writer Zu Chongzhi (祖沖之, 429–500) used Liu Hui’s
algorithm to inscribe a 12,288-gon to compute π between 3.1415926 and
3.1415927, correct to seven decimal places. This was more accurate than
Hellenistic calculations and wouldn’t be improved upon for 900
years.Thanks to all of the many volunteers who help make Python Development
and these releases possible! Please consider supporting our efforts by
volunteering yourself or through organisation contributions to the Python Software
Foundation.Regards from a remarkably snowless Helsinki,Your release team, Hugo van KemenadeSteve Dower]]></content:encoded></item><item><title>EFF Sues DOGE and the Office of Personnel Management to Halt Ransacking of Federal Data</title><link>https://www.eff.org/deeplinks/2025/02/eff-sues-doge-and-office-personnel-management-halt-ransacking-federal-data</link><author>Jason Kelley</author><category>tech</category><enclosure url="https://www.eff.org/files/banner_library/opm-eye-3b.jpg" length="" type=""/><pubDate>Tue, 11 Feb 2025 19:38:09 +0000</pubDate><source url="https://www.eff.org/rss/updates.xml">Deeplinks</source><content:encoded><![CDATA[What’s in OPM’s Databases?How the Privacy Act Protects Americans’ DataOPM’s Data Has Been Under Assault Before]]></content:encoded></item><item><title>FSF talked about education, copyright management, and free machine learning at FOSDEM 2025</title><link>http://www.fsf.org/blogs/licensing/fsf-at-fosdem-2025</link><author></author><category>linux</category><pubDate>Tue, 11 Feb 2025 19:30:00 +0000</pubDate><source url="http://www.fsf.org/blogs/recent-blog-posts">Free Software Foundation</source><content:encoded><![CDATA[Four FSF staff members had a great time sharing their knowledge and learning at FOSDEM 2025 in Brussels. ]]></content:encoded></item><item><title>PyCoder’s Weekly: Issue #668: NumPy, Compiling Python 1.0, BytesIO, and More (Feb. 11, 2025)</title><link>https://pycoders.com/issues/668</link><author></author><category>dev</category><category>python</category><pubDate>Tue, 11 Feb 2025 19:30:00 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[ In this video course, you’ll learn how to use NumPy by exploring several interesting examples. You’ll read data from a file into an array and analyze structured arrays to perform a reconciliation. You’ll also learn how to quickly chart an analysis & turn a custom function into a vectorized function. This tutorial will help you master Python string splitting. You’ll learn to use , , and  to effectively handle whitespace, custom delimiters, and multiline text, which will level up your data parsing skills. Python developers use Posit Package Manager to mirror public & internally developed repos within their firewalls. Get reporting on known vulnerabilities to proactively address potential threats. High-security environments can even run air-gapped. The author was recently invited with other senior devs to give a lightning talk on their personal development philosophy. This post captures those thoughts.[ Subscribe to 🐍 PyCoder’s Weekly 💌 – Get the best Python news, articles, and tutorials delivered to your inbox once a week >> Click here to learn more ]]]></content:encoded></item><item><title>Elon Musk attempts hostile takeover of OpenAI…</title><link>https://www.youtube.com/watch?v=tPZauAYgVRQ</link><author>Fireship</author><category>tech</category><category>video</category><enclosure url="https://www.youtube.com/v/tPZauAYgVRQ?version=3" length="" type=""/><pubDate>Tue, 11 Feb 2025 18:58:36 +0000</pubDate><source url="https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA">Fireship</source><content:encoded><![CDATA[Elon Musk has launched a hostile takeover bid to take control over the non-profit assets of OpenAI. Let's look into the details of OpenAI's corporate structure and the likelihood Elon's takeover is successful. 

#tech #ai #thecodereport

💬 Chat with Me on Discord

https://discord.gg/fireship

🔗 Resources

OpenAI Stargate https://youtu.be/YrHsw4Oja7w
o1 First look https://youtu.be/Sf4WqHBCYSY

🔥 Get More Content - Upgrade to PRO

Upgrade at https://fireship.io/pro
Use code YT25 for 25% off PRO access 

🎨 My Editor Settings

- Atom One Dark 
- vscode-icons
- Fira Code Font

🔖 Topics Covered

- Why is Elon trying to buy OpenAI?
- Latest trends in artificial Intelligence
- Elon Musk vs Sam Altman Feud Explained]]></content:encoded></item><item><title>Judge Orders CDC and FDA to Restore Pages Removed by Trump Admin Before Midnight</title><link>https://www.404media.co/federal-judge-orders-cdc-fda-to-bring-back-web-pages-before-midnight/</link><author>Samantha Cole</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/2048px-Trump_Day_1_Executive_Order_Signing.jpg" length="" type=""/><pubDate>Tue, 11 Feb 2025 18:13:00 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[On Tuesday,  the Department of Health and Human Services, Center for Disease Control, and Food and Drug Administration to restore several of the webpages they removed following President Trump’s executive order attacking diversity, equity and inclusion.The health agencies have until 11:59 p.m. on February 11 to restore the pages to how they were on January 30, and “identify any other resources that [Doctors for America] DFA members rely on to provide medical care and that defendants removed or substantially modified on or after January 29, 2025, without adequate notice or reasoned explanation,” U.S. District Judge John Bates wrote in the order.The nonprofit Doctors for America is suing the health agencies following their takedown of these resources in compliance with President Trump’s executive order “Defending Women,” which demanded federal agencies scrub their websites. “Our team’s government affairs firm is advising that as of 5pm today, all U.S. government agency websites will be taken down,” an internal email obtained by 404 Media on February 1 said. “According to reports, agencies are unable to comply fast enough with President Trump’s EO ordering all government entities to remove all DEI references from their websites, so these websites will be taken offline. There is no word on when they will be made available again.”The judge’s decision is in response to Doctors for America’s motion for a temporary restraining order, as part of the organization’s case against federal agencies for removing information from their websites that healthcare workers need for their work. Doctors for America is suing the Office of Personnel Management (OPM), the Centers for Disease Control and Prevention (CDC), the Food and Drug Administration (FDA) and the Department of Health and Human Services (HHS), claiming that their removal of datasets and webpages violates the Administrative Procedure Act, and the Paperwork Reduction Act. “Lack of access to CDC materials on infectious diseases not only harms DFA members’ ability to treat individual patients but also hampers their ability to respond to broader disease outbreaks,” Doctors for America wrote in court documents.“Like many of my colleagues, I am both a doctor who takes care of patients and a researcher. Removing critical clinical information and datasets from the websites of CDC, FDA, and HHS not only puts the health of our patients at risk, but also endangers research that improves the health and health care of the American public,” Reshma Ramachandran, a member of the Doctors for America board of directors, said in a Doctors for America press release.]]></content:encoded></item><item><title>Healthy Competition With GCC 15 vs. LLVM Clang 20 Performance On AMD Zen 5</title><link>https://www.phoronix.com/review/clang20-gcc15-amd-znver5</link><author>Michael Larabel</author><category>tech</category><pubDate>Tue, 11 Feb 2025 18:03:00 +0000</pubDate><source url="https://www.phoronix.com/">Phoronix</source><content:encoded><![CDATA[In the recent discussion over the GNU Gold linker being deprecated, there was the usual LLVM vs. GCC compiler/toolchain debate. Fortunately, with recently working on some initial benchmarks of the GCC 15 compiler I was following that up with some fresh LLVM Clang compiler comparison metrics on the same AMD Zen 5 hardware.]]></content:encoded></item><item><title>Building a Community Privacy Plan</title><link>https://www.eff.org/deeplinks/2025/02/building-community-privacy-plan</link><author>Paige Collings</author><category>tech</category><enclosure url="https://www.eff.org/files/banner_library/communityprivacy-kittens.jpg" length="" type=""/><pubDate>Tue, 11 Feb 2025 17:54:44 +0000</pubDate><source url="https://www.eff.org/rss/updates.xml">Deeplinks</source><content:encoded><![CDATA[What do we want to protect?Who do we want to protect it from?How much trouble are we willing to go through to try to prevent potential consequences? It also protects your messages from being available for law enforcement should they request it from the platforms you use. In choosing a platform that protects our privacy, we create a space from safety and authenticity away from government and corporate surveillance.  Beyond this, it's important to know the privacy limitations of the platforms you communicate on. For example, while a secure messaging app might prevent government and corporate eavesdroppers from snooping on conversations, that doesn't stop someone you're communicating with from taking screenshots, or the government from attempting to compel you (or your contact) to turn over your messages yourselves. Secure messaging apps also don't protect when someone gets physical access to an unlocked phone with all those messages on it, which is why you may want to consider enabling disappearing message features for certain conversations.Consider The Content You Post On Social Media It’s important to carefully consider the tradeoffs between publicity and privacy when it comes to social media. If you’re promoting something important that needs greater reach, it may be more worth posting to the more popular platforms that undermine user privacy. To do so, it’s vital that you compartmentalize your personal information (registration credentials, post attribution, friends list, etc) away from these accounts.Think About Cloud Servers as Other People’s Computers  Create Incident Response PlansOnly you and your allies can decide what belongs on such a plan, but some strategies might be: ]]></content:encoded></item><item><title>Privacy Loves Company</title><link>https://www.eff.org/deeplinks/2025/02/privacy-loves-company</link><author>Paige Collings</author><category>tech</category><enclosure url="https://www.eff.org/files/banner_library/communityprivacy-kittens.jpg" length="" type=""/><pubDate>Tue, 11 Feb 2025 17:54:04 +0000</pubDate><source url="https://www.eff.org/rss/updates.xml">Deeplinks</source><content:encoded><![CDATA[Using Secure Messaging Services For Every Communication At some point, we all need to send a message that’s safe from prying eyes, so the chances of these apps becoming the default for sensitive communications is much higher if we use these platforms for all communications. On an even simpler level, it also means that messages and images sent to family and friends in group chats will be safe from being viewed by automated and human scans on services like Telegram and Facebook Messenger. Consider The Content You Post On Social Media Think About Cloud Servers as Other People’s Computers  Create Incident Response Plans]]></content:encoded></item><item><title>Amazon Q Business simplifies integration of enterprise knowledge bases at scale</title><link>https://aws.amazon.com/blogs/machine-learning/amazon-q-business-simplifies-integration-of-enterprise-knowledge-bases-at-scale/</link><author>Omar Elkharbotly</author><category>dev</category><category>ai</category><pubDate>Tue, 11 Feb 2025 17:11:32 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[In this new era of emerging AI technologies, we have the opportunity to build AI-powered assistants tailored to specific business requirements. Amazon Q Business, a new generative AI-powered assistant, can answer questions, provide summaries, generate content, and securely complete tasks based on data and information in an enterprise’s systems.Large-scale data ingestion is crucial for applications such as document analysis, summarization, research, and knowledge management. These tasks often involve processing vast amounts of documents, which can be time-consuming and labor-intensive. However, ingesting large volumes of enterprise data poses significant challenges, particularly in orchestrating workflows to gather data from diverse sources.In this post, we propose an end-to-end solution using Amazon Q Business to simplify integration of enterprise knowledge bases at scale.Enhancing AWS Support Engineering efficiencyThe AWS Support Engineering team faced the daunting task of manually sifting through numerous tools, internal sources, and AWS public documentation to find solutions for customer inquiries. For complex customer issues, the process was especially time-consuming, laborious, and at times extended the wait time for customers seeking resolutions. To address this, the team implemented a chat assistant using Amazon Q Business. This solution ingests and processes data from hundreds of thousands of support tickets, escalation notices, public AWS documentation, re:Post articles, and AWS blog posts.By using Amazon Q Business, which simplifies the complexity of developing and managing ML infrastructure and models, the team rapidly deployed their chat solution. The Amazon Q Business pre-built connectors like Amazon Simple Storage Service (Amazon S3), document retrievers, and upload capabilities streamlined data ingestion and processing, enabling the team to provide swift, accurate responses to both basic and advanced customer queries.In this post, we propose an end-to-end solution using Amazon Q Business to address similar enterprise data challenges, showcasing how it can streamline operations and enhance customer service across various industries. First we discuss end-to-end large-scale data integration with Amazon Q Business, covering data preprocessing, security guardrail implementation, and Amazon Q Business best practices. Then we introduce the solution deployment using three AWS CloudFormation templates.The following architecture diagram represents the high-level design of a solution proven effective in production environments for AWS Support Engineering. This solution uses the powerful capabilities of Amazon Q Business. We will walk through the implementation of key components, including configuring enterprise data sources to build our knowledge base, document indexing and boosting, and implementing comprehensive security controls. – An end-user who accesses Amazon Q Business applications with permissions granted by their administrator to perform their job duties – A user who manages Amazon Q Business resources and determines feature access for service users within the organization – A user responsible for creating and managing access policies for Amazon Q Business through AWS IAM Identity CenterThe following workflow details how a service user accesses the application:The service user initiates an interaction with the Amazon Q Business application, accessible through the web experience, which is an endpoint URL.The service user’s permissions are authenticated using IAM Identity Center, an AWS solution that connects workforce users to AWS managed applications like Amazon Q Business. It enables end-user authentication and streamlines access management.The authenticated service user submits queries in natural language to the Amazon Q Business application.The Amazon Q Business application generates and returns answers drawing from the enterprise data uploaded to an S3 bucket, which is connected as a data source to Amazon Q Business. This S3 bucket data is continuously refreshed, making sure that Amazon Q Business accesses the most current information for query responses by using a retriever to pull data from the index.Large-scale data ingestionBefore ingesting the data to Amazon Q Business, the data might need transformation into formats supported by Amazon Q Business. Furthermore, it might contain sensitive data or personally identifiable information (PII) requiring redaction. These data ingestion challenges create a need to orchestrate tasks like transformation, redaction, and secure ingestion.To facilitate orchestration, this solution incorporates AWS Step Functions. Step Functions provides a visual workflow service to orchestrate tasks and workloads resiliently and efficiently through built-in AWS integrations and error handling. The solution uses the Step Functions Map state, which allows for parallel processing of multiple items in a dataset, thereby efficiently orchestrating workflows and speeding up overall processing.The following diagram illustrates an example architecture for ingesting data through an endpoint interfacing with a large corpus.Step Functions orchestrates AWS services like AWS Lambda and organization APIs like DataStore to ingest, process, and store data securely. The workflow includes the following steps:The Prepare Map Input Lambda function prepares the required input for the Map state. For example, the Datastore API might require certain input like date periods to query data. This step can be used to define the date periods to be used by the Map state as an input.The Ingest Data Lambda function fetches data from the Datastore API—which can be in or outside of the virtual private cloud (VPC)—based on the inputs from the Map state. To handle large volumes, the data is split into smaller chunks to mitigate Lambda function overload. This enables Step Functions to manage the workload, retry failed chunks, and isolate failures to individual chunks instead of disrupting the entire ingestion process.The fetched data is put into an S3 data store bucket for processing.The Process Data Lambda function redacts sensitive data through Amazon Comprehend. Amazon Comprehend provides real-time APIs, such as DetectPiiEntities and DetectEntities, which use natural language processing (NLP) machine learning (ML) models to identify text portions for redaction. When Amazon Comprehend detects PII, the terms will be redacted and replaced by a character of your choice (such as *). You can also use regular expressions to remove identifiers with predetermined formats.Finally, the Lambda function creates two separate files: 
  A sanitized data document in an Amazon Q Business supported format that will be parsed to generate chat responses.A JSON metadata file for each document containing additional information to customize chat results for end-users and apply boosting techniques to enhance user experience (which we discuss more in the next section).The following is the sample metadata file:{
    "DocumentId": "qbusiness-ug.pdf.txt",
    "Attributes": {
        "_created_at": "2024-10-29T20:27:45+00:00",
        "_last_updated_at": "2024-10-29T20:27:45+00:00",
        "_source_uri": "https://docs.aws.amazon.com/pdfs/amazonq/latest/qbusiness-ug/qbusiness-ug.pdf",
        "author": "AWS",
        "services": ["Q Business"]
    },
    "Title": "Amazon Q Business - User Guide",
    "ContentType": "plain/text"
}In the preceding JSON file, the  for each data document must be unique. All the other attributes are optional; however, the file has additional attributes like , , and  with values defined.The two files are placed in a new S3 folder for Amazon Q to index. Additionally, the raw unprocessed data is deleted from the S3 bucket. You can further restrict access to documents uploaded to an S3 bucket for specific users or groups using Amazon S3 access control lists (ACLs).Using the Amazon Q Business data source connector feature, we integrated the S3 bucket with our application. This connector functionality enables the consolidation of data from multiple sources into a unified index for the Amazon Q Business application. The service offers various integration options, with Amazon S3 being one of the supported data sources.When working with your specific dataset in Amazon Q Business, you can use relevance tuning to enhance the performance and accuracy of search results. This feature allows you to customize how Amazon Q Business prioritizes information within your ingested documents. For example, if your dataset includes product descriptions, customer reviews, and technical specifications, you can use relevance tuning to boost the importance of certain fields. You might choose to prioritize product names in titles, give more weight to recent customer reviews, or emphasize specific technical attributes that are crucial for your business. By adjusting these parameters, you can influence the ranking of search results to better align with your dataset’s unique characteristics and your users’ information needs, ultimately providing more relevant answers to their queries.For the metadata file used in this example, we focus on boosting two key metadata attributes:  and . By assigning higher weights to these attributes, we made sure documents with specific titles or services received greater prominence in the search results, improving their visibility and relevance for the usersThe following code is the sample CloudFormation template snippet to enable higher weights to  and :BoostOverrideConfiguration:
        Fn::Sub: |
          {
            "nativeIndexConfiguration": {
              "indexId": "${QBusinessIndex.IndexId}",
              "boostingOverride": {
                "_document_title": {
                  "stringConfiguration": {
                    "boostingLevel": "MEDIUM"
                  }
                },
                "services": {
                  "stringListConfiguration": {
                    "boostingLevel": "HIGH"
                  }
                }
              }
            }
          }Amazon Q Business guardrailsImplementing robust security measures is crucial to protect sensitive information. In this regard, Amazon Q Business guardrails or chat controls proved invaluable, offering a powerful solution to maintain data privacy and security.Amazon Q Business guardrails provide configurable rules designed to control the application’s behavior. These guardrails act as a safety net, minimizing access, processing, or revealing of sensitive or inappropriate information. By defining boundaries for the application’s operations, organizations can maintain compliance with internal policies and external regulations. You can enable global- or topic-level controls, which control how Amazon Q Business responds to specific topics in chat.The following is the sample CloudFormation template snippet to enable topic-level controls:TopicConfigurations:
        - name: topic
          rules:
            - ruleType: CONTENT_BLOCKER_RULE
              ruleConfiguration:
                contentBlockerRule:
                  systemMessageOverride: This message is blocked as it contains secure content
          exampleChatMessages:
            - arn:*:ec2:us-east-1:123456789012:instance/i-abcdef123
            - arn:*:ec2:us-west-2:123456789012:vpc/bpc-abcdef123
            - arn:*:kms:eu-west-1:123456789012:key/12345678-1234-12345678-abc12345678
            - s3://bucket/prefix/file.csv
            - arn:*:s3::::bucket-nameThis topic-level control blocks the Amazon Q Business chat conversation that has AWS service Amazon Resource Names (ARNs). When similar chat messages have been detected by the Amazon Q Business application, the system will block the responses and return the message “This message is blocked as it contains secure content.”For information about deploying the Amazon Q Business application with sample boosting and guardrails, refer to the GitHub repo.The following screenshot shows an example of the Amazon Q Business assistant chat landing page.The following screenshot illustrates the assistant’s behavior if a user includes text that matches one of the similarity-based examples specified in the guardrail topic control.To enhance data security, you can deploy Amazon Macie classification jobs to scan for sensitive or PII data stored in S3 buckets. The following diagram illustrates a sample notification architecture to alert users on sensitive information that might be inadvertently stored. Macie uses machine learning to automatically discover, classify, and protect sensitive data stored in AWS. It focuses on identifying PII, intellectual property, and other sensitive data types to help organizations meet compliance requirements and protect their data from unauthorized access or breaches.The workflow includes the following steps:Macie reviews the data store S3 bucket for sensitive information before being ingested.An EventBridge rule invokes the Rectify & Notify Lambda function.The Lambda function processes the alert, remediates it by removing the affected files from the S3 bucket, and sends a notification using Amazon Simple Notification Service (Amazon SNS) to the subscribed email addresses.This system enables rapid response to potential security alerts, allowing for immediate action to protect sensitive data.The Macie detection and subsequent notification system can be demonstrated by uploading a new file to the S3 bucket, such as sample-file-with-credentials.txt, containing the PII data types monitored by Macie, such as fake temporary AWS credentials. After the file is uploaded to Amazon S3 and the scheduled Macie detection job discovers it, the Lambda function immediately removes the file and sends the following notification email to the SNS topic subscribers:Amazon Macie published a new Finding: "The S3 object contains credentials data"
Description: "The S3 object contains credentials data such as AWS secret access keys or private keys."
Severity: {'score': 3, 'description': 'High'}
Type: SensitiveData:S3Object/Credentials
Category: CLASSIFICATION
Origin Type: "SENSITIVE_DATA_DISCOVERY_JOB"
Sensitive Data Categories: "['CREDENTIALS']"
Resources affected:
Bucket="<BUCKET_NAME>",
Key="processed/sample-file-with-credentials.txt"
Trying to delete S3 Object:  s3://<BUCKET_NAME>/processed/sample-file-with-credentials.txt
File deletion succeeded.

-------------
Full Macie finding event:
{
   ...
}Additionally, the findings are visible on the Macie console, as shown in the following screenshot.Additional recommendationsTo further enhance the security and reliability of the Amazon Q Business application, we recommend implementing the following measures. These additional security and logging implementations make sure the data is protected, alerts are sent in response to potential warnings, and timely actions can be taken for security incidents.Amazon CloudWatch logging for Amazon Q Business – You can use Amazon CloudWatch logging for Amazon Q Business to save the logs for the data source connectors and document-level errors, focusing particularly on failed ingestion jobs. This practice is vital from a security perspective because it allows monitoring and quick identification of issues in the data ingestion process. By tracking failed jobs, potential data loss or corruption can be mitigated, maintaining the reliability and completeness of the knowledge base.Unauthorized access monitoring on Amazon S3 – You can implement EventBridge rules to monitor mutating API actions on the S3 buckets. These rules are configured to invoke SNS notifications when such actions are performed by unauthorized users. Enable Amazon S3 server access logging to store detailed access records in a designated bucket, which can be analyzed using Amazon Athena for deeper insights. This approach provides real-time alerts for immediate response to potential security breaches, while also maintaining a detailed audit trail for thorough security analysis, making sure that only authorized entities can modify critical data.In the following sections, we walk through implementing the end-to-end solution. For this solution to work, the following prerequisites are needed:A new or existing AWS account that will be the data collection accountConfigure the data ingestionIn this post, we demonstrate the solution using publicly available documentation as our sample dataset. In your implementation, you can adapt this solution to work with your organization’s specific content sources, such as support tickets, JIRA issues, internal wikis, or other relevant documentation.Ingestion Lambda functionProcessing Lambda functionThe data ingestion workflow in this example fetches and processes public data from the Amazon Q Business and Amazon SageMaker official documentation in PDF format. Specifically, the Ingest Data Lambda function downloads the raw PDF documents, temporarily stores them in Amazon S3, and passes their Amazon S3 URLs to the Process Data Lambda function, which performs the PII redaction (if enabled) and stores the processed documents and their metadata to the S3 path indexed by the Amazon Q Business application.You can adapt the Step Functions Lambda code for ingestion and processing according to your own internal data, making sure that the documents and metadata are in a valid format for Amazon Q Business to index, and are properly redacted for PII data.Configure IAM Identity CenterYou can only have one IAM Identity Center instance per account. If your account already has an Identity Center instance, skip this step and proceed to configuring the Amazon Q Business application.You will need to add details for a user such as user name, email, first name, and surname.After deploying the CloudFormation template, you will receive an email where you will need to accept the invitation and change the password for the user.Before logging in, you will need to deploy the Amazon Q Business application.Configure the Amazon Q Business applicationYou will need to add details such as the IAM Identity Center stack name deployed previously and the S3 bucket name provisioned by the data ingestion stack.After you deploy the CloudFormation template, complete the following steps to manage user access:On the Amazon Q Business console, choose  in the navigation pane.Choose the application you provisioned ().Under , choose .On the  tab, choose the user you specified when deploying the CloudFormation stack.Under , choose  or .Choose  and then Now you can log in using the user you have specified. You can find the URL for the web experience under .If you are unable to log in, make sure that the user has been verified.Before you can use the Amazon Q Business application, the data source needs to be synchronized. The application’s data source is configured to sync hourly. It might take some time to synchronize.When the synchronization is complete, you should now be able to access the application and ask questions.After you’re done testing the solution, you can delete the resources to avoid incurring additional charges. See the Amazon Q Business pricing page for more information. Follow the instructions in the GitHub repository to delete the resources and corresponding CloudFormation templates. Make sure to delete the CloudFormation stacks provisioned as follows:Delete the Amazon Q Business application stack.Delete the IAM Identity Center stack.Delete the data ingestionFor each deleted stack, check for any resources that were skipped in the deletion process, such as S3 buckets.Delete any skipped resources on the console.In this post, we demonstrated how to build a knowledge base solution by integrating enterprise data with Amazon Q Business using Amazon S3. This approach helps organizations improve operational efficiency, reduce response times, and gain valuable insights from their historical data. The solution uses AWS security best practices to promote data protection while enabling teams to create a comprehensive knowledge base from various data sources.Whether you’re managing support tickets, internal documentation, or other business content, this solution can handle multiple data sources and scale according to your needs, making it suitable for organizations of different sizes. By implementing this solution, you can enhance your operations with AI-powered assistance, automated responses, and intelligent routing of complex queries.Try this solution with your own use case, and let us know about your experience in the comments section. is a Senior Cloud Support Engineer at AWS, specializing in Data, Machine Learning, and Generative AI solutions. With extensive experience in helping customers architect and optimize their cloud-based AI/ML/GenAI workloads, Omar works closely with AWS customers to solve complex technical challenges and implement best practices across the AWS AI/ML/GenAI service portfolio. He is passionate about helping organizations leverage the full potential of cloud computing to drive innovation in generative AI and machine learning. is a Principal Cloud Support Engineer at AWS, focused on Networking and Generative AI solutions. He has deep expertise in resolving complex, cross-domain technical challenges through systematic problem-solving methodologies. With a customer-obsessed mindset, he leverages emerging technologies to drive innovation and deliver exceptional customer experiences. is a Principal Cloud Support Engineer at AWS. She specializes in solving complex customer issues on the AWS Cloud, focusing on infrastructure-as-code, container orchestration, and generative AI technologies. She collaborates with teams across AWS to design solutions that enhance the customer experience. Outside of work, Bhavani enjoys cooking and traveling. is a Senior Cloud Support Engineer at AWS, specialized in Machine Learning technologies and Generative AI solutions, helping customers operate and optimize their ML workloads. With a deep passion for driving performance improvements, he dedicates himself to empowering both customers and teams through innovative ML-enabled solutions. Away from his technical pursuits, Mattia embraces his passion for travel and adventure. is a Senior Cloud Support Engineer at AWS who specializes in Serverless technologies and development within the AWS cloud. Kevin has a passion for creating solutions through code while ensuring it is built on solid infrastructure. Outside of work, Kevin enjoys art and sport. is a Senior Principal Engineer leading AWS. Tipu supports customers with designing and optimizing their cloud technology strategy as a senior principal engineer in AWS Support & Managed Services. For over 15 years, he has designed, operated and supported diverse distributed systems at scale with a passion for operational excellence. He currently works on generative AI and operational excellence.]]></content:encoded></item><item><title>Faster distributed graph neural network training with GraphStorm v0.4</title><link>https://aws.amazon.com/blogs/machine-learning/faster-distributed-graph-neural-network-training-with-graphstorm-v0-4/</link><author>Theodore Vasiloudis</author><category>dev</category><category>ai</category><pubDate>Tue, 11 Feb 2025 17:03:16 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[GraphStorm is a low-code enterprise graph machine learning (ML) framework that provides ML practitioners a simple way of building, training, and deploying graph ML solutions on industry-scale graph data. Although GraphStorm can run efficiently on single instances for small graphs, it truly shines when scaling to enterprise-level graphs in distributed mode using a cluster of Amazon Elastic Compute Cloud (Amazon EC2) instances or Amazon SageMaker.Today, AWS AI released GraphStorm v0.4. This release introduces integration with DGL-GraphBolt, a new graph storage and sampling framework that uses a compact graph representation and pipelined sampling to reduce memory requirements and speed up Graph Neural Network (GNN) training and inference. For the large-scale dataset examined in this post, the inference speedup is 3.6 times faster, and per-epoch training speedup is 1.4 times faster, with even larger speedups possible.To achieve this, GraphStorm v0.4 with DGL-GraphBolt addresses two crucial challenges of graph learning: – GraphStorm v0.4 provides compact and distributed storage of graph structure and features, which may grow in the multi-TB range. For example, a graph with 1 billion nodes with 512 features per node and 10 billion edges will require more than 4 TB of memory to store, which necessitates distributed computation. – In multi-layer GNNs, you need to sample neighbors of each node to propagate their representations. This can lead to exponential growth in the number of nodes sampled, potentially visiting the entire graph for a single node’s representation. GraphStorm v0.4 provides efficient, pipelined graph sampling.In this post, we demonstrate how GraphBolt enhances GraphStorm’s performance in distributed settings. We provide a hands-on example of using GraphStorm with GraphBolt on SageMaker for distributed training. Lastly, we share how to use Amazon SageMaker Pipelines with GraphStorm.GraphBolt: Pipeline-driven graph samplingGraphBolt is a new data loading and graph sampling framework developed by the DGL team. It streamlines the operations needed to sample efficiently from a heterogeneous graph and fetch the corresponding features. GraphBolt introduces a new, more compact graph structure representation for heterogeneous graphs, called fused Compressed Sparse Column (fCSC). This can reduce the memory cost of storing a heterogeneous graph by up to 56%, allowing users to fit larger graphs in memory and potentially use smaller, more cost-efficient instances for GNN model training.GraphStorm v0.4 seamlessly integrates with GraphBolt, allowing users to take advantage of its performance improvements in their GNN workflows. The user just needs to provide the additional argument  when launching graph construction and training jobs.A common model development process is to perform model exploration locally on a subset of your full data, and when you’re satisfied with the results, train the full-scale model. This setup allows for cheaper exploration before training on the full dataset. GraphStorm and SageMaker Pipelines allows you to do that by creating a model pipeline you can run locally to retrieve model metrics, and when you’re ready, run your pipeline on the full data on SageMaker, and produce models, predictions, and graph embeddings to use in downstream tasks. In the next section, we show how to set up such pipelines for GraphStorm.We demonstrate such a setup in the following diagram, where a user can perform model development and initial training on a single EC2 instance, and when they’re ready to train on their full data, hand off the heavy lifting to SageMaker for distributed training. Using SageMaker Pipelines to train models provides several benefits, like reduced costs, auditability, and lineage tracking.Set up the environment for SageMaker distributed trainingSetting up your environment should take around 10 minutes. First, set up your Python environment to run the examples:conda init
eval $SHELL
# Create a new env for the post
conda create --name gsf python=3.10
conda activate gsf

# Install dependencies for local scripts
pip install torch==2.3.0 --index-url https://download.pytorch.org/whl/cpu
pip install sagemaker boto3 ogb pyarrow
# Verify installation, might take a few minutes for first run
python -c "import sagemaker; import torch"

# Clone the GraphStorm repository to access the example code
git clone https://github.com/awslabs/graphstorm.git ~/graphstormBuild a GraphStorm SageMaker CPU imageNext, build and push the GraphStorm PyTorch Docker image that you will use to run the graph construction, training, and inference jobs for smaller-scale data. Your role will need to be able to pull images from the Amazon ECR Public Gallery and create Amazon Elastic Container Registry (Amazon ECR) repositories and push images to your private ECR registry.# Enter you account ID here
ACCOUNT_ID=<aws-account-id>
REGION=us-east-1

cd ~/graphstorm
bash docker/build_graphstorm_image.sh --environment sagemaker --device cpu
bash docker/push_graphstorm_image.sh -e sagemaker -r $REGION -a $ACCOUNT_ID -d cpu
# This will create an ECR repository and push an image to
# ${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/graphstorm:sagemaker-cpuDownload and prepare datasetsIn this post, we use two citation datasets to demonstrate the scalability of GraphStorm. The Open Graph Benchmark (OGB) project hosts a number of graph datasets that can be used to benchmark the performance of graph learning systems. For a small-scale demo, we use the ogbn-arxiv dataset, and for a demonstration of GraphStorm’s large-scale learning capabilities, we use the ogbn-papers100M dataset.Prepare the ogbn-arxiv datasetDownload the smaller-scale ogbn-arxiv dataset to run a local test before launching larger-scale SageMaker jobs on AWS. This dataset has approximately 170,000 nodes and 1.2 million edges. Use the following code to download the data and prepare it for GraphStorm:# Provide the S3 bucket to use for output
BUCKET_NAME=<your-s3-bucket>cd ~/graphstorm/examples/sagemaker-pipelines-graphbolt
python convert_arxiv_to_gconstruct.py \
--output-s3-prefix s3://$BUCKET_NAME/ogb-arxiv-inputThis will create the tabular graph data in Amazon S3, which you can verify by running the following code:aws s3 ls s3://$BUCKET_NAME/ogb-arxiv-input/ 
edges/
nodes/
splits/
gconstruct_config_arxiv.jsonFinally, upload GraphStorm training configuration files for arxiv to use for training and inference:# Upload the training configurations to S3
aws s3 cp ~/graphstorm/training_scripts/gsgnn_np/arxiv_nc.yaml \
s3://$BUCKET_NAME/yaml/arxiv_nc_train.yaml
aws s3 cp ~/graphstorm/inference_scripts/np_infer/arxiv_nc.yaml \
s3://$BUCKET_NAME/yaml/arxiv_nc_inference.yamlPrepare the ogbn-papers100M dataset on SageMakerThe papers-100M dataset is a large-scale graph dataset, with 111 million nodes and 3.2 billion edges after adding reverse edges.To download and preprocess the data as an Amazon SageMaker Processing step, use the following code. You can launch and let the job run in the background while proceeding through the rest of the post, and return to this dataset later. The job should take approximately 45 minutes to run.# Navigate to the example code
cd ~/graphstorm/examples/sagemaker-pipelines-graphbolt

# Build and push a Docker image to download and process the papers100M data
bash build_and_push_papers100M_image.sh -a $ACCOUNT_ID -r $REGION

# This creates an ECR repository and pushes an image to
# $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/papers100m-processor

# Run a SageMaker job to do the processing and upload the output to S3
SAGEMAKER_EXECUTION_ROLE_ARN=<your-sagemaker-execution-role-arn>
aws configure set region $REGION
python sagemaker_convert_papers100m.py \
--output-bucket $BUCKET_NAME \
--execution-role-arn $SAGEMAKER_EXECUTION_ROLE_ARN \
--region $REGION \
--instance-type ml.m5.4xlarge \
--image-uri $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/papers100m-processorThis will produce the processed data in s3://$BUCKET_NAME/ogb-papers100M-input, which can then be used as input to GraphStorm. While this job is running, you can create the GraphStorm pipelines.Create a SageMaker pipeline# Navigate to the example code
cd ~/graphstorm/examples/sagemaker-pipelines-graphbolt

PIPELINE_NAME="ogbn-arxiv-gs-pipeline"

bash deploy_arxiv_pipeline.sh \
--account $ACCOUNT_ID\
--bucket-name $BUCKET_NAME --execution-role $SAGEMAKER_EXECUTION_ROLE_ARN \
--pipeline-name $PIPELINE_NAME \
--use-graphbolt falseRunning the preceding code will create a SageMaker pipeline configured to run three SageMaker jobs in sequence:A GConstruct job that converts the tabular file input to a binary partitioned graph on Amazon S3A GraphStorm training job that trains a node classification model and saves the model to Amazon S3A GraphStorm inference job that produces predictions for all nodes in the test set, and creates embeddings for all nodesTo review the pipeline, navigate to SageMaker AI Studio, choose the domain and user profile you used to create the pipeline, then choose .In the navigation pane, choose . There should be a pipeline named . Choose the pipeline, which will take you to the  tab for the pipeline. Choose  to view the pipeline steps.Run the SageMaker pipeline locally for ogbn-arxivThe ogbn-arxiv dataset is small enough that you can run the pipeline locally. Run the following command to start a local execution of the pipeline:# Allow the local containers to inherit AWS credentials
export USE_SHORT_LIVED_CREDENTIALS=1
python ~/graphstorm/sagemaker/pipeline/execute_sm_pipeline.py \
--pipeline-name ogbn-arxiv-gs-pipeline \
--region us-east-1 \
--local-execution | tee arxiv-local-logs.txtWe save the log output to . You will use that later to analyze the training speed.Running the pipeline should take approximately 5 minutes. When the pipeline is complete, it will print a message like the following:Pipeline execution 655b9357-xxx-xxx-xxx-4fc691fcce94 SUCCEEDEDYou can inspect the mean epoch and evaluation time using the provided  script and the log file you created:python analyze_training_time.py --log-file arxiv-local-logs.txt

Reading logs from file: arxiv-local-logs.txt

=== Training Epochs Summary ===
Total epochs completed: 10
Average epoch time: 4.70 seconds

=== Evaluation Summary ===
Total evaluations: 11
Average evaluation time: 1.90 secondsThese numbers will vary depending on your instance type; in this case, these are values reported on an m6in.4xlarge instance.Create a GraphBolt pipelineNow you have established a baseline for performance, you can create another pipeline that uses the GraphBolt graph representation to compare the performance.You can use the same pipeline creation script, but change two variables, providing a new pipeline name and setting  to :# Deploy a GraphBolt-enabled pipeline
PIPELINE_NAME_GB="ogbn-arxiv-gs-graphbolt-pipeline"
bash deploy_arxiv_pipeline.sh \
--account $ACCOUNT_ID \
--bucket-name $BUCKET_NAME --execution-role $SAGEMAKER_EXECUTION_ROLE_ARN \
--pipeline-name $PIPELINE_NAME_GB \
--use-graphbolt true

# Execute the pipeline locally
python ~/graphstorm/sagemaker/pipeline/execute_sm_pipeline.py \
--pipeline-name $PIPELINE_NAME_GB \
--region us-east-1 \
--local-execution | tee arxiv-local-gb-logs.txtAnalyzing the training logs, you can see the per-epoch time has dropped somewhat:python analyze_training_time.py --log-file arxiv-local-gb-logs.txt

Reading logs from file: arxiv-local-gb-logs.txt

=== Training Epochs Summary ===
Total epochs completed: 10
Average epoch time: 4.21 seconds

=== Evaluation Summary ===
Total evaluations: 11
Average evaluation time: 1.63 secondsFor such a small graph, the performance gains are modest, around 13% per epoch time. With large data, the potential gains are much greater. In the next section, you will create a pipeline and train a model for papers-100M, a citation graph with 111 million nodes and 3.2 billion edges.Create a SageMaker pipeline for distributed trainingAfter the SageMaker processing job that prepares the papers-100M data has finished processing and the data is stored in Amazon S3, you can set up a pipeline to train a model on that dataset.Build the GraphStorm GPU imageFor this job, you will use large GPU instances, so you will build and push the GPU image this time:cd ~/graphstorm

bash ./docker/build_graphstorm_image.sh --environment sagemaker --device gpu

bash docker/push_graphstorm_image.sh -e sagemaker -r $REGION -a $ACCOUNT_ID -d gpuDeploy and run pipelines for papers-100MBefore you deploy your new pipeline, upload the training YAML configuration for papers-100M to Amazon S3:aws s3 cp \
~/graphstorm/training_scripts/gsgnn_np/papers100M_nc.yaml \
s3://$BUCKET_NAME/yaml/Now you are ready to deploy your initial pipeline for papers-100M:# Navigate to the example code 
cd ~/graphstorm/examples/sagemaker-pipelines-graphbolt 
PIPELINE_NAME="ogb-papers100M-pipeline" 
bash deploy_papers100M_pipeline.sh \ 
    --account $ACCOUNT_ID \
    --bucket-name $BUCKET_NAME --execution-role $SAGEMAKER_EXECUTION_ROLE_ARN \
    --pipeline-name $PIPELINE_NAME \ 
    --use-graphbolt falseRun the pipeline on SageMaker and let it run in the background:# Navigate to the example code
cd ~/graphstorm/examples/sagemaker-pipelines-graphbolt

PIPELINE_NAME="ogb-papers100M-pipeline"
bash deploy_papers100M_pipeline.sh \
--account $ACCOUNT_ID \
--bucket-name $BUCKET_NAME --execution-role $SAGEMAKER_EXECUTION_ROLE_ARN \
--pipeline-name $PIPELINE_NAME \
--use-graphbolt falseYour account needs to meet the required quotas for the requested instances. For this post, the defaults are set to four  for training jobs and one  instance for a processing job. To adjust your SageMaker service quotas, you can use the Service Quotas console. To run both pipelines in parallel, i.e. without GraphBolt and with GraphBolt, you will need 8 x  and 2 x Next, you can deploy and run another pipeline, with GraphBolt enabled:# Deploy the GraphBolt-enabled pipeline
PIPELINE_NAME_GB="ogb-papers100M-graphbolt-pipeline"
bash deploy_papers100M_pipeline.sh \
--account $ACCOUNT_ID\
--bucket-name $BUCKET_NAME --execution-role $SAGEMAKER_EXECUTION_ROLE_ARN \
--pipeline-name $PIPELINE_NAME_GB \
--use-graphbolt true

# Execute the GraphBolt pipeline on SageMaker
python ~/graphstorm/sagemaker/pipeline/execute_sm_pipeline.py \
--pipeline-name $PIPELINE_NAME_GB \
--region us-east-1 \
--async-executionCompare performance for GraphBolt-enabled trainingAfter both pipelines are complete, which should take approximately 4 hours, you can compare the training times for both cases.On the page of the SageMaker console, there should be two new pipelines named  and ogb-papers100M-graphbolt-pipeline. Choose ogb-papers100M-pipeline, which will take you to the  tab for the pipeline. Copy the name of the latest successful execution and use that to run the training analysis script:python analyze_training_time.py \
--pipeline-name $PIPELINE_NAME\
--execution-name execution-1734404366941Your output will look like the following code:== Training Epochs Summary ===
Total epochs completed: 15
Average epoch time: 73.95 seconds

=== Evaluation Summary ===
Total evaluations: 15
Average evaluation time: 15.07 secondsNow do the same for the GraphBolt-enabled pipeline:python analyze_training_time.py \
--pipeline-name $PIPELINE_NAME_GB \
--execution-name execution-1734463209078You will see the improved per-epoch and evaluation times:== Training Epochs Summary ===
Total epochs completed: 15
Average epoch time: 54.54 seconds

=== Evaluation Summary ===
Total evaluations: 15
Average evaluation time: 4.13 secondsWithout loss in accuracy, the latest version of GraphStorm achieved a speedup of approximately 1.4 times faster per epoch for training, and a speedup of 3.6 times faster in evaluation time! Depending on the dataset, the speedups can be even greater, as shown by the DGL team’s benchmarking.This post showcased how GraphStorm 0.4, integrated with DGL-GraphBolt, significantly speeds up large-scale GNN training and inference, by 1.4 and 3.6 times faster, respectively, as measured on the papers-100M dataset. As shown in the DGL benchmarks, even larger speedups are possible depending on the dataset.We encourage ML practitioners working with large graph data to try GraphStorm. Its low-code interface simplifies building, training, and deploying graph ML solutions on AWS, allowing you to focus on modeling rather than infrastructure. is a Senior Applied Scientist at Amazon Web Services, where he works on distributed machine learning systems and algorithms. He led the development of GraphStorm Processing, the distributed graph processing library for GraphStorm and is a core developer for GraphStorm. He received his PhD in Computer Science from the KTH Royal Institute of Technology, Stockholm, in 2019. is a Senior Applied Scientist at Amazon Web Services, where he develops deep learning frameworks including GraphStorm, DGL, and DGL-KE. He led the development of Amazon Neptune ML, a new capability of Neptune that uses graph neural networks for graphs stored in a Neptune graph database. He is now leading the development of GraphStorm, an open source graph machine learning framework for enterprise use cases. He received his PhD in computer systems and architecture at the Fudan University, Shanghai, in 2014. is a Principal Technical Product Manager at AWS AI/ML research supporting science teams like the graph machine learning group, and ML Systems teams working on large scale distributed training, inference, and fault resilience. Before joining AWS, Florian lead technical product management for automated driving at Bosch, was a strategy consultant at McKinsey & Company, and worked as a control systems and robotics scientist—a field in which he holds a PhD.]]></content:encoded></item><item><title>Creating a Useful Voice-Activated Fully Local RAG System</title><link>https://www.kdnuggets.com/creating-useful-voice-activated-fully-local-rag-system</link><author>Cornellius Yudha Wijaya</author><category>dev</category><category>ai</category><enclosure url="https://www.kdnuggets.com/wp-content/uploads/kdn-wijaya-creating-useful-voice-activated-rag.png" length="" type=""/><pubDate>Tue, 11 Feb 2025 17:00:49 +0000</pubDate><source url="https://www.kdnuggets.com/">KDNuggets blog</source><content:encoded><![CDATA[This article will explore initiating the RAG system and making it fully voice-activated.]]></content:encoded></item><item><title>A Wild Website Where People Lose Millions of Dollars</title><link>https://www.youtube.com/watch?v=_GUYYeVImVY</link><author>Jack Rhysider</author><category>infosec</category><category>video</category><category>podcast</category><enclosure url="https://www.youtube.com/v/_GUYYeVImVY?version=3" length="" type=""/><pubDate>Tue, 11 Feb 2025 17:00:40 +0000</pubDate><source url="https://www.youtube.com/channel/UCMIqrmh2lMdzhlCPK5ahsAg">Darknet diaries</source><content:encoded><![CDATA[A Wild Website Where People Lose Millions of Dollars

#cybersecurity #podcast #crypto #memecoin 

Listen to the full episode 🎙 Darknet Diaries Ep. 152: Stacc Attack]]></content:encoded></item><item><title>How to refactor code with GitHub Copilot</title><link>https://github.blog/ai-and-ml/github-copilot/how-to-refactor-code-with-github-copilot/</link><author>Anthony Grutta</author><category>official</category><pubDate>Tue, 11 Feb 2025 17:00:05 +0000</pubDate><source url="https://github.blog/">Github Blog</source><content:encoded><![CDATA[We’ve all been there—staring at a function that looks like it was written by an over-caffeinated goblin at 3 AM (maybe even your alter ego). You  pretend it doesn’t exist, or you could refactor it. Luckily, GitHub Copilot makes the second option less painful.What is code refactoring?Feel free to breeze past this section if you already know what’s involved with refactoring code, but we wanted to take a moment to cover what we’ll be looking at today.Think of refactoring as giving your project some digital spring cleaning—a glow up for your functions, classes, and modules. But instead of just tidying up, you’re making your code more efficient, maintainable, and readable, all without changing its external behavior.Some standard ways of refactoring include:Simplifying complex conditionals (because no one should need a PhD to read your  statements)  Extracting duplicated logic (so you’re not trying to maintain code in ten different places)  Improving variable and function names (because  is a crime against humanity)  Converting monolithic functions into smaller, modular pieces (to prevent the dreaded “function that spans multiple screens” scenario)Refactoring isn’t just about tidiness—it’s about making your codebase more resilient, scalable, and enjoyable to work with. Let’s find out how GitHub Copilot can help you do it faster and with fewer headaches.Know what your code does before you refactor anythingIt might seem obvious to say this, but before you can refactor any code you need to understand how it works. If you don’t know what your code is doing, you won’t know whether or not the “improvements” you’re making are changing the core functionality of the code.Consider the following method:public String getSound(String animal) {
  if (animal == null) {
      System.out.println("Oops! A null animal?");
  } else if (animal.equalsIgnoreCase("Dog")) {
      return "Bark";
  } else if ( animal.equalsIgnoreCase("Cat")) {
      return "Meow";
  } else if ( animal.equalsIgnoreCase("Bird")) {
      return "Tweet";
  }
  return "Unknown";
}
You might look at this and immediately think “they should use a switch statement,” and that would be one example of refactoring the code. But having that knee jerk reaction requires you to know how if-statements and switch-statements work. You can only make that suggestion if you understand this code will continue cycling through if-statements until it finds an appropriate match. Otherwise, it will return the value of .As codebases get more complex and make calls between multiple files, this gets (much) more complicated. And this is one way Copilot can help you.You can ask Copilot Chat to explain how some code works, either by asking in plain language or using the /explain slash command. To limit the scope of what Copilot looks at, select the code in your IDE before asking your query, or specify specific files for it to consider by using . While you’re at it, you can even ask it to add code comments to help you (or anyone else reading the code) in the future.Here are some sample prompts:Explain what this code does.Add comments to this code to make it more understandable.You should use Copilot Chat to analyze and explain your codebase until you fully understand the code you’re looking to refactor.Try some blanket improvements to refactor your codeLike most things in life, it’s usually best to start small. When you’re first getting started with refactoring code, keep it simple: open up Copilot Chat in your project and ask “how would you improve this?” Just like when you are asking GitHub Copilot to explain some code, you can specify what it looks at by highlighting sections of code or identifying specific files by using .Here are some sample prompts:How would you improve this?Improve the variable names in this function.#file:pageInit.js, #file:socketConnector.js Offer suggestions to simplify this code.Copilot will then offer suggestions to improve the code in the way that you specified. This is great for getting started, but Copilot can do much more if you give it some guidance.When working with any generative AI-powered developer tool, it is often useful to include more context in your prompts—ones that are more likely to get you the results you’re looking for. By being specific about what you want the tool to do, it focuses the efforts toward that end.It’s a bit like if someone tells you to code something, and you have so many ideas and questions that you’re not quite sure where to begin. But if someone tells you they specifically want you to code a class that sorts a list, you can focus on the task at hand.The prompts above don’t offer much specificity or context, which leaves Copilot to explore all the possible ways your code could be improved. The upside? You may see options that you might not have considered. The downside is some of the proposed solutions might not address your specific concerns.Make a plan for refactoring your codebaseWhat do you want to do to your code? Do you want to make it more readable? Or do you want to find redundant code and remove it? Coming up with a plan for the improvements you want to make will help you to hit your goals. This comes back to making sure you understand your code. If you know how it works, you can come up with a plan for the type of improvements that you want to make.Maybe your code base has a bunch of different scripts that all perform the same general function. You could strip out the code into a common module to import into each of the different scripts, making the code easier to change and maintain.To do so, you can direct Copilot to look for these common code sections and to pull them into a single module.Inspect all my js files for GitHub API calls and create a new class that will manage all the GitHub API calls.
Now that we have provided some guidance and additional context, Copilot will provide suggestions targeting this specific improvement that we want to make to our code.You can also provide a laundry list of tasks, or ask Copilot to keep things in mind while it is doing the refactoring.In that vein, here’s a sample prompt to consider:Can you refactor the GitHubController class to:
- remove nested logic structures
- make the code more concise
- while doing this, check if the code is safe and add comments if not
The takeaway here is Copilot is very good at taking directions—and the more specific your directions are, the more it will generate outputs in line with your intended end goal.A real-world example: Using GitHub Copilot to refactor codeSometimes the best way to understand something is to see it in use. To help with this, we wanted to share an experience where we needed to use GitHub Copilot to refactor our own code, interspersed with some general guidance and pointers.It started with a couple of organizations independently requesting help with their individual large migration projects, which involved moving from other data centers into tens of thousands of repositories on GitHub. After building a proof of concept, we started creating individual systems, each tailored to the needs of the individual customer and their unique systems. While we were doing this, a third organization made a similar request for help, and we realized this was a common need.At this point in time, we had two systems that were both suited for large-scale migrations, but each of them was heavily customized for the original company making the request. We quickly realized the best solution involved refactoring our code to improve its modularity so we could use it across different organizations. This would not be easy—the codebase was made up of several different scripts and workflows with a lot of moving parts. And that’s when we turned to Copilot for help.First we came up with a plan. We created a set of high-level goals and used these to guide us during the refactoring process. We wanted to make sure the code was:Modular and reusable for different organizations: The code should be organized into small, self-contained modules that could be reused and combined for new functionality.   The code should be easy to maintain and extend as needed. That meant making it well-organized, well-documented, and easy to understand.  Customizable for different organizations: The code should be flexible enough to meet the unique needs of each organization.  Following coding standards and best practices: The code should be consistent, readable, and easy to understand.With this plan in place, it was time to ask Copilot for help.Step 1: Creating the initial moduleOur first step was creating a common module we could import into each of the different scripts. This would allow us to reuse the same code across many different scripts, making it easier to maintain and extend. We created a skeleton of a module called . Then we used Copilot to fill in the details.Here was the prompt we gave Copilot:I am creating a module, gh-migrations, which will hold common functionality to be used through out my project. I have already created an index.js for the module. Please inspect the other js files for GitHub API calls, create a new class for the module which will manage all GitHub API calls. This class should also account for rate limiting and errors. Do not make edits to the javascript files, rather identify the API calls, and add the functionality to the new GitHub API class.
And here was Copilot’s response:I'll help create a GitHub API management class based on the API calls found in the provided files. Here's a step-by-step solution:

1. From analyzing the files, I identified these common GitHub API operations: 
  * Issues creation and updates
  * Issue search
  * Rate limit handling (403 errors)
  * Common error handling patterns

2. I'll create a class that encapsulates these operations with proper error handling and rate limiting.

.github/lib/gh-migrations/index.js
Here's the GitHub API management class implementation:

<code>

This implementation:

1. Creates a GitHubApiManager class that handles all GitHub API interactions
2. Implements automatic rate limiting retry logic in withRateLimit
3. Provides methods for common operations: 
  * createIssue: Creates a new issue
  * updateIssue: Updates an existing issue
  * searchIssues: Searches for issues using GitHub's search API
  * findIssueByTitle: Helper method to find issues by title
  * getIssue: Gets a specific issue by number

Usage example:

<code>

The class handles:
  * Automatic retry on rate limits
  * Consistent error handling
  * Repository context management
  * Common GitHub API operations used across the codebase

This centralizes all GitHub API interactions and makes the code more maintainable and consistent.
After reviewing the code (as you should always do!), we made the recommended changes. The next step was putting these changes into a separate file while ensuring the  file could reference it.Here was the prompt we entered for Copilot:Rename the class GitHubApiManager to GHApi and put it in a separate file that is referenced in the index.js file.
And here was Copilot’s response:I'll help you split the code into two files. Here's the step by step solution:

1. Create a new file gh-api.js for the GHApi class
2. Update index.js to export the renamed class from the new file

.github/lib/gh-migrations/gh-api.js
Create a new file containing the renamed class:

<code>

.github/lib/gh-migrations/index.js
Update the index file to export the renamed class from the new file:

<code>

The changes:
1. Created a new file gh-api.js with the renamed class
2. Moved all the class implementation to the new file
3. Updated the class name from GitHubApiManager to GHApi
4. Modified index.js to require and export the class from the new file

Now consumers of this module can continue to import it the same way, but the implementation is better organized.
After making these changes, we then had to repeat the process for each of the files that contained GitHub API calls. Be aware, we didn’t want to refactor the code directly at this stage. Instead, we wanted to create a common module we could use for refactoring code later.Here was the prompt we entered for Copilot:The gh-api.js file is a new class that will be used to manage all GitHub API calls. Please review the other javascript files for GitHub API calls to be added to gh-api.js. Do not edit the javascript files, only add new functionality to gh-api.js.
And here was Copilot’s response:I'll analyze the JavaScript files and add the missing API functionality to the GHApi class.

.github/lib/gh-migrations/gh-api.js
Add methods for issue operations, searching, and deletion based on the API calls found in migration.js and application.js:

<code>

This implementation adds all the GitHub API functionality found in the other files:

1. From migration.js:
  * createComment for updating issues with comments
  * getIssue and isMigrationIssue for checking migration status
2. From application.js:
  * searchIssues and searchIssuesByTitle for finding issues
  * getIssueNodeId and deleteIssue for issue deletion via GraphQL
  * findJiraIssue helper method to get Jira ticket information

The methods maintain the same rate limiting and error handling patterns while providing a cleaner interface for the API operations.
Step 2: Adding new classesOnce we had the new  class to handle the GitHub API, we want to create some reusable classes for different entities in our application. Since our application is a migration tool managed via GitHub Issues, we wanted to create classes for the following entities: represent repository migrations from various sources. They contain configuration and metadata about the repository and how the migration should be performed.   represent a batch of migrations. They contain more high-level metadata about groups of individual migration issues such as custom application ids and status of the batch.   represent the migration of a group of users, their associated repositories, and the permissions to those repositories.   represent Azure DevOps pipelines rewire operations. They allow for the reconfiguration of Azure DevOps pipelines to point to the new GitHub repositories after a migration has been completed.Here was the prompt we entered for Copilot:Review the create-migration-issue.js and develop a new class called MigrationIssue that contains the properties associated with a migration. This shoud be added to the gh-migrations module where index.js is located.
And here was Copilot’s response:I'll help create a new MigrationIssue class based on the migration configuration and status shown in the code. Here's the step-by-step solution:

1. Create a new file migration-issue.js in the gh-migrations directory
2. Update the index.js file to expose the new class
3. Extract configuration and status properties from the create-migration-issues.js file into the new class

migration-issue.js
Create a new class to represent a migration issue with all necessary properties and methods.

<code>

index.js
Update the index.js to expose the new MigrationIssue class.

<code>

The new MigrationIssue class encapsulates all the properties that were previously spread across various objects in the create-migration-issues.js file. It provides a clean interface for creating and managing migration issues, with helper methods for generating issue titles and source types.

You can now use this class in create-migration-issues.js by replacing the manual object creation with the MigrationIssue class. For example, the createMigrationConfig function could be replaced with:

<code>
The process for creating new classes for the other entities was similar to the above. We created new classes for , , and , each with their own properties and methods.After we built out our entity classes, we realized they should manage their own state. This is a common pattern in object-oriented programming, where the class is responsible for managing its state and behavior. Remember our goal about following good coding standards?The class should include methods to get and set the state of the object, as well as methods to perform actions on the object. It should also be responsible for utilizing the GitHub API and manage the state of the object rather than the client code. This will help standardize and protect the state of the object, as well as give the client code a simpler interface to work with.Here was the prompt we entered for Copilot:The MigrationIssue class should contain a initializer that uses the gh-api.js to create the resulting GitHub Issue. The initializer should take in an optional parameter called issueNumber, if the issueNumber is omitted the initializer should create a new Migration Issue and return the issue number created, if the issueNumber is passed to the initializer, the gh-api.js should be used to return the title and body of the issue which the class will parse to create the properties of the MigrationIssue.
And here was Copilot’s response:I'll help you modify the code to add initialization logic to the MigrationIssue class. Here's the step-by-step solution:

1. Add a static method to parse issue body into configuration
2. Add initialization methods to handle both new and existing issues
3. Modify constructor to accept GHApi instance
4. Add method to generate issue body
5. Add method to create or load issue

migration-issue.js
Update the MigrationIssue class to handle initialization from GHApi.

<code>

The main changes include:

1. Constructor now accepts a GHApi instance as first parameter
2. Added parseIssueBody static method to parse configuration from issue body
3. Added generateIssueBody method to create the issue body format
4. Added initialize async method that either creates a new issue or loads an existing one
5. The initialize method returns the issue number in both cases

To use this updated class:

<code>
Remember how we said it’s always important to review suggestions from Copilot? In this case, the  method wasn’t connected to the constructor, like we would expect. We asked Copilot to address this issue with an iterative prompt.Here was the prompt we entered for Copilot:The MigrationIssue class has an initialize function that encapsulates functionality that should be included in the constructor. Rewire the constuctor method to include the initialzie function.
And here was Copilot’s response:Let's modify the class to move the initialization logic into the constructor. Here's the step-by-step solution:

1. Make constructors async
2. Move initialization logic into constructor
3. Remove separate initialize method
4. Keep static parseIssueBody method

migration-issue.js
Move initialization logic into constructor.

<code>

The main changes:

1. Removed initialize method from the class
2. Added static create and load factory methods
3. Added save method to handle issue creation
4. Constructor remains synchronous but now only handles property initialization

Usage example:

<code>

This approach follows better object-oriented principles by:

1. Using factory methods for different creation scenarios
2. Keeping the constructor simple and synchronous
3. Separating issue creation into a distinct operation
4. Making the API more intuitive
In this case, Copilot suggested a different approach than we were thinking of with a factory method (which is a great way to handle different scenarios when creating or loading an issue). Even if it wasn’t what we were thinking, it worked and also kept the constructor clean and focused on just initializing the object. Moreover, the  method is a good way to encapsulate the logic for creating a new issue, and it makes the code more readable.Now we just needed to repeat this process with each of the new classes we added.Step 4: Final refactoringAfter we built a common module, we needed to refactor the client code to make it much cleaner and easier to read and maintain. After that, we’d also be able to identify and add any missing functionality in the common module.This was an iterative process, and we needed to go back and forth between the client code and the common module to make sure everything worked properly. Because of the way this project evolved, it afforded us the opportunity to make sweeping changes to the codebase. It’s much more common to make small, incremental changes to the codebase, especially if it’s code that’s actively in use. In both of these cases, don’t forget to write tests to ensure the code works as expected.Here was the prompt we entered for Copilot:Using the gh-migrations module, refactor the create-migration-issues.js
And here was Copilot’s response:I'll help you refactor the create-migration-issues.js file to use the gh-migrations module. Here's the step-by-step solution:

1. Import the gh-migrations module
2. Create GHApi instance
3. Use MigrationIssue class for creating and managing migration issues
4. Simplify the main logic using the new classes

create-migration-issues.js
Refactor to use the gh-migrations module for better code organization and reusability.

<code>

The refactoring:

1. Removes redundant code by using the MigrationIssue class
2. Simplifies issue creation and management
3. Uses GHApi for GitHub API calls with built-in rate limiting
4. Removes duplicate code for different source types
5. Improves code organization and maintainability

The main changes:
  * Removed several helper functions as they're now part of the MigrationIssue class
  * Simplified the main logic flow
  * Added better error handling
  * Used structured configuration object
  * Maintained the same functionality while reducing code complexity
Now we needed to refactor the remaining scripts in the same manner. For example, this is how we used Copilot to help with refactoring the  script.Here was the prompt we entered for Copilot:Using the gh-migrations module refactor the create-team-issues.js
And here was Copilot’s response:I'll help you refactor the create-team-issues.js file to use the gh-migrations module. Here's the step-by-step solution:

1. Import the gh-migrations module
2. Replace manual issue creation with TeamIssue class
3. Simplify team creation logic using the new class
4. Maintain the same JiraIssue tracking functionality

create-team-issues.js
Refactor to use the gh-migrations module for creating team issues.

<code>

The refactoring:

1. Uses the TeamIssue class to manage team issue creation
2. Simplifies the code by removing redundant config and status objects
3. Uses GHApi for GitHub operations with built-in rate limiting
4. Maintains the same JiraIssue tracking functionality
5. Reduces code duplication by using a loop for team creation

The code is now more maintainable and follows the same pattern as the migration issues implementation.
From there, it was a matter of rinsing and repeating this process with each of our scripts.By first creating the common module, we could guide Copilot  and make sure that the final, refactored codebase was something we could use with multiple organizations. It gave us a foundation we could reuse and customize based on the needs of the system we were migrating.Sometimes refactoring code can be really easy, like our first example with the sequential  statements. But the more you dig into it, the more it grows, and you might find yourself facing down the Herculean task of trying to refactor a codebase that stretches across multiple files from a larger team of developers.Speaking from experience: It can be daunting to even know where to start.Remember to take a step back and start with the basics. Your first step should always be improving your  understanding of the codebase you want to refactor. The more you know about what you’re starting out with, the greater chance that you will be able to think of ways to refactor it effectively. And once you come up with some ideas, you can always ask GitHub Copilot to help turn your vision into reality. It’s got your back and is more than willing to help.Start using GitHub Copilot for free
Our free version of GitHub Copilot is included by default in personal GitHub accounts and VS Code to help you start new projects, manage existing repositories, and more.]]></content:encoded></item><item><title>Senator Pushes Zuckerberg on &quot;Perverse Abuse&quot; of Nudify Ads After 404 Media Report</title><link>https://www.404media.co/senator-pushes-zuckerberg-on-perverse-abuse-of-nudify-ads-after-404-media-report/</link><author>Emanuel Maiberg</author><category>tech</category><enclosure url="https://images.unsplash.com/photo-1568378780196-a9a0444a9151?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wxMTc3M3wwfDF8c2VhcmNofDF8fG1hcmslMjB6dWNrZXJiZXJnfGVufDB8fHx8MTczOTI4ODE2N3ww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=2000" length="" type=""/><pubDate>Tue, 11 Feb 2025 16:49:59 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[Senator and Ranking Member of the Senate Judiciary Committee Dick Durbin has sent a letter to Meta CEO Mark Zuckerberg asking about his company’s role in directing traffic to apps that use artificial intelligence to generate nonconsensual nude images. Specifically, Durbin’s letter cites  about Crushmate, a so-called “nudify” app that has repeatedly advertised its services on Meta platforms, often with nonconsensual nude images of women, and that according to traffic analysis firm Similarweb has sent Crushmate 90 percent of its traffic. Alexios Mantzarlis was first to track the traffic Meta was sending Crush in his .“Tech companies should not assist malevolent actors who seek to take advantage of women and children,” Durbin wrote in his letter to Zuckerberg. “I am gravely concerned with Meta’s failure to prevent this perverse abuse of its platforms and I refuse to accept Meta’s facilitation of these crimes. I therefore urge Meta to join us in combatting this threat.”]]></content:encoded></item><item><title>How A Chinese Villager Shook Silicon Valley [DeepSeek Founder]</title><link>https://www.youtube.com/watch?v=hd1-CKDyHXE</link><author>ColdFusion</author><category>tech</category><category>video</category><enclosure url="https://www.youtube.com/v/hd1-CKDyHXE?version=3" length="" type=""/><pubDate>Tue, 11 Feb 2025 16:34:32 +0000</pubDate><source url="https://www.youtube.com/channel/UC4QZ_LsYcvcq7qOsOhpAX4A">Cold Fusion</source><content:encoded><![CDATA[Go to https://ground.news/coldfusion to stay fully informed on every side of every story.

Liang Wenfeng, you may not know his name, but you know his company: DeepSeek. In recent weeks it's sent shockwaves around the world. But who is it's mysterious founder? And what is his philosophy? In this episode we find out.

ColdFusion Podcast: 

https://www.youtube.com/@ThroughTheWeb 

Watch or listen to ColdFusion on Spotify: https://open.spotify.com/show/1YEwCKoRz8fEDqheXB6UJ1


ColdFusion Music: 

https://www.youtube.com/@ColdFusionmusic
http://burnwater.bandcamp.com   

Get my book: 

http://bit.ly/NewThinkingbook 

ColdFusion Socials: 

https://discord.gg/coldfusion
https://facebook.com/ColdFusionTV 
https://twitter.com/ColdFusion_TV 
https://instagram.com/coldfusiontv

Created by: Dagogo Altraide
Producers: Tawsif Akkas, Dagogo Altraide]]></content:encoded></item><item><title>Insights from Cleric: Building an Autonomous AI SRE // Willem Pienaar // #290</title><link>https://podcasters.spotify.com/pod/show/mlops/episodes/Insights-from-Cleric-Building-an-Autonomous-AI-SRE--Willem-Pienaar--290-e2unikg</link><author>Demetrios</author><category>podcast</category><category>ai</category><enclosure url="https://anchor.fm/s/174cb1b8/podcast/play/98338896/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-1-11%2F394679162-44100-2-e1c6c10bbd504.mp3" length="" type=""/><pubDate>Tue, 11 Feb 2025 16:32:23 +0000</pubDate><source url="https://mlops.community/">MLOps podcast</source><content:encoded><![CDATA[ is the Co-Founder and CTO of. He previously worked at Tecton as a Principal Engineer. Willem Pienaar attended the Georgia Institute of Technology.Insights from Cleric: Building an Autonomous AI SRE // MLOps Podcast #289 with Willem Pienaar, CTO & Co-Founder of Cleric.// AbstractIn this MLOps Community Podcast episode, Willem Pienaar, CTO of Cleric, breaks down how they built an autonomous AI SRE that helps engineering teams diagnose production issues. We explore how Cleric builds knowledge graphs for system understanding, and uses existing tools/systems during investigations. We also get into some gnarly challenges around memory, tool integration, and evaluation frameworks, and some lessons learned from deploying to engineering teams.// BioWillem Pienaar, CTO of Cleric, is a builder with a focus on LLM agents, MLOps, and open source tooling. He is the creator of Feast, an open source feature store, and contributed to the creation of both the feature store and MLOps categories.Before starting Cleric, Willem led the open-source engineering team at Tecton and established the ML platform team at Gojek, where he built high-scale ML systems for the Southeast Asian Decacorn.// MLOps Swag/Merchhttps://shop.mlops.community/// Related LinksWebsite: willem.co --------------- ✌️Connect With Us ✌️ -------------Join our slack community:https://go.mlops.community/slackFollow us on Twitter:@mlopscommunitySign up for the next meetup:https://go.mlops.community/registerCatch all episodes, blogs, newsletters, and more:https://mlops.community/Connect with Demetrios on LinkedIn:https://www.linkedin.com/in/dpbrinkm/Connect with Willem on LinkedIn:https://www.linkedin.com/in/willempienaar/]]></content:encoded></item><item><title>Python Insider: Python 3.14.0 alpha 5 is out</title><link>https://pythoninsider.blogspot.com/2025/02/python-3140-alpha-5-is-out.html</link><author></author><category>dev</category><category>python</category><pubDate>Tue, 11 Feb 2025 16:25:58 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[Here comes the antepenultimate alpha.This is an early developer preview of Python
3.14Python 3.14 is still in development. This release, 3.14.0a5, is the
fifth of seven planned alpha releases.Alpha releases are intended to make it easier to test the current
state of new features and bug fixes and to test the release process.During the alpha phase, features may be added up until the start of
the beta phase (2025-05-06) and, if necessary, may be modified or
deleted up until the release candidate phase (2025-07-22). Please keep
in mind that this is a preview release and its use is
 recommended for production environments.Many new features for Python 3.14 are still being planned and
written. Among the new major new features and changes so far:The next pre-release of Python 3.14 will be the penultimate alpha,
3.14.0a6, currently scheduled for 2025-03-14.2025-01-29 marked the start of a new lunar year, the Year of the
Snake 🐍 (and the Year of Python?).For centuries, π was often approximated as 3 in China. Some time
between the years 1 and 5 CE, astronomer, librarian, mathematician and
politician Liu Xin (劉歆) calculated π as 3.154.Around 130 CE, mathematician, astronomer, and geographer Zhang Heng
(張衡, 78–139) compared the celestial circle with the diameter of the
earth as 736:232 to get 3.1724. He also came up with a formula for the
ratio between a cube and inscribed sphere as 8:5, implying the ratio of
a square’s area to an inscribed circle is √8:√5. From this, he
calculated π as √10 (~3.162).Third century mathematician Liu Hui (刘徽) came up with an algorithm
for calculating π iteratively: calculate the area of a polygon inscribed
in a circle, then as the number of sides of the polygon is increased,
the area becomes closer to that of the circle, from which you can
approximate π.This algorithm is similar to the method used by Archimedes in the 3rd
century BCE and Ludolph van Ceulen in the 16th century CE (see 3.14.0a2
  release notes), but Archimedes only went up to a 96-sided polygon
(96-gon). Liu Hui went up to a 192-gon to approximate π as 157/50 (3.14)
and later a 3072-gon for 3.14159.Liu Hu wrote a commentary on the book The Nine Chapters on the
Mathematical Art which included his π approximations.In the fifth century, astronomer, inventor, mathematician,
politician, and writer Zu Chongzhi (祖沖之, 429–500) used Liu Hui’s
algorithm to inscribe a 12,288-gon to compute π between 3.1415926 and
3.1415927, correct to seven decimal places. This was more accurate than
Hellenistic calculations and wouldn’t be improved upon for 900
years.Thanks to all of the many volunteers who help make Python Development
and these releases possible! Please consider supporting our efforts by
volunteering yourself or through organisation contributions to the Python Software
Foundation.Regards from a remarkably snowless Helsinki,Your release team, Hugo van KemenadeSteve Dower]]></content:encoded></item><item><title>Dual-Arm HyQReal Puts Powerful Telepresence Anywhere</title><link>https://spectrum.ieee.org/telepresence-robot</link><author>Evan Ackerman</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjE1MDg3MC9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc2MzQyMjI5MH0.P7rZYSa6orpvLiwnLpf8wHNCw_oa4ckp2iPAj5ykgLg/image.jpg?width=600" length="" type=""/><pubDate>Tue, 11 Feb 2025 16:00:05 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[IIT’s hydraulic quadruped can carry a pair of massive arms]]></content:encoded></item><item><title>AMD NASes give us everything we ever wanted</title><link>https://www.youtube.com/watch?v=etayojgChDM</link><author>Jeff Geerling</author><category>tech</category><category>video</category><enclosure url="https://www.youtube.com/v/etayojgChDM?version=3" length="" type=""/><pubDate>Tue, 11 Feb 2025 15:00:53 +0000</pubDate><source url="https://www.youtube.com/channel/UCR-DXc1voovS8nhAvccRZhg">Jeff Goerling yt channel</source><content:encoded><![CDATA[Two new NASes go all-in on AMD. But in totally different directions.

The 45Drives HL4 and ASUSTOR Lockerstor 6 Gen 3 were both provided for this video, though neither company paid any money or had any control over what I say about them.

More information and other videos I mentioned in this video (as an Amazon Associate I earn for qualifying purchases):

  - 45Drives / 45Homelab HL4: https://store.45homelab.com/configure/hl4
  - ASUSTOR Lockerstor 6 Gen 3: https://amzn.to/4huZNAn
  - Kioxia XG8 NVMe SSDs: https://amzn.to/42RpI0K
  - Seagate EXOS 20TB HDDs: https://amzn.to/40SifvV
  - RaidOwl's video on the Lockerstor and ADM: https://www.youtube.com/watch?v=VgmDEd_Ny-4
  - Hardware Haven's video on TrueNAS on the Lockerstor: https://www.youtube.com/watch?v=OTWiQs4TLjs
  - CraftComputing's video on the 45Homelab HL8: https://www.youtube.com/watch?v=IitwrXJuKzw
  - Lawrence System's video on 45Drive's Houston UI: https://www.youtube.com/watch?v=07uTKOB1z7E

Support me on Patreon: https://www.patreon.com/geerlingguy
Sponsor me on GitHub: https://github.com/sponsors/geerlingguy
Merch: https://www.redshirtjeff.com
2nd Channel: https://www.youtube.com/@GeerlingEngineering
3rd Channel: https://www.youtube.com/@Level2Jeff

Contents:

00:00 - Two wildly different, expensive NASes
01:51 - Lockerstor 6 Gen 3 - teardown
04:38 - Rebuild and overview
07:12 - Plugging in HDDs
09:31 - AMD Ryzen Embedded + ECC RAM
10:27 - First boot and setup
12:14 - 45Homelab HL4 - teardown and overview
16:18 - The same, but different
17:43 - First boot and setup
18:37 - Networking nightmares
19:29 - Houston UI and a more Linux-y experience
20:53 - Network storage performance
22:38 - A lot to like (except maybe the price)]]></content:encoded></item><item><title>Wikipedia Prepares for &apos;Increase in Threats&apos; to US Editors From Musk and His Allies</title><link>https://www.404media.co/wikipedia-prepares-for-increase-in-threats-to-us-editors-from-musk-and-his-allies/</link><author>Jason Koebler</author><category>tech</category><enclosure url="https://www.404media.co/content/images/2025/02/CleanShot-2025-02-10-at-13.18.36@2x.png" length="" type=""/><pubDate>Tue, 11 Feb 2025 14:48:19 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[The Wikimedia Foundation is building new tools that it hopes will help Wikipedia editors stay anonymous in part to avoid harassment and legal threats as Elon Musk and the Heritage Foundation ramp up their attacks on people who edit Wikipedia. Some of the tactics have been pioneered by Wikimedia in countries with authoritarian governments and where editing Wikipedia is illegal or extremely dangerous. Last month,  obtained a document created by the Heritage Foundation called “Wikipedia Editor Targeting,” which set a goal to “identify and target Wikipedia editors abusing their position by analyzing text patterns, usernames, and technical data through data breach analysis, fingerprinting, HUMINT (human intelligence), and technical targeting.” The document discusses creating sock puppet accounts to “reveal patterns and provoke reactions,” discusses trying to track users’ geolocation, searching through hacked datasets for username reuse, and using Pimeyes, a facial recognition software, to learn the real identities of Wikipedia editors. Molly White of Citation Needed has an extensive rundown on Elon Musk’s crusade against Wikipedia, and both  and  have written about the right’s war on Wikipedia in recent days. In a series of calls and letters to the Wikimedia community over the last two weeks, Wikimedia executives have told editors that they are trying to figure out how to keep their users safe in an increasingly hostile political environment. “I’m keeping an eye on the rising noise of criticism from Elon Musk and others and I think that’s something we need to grapple with,” Wikimedia founder Jimmy Wales said in a meeting on January 30.“We’re seeing an increase in threats, both regulation and litigation across the world,” Wikimedia Foundation CEO Maryana Iskander told community members during the same January 30 meeting. “We’re all just trying to understand what is happening not only in the United States [but across the world], so the best we can do is monitor, check-in on staff, and try to understand what’s needed … that’s the most honest answer I can give you to an impossible set of questions we’re all grappling with on a daily basis.”Wikimedia lawyers told the community that the project is trying to change how editing Wikipedia for logged-out accounts works. Currently, if a user edits an article while not logged in, their IP address will show publicly, which can provide information to someone looking to file a defamation or libel lawsuit. Wikimedia is launching a “temporary accounts program” which will give editors who are not logged in a temporary username rather than showing an IP address. “It’s a way of ensuring that for logged-out users, their IP address isn’t visible to everyone asunder but rather available only to people who are really engaged in anti-vandalism,” Phil Bradley-Schmieg, a Wikimedia lawyer, said. Bradley-Schmieg also suggested that Wikimedia’s human rights team, which is focused on “helping users stay safe, particularly in countries where freedom of speech and expression is under attack on a regular basis,” may need to play a larger role across the entire project. Jacob Rogers, another Wikimedia lawyer, said during a separate meeting on January 30 that some Wikimedia projects in non-English languages have a feature where users are allowed to create and register a sock-puppet account (a dummy username, basically) to edit controversial articles and to register that account with administrators.“A number of the different language projects have the option to make legitimate sock puppet accounts if you’re going to work on something you know is going to be controversial, you can make a sock puppet and register it with admins on that project so it’s more obscure, kept separate from the rest of your life,” Rogers said. Both Rogers and Bradley-Schmieg said that Wikimedia has worked to limit the amount of data that the foundation has on any given user. IP addresses associated with edits are deleted or anonymized after 90 days, for example.“The foundation has very little data about most users, so if somebody is stepping up their harassment and coming to the foundation, we generally don’t really know anything about users in most cases and there’s not a lot they can get from us,” Rogers said. In the first six months of 2024, the last period for which data is available, Wikimedia received 26 formal requests for information on users; it provided info in two cases. Six of those requests came from the United States, the most of any jurisdiction.Wikimedia has also created a legal defense program that will in some cases fund the defense of Wikipedia editors who are attacked through the legal system as long as that editor or staffer was contributing to a Wikimedia project in good faith, Rogers said. Wikimedia has recently fought cases in both India and Germany.While Musk’s and the Heritage Foundation’s attacks on Wikipedia have escalated in recent days, these general trends are not new, and they were outlined as a threat in the foundation’s 2024 annual plan, which states the following: “Human rights threats are growing. Physical and legal threats against volunteers and staff who fight disinformation continue to grow. Accusations of bias and inaction by those whose preferred narratives do not prevail on Wikipedia may be encouraged and amplified by purveyors of disinformation,” the foundation wrote in an update to users. “Law is weaponized in important jurisdictions. Bad-faith lawsuits, by people who don’t like the verified information appearing on , are succeeding in some European countries. Some incumbent leaders are abusing their powers to silence and intimidate political opponents.”Iskander said in the meeting that the foundation is going to consider the safety of Wikipedians for its in-person events, such as Wikimania, an annual conference and party.“We’re paying very close attention trying to understand what the impacts might be and ensure those might be considered in any decisions we make. I will remind folks part of our processes in any event related to community gatherings is to do a risk assessment for community conferences for Wikimania,” she said. “It’s an imperfect and imprecise exercise but there’s a real intentionality around being thoughtful about the places that we’re selecting to ask people to gather and manage within our control.”It is not clear whether any of these steps will be sufficient, or whether any of them are going to make Wikipedia more resilient to right-wing attacks. What makes Wikipedia so strong is the fact that it has a distributed global base of dedicated volunteer editors, and a governance structure that is not very easy to infiltrate. Wikimedia’s decentralized power base makes it resistant to but not invulnerable from takeover attempts.During one of the meetings, Rogers was asked if Wikimedia would consider moving its headquarters out of the United States because of the political situation here. Rogers said moving “would probably not do very much because the projects would remain accessible in the United States and many things would still be subject to US law even if the foundation moved its headquarters to a different jurisdiction.”“I think a move would be extremely expensive and cost something in the tens to hundreds of millions of dollars,” he said. “I see that as one of the most significant, expensive, and extreme possible options. You would only do that if it was like, the only solution to a major problem where doing that would make sense.” The Wikimedia Foundation did not respond to a request for comment. The Heritage Foundation did not respond to a request for comment.]]></content:encoded></item><item><title>Rubidium Can Be More Than a Lithium Cast-Off</title><link>https://spectrum.ieee.org/rubidium</link><author>Elissa Welle</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjMyMTI2My9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc5MjI3MTA3OH0.Ryeo_Q5ykelatJkzIly879sUfQg0LtgR9rSWXhd5QV0/image.jpg?width=600" length="" type=""/><pubDate>Tue, 11 Feb 2025 14:00:04 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[New extraction techniques makes the element—essential in high-tech timekeeping—easier to mine]]></content:encoded></item><item><title>Real Python: Building a Python Command-Line To-Do App With Typer</title><link>https://realpython.com/courses/build-command-line-todo-app-typer/</link><author></author><category>dev</category><category>python</category><pubDate>Tue, 11 Feb 2025 14:00:00 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[Building an application to manage your  can be an interesting project when you’re learning a new programming language or trying to take your skills to the next level. In this video course, you’ll build a functional to-do application for the command line using Python and Typer, which is a relatively young library for creating powerful command-line interface (CLI) applications in almost no time.With a project like this, you’ll apply a wide set of core programming skills while building a real-world application with real features and requirements.In this video course, you’ll learn how to:Build a functional  with a  in PythonUse Typer to add , , and  to your to-do appTest your Python to-do application with Typer’s  and ]]></content:encoded></item><item><title>Preparing for AI</title><link>https://www.oreilly.com/radar/preparing-for-ai-2/</link><author>Mike Loukides</author><category>dev</category><category>ai</category><pubDate>Tue, 11 Feb 2025 13:15:13 +0000</pubDate><source url="https://www.oreilly.com/radar">Oreilly ML</source><content:encoded><![CDATA[When tools like GitHub Copilot first appeared, it was received wisdom that AI would make programming easier. It would be a boon to new programmers at the start of their careers, just learning a few new programming languages. Some of that is no doubt true: Large language models can answer questions, whip up a tutorial, turn descriptive comments into code, and even write short programs successfully. And large language models are getting better at the things they can’t yet do: understanding large codebases and writing code with fewer bugs. On the surface, it looks like things are getting easier for entry-level programmers.That may be true, but I—and an increasing number of others—have argued that AI broadens the gap between junior and senior developers. As we grow into AI, we’re growing beyond “this makes programming easier.” As we grow into AI, we’re finding that programming is less about writing clever prompts and more about managing context. Writing about ChatGPT’s memory feature, Simon Willison said, “Using LLMs effectively is entirely about controlling their context—thinking carefully about exactly what information is currently being handled by the model.” Forgive the anthropomorphism, but a conversation with a language model is just that: a conversation, where previous statements from both parties are part of the context. The context also includes the code you’re working on and any other documents or instructions (including sketches and diagrams) that the AI can access. In addition to the context that’s explicit in a chat session, a lot of context is implicit: assumptions, experiences, and other knowledge shared by the humans working on a project. That implicit context is a critical part of software development and also has to be made available to AI. Managing context is an important skill for any developer using AI, but it’s new, a skill junior developers have to acquire in addition to basic programming.Writing more specifically about programming, Steve Yegge makes it clear that chat-oriented programming (CHOP) isn’t the future; it’s the present. “You need to type fast, read fast, use tools well, and have the chops (ahem) to sling large quantities of text and context around manually.” Right now, we need better tools for doing this—and we will eventually have those tools. But they’re not here yet. Still, whether you’re a junior or senior developer, it’s a way of programming that you need to learn if you intend to be competitive. And context is key. Discussing the difference between GPT-4o and o1, Ben Hylak writes that, unlike 4o, “o1 will just take lazy questions at face value and doesn’t try to pull the context from you. Instead, you need to push as much context as you can into o1.” His point is that today’s most advanced models don’t really want prompts; they want product briefs, as thorough and complete as you can make them. AI can help software developers in many ways, but software developers still have to think through the problems they need to solve and determine how to solve them. Programming with AI requires teaching the AI what you want it to do. And describing how to solve a problem is a far more fundamental skill than being able to spit out Python or JavaScript at scale.To prepare for AI, we all need to realize that we’re still in charge; we still need to understand and solve the problems we face. Sure, there are other skills involved. AI writes buggy code? So do humans—and AI seems to be getting better at writing correct code. Bruce Schneier and Nathan Sanders argue that AI mistakes are different from human mistakes, if for no other reason than that they’re random rather than focused around a misunderstood concept. But regardless of the source or the reason, bugs need to be fixed, and debugging is a skill that takes years to learn. Debugging code that you didn’t write is even more difficult than debugging your own code. AI-generated bugs may not be a fundamentally bigger problem than human bugs, but for the time being humans will have to find them. (And managers will need to recognize that a job that devolves into bug-fixing, while essential, is likely to be demoralizing.) AI writes insecure code? Again, so do humans. Vulnerabilities are just another kind of bug: AI will get better at writing secure code over time, but we are still responsible for finding and fixing vulnerabilities.So yes, the industry is changing—perhaps faster than it’s changed at any time in history. It’s not just lone programmers, bashing away at the keyboards (if it ever was). It’s software developers working with AI at every stage of product development, and with each other. It’s often been said that software development is a team sport. Now there’s another player on the team, and it’s a player that may not follow the same rulebook.How do we prepare for the change coming our way? First, don’t ignore AI. Steve Yegge reports that he’s seen companies where the senior developers won’t touch AI (“overhyped new-fangled junk”), while the juniors are excited to move forward. He’s also seen companies where the juniors are afraid that AI will “take their jobs,” while the seniors are rapidly adopting it. We need to be clear: If you’re ignoring AI, you’re resigning yourself to failure. If you’re afraid that AI will take your job, learning to use it well is a much better strategy than rejecting it. AI won’t take our jobs, but it will change the way we work.Second, be realistic about what AI can do. Using AI well will make you more effective, but it’s not a shortcut. It does generate errors, both of the “this won’t compile” kind and the “results looks right, but there’s a subtle error in the output” kind. AI has become reasonably good at fixing the “doesn’t compile” bugs, but it’s not good at the subtle errors. Detecting and debugging subtle errors is hard; it’s important to remember Kernighan’s law: Software is twice as hard to debug as it is to write. So if you write code that is as clever as you can be, you’re not smart enough to debug it. How does that apply when you need to debug AI-generated code, generated by a system that has seen everything on GitHub, Stack Overflow, and more? Do you understand it well enough to debug it? If you’re responsible for delivering professional-quality code, you won’t succeed by using AI as a shortcut. AI doesn’t mean that you don’t need to know your tools—including the dark corners of your programming languages. You are still responsible for delivering working software.Third, train yourself to use AI effectively. O’Reilly author Andrew Stellmanrecommends several exercises for learning to use AI effectively. Here are two: Take a program you’ve written, paste it into your favorite AI chat, and ask the AI to generate comments. Then look at the comments: Are they correct? Where is the AI wrong? Where did it misconstrue the intent? Stellman’s point is that you wrote the code; you understand it. You’re not second-guessing the AI. You’re learning that it can make mistakes and seeing the kinds of mistakes that it can make. A good next step is asking an AI assistant to generate unit tests, either for existing code or some new code (which leads to test-driven development). Unit tests are a useful exercise because testing logic is usually simple; it’s easy to see if the generated code is incorrect. And describing the test—describing the function that you’re testing, its arguments, the return type, and the expected results—forces you to think carefully about what you’re designing.Learning how to describe a test in great detail is an important exercise because using generative AI isn’t about writing a quick prompt that gets it to spit out a function or a short program that’s likely to be correct. The hard part of computing has always been understanding exactly what we want to do. Whether it’s understanding users’ needs or understanding how to transform the data, that act of understanding is the heart of the software development process. And whatever else generative AI is capable of, one thing it can’t do is understand your problem. Using AI successfully requires describing your problem in detail, in a prompt that’s likely to be significantly longer than the code the AI generates. You can’t omit details, because the AI doesn’t know about the implicit assumptions we make all the time—including “I don’t really understand it, but I’m sure I can wing it when I get to that part of the program.” The more explicit you can be, the greater the probability of a correct result. Programming is the act of describing a task in unambiguous detail, regardless of whether the language is English or C++. The ability to understand a problem with all its ramifications, special cases, and potential pitfalls is part of what makes a senior software developer; it’s not something we expect of someone at the start of their career.We will still want AI-generated source code to be well-structured. Left to itself, generated code tends to accumulate into a mountain of technical debt: badly structured code that nobody really understands and can’t be maintained. I’ve seen arguments that AI code doesn’t need to be well-structured; humans don’t need to understand it, only AI systems that can parse mind-numbingly convoluted logic do. That might be true in some hypothetical future, but at least in the near-term future, we don’t have those systems. It’s overly optimistic at best to assume that AI assistants will be able to work effectively with tangled spaghetti code. I don’t think AI can understand a mess significantly better than a human. It is definitely optimistic to believe that such code can be modified, either to add new features or to fix bugs, whether a human or an AI is doing the modification. One thing we’ve learned in the 70 or so years that software development has been around: Code has a very long lifetime. If you write mission-critical software now, it will probably be in use long after you’ve retired. Future generations of software developers—and AI assistants—will need to fix bugs and add features. A classic problem with badly structured code is that its developers have backed themselves into corners that make modification impossible without triggering a cascade of new problems. So part of understanding what we want to do, and describing it to a computer, is telling it the kind of structure we want: telling it how to organize code into modules, classes, and libraries, telling it how to structure data. The result needs to be maintainable—and, at least right now, that’s something we do better than AI. I don’t mean that you shouldn’t ask AI how to structure your code, or even to do the structuring for you; but in the end, structure and organization are your responsibility. If you simply ask AI how to structure your code and then follow its advice without thinking, then you’ll have as much success as when you simply ask AI to write the code and commit it without testing.I stress understanding what we want to do because it’s been one of the weakest parts of the software development discipline. Understanding the problem looks in both directions: to the user, the customer, the person who wants you to build the software; and to the computer, the compiler, which will deal with whatever code you give it. We shouldn’t separate one from the other. We often say “garbage in, garbage out,” but frequently forget that “garbage in” includes badly thought-out problem descriptions as well as poor data or incorrect algorithms. What do we want the computer to do? I’ve seen many descriptions of what the future of programming might look like, but none of them assume that the AI will determine what we want it to do. What are the problems we need to solve? We need to understand them—thoroughly, in depth, in detail, and not in a single specification written when the project starts. That was one of the most important insights of the Agile movement: to value “individuals and interactions over processes and tools” and “customer collaboration over contract negotiation.” Agile was based on the recognition that you are unlikely to collect all the user’s requirements at the start of a project; instead, start building and use frequent demos as opportunities to collect more insight from the customer, building what they really want through frequent mid-course corrections. Being “agile” when AI is writing the code is a new challenge—but a necessary one. How will programmers manage those corrections when AI is writing the code? Through managing the context; through giving the AI enough information so that it can modify the code that needs changing while keeping the rest stable. Remember that iterations in an Agile process aren’t about fixing bugs; they’re about making sure the resulting software solves the users’ problem.Understanding what we want to build is especially important right now. We’re at the start of one of the biggest rethinkings of software development that we’ve ever had. We’re talking about building kinds of software that we’ve never seen before: intelligent agents that solve problems for their users. How will we build those agents? We’ll need to understand what customers want in detail—and not the “I want to order groceries from Peapod” detail but at a higher, more abstract level: “I want software that can negotiate for me; I want software that can find the best deal; I want software that maximizes the probability of success; I want software that can plan my retirement.” What kinds of specifications will we need to do that correctly? If software is executing actions on behalf of a customer, it needs to ensure that those actions are performed correctly. If finances are involved, errors are close to intolerable. If security or safety are concerned, errors are really intolerable—but in many cases, we don’t know how to specify those requirements yet.Which is not to say that we  know how to specify those requirements. We already know how to build some kinds of guardrails to keep AI on track. We already know how to build some evaluation suites that test AI’s reliability. But it is to say that all of these requirements will be part of the software developers’ job. And that, all things considered, the job of the software developer may be getting more difficult, not less.With all of this in mind, let’s return to the so-called “junior developer”: the recent graduate who knows a couple of programming languages (more or less) and has written some relatively short programs and completed some medium-length projects. They may have little experience working on larger teams; they probably have little experience collecting requirements; they are likely to have significant experience using coding assistants like GitHub Copilot or Cursor. They are likely to go down unproductive rabbit holes when trying to solve a problem rather than realize that they’ve hit a dead end and looking for another approach. How do they grow from a “junior” developer to a “senior”? Is asking an AI questions sufficient? Let’s also consider a related question: How does a “senior” become senior? Trisha Gee makes a very underappreciated point in “The Rift Between Juniors and Seniors”: Part of what makes a senior software developer senior is mentoring juniors. Mentoring solidifies the senior’s knowledge as much as it helps the junior take the next step. You don’t really know anything well until you can teach it. In turn, seniors need juniors who can be taught.Whether there’s a formal training program for junior developers or informal mentoring, we clearly need juniors precisely because we need seniors—and where will the next generation of seniors come from if not well-trained juniors? Forrest Brazeal makes the point:If we can’t make room in our taxonomy of technical work for someone who still needs human training, we are just doing the same old thing IT has been doing for decades: borrowing from our future to cash in on the current hype.…And every experienced generalist starts out inexperienced. They start as a junior developer. That’s not where software engineering dies: it’s where it’s born.Yes—that’s where software engineering is born: not in learning programming languages or memorizing APIs but in practice, experience, and mentorship. We need to be reminded that software development isn’t just about generating code. The importance of writing code may diminish in the future, but as Stanford computer science professor Mehran Sahami said in a conversation with Andrew Ng, “We taught you Python, but really we were trying to get you to understand how to take problems and think about them systematically.” Good programmers will have honed their skills in understanding the problem and goals, structuring the solution, providing necessary context to others, and coaching others to build their own skills in these areas. AI doesn’t change these essential skills—and no software developer, senior or junior, will go wrong by investing time in learning them. As Tim O’Reilly writes, AI may be the end of programming as we know it, but it is not the end of programming. It’s a new beginning. We’ll be designing and building new kinds of software that we couldn’t have imagined a few years ago. Software development is about understanding and solving problems, regardless of whether the programming language is Python or English, regardless of whether or not an AI assistant is used. It will be the software developers’ job to determine what we want, what we really need, and to describe that to our machines of loving grace.From personal communication; we will soon publish an article by Andrew Stellman that goes into more detail.Thanks to Nat Torkington, Andrew Stellman, Kevlin Henney, Tim O’Reilly, and Mary Treseler for comments, discussion, and even a few paragraphs. ]]></content:encoded></item><item><title>10 Little-Known Python Libraries That Will Make You Feel Like a Data Wizard</title><link>https://www.kdnuggets.com/10-little-known-python-libraries-data-wizard</link><author>Josep Ferrer</author><category>dev</category><category>ai</category><enclosure url="https://www.kdnuggets.com/wp-content/uploads/Ferrer_10_little_known_libraries1.png" length="" type=""/><pubDate>Tue, 11 Feb 2025 13:00:13 +0000</pubDate><source url="https://www.kdnuggets.com/">KDNuggets blog</source><content:encoded><![CDATA[In this article, I will introduce you to 10 little-known Python libraries every data scientist should know.]]></content:encoded></item><item><title>From XP to TCR &amp; Limbo • Kent Beck &amp; Daniel Terhorst-North • GOTO 2025</title><link>https://www.youtube.com/watch?v=48g7CRlMUD8</link><author>GOTO Conferences</author><category>video</category><category>learning</category><enclosure url="https://www.youtube.com/v/48g7CRlMUD8?version=3" length="" type=""/><pubDate>Tue, 11 Feb 2025 13:00:05 +0000</pubDate><source url="https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA">GOTO Conferences yt</source><content:encoded><![CDATA[This interview was recorded for GOTO Unscripted. #GOTOcon #GOTOunscripted
https://gotopia.tech

Read the full transcription of this interview here:
https://gotopia.tech/articles/355

Kent Beck - Software Engineer & Creator of Extreme Programming @KentLBeck 
Daniel Terhorst-North - Originator of Behavior Driven Development (BDD) & Principal at Dan North & Associates @daniel-terhorst-north 

RESOURCES
Kent
https://bsky.app/profile/kentbeck.bsky.social
https://www.kentbeck.com
https://github.com/KentBeck
https://twitter.com/KentBeck
https://www.linkedin.com/in/kentbeck

Daniel
https://bsky.app/profile/tastapod.com
https://twitter.com/tastapod
https://linkedin.com/in/danielterhorstnorth
https://github.com/tastapod
https://mastodon.social/@tastapod
http://dannorth.net/blog

Links
https://youtu.be/tgaKAF_eiOg
https://youtu.be/k9lwn-RqEsE
https://youtu.be/Saaz6D1azlU
https://youtu.be/lOcXdXRxFgA
https://youtu.be/klqo1oPdbpM
https://youtu.be/ShAzlhS_TCg
https://youtu.be/86-Dy5U2p5Y
https://youtu.be/yuEbZYKgZas
https://youtu.be/-4Ybn0Cz2oU
https://youtu.be/XShcmCBK93E

DESCRIPTION
Kent Beck and Daniel Terhorst-North reflect on the evolution of Extreme Programming (XP) and its lasting impact on agile software development. They explore the importance of short feedback loops, iterative learning, and adaptability in different phases of product development, as outlined in Beck’s 3X model (Exploration, Expansion, Extraction).

Kent introduces radical techniques like Test && Commit || Revert (TCR) and Limbo, which challenge traditional coding and collaboration practices by emphasizing tiny, safe iterations. The conversation ties in psychological safety, a key factor in high-performing teams, as outlined by Amy C. Edmondson.

Kent envisions a future where software development scales in real-time, pushing teams to embrace faster experimentation, responsibility, and continuous learning in a rapidly evolving tech landscape. [...]

TIMECODES
00:00 Intro
00:53 Extreme Programming (XP)
03:09 The power of feedback & Continuous Delivery
07:44 Evolution of XP: From practices to people
11:39 3X Model: Managing risk through software evolution
25:02 TCR, Limbo & the future of software development
33:28 The importance of psychological safety for high-performing teams
39:32 Outro

RECOMMENDED BOOKS
Kent Beck • Tidy First? • https://amzn.to/4gscjjK
Kent Beck & Cynthia Andres • Extreme Programming Explained • https://amzn.to/3sBASDG
Amy C. Edmondson • The Fearless Organization • https://amzn.to/3Q5QPxu
Amy C. Edmondson • Right Kind of Wrong • https://amzn.to/3CRbiTD
Jez Humble & David Farley • Continuous Delivery • https://amzn.to/452ZRky

https://bsky.app/profile/gotocon.com
https://twitter.com/GOTOcon
https://www.linkedin.com/company/goto-
https://www.instagram.com/goto_con
https://www.facebook.com/GOTOConferences
#XP #EmpiricalDesign #ExtremeProgramming #Explore #Expand #Extract #3X #TDD #TCR #Limbo #PsychologicalSafety #Programming #SoftwareEngineering #KentBeck #DanNorth #DanielTerhorstNorth

CHANNEL MEMBERSHIP BONUS
Join this channel to get early access to videos & other perks:
https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join

Looking for a unique learning experience?
Attend the next GOTO conference near you! Get your ticket at https://gotopia.tech
Sign up for updates and specials at https://gotopia.tech/newsletter

SUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.
https://www.youtube.com/user/GotoConferences/?sub_confirmation=1]]></content:encoded></item><item><title>Rivian Flexes Software Power: What VW Gets for $5.7B</title><link>https://spectrum.ieee.org/rivian-volkswagen-software-ev</link><author>Lawrence Ulrich</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjI2NDU4My9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc5OTA4MTY4OX0.wWq6j5o1EfjSUl0Y2ssr6wcIxkPln54qyXv3_YmvpXM/image.jpg?width=600" length="" type=""/><pubDate>Tue, 11 Feb 2025 13:00:05 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[Struggling to crack the code on EVs, VW bets big on Rivian]]></content:encoded></item><item><title>Introducing the CrossValidationReport</title><link>https://www.youtube.com/watch?v=R6dRAE83Y2c</link><author>probabl</author><category>dev</category><category>ai</category><category>video</category><category>learning</category><enclosure url="https://www.youtube.com/v/R6dRAE83Y2c?version=3" length="" type=""/><pubDate>Tue, 11 Feb 2025 12:45:02 +0000</pubDate><source url="https://www.youtube.com/channel/UCIat2Cdg661wF5DQDWTQAmg">Probabl</source><content:encoded><![CDATA[Skore version 0.6 introduces the `CrossValidationReport` that provides you with an `EstimatorReport` for each fold of your cross-validation, enabling you to inspect your estimator on each fold.

------
Links:

skore v0.6 documentation:
https://skore.probabl.ai/0.6/index.html

skore GitHub repository:
https://github.com/probabl-ai/skore

Website: https://probabl.ai/
LinkedIn: https://www.linkedin.com/company/probabl
Twitter: https://x.com/probabl_ai
Bluesky: https://bsky.app/profile/probabl.bsky.social
Discord: https://discord.probabl.ai

We also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:
https://rss.com/podcasts/sample-space/

#probabl]]></content:encoded></item><item><title>Trusted Execution Environments</title><link>https://www.schneier.com/blog/archives/2025/02/trusted-encryption-environments.html</link><author>Bruce Schneier</author><category>infosec</category><category>blog</category><pubDate>Tue, 11 Feb 2025 12:08:36 +0000</pubDate><source url="https://www.schneier.com/">Schneider on Security</source><content:encoded><![CDATA[Really good—and detailed—survey of Trusted Execution Environments (TEEs.)]]></content:encoded></item><item><title>Kushal Das: Using openpgp-card-tool-git with git</title><link>https://kushaldas.in/posts/using-openpgp-card-tool-git-with-git.html</link><author></author><category>dev</category><category>python</category><pubDate>Tue, 11 Feb 2025 11:12:40 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[One of the power of Unix systems comes from the various small tools and how
they work together. One such new tool I am using for some time is for  &  using OpenPGP and my Yubikey for the actual signing
operation via
openpgp-card-tool-git. I
replaced the standard  for this usecase with the  command from this
project.Installation & configurationcargo install openpgp-card-tool-git
Then you will have to configuration your (in my case the global configuration) git configuration.git config --global gpg.program <path to oct-git>
I am assuming that you already had it configured before for signing, otherwise
you have to run the following two commands too.git config --global commit.gpgsign true
git config --global tag.gpgsign true
Before you start using it, you want to save the pin in your system keyring.Use the following command.That is it, now your  will sign the commits using  tool.In the next blog post I will show how to use the other tools from the 
author for various different OpenPGP oeprations.]]></content:encoded></item><item><title>StackGen’s New Migration Engine: A DevOps Game-Changer for Multi-Cloud Transitions</title><link>https://devops.com/stackgens-new-migration-engine-a-devops-game-changer-for-multi-cloud-transitions/</link><author>Tom Smith</author><category>devops</category><pubDate>Tue, 11 Feb 2025 10:17:03 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>LangChain and Agentic AI Engineering with Erick Friis</title><link>https://softwareengineeringdaily.com/2025/02/11/langchain-and-agentic-ai-engineering-with-erick-friis/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=langchain-and-agentic-ai-engineering-with-erick-friis</link><author>SEDaily</author><category>podcast</category><enclosure url="https://traffic.megaphone.fm/SED4262555283.mp3" length="" type=""/><pubDate>Tue, 11 Feb 2025 10:00:11 +0000</pubDate><source url="http://softwareengineeringdaily.com/category/all-episodes/exclusive-content/podcast/">Podcast - Software Engineering Daily</source><content:encoded><![CDATA[LangChain is a popular open-source framework to build applications that integrate LLMs with external data sources like APIs, databases, or custom knowledge bases. It’s commonly used for chatbots, question-answering systems, and workflow automation. Its flexibility and extensibility have made it something of a standard for creating sophisticated AI-driven software.Erick Friis is a Founding Engineer at LangChain and he leads their integrations and open source efforts. Erick joins the podcast to talk about what inspired the creation of LangChain, agentic flows vs. chained flows, emerging patterns of agentic AI design, and much more.]]></content:encoded></item><item><title>Rust vs. Go (Golang): Performance (Fastest Frameworks + PostgreSQL)</title><link>https://www.youtube.com/watch?v=31R8Ef9A0iw</link><author>Anton Putra</author><category>dev</category><category>video</category><enclosure url="https://www.youtube.com/v/31R8Ef9A0iw?version=3" length="" type=""/><pubDate>Tue, 11 Feb 2025 09:25:18 +0000</pubDate><source url="https://www.youtube.com/channel/UCeLvlbC754U6FyFQbKc0UnQ">Anton Putra</source><content:encoded><![CDATA[Go vs Rust Performance Comparison. Go (1.23.6) vs Rust (1.84.1).

🔴 To support my channel, I'd like to offer Mentorship/On-the-Job Support/Consulting (me@antonputra.com)

🍿 Benchmarks: https://youtube.com/playlist?list=PLiMWaCMwGJXmcDLvMQeORJ-j_jayKaLVn&si=p-UOaVM_6_SFx52H

👋 AWS is expensive - Infra Support Fund: https://buymeacoffee.com/antonputra

▬▬▬▬▬ Experience & Location 💼 ▬▬▬▬▬
►  I’m a Senior Software Engineer at Juniper Networks (13+ years of experience)
►  Located in San Francisco Bay Area, CA (US citizen)

▬▬▬▬▬▬ Connect with me 👋 ▬▬▬▬▬▬
►  LinkedIn: https://www.linkedin.com/in/anton-putra
►  Twitter/X: https://twitter.com/antonvputra
►  GitHub: https://github.com/antonputra
►  Email: me@antonputra.com

▬▬▬▬▬▬▬ Source Code 📚 ▬▬▬▬▬▬▬
► Original Source Code: https://github.com/antonputra/tutorials/tree/244/lessons/244

PR to improve Rust - https://github.com/antonputra/tutorials/pull/429
PR to improve Rust - https://github.com/antonputra/tutorials/pull/431
PR to improve Rust - https://github.com/antonputra/tutorials/pull/433

#rust #golang #devops]]></content:encoded></item><item><title>Fusing Security Into the Network Fabric: From Hybrid Mesh Firewalls to Universal ZTNA</title><link>https://blogs.cisco.com/security/fusing-security-into-the-network-fabric-from-hybrid-mesh-firewalls-to-universal-ztna/</link><author>Raj Chopra</author><category>infosec</category><pubDate>Tue, 11 Feb 2025 08:51:00 +0000</pubDate><source url="https://blogs.cisco.com/security">Cisco Security Blog</source><content:encoded><![CDATA[In the changing landscape of network security, the combination of Universal Zero Trust Network Access and Hybrid Mesh Firewalls offers a powerful defense.]]></content:encoded></item><item><title>Stateful vs. Stateless Architecture</title><link>https://blog.algomaster.io/p/stateful-vs-stateless-architecture</link><author>Ashish Pratap Singh</author><category>dev</category><category>learning</category><enclosure url="https://substack-post-media.s3.amazonaws.com/public/images/7e4801c3-e3aa-4ab6-8fe6-759af4a1f91a_1684x1196.png" length="" type=""/><pubDate>Tue, 11 Feb 2025 08:46:26 +0000</pubDate><source url="https://blog.algomaster.io/">Algomaster</source><content:encoded><![CDATA[When a client interacts with a server, there are two ways to handle it: The client includes all necessary data in each request, so the server doesn’t store any prior information. The server retains some data from previous requests, making future interactions dependent on past state.In software systems,  refers to any data that persists across requests, such as user sessions, shopping carts, or authentication details.The choice between stateless and stateful architecture can affect scalability, performance, complexity, and cost.In this article, we’ll break down both the approaches, their advantages and trade-offs, and when to use each—with real-world examples.If you’re finding this newsletter valuable and want to deepen your learning, consider becoming a .As a paid subscriber, you'll receive an exclusive deep-dive article every week, access to a structured100+topics and interview questions, and other .In a , the system remembers client or process data () across multiple requests.Once a client connects, the server holds on to certain details—like user preferences, shopping cart contents, or authentication sessions—so the client doesn’t need to resend everything with each request.Stateful systems typically store the state data in a database or in-memory storage. During online shopping, when you add items to your cart, the website remembers your selections. If you navigate away to browse more items and then return to your cart, your items are still there, waiting for you to check out.Common Patterns in Stateful ArchitectureIf you use  session storage (i.e., each app server keeps its own sessions locally), you can configure your load balancer for “sticky sessions.” This means: Once a client is assigned to , all subsequent requests from that client are routed to .: If Server A fails, the user’s session data is lost or the user is forced to re-log in. Sticky sessions are also less flexible when scaling because you can’t seamlessly redistribute user traffic to other servers.2. Centralized Session StoreA more robust approach is to store session data in a  or  store (e.g., Redis). : All servers can access and update session data for any user. Any server can handle any request, because the session data is not tied to a specific server’s memory.: You introduce network overhead and rely on an external storage. If the centralized storage fails, you lose session data unless you have a fallback strategy.Personalized Experiences: Stateful systems can deliver highly tailored interactions, as they remember user preferences and past actions. Users can seamlessly resume activities where they left off, even if they disconnect and reconnect. Certain operations can be faster because the server already possesses necessary data. Maintaining state for a large number of users can become resource-intensive and complex, as each server needs to keep track of specific sessions. Managing and synchronizing state across multiple servers (if needed) introduces additional challenges. If a server holding a user's state fails, their session data might be lost.E-commerce Shopping Carts – Stores cart contents and user preferences across multiple interactions, even if the user navigates away and returns.Video Streaming Services (Netflix, YouTube) – Remembers user watch progress, recommendations, and session data for a seamless experience.Messaging Apps (WhatsApp, Slack) – Maintains active user sessions and message history for real-time communication.In a  architecture, the server does  preserve client-specific data between individual requests.Each request is treated as , with no memory of previous interactions.Every request must include all necessary information for processing.Once the server responds, it discards any temporary data used for that request.: Most  follow a stateless design. For instance, when you request weather data from a public API, you must provide all required details (e.g., location) in each request. The server processes it, sends a response, and forgets the interaction.Common Patterns in Stateless Architecture1. Token-Based Authentication (JWT)A very popular way to implement statelessness is through tokens, particularly  (JSON Web Tokens):Client Authenticates Once: The user logs in using credentials (username/password) for the first time, and the server issues a signed .: The client includes JWT token in each request (e.g., Authorization: Bearer <token> header).: The server validates the token’s signature and any embedded claims (e.g., user ID, expiry time).: The server does  need to store session data; it just verifies the token on each request.Many APIs, including OAuth-based authentication systems, use JWTs to enable stateless, scalable authentication.Stateless architectures benefit from , ensuring that repeated requests produce the same result. This prevents inconsistencies due to network retries or client errors. A  request with the same payload  updates the user’s data but doesn’t create duplicates.Idempotent APIsensures consistency and reliability, especially in distributed systems where requests might be retried automatically. Stateless systems are inherently easier to scale horizontally. New servers can be added effortlessly, as they don't need to maintain any specific user sessions. Since servers don't track state, the architecture is generally simpler and easier to manage. The failure of a single server won't disrupt user sessions, as data isn't tied to specific servers.With no session data stored on the server, you free up memory that would otherwise be reserved for session management.Easier to Cache Responses: Since requests are self-contained, caching layers (like CDNs) can more easily store and serve responses. Stateless systems can't provide the same level of personalization or context awareness as stateful systems without additional effort (like using cookies or tokens).The client must keep track of the authentication token or relevant data. If it loses the token, it must re-authenticate. Every request needs to carry all the required information, potentially leading to larger payloads.Microservices Architecture: Each service handles requests independently, relying on external databases or caches instead of maintaining session data.Public APIs (REST, GraphQL): Clients send tokens with each request, eliminating the need for server-side sessions.Tokens are securely stored on the device and sent with every request to authenticate users.Stateless endpoints make caching easier since responses depend only on request parameters, not stored session data. A CDNcan cache and serve repeated requests, improving performance and reducing backend load.There's no one-size-fits-all answer when choosing between stateful and stateless architectures.The best choice depends on your application’s needs, scalability goals, and user experience expectations.When to Choose Stateful ArchitectureStateful systems are ideal when user context and continuity are critical. Consider a stateful approach if your application:Requires personalization (e.g., user preferences, session history)Needs real-time interactions (e.g., chat applications, multiplayer gaming)Manages multi-step workflows (e.g., online banking transactions, checkout processes)Must retain authentication sessions for security and convenience A shopping cart in an e-commerce app should persist, so users don’t have to re-add items after refreshing the page.When to Choose Stateless ArchitectureStateless systems work best when scalability, simplicity, and resilience are top priorities. Use a stateless approach if your application:Handles a high volume of requests and needs to scale efficientlyDoesn’t require storing client-specific data between requestsNeeds fast, distributed processing without server dependenciesMust ensure reliability and failover readiness A weather API doesn’t need to remember previous requests. Each query includes the location, and the response is processed independently.Hybrid Approaches: The Best of Both WorldsMany modern applications  stateful and stateless components for flexibility.This hybrid approach allows:Stateless APIs for core functionality, ensuring high scalabilityStateful sessions for personalization, improving user experienceExternal session stores (e.g., Redis) to manage state while keeping app servers stateless A video streaming platform (e.g., Netflix) uses a stateless backend for streaming but retains stateful user sessions to track watch history and recommendations.If you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.If you have any questions or suggestions, leave a comment.This post is public so feel free to share it. If you’re enjoying this newsletter and want to get even more value, consider becoming a .I hope you have a lovely day!]]></content:encoded></item><item><title>Gcore Radar report reveals 56% year-on-year increase in DDoS attacks</title><link>https://devops.com/gcore-radar-report-reveals-56-year-on-year-increase-in-ddos-attacks/</link><author>cybernewswire</author><category>devops</category><pubDate>Tue, 11 Feb 2025 07:01:39 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>DtSR Episode 640 - A Practitioner View of Security Automation</title><link></link><author></author><category>infosec</category><category>podcast</category><enclosure url="https://dts.podtrac.com/redirect.mp3/www.buzzsprout.com/2153215/episodes/16600392-dtsr-episode-640-a-practitioner-view-of-security-automation.mp3" length="" type=""/><pubDate>Tue, 11 Feb 2025 05:00:00 +0000</pubDate><source url="https://blogwh1t3rabbit.medium.com/">Down the Security Rabbit Hole Podcast</source></item><item><title>Django Weblog: DSF member of the month - Lily Foote</title><link>https://www.djangoproject.com/weblog/2025/feb/10/dsf-member-of-the-month-lily-foote/</link><author></author><category>dev</category><category>python</category><pubDate>Tue, 11 Feb 2025 04:51:31 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[For February 2025, we welcome Lily Foote (@lilyf) as our DSF member of the month! ⭐Lily Foote is a contributor to Django core for many years, especially on the ORM. She is currently a member of the Django 6.x Steering Council and she has been a DSF member since March 2021. 
You can learn more about Lily by visiting her GitHub profile.Let’s spend some time getting to know Lily better!Can you tell us a little about yourself (hobbies, education, etc)My name is Lily Foote and I’ve been contributing to Django for most of my career. I’ve also recently got into Rust and I’m excited about using Rust in Python projects. When I’m not programming, I love hiking, climbing and dancing (Ceilidh)! I also really enjoying playing board games and role playing games (e.g. Dungeons and Dragons).How did you start using Django?I’d taught myself Python in my final year at university by doing Project Euler problems and then decided I wanted to learn how to make a website. Django was the first Python web framework I looked at and it worked really well for me.What other framework do you know and if there is anything you would like to have in Django if you had magical powers?I’ve done a small amount with Flask and FastAPI. More than any new features, I think the thing that I’d most like to see is more long-term contributors to spread the work of keeping Django awesome.What projects are you working on now?The side project I’m most excited about is Django Rusty Templates, which is a re-implementation of Django’s templating language in Rust.Which Django libraries are your favorite (core or 3rd party)?What are the top three things in Django that you like?Django Conferences, the mentorship program Djangonaut Space and the whole community!You have been a mentor multiple times with GSoC and Djangonaut Space program, what is required according to you to be a good mentor?I think being willing to invest time is really important. Checking in with your mentees frequently and being an early reviewer of their work. I think this helps keep their motivation up and allows for small corrections early on.Any advice for future contributors?Start small and as you get more familiar with Django and the process of contributing you can take on bigger issues. Also be patient with reviewers – Django has high standards, but is mostly maintained by volunteers with limited time.Yes! It’s a huge honour! Since January, we’ve been meeting weekly and it feels like we’ve hardly scratched the surface of what we want to achieve. The biggest thing we’re trying to tackle is how to improve the contribution experience – especially evaluating new feature ideas – without draining everyone’s time and energy.You have a lot of knowledge in the Django ORM, how did you start to contribute to this part?I added the Greatest and Least expressions in Django 1.9, with the support of one of the core team at the time. After that, I kept showing up (especially at conference sprints) and finding a new thing to tackle.Is there anything else you’d like to say?Thank you for doing the interview, Lily!]]></content:encoded></item><item><title>ISC Stormcast For Tuesday, February 11th, 2025 https://isc.sans.edu/podcastdetail/9318, (Tue, Feb 11th)</title><link>https://isc.sans.edu/diary/rss/31672</link><author></author><category>infosec</category><pubDate>Tue, 11 Feb 2025 02:00:02 +0000</pubDate><source url="https://isc.sans.edu/">Sans Edu Diaries</source><content:encoded><![CDATA[
 
 (c) SANS Internet Storm Center. https://isc.sans.edu Creative Commons Attribution-Noncommercial 3.0 United States License.]]></content:encoded></item><item><title>Go 1.24 is released!</title><link>https://go.dev/blog/go1.24</link><author>Junyang Shao, on behalf of the Go team</author><category>dev</category><category>official</category><category>go</category><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><source url="http://blog.golang.org/feed.atom">Golang Blog</source><content:encoded><![CDATA[
      Junyang Shao, on behalf of the Go team
      11 February 2025
      Today the Go team is excited to release Go 1.24,
which you can get by visiting the download page.Go 1.24 comes with many improvements over Go 1.23. Here are some of the notable
changes; for the full list, refer to the release notes.Several performance improvements in the runtime have decreased CPU overhead
by 2–3% on average across a suite of representative benchmarks. These
improvements include a new builtin  implementation based on
Swiss Tables, more efficient
memory allocation of small objects, and a new runtime-internal mutex
implementation.The  command now provides a mechanism for tracking tool dependencies for a
module. Use  to add a  directive to the current module. Use
 to run the tools declared with the  directive.
Read more on the go command in the release notes.The new  analyzer in  subcommand reports common mistakes in
declarations of tests, fuzzers, benchmarks, and examples in test packages.
Read more on vet in the release notes.Standard library additionsImproved WebAssembly supportGo 1.24 adds a new  directive for Go programs to export
functions to the WebAssembly host, and supports building a Go program as a WASI
reactor/library.
Read more on WebAssembly in the release notes.Please read the Go 1.24 release notes for the complete and
detailed information. Don’t forget to watch for follow-up blog posts that
will go in more depth on some of the topics mentioned here!Thank you to everyone who contributed to this release by writing code and
documentation, reporting bugs, sharing feedback, and testing the release
candidates. Your efforts helped to ensure that Go 1.24 is as stable as possible.
As always, if you notice any problems, please file an issue.]]></content:encoded></item><item><title>Quansight Labs Blog: PEP 517 build system popularity</title><link>https://labs.quansight.org/blog/pep-517-build-system-popularity</link><author></author><category>dev</category><category>python</category><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[Analysis of PEP 517 build backends used in 8000 top PyPI packages]]></content:encoded></item><item><title>Seth Michael Larson: Building software for connection (#2: Consensus)</title><link>https://sethmlarson.dev/building-software-for-connection-consensus?utm_campaign=rss</link><author></author><category>dev</category><category>python</category><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[In the previous article we concluded that a persistent always-on internet
connection isn't required for software to elicit feelings of connection between humans.Building on this conclusion: let's explore how Animal Crossing software was able to intercommunicate without requiring
a centralized server and infrastructure and the trade-offs for these design decisions.Distributing digital goods without the internetAnimal Crossing has over 1,000 unique items that need to be collected
for a complete catalog, including furniture, wallpapers, clothing, parasols, and carpets.
Many of these items are quite rare or were only programmed to be accessible
through an official Nintendo-affiliated distribution such as a magazine or online contest.Beyond official distributions, it's clear Animal Crossings' designer, Katsuya Eguchi,
wanted players to  to complete their catalogs.
The game incentivized trading items between towns by assigning
one “native fruit” (Apple, Orange, Cherry, Peach, or Pear) and
randomly making a subset of items harder to find than others depending
on a hidden “item group” variable (either A, B, or C).Items could be exchanged between players when one player visits another town,
but this required physically bringing your memory card to another
players' GameCube. The GameCube might have come with a handle, but the 'cube wasn't exactly a . Sharing a physical space isn't something you can do with everyone or on a regular basis.So what did Katsuya Eguchi design for Animal Crossing? To allow for item distributions from magazines and contests and to make player-to-player item sharing easier Animal Crossing included a feature called “secret codes”.This feature worked by allowing players to exchange 28-character codes with Tom Nook for items. Players could also generate codes for their friends to “send” an item from their own game to a different town. Codes could be shared by writing them on a paper note, instant message, or text message.The forgotten durability of offline software
This Reddit comment thread from the GameCube subreddit was the initial inspiration for this entire series.
The post is about someone's niece who just started playing Animal Crossing for the first time.
The Redditor asked folks to send items to their nieces' town using the secret code system.
This ended up surprising many folks that this system 
 in a game that was over 23 years old!
For reference, Nintendo Wi-Fi Connection and Nintendo Network were only available for 8 and 13 years respectively.
Below are a handful of the comments from the thread:“For real does this still work lol?”It's hard not to take these comments as indicators that something is
 with internet-connected software today. What had to go wrong for a 
system continuing to work to ? Many consumers' 
experience with 
software products
today is that they become useless e-waste after some far-away service is 
discontinued a few years after purchase.My intuition from this is that software that requires centralized servers and infrastructure to function
will have shorter lifetimes than software which is offline or only
opportunistically uses online functionality.I don't think this is particularly insightful,
more dependencies always means less resilience. But if we're building software for human connection then the software
should optimally only be limited by the availability of humans to connect.What is centralization good for?Animal Crossings' secret code system is far from perfect. The system is easily abusable, as the same secret codes can be
reused over-and-over by the same user to duplicate items without ever expiring. The only limit was that 3 codes could be used per day.Not long after Animal Crossing's release
the secret code algorithm was reverse-engineered so secret codes 
for any item could be created for any town and recipient name as if they came from an official Nintendo distribution.
This was possible because the secret code system relied on "security through obscurity".Could  be the answer to preventing these abuses?The most interesting property that a centralized authority approach
provides is : forcing everyone to play by the same rules. By storing
the “single source-of-truth” a central authority is able to prevent abuses
like the ones mentioned above.For example, a centralized “secret code issuing server” could generate
new unique codes per-use and check each code's validity
against a database to prevent users from generating their
own illegitimate codes or codes being re-used multiple times.The problem with
centralized consensus is it tends to be  to cover the entire software state.
A centralized server can generate codes perfectly, but how can that same server
 that the items you're exchanging for codes were obtained legitimately? To know this
the server would also need to track item legitimacy, leading to software which requires
an internet connection to operate.This is optimal from a correctness perspective, but as was noted earlier,
I suspect that if such a server was a mandatory part of the secret code system
in Animal Crossing that the system would likely not be usable today.This seems like a trade-off, which future would you rather have?Redesigning Animal Crossing secret codesIf I were designing Animal Crossings' secret code system with modern hardware, what would it look like?
How can we keep the offline fall-back while providing consensus and being less
abusable, especially for official distributions.I would likely use a public-key cryptographic system for official distributions,
embedding a certificate that could be used to “verify” that specific secret codes
originated from the expected centralized entity. Codes that are accepted would be
recorded to prevent reusing the same code multiple times in the same town.
Using public-key cryptography prevents the
system from being reverse-engineered to distribute arbitrary items until the certificate
private key was cracked.For sharing items between players I would implement a system where each town
generated a public and private key and the public key was shared to other towns
whenever the software was able to, such as when a player visited the other town.
Players would only be able to send items to players that they have visited
(which for Animal Crossing required physical presence, more on this later!)Each sender could store a nonce value for
each potential recipient. Embedding that nonce into the secret code would allow
the recipients' software to verify that the specific code hadn't been used yet.
The nonce wouldn't have to be long to avoid simple reusing of codes.Both above systems would require much more data to be embedded into each “secret
code” compared to the 28-character codes from the GameCube. For this I would
use QR codes to embed over 2KB of data into a single QR code. Funnily enough,
Animal Crossing New Leaf and onwards use QR code technology for players to share design patterns.This design is still abusable if users can modify their software or hardware
but doesn't suffer from the trivial-to-exploit flaws of Animal Crossing's secret code system.Decentralized global consensus?What if we could have the best of both worlds: we want consensus
that is both  and . At least today, we are out of luck.Decentralized global consensus is technologically feasible, but the existing solutions
(mostly blockchains)
are expensive (both in energy and capital) and can't handle throughput on any sort of 
meaningful scale.There are many other decentralized consensus systems that 
are able to form “pockets” of useful peer-to-peer consensus using a fraction of
the resources, such as email, BitTorrent, ActivityPub, and Nostr.
These systems are only possible by adding  or by only guaranteeing .When is global consensus needed?Obviously global consensus is important for certain classes of software like 
financial, civics, and infrastructure, but I wonder how the necessity
of consensus in software changes for software with different risk
profiles.For software which has fewer risks associated with misuse is there as much
need for global consensus?
How can  be designed to reduce risk and require
less consensus to be effective? If global consensus and centralized 
servers become unnecessary, can we expect  to be usable 
on much longer timescales, essentially for as long as there are users?]]></content:encoded></item><item><title>Brave Now Lets You Inject Custom JavaScript To Tweak Websites</title><link>https://tech.slashdot.org/story/25/02/10/2348258/brave-now-lets-you-inject-custom-javascript-to-tweak-websites?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>BeauHD</author><category>dev</category><category>slashdot</category><pubDate>Mon, 10 Feb 2025 23:50:00 +0000</pubDate><source url="https://developers.slashdot.org/">Slashdot - Dev</source><content:encoded><![CDATA[Brave Browser version 1.75 introduces "custom scriptlets," a new feature that allows advanced users to inject their own JavaScript into websites for enhanced customization, privacy, and usability. The feature is similar to the TamperMonkey and GreaseMonkey browser extensions, notes BleepingComputer. From the report: "Starting with desktop version 1.75, advanced Brave users will be able to write and inject their own scriptlets into a page, allowing for better control over their browsing experience," explained Brave in the announcement. Brave says that the feature was initially created to debug the browser's adblock feature but felt it was too valuable not to share with users. Brave's custom scriptlets feature can be used to modify webpages for a wide variety of privacy, security, and usability purposes.
 
For privacy-related changes, users write scripts that block JavaScript-based trackers, randomize fingerprinting APIs, and substitute Google Analytics scripts with a dummy version. In terms of customization and accessibility, the scriptlets could be used for hiding sidebars, pop-ups, floating ads, or annoying widgets, force dark mode even on sites that don't support it, expand content areas, force infinite scrolling, adjust text colors and font size, and auto-expand hidden content.
 
For performance and usability, the scriptlets can block video autoplay, lazy-load images, auto-fill forms with predefined data, enable custom keyboard shortcuts, bypass right-click restrictions, and automatically click confirmation dialogs. The possible actions achievable by injected JavaScript snippets are virtually endless. However, caution is advised, as running untrusted custom scriptlets may cause issues or even introduce some risk.]]></content:encoded></item><item><title>I ♥ Free Software Day 2025: Let&apos;s celebrate the people who make and maintain free software</title><link>http://www.fsf.org/blogs/community/i-love-free-software-2025</link><author></author><category>linux</category><pubDate>Mon, 10 Feb 2025 22:10:00 +0000</pubDate><source url="http://www.fsf.org/blogs/recent-blog-posts">Free Software Foundation</source><content:encoded><![CDATA[Let's celebrate the people behind free software and tell them how much we appreciate their work! ]]></content:encoded></item><item><title>Tech is supposed to make our lives easier (News)</title><link>https://changelog.com/news/131</link><author></author><category>podcast</category><enclosure url="https://op3.dev/e/https://cdn.changelog.com/uploads/news/131/changelog-news-131.mp3" length="" type=""/><pubDate>Mon, 10 Feb 2025 21:45:00 +0000</pubDate><source url="https://changelog.com/podcast">Podcast - Changelog</source><content:encoded><![CDATA[Bill Maher excoriates the software industry for making our lives more difficult, two professors from the University of Washington put together a curriculum to help us manage life in the ChatGPT world, Daniel Delaney thinks deeply on chat as a dev tool UI, Benedict Evans explores our assumptions that computers be ‘correct’ & the Thoughtbot team writes up six cases when not to refactor.Changelog++ members support our work, get closer to the metal, and make the ads disappear. Join today!Augment Code – Developer AI that uses deep understanding of your large codebase and how you build software to deliver personalized code suggestions and insights. Augment provides relevant, contextualized code right in your IDE or Slack. It transforms scattered knowledge into code or answers, eliminating time spent searching docs or interrupting teammates.
]]></content:encoded></item><item><title>OpenAI’s secret weapon against Nvidia dependence takes shape</title><link>https://arstechnica.com/ai/2025/02/openais-secret-weapon-against-nvidia-dependence-takes-shape/</link><author>Benj Edwards</author><category>tech</category><enclosure url="https://cdn.arstechnica.net/wp-content/uploads/2025/02/ai_chip_illustration-1152x648.jpg" length="" type=""/><pubDate>Mon, 10 Feb 2025 21:00:33 +0000</pubDate><source url="https://arstechnica.com/">Biz &amp; IT – Ars Technica</source><content:encoded><![CDATA[OpenAI is entering the final stages of designing its long-rumored AI processor with the aim of decreasing the company's dependence on Nvidia hardware, according to a Reuters report released Monday. The ChatGPT creator plans to send its chip designs to Taiwan Semiconductor Manufacturing Co. (TSMC) for fabrication within the next few months, but the chip has not yet been formally announced.The OpenAI chip's full capabilities, technical details, and exact timeline are still unknown, but the company reportedly intends to iterate on the design and improve it over time, giving it leverage in negotiations with chip suppliers—and potentially granting the company future independence with a chip design it controls outright.In the past, we've seen other tech companies, such as Microsoft, Amazon, Google, and Meta, create their own AI acceleration chips for reasons that range from cost reduction to relieving shortages of AI chips supplied by Nvidia, which enjoys a near-market monopoly on high-powered GPUs (such as the Blackwell series) for data center use.]]></content:encoded></item><item><title>Transforming credit decisions using generative AI with Rich Data Co and AWS</title><link>https://aws.amazon.com/blogs/machine-learning/transforming-credit-decisions-using-generative-ai-with-rich-data-co-and-aws/</link><author>Daniel Wirjo</author><category>dev</category><category>ai</category><pubDate>Mon, 10 Feb 2025 20:05:34 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[This post is co-written with Gordon Campbell, Charles Guan, and Hendra Suryanto from RDC. The mission of Rich Data Co (RDC) is to broaden access to sustainable credit globally. Its software-as-a-service (SaaS) solution empowers leading banks and lenders with deep customer insights and AI-driven decision-making capabilities.Making credit decisions using AI can be challenging, requiring data science and portfolio teams to synthesize complex subject matter information and collaborate productively. To solve this challenge, RDC used generative AI, enabling teams to use its solution more effectively: – Designed for data science teams, this agent assists teams in developing, building, and deploying AI models within a regulated environment. It aims to boost team efficiency by answering complex technical queries across the machine learning operations (MLOps) lifecycle, drawing from a comprehensive knowledge base that includes environment documentation, AI and data science expertise, and Python code generation. – Designed for portfolio managers and analysts, this agent facilitates natural language inquiries about loan portfolios. It provides critical insights on performance, risk exposures, and credit policy alignment, enabling informed commercial decisions without requiring in-depth analysis skills. The assistant is adept at high-level questions (such as identifying high-risk segments or potential growth opportunities) and one-time queries, allowing the portfolio to be diversified.In this post, we discuss how RDC uses generative AI on Amazon Bedrock to build these assistants and accelerate its overall mission of democratizing access to sustainable credit.Solution overview: Building a multi-agent generative AI solutionWe began with a carefully crafted evaluation set of over 200 prompts, anticipating common user questions. Our initial approach combined prompt engineering and traditional Retrieval Augmented Generation (RAG). However, we encountered a challenge: accuracy fell below 90%, especially for more complex questions.To overcome the challenge, we adopted an agentic approach, breaking down the problem into specialized use cases. This strategy equipped us to align each task with the most suitable foundation model (FM) and tools. Our multi-agent framework is orchestrated using LangGraph, and it consisted of: – The orchestrator is responsible for routing user questions to the appropriate agent. In this example, we start with the data science or portfolio agent. However, we envision many more agents in the future. The orchestrator can also use user context, such as the user’s role, to determine routing to the appropriate agent. – The agent is designed for a specialized task. It’s equipped with the appropriate FM for the task and the necessary tools to perform actions and access knowledge. It can also handle multiturn conversations and orchestrate multiple calls to the FM to reach a solution. – Tools extend agent capabilities beyond the FM. They provide access to external data and APIs or enable specific actions and computation. To efficiently use the model’s context window, we construct a tool selector that retrieves only the relevant tools based on the information in the agent state. This helps simplify debugging in the case of errors, ultimately making the agent more effective and cost-efficient.This approach gives us the right tool for the right job. It enhances our ability to handle complex queries efficiently and accurately while providing flexibility for future improvements and agents.The following image is a high-level architecture diagram of the solution.Data science agent: RAG and code generationTo boost productivity of data science teams, we focused on rapid comprehension of advanced knowledge, including industry-specific models from a curated knowledge base. Here, RDC provides an integrated development environment (IDE) for Python coding, catering to various team roles. One role is model validator, who rigorously assesses whether a model aligns with bank or lender policies. To support the assessment process, we designed an agent with two tools: – Amazon Bedrock Knowledge Bases powers our intelligent content retrieval through a streamlined RAG implementation. The service automatically converts text documents to their vector representation using Amazon Titan Text Embeddings and stores them in Amazon OpenSearch Serverless. Because the knowledge is vast, it performs semantic chunking, making sure that the knowledge is organized by topic and can fit within the FM’s context window. When users interact with the agent, Amazon Bedrock Knowledge Bases using OpenSearch Serverless provides fast, in-memory semantic search, enabling the agent to retrieve the most relevant chunks of knowledge for relevant and contextual responses to users. – With code generation, we selected Anthropic’s Claude model on Amazon Bedrock due to its inherent ability to understand and generate code. This tool is grounded to answer queries related to data science and can generate Python code for quick implementation. It’s also adept at troubleshooting coding errors.Portfolio agent: Text-to-SQL and self-correctionTo boost the productivity of credit portfolio teams, we focused on two key areas. For portfolio managers, we prioritized high-level commercial insights. For analysts, we enabled deep-dive data exploration. This approach empowered both roles with rapid understanding and actionable insights, streamlining decision-making processes across teams.Our solution required natural language understanding of structured portfolio data stored in Amazon Aurora. This led us to base our solution on a text-to-SQL model to efficiently bridge the gap between natural language and SQL.To reduce errors and tackle complex queries beyond the model’s capabilities, we developed three tools using Anthropic’s Claude model on Amazon Bedrock for self-correction: – Verifies and corrects SQL queries, addressing common issues such as data type mismatches or incorrect function usage – Validates query results, providing relevance and prompting retries or user clarification when needed – Engages users for additional information when queries are too broad or lack detail, guiding the interaction based on database information and user inputThese tools operate in an agentic system, enabling accurate database interactions and improved query results through iterative refinement and user engagement.To improve accuracy, we tested model fine-tuning, training the model on common queries and context (such as database schemas and their definitions). This approach reduces inference costs and improves response times compared to prompting at each call. Using Amazon SageMaker JumpStart, we fine-tuned Meta’s Llama model by providing a set of anticipated prompts, intended answers, and associated context. Amazon SageMaker Jumpstart offers a cost-effective alternative to third-party models, providing a viable pathway for future applications. However, we didn’t end up deploying the fine-tuned model because we experimentally observed that prompting with Anthropic’s Claude model provided better generalization, especially for complex questions. To reduce operational overhead, we will also evaluate structured data retrieval on Amazon Bedrock Knowledge Bases.Conclusion and next steps with RDCTo expedite development, RDC collaborated with AWS Startups and the AWS Generative AI Innovation Center. Through an iterative approach, RDC rapidly enhanced its generative AI capabilities, deploying the initial version to production in just 3 months. The solution successfully met the stringent security standards required in regulated banking environments, providing both innovation and compliance.“The integration of generative AI into our solution marks a pivotal moment in our mission to revolutionize credit decision-making. By empowering both data scientists and portfolio managers with AI assistants, we’re not just improving efficiency—we’re transforming how financial institutions approach lending.”–Gordon Campbell, Co-Founder & Chief Customer Officer at RDCRDC envisions generative AI playing a significant role in boosting the productivity of the banking and credit industry. By using this technology, RDC can provide key insights to customers, improve solution adoption, accelerate the model lifecycle, and reduce the customer support burden. Looking ahead, RDC plans to further refine and expand its AI capabilities, exploring new use cases and integrations as the industry evolves.For more information about how to work with RDC and AWS and to understand how we’re supporting banking customers around the world to use AI in credit decisions, contact your AWS Account Manager or visit Rich Data Co.For more information about generative AI on AWS, refer to the following resources: is a Solutions Architect at AWS, focused on FinTech and SaaS startups. As a former startup CTO, he enjoys collaborating with founders and engineering leaders to drive growth and innovation on AWS. Outside of work, Daniel enjoys taking walks with a coffee in hand, appreciating nature, and learning new ideas. leads a science team at the AWS Generative AI Innovation Center in the Asia Pacific regions. His team partners with AWS customers on generative AI projects, with the goal of accelerating customers’ adoption of generative AI. is a computer scientist at the Generative AI Innovation Center at Amazon Web Services (AWS) working on Generative AI and complex multi-agents systems. is the Chief Customer Officer and Co-Founder of RDC, where he leverages over 30 years in enterprise software to drive RDC’s leading AI Decisioning platform for business and commercial lenders. With a proven track record in product strategy and development across three global software firms, Gordon is committed to customer success, advocacy, and advancing financial inclusion through data and AI. is the Chief Technology Officer and Co-founder of RDC. With more than 20 years of experience in data analytics and enterprise applications, he has driven technological innovation across both the public and private sectors. At RDC, Charles leads research, development, and product advancement—collaborating with universities to leverage advanced analytics and AI. He is dedicated to promoting financial inclusion and delivering positive community impact worldwide. is the Chief Data Scientist at RDC with more than 20 years of experience in data science, big data, and business intelligence. Before joining RDC, he served as a Lead Data Scientist at KPMG, advising clients globally. At RDC, Hendra designs end-to-end analytics solutions within an Agile DevOps framework. He holds a PhD in Artificial Intelligence and has completed postdoctoral research in machine learning.]]></content:encoded></item><item><title>Harness Merges with Traceable to Provide Integrated DevSecOps Platform</title><link>https://devops.com/harness-merges-with-traceable-to-provide-integrated-devsecops-platform/</link><author>Mike Vizard</author><category>devops</category><pubDate>Mon, 10 Feb 2025 19:36:12 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Build agentic AI solutions with DeepSeek-R1, CrewAI, and Amazon SageMaker AI</title><link>https://aws.amazon.com/blogs/machine-learning/build-agentic-ai-solutions-with-deepseek-r1-crewai-and-amazon-sagemaker-ai/</link><author>Surya Kari</author><category>dev</category><category>ai</category><pubDate>Mon, 10 Feb 2025 19:33:10 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[AI agents are rapidly becoming the next frontier in enterprise transformation, with 82% of organizations planning adoption within the next 3 years. According to a Capgemini survey of 1,100 executives at large enterprises, 10% of organizations already use AI agents, and more than half plan to use them in the next year. The recent release of the DeepSeek-R1 models brings state-of-the-art reasoning capabilities to the open source community. Organizations can build agentic applications using these reasoning models to execute complex tasks with advanced decision-making capabilities, enhancing efficiency and adaptability.In this post, we dive into how organizations can use Amazon SageMaker AI, a fully managed service that allows you to build, train, and deploy ML models at scale, and can build AI agents using CrewAI, a popular agentic framework and open source models like DeepSeek-R1.Agentic design vs. traditional software designAgentic systems offer a fundamentally different approach compared to traditional software, particularly in their ability to handle complex, dynamic, and domain-specific challenges. Unlike traditional systems, which rely on rule-based automation and structured data, agentic systems, powered by large language models (LLMs), can operate autonomously, learn from their environment, and make nuanced, context-aware decisions. This is achieved through modular components including reasoning, memory, cognitive skills, and tools, which enable them to perform intricate tasks and adapt to changing scenarios.Traditional software platforms, though effective for routine tasks and horizontal scaling, often lack the domain-specific intelligence and flexibility that agentic systems provide. For example, in a manufacturing setting, traditional systems might track inventory but lack the ability to anticipate supply chain disruptions or optimize procurement using real-time market insights. In contrast, an agentic system can process live data such as inventory fluctuations, customer preferences, and environmental factors to proactively adjust strategies and reroute supply chains during disruptions.Enterprises should strategically consider deploying agentic systems in scenarios where adaptability and domain-specific expertise are critical. For instance, consider customer service. Traditional chatbots are limited to preprogrammed responses to expected customer queries, but AI agents can engage with customers using natural language, offer personalized assistance, and resolve queries more efficiently. AI agents can significantly improve productivity by automating repetitive tasks, such as generating reports, emails, and software code. The deployment of agentic systems should focus on well-defined processes with clear success metrics and where there is potential for greater flexibility and less brittleness in process management.Generative AI on SageMaker AISageMaker AI, a fully managed service, provides a comprehensive suite of tools designed to deliver high-performance, cost-efficient machine learning (ML) and generative AI solutions for diverse use cases. SageMaker AI empowers you to build, train, deploy, monitor, and govern ML and generative AI models through an extensive range of services, including notebooks, jobs, hosting, experiment tracking, a curated model hub, and MLOps features, all within a unified integrated development environment (IDE).SageMaker AI simplifies the process for generative AI model builders of all skill levels to work with foundation models (FMs):Amazon SageMaker Canvas enables data scientists to seamlessly use their own datasets alongside FMs to create applications and architectural patterns, such as chatbots and Retrieval Augmented Generation (RAG), in a low-code or no-code environment.Amazon SageMaker JumpStart offers a diverse selection of open and proprietary FMs from providers like Hugging Face, Meta, and Stability AI. You can deploy or fine-tune models through an intuitive UI or APIs, providing flexibility for all skill levels.With SageMaker AI, you can build generative AI-powered agentic workflows using a framework of your choice. Some of the key benefits of using SageMaker AI for fine-tuning and hosting LLMs or FMs include: – SageMaker AI offers access to SageMaker JumpStart, a curated model hub where models with open weights are made available for seamless deployment through a few clicks or API calls. Additionally, for Hugging Face Hub models, SageMaker AI provides pre-optimized containers built on popular open source hosting frameworks such as vLLM, NVIDIA Triton, and Hugging Face Text Generation Inference (TGI). You simply need to specify the model ID, and the model can be deployed quickly.Instance-based deterministic pricing – SageMaker AI hosted models are billed based on instance-hours rather than token usage. This pricing model enables you to more accurately predict and manage generative AI inference costs while scaling resources to accommodate incoming request loads.Deployments with quantization – SageMaker AI enables you to optimize models prior to deployment using advanced strategies such as quantized deployments (such as AWQ, GPTQ, float16, int8, or int4). This flexibility allows you to efficiently deploy large models, such as a 32-billion parameter model, onto smaller instance types like ml.g5.2xlarge with 24 GB of GPU memory, significantly reducing resource requirements while maintaining performance.Inference load balancing and optimized routing – SageMaker endpoints support load balancing and optimized routing with various strategies, providing users with enhanced flexibility and adaptability to accommodate diverse use cases effectively.SageMaker fine-tuning recipes – SageMaker offers ready-to-use recipes for quickly training and fine-tuning publicly available FMs such as Meta’s Llama 3, Mistral, and Mixtral. These recipes use Amazon SageMaker HyperPod (a SageMaker AI service that provides resilient, self-healing clusters optimized for large-scale ML workloads), enabling efficient and resilient training on a GPU cluster for scalable and robust performance.CrewAI provides a robust framework for developing multi-agent systems that integrate with AWS services, particularly SageMaker AI. CrewAI’s role-based agent architecture and comprehensive performance monitoring capabilities work in tandem with Amazon CloudWatch.The framework excels in workflow orchestration and maintains enterprise-grade security standards aligned with AWS best practices, making it an effective solution for organizations implementing sophisticated agent-based systems within their AWS infrastructure.In this post, we demonstrate how to use CrewAI to create a multi-agent research workflow. This workflow creates two agents: one that researches on a topic on the internet, and a writer agent takes this research and acts like an editor by formatting it in a readable format. Additionally, we guide you through deploying and integrating one or multiple LLMs into structured workflows, using tools for automated actions, and deploying these workflows on SageMaker AI for a production-ready deployment.The following diagram illustrates the solution architecture.To follow along with the code examples in the rest of this post, make sure the following prerequisites are met:Integrated development environment – This includes the following: 
  (Optional) Access to Amazon SageMaker Studio and the JupyterLab IDE – We will use a Python runtime environment to build agentic workflows and deploy LLMs. Having access to a JupyterLab IDE with Python 3.9, 3.10, or 3.11 runtimes is recommended. You can also set up Amazon SageMaker Studio for single users. For more details, see Use quick setup for Amazon SageMaker AI. Create a new SageMaker JupyterLab Space for a quick JupyterLab notebook for experimentation. To learn more, refer to Boost productivity on Amazon SageMaker Studio: Introducing JupyterLab Spaces and generative AI tools. – You can also follow along in your local IDE (such as PyCharm or VSCode), provided that Python runtimes have been configured for site to AWS VPC connectivity (to deploy models on SageMaker AI).Permission to deploy models – Make sure that your user execution role has the necessary permissions to deploy models to a SageMaker real-time endpoint for inference. For more information, refer to Deploy models for inference. – The code used in this post is available in the following GitHub repo.Simplified LLM hosting on SageMaker AIBefore orchestrating agentic workflows with CrewAI powered by an LLM, the first step is to host and query an LLM using SageMaker real-time inference endpoints. There are two primary methods to host LLMs on SageMaker AI:Deploy from SageMaker JumpStartDeploy from Hugging Face HubDeploy DeepSeek from SageMaker JumpStartSageMaker JumpStart offers access to a diverse array of state-of-the-art FMs for a wide range of tasks, including content writing, code generation, question answering, copywriting, summarization, classification, information retrieval, and more. It simplifies the onboarding and maintenance of publicly available FMs, allowing you to access, customize, and seamlessly integrate them into your ML workflows. Additionally, SageMaker JumpStart provides solution templates that configure infrastructure for common use cases, along with executable example notebooks to streamline ML development with SageMaker AI.The following screenshot shows an example of available models on SageMaker JumpStart.To get started, complete the following steps:Run the following command in a Jupyter cell or the SageMaker Studio terminal:List all available LLMs under the Hugging Face or Meta JumpStart hub. The following code is an example of how to do this programmatically using the SageMaker Python SDK:from sagemaker.jumpstart.filters import (And, Or)
from sagemaker.jumpstart.notebook_utils import list_jumpstart_models

# generate a conditional filter to only select LLMs from HF or Meta
filter_value = Or(
    And("task == llm", "framework == huggingface"), 
    "framework == meta", "framework == deekseek"
)

# Retrieve all available JumpStart models
all_models = list_jumpstart_models(filter=filter_value)For example, deploying the  model directly from SageMaker JumpStart requires only a few lines of code:from sagemaker.jumpstart.model import JumpStartModel

model_id = " deepseek-llm-r1" 
model_version = "*"

# instantiate a new JS meta model
model = JumpStartModel(
    model_id=model_id, 
    model_version=model_version
)

# deploy model on a 1 x p5e instance 
predictor = model.deploy(
    accept_eula=True, 
    initial_instance_count=1, 
    # endpoint_name="deepseek-r1-endpoint" # optional endpoint name
)We recommend deploying your SageMaker endpoints within a VPC and a private subnet with no egress, making sure that the models remain accessible only within your VPC for enhanced security.Deploy DeepSeek from Hugging Face HubAlternatively, you can deploy your preferred model directly from the Hugging Face Hub or the Hugging Face Open LLM Leaderboard to a SageMaker endpoint. Hugging Face LLMs can be hosted on SageMaker using a variety of supported frameworks, such as NVIDIA Triton, vLLM, and Hugging Face TGI. For a comprehensive list of supported deep learning container images, refer to the available Amazon SageMaker Deep Learning Containers. In this post, we use a DeepSeek-R1-Distill-Llama-70B SageMaker endpoint using the TGI container for agentic AI inference. We deploy the model from Hugging Face Hub using Amazon’s optimized TGI container, which provides enhanced performance for LLMs. This container is specifically optimized for text generation tasks and automatically selects the most performant parameters for the given hardware configuration. To deploy from Hugging Face Hub, refer to the  or the following code snippet:import json
import sagemaker
import boto3
from sagemaker.huggingface import HuggingFaceModel, get_huggingface_llm_image_uri
import os
from datetime import datetime

# Model configuration
hub = {'HF_MODEL_ID':'deepseek-ai/DeepSeek-R1-Distill-Llama-70B', #Llama-3.3-70B-Instruct
       'SM_NUM_GPUS': json.dumps(number_of_gpu),
       'HF_TOKEN': HUGGING_FACE_HUB_TOKEN,
       'SAGEMAKER_CONTAINER_LOG_LEVEL': '20',  # Set to INFO level
       'PYTORCH_CUDA_ALLOC_CONF': 'expandable_segments:True'  # configure CUDA memory to use expandable memory segments
}
# Create and deploy model
huggingface_model =   HuggingFaceModel(image_uri=get_huggingface_llm_image_uri("huggingface", 
version="2.3.1"),
env=hub,
role=role,sagemaker_session=sagemaker_session)
predictor = huggingface_model.deploy(
               initial_instance_count=1,
               instance_type="ml.p4d.24xlarge"
               endpoint_name=custom_endpoint_name,
               container_startup_health_check_timeout=900)A new DeepSeek-R1-Distill-Llama-70Bendpoint should be  in under 10 minutes. If you want to change the model from DeepSeek to another model from the hub, simply replace the following parameter or refer to the DeepSeek deploy example in the following GitHub repo. To learn more about deployment parameters that can be reconfigured inside TGI containers at runtime, refer to the following GitHub repo on TGI arguments....
"HF_MODEL_ID": "deepseek-ai/...", # replace with any HF hub models
# "HF_TOKEN": "hf_..." # add your token id for gated models
...For open-weight models deployed directly from hubs, we strongly recommend placing your SageMaker endpoints within a VPC and a private subnet with no egress, making sure that the models remain accessible only within your VPC for a secure deployment.Build a simple agent with CrewAICrewAI offers the ability to create multi-agent and very complex agentic orchestrations using LLMs from several LLM providers, including SageMaker AI and Amazon Bedrock. In the following steps, we create a simple blocks counting agent to serve as an example.Create a blocks counting agentThe following code sets up a simple blocks counter workflow using CrewAI with two main components:Agent creation (blocks_counter_agent) – The agent is configured with a specific role, goal, and capabilities. This agent is equipped with a tool called .Task definition (count_task) – This is a task that we want this agent to execute. The task includes a template for counting how many of each color of blocks are present, where  will be replaced with actual color of the block. The task is assigned to .from crewai import Agent, Task
from pydantic import BaseModel, Field

# 1. Configure agent
blocks_counter_agent = Agent(
    role="Blocks Inventory Manager",
    goal="Maintain accurate block counts",
    tools=[BlocksCounterTool],
    verbose=True
)

# 2. Create counting task
count_task = Task(
    description="Count {color} play blocks in storage",
    expected_output="Exact inventory count for specified color",
    agent=blocks_counter_agent
)As you can see in the preceding code, each agent begins with two essential components: an agent definition that establishes the agent’s core characteristics (including its role, goal, backstory, available tools, LLM model endpoint, and so on), and a task definition that specifies what the agent needs to accomplish, including the detailed description of work, expected outputs, and the tools it can use during execution.This structured approach makes sure that agents have both a clear identity and purpose (through the agent definition) and a well-defined scope of work (through the task definition), enabling them to operate effectively within their designated responsibilities.Tools are special functions that give AI agents the ability to perform specific actions, like searching the internet or analyzing data. Think of them as apps on a smartphone—each tool serves a specific purpose and extends what the agent can do. In our example,  helps the agent count the number of blocks organized by color.Tools are essential because they let agents do real-world tasks instead of just thinking about them. Without tools, agents would be like smart speakers that can only talk—they could process information but couldn’t take actual actions. By adding tools, we transform agents from simple chat programs into practical assistants that can accomplish real tasks.Out-of-the-box tools with CrewAICrew AI offers a range of tools out of the box for you to use along with your agents and tasks. The following table lists some of the available tools.For reading various file formatsFor web content extractionFor searching YouTube channelsFor searching PDF documentsFor Python code interpretationBuild custom tools with CrewAIYou can build custom tools in CrewAI in two ways: by subclassing BaseTool or using the @tool decorator. Let’s look at the following BaseTool subclassing option to create the BlocksCounterTool we used earlier:from crewai.tools import BaseTool

class BlocksCounterTool(BaseTool):
    name = "blocks_counter" 
    description = "Simple tool to count play blocks"

    def _run(self, color: str) -> str:
        return f"There are 10 {color} play blocks available"Build a multi-agent workflow with CrewAI, DeepSeek-R1, and SageMaker AIMulti-agent AI systems represent a powerful approach to complex problem-solving, where specialized AI agents work together under coordinated supervision. By combining CrewAI’s workflow orchestration capabilities with SageMaker AI based LLMs, developers can create sophisticated systems where multiple agents collaborate efficiently toward a specific goal. The code used in this post is available in the following GitHub repo.Let’s build a research agent and writer agent that work together to create a PDF about a topic. We will use a DeepSeek-R1 Distilled Llama 3.3 70B model as a SageMaker endpoint for the LLM inference.Define your own DeepSeek SageMaker LLM (using LLM base class) The following code integrates SageMaker hosted LLMs with CrewAI by creating a custom inference tool that formats prompts with system instructions for factual responses, uses Boto3, an AWS core library, to call SageMaker endpoints, and processes responses by separating reasoning (before </think>) from final answers. This enables CrewAI agents to use deployed models while maintaining structured output patterns.# Calls SageMaker endpoint for DeepSeek inference
def deepseek_llama_inference(prompt: dict, endpoint_name: str, region: str = "us-east-2") -> dict:
    try:
        # ... Response parsing Code...

    except Exception as e:
        raise RuntimeError(f"Error while calling SageMaker endpoint: {e}")

# CrewAI-compatible LLM implementation for DeepSeek models on SageMaker.
class DeepSeekSageMakerLLM(LLM):
    def __init__(self, endpoint: str):
        # <... Initialize LLM with SageMaker endpoint ...>

    def call(self, prompt: Union[List[Dict[str, str]], str], **kwargs) -> str:
        # <... Format and return the final response ...>Name the DeepSeek-R1 Distilled endpoint Set the endpoint name as defined earlier when you deployed DeepSeek from the Hugging Face Hub:deepseek_endpoint = "deepseek-r1-dist-v3-llama70b-2025-01-22"Create a DeepSeek inference tool Just like how we created the BlocksCounterTool earlier, let’s create a tool that uses the DeepSeek endpoint for our agents to use. We use the same BaseTool subclass here, but we hide it in the CustomTool class implementation in sage_tools.py in the tools folder. For more information, refer to the GitHub repo.from crewai import Crew, Agent, Task, Process 

# Create the Tool for LLaMA inference
deepseek_tool = CustomTool(
    name="deepseek_llama_3.3_70B",
    func=lambda inputs: deepseek_llama_inference(
        prompt=inputs,
        endpoint_name=deepseek_endpoint
    ),
    description="A tool to generate text using the DeepSeek LLaMA model deployed on SageMaker."
)
 Just like the simple blocks agent we defined earlier, we follow the same template here to define the research agent. The difference here is that we give more capabilities to this agent. We attach a SageMaker AI based DeepSeek-R1 model as an endpoint for the LLM.This helps the research agent think critically about information processing by combining the scalable infrastructure of SageMaker with DeepSeek-R1’s advanced reasoning capabilities.The agent uses the SageMaker hosted LLM to analyze patterns in research data, evaluate source credibility, and synthesize insights from multiple inputs. By using the deepseek_tool, the agent can dynamically adjust its research strategy based on intermediate findings, validate hypotheses through iterative questioning, and maintain context awareness across complex information it gathers.# Research Agent

research_agent = Agent(
    role="Research Bot",
    goal="Scan sources, extract relevant information, and compile a research summary.",
    backstory="An AI agent skilled in finding relevant information from a variety of sources.",
    tools=[deepseek_tool],
    allow_delegation=True,
    llm=DeepSeekSageMakerLLM(endpoint=deepseek_endpoint),
    verbose=False
)
 The writer agent is configured as a specialized content editor that takes research data and transforms it into polished content. This agent works as part of a workflow where it takes research from a research agent and acts like an editor by formatting the content into a readable format. The agent is used for writing and formatting, and unlike the research agent, it doesn’t delegate tasks to other agents.writer_agent = Agent(
    role="Writer Bot",
    goal="Receive research summaries and transform them into structured content.",
    backstory="A talented writer bot capable of producing high-quality, structured content based on research.",
    tools=[deepseek_tool],
    allow_delegation=False,
    llm=DeepSeekSageMakerLLM(endpoint=deepseek_endpoint),
    verbose=False
)Define tasks for the agents Tasks in CrewAI define specific operations that agents need to perform. In this example, we have two tasks: a research task that processes queries and gathers information, and a writing task that transforms research data into polished content.Each task includes a clear description of what needs to be done, the expected output format, and specifies which agent will perform the work. This structured approach makes sure that agents have well-defined responsibilities and clear deliverables.Together, these tasks create a workflow where one agent researches a topic on the internet, and another agent takes this research and formats it into readable content. The tasks are integrated with the DeepSeek tool for advanced language processing capabilities, enabling a production-ready deployment on SageMaker AI.research_task = Task(
    description=(
        "Your task is to conduct research based on the following query: {prompt}.\n"
    ),
    expected_output="A comprehensive research summary based on the provided query.",
    agent=research_agent,
    tools=[deepseek_tool]
)

writing_task = Task(
    description=(
              "Your task is to create structured content based on the research provided.\n""),
    expected_output="A well-structured article based on the research summary.",
    agent=research_agent,
    tools=[deepseek_tool]
)
 A crew in CrewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow. In this specific example, the sequential process makes sure tasks are executed one after the other, following a linear progression. There are other more complex orchestrations of agents working together, which we will discuss in future blog posts.This approach is ideal for projects requiring tasks to be completed in a specific order. The workflow creates two agents: a research agent and a writer agent. The research agent researches a topic on the internet, then the writer agent takes this research and acts like an editor by formatting it into a readable format.Let’s call the crew scribble_bots:# Define the Crew for Sequential Workflow # 

scribble_bots = Crew( agents=[research_agent, writer_agent], 
       tasks=[research_task, writing_task], 
       process=Process.sequential # Ensure tasks execute in sequence)
Use the crew to run a task We have our endpoint deployed, agents created, and crew defined. Now we’re ready to use the crew to get some work done. Let’s use the following prompt:result = scribble_bots.kickoff(inputs={"prompt": "What is DeepSeek?"})Our result is as follows:**DeepSeek: Pioneering AI Solutions for a Smarter Tomorrow**

In the rapidly evolving landscape of artificial intelligence, 
DeepSeek stands out as a beacon of innovation and practical application. 
As an AI company, DeepSeek is dedicated to advancing the field through cutting-edge research and real-world applications, 
making AI accessible and beneficial across various industries.

**Focus on AI Research and Development**

………………….. ………………….. ………………….. …………………..
Complete the following steps to clean up your resources:Delete your GPU DeekSeek-R1 endpoint:import boto3

# Create a low-level SageMaker service client.
sagemaker_client = boto3.client('sagemaker', region_name=<region>)

# Delete endpoint
sagemaker_client.delete_endpoint(EndpointName=endpoint_name)
If you’re using a SageMaker Studio JupyterLab notebook, shut down the JupyterLab notebook instance.In this post, we demonstrated how you can deploy an LLM such as DeepSeek-R1—or another FM of your choice—from popular model hubs like SageMaker JumpStart or Hugging Face Hub to SageMaker AI for real-time inference. We explored inference frameworks like Hugging Face TGI which helps streamline deployment while integrating built-in performance optimizations to minimize latency and maximize throughput. Additionally, we showcased how the SageMaker developer-friendly Python SDK simplifies endpoint orchestration, allowing seamless experimentation and scaling of LLM-powered applications.Beyond deployment, this post provided an in-depth exploration of agentic AI, guiding you through its conceptual foundations, practical design principles using CrewAI, and the seamless integration of state-of-the-art LLMs like DeepSeek-R1 as the intelligent backbone of an autonomous agentic workflow. We outlined a sequential CrewAI workflow design, illustrating how to equip LLM-powered agents with specialized tools that enable autonomous data retrieval, real-time processing, and interaction with complex external systems.Now, it’s your turn to experiment! Dive into our publicly available code on GitHub, and start building your own DeepSeek-R1-powered agentic AI system on SageMaker. Unlock the next frontier of AI-driven automation—seamlessly scalable, intelligent, and production-ready.Special thanks to Giuseppe Zappia, Poli Rao, and Siamak Nariman for their support with this blog post. is a Senior Generative AI Data Scientist at AWS, specializing in developing solutions leveraging state-of-the-art foundation models. He has extensive experience working with advanced language models including DeepSeek-R1, the LLama family, and Qwen, focusing on their fine-tuning and optimization for specific scientific applications. His expertise extends to implementing efficient training pipelines and deployment strategies using AWS SageMaker, enabling the scaling of foundation models from development to production. He collaborates with customers to design and implement generative AI solutions, helping them navigate model selection, fine-tuning approaches, and deployment strategies to achieve optimal performance for their specific use cases. is a Machine Learning Specialist at Amazon Web Services. He’s been in technology for over a decade, spanning various technologies and multiple roles. He is currently focused on combining his background in software engineering, DevOps, and machine learning to help customers deliver machine learning workflows at scale. In his spare time, he enjoys reading, research, hiking, biking, and trail running. is a Generative AI Specialist for third-party models at AWS, where he works with top-tier third-party foundation model (FM) providers to develop and execute joint Go-To-Market strategies, enabling customers to effectively train, deploy, and scale FMs to solve industry specific challenges. Karan holds a Bachelor of Science in Electrical and Instrumentation Engineering from Manipal University, a master’s in science in Electrical Engineering from Northwestern University and is currently an MBA Candidate at the Haas School of Business at University of California, Berkeley. is an AI/ML Specialist Solutions Architect at AWS. He focuses on helping customers build, train, deploy and migrate machine learning (ML) workloads to SageMaker. He previously worked in the semiconductor industry developing large computer vision (CV) and natural language processing (NLP) models to improve semiconductor processes using state of the art ML techniques. In his free time, he enjoys playing chess and traveling. You can find Pranav on LinkedIn.]]></content:encoded></item><item><title>AWS Weekly Roundup: AWS Step Functions, AWS CloudFormation, Amazon Q Developer, and more (February 10, 2024)</title><link>https://aws.amazon.com/blogs/aws/aws-weekly-roundup-aws-step-functions-aws-cloudformation-amazon-q-developer-and-more-february-10-2024/</link><author>Matheus Guimaraes</author><category>devops</category><pubDate>Mon, 10 Feb 2025 19:27:49 +0000</pubDate><source url="https://aws.amazon.com/blogs/aws/">AWS blog</source><content:encoded><![CDATA[We are well settled into 2025 by now, but many people are still catching up with all the exciting new releases and announcements that came out of re:Invent last year. There have been hundreds of re:Invent recap events around the world since the beginning of the year, including in-person all-day official AWS events with multiple tracks to help you discover and dive deeper into the releases you care about, as well as community and virtual events.Last month, I was lucky to be a co-host for AWS EMEA re:Invent re:Cap which was a nearly 4-hour livestream with experts featuring demos, whiteboard sessions, and a live Q&A. The good news is that you can now watch it on-demand! We had a great team and thousands of people enjoyed learning through the virtual experience. I recommend you check it out or share it with colleagues who have not been able to attend any re:Invent re:Cap events.The Korean team also did an amazing job hosting their own virtual re:Invent re:Cap event, and it’s also now available on-demand. So if you speak Korean I do recommend you check it out.If you’re more of a reader, then we have a treat for you. You can download the full official re:Invent re:Cap deck with all the slides covering releases across all areas by visiting community.aws! While there, you can also check all the upcoming in-person re:Invent re:Cap community events remaining across the globe for a chance to still attend one of those in a city near you.But as we know, new releases, announcements, and updates don’t stop at re:Invent. Every week there are even more, and this is why we have this Weekly Roundup series that you can read every Monday to get the AWS news highlights from the week before.So here’s what caught my attention last week.Here are some other releases that caught my attention this week from a variety of other AWS services:AWS CloudFormation introduces stack refactoring – You can now split your CloudFormation stacks, move resources from one stack to another, and change the logical name of resources within the same stack. This adds a lot of flexibility enabling you to keep up with changes within your organization and architectures, such as streamlining resource lifecycle management for existing stacks, keeping up with naming convention changes, and other cases. You can refactor your stacks by using the AWS command line interface (CLI) or AWS SDK.AWS Config now supports 4 new release types – AWS Config is great for monitoring resources across your AWS environment and help you towards ensuring alignment with your company and security policies as well as compliance requirements. It now has four new types of resources enabling you to monitor Amazon VPC block public access settings, any exceptions made within those settings, as well as monitor S3 Express One Zone bucket policies and directory bucket settings.Upcoming changes to the AWS Security Token Service (AWS STS) global endpoint – To help improve the resiliency and performance of your applications, we are making changes to the AWS STS global endpoint (https://sts.amazonaws.com), with no action required from customers. Starting in early 2025, requests to the STS global endpoint will be automatically served in the same Region as your AWS deployed workloads. For example, if your application calls  from the US West (Oregon) Region, your calls will be served locally in the US West (Oregon) Region instead of being served by the US East (N. Virginia) Region. These changes will be released in the coming weeks and we will gradually roll it out to AWS Regions that are enabled by default by mid-2025.Looking for some reading recommendations? At the beginning of every year Dr. Werner Vogles, VP and CTO of Amazon, publishes a list of recommended books that he believes should have your attention. This year’s list is looking particularly good in my opinion!AWS Public Sector Day London, February 27 — Join public sector leaders and innovators to explore how AWS is enabling digital transformation in government, education, and healthcare.AWS Innovate GenAI + Data Edition — A free online conference focusing on generative AI and data innovations. Available in multiple Regions: APJC and EMEA (March 6), North America (March 13), Greater China Region (March 14), and Latin America (April 8).That’s it for this week! See you next time :)Matheus Guimaraes | @codingmatheus]]></content:encoded></item><item><title>How Transformer LLMs Work [Free Course]</title><link>https://newsletter.languagemodels.co/p/how-transformer-llms-work-free-course</link><author>Jay Alammar</author><category>dev</category><category>ai</category><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8995a108-11cc-4edf-b69d-73006c087981_3050x1922.png" length="" type=""/><pubDate>Mon, 10 Feb 2025 19:00:20 +0000</pubDate><source url="https://newsletter.languagemodels.co/">LLM.newsletter</source><content:encoded><![CDATA[Enroll for free now: https://bit.ly/4aRnn7Z Github Repo: https://github.com/HandsOnLLM/Hands-On-Large-Language-Models We're ecstatic to bring you "How Transformer LLMs Work" -- a free course with ~90 minutes of video, code, and crisp visuals and animations that explain the modern Transformer architecture, tokenizers, embeddings, and mixture-of-expert models. and I have developed a lot of the visual language over the last several years (tens of thousands of iterations for hundreds of figures) for the book. This was informed by many incredible colleagues at Cohere, C4AI, and the open source and open science ML community. But to have an opportunity to collaborate with the legendary Andrew Ng and the team at DeepLearning.ai we took them to the next level with animations and a concise narrative meant to enable technical learners to pick up an ML paper and understand the architecture description. In this course, you'll learn how a transformer network architecture that powers LLMs works. You'll build the intuition of how LLMs process text and work with code examples that illustrate the key components of the transformer architecture. Key topics covered in this course include: The evolution of how language has been represented numerically, from the Bag-of-Words model through Word2Vec embeddings to the transformer architecture that captures word meanings in full context. How LLM inputs are broken down into tokens, which represent words or pieces before they are sent to the language model. The details of a transformer and the three main stages, consisting of tokenization and embedding, the stack of transformer blocks, and the language model head. The details of the transformer block, including attention, which calculates relevance scores followed by the feedforward layer, which incorporates stored information learned in training. How cached calculations make transformers faster, how the transformer block has evolved over the years since the original paper was released, and how they continue to be widely used. Explore an implementation of recent models in the Hugging Face transformer library. By the end of this course, you’ll have a deep understanding of how LLMs process language and you'll be able to read through papers describing models and understand the details that are used to describe these architectures. This intuition will help improve your approach to building LLM applications.]]></content:encoded></item><item><title>Celebrating Steve Jobs’s Impact on Consumer Tech and Design</title><link>https://spectrum.ieee.org/steve-jobs</link><author>San Murugesan</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjM3NzgxOC9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc1NjIzMTg4N30.TjwFgXs9V-Zy7jC58zYwdVCPFYKyFxurZnzQNs9ICQM/image.jpg?width=600" length="" type=""/><pubDate>Mon, 10 Feb 2025 19:00:04 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[A look back at his career on what would have been his 70th birthday]]></content:encoded></item><item><title>Automate bulk image editing with Crop.photo and Amazon Rekognition</title><link>https://aws.amazon.com/blogs/machine-learning/automate-bulk-image-editing-with-crop-photo-and-amazon-rekognition/</link><author>Rahul Bhargava</author><category>dev</category><category>ai</category><pubDate>Mon, 10 Feb 2025 18:50:29 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[Evolphin Software, Inc. is a leading provider of digital and media asset management solutions based in Silicon Valley, California. Crop.photo from Evolphin Software is a cloud-based service that offers powerful bulk processing tools for automating image cropping, content resizing, background removal, and listing image analysis.Crop.photo is tailored for high-end retailers, ecommerce platforms, and sports organizations. The solution has created a unique offering for bulk image editing through its advanced AI-driven solutions. In this post, we explore how Crop.photo uses Amazon Rekognition to provide sophisticated image analysis, enabling automated and precise editing of large volumes of images. This integration streamlines the image editing process for clients, providing speed and accuracy, which is crucial in the fast-paced environments of ecommerce and sports.Automation: The way out of bulk image editing challengesBulk image editing isn’t just about handling a high volume of images, it’s about delivering flawless results with speed at scale. Large retail brands, marketplaces, and sports industries process thousands of images weekly. Each image must be catalog-ready or broadcast-worthy in minutes, not hours.The challenge lies not just in the quantity but in maintaining high-quality images and brand integrity. Speed and accuracy are non-negotiable. Retailers and sports organizations expect rapid turnaround without compromising image integrity.This is where Crop.photo’s smart automations come in with an innovative solution for high-volume image processing needs. The platform’s advanced AI algorithms can automatically detect subjects of interest, crop the images, and optimize thousands of images simultaneously while providing consistent quality and brand compliance. By automating repetitive editing tasks, Crop.photo enables enterprises to reduce image processing time from hours to minutes, allowing creative teams to focus on higher-value activities.Challenges in the ecommerce industryThe ecommerce industry often encounters the following challenges:Inefficiencies and delays in manual image editing – Ecommerce companies rely on manual editing for tasks like resizing, alignment, and background removal. This process can be time-consuming and prone to delays and inconsistencies. A more efficient solution is needed to streamline the editing process, especially during platform migrations or large updates.Maintaining uniformity across diverse image types – Companies work with a variety of image types, from lifestyle shots to product close-ups, across different categories. Maintaining uniformity and professionalism in all image types is essential to meet the diverse needs of marketing, product cataloging, and overall brand presentation.Large-scale migration and platform transition – Transitioning to a new ecommerce platform involves migrating thousands of images, which presents significant logistical challenges. Providing consistency and quality across a diverse range of images during such a large-scale migration is crucial for maintaining brand standards and a seamless user experience.For a US top retailer, wholesale distribution channels posed a unique challenge. Thousands of fashion images need to be made for the marketplace with less than a day’s notice for flash sales. Their director of creative operations said,“Crop.photo is an essential part of our ecommerce fashion marketplace workflow. With over 3,000 on-model product images to bulk crop each month, we rely on Crop.photo to enable our wholesale team to quickly publish new products on popular online marketplaces such as Macy’s, Nordstrom, and Bloomingdales. By increasing our retouching team’s productivity by over 70%, Crop.photo has been a game changer for us. Bulk crop images used to take days can now be done in a matter of seconds!”Challenges in the sports industryThe sports industry often contends with the following challenges:Bulk player headshot volume and consistency – Sports organizations face the challenge of bulk cropping and resizing hundreds of player headshots for numerous teams, frequently on short notice. Maintaining consistency and quality across a large volume of images can be difficult without AI.Diverse player facial features – Players have varying facial features, such as different hair lengths, forehead sizes, and face dimensions. Adapting cropping processes to accommodate these differences traditionally requires manual adjustments for each image, which leads to inconsistencies and significant time investment.Editorial time constraints – Tight editorial schedules and resource limitations are common in sports organizations. The time-consuming nature of manual cropping tasks strains editorial teams, particularly during high-volume periods like tournaments, where delays and rushed work can impact quality and timing.An Imaging Manager at Europe’s Premier Football Organization expressed,“We recently found ourselves with 40 images from a top flight English premier league club needing to be edited just 2 hours before kick-off. Using the Bulk AI headshot cropping for sports feature from Crop.photo, we had perfectly cropped headshots of the squad in just 5 minutes, making them ready for publishing in our website CMS just in time. We would never have met this deadline using manual processes. This level of speed was unthinkable before, and it’s why we’re actively recommending Crop.photo to other sports leagues.”Crop.photo uses Amazon Rekognition to power a robust solution for bulk image editing. Amazon Rekognition offers features like object and scene detection, facial analysis, and image labeling, which they use to generate markers that drive a fully automated image editing workflow.The following diagram presents a high-level architectural data flow highlighting several of the AWS services used in building the solution.The solution consists of the following key components: – Amazon Cognito is used for user authentication and user management.Infrastructure deployment – Frontend and backend servers are used on Amazon Elastic Container Service (Amazon ECS) for container deployment, orchestration, and scaling.Content delivery and caching – Amazon CloudFront is used to cache content, improving performance and routing traffic efficiently. – Information about uploaded files and job execution is stored in Amazon Aurora. – AWS Batch processes thousands of images in bulk. – Amazon Simple Queue Service (Amazon SQS) manages and queues jobs for processing, making sure they’re run in the correct order by AWS Batch. – Amazon Rekognition services analyze media files, including: 
  Face Analysis to generate headless crops.Moderation to detect and flag profanity and explicit content.Label Detection to provide context for image processing and focus on relevant objects.Custom Labels to identify and verify brand logos and adhere to brand guidelines.Amazon Rekognition is an AWS computer vision service that powers Crop.photo’s automated image analysis. It enables object detection, facial recognition, and content moderation capabilities:Face detection – The Amazon Rekognition face detection feature automatically identifies and analyzes faces in product images. You can use this feature for face-based cropping and optimization through adjustable bounding boxes in the interface.Image color analysis – The color analysis feature examines image composition, identifying dominant colors and balance. This integrates with Crop.photo’s brand guidelines checker to provide consistency across product images.Object detection – Object detection automatically identifies key elements in images, enabling smart cropping suggestions. The interface highlights detected objects, allowing you to prioritize specific elements during cropping.Custom label detection – Custom label detection recognizes brand-specific items and assets. Companies can train models for their unique needs, automatically applying brand-specific cropping rules to maintain consistency.Text detection (OCR) – The OCR capabilities of Amazon Recognition detect and preserve text within images during editing. The system highlights text areas to make sure critical product information remains legible after cropping.Within the Crop.photo interface, users can upload videos through the standard interface, and the speech-to-text functionality will automatically transcribe any audio content. This transcribed text can then be used to enrich the metadata and descriptions associated with the product images or videos, improving searchability and accessibility for customers. Additionally, the brand guidelines check feature can be applied to the transcribed text, making sure that the written content aligns with the company’s branding and communication style.The Crop.photo service follows a transparent pricing model that combines unlimited automations with a flexible image credit system. Users have unrestricted access to create and run as many automation workflows as needed, without any additional charges. The service includes a range of features at no extra cost, such as basic image operations, storage, and behind-the-scenes processing.For advanced AI-powered image processing tasks, like smart cropping or background removal, users consume image credits. The number of credits required for each operation is clearly specified, allowing users to understand the costs upfront. Crop.photo offers several subscription plans with varying image credit allowances, enabling users to choose the plan that best fits their needs.Results: Improved speed and precisionThe automated image editing capabilities of Crop.photo with the integration of Amazon Rekognition has increased speed in editing, with 70% faster image retouching for ecommerce. With a 75% reduction in manual work, the turnaround time for new product images is reduced from 2–3 days to just 1 hour. Similarly, the bulk image editing process has been streamlined, allowing over 100,000 image collections to be processed per day using AWS Fargate. Advanced AI-powered image analysis and editing features provide consistent, high-quality images at scale, eliminating the need for manual review and approval of thousands of product images.For instance, in the ecommerce industry, this integration facilitates automatic product detection and precise cropping, making sure every image meets specific marketplace and brand standards. In sports, it enables quick identification and cropping of player facial features, including head, eyes, and mouth, adapting to varying backgrounds and maintaining brand consistency.The following images are before and after pictures for an ecommerce use case.For a famous wine retailer in the United Kingdom, the integration of Amazon Rekognition with Crop.photo streamlined the processing of over 1,700 product images, achieving a 95% reduction in bulk image editing time, a confirmation to the efficiency of AI-powered enhancement.Similarly, a top 10 global specialty retailer experienced a transformative impact on their ecommerce fashion marketplace workflow. By automating the cropping of over 3,000 on-model product images monthly, they boosted their retouching team’s productivity by over 70%, maintaining compliance with the varied image standards of multiple online marketplaces.These case studies illustrate the tangible benefits of integrating Crop.photo with Amazon Rekognition, demonstrating how automation and AI can revolutionize the bulk image editing landscape for ecommerce and sports industries.Crop.photo, from AWS Partner Evolphin Software, offers powerful bulk processing tools for automating image cropping, content resizing, and listing image analysis, using advanced AI-driven solutions. Crop.photo is tailored for high-end retailers, ecommerce platforms, and sports organizations. Its integration with Amazon Rekognition aims to streamline the image editing process for clients, providing speed and accuracy in the high-stakes environment of ecommerce and sports. Crop.photo plans additional AI capabilities with Amazon Bedrock generative AI frameworks to adapt to emerging digital imaging trends, so it remains an indispensable tool for its clients.To learn more about Evolphin Software and Crop.photo, visit their website. founder & CTO of Evolphin Software and Crop.photo, is reshaping how brands produce and manage visual content at scale. Through Crop.photo’s AI-powered tools, global names like Lacoste and Urban Outfitters, as well as ambitious Shopify retailers, are rethinking their creative production workflows. By leveraging cutting-edge Generative AI, he’s enabling brands of all sizes to scale their content creation efficiently while maintaining brand consistency. is a Solutions Architect specializing in Cloud Security at AWS based in the San Francisco Bay Area. As a trusted technical advisor, Vaishnavi helps customers to design secure, scalable and innovative cloud solutions that drive both business value and technical excellence. Outside of work, Vaishnavi enjoys traveling and exploring different artisan coffee roasters. is an Account Manager at AWS, who provides guidance to Evolphin Software and other organizations to help accelerate business outcomes leveraging AWS Technologies. John has a degree in Business Administration and Management with a concentration in Finance from Gonzaga University, and enjoys snowboarding in the Sierras in his free time.]]></content:encoded></item><item><title>Revolutionizing business processes with Amazon Bedrock and Appian’s generative AI skills</title><link>https://aws.amazon.com/blogs/machine-learning/revolutionizing-business-processes-with-amazon-bedrock-and-appians-generative-ai-skills/</link><author>Sunil Bemarkar</author><category>dev</category><category>ai</category><pubDate>Mon, 10 Feb 2025 18:37:01 +0000</pubDate><source url="https://aws.amazon.com/blogs/machine-learning/">AWS AI blog</source><content:encoded><![CDATA[This blog post is co-written with Louis Prensky and Philip Kang from Appian. The digital transformation wave has compelled enterprises to seek innovative solutions to streamline operations, enhance efficiency, and maintain a competitive edge. Recognizing the growing complexity of business processes and the increasing demand for automation, the integration of generative AI skills into environments has become essential. This strategic move addresses key challenges such as managing vast amounts of unstructured data, adhering to regulatory compliance, and automating repetitive tasks to boost productivity. Using robust infrastructure and advanced language models, these AI-driven tools enhance decision-making by providing valuable insights, improving operational efficiency by automating routine tasks, and helping with data privacy through built-in detection and management of sensitive information. For enterprises, this means achieving higher levels of operational excellence, significant cost savings, and scalable solutions that adapt to business growth. For customers, it translates to improved service quality, enhanced data protection, and a more dynamic, responsive service, ultimately driving better experiences and satisfaction.Appian has led the charge by offering generative AI skills powered by a collaboration with Amazon Bedrock and Anthropic’s Claude large language models (LLMs). This partnership allows organizations to:Enhance decision making with valuable insightsImprove operational efficiency by automating tasksHelp protect data privacy through built-in detection and management of sensitive informationMaintain compliance with HIPAA and FedRAMP compliant AI skillsCritically, by placing AI in the context of a wider environment, organizations can operationalize AI in processes that seamlessly integrate with existing software, pass work between digital workers and humans, and help achieve strong security and compliance.Appian, an AWS Partner with competencies in financial services, healthcare, and life sciences, is a leading provider of low-code automation software to streamline and optimize complex business processes for enterprises. The Appian AI Process Platform includes everything you need to design, automate, and optimize even the most complex processes, from start to finish. The world’s most innovative organizations trust Appian to improve their workflows, unify data, and optimize operations—resulting in accelerated growth and superior customer experiences.Amazon Bedrock is a fully managed service that offers a choice of high-performing foundation models (FMs) from leading AI companies such as AI21 Labs, Anthropic, Cohere, Meta, Mistral AI, Stability AI, and Amazon through a single API, along with a broad set of capabilities you need to build generative AI applications with security, privacy, and responsible AI.Appian uses the robust infrastructure of Amazon Bedrock and Anthropic’s Claude LLMs to offer fully integrated, pre-built generative AI skills that help developers enhance and automate business processes using low-code development. These use case-driven tools automate common tasks in business processes, making AI-powered applications faster and easier to develop.This blog post will cover how Appian AI skills build automation into organizations’ mission-critical processes to improve operational excellence, reduce costs, and build scalable solutions. Additionally, we’ll cover real-world examples of processes such as:A mortgage lender that used AI-driven data extraction to reduce mortgage processing times from 16 weeks to 10 weeks.A financial services company that achieved a four-fold reduction in data extraction time from trade-related emails.A legal institution that used AI to reduce attorney time spent on contract review, enabling them to focus on other, high-value work.Current challenges faced by enterprisesModern enterprises face numerous challenges, including:Managing vast amounts of unstructured data: Enterprises deal with immense volumes of data generated from various sources such as emails, documents, and customer interactions. Organizing, analyzing, and extracting valuable insights from unstructured data can be overwhelming without advanced AI capabilities.Help protect data privacy and compliance: With increasing regulatory requirements around data privacy and protection, organizations must safeguard sensitive information, such as personally identifiable information (PII). Manual processes for data redaction and compliance checks are often error-prone and resource-intensive.Streamlining repetitive and time-consuming tasks: Routine tasks such as data entry, document processing, and content classification consume significant time and effort. Automating these tasks can lead to substantial productivity gains and allow employees to focus on more strategic activities.Adapting to rapidly changing market conditions: In a fast-paced business environment, organizations need to be agile and responsive. This requires real-time data analysis and decision-making capabilities that traditional systems might not provide. AI helps businesses quickly adapt to industry changes and customer demands.Enhancing decision-making with accurate data insights: Making informed decisions requires access to accurate and timely data. However, extracting meaningful insights from large datasets can be challenging without advanced analytical tools. AI-powered solutions can process and analyze data at scale, providing valuable insights that drive better decision-making.Appian AI service architectureThe architecture of the generative AI skills integrates both the Amazon Bedrock and Amazon Textract scalable infrastructure with Appian’s process management capabilities. This generative AI architecture is designed with private AI as the foundation and upholds those principles.The key components of this architecture include:Appian AI Process Platform instances: The frontend serves as the primary application environment where users interact with the system application to upload documents, initiate workflows, and view processed results.: This service functions as an intermediary layer between the Appian instances and AWS AI services (Amazon Textract and Amazon Bedrock). This layer encapsulates the logic required to interact with the AWS AI services to manage API calls, data formatting, and error handling.: This AWS service is used to automate the extraction of text and structured data from scanned documents and images and provide the extracted data in a structured format.: This AWS service provides advanced AI capabilities using FMs for tasks such as text summarization, sentiment analysis, and natural language understanding. This helps enhance the extracted data with deeper insights and contextual understanding.Appian generative AI skills, powered by Amazon Bedrock with Anthropic’s Claude family of LLMs, are designed to jump-start the use of generative AI in your processes. The following figure showcases the diverse capabilities of Appian’s generative AI skills, demonstrating how they enable enterprises to seamlessly automate complex tasks.Each new skill provides a pre-populated prompt template tailored to specific tasks, alleviating the need to start from scratch. Businesses can select the desired action and customize the prompt for a perfect fit, enabling the automation of tasks such as:Content analysis and processing: With Appian’s generative AI skills, businesses can automatically generate, summarize, and classify content across various formats. This capability is particularly useful for managing large volumes of customer feedback, generating reports, and creating content summaries, significantly reducing the time and effort required for manual content processing.: Organizations generate mountains of data and documents. Extracting this information manually can be both burdensome and error-prone. Appian’s AI skills can perform highly accurate text extraction from PDF files and scanned images and pull relevant data from both structured and unstructured data sources such as invoices, forms, and emails. This speeds up data processing and promotes higher accuracy and consistency.PII extraction and redaction: Identifying and managing PII within large datasets is crucial for data governance and compliance. Appian’s AI skills can automatically identify and extract sensitive information from documents and communication channels. Additionally, Appian supports plugins that can redact this content for further privacy. This assists your compliance efforts without extensive manual intervention.: Appian’s AI skills can summarize documents to give users an overview before digging into the details. Whether it’s summarizing research papers, legal documents, or internal reports, AI can generate concise summaries, saving time and making sure that critical information is highlighted for quick review.The following figure shows an example of a prompt-builder skill used to extract unstructured data from a bond certificate.Each AI skill offers pre-populated prompt templates, allowing you to deploy AI without starting from scratch. Each template caters to specific business needs, making implementation straightforward and efficient. Plus, users can customize these prompts to fit their unique requirements and operational needs.In this solution, Appian Cloud seamlessly integrates and customizes Amazon Bedrock and Claude LLMs behind the scenes, abstracting complexity to deliver enterprise-grade AI capabilities tailored to its cloud environment. It provides pre-built, use case specific prompt templates for tasks like text summarization and data extractions, dynamically customized based on user inputs and business context. Using the scalability of the Amazon Bedrock infrastructure, Appian Cloud provides optimal performance and efficient handling of enterprise-scale workflows, all within a fully managed cloud service.By addressing these complexities, Appian Cloud empowers businesses to focus solely on using AI to achieve operational excellence and business outcomes without the burdens of technical setup, integration challenges, or ongoing maintenance efforts.Appian’s AI skills have proven effective across multiple industries. Here are a few real-world examples:: This organization automated the extraction of over 60 data fields from inconsistent document formats, reducing the process timeline from 16 weeks to 10 weeks and achieving 98.33% accuracy. The implementation of Appian’s generative AI skills allowed the mortgage processor to streamline their workflow, significantly cutting down on processing time and improving data accuracy, which led to faster loan approvals and increased customer satisfaction.: A financial service company received over 1,000 loosely structured emails about trades. Manually annotating these emails led to significant human errors. With an Appian generative AI skill, the customer revamped the entity tagging process by automatically extracting approximately 40 data fields from unstructured emails. This resulted in a four-fold reduction in extraction time and achieved over 95% accuracy, improving the user experience compared to traditional ML extraction tools. The automated process not only reduced errors but also enhanced the speed and reliability of data extraction, leading to more accurate and timely trading decisions.: A legal institution had to review negotiated contracts against the original contracts to determine whether the outlined risks had been resolved. This manual process was error prone and labor intensive. By deploying a generative AI skill, they automated the extraction of changes between contracts to find the differences and whether risks had been resolved. This streamlined the attorney review process and provided insights and reasoning into the differences found. The automated solution significantly reduced the time attorneys spent on contract review, allowing them to focus on more strategic tasks and improving the overall efficiency of the legal department.AWS and Appian’s collaboration marks a significant advancement in business process automation. By using the power of Amazon Bedrock and Anthropic’s Claude models, Appian empowers enterprises to optimize and automate processes for greater efficiency and effectiveness. This partnership sets a new standard for AI-driven business solutions, leading to greater growth and enhanced customer experiences. The ability to quickly deploy and customize AI skills allows businesses to stay agile and responsive in a dynamic environment.Appian solutions are available as software as a service (SaaS) offerings in AWS Marketplace. Check out the Appian website to learn more about how to use the AI skills.is a Senior Partner Solutions Architect at Amazon Web Services. He works with various Independent Software Vendors (ISVs) and Strategic customers across industries to accelerate their digital transformation journey and cloud adoption.is a Principal Customer Solution Manager within the AWS Independent Software Vendor (ISV) team. In this role, he programmatically helps ISV customers adopt AWS technologies and services to reach their business goals more quickly.is a Senior Product Manager at Appian. He is responsible for driving product strategy and feature design for AI Skills within Appian’s Cognitive Automation Group.is a Principal Solutions Consultant in Partner Technology & Innovation centers with Appian. In this role, he spearheads technical innovation with a focus on AI/ML and cloud solutions.]]></content:encoded></item><item><title>Why the So-Called AI Action Summit Falls Short</title><link>https://www.eff.org/deeplinks/2025/02/why-so-called-ai-action-summit-falls-short</link><author>Svea Windwehr</author><category>tech</category><enclosure url="https://www.eff.org/files/banner_library/artificial-intelligence-resized_0.png" length="" type=""/><pubDate>Mon, 10 Feb 2025 18:13:51 +0000</pubDate><source url="https://www.eff.org/rss/updates.xml">Deeplinks</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>CNL: Optimizing Kyverno policy enforcement performance for large clusters</title><link>https://www.youtube.com/watch?v=DWmCAUCs3bc</link><author>CNCF [Cloud Native Computing Foundation]</author><category>k8s</category><category>devops</category><category>video</category><enclosure url="https://www.youtube.com/v/DWmCAUCs3bc?version=3" length="" type=""/><pubDate>Mon, 10 Feb 2025 18:13:08 +0000</pubDate><source url="https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA">CNCF</source><content:encoded><![CDATA[Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io]]></content:encoded></item><item><title>Gyroscope-on-a-Chip Targets GPS’s Dominance</title><link>https://spectrum.ieee.org/optical-gyroscopes-on-chip</link><author>Willie D. Jones</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjEyMjY0MS9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc4MzM2MzQ3OX0.wBTG52F6192KrziO07XCyLR6oSBISZrkoUBwy5BH0n4/image.jpg?width=600" length="" type=""/><pubDate>Mon, 10 Feb 2025 18:00:04 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[Centimeter-scale wayfinding accuracy emerges from millimeter-scale tech]]></content:encoded></item><item><title>Show HN: I made a tiny book using a pen-plotter and AI</title><link>https://muffinman.io/blog/the-tiny-book-of-great-joys/</link><author>stankot</author><category>dev</category><category>hn</category><pubDate>Mon, 10 Feb 2025 17:52:31 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[If you are interested in how I over-engineered the process of making a tiny book for my wife, using AI, a pen plotter, a 3D printer, and a lot of time, you are in the right place. The book is titled  , and here is how it turned out:My wife is delighted with it, so it was worth all the effort.This post will take you through the process. It will be a long one, but please stick around - I promise there will be a lot of pretty pictures.Here is the outline of the post:I had this idea for a while after seeing something similar somewhere on the internet.. Since then, I always wanted to make one for my wife - a physically small book with a bunch of small drawings of our memories together, inside jokes, and little things she likes.I wanted the illustrations to be hand-drawn, and I had a plan to ask my friend to do them. But I knew he would refuse any kind of payment, so I felt bad adding more work to his plate. So I shelved the idea, but every now and then, it would pop up in my head.Fast forward a few years - we got a kid, and our routine completely changed. We are enjoying it a lot, but it can be very exhausting, and every day seems identical to the last. That's why I decided I needed to do something for her to break the routine. The book idea seemed perfect - personal and handcrafted - so I gave it a try.To be able to do everything myself, I went to create digital drawings and then draw them on paper using my trusty pen plotter.With the idea in place, I moved on to creating the drawings - which turned out to be a challenge of its own.For pen plotting, one needs vector files, so I started drawing in Figma. Unfortunately, I quickly realized that my drawing skills would not get me the result I had envisioned. Determined to do it this time, I decided to try using AI to generate images.I got myself a Midjourney subscription and started playing with it. It took a lot of failed attempts to figure out how to get drawings that were simple and had a strong hand-drawn feel to them. Even then, I ended up editing every one of them, but more on that later.One of the first images I was satisfied with (it didn't end up in the book, though):It took a lot of time, but it was fun. Failed attempts were often quirky and funny, and I was learning how to use the tool. And it made me feel like a secret agent, doing it next to my wife, who had no idea what I was up to.I may be wrong, but I think Midjourney wasn't built for the kind of illustrations I had in mind. I was after simple, hand-drawn illustrations that felt personal. Luckily, I found a style reference () that worked well for my case. I used it to generate almost all of the drawings that ended up in the book. For those who haven't used Midjourney - you can use images as style references to influence the style of images you want to generate.Most of my images were generated using that  code and a  between 150 and 400 (it can go from 0 to 1000).As for the prompts, these are the key terms I combined with the description and the style reference:isolated on white backgroundIt took me a lot of tries - between 10 and 30 attempts for each image you see in the book.Once I solved the image generation part, I had to figure out how to turn them into vector files for plotting. The first thing I tried was something similar to halftone. As you can see below, in this process, the images completely lost the hand-drawn feel.Then I remembered this plot of Marble Machine X I did a while ago, for which I used AutoTrace to convert the original image to a vector file. The great thing about AutoTrace is that it supports "centerline tracing". And this time, I learned that Inkscape has a great AutoTrace plugin, which made it even easier to convert.What makes centerline tracing differentMost of the tools that convert raster to vector images do it by outlining shapes. This is not suitable for plotting, as each line in the original image becomes a sausage-like shape. Centerline tracing, on the other hand, tries to draw a single line following the middle path through shapes. Don't worry if it sounds confusing; the example below should make things clearer.Here is the image of Link from  generated by Midjourney:After applying a common vectorization technique, we get this. As you can see, each line in the original drawing is now outlined, creating this messy-looking image.But if we use centerline tracing, it suddenly looks a lot more like a drawing. It is not perfect, but don't worry - we are going to clean it up in the next step.In the points where lines touch or cross, AutoTrace is not sure which line to follow and creates these funky-looking joints. Here is an exaggerated example to show you what I'm talking about. Input is the raster image at the top and the vectorized result is at the bottom:But I found out that if I roughly separate these lines, I get a much better result.Let's now apply this technique to the image of Link we've seen above. After separating lines (and some cleaning up) this is the image I ended up with. It is rough, but it is only used as an input for the tracing process, so it doesn't really matter. This was manual and somewhat tedious process, but I enjoyed it overall. It was a sort of meditation for me.And finally, when we trace this image, we get a really nice and clean vector file perfect for plotting. Here is another example. We start with the image I generated using Midjourney:After editing, removing details and separating lines, we get this one:And the traced vector result:You'll notice that in both examples I did  . I did that for pretty much all of the images, to fix things I wasn't able to polish using prompts. I also removed a lot of details to make sure images are crisp and readable at the small size.All of this took a lot of experimentation, but it gave me a pretty solid workflow which I used to generate all of the images. The complete flow looks like this:Generate images using Midjourney.Upscale them two times, because upscaled images were easier to edit and tracing was more precise.Clean up, redraw and separate lines by hand using Gimp.Use Inkscape plugin to run AutoTrace centerline tracing.It took me a while to generate all the images, and the fact that I was trying to keep it a secret from my wife didn't help. I think I did it over the span of two weeks, mostly in the evening after she would go to bed. never stood a chance!Before we continue I just want to show you two funky images of Link that really made me laugh:With the drawings ready, I turned to the next crucial part - the text. I first wanted to write everything by hand, photograph it and then vectorize it in the same way I did with the images. But it was a hassle - I had to do a lot of editing for text to look as my handwriting.Evil Mad Scientist, the maker of my pen plotter, has a fantastic tool called Hershey Text. It contains a bunch of single-line fonts ideal for plotting. I chose the EMS Elfin font as it looked playful and hand-drawn. I used it to write all of the text in the book and I think it turned out great.The tricky part with bookbinding is that pages are not printed in order, but in a way that when you fold the sheets in half, you get the right order. I used Figma to design the layout, with a great care to make sure pages are in order after double-sided plotting.Here is the layout laid out on A4 sized paper. Sorry for blurring the text, but a lot of it is very personal and I want to keep it for our eyes only.Plotting is the part that went the smoothest, but not without hiccups. I usually use Pigma Micron blackliner markers. They use archival quality ink and they are literally indestructible. But this time, even the thinnest one I had was too thick for the book this small.Here you can see the first  using markers of 0.2mm and 0.1mm thickness respectively. Lines got a bit smudged and looked much thicker than I expected. This was also the moment I realized I need to remove  from the images to make them readable at this size.I needed to find a thinner pen.Technical pen to the rescueBlackliner markers were made as a more practical replacement for technical pens. But from what I've read, an old-school technical pen was the only thing capable of achieving super-fine lines I wanted. I went online and ordered Rotring Isograph 0.2mm. As soon as it arrived I sneaked out to my study and did another test plot using it. Oh boy, was I happy when I saw the result:Lines were thin and crisp and at this point I was convinced the project will be a success!All of the first plots were done on 120gsm printer paper. It is somewhat thick paper and drawings looked fantastic. Unfortunately, when I bound the pages together, the drawings and letters would get transferred on the opposite pages. I could probably get away with it, considering the whole hand made feel of the book. But I wanted it to be perfect.A friend advised me to leave ink to dry for a few hours. I left each side to dry for 24 hours, but it smudged again. Next time I tried putting the plot (before cutting the pages) between two sheets of papers and pressing it with heavy books. I did that for more than 24 hours, but still after cutting and bounding the pages, they got smudged again. At this point I was becoming somewhat desperate. As the last resort I ordered different, 100gsm paper and to my relief it worked! Crisis averted!In the final version you can still see tiny traces on a few pages, but these are barely visible and don't really bother me.After plotting and cutting I was left with a stack of somewhat delicate pages. Now, it was finally time to turn them into a book.As you can imagine, I had zero bookbinding experience. There are a lot of resources online, but two of them were crucial for my project as they were on how to bind tiny books:After reading and watching these and a few generic articles on bookbinding, I gathered enough info to try doing it myself. I thought I was super clever because I 3D printed sides and spine of the book. I designed sewing holes in the spine so I can connect the pages directly to it without using glue. It was a decent idea, but it left a gap between two  . Still, I went with it for the first try.I laid everything down on the canvas that the book would be wrapped in and started assembling it. But I made a crucial mistake - I used super glue. It dries quickly, it is stiff, and doesn't glue 3D printed plastic well and it dissolved the paper I used. Long story short, I made a mess. But I didn't stress too much, I just proclaimed that version is a prototype and used it as a learning experience.I ordered proper bookbinding glue (PVA). While I was waiting for it, I focused on properly sewing the pages together.The first time I sewed the pages together, I poked the holes by hand and they were somewhat uneven. Again, it was nothing major, but I didn't like it. So I designed and 3D printed a simple tool to help me drill the holes evenly.The tool has two parts, and the pages fit snugly between them. Both top and bottom parts have holes, so I was able to put the needle through and poke perfectly even holes in the pages. I'm very proud of this silly contraption.Here you can see all of the eight sheets with sewing holes.Fun fact, I designed all 3D parts using JavaScript and Replicad library. Here is a link if you want to play with the model in your browser.But I ditched the 3D printed spine and used the technique called , which works great when you have only two signatures. It made signatures way more tight than when I connected them separately to the 3D printed spine.When the glue arrived, I plotted everything again and took it from the top. I swapped 3D printed sides for cardboard. Using proper glue was a game changer. I had enough time to apply it before it hardened, and when it dried it stayed flexible. And when it got onto my fingers, it was easy to remove. Everything was much cleaner, and I finally managed to put it all together.Unfortunately, I was rushing to finish the book, so I didn't take any photos of the process. But here are a few I do have:If you are an experienced bookbinder and reading this, I'm sorry for the bookbinding crimes I probably committed. I promise I won't use super glue again.It looked great! It was not perfect (more on that below), but I was super happy with how it turned out. It had a distinct handcrafted feel to it, the images turned out fantastic, and I think I really managed to bring out a personal touch with it.On the day I finished the book and gave it to my wife, we were both exhausted (our kid was teething, and we had a very rough night), so I thought she would appreciate a little pick-me-up.When I gave it to her, the first thing she asked was, "Will I cry?". She was brave, but it definitely got her all mushy and made her day. After reading, she carefully put it on the shelf, out of the reach of the little one.Then I asked her if she ever suspected I was preparing a surprise for her, and she said that she had no idea. But she also said that she thought it was weird that I would often plot something and not brag about it to her afterwards. It was true, I love showing her my work, but luckily she didn't give it too much thought, and I was able to finish my secret project.One thing I would like to fixLike I mentioned, the book isn't perfect. The sides are a bit too large, so the pages seem too deep inside when the book is closed. For the same reason, the end pages turned out to be a bit short, which gives it a weird, uneven look. It is purely aesthetic, but I think it is the only thing keeping it from being perfect.Lesson learned if I ever end up doing something similar.It took way longer than it should have—it took me a month and a half to finish it. It took so long because I did it in secrecy, which meant working late in the evenings when my wife and kid were asleep. A bunch of little failures... ehm, I mean  also prolonged the project. And finally, I had to order multiple things, so I was blocked a few times while I was waiting for four different deliveries.But the final assembly took me around two and a half hours from start to finish - plotting, cutting, sewing, and bookbinding. Mostly because I had already practiced all of them and defined the exact process.It was so much fun. I love projects that span across multiple disciplines. This one touched AI, drawing, plotting, modeling, 3D printing, sewing, and bookbinding. I encountered a lot of little hiccups, but I also learned about all of them. Some of the errors I made could have been avoided if I had been more patient. But I hope you'll cut me some slack - I was super excited and eager to see how it would turn out, and I had limited time windows when I could do it in secrecy. Still, I need to take it as a lesson - being patient will help me save time when doing projects like this one.The highlight for me was that I could do it without an illustrator. Love it or hate it, AI ended up being a fantastic tool that filled the gap in my skill set, which was crucial for making the book.I hope you enjoyed this write-up as much as I enjoyed making the book and writing the post. And I do hope I inspired you to try making something of your own. If I did, please reach out on GitHub, I would love to see it.]]></content:encoded></item><item><title>Beginner’s Guide to Subqueries in SQL</title><link>https://www.kdnuggets.com/beginners-guide-subqueries-sql</link><author>Nate Rosidi</author><category>dev</category><category>ai</category><enclosure url="https://www.kdnuggets.com/wp-content/uploads/Rosidi_Beginners_Guide_to_Subqueries_in_SQL_5.png.png" length="" type=""/><pubDate>Mon, 10 Feb 2025 17:00:38 +0000</pubDate><source url="https://www.kdnuggets.com/">KDNuggets blog</source><content:encoded><![CDATA[Subqueries are popular tools for more complex data manipulation in SQL. If you’re a beginner on a quest to understand subqueries, this is the article for you.]]></content:encoded></item><item><title>Show HN: Global 3D topography explorer</title><link>https://topography.jessekv.com/</link><author>jessekv</author><category>dev</category><category>hn</category><pubDate>Mon, 10 Feb 2025 15:54:45 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[
                Click catchements or regions on the map to render them in 3D.
                Learn more]]></content:encoded></item><item><title>Microsoft Study Finds AI Makes Human Cognition “Atrophied and Unprepared”</title><link>https://www.404media.co/microsoft-study-finds-ai-makes-human-cognition-atrophied-and-unprepared-3/</link><author>Emanuel Maiberg</author><category>tech</category><enclosure url="https://images.unsplash.com/photo-1707396172454-31f31aa5f9d9?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wxMTc3M3wwfDF8c2VhcmNofDF8fHRoaW5raW5nJTIwZW1vaml8ZW58MHx8fHwxNzM5MjAwMDQwfDA&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=2000" length="" type=""/><pubDate>Mon, 10 Feb 2025 15:26:45 +0000</pubDate><source url="https://www.404media.co/">404</source><content:encoded><![CDATA[A new paper from researchers at Microsoft and Carnegie Mellon University finds that as humans increasingly rely on generative AI in their work, they use less critical thinking, which can “result in the deterioration of cognitive faculties that ought to be preserved.”“[A] key irony of automation is that by mechanising routine tasks and leaving exception-handling to the human user, you deprive the user of the routine opportunities to practice their judgement and strengthen their cognitive musculature, leaving them atrophied and unprepared when the exceptions do arise,” the researchers wrote. The researchers recruited 319 knowledge workers for the study, who self reported 936 first-hand examples of using generative AI in their job, and asked them to complete a survey about how they use generative AI (including what tools and prompts), how confident they are the generative AI tools’ ability to do the specific work task, how confident they are in evaluating the AI’s output, and how confident they are in their abilities in completing the same work task without the AI tool. Some tasks cited in the paper include a teacher using the AI image generator DALL-E to create images for a presentation about hand washing at school, a commodities trader using ChatGPT to “generate recommendations for new resources and strategies to explore to hone my trading skills,” and a nurse who “verified a ChatGPT-generated educational pamphlet for newly diagnosed diabetic patients.”]]></content:encoded></item><item><title>Undergraduate Upends a 40-Year-Old Data Science Conjecture</title><link>https://www.quantamagazine.org/undergraduate-upends-a-40-year-old-data-science-conjecture-20250210/</link><author>Steve Nadis</author><category>Quanta Magazine</category><category>tech</category><enclosure url="https://www.quantamagazine.org/wp-content/uploads/2025/02/Hash-Tables-Redux_cr_Nash-Weerasekera-Default.webp" length="" type=""/><pubDate>Mon, 10 Feb 2025 15:17:37 +0000</pubDate><source url="https://www.quantamagazine.org/">Quanta Magazine</source><content:encoded><![CDATA[Sometime in the fall of 2021, Andrew Krapivin, an undergraduate at Rutgers University, encountered a paper that would change his life. At the time, Krapivin didn’t give it much thought. But two years later, when he finally set aside time to go through the paper (“just for fun,” as he put it), his efforts would lead to a rethinking of a widely used tool in computer science. The paper’s title…]]></content:encoded></item><item><title>Python Morsels: Newlines and escape sequences in Python</title><link>https://www.pythonmorsels.com/newlines-and-escape-sequences/</link><author></author><category>dev</category><category>python</category><pubDate>Mon, 10 Feb 2025 15:17:29 +0000</pubDate><source url="http://planetpython.org/">Planet Python blog</source><content:encoded><![CDATA[This string contains a newline character:That's what  represents: a newline character.If we print this string, we'll see that  becomes an  newline:Why does Python represent a newline as ?Escape sequences in PythonEvery character in a Python …]]></content:encoded></item><item><title>Micro Frontends with Angular and Native Federation</title><link>https://blog.angular.dev/micro-frontends-with-angular-and-native-federation-7623cfc5f413?source=rss----447683c3d9a3---4</link><author>Manfred Steyer</author><category>dev</category><category>official</category><category>frontend</category><pubDate>Mon, 10 Feb 2025 15:02:31 +0000</pubDate><source url="https://blog.angular.dev/?source=rss----447683c3d9a3---4">Angular official</source><content:encoded><![CDATA[Enterprise-scale software systems are often implemented by several cross-functional teams. To enable such teams to provide new features efficiently, it is desirable to minimize the need for coordination between them. This calls for a modularization that verticalizes the system into low-coupled areas individual teams can take care of.There are several possibilities for implementing such high-level modules (also called verticals). For instance, they can be implemented using a respective folder structure or in the form of several libraries in a Monorepo. Micro Frontends go one step further and designate a separate application for each vertical. This architectural style promises several advantages, such as a high amount of team autonomy, but it also comes with numerous challenges.The first part of this article provides a critical overview of the benefits and drawbacks of Micro Frontends in the space of single-page applications. The second part discusses how such an architecture can be implemented with Native Federation, a community project built upon web standards that provide close integration with the Angular CLI.Motivation Behind Micro FrontendsLike Micro Services, Micro Frontends promise several advantages, both technically and with respect to the organization. As applying Micro Frontend architectures results in several smaller applications, testing, performance tuning, and isolating faults in one part of the overarching system becomes more effortless, according to several sources.However, the increased team autonomy was the main reason for applying this architectural style in the numerous cases I was involved in as a consultant. Individual teams are not blocked by waiting for other teams and can deploy separately anytime. This might not be a significant concern in a vast number of projects. Still, as soon as we talk about multi-team projects in a corporate environment with long communication paths and decision times, this aspect quickly becomes vital for the project’s success.Teams can also make their own decisions that best fit their goals — architecturally and technology-wise. Mixing multiple client-side frameworks in the same application is considered an anti-pattern and should be avoided. However, it can help to create a migration path over to a new stack in the long run. The concern in corporate environments is that we find software solutions that usually outlive the average technology stackSince Micro Frontends result in separate build processes, combining them with incremental builds, where only changed applications need to be rebuilt, has a massive potential for build-time improvements. For instance, the well-known Nx build system provides this option. Interestingly, this feature can also be used without applying other aspects such as aligning teams with individual applications or separate deployments. There is debate about whether leveraging this tempting option automatically leads to micro frontend architectures.A system consisting of several smaller applications can provide further organizational advantages: It’s easier to onboard new members and scale the development by adding further micro frontends. Team autonomy also leads to faster release cycles.Challenges to keep in mindEvery architectural decision has consequences that need to be evaluated, and Micro Frontends are no exception. Besides the positive consequences outlined above, there are also several negative ones to consider.For instance, individually developed Micro Frontends can diverge in UI/UX, leading to an inconsistent appearance. Also, loading several applications increases the number of bundles that need to be downloaded, adversely affecting loading times and increasing the memory pressure.Splitting an application into low-coupled parts might be a best practice in general. However, it is often hard to define the boundaries between verticals clearly enough to implement them as individual applications. Also, while having several small applications at first glance simplifies the implementation, integrating them into an overarching solution brings additional complexity.This leads to one of the biggest challenges I have seen in practice: we are moving away from a compile-time integration towards a runtime integration. This has severe consequences because we cannot easily foresee problems that might arise when individually developed and deployed applications start interacting at runtime. Besides the chance of technical conflicts, we also have to see that the current generation of SPA frameworks has not been built with such an operation mode in mind.Instead, modern SPA frameworks, especially Angular, have been developed to focus on compile time optimizations. A powerful compiler leverages type checks to identify technical conflicts and emits efficient source code optimized for tree-shaking. Furthermore, the CLI in the Angular space provides a highly optimized build process. An off-label usage necessary for implementing Micro Frontends undermines some of these achievements.Angular Does Not Officially Support Micro FrontendsFor all the outlined reasons, the Angular team recommends checking if alternatives, like implementing the individual verticals in Monorepos, which can be compiled together, are suitable. For instance, Google adopted this approach years ago and manages all its products and libraries in a single Monorepo.Of course, there are also ways to compensate for the disadvantages outlined here, and some of them, like establishing a design system to help with a consistent UI/UX or lazy loading individual system parts, might be needed in general. More details on such compensation strategies can be found in this survey of more than 150 Micro Frontend practitioners.All architectural decisions have benefits and drawbacks and should be evaluated with those considerations if you are going to implement a solution. If such an evaluation reveals that Micro Frontends provide more advantages than alternatives for achieving your very goals, the following sections provide you a well-lit path for implementing this architectural pattern with Angular.Micro Frontends with FederationModule Federation is a popular technology for implementing Micro Frontends and sharing dependencies. Shipped initially with webpack 5, it comes with a tooling-agnostic runtime and provides compile-time integration into  and . Besides the usage of the vite dev server, these technologies are currently not supported by the Angular CLI. However, promising community solutions like and AnalogJS allow them to be used with Angular. Nx and my CLI-plugin provide an effortless integration.Module Federation enables an application to load parts of other separately built and deployed applications lazily. The loading application is referred to as the host; the integrated ones are called remotes:Federation, if permitted by the library version, can share dependencies like Angular or RxJS between the host and remotes. There are several configuration options for preventing version mismatches. Since MF can only decide which dependencies to share at runtime, tree-shaking for shared parts is not possible.To inform the host about the remotes and their shared dependencies, Module Federation creates a metadata file, the so-called remote entry, during the build. This file needs to be loaded into the host.To fully decouple the idea of Federation from specific bundlers, I started the project Native Federation several years ago. Its API surface is very similar to that of Module Federation. The focus is on portability and standards like ECMAScript modules and Import Maps. Its compile time acts as a wrapper around existing bundlers. For the communication with the bundler, it uses an exchangeable adapter:The integration into the Angular CLI directly delegates to Angular’s  that leverages the fast bundler esbuild, and is the foundation for several current features like partial hydration. Because of its architecture, Native Federation can also be ported to further builders or other innovations the CLI might provide in the long run.For integrating Micro Frontends built with Angular’s webpack-based builder, there is a bridging solution allowing the loading of such remotes into a Native Federation host. This solution enables the gradual adoption of the CLI’s new  and permits the sharing of dependencies between the two kinds of Federation. One of the features added recently is support for SSR and Hydration, which is vital for performance-critical applications like public portals and web shops.Native Federation for Angular is close to the CLI’s , but its compilation mode is for shared dependencies differs. While it works well for packages that align with Angular’s Package Format, which is the case for all libraries built with the CLI, other libraries might provide some challenges, especially older ones that still use CommonJS or older conventions for providing metadata.Using Native Federation in AngularFor the setup Native Federation provides a schematic:ng add @angular-architects/native-federation --project mfe1 --port 4201 --type remoteThe switch  defines the kind of the application. Possible options are , , and . The latter is a host configured with a configuration file (federation manifest) during application start. This manifest informs the application of the locations of the remotes and can be switched out by another manifest during deployment:{    "mfe1" : "http://localhost:4201/remoteEntry.json"The key, in this case, is a short name the host uses to refer to the Micro Frontend. The value is the location of the remote entry with the metadata mentioned above. Alternatively, the manifest can be replaced by a service that informs the host of the current location of all deployed remotes and acts as a Micro Frontend registry.The schematic configures the Native Federation builder delegation to the  and creates a configuration file :const { withNativeFederation, shareAll }     = require('@angular-architects/native-federation/config');module.exports = withNativeFederation({    './Component': './projects/mfe1/src/app/app.component.ts',    ...shareAll({}),    'rxjs/ajax',    'rxjs/testing',    // Add further packages you don't need at runtimeThe configuration assigns a unique name to the remote or host and defines which dependencies to share. Instead of providing an exhaustive list of all the dependencies to share, the configuration uses the helper function , which adds all dependencies found in the project’s . The skip list is used to opt out of sharing some of them or their secondary entry points.Remotes also define exposed EcmaScript modules that can be loaded into the shell. For this, the  node maps the paths of the modules to short names such as  in the example shown.The schematic also adds code to initialize Native Federation to the . For the host, this code points to the federation manifest:import { initFederation } from '@angular-architects/native-federation';initFederation('federation.manifest.json')  .catch(err => console.error(err))  .then(_ => import('./bootstrap'))  .catch(err => console.error(err));After initializing federation, the file , also created by the schematic, is loaded. It contains the usual code for bootstrapping Angular, e.g., via  when the application uses Standalone Components.To load a component or routing configuration exposed by a remote, traditional lazy loading is combined with Native Federation’s  function:import { loadRemoteModule } from '@angular-architects/native-federation';export const APP_ROUTES: Routes = [  [...]    path: 'flights',      loadRemoteModule('mfe1', './Component').then((m) => m.AppComponent),];Here,  is the key defined in the manifest, and  points to the respective exposed module in the remote’s federation configuration.More information on Native Federation can be found in this blog article and in the project’s readme, which also links to a tutorial.Micro Frontends promise significant advantages for enterprise-scale applications, such as enhanced team autonomy and independent deployment. These benefits make this architectural style particularly appealing in multi-team corporate environments where streamlined communication and rapid development cycles are critical. Additionally, they support gradual migration to new technologies and optimize build times by leveraging incremental builds.However, these advantages come with trade-offs. Micro Frontends can lead to inconsistent UI/UX, increased load times, and complex runtime integrations. Defining clear vertical boundaries and managing inter-application communication add to the challenge. Furthermore, frameworks like Angular, designed for compile-time optimization, face limitations in runtime integration scenarios. The Angular team, therefore, recommends alternatives such as splitting an application into libraries managed within a Monorepo, which aligns better with Angular’s strengths in type safety and efficient compilation.Module Federation has emerged as a popular solution to address some challenges by enabling lazy loading and dependency sharing. Native Federation builds on these concepts with a focus on standards and portability. It provides a seamless integration into the Angular CLI and its performant esbuild-based , which is also the foundation for advanced features like SSR and hydration.Together with this team at , Manfred Steyer helps companies around the globe establish maintainable Angular-based Architectures. He is a trainer, consultant, and Google Developer Expert (GDE) and writes for O’Reilly, the German Java Magazin, windows.developer, and Heise Developer. Furthermore, he regularly speaks at conferences.]]></content:encoded></item><item><title>Data Science Showdown: Which Tools Will Gain Ground in 2025</title><link>https://www.kdnuggets.com/data-science-showdown-tools-gain-ground-2025</link><author>Iván Palomares Carrascosa</author><category>dev</category><category>ai</category><enclosure url="https://www.kdnuggets.com/wp-content/uploads/kdn-tools-battle-2025.png" length="" type=""/><pubDate>Mon, 10 Feb 2025 15:00:02 +0000</pubDate><source url="https://www.kdnuggets.com/">KDNuggets blog</source><content:encoded><![CDATA[An analysis and discussion of the data science tools expected to gain prominence throughout the present year, and why.]]></content:encoded></item><item><title>Show HN: A unique generated maze to share with your valentine</title><link>https://love.berk.es/</link><author>berkes</author><category>dev</category><category>hn</category><pubDate>Mon, 10 Feb 2025 14:35:55 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[ is an art project. It is so called generative art: I write the software, and the software creates art autonomously. 
            A nice introduction into generative art is this talk by Tim Holman.
          
          In a gallery in London, I came across gorgeaus screenprints by Ricky Byrne. I loved their use of color and hand-produced feel. Attention for color, layout, tension.
          So I started experimenting with maze generation algorithms in Rust, with Nannou.
          In the process, I decided to make it a web app, for valentine, so everyone can create their own maze. And ported the Rust code to TypeScript in a tiny web app. The Coding Train has a great tutorial set on maze generation. I used the same common recursive backtracking algorithm, because the aesthetics are what I was looking for. 
          The names you provide are used to generate unique randomnes. 
          This is used in a maze generation algorithm to create a maze. 
          I deliberately chose to animate the maze generation, to show the process. It is a slow process, but I think it is interesting to watch it carve out your maze. 
          Saving, copying and sharing the maze is disabled until the maze is generated. Once the maze is generated, you can save, copy and share the maze. 
          Sharing, copying won't work on all browsers and is affected by some browser plugins or settings. The best result is on Chrome on Android. 
          , the only parameter you can provide is the names. The maze is generated based on these names, and the algorithm is fixed. This is by design. Only the two names determine the artwork. 
            However, you can change the source code, see below.
          
            The code is available on GitHub. Feel free to fork, change and improve it, or just have fun with it. Nannou for the original maze generationVite for the build and web stuff]]></content:encoded></item><item><title>Organizing Design System Component Patterns With CSS Cascade Layers</title><link>https://css-tricks.com/organizing-design-system-component-patterns-with-css-cascade-layers/</link><author>Ryan Trimble</author><category>frontend</category><pubDate>Mon, 10 Feb 2025 14:06:52 +0000</pubDate><source url="https://css-tricks.com/">CSS Tricks blog</source><content:encoded><![CDATA[I’m trying to come up with ways to make components more customizable, more efficient, and easier to use and understand, and I want to describe a pattern I’ve been leaning into using CSS Cascade Layers.I enjoy organizing code and find cascade layers a fantastic way to organize code explicitly as the cascade looks at it. The neat part is, that as much as it helps with “top-level” organization, cascade layers can be nested, which allows us to author more precise styles based on the cascade.The only downside here is your imagination, nothing stops us from over-engineering CSS. And to be clear, you may very well consider what I’m about to show you as a form of over-engineering. I think I’ve found a balance though, keeping things simple yet organized, and I’d like to share my findings.Let’s explore a pattern for writing components in CSS using a button as an example. Buttons are one of the more popular components found in just about every component library. There’s good reason for that popularity because buttons can be used for a variety of use cases, including:performing actions, like opening a drawer,navigating to different sections of the UI, andholding some form of state, such as  or .And buttons come in several different flavors of markup, like , , and . There are even more ways to make buttons than that, if you can believe it.On top of that, different buttons perform different functions and are often styled accordingly so that a button for one type of action is distinguished from another. Buttons also respond to state changes, such as when they are hovered, active, and focused. If you have ever written CSS with the BEM syntax, we can sort of think  within the context of cascade layers..button {}
.button-primary {}
.button-secondary {}
.button-warning {}
/* etc. */Okay, now, let’s write some code. Specifically, let’s create a few different types of buttons. We’ll start with a  class that we can set on any element that we want to be styled as, well, a button! We already know that buttons come in different flavors of markup, so a generic  class is the most reusable and extensible way to select one or all of them..button {
  /* Styles common to all buttons */
}This is where we can insert our very first cascade layer! Remember, the reason we want a cascade layer in the first place is that it allows us to set the CSS Cascade’s reading order when evaluating our styles. We can tell CSS to evaluate one layer first, followed by another layer, then another — all according to the order we want. This is an incredible feature that grants us superpower control over which styles “win” when applied by the browser.We’ll call this layer  because, well, buttons are a type of component. What I like about this naming is that it is generic enough to support other components in the future as we decide to expand our design system. It scales with us while maintaining a nice separation of concerns with other styles we write down the road that maybe aren’t specific to components./* Components top-level layer */
@layer components {
  .button {
    /* Styles common to all buttons */
  }
}Here is where things get a little weird. Did you know you can  cascade layers  classes? That’s totally a thing. So, check this out, we can introduce a new layer inside the  class that’s already inside its own layer. Here’s what I mean:/* Components top-level layer */
@layer components {

  .button {
    /* Component elements layer */
    @layer elements {
      /* Styles */
    }
  }
}This is how the browser interprets that layer within a layer at the end of the day:@layer components {
  @layer elements {
    .button {
      /* button styles... */
    }
  }
}So far, we’ve established a  class inside of a cascade layer that’s designed to hold any type of  in our design system. Inside that  is another cascade layer, this one for selecting the different types of buttons we might encounter in the markup. We talked earlier about buttons being , , or  and this is how we can individually select style each type.We can use the  pseudo-selector function as that is akin to saying, “If this  an  element, then apply these styles.”/* Components top-level layer */
@layer components {
  .button {
    /* Component elements layer */
    @layer elements {
      /* styles common to all buttons */

      &:is(a) {
        /* <a> specific styles */
      }

      &:is(button) {
        /* <button> specific styles */
      }

      /* etc. */
    }
  }
}Defining default button stylesI’m going to fill in our code with the common styles that apply to all buttons. These styles sit at the top of the  layer so that they are applied to any and all buttons, regardless of the markup. Consider them default button styles, so to speak./* Components top-level layer */
@layer components {
  .button {
    /* Component elements layer */
    @layer elements {
      background-color: darkslateblue;
      border: 0;
      color: white;
      cursor: pointer;
      display: grid;
      font-size: 1rem;
      font-family: inherit;
      line-height: 1;
      margin: 0;
      padding-block: 0.65rem;
      padding-inline: 1rem;
      place-content: center;
      width: fit-content;
    }
  }
}Defining button state stylesWhat should our default buttons do when they are hovered, clicked, or in focus? These are the different  that the button might take when the user interacts with them, and we need to style those accordingly.I’m going to create a new cascade sub-layer directly under the  sub-layer called, creatively, :/* Components top-level layer */
@layer components {
  .button {
    /* Component elements layer */
    @layer elements {
      /* Styles common to all buttons */
    }

    /* Component states layer */
    @layer states {
      /* Styles for specific button states */
    }
  }
}Pause and reflect here. What states should we target? What do we want to change for each of these states?Some states may share similar property changes, such as  and  having the same background color. Luckily, CSS gives us the tools we need to tackle such problems, using the  function to group property changes based on the state. Why  instead of ?  comes with zero specificity, meaning it’s a lot easier to override than , which takes the specificity of the element with the highest specificity score in its arguments. Maintaining low specificity is a virtue when it comes to writing scalable, maintainable CSS./* Component states layer */
@layer states {
  &:where(:hover, :focus-visible) {
    /* button hover and focus state styles */
  }
}But how do we update the button’s styles in a  way? What I mean by that is how do we make sure that the button  like it’s hovered or in focus? We could just slap a new background color on it, but ideally, the color should be related to the  set in the  layer.So, let’s refactor things a bit. Earlier, I set the  element’s  to . I want to reuse that color, so it behooves us to make that into a CSS variable so we can update it once and have it apply everywhere. Relying on variables is yet another virtue of writing scalable and maintainable CSS.I’ll create a new variable called --button-background-color that is initially set to  and then set it on the default button styles:/* Component elements layer */
@layer elements {
  --button-background-color: darkslateblue;

  background-color: var(--button-background-color);
  border: 0;
  color: white;
  cursor: pointer;
  display: grid;
  font-size: 1rem;
  font-family: inherit;
  line-height: 1;
  margin: 0;
  padding-block: 0.65rem;
  padding-inline: 1rem;
  place-content: center;
  width: fit-content;
}Now that we have a color stored in a variable, we can set that same variable on the button’s hovered and focused states in our other layer, using the relatively new  function to convert  to a lighter color when the button is hovered or in focus.Back to our  layer! We’ll first mix the color in a new CSS variable called :/* Component states layer */
@layer states {
  &:where(:hover, :focus-visible) {
    /* custom property only used in state */
    --state-background-color: color-mix(
      in srgb, 
      var(--button-background-color), 
      white 10%
    );
  }
}We can then apply that color as the background color by updating the  property./* Component states layer */
@layer states {
  &:where(:hover, :focus-visible) {
    /* custom property only used in state */
    --state-background-color: color-mix(
      in srgb, 
      var(--button-background-color), 
      white 10%
    );

    /* applying the state background-color */
    background-color: var(--state-background-color);
  }
}Defining modified button stylesAlong with  and  layers, you may be looking for some sort of variation in your components, such as . That’s because not all buttons are going to look like your default button. You might want one with a green background color for the user to confirm a decision. Or perhaps you want a red one to indicate danger when clicked. So, we can take our existing default button styles and modify them for those specific use cases If we think about the order of the cascade — always flowing from top to bottom — we don’t want the modified styles to affect the styles in the states layer we just made. So, let’s add a new  layer in between  and :/* Components top-level layer */
@layer components {

  .button {
  /* Component elements layer */
  @layer elements {
    /* etc. */
  }

  /* Component modifiers layer */
  @layer modifiers {
    /* new layer! */
  }

  /* Component states layer */
  @layer states {
    /* etc. */
  }
}Similar to how we handled , we can now update the --button-background-color variable for each button modifier. We could modify the styles further, of course, but we’re keeping things fairly straightforward to demonstrate how this system works.We’ll create a new class that modifies the  of the default button from  to . Again, we can rely on the  selector because we want the added specificity in this case. That way, we override the default button style with the modifier class. We’ll call this class  (green is a “successful” color) and feed it to :/* Component modifiers layer */
@layer modifiers {
  &:is(.success) {
    --button-background-color: darkgreen;
  }
}If we add the  class to one of our buttons, it becomes  instead  which is exactly what we want. And since we already do some -ing in the  layer, we’ll automatically inherit those hover and focus styles, meaning  is lightened in those states./* Components top-level layer */
@layer components {
  .button {
    /* Component elements layer */
    @layer elements {
      --button-background-color: darkslateblue;

      background-color: var(--button-background-color);
      /* etc. */

    /* Component modifiers layer */
    @layer modifiers {
      &:is(.success) {
        --button-background-color: darkgreen;
      }
    }

    /* Component states layer */
    @layer states {
      &:where(:hover, :focus) {
        --state-background-color: color-mix(
          in srgb,
          var(--button-background-color),
          white 10%
        );

        background-color: var(--state-background-color);
      }
    }
  }
}We can refactor any CSS property we need to modify into a CSS custom property, which gives us a lot of room for customization./* Components top-level layer */
@layer components {
  .button {
    /* Component elements layer */
    @layer elements {
      --button-background-color: darkslateblue;

      --button-border-width: 1px;
      --button-border-style: solid;
      --button-border-color: transparent;
      --button-border-radius: 0.65rem;

      --button-text-color: white;

      --button-padding-inline: 1rem;
      --button-padding-block: 0.65rem;

      background-color: var(--button-background-color);
      border: 
        var(--button-border-width) 
        var(--button-border-style) 
        var(--button-border-color);
      border-radius: var(--button-border-radius);
      color: var(--button-text-color);
      cursor: pointer;
      display: grid;
      font-size: 1rem;
      font-family: inherit;
      line-height: 1;
      margin: 0;
      padding-block: var(--button-padding-block);
      padding-inline: var(--button-padding-inline);
      place-content: center;
      width: fit-content;
    }

    /* Component modifiers layer */
    @layer modifiers {
      &:is(.success) {
        --button-background-color: darkgreen;
      }

      &:is(.ghost) {
        --button-background-color: transparent;
        --button-text-color: black;
        --button-border-color: darkslategray;
        --button-border-width: 3px;
      }
    }

    /* Component states layer */
    @layer states {
      &:where(:hover, :focus) {
        --state-background-color: color-mix(
          in srgb,
          var(--button-background-color),
          white 10%
        );

        background-color: var(--state-background-color);
      }
    }
  }
}P.S. Look closer at that demo and check out how I’m adjusting the button’s background using  — then go read Sara Joy’s “Come to the  Side” for a thorough rundown of how that works!What do you think? Is this something you would use to organize your styles? I can see how creating a system of cascade layers could be overkill for a small project with few components. But even a little toe-dipping into things like we just did illustrates how much power we have when it comes to managing — and even taming — the CSS Cascade. Buttons are deceptively complex but we saw how few styles it takes to handle everything from the default styles to writing the styles for their states and modified versions.]]></content:encoded></item><item><title>It’s Time To Rethink 6G</title><link>https://spectrum.ieee.org/5g-bandwidth</link><author>William Webb</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjEzMDA0MS9vcmlnaW4ucG5nIiwiZXhwaXJlc19hdCI6MTc0NDEyMzk5Mn0.jPunQzFQ_dBRCyydxSdaI9lAn88q3l2GB9hsCIKa5BM/image.png?width=600" length="" type=""/><pubDate>Mon, 10 Feb 2025 14:00:03 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[It’s not more bandwidth that users need]]></content:encoded></item><item><title>How to Join Strings in Python</title><link>https://realpython.com/python-join-string/</link><author>Real Python</author><category>dev</category><category>python</category><pubDate>Mon, 10 Feb 2025 14:00:00 +0000</pubDate><source url="https://realpython.com/atom.xml">Real Python Blog</source><content:encoded><![CDATA[Python’s built-in string method  lets you combine string elements from an iterable into a single string, using a separator that you specify. You call  on the separator, passing the iterable of strings to join.By the end of this tutorial, you’ll understand that:You use  in Python to  with a .A  is the piece of text you want inserted between each substring.To join list elements, you call  on a separator string, passing the list as the argument.inserts the separator between each list element to form a single string.The  method  that is the concatenation of the elements in the iterable, separated by the specified string.For smaller string concatenation tasks, you can use the concatenation operator () or  instead of .Python’s built-in  method gives you a quick and reliable way to combine multiple strings into a single string. Whether you need to format output or assemble data for storage,  provides a clean and efficient approach for joining strings from an iterable.In the upcoming sections, you’ll learn the basic usage of  to concatenate strings effectively. You’ll then apply that knowledge to real-world scenarios, from building CSV files to constructing custom log outputs. You’ll also discover some surprising pitfalls and learn how to avoid them. Test your knowledge with our interactive “How to Join Strings in Python” quiz. You’ll receive a score upon completion to help you track your learning progress:Test your understanding of Python's .join() string method for combining strings, handling edge cases, and optimizing performance.How to Join Strings in Python Using To use the string method , you call  on a separator string and pass an iterable of other strings as the argument. The method returns a single string, where it has inserted the separator string between each element of the iterable:In this example, you joined a list of words into one sentence, separated by spaces.At first glance, this usage might look a little backward. In many other string operations, you call the method on the main string that you want to manipulate. However, with , you call the method on the separator string, then pass the iterable of strings that you want to combine:This example achieves the same result as the earlier one but splits the process into two steps. Defining  separately makes the code more readable and avoids the potentially odd-looking syntax of calling  directly on a short string literal. Remember that  is a  method, which means that you’ll need to call it on a  string object. Keeping that in mind may help you remember why you need to call it on the separator string.You rarely see code that’s written in multiple steps where you assign the separator string to a variable, like you did in the example above.In typical usage, you call  directly on the separator string, all in one line. This approach is more concise and highlights that any valid string can be your separator, whether it’s whitespace, a dash, or a multicharacter substring.Join With an Empty StringWhat if you don’t want any separator at all, but just want to concatenate the items? One valid approach is to use an empty string () as the separator:This code snippet concatenates the letters in the list, forming a single string . Using an empty string as the separator is a great way to assemble strings without a delimiter between them.Since  can take any iterable of strings—not just lists—you can even pass a string as an argument. Because strings are iterable, Python iterates over each character in that string, considering each character as a separate element:By calling  on  and passing the string , you effectively place a comma between every single character in . This might not always be what you intend, but it’s a neat trick to keep in mind if you ever need to treat each character as a separate element.]]></content:encoded></item><item><title>Make Any File a Template Using This Hidden macOS Tool</title><link>https://css-tricks.com/make-any-file-a-template-using-this-hidden-macos-tool/</link><author>Geoff Graham</author><category>frontend</category><pubDate>Mon, 10 Feb 2025 13:54:00 +0000</pubDate><source url="https://css-tricks.com/">CSS Tricks blog</source><content:encoded><![CDATA[Stationery Pad is a handy way to nix a step in your workflow if you regularly use document templates on your Mac. The long-standing Finder feature essentially tells a file’s parent application to open a copy of it by default, ensuring that the original file remains unedited.This works for any kind of file, including HTML, CSS, JavaScriprt, or what have you. You can get there with + or right-click and select “Get info.”]]></content:encoded></item><item><title>Show HN: HTML visualization of a PDF file&apos;s internal structure</title><link>https://github.com/desgeeko/pdfsyntax/blob/main/docs/browse.md</link><author>desgeeko</author><category>dev</category><category>hn</category><pubDate>Mon, 10 Feb 2025 13:52:53 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[Hi,
I've just finished a rebuild of this function and added a lot of new features: info, page index, minimap, inverted index,... 
I think it may be useful for inspection, debugging or just as a learning resource showcasing the PDF file format.
This is a pet project and I would be happy to receive some feedback!
Regards]]></content:encoded></item><item><title>AWS Extends AI Agent Reach into the Realm of Testing Code</title><link>https://devops.com/aws-extends-ai-agent-reach-into-the-realm-of-testing-code/</link><author>Mike Vizard</author><category>devops</category><pubDate>Mon, 10 Feb 2025 13:45:46 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>@osherove about Pipeline Driven Organizations</title><link>https://www.youtube.com/watch?v=xOKEXaxRdfs</link><author>GOTO Conferences</author><category>video</category><category>learning</category><enclosure url="https://www.youtube.com/v/xOKEXaxRdfs?version=3" length="" type=""/><pubDate>Mon, 10 Feb 2025 13:01:31 +0000</pubDate><source url="https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA">GOTO Conferences yt</source><content:encoded><![CDATA[Check out the full version on our YouTube channel now! #GOTOcon #GOTOams #PipelineDriven #Cooperative #CooperativePipeline #CoOpsPipelines #ContinuousDelivery #CICD #DevOps #DevSecOps #DevTestOps #Programming #DevOps2 #SDLC #RoyOsherove #Viral #ViralShorts #GOTO

Full version available here:
https://youtu.be/zmA5fhV-FGk

Roy Osherove - Author of "The Art Of Unit Testing" and "Elastic Leadership: Growing Self-Organizing Teams" @osherove 

RECOMMENDED BOOK
Roy Osherove • The Art of Unit Testing • https://bit.ly/3obiKNB
Roy Osherove • Elastic Leadership • https://amzn.to/3fxEgID
Roy Osherove • Notes to a Software Team Leader • https://amzn.to/3wjroxJ
Goldratt & Cox • The Goal: A Process of Ongoing Improvement • https://amzn.to/3jqNpZv

CHANNEL MEMBERSHIP BONUS
Join this channel to get early access to videos & other perks:
https://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join

Looking for a unique learning experience?
Attend the next GOTO conference near you! Get your ticket at https://gotopia.tech
Sign up for updates and specials at https://gotopia.tech/newsletter

SUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.
https://www.youtube.com/user/GotoConferences/?sub_confirmation=1]]></content:encoded></item><item><title>Using Gemini 2.0 Pro Locally</title><link>https://www.kdnuggets.com/using-gemini-2-pro-locally</link><author>Abid Ali Awan</author><category>dev</category><category>ai</category><enclosure url="https://www.kdnuggets.com/wp-content/uploads/awan_gemini_20_pro_locally_7.png" length="" type=""/><pubDate>Mon, 10 Feb 2025 13:00:34 +0000</pubDate><source url="https://www.kdnuggets.com/">KDNuggets blog</source><content:encoded><![CDATA[Learn the easiest way to use a state-of-the-art Google experimental model locally.]]></content:encoded></item><item><title>AI Reveals Hidden Interior Design Rules of the Cell</title><link>https://spectrum.ieee.org/ai-protein-localization</link><author>Elie Dolgin</author><category>tech</category><enclosure url="https://spectrum.ieee.org/media-library/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy81NjI2NzY5MC9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTc1NDA3NDYzOH0.X1yTNpRDu8eaQKN-SOF9IdMARfQ4nVEn7DAzQ4sE4D8/image.jpg?width=600" length="" type=""/><pubDate>Mon, 10 Feb 2025 13:00:04 +0000</pubDate><source url="https://spectrum.ieee.org/">IEEE Spectrum</source><content:encoded><![CDATA[A new tool predicts where proteins fit, opening new frontiers in drug discovery]]></content:encoded></item><item><title>Transformational Power of Marginal Propensity to Reuse Undermined by Siren of One-off AI Projects</title><link>https://www.datasciencecentral.com/transformational-power-of-marginal-propensity-to-reuse-undermined-by-siren-of-one-off-ai-projects/</link><author>Bill Schmarzo</author><category>dev</category><category>ai</category><pubDate>Mon, 10 Feb 2025 12:59:15 +0000</pubDate><source url="https://www.datasciencecentral.com/">Data Science Central</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Pairwise Authentication of Humans</title><link>https://www.schneier.com/blog/archives/2025/02/pairwise-authentication-of-humans.html</link><author>Bruce Schneier</author><category>infosec</category><category>blog</category><pubDate>Mon, 10 Feb 2025 12:00:41 +0000</pubDate><source url="https://www.schneier.com/">Schneider on Security</source><content:encoded><![CDATA[Here’s an easy system for two humans to remotely authenticate to each other, so they can be sure that neither are digital impersonations.To mitigate that risk, I have developed this simple solution where you can setup a unique time-based one-time passcode (TOTP) between any pair of persons.Two people, Person A and Person B, sit in front of the same computer and open this page;
They input their respective names (e.g. Alice and Bob) onto the same page, and click “Generate”;
The page will generate two TOTP QR codes, one for Alice and one for Bob;
Alice and Bob scan the respective QR code into a TOTP mobile app (such as Authy or Google Authenticator) on their respective mobile phones;
In the future, when Alice speaks with Bob over the phone or over video call, and wants to verify the identity of Bob, Alice asks Bob to provide the 6-digit TOTP code from the mobile app. If the code matches what Alice has on her own phone, then Alice has more confidence that she is speaking with the real Bob.]]></content:encoded></item><item><title>Five Great DevOps Job Opportunities</title><link>https://devops.com/five-great-devops-job-opportunities-125/</link><author>Mike Vizard</author><category>devops</category><pubDate>Mon, 10 Feb 2025 09:18:21 +0000</pubDate><source url="https://devops.com/">DevOps.com</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>&amp;#x26;#xa;Reminder: 7-Zip &amp;#x26; MoW, (Mon, Feb 10th)</title><link>https://isc.sans.edu/diary/rss/31668</link><author></author><category>infosec</category><pubDate>Mon, 10 Feb 2025 07:27:53 +0000</pubDate><source url="https://isc.sans.edu/">Sans Edu Diaries</source><content:encoded><![CDATA[CVE-2025-0411 is a vulnerability in 7-zip that has been reported to be exploited in recent attacks. The problem is that Mark-of-Web (MoW) isn't propagated correctly: when extracted, a file inside a ZIP file inside another ZIP file will not have the MoW propagated from the outer ZIP file.That's good to know, but what I personally consider more important to know, is that MoW isn't propagated at all by 7-zip in its default configuration.I wrote about this a couple years ago in diary entry "7-Zip & MoW", when this new feature was introduced.You have to enable MoW propagation in the GUI or via the registry. And that is still the case with the latest versions of 7-zip.

 
 (c) SANS Internet Storm Center. https://isc.sans.edu Creative Commons Attribution-Noncommercial 3.0 United States License.]]></content:encoded></item><item><title>Show HN: Infinite horizontal arrays of text editors</title><link>https://zeminary.com/arrays/app.html</link><author>tsydenzhap</author><category>dev</category><category>hn</category><pubDate>Mon, 10 Feb 2025 01:25:05 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>TypeScript: extracting parts of composite types via infer</title><link>https://2ality.com/2025/02/typescript-infer-operator.html</link><author>Dr. Axel Rauschmayer</author><category>dev</category><category>frontend</category><category>blog</category><pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate><source url="https://feeds.feedburner.com/2ality">Axel Raushmayer</source><content:encoded><![CDATA[In this blog post, we explore how we can extract parts of composite types via the  operator.It helps if you are loosely familiar with conditional types. You can check out section “Conditional types” in “Tackling TypeScript” to read up on them.]]></content:encoded></item><item><title>A Blog, If You Can Keep It</title><link>https://fly.io/blog/a-blog-if-kept/</link><author>Fly</author><category>dev</category><pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate><source url="https://fly.io/blog/feed.xml">Fly.io blog</source><content:encoded><![CDATA[A boldfaced lede like this was a sure sign you were reading a carefully choreographed EffortPost from our team at Fly.io. We’re going to do less of those. Or the same amount but more of a different kind of post. Either way: launch an app on Fly.io today!Over the last 5 years, we’ve done pretty well for ourselves writing content for Hacker News. And that’s mostly been good for us. We don’t do conventional marketing, we don’t have a sales team, the rest of social media is atomized over 5 different sites. Writing pieces that HN takes seriously has been our primary outreach tool.There’s a recipe (probably several, but I know this one works) for charting a post on HN:Write an EffortPost, which is to say a dense technical piece over 2000 words long; within that rubric there’s a bunch of things that are catnip to HN, including runnable code, research surveys, and explainers. (There are also cat-repellants you learn to steer clear of.)
Assiduously avoid promotion. You have to write for the audience. We get away with sporadically including a call-to-action block in our posts, but otherwise: the post should make sense even if an unrelated company posted it after you went out of business.
Pick topics HN is interested in (it helps if all your topics are au courant for HN, and we’ve been verylucky in that regard). 
Like 5-6 more style-guide things that help incrementally. Probably 3 different teams writing for HN will have 3 different style guides with only like ½ overlap. Ours, for instances, instructs writers to swear.
I like this kind of writing. It’s not even a chore. But it’s become an impediment for us, for a couple reasons: the team serializes behind an “editorial” function here, which keeps us from publishing everything we want; worse, caring so much about our track record leaves us noodling on posts interminably (the poor Tigrises have been waiting for months for me to publish the piece I wrote about them and FoundationDB; take heart, this post today means that one is coming soon). But worst of all, I worried incessantly about us wearing out our welcome. To my mind, we’d have 1, maybe 2 bites at the HN apple in a given month, and we needed to make them count.That was dumb. I am dumb about a lot of things! I came around to understanding this after Kurt demanded I publish my blog post about BFAAS (Bash Functions As A Service), 500 lines of Go code that had generated 4500 words in my draft. It was only after I made the decision to stop gatekeeping this blog that I realized Simon Willison has been disproving my “wearing out the welcome” theory, day in and day out, for years. He just writes stuff about LLMs when it interests him. I mean, it helps that he’s a better writer than we are. But he’s not wasting time choreographing things.Back in like 2009, we had a blog at another company I was at. That blog drove a lot of business for us (and, on three occasions, almost killed me). It was not in the least bit optimized for HN. I like pretending to be a magazine feature writer, but I miss writing dashed-off pieces every day and clearing space for other people on the team to write as well.So this is all just a heads up: we’re trying something new. This is a very long and self-indulgent way to say “we’re going to write a normal blog like it’s 2008”, but that’s how broken my brain is after years of having my primary dopaminergic rewards come from how long Fly.io blog posts stay on the front page: I have to disclaim blogging before we start doing it, lest I fail to meet expectations. Like I said. I’m real dumb. But: looking forward to getting a lot more stuff out on the web for people to read this year!]]></content:encoded></item><item><title>Did Semgrep Just Get A Lot More Interesting?</title><link>https://fly.io/blog/semgrep-but-for-real-now/</link><author>Fly</author><category>dev</category><pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate><source url="https://fly.io/blog/feed.xml">Fly.io blog</source><content:encoded><![CDATA[This bit by Geoffrey Huntley is super interesting to me and, despite calling out that LLM-driven development agents like Cursor have something like a 40% success rate at actually building anything that passes acceptance criteria, makes me think that more of the future of our field belongs to people who figure out how to use this weird bags of model weights than any of us are comfortable with. I’ve been dinking around with Cursor for a week now (if you haven’t, I think it’s something close to malpractice not to at least take it — or something like it — for a spin) and am just now from this post learning that Cursor has this rules feature. The important thing for me is not how Cursor rules work, but rather how Huntley uses them. He turns them back on themselves, writing rules to tell Cursor how to organize the rules, and then teach Cursor how to write (under human supervision) its own rules.Cursor kept trying to get Huntley to use Bazel as a build system. So he had cursor write a rule for itself: “no bazel”. And there was no more Bazel. If I’d known I could do this, I probably wouldn’t have bounced from the Elixir project I had Cursor doing, where trying to get it to write simple unit tests got it all tangled up trying to make Mox work. But I’m burying the lead. Security people have been for several years now somewhat in love with a tool called Semgrep. Semgrep is a semantics-aware code search tool; using symbolic variable placeholders and otherwise ordinary code, you can write rules to match pretty much arbitary expressions and control flow. If you’re an appsec person, where you obviously go with this is: you build a library of Semgrep searches for well-known vulnerability patterns (or, if you’re like us at Fly.io, you work out how to get Semgrep to catch the Rust concurrency footgun of RWLocks inside if-lets).The reality for most teams though is “ain’t nobody got time for that”. But I just checked and, unsurprisingly, 4o seems to do reasonably well at generating Semgrep rules? Like: I have no idea if this rule is actually any good. But it looks like a Semgrep rule?What interests me is this: it seems obvious that we’re going to do more and more “closed-loop” LLM agent code generation stuff. By “closed loop”, I mean that the thingy that generates code is going to get to run the code and watch what happens when it’s interacted with. You’re just a small bit of glue code and a lot of system prompting away from building something like that right now: Chris McCord is building a thingy that generates whole Elixir/Phoenix apps and runs them as Fly Machines. When you deploy these kinds of things, the LLM gets to see the errors when the code is run, and it can just go fix them. It also gets to see errors and exceptions in the logs when you hit a page on the app, and it can just go fix them.With a bit more system prompting, you can get an LLM to try to generalize out from exceptions it fixes and generate unit test coverage for them. With a little bit more system prompting, you can probably get an LLM to (1) generate a Semgrep rule for the generalized bug it caught, (2) test the Semgrep rule with a positive/negative control, (3) save the rule, (4) test the whole codebase with Semgrep for that rule, and (5) fix anything it finds that way. That is a lot more interesting to me than tediously (and probably badly) trying to predict everything that will go wrong in my codebase a priori and Semgrepping for them. Which is to say: Semgrep — which I have always liked — is maybe a lot more interesting now? And tools like it?]]></content:encoded></item><item><title>Show HN: Searchable library of free audiobooks</title><link>https://booksearch.party/</link><author>libridev</author><category>dev</category><category>hn</category><pubDate>Sun, 9 Feb 2025 21:52:33 +0000</pubDate><source url="https://news.ycombinator.com/shownew">Show HN</source><content:encoded><![CDATA[
                If you're seeking free audiobooks and an efficient book finder, booksearch.party is an excellent resource. This platform aggregates a vast collection of audiobooks for free from various sources, including LibriVox, Project Gutenberg, and Lit2Go, into a user-friendly, searchable database.LibriVox offers a wide range of public domain audiobooks, read by volunteers worldwide. Their catalog includes thousands of titles across various genres, all available for free.Project Gutenberg provides over 60,000 free eBooks, many of which have been converted into audiobooks. This extensive collection includes classic literature and historical texts, all accessible without cost.Lit2Go is a free online collection of public domain fiction, poetry, and nonfiction audiobooks. It offers a user-friendly interface where users can browse texts and listen to individual chapters.By compiling these resources, booksearch.party serves as a comprehensive book finder, allowing users to easily search and access a wide array of free audiobooks. Whether you're interested in classic literature, historical documents, or educational materials, this platform simplifies the process of discovering and enjoying audiobooks at no cost.]]></content:encoded></item><item><title>This Was CS50: Crying Poor, Yale To Stop Offering Harvard&apos;s Famed CS50 Course</title><link>https://developers.slashdot.org/story/25/02/09/1922236/this-was-cs50-crying-poor-yale-to-stop-offering-harvards-famed-cs50-course?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>dev</category><category>slashdot</category><pubDate>Sun, 9 Feb 2025 20:34:00 +0000</pubDate><source url="https://developers.slashdot.org/">Slashdot - Dev</source><content:encoded><![CDATA[Slashdot has been covering Harvard's legendary introductory programming course "CS50" since it began setting attendance records in 2014. 

But now long-time Slashdot reader theodp brings some news about the course's fate over at Yale. From Yale's student newspaper:


After a decade of partnership with Harvard, Yale's CS50 course will no longer be offered starting in fall 2025.... One of Yale's largest computer science courses, jointly taught with Harvard University, was canceled during a monthly faculty meeting after facing budgetary challenges. [Yale's endowment is $40+ billion]... Since Yale started offering the course in 2015, CS50 has consistently seen enrollment numbers in the hundreds and was often the department's largest class.... According to [Yale instructor Ozan] Erat, the original [anonymous] donation that made CS50 possible ended in June 2024, and the cost of employing so many undergraduate learning assistants for the course had become unsustainable. 

theodp reminds us that CS50 and its progeny "will continue to live on in all their glory in-person and online at Harvard and edX."]]></content:encoded></item><item><title>What Do Linux Kernel Developers Think of Rust?</title><link>https://developers.slashdot.org/story/25/02/08/0455231/what-do-linux-kernel-developers-think-of-rust?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>EditorDavid</author><category>dev</category><category>slashdot</category><pubDate>Sun, 9 Feb 2025 17:34:00 +0000</pubDate><source url="https://developers.slashdot.org/">Slashdot - Dev</source><content:encoded><![CDATA[Keynotes at this year's FOSDEM included free AI models and systemd, reports Heise.de — and also a progress report from Miguel Ojeda, supervisor of the Rust integration in the Linux kernel.

Only eight people remain in the core team around Rust for Linux... Miguel Ojeda therefore launched a survey among kernel developers, including those outside the Rust community, and presented some of the more important voices in his FOSDEM talk. The overall mood towards Rust remains favorable, especially as Linus Torvalds and Greg Kroah-Hartman are convinced of the necessity of Rust integration. This is less about rapid progress and more about finding new talent for kernel development in the future. 
The reaction was mostly positive, judging by Ojeda's slides: 

- "2025 will be the year of Rust GPU drivers..." — Daniel Almedia 

- "I think the introduction of Rust in the kernel is one of the most exciting development experiments we've seen in a long time." — Andrea Righi

 - "[T]he project faces unique challenges. Rust's biggest weakness, as a language, is that relatively few people speak it. Indeed, Rust is not a language for beginners, and systems-level development complicates things even more. That said, the Linux kernel project has historically attracted developers who love challenging software — if there's an open source group willing to put the extra effort for a better OS, it's the kernel devs." — Carlos Bilbao 

- "I played a little with [Rust] in user space, and I just absolutely hate the cargo concept... I hate having to pull down other code that I do not trust. At least with shared libraries, I can trust a third party to have done the build and all that... [While Rust should continue to grow in the kernel], if a subset of C becomes as safe as Rust, it may make Rust obsolete..." Steven Rostedt 

Rostedt wasn't sure if Rust would attract more kernel contributors, but did venture this opinion. "I feel Rust is more of a language that younger developers want to learn, and C is their dad's language." 

But still "contention exists within the kernel development community between those pro-Rust and -C camps," argues The New Stack, citing the latest remarks from kernel maintainer Christoph Hellwig (who had earlier likened the mixing of Rust and C to cancer). Three days later Hellwig reiterated his position again on the Linux kernel mailing list:

"Every additional bit that another language creeps in drastically reduces the maintainability of the kernel as an integrated project. The only reason Linux managed to survive so long is by not having internal boundaries, and adding another language completely breaks this. You might not like my answer, but I will do everything I can do to stop this. This is NOT because I hate Rust. While not my favourite language it's definitively one of the best new ones and I encourage people to use it for new projects where it fits. I do not want it anywhere near a huge C code base that I need to maintain." 

But the article also notes that Google "has been a staunch supporter of adding Rust to the kernel for Linux running in its Android phones."
The use of Rust in the kernel is seen as a way to avoid memory vulnerabilities associated with C and C++ code and to add more stability to the Android OS. "Google's wanting to replace C code with Rust represents a small piece of the kernel but it would have a huge impact since we are talking about billions of phones," Ojeda told me after his talk. 

In addition to Google, Rust adoption and enthusiasm for it is increasing as Rust gets more architectural support and as "maintainers become more comfortable with it," Ojeda told me. "Maintainers have already told me that if they could, then they would start writing Rust now," Ojeda said. "If they could drop C, they would do it...." 

Amid the controversy, there has been a steady stream of vocal support for Ojeda. Much of his discussion also covered statements given by advocates for Rust in the kernel, ranging from lead developers of the kernel and including Linux creator Linus Torvalds himself to technology leads from Red Hat, Samsung, Google, Microsoft and others.]]></content:encoded></item><item><title>Flipper Culture Is Wilder Than You Think</title><link>https://www.youtube.com/watch?v=GFB8IuWXK68</link><author>Jack Rhysider</author><category>infosec</category><category>video</category><category>podcast</category><enclosure url="https://www.youtube.com/v/GFB8IuWXK68?version=3" length="" type=""/><pubDate>Sun, 9 Feb 2025 17:00:15 +0000</pubDate><source url="https://www.youtube.com/channel/UCMIqrmh2lMdzhlCPK5ahsAg">Darknet diaries</source><content:encoded><![CDATA[Flipper Culture Is Wilder Than You Think

#flipping #truecrime #podcast 

Listen to the full episode 🎙 Darknet Diaries Ep. 153: Bike Index]]></content:encoded></item></channel></rss>