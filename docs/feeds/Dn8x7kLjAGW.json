{"id":"Dn8x7kLjAGW","title":"Learning","displayTitle":"Learning","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":35,"items":[{"title":"Beyond Chat: Bringing Models to The Canvas • Lu Wilson • YOW! 2024","url":"https://www.youtube.com/watch?v=pLvMsGG7zE8","date":1739624470,"author":"GOTO Conferences","guid":677,"unread":true,"content":"<article>This presentation was recorded at YOW! Australia 2024. #GOTOcon #YOW\nhttps://yowcon.com\n\nLu Wilson - Software Engineer at tldraw @TodePond \n\nRESOURCES\nhttps://bsky.app/profile/todepond.com\nhttps://mastodon.social/@TodePond\nhttps://twitter.com/TodePond\nhttps://www.todepond.com\n\nLinks\nhttps://tldraw.dev\nhttps://makereal.tldraw.com\nhttps://drawfast.tldraw.com\nhttps://teach.tldraw.com\n\nABSTRACT\nWhenever a new technology appears, our first instinct as developers is to offer \"text\" as the primary method of interaction. This has happened throughout computing history, with the computer terminal, with early smartphones, and now it's happening again with AI.\n\nAt tldraw, we’ve been working on moving AI interaction away from the chat-based interface, towards a richer canvas environment. It hasn't been easy! I'll show you all the challenges we've faced, and how we're currently overcoming them. Some of the solutions have been surprising. [...]\n\nTIMECODES\n00:00 Intro\n00:58 The canvas\n06:16 Beyond chat?\n07:09 Demo\n09:25 Demo: Make Real\n14:52 Demo: Draw Fast\n19:01 Demo: Teach\n27:28 Demo: Computer\n35:42 Demo: Fight Simulator\n28:13 Conclusion\n41:10 Outro\n\nRead the full abstract here:\nhttps://yowcon.com/brisbane-2024/sessions/3533\n\nRECOMMENDED BOOKS\nAlex Castrounis • AI for People and Business • https://amzn.to/3NYKKTo\nPhil Winder • Reinforcement Learning • https://amzn.to/3t1S1VZ\nHolden Karau, Trevor Grant, Boris Lublinsky, Richard Liu &amp; Ilan Filonenko • Kubeflow for Machine Learning • https://amzn.to/3JVngcx\nKelleher &amp; Tierney • Data Science (The MIT Press Essential Knowledge series) • https://amzn.to/3AQmIRg\nLakshmanan, Robinson &amp; Munn • Machine Learning Design Patterns • https://amzn.to/2ZD7t0x\nLakshmanan, Görner &amp; Gillard • Practical Machine Learning for Computer Vision • https://amzn.to/3m9HNjP\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#AI #GenAI #GenerativeAI #ArtificialIntelligence #ChatGPT #ML #MakeRealtldraw #MakeReal #tldraw #Teachtldraw #AIDriven&nbsp;#LuWilson #YOWcon\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":2626,"flags":null,"enclosureUrl":"https://www.youtube.com/v/pLvMsGG7zE8?version=3","enclosureMime":"","commentsUrl":null},{"title":"How Neurodiversity Can Help Your Life, Team & Business • Katrine Hald Kjeldsen • GOTO 2024","url":"https://www.youtube.com/watch?v=CIBlbmk1U_c","date":1739538016,"author":"GOTO Conferences","guid":676,"unread":true,"content":"<article>This presentation was recorded at GOTO Copenhagen 2024. #GOTOcon #GOTOcph\nhttps://gotocph.com\n\nKatrine Hald Kjeldsen - Neuro-inclusion Specialist @katrinehaldkjeldsen6145 \n\nORIGINAL TALK TITLE\nChange Your Life, Help Your Team &amp; Boost Your Business with Neurodiversity\n\nRESOURCES\nhttps://www.linkedin.com/in/katrinekjeldsen\n\nABSTRACT\nAre you a little spicy? If not, your colleague most probably is. Either way, this talk is for you.\n\nIn this session, Katrine will shine a light on neurodiversity and the transformative impact it can have on your life, your team, and your business.\n\nNeurodiversity is not only abundantly prevalent in tech organizations; it is a powerful, often underutilized asset that manifests in every corner of our work environments. It is paramount that we adjust our understanding and strategies around this diversity to thrive. Katrine will explore how neurodiversity shows up in the most unexpected ways and why it’s both surprisingly easy and surprisingly challenging to harness its potential in team collaboration and leadership.\n\nThis talk will emphasize practical daily strategies to strengthen collaboration and leverage the advantages of neurodiversity in everyday work contexts, whether it’s adopting clear communication methods, allowing flexible work arrangements, or designing team workflows that play to diverse cognitive strengths. [...]\n\nTIMECODES\n00:00 Intro\n04:58 Neurodivergent\n16:37 Dopamine &amp; ADHD\n21:25 Autism\n24:47 Diverse perspective\n34:40 Conclusions\n42:52 Outro\n\nDownload slides and read the full abstract here:\nhttps://gotocph.com/2024/sessions/3472\n\nRECOMMENDED BOOKS\nPh.D. Thomas Armstrong • The Power of Neurodiversity • https://amzn.to/3OrbPOg\nMaureen Dunne • The Neurodiversity Edge • https://amzn.to/494dGSE\nEmily Kircher-Morris &amp; Amanda Morin • Neurodiversity-Affirming Schools • https://amzn.to/3ZjJRdI\nNancy Doyle &amp; Almuth McDowall • Neurodiversity Coaching • https://amzn.to/4fGDdnn\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#Neurodiversity #Neurodivergent #Autism #ADHD #ParallelPlay #DeepCuriosity #Diversity #Inclusivity #Autism #DiverseTeams #Teams #KatrineHaldKjeldsen\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":2759,"flags":null,"enclosureUrl":"https://www.youtube.com/v/CIBlbmk1U_c?version=3","enclosureMime":"","commentsUrl":null},{"title":"Learning Microsoft Azure • Jonah Andersson & Håkan Silfvernagel","url":"https://www.youtube.com/watch?v=gEQZBmoN8LM","date":1739529660,"author":"GOTO Conferences","guid":675,"unread":true,"content":"<article>This interview was recorded for the GOTO Book Club.\nhttp://gotopia.tech/bookclub\n\nRead the full transcription of the interview here\n (https://gotopia.tech/episodes/339) \nJonah Andersson - Senior Azure Consultant at Solidify &amp; Author of \"Learning Microsoft Azure\"\nHåkan Silfvernagel - Senior AI Architect at Sopra Steria &amp; Microsoft AI MVP\n\nRESOURCES\nJonah\nhttps://x.com/cjkodare\nhttps://medium.com/@jonah.andersson\nhttps://www.linkedin.com/in/jonahandersson\nhttps://github.com/jonahandersson\nhttps://jonahandersson.tech\n\nHåkan\nhttps://x.com/agrevlis\nhttps://www.linkedin.com/in/hakansilfvernagel\nhttps://sessionize.com/hakan-silfvernagel\n\nLinks\nhttps://www.meetup.com/azureusergroupsundsvallsverige\nhttps://podcasters.spotify.com/pod/show/extendwomenintechpodcast\n\nDESCRIPTION\nJonah Andersson, interviewed by Håkan Silfvernagel, shared her experiences writing \"Learning Microsoft Azure\". With a focus on making the content accessible for beginners, she carefully structured the book to cover essential Azure topics such as cloud computing fundamentals, security, and AI, while drawing on insights from experts in her network, including Microsoft Certified Trainers and MVPs.\n\nOver nearly two years, Jonah Andersson navigated the challenges of a rapidly evolving tech landscape, incorporating emerging trends like generative AI. Passionate about fostering inclusivity in tech, she emphasized the importance of mentorship and community support for underrepresented groups, particularly women. Looking ahead, Jonah Andersson expressed a desire to write a biography that reflects her life lessons and professional journey in technology.\n\nRECOMMENDED BOOKS\nJonah Andersson • Learning Microsoft Azure\n (https://amzn.to/48cOw3T) Adrienne Braganza Tacke • \"Looks Good to Me\": Constructive Code Reviews\n (https://amzn.to/3E75XrD) Adrienne Braganza Tacke • Coding for Kids\n (https://amzn.to/3Ukd5Gw) Martin Fowler • Refactoring\n (https://amzn.to/3EVcHXQ) Matthew Skelton &amp; Manuel Pais • Team Topologies (http://amzn.to/3sVLyLQ) \n\n\nBluesky (https://bsky.app/profile/gotocon.com) \nTwitter (https://twitter.com/GOTOcon) \nInstagram (https://www.instagram.com/goto_con) \nLinkedIn (https://www.linkedin.com/company/goto-) \nFacebook (https://www.facebook.com/GOTOConferences) \n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket: gotopia.tech (https://gotopia.tech) \n\nSUBSCRIBE TO OUR YOUTUBE CHANNEL (https://www.youtube.com/user/GotoConferences/?sub_confirmation=1)  - new videos posted daily!</article>","contentLength":2691,"flags":null,"enclosureUrl":"https://www.youtube.com/v/gEQZBmoN8LM?version=3","enclosureMime":"","commentsUrl":null},{"title":"Coding Interviews were HARD Until I Learned These 20 Tips","url":"https://blog.algomaster.io/p/20-coding-interviews-tips","date":1739467827,"author":"Ashish Pratap Singh","guid":719,"unread":true,"content":"<p>I gave my first  in 2016—and failed. I failed the next five interviews as well before finally landing my first job at .</p><p>Since then, I’ve interviewed with many companies and faced my fair share of rejections. However, over the years, my failure rate in coding interviews dropped significantly.</p><p>By 2022, with just 1.5 months of focused preparation, I successfully cleared interviews at  and .</p><p>Surprisingly, my success wasn’t due to a dramatic improvement in problem-solving skills. The real game-changer was my approach— and  during the interview.</p><p>In this article, I’ll share  that made coding interviews significantly easier for me.</p><p>These tips cover everything you need to know, including:</p><ul><li><p>How to systematically approach coding interview problems</p></li><li><p>Key concepts and patterns you should know</p></li><li><p>The type of problems you should practice</p></li><li><p>How to choose the right algorithm for a given problem</p></li><li><p>Techniques to optimize your solution</p></li><li><p>How to communicate your thought process effectively</p></li></ul><p>By applying these strategies, you’ll be able to tackle coding interviews with confidence and massively increase your chances of success.</p><p>In a coding interview, interviewers want to see how well you , , and  under pressure.</p><p>Here's a breakdown of what they look for:</p><ol><li><p><strong>Understanding the problem</strong>: Do you ask clarifying questions instead of making assumptions to ensure you fully understand the problem?</p></li><li><p>: Can you decompose the problem into smaller, manageable parts?</p></li><li><p>: Can you design an optimal solution in terms of time and space complexity?</p></li><li><p>: Do you handle edge cases like empty inputs, duplicates, large values, or special conditions?</p></li><li><p>: Can you explain why one approach is better than another?</p></li><li><p>: Do you have a strong grasp of data structures and algorithms, and can you choose the right one for the problem?</p></li><li><p>Can you quickly compute the time and space complexity of your solution?</p></li><li><p><strong>Explaining your thought process</strong>: Can you clearly articulate your approach and why it works?</p></li><li><p>: Are you receptive to hints and able to adjust your approach accordingly?</p></li><li><p>: Do you follow good coding practices (meaningful variable names, proper indentation, modular functions etc..)?</p></li><li><p><strong>Improving the initial solution</strong>: Can you optimize and refine your first solution when prompted?</p></li><li><p>Are you able to tackle variations of the original problem?</p></li><li><p>Can you manually walk through your code with sample inputs to verify correctness?</p></li></ol><p>Most coding interviews last </p><p>Depending on the company and interviewer, you may be asked to solve 2-3easy/medium problems or 1 hard problem with follow-ups.</p><p>Lets assume you are given one problem, with a follow up in a 45-minute interview. Here’s how you can optimally allocate your time:</p><ol><li><p>The interviewer may ask you to introduce yourself. Prepare a concise 1-2 minute introduction that highlights your background, experience, and key strengths. Practice it beforehand so that you can deliver it smoothly.</p></li><li><p><strong>Understand the Problem (5-10 mins):  </strong>Carefully read the problem statement, ask clarifying questions, and walk through sample inputs and expected outputs.</p></li><li><p><strong>Plan the Approach (10-20 mins): </strong>Brainstorm possible solutions, evaluate trade-offs, and discuss time and space complexity.</p></li><li><p><strong>Implement the Code (20-30 mins): </strong>Write a clean, modular and readable code.</p></li><li><p>Dry-run your code with sample inputs, debug any issues, and ensure edge cases are handled.</p></li><li><p><strong>Follow-ups and Wrap Up (35-45 mins): </strong>Answer follow up questions, and ask thoughtful questions to the interviewer about the company, role, or team.</p></li></ol><p>One of the biggest mistakes candidates make in coding interviews is jumping into coding too soon.</p><p>If you don't fully understand the question, you might end up solving the </p><p>Here’s how to ensure you grasp the problem before coding:</p><h4><strong>Read the Problem Carefully</strong></h4><p>Take a moment to absorb the problem statement. Rephrase it in your own words to confirm your understanding. </p><p>Identify the expected input/output format and any hidden constraints.</p><p>If anything is unclear, ask questions before diving into the solution. Interviewers appreciate when you seek clarity. Never assume details that aren’t explicitly mentioned in the problem statement.</p><p>Common clarifications include:</p><ul><li><p>Are there duplicate values?</p></li><li><p>Can the input be empty? If so, what should the output be?</p></li><li><p>Should the solution handle negative numbers?</p></li><li><p>Should the output maintain the original order of elements?</p></li><li><p>Is the graph directed or undirected?</p></li><li><p>Does the input contain only lowercase English letters, or can it have uppercase, digits, or special characters?</p></li><li><p>What should happen if multiple solutions exist? Should I return any valid solution, or does the problem have specific requirements?</p></li></ul><h4><strong>Walk Through Input/Output Examples</strong></h4><p>Once you understand the problem statement and constraints, go over a few input and output examples to make sure you get it.</p><p>Draw them out if it helps, especially for visual data structures like trees or graphs.</p><p>Try to take examples that cover different scenarios of the problem. Think about any  that might come up.</p>","contentLength":4908,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/61c3f6c0-4027-4d37-b4a7-a30fc183fa12_1602x1032.png","enclosureMime":"","commentsUrl":null},{"title":"A new tool for visualizing Rust lifetimes","url":"https://www.youtube.com/watch?v=NV6Xo_el_2o","date":1739458834,"author":"Let's Get Rusty","guid":662,"unread":true,"content":"<article>See how RustOwl can help you understand lifetimes in a real Rust codebase. A brand-new tool designed to visualize Rust lifetimes and make learning Rust easier. Check it out and see how it can change the way you write Rust!\n\nFree Rust training: https://letsgetrusty.com/bootcamp\n\nRustOwl: https://github.com/cordx56/rustowl\n\nCorrections:\n- Bacon is a CLI tool, not a library. Check it out here: https://github.com/Canop/bacon</article>","contentLength":424,"flags":null,"enclosureUrl":"https://www.youtube.com/v/NV6Xo_el_2o?version=3","enclosureMime":"","commentsUrl":null},{"title":"Better Value Sooner Safer Happier • Simon Rohrer & Eduardo da Silva • GOTO 2025","url":"https://www.youtube.com/watch?v=8oqT5tjqf-0","date":1739451611,"author":"GOTO Conferences","guid":674,"unread":true,"content":"<article>This interview was recorded for the GOTO Book Club. #GOTOcon #GOTObookclub\nhttp://gotopia.tech/bookclub\n\nRead the full transcription of the interview here:\nhttps://gotopia.tech/episodes/356\n\nSimon Rohrer - Co-Author of \"Better Value Sooner Safer Happier\" &amp; Senior Director at Saxo Bank @SimonRohrer \nEduardo da Sliva - Independent Consultant on Organization, Architecture, and Leadership Modernization @emgsilva \n\nRESOURCES\nSimon\nhttps://bsky.app/profile/simon.bvssh.com\nhttps://mastodon.social/@simonr\nhttps://x.com/sirohrer\nhttps://www.linkedin.com/in/simonrohrer\nhttps://github.com/sirohrer\nhttps://www.soonersaferhappier.com\n\nEduardo\nhttps://bsky.app/profile/esilva.net\nhttps://mastodon.social/@eduardodasilva\nhttps://x.com/emgsilva\nhttps://www.linkedin.com/in/emgsilva\nhttps://github.com/emgsilva\nhttps://esilva.net\n\nLinks\nhttps://youtu.be/oOYddleBsuk\nhttps://youtu.be/ESOaDiv3lXA\nhttps://youtu.be/B3b4tremI5o\nhttps://youtu.be/WPCrGYjrJ1Y\nhttps://youtu.be/48g7CRlMUD8\nhttps://youtu.be/86-Dy5U2p5Y\nhttps://youtu.be/l1tyfb5we7I\nhttps://youtu.be/B7JqZh9A2pQ\nhttps://youtu.be/yuEbZYKgZas\nhttps://youtu.be/hBxV3Cr0lXY\nhttps://youtu.be/HKS5sKsIkkc\n\nDESCRIPTION\nEduardo da Silva and Simon Rohrer discuss the core ideas of \"Better Value Sooner Safer Happier\" diving into the principles of organizational transformation.\n\nSimon shares insights on the shift from output-driven to outcome-focused thinking, emphasizing value over productivity, and the need for continuous improvement in delivery speed, stakeholder satisfaction, and safety.\nThe conversation explores key concepts like technical excellence, integrating safety into development, and balancing incremental changes with occasional larger steps.\n\nSimon Rohrer discusses organizational patterns and the importance of decentralizing decision-making, recommending a flexible, context-driven approach to transformation. The session concludes with practical advice on how to start implementing these ideas, using the book’s map to guide organizations toward the right transformation strategy based on their specific goals.\n\nTIMECODES\n00:00 Intro\n01:55 The journey to \"Better Value Sooner Safer Happier\"\n06:14 Antipatterns &amp; patterns for business agility\n14:09 Embracing continuous attention to technical excellence\n24:43 Embedding safety in continuous delivery\n33:31 Balancing incremental change &amp; big leaps in transformation\n40:18 Exploring organizational patterns\n44:12 Outro\n\nRECOMMENDED BOOKS\nJonathan Smart, Zsolt Berend, Myles Ogilvie &amp; Simon Rohrer • Sooner Safer Happier • https://amzn.to/3Emm9p2\nStephen Fishman &amp; Matt McLarty • Unbundling the Enterprise • https://amzn.to/3W2EcXw\nCarliss Y. Baldwin • Design Rules, Vol. 2 • https://amzn.to/4hdllRr\nMatthew Skelton &amp; Manuel Pais • Team Topologies • http://amzn.to/3sVLyLQ\nForsgren, Humble &amp; Kim • Accelerate: The Science of Lean Software and DevOps • https://amzn.to/3tCz1xO\nKim, Humble, Debois, Willis &amp; Forsgren • The DevOps Handbook • https://amzn.to/47oAf3l\n\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#BetterValue #SoonerSaferHappier #OrganizationalTransformation #BusinessAgility #Agility #ValueOverProductivity #ContinuousDelivery #ContinuousAttention #Safety #TechnicalExcellence #BookClub\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":3802,"flags":null,"enclosureUrl":"https://www.youtube.com/v/8oqT5tjqf-0?version=3","enclosureMime":"","commentsUrl":null},{"title":"Apache Kafka Meets Apache Iceberg: Real-Time Data Streaming • Kasun Indrasiri • GOTO 2024","url":"https://www.youtube.com/watch?v=bzVjBu5nhyM","date":1739365258,"author":"GOTO Conferences","guid":673,"unread":true,"content":"<article>This presentation was recorded at GOTO Chicago 2024. #GOTOcon #GOTOchgo\nhttps://gotochgo.com\n\nKasun Indrasiri - Author of \"Microservices for the Enterprise\" @kasunindrasiri \n\nORIGINAL TALK TITLE\nKafka Meets Iceberg: Real-Time Data Streaming into Modern Data Lakes &amp; Warehouses\n\nRESOURCES\nhttps://twitter.com/kasunindrasiri\nhttps://medium.com/@kasunindrasiri\nhttps://www.linkedin.com/in/kasun-indrasiri\n\nABSTRACT\nIn this talk, we'll explore how Kafka serves as a powerful platform for capturing real-time streaming data and how organizations are increasingly adopting Apache Iceberg table format to store data in data lakes and data warehouses. We'll discuss the key benefits of using Apache Iceberg tables in your data lake such as schema evolution, ACID transactions, hidden partitioning, time traveling and efficient querying.\n\nNext, we'll dive into how to efficiently stream data from Kafka into Iceberg-based data lakes. Confluent Tableflow will be introduced as a potential solution for streamlining the ingestion of Kafka streams into Iceberg tables within your data lake. A live demo will showcase the seamless integration of Kafka with Iceberg, equipping participants with practical knowledge to enhance their data architectures for powerful real-time analytics.\n\n• The role of Kafka in real-time data streaming\n• Why Apache Iceberg is essential for data lakes and data warehouses\n• Iceberg fundamentals: Core concepts and key features\n• Streaming data from Kafka to Iceberg tables in data lakes\n• Use case: Leveraging Confluent Tableflow to stream Kafka data into data lakes and warehouses [...]\n\nTIMECODES\n00:00 Intro\n01:10 Overview\n02:06 Kafka is the standard for operational data\n03:41 Iceberg for analytical data in data lakes\n04:42 Apache Iceberg\n05:27 Why Iceberg?\n12:24 Structure of an Iceberg table\n16:40 Streaming to data lakes is complicated\n20:47 Tableflow materialize Kafka topics as Iceberg tables\n23:47 Demo\n35:37 Outro\n\nDownload slides and read the full abstract here:\nhttps://gotochgo.com/2024/sessions/3370\n\nRECOMMENDED BOOKS\nKasun Indrasiri &amp; Sriskandarajah Suhothayan • Design Patterns for Cloud Native Applications • https://amzn.to/3szGx0p\nKasun Indrasiri &amp; Danesh Kuruppu • gRPC: Up and Running • https://amzn.to/3sBGBJJ\nKasun Indrasiri &amp; Prabath Siriwardena • Microservices for the Enterprise • https://amzn.to/40FhxkQ\nKasun Indrasiri • Beginning WSO2 ESB • https://amzn.to/3sx9NF0\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#ApacheKafka #Kafka #ApacheIceberg #Iceberg #AmazonAthena #DataStreaming #DataLake #DataWarehouse #ACIDTransactions #KafkaStreams #Confluent #Tableflow #ConfluentTableflow #KasunIndrasiri\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":3277,"flags":null,"enclosureUrl":"https://www.youtube.com/v/bzVjBu5nhyM?version=3","enclosureMime":"","commentsUrl":null},{"title":"The difference between metrics and scorers","url":"https://www.youtube.com/watch?v=67KMDSitw1M","date":1739356864,"author":"probabl","guid":747,"unread":true,"content":"<article>You can easily write custom metric functions for scikit-learn, but you need to take an extra step if you want to use those metrics in a hyperparameter search. To add a number there, you need to use a scorer instead. The goal of this video is to explain the difference and to show how to leverage the `make_scorer` helper utility here.\n\nWebsite: https://probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nBluesky: https://bsky.app/profile/probabl.bsky.social\nTwitter: https://x.com/probabl_ai\nDiscord: https://discord.probabl.ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\n#probabl</article>","contentLength":719,"flags":null,"enclosureUrl":"https://www.youtube.com/v/67KMDSitw1M?version=3","enclosureMime":"","commentsUrl":null},{"title":"From XP to TCR & Limbo • Kent Beck & Daniel Terhorst-North • GOTO 2025","url":"https://www.youtube.com/watch?v=48g7CRlMUD8","date":1739278805,"author":"GOTO Conferences","guid":672,"unread":true,"content":"<article>This interview was recorded for GOTO Unscripted. #GOTOcon #GOTOunscripted\nhttps://gotopia.tech\n\nRead the full transcription of this interview here:\nhttps://gotopia.tech/articles/355\n\nKent Beck - Software Engineer &amp; Creator of Extreme Programming @KentLBeck \nDaniel Terhorst-North - Originator of Behavior Driven Development (BDD) &amp; Principal at Dan North &amp; Associates @daniel-terhorst-north \n\nRESOURCES\nKent\nhttps://bsky.app/profile/kentbeck.bsky.social\nhttps://www.kentbeck.com\nhttps://github.com/KentBeck\nhttps://twitter.com/KentBeck\nhttps://www.linkedin.com/in/kentbeck\n\nDaniel\nhttps://bsky.app/profile/tastapod.com\nhttps://twitter.com/tastapod\nhttps://linkedin.com/in/danielterhorstnorth\nhttps://github.com/tastapod\nhttps://mastodon.social/@tastapod\nhttp://dannorth.net/blog\n\nLinks\nhttps://youtu.be/tgaKAF_eiOg\nhttps://youtu.be/k9lwn-RqEsE\nhttps://youtu.be/Saaz6D1azlU\nhttps://youtu.be/lOcXdXRxFgA\nhttps://youtu.be/klqo1oPdbpM\nhttps://youtu.be/ShAzlhS_TCg\nhttps://youtu.be/86-Dy5U2p5Y\nhttps://youtu.be/yuEbZYKgZas\nhttps://youtu.be/-4Ybn0Cz2oU\nhttps://youtu.be/XShcmCBK93E\n\nDESCRIPTION\nKent Beck and Daniel Terhorst-North reflect on the evolution of Extreme Programming (XP) and its lasting impact on agile software development. They explore the importance of short feedback loops, iterative learning, and adaptability in different phases of product development, as outlined in Beck’s 3X model (Exploration, Expansion, Extraction).\n\nKent introduces radical techniques like Test &amp;&amp; Commit || Revert (TCR) and Limbo, which challenge traditional coding and collaboration practices by emphasizing tiny, safe iterations. The conversation ties in psychological safety, a key factor in high-performing teams, as outlined by Amy C. Edmondson.\n\nKent envisions a future where software development scales in real-time, pushing teams to embrace faster experimentation, responsibility, and continuous learning in a rapidly evolving tech landscape. [...]\n\nTIMECODES\n00:00 Intro\n00:53 Extreme Programming (XP)\n03:09 The power of feedback &amp; Continuous Delivery\n07:44 Evolution of XP: From practices to people\n11:39 3X Model: Managing risk through software evolution\n25:02 TCR, Limbo &amp; the future of software development\n33:28 The importance of psychological safety for high-performing teams\n39:32 Outro\n\nRECOMMENDED BOOKS\nKent Beck • Tidy First? • https://amzn.to/4gscjjK\nKent Beck &amp; Cynthia Andres • Extreme Programming Explained • https://amzn.to/3sBASDG\nAmy C. Edmondson • The Fearless Organization • https://amzn.to/3Q5QPxu\nAmy C. Edmondson • Right Kind of Wrong • https://amzn.to/3CRbiTD\nJez Humble &amp; David Farley • Continuous Delivery • https://amzn.to/452ZRky\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#XP #EmpiricalDesign #ExtremeProgramming #Explore #Expand #Extract #3X #TDD #TCR #Limbo #PsychologicalSafety #Programming #SoftwareEngineering #KentBeck #DanNorth #DanielTerhorstNorth\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":3509,"flags":null,"enclosureUrl":"https://www.youtube.com/v/48g7CRlMUD8?version=3","enclosureMime":"","commentsUrl":null},{"title":"Introducing the CrossValidationReport","url":"https://www.youtube.com/watch?v=R6dRAE83Y2c","date":1739277902,"author":"probabl","guid":746,"unread":true,"content":"<article>Skore version 0.6 introduces the `CrossValidationReport` that provides you with an `EstimatorReport` for each fold of your cross-validation, enabling you to inspect your estimator on each fold.\n\n------\nLinks:\n\nskore v0.6 documentation:\nhttps://skore.probabl.ai/0.6/index.html\n\nskore GitHub repository:\nhttps://github.com/probabl-ai/skore\n\nWebsite: https://probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nTwitter: https://x.com/probabl_ai\nBluesky: https://bsky.app/profile/probabl.bsky.social\nDiscord: https://discord.probabl.ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\n#probabl</article>","contentLength":722,"flags":null,"enclosureUrl":"https://www.youtube.com/v/R6dRAE83Y2c?version=3","enclosureMime":"","commentsUrl":null},{"title":"Stateful vs. Stateless Architecture","url":"https://blog.algomaster.io/p/stateful-vs-stateless-architecture","date":1739263586,"author":"Ashish Pratap Singh","guid":718,"unread":true,"content":"<p>When a client interacts with a server, there are two ways to handle it:</p><ul><li><p> The client includes all necessary data in each request, so the server doesn’t store any prior information.</p></li><li><p> The server retains some data from previous requests, making future interactions dependent on past state.</p></li></ul><blockquote><p>In software systems,  refers to any data that persists across requests, such as user sessions, shopping carts, or authentication details.</p></blockquote><p>The choice between stateless and stateful architecture can affect scalability, performance, complexity, and cost.</p><p>In this article, we’ll break down both the approaches, their advantages and trade-offs, and when to use each—with real-world examples.</p><p>If you’re finding this newsletter valuable and want to deepen your learning, consider becoming a .</p><p>As a paid subscriber, you'll receive an <strong>exclusive deep-dive article</strong> every week, access to a structured100+topics and interview questions, and other .</p><p>In a , the system remembers client or process data () across multiple requests.</p><p>Once a client connects, the server holds on to certain details—like user preferences, shopping cart contents, or authentication sessions—so the client doesn’t need to resend everything with each request.</p><p>Stateful systems typically store the state data in a database or in-memory storage.</p><blockquote><p> During online shopping, when you add items to your cart, the website remembers your selections. If you navigate away to browse more items and then return to your cart, your items are still there, waiting for you to check out.</p></blockquote><h2>Common Patterns in Stateful Architecture</h2><p>If you use  session storage (i.e., each app server keeps its own sessions locally), you can configure your load balancer for “sticky sessions.” </p><p>This means: Once a client is assigned to , all subsequent requests from that client are routed to .</p><blockquote><p>: If Server A fails, the user’s session data is lost or the user is forced to re-log in. Sticky sessions are also less flexible when scaling because you can’t seamlessly redistribute user traffic to other servers.</p></blockquote><h3>2. Centralized Session Store</h3><p>A more robust approach is to store session data in a  or  store (e.g., Redis). </p><ul><li><p>: All servers can access and update session data for any user. Any server can handle any request, because the session data is not tied to a specific server’s memory.</p></li></ul><blockquote><p>: You introduce network overhead and rely on an external storage. If the centralized storage fails, you lose session data unless you have a fallback strategy.</p></blockquote><ul><li><p><strong>Personalized Experiences:</strong> Stateful systems can deliver highly tailored interactions, as they remember user preferences and past actions.</p></li><li><p> Users can seamlessly resume activities where they left off, even if they disconnect and reconnect.</p></li><li><p> Certain operations can be faster because the server already possesses necessary data.</p></li></ul><ul><li><p> Maintaining state for a large number of users can become resource-intensive and complex, as each server needs to keep track of specific sessions.</p></li><li><p> Managing and synchronizing state across multiple servers (if needed) introduces additional challenges.</p></li><li><p> If a server holding a user's state fails, their session data might be lost.</p></li></ul><ul><li><p><strong>E-commerce Shopping Carts</strong> – Stores cart contents and user preferences across multiple interactions, even if the user navigates away and returns.</p></li><li><p><strong>Video Streaming Services (Netflix, YouTube)</strong> – Remembers user watch progress, recommendations, and session data for a seamless experience.</p></li><li><p><strong>Messaging Apps (WhatsApp, Slack)</strong> – Maintains active user sessions and message history for real-time communication.</p></li></ul><p>In a  architecture, the server does  preserve client-specific data between individual requests.</p><ul><li><p>Each request is treated as , with no memory of previous interactions.</p></li><li><p>Every request must include <strong>all necessary information</strong> for processing.</p></li><li><p>Once the server responds, it <strong>discards any temporary data</strong> used for that request.</p></li></ul><blockquote><p>: Most  follow a stateless design. For instance, when you request weather data from a public API, you must provide all required details (e.g., location) in each request. The server processes it, sends a response, and forgets the interaction.</p></blockquote><h2>Common Patterns in Stateless Architecture</h2><h3>1. Token-Based Authentication (JWT)</h3><p>A very popular way to implement statelessness is through tokens, particularly  (JSON Web Tokens):</p><ol><li><p><strong>Client Authenticates Once</strong>: The user logs in using credentials (username/password) for the first time, and the server issues a signed .</p></li><li><p>: The client includes JWT token in each request (e.g., <code>Authorization: Bearer &lt;token&gt;</code> header).</p></li><li><p>: The server validates the token’s signature and any embedded claims (e.g., user ID, expiry time).</p></li><li><p>: The server does  need to store session data; it just verifies the token on each request.</p></li></ol><blockquote><p>Many APIs, including OAuth-based authentication systems, use JWTs to enable stateless, scalable authentication.</p></blockquote><p>Stateless architectures benefit from , ensuring that repeated requests produce the same result. This prevents inconsistencies due to network retries or client errors.</p><p> A  request with the same payload  updates the user’s data but doesn’t create duplicates.</p><blockquote><p>Idempotent APIsensures consistency and reliability, especially in distributed systems where requests might be retried automatically.</p></blockquote><ul><li><p> Stateless systems are inherently easier to scale horizontally. New servers can be added effortlessly, as they don't need to maintain any specific user sessions.</p></li><li><p> Since servers don't track state, the architecture is generally simpler and easier to manage.</p></li><li><p> The failure of a single server won't disrupt user sessions, as data isn't tied to specific servers.</p></li><li><p>With no session data stored on the server, you free up memory that would otherwise be reserved for session management.</p></li><li><p><strong>Easier to Cache Responses: </strong>Since requests are self-contained, caching layers (like CDNs) can more easily store and serve responses.</p></li></ul><ul><li><p> Stateless systems can't provide the same level of personalization or context awareness as stateful systems without additional effort (like using cookies or tokens).</p></li><li><p>The client must keep track of the authentication token or relevant data. If it loses the token, it must re-authenticate.</p></li><li><p> Every request needs to carry all the required information, potentially leading to larger payloads.</p></li></ul><ol><li><p><strong>Microservices Architecture: </strong>Each service handles requests independently, relying on external databases or caches instead of maintaining session data.</p></li><li><p><strong>Public APIs (REST, GraphQL): </strong>Clients send tokens with each request, eliminating the need for server-side sessions.</p></li><li><p>Tokens are securely stored on the device and sent with every request to authenticate users.</p></li><li><p>Stateless endpoints make caching easier since responses depend only on request parameters, not stored session data. A CDNcan cache and serve repeated requests, improving performance and reducing backend load.</p></li></ol><p>There's no one-size-fits-all answer when choosing between stateful and stateless architectures.</p><p>The best choice depends on your application’s needs, scalability goals, and user experience expectations.</p><h3><strong>When to Choose Stateful Architecture</strong></h3><p>Stateful systems are ideal when <strong>user context and continuity</strong> are critical. </p><p>Consider a stateful approach if your application:</p><ul><li><p>Requires personalization (e.g., user preferences, session history)</p></li><li><p>Needs real-time interactions (e.g., chat applications, multiplayer gaming)</p></li><li><p>Manages multi-step workflows (e.g., online banking transactions, checkout processes)</p></li><li><p>Must retain authentication sessions for security and convenience</p></li></ul><blockquote><p> A shopping cart in an e-commerce app should persist, so users don’t have to re-add items after refreshing the page.</p></blockquote><h3><strong>When to Choose Stateless Architecture</strong></h3><p>Stateless systems work best when <strong>scalability, simplicity, and resilience</strong> are top priorities. </p><p>Use a stateless approach if your application:</p><ul><li><p>Handles a high volume of requests and needs to scale efficiently</p></li><li><p>Doesn’t require storing client-specific data between requests</p></li><li><p>Needs fast, distributed processing without server dependencies</p></li><li><p>Must ensure reliability and failover readiness</p></li></ul><blockquote><p> A weather API doesn’t need to remember previous requests. Each query includes the location, and the response is processed independently.</p></blockquote><h3><strong>Hybrid Approaches: The Best of Both Worlds</strong></h3><p>Many modern applications  stateful and stateless components for flexibility.</p><p>This hybrid approach allows:</p><ul><li><p>Stateless APIs for core functionality, ensuring high scalability</p></li><li><p>Stateful sessions for personalization, improving user experience</p></li><li><p>External session stores (e.g., Redis) to manage state while keeping app servers stateless</p></li></ul><blockquote><p> A video streaming platform (e.g., Netflix) uses a stateless backend for streaming but retains stateful user sessions to track watch history and recommendations.</p></blockquote><p>If you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.</p><p>If you have any questions or suggestions, leave a comment.</p><div data-attrs=\"{&quot;url&quot;:&quot;https://blog.algomaster.io/p/how-i-mastered-data-structures-and-algorithms?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjo4MzYwMjc0MywicG9zdF9pZCI6MTQ1NjU1MjUyLCJpYXQiOjE3MjE1MjE3MzEsImV4cCI6MTcyNDExMzczMSwiaXNzIjoicHViLTIyMDIyNjgiLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.2cNY811YEugd5iH9XJQhakBzyahGqF7PcATBlFj5J2w&quot;,&quot;text&quot;:&quot;Share&quot;}\" data-component-name=\"CaptionedButtonToDOM\"><div><p>This post is public so feel free to share it.</p></div></div><p> If you’re enjoying this newsletter and want to get even more value, consider becoming a .</p><p>I hope you have a lovely day!</p>","contentLength":8861,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/7e4801c3-e3aa-4ab6-8fe6-759af4a1f91a_1684x1196.png","enclosureMime":"","commentsUrl":null},{"title":"@osherove about Pipeline Driven Organizations","url":"https://www.youtube.com/watch?v=xOKEXaxRdfs","date":1739192491,"author":"GOTO Conferences","guid":671,"unread":true,"content":"<article>Check out the full version on our YouTube channel now! #GOTOcon #GOTOams #PipelineDriven #Cooperative #CooperativePipeline #CoOpsPipelines #ContinuousDelivery #CICD #DevOps #DevSecOps #DevTestOps #Programming #DevOps2 #SDLC #RoyOsherove #Viral #ViralShorts #GOTO\n\nFull version available here:\nhttps://youtu.be/zmA5fhV-FGk\n\nRoy Osherove - Author of \"The Art Of Unit Testing\" and \"Elastic Leadership: Growing Self-Organizing Teams\" @osherove \n\nRECOMMENDED BOOK\nRoy Osherove • The Art of Unit Testing • https://bit.ly/3obiKNB\nRoy Osherove • Elastic Leadership • https://amzn.to/3fxEgID\nRoy Osherove • Notes to a Software Team Leader • https://amzn.to/3wjroxJ\nGoldratt &amp; Cox • The Goal: A Process of Ongoing Improvement • https://amzn.to/3jqNpZv\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":1226,"flags":null,"enclosureUrl":"https://www.youtube.com/v/xOKEXaxRdfs?version=3","enclosureMime":"","commentsUrl":null},{"title":"Lessons From the Design & Implementation of a CSV Library • George Wilson • YOW! 2018","url":"https://www.youtube.com/watch?v=5nZ1AiWWnUE","date":1739106013,"author":"GOTO Conferences","guid":670,"unread":true,"content":"<article>This presentation was recorded at YOW! 2018. #GOTOcon #YOW\nhttps://yowcon.com\n\nGeorge Wilson - Functional Programming Engineer at CSIRO's Data61\n\nRESOURCES\nhttps://github.com/gwils\nhttps://wils.online\nhttps://www.linkedin.com/in/george-wilson-49a54457\n\nRECOMMENDED BOOKS\nDaniel Higginbotham • Clojure for the Brave and True • https://amzn.to/38tZjsF\nUlisses Almeida • Learn Functional Programming with Elixir • https://amzn.to/389grn6\nNeal Ford • Functional Thinking • https://amzn.to/3DdP35B\nPetricek &amp; Skeet • Real-World Functional Programming • https://amzn.to/38diF4M\nVenkat Subramaniam • Functional Programming in Java • https://amzn.to/2WlOXIt\nCristian Salcescu • Functional Programming in JavaScript • https://amzn.to/3y75jBS\nRichard Feldman • Elm in Action • https://amzn.to/387kujI\nJeremy Fairbank • Programming Elm • https://amzn.to/2WhZCE8\nWolfgang Loder • Web Applications with Elm • https://amzn.to/3jblQ3q\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#CSVLibrary CSV #Haskell #FunctionalProgramming #Programming #Coding #FunctionalTraining #GeorgeWilson #Functional #HaskellTutorial #YOWcon\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":1745,"flags":null,"enclosureUrl":"https://www.youtube.com/v/5nZ1AiWWnUE?version=3","enclosureMime":"","commentsUrl":null},{"title":"The Perfect Language • Bodil Stokke • YOW! 2017","url":"https://www.youtube.com/watch?v=EaQ3qMa_8UI","date":1739019623,"author":"GOTO Conferences","guid":669,"unread":true,"content":"<article>This presentation was recorded at YOW! 2017. #GOTOcon #YOW\nhttps://yowcon.com\n\nBodil Stokke - Functional Programming Hipster &amp; Computer Programmer at Sinopia Olive @bodilpwnz \n\nABSTRACT\nThere’s no such thing as the perfect programming language. I’m sorry, but there isn’t, and I’ll explain why.\n\nOn the other hand, if you were set the task of designing the perfect language, how close could you get, how would you go about it, and what would it look like in the end? We’re going to explore this problem space with a tour along the bleeding edge of modern language design, giving you some insight into what’s already out there, what tradeoffs each new idea comes with, and what sort of tools you might be working with in a future where programming is slightly less awful than it is today. [...]\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#SoftwareEngineering #Complexity #SoftwareDevelopment #Programming #BodilStokke #ProgrammingLanguages #FunctionalProgramming #YOWcon\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":1588,"flags":null,"enclosureUrl":"https://www.youtube.com/v/EaQ3qMa_8UI?version=3","enclosureMime":"","commentsUrl":null},{"title":"The Most Important Programming Invention In 20 Years • Dave Farley • GOTO 2025","url":"https://www.youtube.com/watch?v=6Il6jLf49BM","date":1738933208,"author":"GOTO Conferences","guid":668,"unread":true,"content":"<article>We’re so pleased to having teamed up with Dave Farley, author of “Continuous Delivery” and frequent GOTO Conferences speaker, for a monthly video series featuring ideas about continuous delivery, DevOps, test-driven development, BDD, software engineering and software development in general.\n\nFind plenty more from Dave on his @ContinuousDelivery channel.\n\nDave Farley - Continuous Delivery &amp; DevOps Pioneer, Award-winning Author, Founder &amp; Director of Continuous Delivery Ltd.\n\nRESOURCES\nDave\nhttps://bsky.app/profile/davefarley77.bsky.social\nhttps://www.continuous-delivery.co.uk\nhttps://linkedin.com/in/dave-farley-a67927\nhttps://twitter.com/davefarley77\nhttp://www.davefarley.net\n\nABSTRACT\nWe asked thousands of software developers what they thought was the best invention or discovery in software development in the last 20 years, what have been the software development trends and software engineering technologies that have set the scene for software engineering in 2024?\n\nIn this episode, Dave Farley, best-selling author of “Continuous Delivery” and “Modern Software Engineering\" explores the top 5 new software engineering technologies that have shaped how we work and gives his impressions on why and how these things have influenced the world of software development.\n\nCD TRAINING COURSES\nIf you want to learn Continuous Delivery and DevOps skills, check out Dave Farley's courses\nhttps://bit.ly/DFTraining \n\nRECOMMENDED BOOKS &amp; LINKS\nYou can grab Dave Farley's new book 'Continuous Delivery Pipelines' here:\nhttps://leanpub.com/cd-pipelines\nDavid Farley • Modern Software Engineering • https://amzn.to/3GI468M\nDave Farley &amp; Jez Humble • Continuous Delivery • https://amzn.to/3ocIHwd\nForsgren, Humble &amp; Kim • Accelerate • https://amzn.to/367RI5o\nGojko Adzic &amp; David Evans • 50 Quick Ideas to Improve your User Stories • https://leanpub.com/50quickideas\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#GOTOxDaveFarley #SRE #Git #GitHub #VersionControl #TDD #LLMs #Programming #DaveFarley #GOTO #GOTOcon #Complexity  #ProgrammingTutorial #SoftwareEngineering\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":2631,"flags":null,"enclosureUrl":"https://www.youtube.com/v/6Il6jLf49BM?version=3","enclosureMime":"","commentsUrl":null},{"title":"Your YouTube Channel to Learn System Design 🔥","url":"https://newsletter.systemdesign.one/p/system-design-youtube-channel","date":1738928139,"author":"Neo Kim","guid":42,"unread":true,"content":"<p>I created a YouTube channel to help you learn system design.</p><p>• System design fundamentals.</p><p>• System design interview preparation tips.</p><p>• Simplified engineering case studies with visuals.</p><p>• System design deep dives with real-world software architecture.</p><p>You'll receive a new video every 10 days.</p><p>I'll make it your main video channel for system design over time.</p><p>And I want to help you become good at work + ace system design interviews:</p><p>Please show your support,</p>","contentLength":461,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/83516d21-e16e-4561-861e-e83b9bf60224_1280x720.gif","enclosureMime":"","commentsUrl":null},{"title":"Innovations in Serverless & Event-Driven Solutions • Ben Ellerby & Julian Wood","url":"https://www.youtube.com/watch?v=ZY52xzWkZFU","date":1738928040,"author":"GOTO Conferences","guid":667,"unread":true,"content":"<article>This interview was recorded for GOTO Unscripted.\nhttps://gotopia.tech\n\nRead the full transcription of this interview here\n (https://gotopia.tech/articles/338) \nBen Ellerby - Founder of aleio &amp; AWS Serverless Hero\nJulian Wood - Serverless Developer Advocate at AWS\n\nRESOURCES\nBen\nhttps://twitter.com/EllerbyBen\nhttps://www.linkedin.com/in/benjaminellerby\nhttps://github.com/BenEllerby\nhttps://medium.com/@bene_37069\n\nJulian\nhttps://twitter.com/julian_wood\nhttp://www.wooditwork.com\nhttps://www.linkedin.com/in/julianrwood\n\nDESCRIPTION\nJulian Wood and Ben Ellerby explore the challenges and innovations in event-driven architectures, generative AI, and serverless technologies. They emphasize the importance of well-structured event schemas and the role of platform teams in reducing cognitive load for developers.\n\nBen Ellerby highlights the potential of generative AI in modernizing legacy codebases and discusses the resurgence of event-driven architectures, driven by improved tools and frameworks that promote decoupling and efficiency.\n\nThe conversation also touches on the future of serverless computing, edge computing, and the significance of data management in global applications, underscoring a transformative shift toward more scalable and flexible cloud solutions.\n\nRECOMMENDED BOOKS\nDavid Anderson, Marck McCann &amp; Michael O'Reilly • The Value Flywheel Effect\n (https://amzn.to/3VcHxC7) Adam Bellemare • Building Event-Driven Microservices\n (https://amzn.to/3WfNKfM) Lauren Maffeo • Designing Data Governance from the Ground Up\n (https://amzn.to/3QhIlnV) Vaughn Vernon &amp; Tomasz Jaskula • Strategic Monoliths &amp; Microservices\n (https://amzn.to/3AcUscj) Gregor Hohpe • Platform Strategy\n (https://amzn.to/4cxfYdb) Peter Sbarski • Serverless Architectures on AWS\n (https://amzn.to/3hJzEUM) Michael Stack • Event-Driven Architecture in Golang\n (https://amzn.to/3G5e8ST) James Urquhart • Flow Architectures (https://amzn.to/3Tyz8cY) \n\n\nBluesky (https://bsky.app/profile/gotocon.com) \nTwitter (https://twitter.com/GOTOcon) \nInstagram (https://www.instagram.com/goto_con) \nLinkedIn (https://www.linkedin.com/company/goto-) \nFacebook (https://www.facebook.com/GOTOConferences) \n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket: gotopia.tech (https://gotopia.tech) \n\nSUBSCRIBE TO OUR YOUTUBE CHANNEL (https://www.youtube.com/user/GotoConferences/?sub_confirmation=1)  - new videos posted daily!</article>","contentLength":2615,"flags":null,"enclosureUrl":"https://www.youtube.com/v/ZY52xzWkZFU?version=3","enclosureMime":"","commentsUrl":null},{"title":"Design a Real-Time Gaming Leaderboard - System Design Interview","url":"https://blog.algomaster.io/p/design-real-time-gaming-leaderboard","date":1738852955,"author":"Ashish Pratap Singh","guid":717,"unread":true,"content":"<p>A  is a ranked list of players, typically sorted by a specific metric such as score, points or level.</p><p> In a  leaderboard, updates happen almost instantly:</p><ol><li><p>A player’s score changes (e.g., after scoring a point or defeating an opponent).</p></li><li><p>The system updates that player’s rank immediately.</p></li><li><p>Other players can see the updated position without waiting or refreshing.</p></li></ol><p>This real-time aspect makes the user experience more dynamic and engaging. </p><p>However, it also introduces significant , such as:</p><ul><li><p>Efficiently retrieving Top-N players (e.g., Top 10 or Top 100).</p></li><li><p>Allowing players to quickly find their own rank without scanning the entire leaderboard.</p></li></ul><p>In this article, we will explore how to design a , , and  that can support above queries and enhance the user experience.</p><p>Before diving into the design, lets clearly define the functional and non-functional requirements of our real-time gaming leaderboard..</p><ul><li><p>: Display top N players (e.g., top 10, top 100) on the leaderboard and update it in real-time.</p></li><li><p>: Allow a player to query their current rank without scanning the entire leaderboard.</p></li><li><p> Provide the ability to retrieve a “slice” of the leaderboard around a specific player (e.g., ranks 45 to 55 if the player is rank 50).</p></li><li><p> Players can view past game scores and historical leaderboards for previous matches.</p></li></ul><h3>Non-Functional Requirements</h3><ul><li><p> Score changes should reflect immediately in the leaderboard.</p></li><li><p>: Leaderboard queries should return the results in milliseconds.</p></li><li><p>: System should support thousands of concurrent players submitting scores and fetching rankings.</p></li></ul><h3>Approach to Designing the System</h3><p>The most challenging aspects of building a real-time leaderboard is . Choosing the right storage system is critical to ensuring that queries can be executed efficiently without performance bottlenecks.</p><p>To simplify the design process, we will follow below approach:</p><ol><li><p>Clearly define the input/output structure of leaderboard queries and updates.</p></li><li><p><strong>Define the High-Level Architecture: </strong>Identify core system components and their interactions.</p></li><li><p>Choose the appropriate storage model optimized for fast leaderboard lookups and real-time updates.</p></li></ol><p>To support real-time leaderboard operations, we define a set of  that allow players to update scores, retrieve rankings, and query nearby ranks efficiently.</p><p>Updates a player's score incrementally</p><p>: <code>POST /leaderboard/score/update</code></p><pre><code><code>{\n  \"playerId\": \"player123\",\n  \"scoreDelta\": 50\n}</code></code></pre><blockquote><p>We will use relative score updates () rather than absolute updates.</p></blockquote><pre><code><code>{\n  \"playerId\": \"player123\",\n  \"updatedScore\": 1000,\n  \"currentRank\": 10\n}</code></code></pre><p>Retrieves the top-N players from the leaderboard, ranked by their scores.</p><p>: <code>GET /leaderboard/top?n=10</code></p><p>:  = number of top players to fetch (default 10, max 100, etc.)</p><pre><code><code>{\n  \"leaderboardId\": \"global\",\n  \"topPlayers\": [\n    { \"playerId\": \"playerA\", \"score\": 1500, \"rank\": 1 },\n    { \"playerId\": \"playerB\", \"score\": 1490, \"rank\": 2 },\n    // ...\n  ]\n}</code></code></pre><p>Allows a player to retrieve their current rank without scanning the entire leaderboard.</p><p>: <code>GET /leaderboard/rank/{playerId}</code></p><pre><code><code>{\n  \"playerId\": \"player123\",\n  \"score\": 1000,\n  \"rank\": 10\n}</code></code></pre><p>Retrieves players ranked around a given player, allowing for comparison with competitors of similar skill levels.</p><p>: <code>GET /leaderboard/nearby/{playerId}?range=5</code></p><p>:  indicates how many ranks above and below to fetch (e.g., 5 above, 5 below).</p><pre><code><code>{\n  \"playerId\": \"player123\",\n  \"startRank\": 45,\n  \"endRank\": 55,\n  \"players\": [\n    { \"playerId\": \"playerX\", \"score\": 1020, \"rank\": 44 },\n    { \"playerId\": \"player123\", \"score\": 1000, \"rank\": 45 },\n    { \"playerId\": \"playerZ\", \"score\": 995,  \"rank\": 46 },\n    // ...\n  ]\n}</code></code></pre><p> If a player is ranked 50th, this API allows them to see players ranked 45-55 for a competitive comparison.</p><h3>2.5 WebSockets for Real-Time Updates</h3><p>While REST APIs are good for on-demand queries, WebSockets or Server-Sent Events (SSEs) can push real-time leaderboard updates to subscribed users.</p><p>Players would subscribe to leaderboard updates, and receive updates instantly without polling.</p>","contentLength":3933,"flags":null,"enclosureUrl":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbc07561-4165-42b9-a375-caaa33a2b6e3_2208x1668.png","enclosureMime":"","commentsUrl":null},{"title":"@stevemcconnell578: Should Engineering Managers Code?","url":"https://www.youtube.com/watch?v=iUraWhJUXHI","date":1738846863,"author":"GOTO Conferences","guid":666,"unread":true,"content":"<article>Check out the full version on our YouTube channel now! #GOTOcon #GOTObookclub #SoftwareEngineering #CodeComplete #Complexity #Creativity #Construx #Refactoring #Debugging #ComputerScience #SteveMcConnell #Programming #SoftwareConstruction #Agile #Waterfall #Viral #ViralShorts #GOTO\n\nFull version available here:\nhttps://youtu.be/STpbPXW9-pA\n\nSteve McConnell - Author of “Code Complete” &amp; CEO at Construx Software @stevemcconnell578 \n\nRECOMMENDED BOOK\nSteve McConnell • Code Complete • https://amzn.to/3Zgu9gr\nSteve McConnell • Software Estimation • https://amzn.to/41ZbGHn\nSteve McConnell • Rapid Development • https://amzn.to/3J6e5rl\nSteve McConnell • Professional Software Development • https://amzn.to/3IVKUa8\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":1202,"flags":null,"enclosureUrl":"https://www.youtube.com/v/iUraWhJUXHI?version=3","enclosureMime":"","commentsUrl":null},{"title":"Remembering the order of the train_test_split","url":"https://www.youtube.com/watch?v=wb4bKSHiDik","date":1738836414,"author":"probabl","guid":745,"unread":true,"content":"<article>The page for the `train_test_split` function is the most visited page on the scikit-learn website. The reason, we suspect, is because folks often forget the order of arrays that come out. We know that `X_train` comes first, but then what? Is it `y_train` or `X_test`? This video explains the reasoning and also does a deep dive on the implementation.\n\nWebsite: https://probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nTwitter: https://x.com/probabl_ai\nBluesky: https://bsky.app/profile/probabl.bsky.social\nDiscord: https://discord.probabl.ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\n#probabl</article>","contentLength":735,"flags":null,"enclosureUrl":"https://www.youtube.com/v/wb4bKSHiDik?version=3","enclosureMime":"","commentsUrl":null},{"title":"Living on the Edge • Erica Pisani • GOTO 2024","url":"https://www.youtube.com/watch?v=K6c29Gtlpjs","date":1738760424,"author":"GOTO Conferences","guid":665,"unread":true,"content":"<article>This presentation was recorded at GOTO Chicago 2024. #GOTOcon #GOTOchgo\nhttps://gotochgo.com\n\nErica Pisani - Senior Software Enginee at Float Financial @ericapisani2789 \n\nRESOURCES\nhttps://bsky.app/profile/ericapisani.dev\nhttps://hachyderm.io/@ericapisani\nhttps://twitter.com/ericapisani\nhttps://linkedin.com/in/erica-pisani-5b77ab84\nhttps://github.com/ericapisani\nhttps://www.ericapisani.dev\n\nABSTRACT\nEdge computing is not a new concept but in the past few years we're seeing powerful tools made more easily available at the edge.\nThis talk will go into what the edge is, why its increasing availability and adoption is exciting, and ways we can start incorporating the edge into our applications. [...]\n\nTIMECODES\n00:00 Intro\n01:01 What is \"the edge\"?\n06:54 Ada's pet supplies\n14:42 Planetscale\n15:55 Cloudflare\n21:40 AWS Snowball \n34:29 Limitations\n35:50 Lever-edge-ing the edge\n38:04 Green software resources\n39:18 Outro\n\nDownload slides and read the full abstract here:\nhttps://gotochgo.com/2024/sessions/3374\n\nRECOMMENDED BOOKS\nSergio Mendez • Edge Computing Systems with Kubernetes • https://amzn.to/42P5hzl\nRobert Robey &amp; Yuliana Zamora • Parallel and High Performance Computing • https://amzn.to/42K9Uef\n Ashok Iyengar &amp; Joseph Pearson • Edge Computing Patterns for Solution Architects • https://amzn.to/4bHUjzP\nPerry Lea • IoT and Edge Computing for Architects • https://amzn.to/4bMtb2u\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#EdgeComputing #HighPerformanceComputing #ParallelComputing #AvailabilityZone #Cloudflare #Planetscale #AWSSnowball #CloudflareDurableObjects #CloudflareHyperdrive #GreenSoftware #SustainableSoftware #EricaPisani\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":2276,"flags":null,"enclosureUrl":"https://www.youtube.com/v/K6c29Gtlpjs?version=3","enclosureMime":"","commentsUrl":null},{"title":"1 Simple Technique to Scale Microservices Architecture 🚀","url":"https://newsletter.systemdesign.one/p/how-to-scale-microservices","date":1738677848,"author":"Neo Kim","guid":41,"unread":true,"content":"<p>Get the powerful template to approach system design for FREE on newsletter sign-up:</p><p><em>You will find references at the bottom of this page if you want to go deeper.</em></p><p>Once upon a time, there was a tech startup.</p><p>They tracked food deliveries in real-time.</p><p>Yet they had only a few customers; so, a simple monolith architecture was enough.</p><p>Until one day, an influencer with a massive following shared their app, and traffic skyrocketed.</p><p>So they moved to microservices architecture for scale.</p><p>Although it temporarily solved their scalability issues, there were newer problems.</p><ol><li><p>Implementing new features became difficult because of the dependencies between microservices.</p></li><li><p>The operational complexity increased due to different programming languages across microservices.</p></li></ol><p>Authorization can make or break your application’s security and scalability. From managing dynamic permissions to implementing fine-grained access controls, the challenges grow as your requirements and users scale.</p><p>This eBook will guide you through the 6 key requirements all authorization layers should include to avoid technical debt:</p><ul><li><p>Architectural and design considerations for building a scalable and secure authorization layer.</p></li><li><p>20+ technologies, approaches, and standards to consider for your permission management systems.</p></li><li><p>Practical insights, based on 500+ interviews with engineers, architects, and IAM professionals.</p></li></ul><p>Learn how to create an authorization solution that evolves with your business needs, while avoiding technical debt.</p><h2>How to Scale Microservices</h2><p>They wanted to reduce the maintenance effort and scale microservices quickly.</p><p>So they relied on automation.</p><p>A microservice must be scaled to handle changing traffic.</p><p>Yet scaling manually is slow and causes errors.</p><p>So they use <a href=\"https://en.wikipedia.org/wiki/Infrastructure_as_code\">infrastructure as code</a> to keep things simple; it’s used to deploy new instances based on demand.  means managing and provisioning infrastructure using code.</p><p>Ready for the next technique?</p><p>It’s difficult to understand and maintain APIs without a proper naming convention.</p><p>Yet maintaining consistent naming for APIs across microservices is hard. </p><p><em>So they generate APIs using code and store API definitions as JSON in a separate Git repository.</em></p><p>Here are the benefits of code-generated APIs:</p><ul><li><p>API paths can be validated using <a href=\"https://www.sonarsource.com/learn/linter/\">linters</a>.</p></li><li><p>API naming conventions and request-response structures are standardized.</p></li><li><p>API version changes can be tracked through tagging.</p></li><li><p>It ensures API operations are defined.</p></li><li><p>User-friendly API paths can be set up as default.</p></li></ul><p>Also it standardizes APIs built using different programming languages. Put simply, code generation makes it look like a single person wrote APIs across the system.</p><p>Besides code generation ensures health checks are included in each microservice.</p><ul><li><p>A health check URL is included in the API specification of the microservice.</p></li></ul><p>An unhealthy service is removed from production to avoid service interruptions.</p><p>A change to database schema shouldn’t break microservices depending on it. </p><p>Yet sharing a single database across microservices introduces tight coupling and failure risk.</p><p>So they set up separate databases for each microservice.</p><p>But maintaining many databases is a huge effort; so, they create databases and tables using code.</p><p>Here are its main benefits:</p><ul><li><p>Consistent database names.</p></li><li><p>Ensure proper database indexes exist from the start.</p></li><li><p>Easy to maintain and operate the database.</p></li></ul><p>Besides a microservice shouldn't talk to a database owned by another microservice. Instead, communication happens only via the microservice’s API owning the database. Otherwise, the data changes aren't safe as they bypass business logic.</p><p>: use code generation and automation to scale microservices quickly. It reduces maintenance efforts and helps with version control.</p><p>👋  -Do you want to level up at work and better understand technical discussions?</p><p>My mission is to help you go from 0 to 1 in system design by spending less than 37 minutes a month.</p><ul><li><p>I launched the newsletter deep dives last month.</p></li></ul><ul><li><p>Yet future deep dives, starting this month, are available only to paid subscribers.</p></li><li><p>And subscription fees will be higher than the current fees.</p></li></ul><p>So<strong> pledge now to get access at a very low price.</strong></p><p><em>“This newsletter is an amazing resource for learning system design.” </em>Alex</p><p>Subscribe to get simplified case studies delivered straight to your inbox:</p><p><strong>Want to advertise in this newsletter? </strong>📰</p><p>Thank you for supporting this newsletter.</p><p>You are now 123,001+ readers strong, very close to 124k. Let’s try to reach 124k readers by 10 February. Consider sharing this post with your friends and get rewards.</p>","contentLength":4531,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/84c96d29-cf27-47f0-9e1c-78ca1fa5f461_1280x720.gif","enclosureMime":"","commentsUrl":null},{"title":"3 Ways You’re Screwing up Platform Engineering – And How to Fix It • Steve Smith • GOTO 2024","url":"https://www.youtube.com/watch?v=vQteH0qcVjE","date":1738674079,"author":"GOTO Conferences","guid":664,"unread":true,"content":"<article>This presentation was recorded at GOTO Copenhagen 2024. #GOTOcon #GOTOcph\nhttps://gotocph.com\n\nSteve Smith - Head of Scale Equal Experts\n\nRESOURCES\nhttps://bsky.app/profile/stevesmithtech.bsky.social\nhttps://mastodon.social/@steve_smith@mastodon.social\nhttps://www.linkedin.com/in/stevesmithtech\nhttps://www.stevesmith.tech\n\nABSTRACT\nWhy is it so easy to screw up platform engineering, and how do you undo the damage?\n\nPlatform engineering… it’s the trendy new buzzword. For a thing we’ve been doing for years, ever since someone said “what if we re-did Solaris zones, but called it Docker instead?” It means building an internal engineering platform for your digital services or data pipelines. It allows you to scale teams up and down, and supercharge their abilities to deliver outcomes.\n\nBut here’s a thing that nobody likes to talk about. It’s easy to totally screw up platform engineering. When that happens, there’s a huge negative impact on your engineering culture, and your teams aren’t able to achieve their goals. So how do you avoid screwing up platform engineering, and if it does happen to you, can you actually fix it?\n\nI’ve spent years in platform leadership roles, building internal engineering platforms at different scaleups and enterprise organizations. I’ve had successes, and I’ve had failures. I’ll cover the following irreversible ways to screw up, and how to start reversing out of them:\n\n• Power tools - teams spend all their time configuring Kafka, Kubernetes, Istio etc., because the platform is based on overpowered tech\n• Technology anarchy - N teams do the same task in N different ways, because the platform has no opinions on tech choices, ways of working, or path to prod\n• Teams as tickets - making teams interact with the platform via tickets\n\nAnd I’ll explain why all of these can be traced back to a scaling problem, the granddaddy screw up of platform engineering - your mindset is platform as a project, not as a product.\n\nTakeaways\n• Platform engineering is about creating an enabler of business value, so your teams can move faster and safer than ever before\n• Avoid using platform engineering power tools e.g. Kafka, Kubernetes, Istio. If you’re using them, start measuring unplanned work and plan to migrate away\n• Avoid being unopinionated on tech stack, ways of working, and path to prod. If you’re doing that, capture your leadership team’s expectations and track team commitments\n• Avoid only interacting with teams through a ticketing system. If you’re stuck there, start collaborating with teams on self-service paved roads\n• The key to platform engineering success is a platform as a product mindset [...]\n\nTIMECODES\n00:00 Intro\n03:36 What is platform engineering?\n05:37 No. 1: Power tools\n18:32 No. 2: Technology anarchy\n31:18 No. 3: Ticketing hell\n40:04 Takeaways\n42:24 Outro\n\nDownload slides and read the full abstract here:\nhttps://gotocph.com/2024/sessions/3235\n\nRECOMMENDED BOOKS\nSteve Smith • Measuring Continuous Delivery • https://leanpub.com/measuringcontinuousdelivery\nSteve Smith &amp; Denise Yu • A Children's A to Z of Continuous Delivery • https://leanpub.com/achildrensatozofcontinuousdelivery\nSteve Smith &amp; Matthew Skelton • Build Quality In • https://leanpub.com/buildqualityin\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#PlatformEngineering #PlatformLeadership #Kubernetes #ApacheKafka #Istio #TechnologyAnarchy #CICD #SteveSmith\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":4067,"flags":null,"enclosureUrl":"https://www.youtube.com/v/vQteH0qcVjE?version=3","enclosureMime":"","commentsUrl":null},{"title":"What are ACID Transactions in Databases?","url":"https://blog.algomaster.io/p/what-are-acid-transactions-in-databases","date":1738647067,"author":"Ashish Pratap Singh","guid":716,"unread":true,"content":"<p>Imagine you’re running an e-commerce application. </p><p>A customer places an order, and your system needs to deduct the item from inventory, charge the customer’s credit card, and record the sale in your accounting system—all at once. </p><p>What happens if the payment fails but your inventory count has already been reduced? Or if your application crashes halfway through the process?</p><p>This is where  come into play. They ensure that all the steps in such critical operations happen reliably and consistently.</p><p>ACID is an acronym that refers to the set of 4 key properties that define a transaction: <strong>Atomicity, Consistency, Isolation,</strong> and </p><p>In this article, we’ll dive into what each of the ACID properties mean, why they are important, and how they are implemented in databases.</p><p>If you’re finding this newsletter valuable and want to deepen your learning, consider becoming a .</p><p>As a paid subscriber, you'll receive an <strong>exclusive deep-dive article</strong> every week, access to a structured100+topics and interview questions, and other .</p><p>A  in the context of databases is a sequence of one or more operations (such as inserting, updating, or deleting records) that the database treats as . It either fully succeeds or fully fails, with no in-between states.</p><p>When you send money to a friend, two things happen:</p><ol><li><p>Money is deducted from your account.</p></li><li><p>Money is added to their account.</p></li></ol><p>These two steps form . If either step fails, both are canceled.</p><p>Without transactions, databases could end up in inconsistent states. </p><ul><li><p>: Your money is deducted, but your friend never receives it.</p></li><li><p>: Two people booking the last movie ticket at the same time.</p></li></ul><p>Transactions solve these problems by enforcing rules like  (Atomicity, Consistency, Isolation, Durability).</p><p>Now, lets looks at each of the ACID properties.</p><p>Atomicity ensures that a transaction—comprising multiple operations—executes as a unit of work: it either  succeeds (commits) or  fails (rolls back). </p><p>If any part of the transaction fails, the entire transaction is rolled back, and the database is restored to a state exactly as it was before the transaction began.</p><blockquote><p>In a money transfer transaction, if the credit step fails, the debit step cannot be allowed to stand on its own. This prevents inconsistent states like “money disappearing” from one account without showing up in another.</p></blockquote><p>Atomicity abstracts away the complexity of manually undoing changes if something goes wrong.</p><h2>How Databases Implement Atomicity</h2><p>Databases use two key mechanisms to guarantee atomicity.</p><h4><strong>1. Transaction Logs (Write-Ahead Logs)</strong></h4><ul><li><p>Every operation is recorded in a  before it’s applied to the actual database table.</p></li><li><p>If a failure occurs, the database uses this log to  incomplete changes.</p></li></ul><p>Once the WAL entry is safely on disk, the database proceeds with modifying the in-memory pages that contain rows for  and .</p><p>When the operations succeed:</p><ol><li><p>The database marks  as  in the transaction log.</p></li><li><p>The newly updated balances for A and B will eventually get flushed from memory to their respective data files on disk.</p></li></ol><p>If the database crashes  the log entry is written but  the data files are fully updated, the WAL provides a way to recover:</p><ul><li><p>On restart, the database checks the WAL.</p></li><li><p>It sees  was committed.</p></li><li><p>It reapplies the  operations to ensure the final balances are correct in the data files.</p></li></ul><p>If the transaction had not committed (or was marked as “in progress”) at the time of the crash, the database would  those changes using information in the log, leaving the table as if the transaction never happened.</p><h4><strong>2. Commit/Rollback Protocols</strong></h4><ul><li><p>Databases provide commands like , , and </p></li><li><p>Any changes made between  and  are considered “in-progress” and won’t be permanently applied unless the transaction commits successfully.</p></li><li><p>If any step fails, or if you explicitly issue a , all changes since the start of the transaction are undone.</p></li></ul><p> in the context of ACID transactions ensures that any transaction will bring the database from one valid state to another valid state—never leaving it in a broken or “invalid” state.</p><p>It means that all the data integrity constraints, such as  (no duplicate IDs),  (related records must exist in parent tables), and (age can’t be negative), are satisfied before and after the transaction.</p><p>If a transaction tries to violate these rules, it will not be committed, and the database will revert to its previous state.</p><p>You have two tables in an e-commerce database:</p><ol><li><p> (with columns: , , etc.)</p></li><li><p> (with columns: , , , etc.)</p></li></ol><ul><li><p>: You can’t place an order for a product if  is greater than the  in the  table.</p></li></ul><ul><li><p>If the product’s  was 8 (less than what we’re trying to order), the database sees that the new value would be  which breaks the consistency rule (it should not go negative).</p></li><li><p>The transaction fails or triggers a rollback, preventing the database from ending in an invalid state.</p></li></ul><h2>How to Implement Consistency</h2><ol><li><p><strong>Database Schema Constraints</strong></p><ul><li><p>, , , ,  constraints, and other schema definitions ensure no invalid entries are allowed.</p></li></ul></li><li><p><strong>Triggers and Stored Procedures</strong></p><ul><li><p>Triggers can automatically check additional rules whenever rows are inserted, updated, or deleted.</p></li><li><p>Stored procedures can contain logic to validate data before committing.</p></li></ul></li><li><p><strong>Application-Level Safeguards</strong></p><ul><li><p>While the database enforces constraints at a lower level, applications often add extra checks—like ensuring business rules are followed or data is validated before it even reaches the database layer.</p></li></ul></li></ol><p> ensures that concurrently running transactions do not interfere with each other’s intermediate states.</p><p>Essentially, while a transaction is in progress, its updates (or intermediate data) remain invisible to other ongoing transactions—giving the illusion that each transaction is running sequentially, one at a time.</p><p>Without isolation, two or more transactions could read and write partial or uncommitted data from each other, causing incorrect or inconsistent results.</p><p>With isolation, developers can reason more reliably about how data changes will appear to other transactions.</p><p>To understand how isolation works, it helps to see what can go wrong without proper isolation.  Common concurrency anomalies include:</p><ol><li><ul><li><p>Transaction A reads data that Transaction B has modified but not yet committed.</p></li><li><p>If Transaction B then rolls back, Transaction A ends up holding an invalid or “dirty” value that never truly existed in the committed state.</p></li></ul></li><li><ul><li><p>Transaction A reads the same row(s) multiple times during its execution but sees different data because another transaction updated or deleted those rows in between A’s reads.</p></li></ul></li><li><ul><li><p>Transaction A performs a query that returns a set of rows. Another transaction inserts, updates, or deletes rows that match A’s query conditions.</p></li><li><p>If A re-runs the same query, it sees a different set of rows (“phantoms”).</p></li></ul></li></ol><p>Databases typically allow you to choose an , which balances data correctness with performance.</p><p>Higher isolation levels provide stronger data consistency but can reduce system performance by increasing the wait times for transactions. </p><p>Let's explore the four common isolation levels:</p><ol><li><ul><li><p>Allows dirty reads; transactions can see uncommitted changes.</p></li><li><p>Rarely used, as it can lead to severe anomalies.</p></li></ul></li><li><ul><li><p>A transaction sees only data that has been committed at the moment of reading.</p></li><li><p>Prevents dirty reads, but non-repeatable reads and phantom reads can still occur.</p></li></ul></li><li><ul><li><p>Ensures if you read the same rows multiple times within a transaction, you’ll get the same values (unless you explicitly modify them).</p></li><li><p>Prevents dirty reads and non-repeatable reads, but phantom reads may still happen (depending on the database engine).</p></li></ul></li><li><ul><li><p>The highest level of isolation, acting as if all transactions happen sequentially one at a time.</p></li><li><p>Prevents dirty reads, non-repeatable reads, and phantom reads.</p></li><li><p>Most expensive in terms of performance and concurrency because it can require more locking or more conflict checks.</p></li></ul></li></ol><h2>How Databases Enforce Isolation</h2><ul><li><p><strong>Pessimistic Concurrency Control</strong></p><ul><li><p>Rows or tables are locked so that no other transaction can read or write them until the lock is released.</p></li><li><p>Can lead to blocking or deadlocks if multiple transactions compete for the same locks.</p></li></ul></li></ul><h4>2. MVCC (Multi-Version Concurrency Control)</h4><ul><li><p><strong>Optimistic Concurrency Control</strong></p><ul><li><p>Instead of blocking reads, the database keeps multiple versions of a row.</p></li><li><p>Readers see a consistent snapshot of data (like a point-in-time view), while writers create a new version of the row when updating.</p></li><li><p>This approach reduces lock contention but requires carefully managing row versions and cleanup (vacuuming in PostgreSQL, for example).</p></li></ul></li></ul><ul><li><p>A form of MVCC where each transaction sees data as it was at the start (or a consistent point) of the transaction.</p></li><li><p>Prevents non-repeatable reads and dirty reads. Phantom reads may still occur unless the isolation level is fully serializable.</p></li></ul><p> ensures that once a transaction has been committed, the changes it made will survive, even in the face of power failures, crashes, or other catastrophic events. </p><p>In other words, once a transaction says “done,” the data is permanently recorded and cannot simply disappear.</p><h2>How Databases Ensure Durability</h2><h4>1. Transaction Logs (Write-Ahead Logging)</h4><p>Most relational databases rely on a  to preserve changes before they’re written to the main data files:</p><ol><li><p>: The intended operations (updates, inserts, deletes) are recorded in the WAL on durable storage (disk).</p></li><li><p>: Once the WAL entry is safely persisted, the database can mark the transaction as committed.</p></li><li><p><strong>Apply Changes to Main Data Files</strong>: The updated data eventually gets written to the main files—possibly first in memory, then flushed to disk.</p></li></ol><p>If the database crashes, it uses the WAL during :</p><ul><li><p>: Any committed transactions not yet reflected in the main files are reapplied.</p></li><li><p>: Any incomplete (uncommitted) transactions are rolled back to keep the database consistent.</p></li></ul><h4>2. Replication / Redundancy</h4><p>In addition to WAL, many systems use replication to ensure data remains durable even if hardware or an entire data center fails.</p><ul><li><p>: Writes are immediately copied to multiple nodes or data centers. A transaction is marked committed only if the primary and at least one replica confirm it’s safely stored.</p></li><li><p>: Changes eventually sync to other nodes, but there is a (small) window where data loss can occur if the primary fails before the replica is updated.</p></li></ul><p>Regular  provide a safety net beyond logs and replication. In case of severe corruption, human error, or catastrophic failure:</p><ul><li><p>: Capture the entire database at a point in time.</p></li><li><p><strong>Incremental/Differential Backups</strong>: Store changes since the last backup for faster, more frequent backups.</p></li><li><p>: Ensures backups remain safe from localized disasters, allowing you to restore data even if hardware is damaged.</p></li></ul><p>If you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.</p><p>If you have any questions or suggestions, leave a comment.</p><div data-attrs=\"{&quot;url&quot;:&quot;https://blog.algomaster.io/p/scalability?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjo4MzYwMjc0MywicG9zdF9pZCI6MTQwMDc4MDk0LCJpYXQiOjE3Mzc1MzgxODMsImV4cCI6MTc0MDEzMDE4MywiaXNzIjoicHViLTIyMDIyNjgiLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.xroFXQDDEPvo2FWnnt-G2Ji9MzYIDtJ68NRQX6sT8x8&quot;,&quot;text&quot;:&quot;Share&quot;}\" data-component-name=\"CaptionedButtonToDOM\"><div><p>This post is public so feel free to share it.</p></div></div><p> If you’re finding this newsletter helpful and want to get even more value, consider becoming a .</p><p>I hope you have a lovely day!</p>","contentLength":10887,"flags":null,"enclosureUrl":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa9ceb65c-70e6-4f3e-9511-f6bc5da93d13_1308x1086.png","enclosureMime":"","commentsUrl":null},{"title":"@krausefx about a scary #iPhone Camera Feature, that has now been resolved","url":"https://www.youtube.com/watch?v=sO6epHFkG_Y","date":1738587673,"author":"GOTO Conferences","guid":663,"unread":true,"content":"<article>Check out the full version on our YouTube channel now! #GOTOcon #GOTOcph #Privacy #Mobile #HowIsFelixToday #FelixKrause #KrauseFX #Fastlane #Security #InAppBrowsers #SFSafari #iOS #Apple #Safari #Android #JavaScript #TikTok #Instagram #Viral #ViralShorts #GOTO\n\nFull version available here:\nhttps://youtu.be/W8PmMDePgf8\n\nFelix Krause - Creator of Fastlane &amp; howisfelix.today &amp; Security &amp; Privacy Researcher @krausefx \n\nRECOMMENDED BOOK\nNishant Bhajaria • Data Privacy • https://amzn.to/3lGjv4g\nMichael Bazzell • Extreme Privacy • https://amzn.to/3KeLwKA\nLiz Rice • Container Security • https://amzn.to/3oU4iJe\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":1090,"flags":null,"enclosureUrl":"https://www.youtube.com/v/sO6epHFkG_Y?version=3","enclosureMime":"","commentsUrl":null},{"title":"The ups and downs of stratified cross-validation","url":"https://www.youtube.com/watch?v=EpK9pWZGjbE","date":1738237726,"author":"probabl","guid":744,"unread":true,"content":"<article>When you use GridSearchCV in scikit-learn will do a cross-validated hyperparameter search. This is neat, but there are some worthwhile details involved when it comes to selection the cross-validation segments.\n\nLink to discussion on Github:\nhttps://github.com/scikit-learn/scikit-learn/issues/4757#issuecomment-2419933195\n\nWebsite: https://probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nTwitter: https://x.com/probabl_ai\nBluesky: https://bsky.app/profile/probabl.bsky.social\nDiscord: https://discord.probabl.ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\n#probabl</article>","contentLength":706,"flags":null,"enclosureUrl":"https://www.youtube.com/v/EpK9pWZGjbE?version=3","enclosureMime":"","commentsUrl":null},{"title":"Design YouTube - System Design Interview","url":"https://blog.algomaster.io/p/design-youtube-system-design-interview","date":1738215950,"author":"Ashish Pratap Singh","guid":715,"unread":true,"content":"<p>With over  monthly active users,  is the second most visited website in the world—trailing only Google.</p><p>As a , it enables users to upload, watch, and interact with video content, while handling hundreds of millions of daily visitors, managing petabytes of data, and ensuring real-time video delivery across the globe.</p><p>In this article, we’ll explore the <strong>system design of a large-scale video streaming service like YouTube</strong> that can accommodate hundreds of millions of daily users and billions of views, all while maintaining low latency and high availability.</p><p>We’ll walk through every step of the design—from requirements and high-level architecture to database and API design—before diving deep into core use cases. </p><p>The concepts covered here are equally applicable to other large-scale video platforms such as  and .</p><p>Before diving into the design, lets outline the functional and non-functional requirements.</p><ul><li><p>Users should be able to  video files.</p></li><li><p>Uploaded videos must be  into multiple resolutions (e.g., 240p, 360p, 720p, 1080p) to support different network conditions and devices.</p></li></ul><ul><li><p>Users should be able to  videos in real-time with <strong>adaptive bitrate streaming</strong> to adjust quality based on network conditions.</p></li></ul><ul><li><p>Users can  for videos by title, tags, or description.</p></li><li><p>Users can  and  on videos.</p></li><li><p>Users should be able to create and subscribe to .</p></li></ul><h3><strong>Non-Functional Requirements:</strong></h3><ol><li><p> The system should support millions of concurrent users and thousands of video uploads per minute.</p></li><li><p> Core features like video upload, playback, and search should have minimal downtime.</p></li><li><p> Fast video streaming with minimal buffering and near-instantaneous search results.</p></li><li><p> Video files must be stored reliably, with redundancy mechanisms to prevent data loss due to hardware failures.</p></li><li><p> Optimize storage and bandwidth costs.</p></li></ol><ul><li><p><strong>Daily Active Users (DAU):</strong> 10 million</p></li><li><p> ~100,000 videos/day</p></li><li><p><strong>Average Videos Watched per User per Day:</strong> 5 videos</p></li><li><p> 500 MB.</p></li><li><p> 1 KB.</p></li></ul><ul><li><p>: 100,000 videos / day * 500 MB / video = 50 TB / day</p></li><li><p><strong>Daily Video Metadata Storage</strong>: 100,000 * 1KB = 100MB / day</p></li></ul><h4><strong>Network Bandwidth Estimation:</strong></h4><ul><li><p>10 million users × 5 videos/user = 50 million views/day </p></li><li><p><strong>Daily Bandwidth Requirements (without compression &amp; caching) </strong>: 50 million views * 500 MB / day = 25 PB / day</p></li></ul><p>Given the high storage and bandwidth requirements, leveraging  is the most practical approach:</p><ol><li><p><strong>Content Delivery Network (CDN):</strong> To cache frequently accessed videos closer to users and reduce latency.</p></li><li><p><strong>Blob Storage (e.g., AWS S3):</strong> To store video files reliably with redundancy.</p></li></ol><p>We can break the architecture of YouTube into two primary components: </p><ul><li><p> – Handles video playback, and delivery.</p></li><li><p><strong>Video Upload &amp; Processing</strong> – Manages user uploads, transcoding, and metadata storage.</p></li></ul><h2>3.1 Video Streaming Architecture</h2>","contentLength":2703,"flags":null,"enclosureUrl":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F23342c70-b11d-48c3-b30b-63ea245e5d2a_2026x1322.png","enclosureMime":"","commentsUrl":null},{"title":"Long Polling vs WebSockets","url":"https://blog.algomaster.io/p/long-polling-vs-websockets","date":1738038640,"author":"Ashish Pratap Singh","guid":714,"unread":true,"content":"<p>Whether you are playing an online game or chatting with a friend—updates appear in real-time without hitting .</p><p>Behind these seamless experiences lies a critical engineering decision: <strong>how to push real-time updates from servers to clients</strong>.</p><p>The traditional HTTP model was designed for request-response: <em>\"Client asks, server answers.\". </em>But in many real-time systems, the server needs to talk first and more often.</p><p>This is where  and  come into play—two popular methods for achieving real-time updates.</p><p>In this article, we’ll explore these two techniques, how they work, their pros and cons, and use cases.</p><p>If you’re finding this newsletter valuable and want to deepen your learning, consider becoming a .</p><p>As a paid subscriber, you'll receive an <strong>exclusive deep-dive article</strong> every week, access to a structured100+topics and interview questions, and other .</p><p>HTTP, the backbone of the web, follows a :</p><ol><li><p>The client (e.g., a browser or mobile app) sends a request to the server.</p></li><li><p>The server processes the request and sends back a response.</p></li></ol><p>This model is simple and works for many use-cases, but it has limitations:</p><ul><li><p> With plain HTTP, the server cannot proactively push data to the client. The client has to request the data periodically.</p></li><li><p> HTTP is stateless, meaning each request stands alone with no persistent connection to the server. This can be problematic if you need continuous exchange of data.</p></li></ul><p>To build truly real-time features—live chat, financial tickers, or gaming updates—you need a mechanism where the server can instantly notify the client when something changes.</p><p> is a technique that mimics real-time behavior by keeping HTTP requests open until the server has data.</p><p>Long Polling is an enhancement over traditional polling. In regular polling, the client repeatedly sends requests at fixed intervals (e.g., every second) to check for updates. This can be wasteful if no new data exists. </p><p>Long Polling tweaks this approach: the client asks the server for data and then “waits” until the server has something new to return or until a timeout occurs.</p><h3>How Does Long Polling Work?</h3><ol><li><p> to the server, expecting new data.</p></li><li><p><strong>Server holds the request open</strong> until it has an update or a timeout is reached.</p><ul><li><p>If there's new data, the server immediately responds.</p></li><li><p>If there’s no new data and the timeout is reached, the server responds with an empty or minimal message.</p></li></ul></li><li><p>Once the client receives a response—new data or a timeout—it <strong>immediately sends a new request</strong> to the server to keep the connection loop going.</p></li></ol><ul><li><p>Simple to implement (uses standard HTTP).</p></li><li><p>Supported universally since it uses standard HTTP, and it works reliably through firewalls and proxies.</p></li></ul><ul><li><p>Higher latency after each update (client must re-establish connection).</p></li><li><p>Resource-heavy on servers (many open hanging requests).</p></li></ul><ul><li><p>Simple chat or comment systems where real-time but slightly delayed updates (near real-time) are acceptable.</p></li><li><p>Notification systems for less frequent updates (e.g., Gmail’s \"new email\" alert).</p></li><li><p>Legacy systems where WebSockets aren’t feasible.</p></li></ul><h3>Code Example (JavaScript)</h3><p> provide a <strong>full-duplex, persistent connection</strong> between the client and the server.</p><p>Once established, both parties can send data to each other at any time, without the overhead of repeated HTTP requests.</p><ol><li><p> Client sends an HTTP request with .</p></li><li><p>: If supported, the server upgrades the connection to WebSocket (switching from  to ). After the handshake, client and server keep a TCP socket open for communication.</p></li><li><p><strong>Full-Duplex Communication:</strong> Once upgraded, data can be exchanged bidirectionally in real time until either side closes the connection.</p></li></ol><ol><li><p>Ultra-low latency (no repeated handshakes).</p></li><li><p>Lower overhead since there’s only one persistent connection rather than repeated HTTP requests.</p></li><li><p>Scalable for real-time applications that need to support large number of concurrent users.</p></li></ol><ol><li><p>More complex setup (requires the client and server to support WebSocket).</p></li><li><p>Some proxies and firewalls may not allow WebSocket traffic.</p></li><li><p>Complexity in implementation and handling reconnections/errors.</p></li><li><p>Server resource usage might grow if you have a large number of concurrent connections.</p></li></ol><ol><li><p>Live chat and collaboration tools (Slack, Google Docs, etc.).</p></li><li><p>Multiplayer online games with real-time state synchronization.</p></li><li><p>Live sports/financial dashboards that need to push frequent updates.</p></li></ol><h3>Code Example (JavaScript)</h3><p>Both methods achieve real-time updates, but your choice depends on your project’s requirements:</p><ol><li><ul><li><p> is easier to implement using standard libraries. Any environment that supports HTTP can handle it, often without extra packages.</p></li><li><p> require a bit more setup and a capable proxy environment (e.g., support in Nginx or HAProxy). However, many frameworks (e.g., Socket.io) simplify the process significantly.</p></li></ul></li><li><p><strong>Scalability and Performance</strong></p><ul><li><p> can become resource-intensive with a large number of simultaneous clients, due to multiple open connections waiting on the server side.</p></li><li><p> offer a more efficient, persistent connection and scale better for heavy, frequent data streams.</p></li></ul></li><li><ul><li><p> fits scenarios where data updates aren’t super frequent. If new data arrives every few seconds or minutes, long polling might be enough.</p></li><li><p> are better for high-frequency updates or two-way communication (e.g., multiple participants editing a document or interacting in a game).</p></li></ul></li><li><ul><li><p> typically works even in older networks or those with strict firewalls.</p></li><li><p> might face issues in certain corporate or older mobile environments, though this is less of a problem as the standard becomes more widespread.</p></li></ul></li></ol><blockquote><p>While both achieve real-time communication, WebSockets are generally more efficient for truly real-time applications, while Long Polling can be simpler to implement for less demanding scenarios.</p></blockquote><h4><strong>1. Server-Sent Events (SSE)</strong></h4><ul><li><p>Allows the server to push messages to the client over HTTP.</p></li><li><p>It's simpler than WebSockets for one-way communication, but not full-duplex.</p></li><li><p>Best suited for use cases like news feeds, real-time notifications, and status updates.</p></li></ul><ul><li><p>Commonly used in IoT for lightweight publish-subscribe messaging.</p></li><li><p>Specialized for device-to-device or device-to-server communication with minimal overhead.</p></li></ul><h4><strong>3. Libraries like Socket.io</strong></h4><ul><li><p>Provides an abstraction over WebSockets for easier real-time communication.</p></li><li><p>Automatically falls back to long polling if WebSockets are unsupported.</p></li><li><p>Ensures cross-browser compatibility with robust and reliable performance.</p></li></ul><p>If you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.</p><p>If you have any questions or suggestions, leave a comment.</p><div data-attrs=\"{&quot;url&quot;:&quot;https://blog.algomaster.io/p/scalability?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjo4MzYwMjc0MywicG9zdF9pZCI6MTQwMDc4MDk0LCJpYXQiOjE3Mzc1MzgxODMsImV4cCI6MTc0MDEzMDE4MywiaXNzIjoicHViLTIyMDIyNjgiLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.xroFXQDDEPvo2FWnnt-G2Ji9MzYIDtJ68NRQX6sT8x8&quot;,&quot;text&quot;:&quot;Share&quot;}\" data-component-name=\"CaptionedButtonToDOM\"><div><p>This post is public so feel free to share it.</p></div></div><p> If you’re enjoying this newsletter and want to get even more value, consider becoming a .</p><p>I hope you have a lovely day!</p>","contentLength":6609,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/90181ae6-4dcb-456f-a43a-7824d97c740b_2002x1472.png","enclosureMime":"","commentsUrl":null},{"title":"Exploring prefect for scheduling data workloads","url":"https://www.youtube.com/watch?v=hkm5OfiiorE","date":1737765055,"author":"probabl","guid":743,"unread":true,"content":"<article>It is easy to train a model in a notebook, but if we want to do anything with it in production we probably want to be able to train it regularly. There's good old cron, but it's 2025 now so maybe it's time to explore something a bit more modern. That's why in this livestream we will be exploring Prefect.\n\nWebsite: https://probabl.ai/\nDiscord: https://discord.probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nTwitter: https://x.com/probabl_ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\nIf you're keen to see more videos like this, you can follow us over at  @probabl_ai.\n\n#probabl</article>","contentLength":723,"flags":null,"enclosureUrl":"https://www.youtube.com/v/hkm5OfiiorE?version=3","enclosureMime":"","commentsUrl":null},{"title":"Playing with the classification report","url":"https://www.youtube.com/watch?v=765qaIk30Rs","date":1737623293,"author":"probabl","guid":742,"unread":true,"content":"<article>In this video we will play around with a confusion matrix widget that will help us understand how the numbers in the classification report in scikit-learn are created. The classification report is a great utility, but it can help to remind oneself of what the numbers really mean. \n\nScikit-learn documentation:\nhttps://scikit-learn.org/1.5/modules/generated/sklearn.metrics.classification_report.html\n\nAppendix with notebooks:\nhttps://github.com/probabl-ai/youtube-appendix/tree/main/16-metrics\n\nWebsite: https://probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nTwitter: https://x.com/probabl_ai\nBluesky: https://bsky.app/profile/probabl.bsky.social\nDiscord: https://discord.probabl.ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\n#probabl</article>","contentLength":879,"flags":null,"enclosureUrl":"https://www.youtube.com/v/765qaIk30Rs?version=3","enclosureMime":"","commentsUrl":null},{"title":"Master the Art of REST API Design","url":"https://blog.algomaster.io/p/master-the-art-of-rest-api-design","date":1737610478,"author":"Ashish Pratap Singh","guid":713,"unread":true,"content":"<p> is one of the most crucial steps in  and a key topic of discussion in .</p><p>A well-designed <a href=\"https://blog.algomaster.io/p/whats-an-api\">API</a> allows developers to easily integrate with a system while ensuring scalability and security.</p><p>Over the years, various  have emerged, including <strong>REST, GraphQL, gRPC, Webhooks and SOAP,</strong> each designed to address different needs.</p><p>However,  continue to dominate web development due to their simplicity, scalability, flexibility, widespread adoption and alignment with HTTP standards.</p><p>In this article, we will dive into covering:</p><ul><li><p> for building a well-structured, scalable, and secure RESTful API.</p></li><li><p><strong>Performance optimization techniques</strong> to enhance API efficiency and response times.</p></li></ul><p>REST (<strong>Representational State Transfer</strong>) is an architectural style for designing web services that enable communication between clients (e.g., web browsers, mobile apps) and servers over the .</p><p>REST uses HTTP methods (GET, POST, PUT, DELETE, etc.) to <strong>retrieve, create, update, and delete</strong> resources.</p><p>To build a well-designed REST APIyou must first understand the fundamentals of theHTTP protocol.</p><h3>1. HTTP Methods (Verbs) in REST APIs</h3><p>HTTP provides a set of  that define the type of operation to be performed on a resource.</p><p>In RESTful architectures, these methods typically map to CRUD operations:</p><p>It’s essential to use the correct HTTP method to make your API clear and intuitive. For example,  signals a read-only request to developers and should never modify server data, while  indicates data creation or an action that results in a change.</p><h3>2. REST is Resource-Oriented</h3><p>In RESTful API design, data is represented as , and each resource is identified by a <strong>Uniform Resource Identifier (URI)</strong>.</p><ul><li><p>→ A collection (or list) of books</p></li><li><p> → A specific book with ID 123</p></li></ul><p>An  is a combination of:</p><ul><li><p>An HTTP method (GET, POST, PUT etc.)</p></li><li><p>A resource URI (, )</p></li></ul><p>Each endpoint represents a specific operation on a resource.</p><ul><li><p> → Fetch all books</p></li><li><p> → Create a new book</p></li><li><p> → Delete the book with ID 123</p></li></ul><p>Using clear and consistent endpoints helps developers quickly understand how to interact with your API.</p><h3>4. HTTP Status Codes: Understanding API Responses</h3><p>Each API response includes an , which indicates the result of the request.</p><p>Using meaningful status codes is important for helping consumers of your API understand why a request might have failed and how they can fix or retry it.</p><p>Common status codes include:</p><ul><li><p>: The request was successfully received and processed.</p><ul><li><p>: The request succeeded.</p></li><li><p>: A new resource was successfully created.</p></li><li><p>: The request succeeded, but there is no content to return.</p></li></ul></li><li><p>: Further action is needed to complete the request (e.g., a different endpoint or resource location).</p></li><li><p>: There was an error in the request sent by the client.</p><ul><li><p>: The request was malformed or invalid.</p></li><li><p>: Authentication is required or has failed.</p></li><li><p>: The client does not have permission to access the resource.</p></li><li><p>: The requested resource does not exist.</p></li><li><p>: Rate limit exceeded.</p></li></ul></li><li><p>: The server encountered an error while processing the request.</p><ul><li><p><strong>500 Internal Server Error</strong>: A general error occurred on the server.</p></li><li><p>: The server is currently unable to handle the request, often due to maintenance or overload.</p></li></ul></li></ul><h2><strong>1. Define Clear Resource Naming Conventions</strong></h2><p>Using a <strong>consistent, intuitive, and hierarchical structure</strong> for API endpoints improves both readability and usability. The goal is to help developers quickly understand how to interact with your API without extensive documentation.</p><p>Since REST is resource-oriented, focus on  (nouns) rather than  (verbs) for your endpoints. The HTTP methods (, , etc.) already describe the action, so using verbs in the URL are redundant.</p><pre><code><code>GET /getAllUsers\nPOST /createNewOrder\nDELETE /removeProduct/123</code></code></pre><pre><code>GET /users\nPOST /orders\nDELETE /products/123</code></pre>","contentLength":3656,"flags":null,"enclosureUrl":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F64780231-6a91-4d72-8ea2-159d4cd71f4e_1504x1056.png","enclosureMime":"","commentsUrl":null},{"title":"Introducing the EstimatorReport","url":"https://www.youtube.com/watch?v=2rjkrR7CjHc","date":1737557343,"author":"probabl","guid":741,"unread":true,"content":"<article>Skore version 0.6 introduces a new EstimatorReport, which can be seen as a wrapper around an estimator that automatically detects all the relevant metrics and charts. The goal of the project is to be a useful sidekick for scikit-learn and you can expect more utilities to be released soon. \n\nLinks:\nskore v0.6 documentation:\nhttps://skore.probabl.ai/0.6/index.html\n\nskore GitHub repository:\nhttps://github.com/probabl-ai/skore</article>","contentLength":426,"flags":null,"enclosureUrl":"https://www.youtube.com/v/2rjkrR7CjHc?version=3","enclosureMime":"","commentsUrl":null},{"title":"How Bluesky Works 🦋","url":"https://newsletter.systemdesign.one/p/how-does-bluesky-work","date":1737551587,"author":"Neo Kim","guid":40,"unread":true,"content":"<p>Get the powerful template to approach system design for FREE on newsletter sign-up:</p><p><em>This post outlines Bluesky architecture; you will find references at the bottom of this page if you want to go deeper.</em></p><p><em>Note: I wrote this post after reading their engineering blog and documentation.</em></p><p>Once upon a time, Twitter had only a few million users.</p><p>And each user interaction went through their centralized servers.</p><p>So content moderation was easy.</p><p>Yet their growth rate was explosive and became one of the most visited sites in the world.</p><p>So they added automation and human reviewers to scale moderation.</p><p>Although it temporarily solved their content moderation issues, there were newer problems. Here are some of them:</p><ul><li><p>The risk of error increases if a single authority decides the moderation policies.</p></li><li><p>There’s a risk of bias when a single authority makes moderation decisions.</p></li><li><p>Managing moderation at scale needs a lot of effort; it becomes a bottleneck.</p></li></ul><p>So they set up <a href=\"https://bsky.app/\">Bluesky</a>: a research initiative to build a decentralized social network.</p><p>A decentralized architecture distributes control across many servers.</p><p>Here are 3 popular decentralized architectures in distributed systems:</p><ul><li><p>Federated architecture: client-server model; but different people run parts of the system and parts communicate with each other.</p></li><li><p>Peer-to-Peer architecture: there’s no difference between client and server; each device acts as both.</p></li><li><p>Blockchain architecture: distributed ledger for consensus and trustless interactions between servers.</p></li></ul><p><em>Bluesky uses a federated architecture</em><em>for its familiar client-server model, reliability, and convenience.</em> So each server could be run by different people and servers communicate with each other over HTTP.</p><p>Think of the federated network as email; a person with Gmail can communicate with someone using Protonmail.</p><p>Yet building a decentralized social network at scale is difficult.</p><p>So smart engineers at Bluesky used simple ideas to solve this hard problem.</p><p><em>I wrote a summary of this post (save it for later):</em></p><p>They created a decentralized open-source framework to build social networking apps, called Authenticated Transfer Protocol (), and built Bluesky on top of it.</p><p>Put simply, Bluesky doesn’t run separate servers; instead, ATProto servers distribute messages to each other.</p><p>A user’s data is shared across apps built on ATProto; Bluesky is one of the apps. So if a user switches between apps on ATProto, such as a photo-sharing app or blogging app, they don’t lose their followers (<a href=\"https://en.wikipedia.org/wiki/Social_graph\">social graph)</a>.</p><p>Imagine ATProto as Disneyland Park and Bluesky as one of its attractions. A single ticket is enough to visit all the attractions in the park. And if you don’t like one of the attractions, try another one in the park.</p><p>Here’s how Bluesky works:</p><p>A <a href=\"https://docs.bsky.app/docs/tutorials/creating-a-post\">post</a> is a short status update by a user; it includes text and images. </p><p>The text content and timestamp of the post are stored in a . <em>Think of the repository as a collection of data published by a single user.</em><a href=\"https://www.sqlite.org/\">SQLite</a> is used as its data layer for simplicity; each repository gets a separate SQLite database.</p><p>The data records are encoded in <a href=\"https://cbor.io/\">CBOR</a>, a compact binary format, before storing it in SQLite for low costs.</p><p>Repositories of different users are stored on a ; they set up many data servers for scale.</p><p><em>A data server exposes HTTP to handle client requests. </em>Put simply, the data server acts as a proxy for all client interactions. Also it manages user authentication and authorization. The data server includes tooling to automatically apply updates in the federated architecture.</p><p>They run 6 million user repositories on a single data server at 150 USD per month.</p><p>Think of the user repository as a Git repo and the data server as GitHub. It’s easy to move a Git repo from GitHub to GitLab. Similarly, a user repository is movable from one data server to another.</p><p>Besides it’s possible to use <a href=\"https://docs.bsky.app/showcase?tags=client\">alternative clients</a> for Bluesky. Yet it’s necessary to maintain a standard data schema for interactions. So separate  and API endpoints are defined for each app on ATProto, including Bluesky.</p><p>A user's repository doesn’t store information about actions performed by their followers such as comments or likes on their post. Instead, it’s stored only in the repository of the follower who took the action.</p><p>A post is shown to the user’s followers.</p><p>Yet it’s expensive to push updates to each follower’s repository. So information is collected from every data server using the .</p><p>The crawler doesn’t index data but forwards it.</p><ul><li><p>The crawler subscribes for updates on the data server: new posts, likes, or comments.</p></li><li><p>The data server notifies the crawler about updates in real time over <a href=\"https://en.wikipedia.org/wiki/WebSocket\">websockets</a>.</p></li><li><p>The crawler collects information from data servers and generates a .</p></li></ul><p>Consider the generated stream as a log over websockets; put simply, the crawler combines each user’s actions into a single TCP connection.</p><p>A user's post is shown to followers only after counting the likes, comments, and reposts on it.</p><p>Yet the stream doesn’t contain this information. So the stream’s data is aggregated using the ; it transforms raw data into a consumable form by processing it. Imagine the index server as a data presentation layer.</p><p>The index server is built using the <a href=\"https://go.dev/\">Go</a> language for concurrency. A NoSQL database, <a href=\"https://www.scylladb.com/\">ScyllaDB</a>, is used as its data layer for horizontal scalability.</p><p>A reference to the user's post ID is added to the follower’s repository when they like or repost a post. So the total number of likes and reposts is calculated by crawling every user repository and adding the numbers.</p><p>Here’s the workflow for displaying a post:</p><ul><li><p>A user’s request is routed via their data server to the index server.</p></li><li><p>The data server finds the people a user follows by looking at their repository.</p></li><li><p>The index server creates a list of post IDs in reverse chronological order.</p></li><li><p>The index server expands the list of post IDs to full posts with content.</p></li></ul><p>The index server then responds to the client.</p><p>In short, a user repository stores primary data, while the index server stores derived data from repositories.</p><p>The index server is the most read-heavy service; so, its results are cached using <a href=\"https://en.wikipedia.org/wiki/Redis\">Redis</a>, an in-memory storage, for performance.</p><p>JSON Web Token () is used for authentication between Bluesky services.</p><p>Media files, such as images and videos, are stored on the data server’s disk for simplicity. A cryptographic ID () is used to reference the media files in the repository. The index server fetches the media files from the data server on user request and caches them on the content delivery network () for efficiency.</p><p>A user updates only their repository when they follow someone. </p><p>Their repository adds a reference to the user’s unique decentralized identifier () to indicate follow.</p><p>The number of followers for a user is found by indexing every repository. This is similar to how Google finds inbound links to a web page; all documents on the web are crawled.</p><p>A user account includes a handle based on the domain name (); it keeps things simple.</p><p>And each user automatically gets a handle from the ‘bsky.social’ subdomain upon account creation. Yet posts are stored using DID, and the user handle is displayed along with the posts. So changes to a user's handle don’t affect their previous posts.</p><p>A user’s DID is immutable, but the handle is mutable; put simply, a user’s handle is reassignable to a custom domain name.</p><p>Here’s how a user handle with a custom domain name is verified on Bluesky:</p><ul><li><p>The user enters their custom domain name in the Bluesky account settings.</p></li><li><p>Bluesky generates a unique text value for the user: public key.</p></li><li><p>The user stores this value in the <a href=\"https://www.cloudflare.com/en-gb/learning/dns/dns-records/dns-txt-record/\">DNS TXT record</a> of the custom domain name.</p></li></ul><p>The index server then periodically checks the DNS TXT record and validates the user handle. Imagine  as a text data field for domain name settings.</p><h3>3. User Timeline and Feed</h3><p>A user’s timeline is created by arranging their posts in reverse chronological order.</p><p>Yet a user’s repository doesn’t contain information about likes and comments received on a post. So the request is sent to the index server; it returns the user’s timeline with aggregated data.</p><p>A feed is created from posts by people a user follows.</p><p>Bluesky supports <a href=\"https://bsky.app/feeds\">feeds</a> with custom logic, and there are 50K+ custom feeds available. </p><p>Consider the  as a filter for a specific list of keywords or users.</p><ul><li><p>The crawler generates a stream from data servers.</p></li><li><p>The feed generator filters, sorts, and ranks the content based on custom logic.</p></li><li><p>The feed generator creates a list of post IDs.</p></li></ul><p>The index server then populates the feed’s content on a user request.</p><p> is used to fetch the feed; it offers better performance. </p><p>It includes an extra parameter in API requests and responses. The cursor parameter points to a specific item in the dataset; for example, the post’s timestamp to fetch feed until a specific post.</p><ul><li><p>A sequential unique column, such as the post's timestamp, is chosen for pagination.</p></li><li><p>The user requests include the cursor parameter to indicate the result’s offset.</p></li><li><p>The index server uses the cursor parameter to paginate the result dataset.</p></li><li><p>The index server responds with the cursor parameter for future requests.</p></li></ul><p>The client decides the cursor parameter’s window size based on its viewport. The cursor-based pagination scales well as it prevents a full table scan in the index server.</p><p>Imagine a  as metadata to categorize content. Besides it’s possible to apply a label manually. A user chooses to hide or show a warning for posts with a specific label.</p><p>This preference is stored on their data server.</p><p>Here’s how Bluesky moderation works:</p><ul><li><p>The moderation service consumes the stream from the crawler.</p></li><li><p>The moderation service analyzes the content and assigns a label to it.</p></li><li><p>The index server stores the content along with its label.</p></li><li><p>The user requests are routed via the data server to the index server.</p></li><li><p>The data server includes label IDs in HTTP request headers before forwarding them.</p></li><li><p>The index server applies the label setting in the response.</p></li></ul><p>Also a data server operator does basic moderation. </p><p>The data server filters out the muted users before responding to the client.</p><p>Put simply, a user can post about anything, but the content is moderated before being shown to the public.</p><p>Bluesky allows a user to see how many people they follow also follow a specific user: <a href=\"https://www.ernberck.com/social-proof-explained/\">social proof</a>.</p><p>For example, when I visit <a href=\"https://bsky.app/profile/jay.bsky.team\">Jay’s</a> Bluesky profile, it shows how many people I follow also follow her.</p><p><em>Let’s dive into the different approaches they used to build this feature.</em></p><ul><li><p>Find the people I follow by querying the database.</p></li><li><p>Do separate parallel queries for each user to find the people they follow.</p></li><li><p>Check if any of them also follow Jay.</p></li></ul><p>But this approach won’t scale as the number of parallel queries increases with the number of people a user follows.</p><p>A scalable approach is to convert it into a set intersection problem:</p><ul><li><p>Set 1 tracks the people I follow.</p></li><li><p>Set 2 tracks the people who follow Jay.</p></li></ul><p>The intersection of these sets gives the expected result.</p><p>An in-memory graph service prevents expensive database queries and performs intersections quickly. Yet <a href=\"https://redis.io/docs/latest/develop/data-types/sets/\">Redis Sets</a> don’t use different CPU cores at once. So here’s how they implemented a minimum viable product:</p><ul><li><p>Each user has a 32-character DID.</p></li><li><p>The DID values are <a href=\"https://en.wikipedia.org/wiki/String_interning\">converted</a> into uint64 to reduce memory usage.</p></li><li><p>Each user’s DID maintains 2 sets: people they follow and people who follow them.</p></li></ul><p>But it still consumes a lot of memory and takes extra time to start.</p><p>So they optimized the graph service by implementing it using <a href=\"https://vikramoberoi.com/posts/a-primer-on-roaring-bitmaps-what-they-are-and-how-they-work/\">Roaring Bitmaps</a>.</p><p><em>Yet let’s take a step back and learn Bitmaps to better understand Roaring Bitmaps.</em></p><p>A  represents binary states using bit arrays.</p><p>Imagine Bluesky has only 100 users.</p><p>The index value of the people I follow is set to 1 on the Bitmap; the people I follow are then found by walking the Bitmap and recording the index of non-zero bits. A constant time lookup tells whether I follow a specific user. Although Bitmaps do faster bitwise operations, it’s inefficient for sparse data. </p><p>A 100-bit long Bitmap is needed even if I follow only a single user; so, it won’t scale for Bluesky’s needs.</p><p>It turns consecutive 0s and 1s into a number for reduced storage. For example, if I follow the last 10 users, only the last 10 indices are marked by 1. With Run-Length Encoding, it’s stored as 90 0s and 10 1s, thus low storage costs.</p><p>But this approach won’t scale for randomly populated data, and a lookup walks the entire Bitset to find an index.</p><p>Ready for the best technique? .</p><p>Think of it as compressed Bitmaps, but 100 times faster. <em>A Roaring Bitmap splits data into containers and each container uses a different storage mechanism.</em></p><ul><li><p>The dense data is stored in a container using Bitmap; it uses a fixed-size bit array.</p></li><li><p>The data with a large contiguous range of integers are stored in a container using run-length encoding; which reduces storage costs.</p></li><li><p>The sparse data is stored in a container as integers in a sorted array; it reduces storage needs.</p></li></ul><p>Put simply, Roaring Bitmaps use different containers based on data sparsity.</p><p>The set intersection is done in parallel and a container is converted into a different format for the set intersection. Also the graph data is stored and transferred over the network in Roaring Bitmap’s <a href=\"https://github.com/dgraph-io/sroar\">serialization format</a>.</p><p>Many instances of graph service are run for high availability and <a href=\"https://kubernetes.io/docs/tutorials/kubernetes-basics/update/update-intro/\">rolling updates</a>.</p><p>Bluesky supports short videos up to 90 seconds long.</p><p>The video is streamed through HTTP Live Streaming (). Think of HLS as a group of text files; it’s a standard for adaptive bitrate video streaming.</p><p>A client dynamically changes video quality based on network conditions.</p><ul><li><p>A video is encoded into different quality levels: 480p, 720p, 1080p, and so on.</p></li><li><p>Each encoded video is split into small segments of 5 seconds long.</p></li></ul><p>The client checks the network conditions and requests video segments of the right quality.</p><p>HLS uses Playlist files to manage encoded video segments. </p><p>Imagine the  as a text file, and there are 2 types of Playlists:</p><ul><li><p>Master playlist: list of all video quality levels available.</p></li><li><p>Media playlist: list of all video segments for a specific video quality.</p></li></ul><p>First, the client downloads the Master playlist to find available quality levels. Second, it selects a Media playlist based on network conditions. Third, it downloads the video segments in the sequence defined on the Media playlist.</p><p>The videos and playlists are cached in CDN to reduce costs and handle bandwidth needs. The stream requests are routed to CDN via <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302\">302 HTTP redirects</a>.</p><p>The video views are tracked by <a href=\"https://systemdesign.one/distributed-counter-system-design/\">counting</a> requests to its Master playlist file.</p><p>And the response for the Master playlist includes a Session ID; it’s included in future requests for Media playlists to track the user session.</p><p>Besides the video seconds watched by a user are found by checking the last fetched video segment.</p><p>A video subtitle is stored in text format and has a separate Media playlist file.</p><p>The Master playlist includes a reference to subtitles; here’s how it works:</p><ul><li><p>The client finds the available subtitles by querying the Master playlist.</p></li><li><p>The client downloads a specific subtitle's Media playlist based on the language selected by the user.</p></li></ul><p>The client then downloads the subtitle segments defined in the Media Playlist.</p><p>Subscribe to get simplified system design case studies delivered to your inbox:</p><h3>Bluesky Quality Attributes</h3><p>A user’s data is cryptographically signed before saving it in the data server; it shows data authorship.</p><p>The <a href=\"https://www.baeldung.com/cs/merkle-trees\">Merkle search tree</a> is used to check the integrity of data, such as posts, transferred over the network.</p><p>Think of the  as an efficient data structure to check data integrity. It doesn’t store original data; instead, it has only cryptographic hashes representing data.</p><p>Besides the crawler keeps a copy of each user’s repository; it verifies the Merkle search tree signatures on data updates.</p><p>The crawler generates a stream to update the index server.</p><p>Yet the stream increases bandwidth and infrastructure costs. So the events are validated on the crawler and services, such as the feed generator, are connected to a trusted crawler. Besides Merkle search tree blocks are <a href=\"https://github.com/bluesky-social/jetstream\">converted</a> to JSON objects, which lack verifiability and signatures, to reduce stream size.</p><p>Put simply, Merkle search tree verification overhead is avoided by consuming the stream from a trustable crawler.</p><p>The crawler transfers the stream to the index server over websockets; <a href=\"https://facebook.github.io/zstd/\">zstd</a> compresses websocket traffic for performance.</p><p>A user, with a massive following, needs a data server with only tiny computing resources as the index server displays aggregated data.</p><p>Every change to a user's profile is propagated via the index server; which, means <a href=\"https://systemdesign.one/consistency-patterns/#eventual-consistency\">eventual consistency</a>.</p><p>Yet a user viewing their profile right after an update should see the latest changes. So Bluesky offers <em>read-after-write consistency for profile updates</em>; here’s how:</p><ul><li><p>All client requests are routed via the data server to the index server.</p></li><li><p>The response headers from the index server are compared against the data server. </p></li><li><p>The response is updated to include missing records before returning it to the client.</p></li></ul><p>This read-after-write behavior applies only to a user viewing their profile; others see the changes eventually.</p><p>A popular user's post notifies many users, which results in many requests to view the post at once.</p><p>The results from the index server are cached to reduce the database load. Yet a popular user's post creates a <a href=\"https://en.wikipedia.org/wiki/Thundering_herd_problem\">thundering herd problem</a>.</p><ul><li><p>A view request, the first one, from a follower reaches the cache server.</p></li><li><p>The cache server queries the database for post content.</p></li><li><p>Requests from others reach the database while the cache waits for the first response.</p></li></ul><p>It groups requests for the same data within a short period. Then forwards only a single request to the database; thus, preventing the thundering herd problem.</p><p>The data server notifies the crawler about data changes in repositories over websockets.</p><p>Yet network interruptions occur, so the crawler periodically checks repositories. It then compares the data against its local replica to find data changes.</p><p>Also requests are rate-limited to keep the system operational.</p><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429\">HTTP 429 (Too Many Requests)</a> is returned in response headers when the rate limit threshold is exceeded. Interactions between servers are also rate-limited to avoid abuse in the decentralized architecture. A new data server’s request limit capacity is increased over time, based on trust, to keep the crawler running smoothly.</p><p>Besides a user is only allowed up to 1,666 requests an hour to reduce bot activity.</p><p>Bluesky has more than <a href=\"https://blueskyusercount.com/\">28 million users</a>; it became an independent company in 2021.</p><p>Although anybody can host a server on ATProto, most Bluesky services are now run by a single company.</p><p>ATProto and Bluesky look like an interesting new approach to social networks.</p><p>👋  -Do you want to level up at work and better understand technical discussions?</p><p>My mission is to help you go from 0 to 1 in system design by spending less than 37 minutes a month.</p><p>This is the first deep dive article in this newsletter; it's a free preview.</p><ul><li><p>Yet future deep dives, starting this February, are available only to paid subscribers.</p></li><li><p>And subscription fees will be way higher than the current fees.</p></li></ul><p>So<strong> pledge now to get access at a very low price.</strong></p><p><em>\"This newsletter gave me ideas on how to build scalable systems.\"</em> Aditya, Google.</p><p>Subscribe to get simplified case studies delivered straight to your inbox:</p><p>Thank you for supporting this newsletter. Consider sharing this post with your friends and get rewards. Y’all are the best.</p>","contentLength":19389,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/449c6406-d812-4547-bc2a-8e55c325ce3c_1280x720.gif","enclosureMime":"","commentsUrl":null},{"title":"What's an API?","url":"https://blog.algomaster.io/p/whats-an-api","date":1737437464,"author":"Ashish Pratap Singh","guid":712,"unread":true,"content":"<p>API stands for <strong>Application Programming Interface</strong>.</p><p>At its core, an API is a  that takes an  and gives you predictable </p><p>Think of an API as a  that enables applications to interact <strong>without needing direct access to each other's code or database</strong>.</p><p>Almost every digital service you use today—social media, e-commerce, online banking, ride-hailing apps—all of them are a bunch of APIs working together.</p><ul><li><p> – If you provide a city name as input (), the API returns the <strong>current temperature, humidity, and weather conditions</strong>.</p></li><li><p> – If you provide a <strong>pickup and destination address</strong>, the API finds the  and calculates the estimated fare.</p></li><li><p> – If you provide a list of numbers (), the API returns the  ().</p></li></ul><p>When engineers build APIs, they clearly define <strong>what inputs the API accepts</strong> and , ensuring consistent behavior across different applications.</p><p>APIs follow a simple  model:</p><ul><li><p>A client (such as a web app or mobile app) makes a request to an API.</p></li><li><p>The API (hosted on an API server) processes the request, interacts with the necessary databases or services, and prepares a response.</p></li><li><p>The API sends the response back to the client in a structured format (usually JSON or XML).</p></li></ul><p>Every API requires , and passing incorrect data can result in errors.</p><p>For example: If you tried putting your name into the Google Maps API as an input, that wouldn’t work very well.</p><p>Some APIs also <strong>require inputs in a specific format</strong>.</p><p>Example: The  might need the input as  instead of .</p><p>APIs often  to ensure they are correct before processing them, which helps maintain .</p><p>Just as APIs require , they also return .</p><p>For example, the  always returns <strong>coordinates in the same format</strong>.</p><pre><code>{   \"latitude\": 40.6892,   \"longitude\": -74.0445 }</code></pre><p>If the API can’t find the location, it provides an error response explaining why.</p><pre><code>{   \"error\": \"Invalid address format\",   \"code\": 400 }</code></pre><p>If you’re finding this newsletter valuable and want to deepen your learning, consider becoming a .</p><p>As a paid subscriber, you'll receive an <strong>exclusive deep-dive article</strong> every week, access to a structured100+topics and interview questions, and other .</p><p>The apps you use every day—whether it's <strong>Gmail, Instagram, Uber, or Spotify</strong>—are essentially <strong>a collection of APIs with a polished user interface (UI) on top</strong>.</p><p>Most applications follow the <strong>frontend/backend architecture</strong>, where:</p><ul><li><p>The  consists of APIs that handle <strong>data processing, business logic, and communication with databases</strong>.</p></li><li><p>The  is a <strong>graphical user interface (GUI)</strong> that interacts with these APIs, making applications user-friendly and accessible <strong>without requiring users to write code</strong>.</p></li></ul><p>Let’s break this down with a real-world example: .</p><p>Before the Uber app existed as a sleek, user-friendly experience, the company first built <strong>the core APIs that power ride-hailing services:</strong></p><ul><li><p>Calculating Fares &amp; Routes</p></li><li><p>Matching Riders &amp; Drivers</p></li></ul><p>These APIs run on Uber’s servers, forming the . Every time you request a ride, track your driver, or make a payment, these backend APIs handle the request.</p><p> are responsible for optimizing these APIs, improving ride-matching algorithms, securing transactions, and ensuring a smooth experience for millions of users.</p><p>The backend APIs handle , but they —which isn't practical for everyday users. That’s why companies build a <strong>frontend (user interface)</strong> on top of these APIs, allowing users to interact with the system .</p><p>When you enter your pickup &amp; destination address, the frontend sends an API request to  and displays available cars.</p><p>Once the trip is complete, the frontend may call the process payment API to display the receipt.</p><p>APIs come in different forms depending on , , and .</p><h3>1. Open APIs (Public APIs)</h3><p>Open APIs, also known as , are accessible to external developers with minimal restrictions.</p><p>Companies provide these APIs to encourage  to integrate their services and build new applications on top of them.</p><h4><strong>Example: YouTube Data API</strong></h4><p>Normally, when you use the , it makes  to fetch your video feed, search for content, or post comments. However, YouTube also provides a  that allows developers to access some of this functionality .</p><p>For example, the  allows developers to fetch video results based on a keyword. If you send a request to the API with <code>\"machine learning tutorial\"</code> as the search term, it will return a structured response (JSON format) containing a list of relevant videos, including <strong>titles, descriptions, thumbnails, and video links</strong>.</p><p>This is incredibly useful because it enables developers to build custom applications on top of YouTube.</p><h3>2. Internal APIs (Private APIs)</h3><p>, also known as , are designed xclusively for internal use within an organization. Unlike Open APIs, these are not accessible to external developers and are used to facilitate seamless communication between different internal systems within a company.</p><p>Let’s take  as an example. When you place an order, you might assume that a single system processes your request. In reality,  (order processing, inventory, payment, logistics etc..) work together behind the scenes to fulfill your order efficiently.</p><p>Each of these APIs , but they communicate through well-defined protocols to ensure a smooth and efficient process.</p><p>Internal APIs allow companies to break down their applications into <strong>smaller, manageable services</strong>, making it easier to scale. Developers can  across different projects, reducing  and speeding up development.</p><p>The first two types of APIs we discussed—<strong>Open APIs and Internal APIs</strong>—are functional and serve  like fetching weather data or booking a ride.</p><p>But there’s another category of APIs that developers use daily:  (also called  or ).</p><p>These APIs don’t connect different applications; instead, they provide predefined functions within a programming language or framework to make development easier.</p><p>Python’s built-in list API</p><p>When working with lists, Python provides a set of <strong>built-in functions (methods) to manipulate data</strong>.</p><pre><code>numbers = [5, 3, 8, 1, 4] numbers.sort()  # API call to sort the list  fruits = [\"apple\", \"banana\"] fruits.append(\"orange\")  # API call to add an element  fruits.pop()  # API call to remove the last element</code></pre><p>Instead of writing sorting algorithms from scratch, developers can use  or  in Python.</p><p>Code APIs are not just limited to built-in programming language functions. Take , an AI/ML library. It provides a  for training machine learning models without needing to implement complex mathematical operations from scratch.</p><p>For example, creating a  using TensorFlow's API is as simple as:</p><pre><code>import tensorflow as tf model = tf.keras.Sequential([tf.keras.layers.Dense(64, activation=\"relu\")])</code></pre><p>Programming APIs abstract away complexity so that developers can focus on building solutions rather than reinventing the wheel.</p><p>APIs communicate using different <strong>protocols and architectures</strong> that define how requests are sent, how responses are formatted, and how data is exchanged between systems.</p><h3>1. REST (Representational State Transfer)</h3><p>REST is the most widely used API communication method today. It is <strong>lightweight, stateless, and scalable</strong>, making it perfect for web services and mobile applications. </p><p>REST APIs follow a set of design principles and use  (GET, POST, PUT, DELETE) to perform operations.</p><p>REST APIs are based on , and each resource is accessed through a . The API follows the , meaning the client sends a request, and the server processes it and sends a response.</p><h4>Example: REST API for a Bookstore</h4><p><strong>Retrieve a list of books (GET Request):</strong></p><pre><code>GET https://api.bookstore.com/books</code></pre><pre><code>[   { \"id\": 1, \"title\": \"Clean Code\", \"author\": \"Robert C. Martin\" },   { \"id\": 2, \"title\": \"The Pragmatic Programmer\", \"author\": \"Andrew Hunt\" } ]</code></pre><h3>2. SOAP (Simple Object Access Protocol)</h3><p>SOAP is an older API communication method that <strong>relies on XML-based messaging</strong>. </p><p>Unlike REST, which is lightweight, SOAP is more structured and secure, making it ideal for banking, healthcare, and enterprise applications.</p><p>SOAP messages are sent using  and require a <strong>WSDL (Web Services Description Language) file</strong>, which defines the API's available functions and request structure.</p><h4><strong>Example: SOAP API for a Banking Service</strong></h4><p> Fetching account balance</p><pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:bank=\"http://bank.example.com/\"&gt;    &lt;soapenv:Header/&gt;    &lt;soapenv:Body&gt;       &lt;bank:GetAccountBalance&gt;          &lt;bank:accountNumber&gt;123456&lt;/bank:accountNumber&gt;       &lt;/bank:GetAccountBalance&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt; </code></pre><pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;    &lt;soapenv:Body&gt;       &lt;bank:GetAccountBalanceResponse&gt;          &lt;bank:balance&gt;5000.00&lt;/bank:balance&gt;       &lt;/bank:GetAccountBalanceResponse&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;</code></pre><p>GraphQL is an alternative to REST that <strong>allows clients to request exactly the data they need</strong>, making it more efficient for modern applications. Unlike REST, which requires multiple API calls to fetch related data, GraphQL can <strong>fetch all necessary data in a single request</strong>.</p><p>Instead of predefined endpoints, GraphQL exposes a , and the client sends queries to request specific fields.</p><h4>Example: Fetching a user's profile and their recent posts in a single request.</h4><pre><code>{   user(id: 123) {     name     email     posts {       title       likes     }   } }</code></pre><pre><code>{   \"data\": {     \"user\": {       \"name\": \"Alice\",       \"email\": \"alice@example.com\",       \"posts\": [         { \"title\": \"Hello World\", \"likes\": 100 },         { \"title\": \"GraphQL is Amazing!\", \"likes\": 200 }       ]     }   } }</code></pre><p>gRPC (Google Remote Procedure Call) is a <strong>high-performance API communication method</strong> that uses <strong>Protocol Buffers (Protobuf)</strong> instead of JSON or XML, making it faster and more efficient.</p><p>gRPC uses  instead of text-based formats, reducing payload size and it supports , meaning the client and server can send data at the same time.</p><p>Using an API might seem complex at first, but it follows a simple  pattern.</p><p>Here’s a guide on<strong> how to find, access, and interact with an API</strong> step by step:</p><h3><strong>Step 1: Find an API to Use</strong></h3><p>Before using an API, you need to  for your needs. APIs are available for different services like weather data, finance, social media, etc.</p><p><strong>Official API Documentation:</strong></p><h3><strong>Step 2: Read the API Documentation</strong></h3><p>API documentation explains <strong>how to use the API, available endpoints, authentication, and response formats</strong>.</p><p>The OpenWeatherMap API allows users to fetch real-time weather data. Here's a breakdown of its key components:</p><pre><code>https://api.openweathermap.org/data/3.0/weather?q=city_name&amp;appid=YOUR_API_KEY</code></pre><ul><li><p>: City name (e.g., )</p></li><li><p>: API Key (required for access)</p></li></ul><h3><strong>Step 3: Get API Access (API Key / Authentication)</strong></h3><p>Most APIs  to prevent unauthorized access and manage usage limits.</p><h4><strong>Common Authentication Methods:</strong></h4><ul><li><p>A unique key provided by the API service</p></li><li><p>Secure login via Google, Github, etc.</p></li><li><p>Token-based authentication</p></li><li><p>Username + password (Base64 encoded)</p></li></ul><p><strong>Example: Getting an API Key (OpenWeather API)</strong></p><ul><li><p>Sign up at https://home.openweathermap.org/users/sign_up.</p></li><li><p>Go to the  section and generate a key.</p></li><li><p>Use the API key in requests:</p></li></ul><pre><code>GET https://api.openweathermap.org/data/2.5/weather?q=London&amp;appid=YOUR_API_KEY</code></pre><h3><strong>Step 4: Test the API Using Postman or cURL</strong></h3><p>Before writing code,  to see how it responds.</p><h4><strong>Option 1: Using Postman (Recommended for Beginners)</strong></h4><ul><li><p>Click , enter the API endpoint URL (<code>https://api.openweathermap.org/data/3.0/weather?q=London&amp;appid=YOUR_API_KEY</code>).</p></li><li><p>Select  as the HTTP method.</p></li><li><p>Click  and view the response in .</p></li></ul><h4><strong>Option 2: Using cURL (For Command Line Users)</strong></h4><p>You can also test APIs directly from the  using .</p><pre><code>curl -X GET \"https://api.openweathermap.org/data/3.0/weather?q=New+York&amp;appid=YOUR_API_KEY\"</code></pre><h3><strong>Step 5: Write Code to Call the API</strong></h3><p>Now that you’ve tested the API, it’s time to <strong>integrate it into your application</strong>.</p><h4><strong>Example: Calling an API in Python</strong></h4><pre><code>import requests  url = \"https://api.openweathermap.org/data/3.0/weather?q=New York&amp;appid=YOUR_API_KEY\" response = requests.get(url)  if response.status_code == 200:     data = response.json()     print(f\"Temperature: {data['main']['temp']}°C\") else:     print(\"Error:\", response.status_code)</code></pre><ul><li><p> – Sends an API request.</p></li><li><p> – Converts response to JSON.</p></li><li><p><code>if response.status_code == 200</code> – Checks if the request was successful.</p></li></ul><h3><strong>Step 6: Handle Errors &amp; Rate Limits</strong></h3><p>APIs <strong>don’t always return perfect responses</strong>. You should handle:</p><ul><li><p> (e.g., wrong city name).</p></li><li><p> (e.g., expired API keys).</p></li><li><p> (e.g., exceeding request limits).</p></li></ul><h4><strong>Example: Handling API Errors in Python</strong></h4><pre><code>if response.status_code == 200:     data = response.json()     print(f\"Weather: {data['weather'][0]['description']}\") elif response.status_code == 401:     print(\"Error: Invalid API key\") elif response.status_code == 404:     print(\"Error: City not found\") else:     print(f\"Unexpected error: {response.status_code}\")</code></pre><h3>Step 7: Use API Responses in Your Application</h3><p>Once you fetch data from an API, you can <strong>display it dynamically in a web or mobile app</strong>.</p><p> You can build a weather dashboard using the OpenWeatherMap API.</p><ul><li><p>Fetch live weather data from the API.</p></li><li><p>Parse and extract relevant details (temperature, humidity, condition).</p></li><li><p>Display the weather report in a user-friendly format.</p></li></ul><p>If you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.</p><p>If you have any questions or suggestions, leave a comment.</p><div data-attrs=\"{&quot;url&quot;:&quot;https://blog.algomaster.io/p/scalability?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjo4MzYwMjc0MywicG9zdF9pZCI6MTQwMDc4MDk0LCJpYXQiOjE3Mzc1MzgxODMsImV4cCI6MTc0MDEzMDE4MywiaXNzIjoicHViLTIyMDIyNjgiLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.xroFXQDDEPvo2FWnnt-G2Ji9MzYIDtJ68NRQX6sT8x8&quot;,&quot;text&quot;:&quot;Share&quot;}\" data-component-name=\"CaptionedButtonToDOM\"><div><p>This post is public so feel free to share it.</p></div></div><p> If you’re finding this newsletter helpful and want to get even more value, consider becoming a .</p><p>I hope you have a lovely day!</p>","contentLength":13212,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/ae14a376-92a3-4ff6-a329-8e4f2a7ac9b5_1546x1074.png","enclosureMime":"","commentsUrl":null},{"title":"More Python parallel stuff with joblib-modal","url":"https://www.youtube.com/watch?v=0SXyIcsT4tg","date":1737160389,"author":"probabl","guid":740,"unread":true,"content":"<article>One of the probabl colleagues has been working on an integration between joblib (which scikit-learn uses for parallel processing) and Modal (a cloud-provider known for it's likeable configuration for compute resources in Python). In this livestream we will explore a very early version and show you what's possible now and what is different. \n\nThe notebook from this episode can be found here:\nhttps://github.com/probabl-ai/youtube-appendix/blob/main/00-livestream/modal-jobs.ipynb\n\nWebsite: https://probabl.ai/\nDiscord: https://discord.probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nTwitter: https://x.com/probabl_ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\nIf you're keen to see more videos like this, you can follow us over at  @probabl_ai.</article>","contentLength":889,"flags":null,"enclosureUrl":"https://www.youtube.com/v/0SXyIcsT4tg?version=3","enclosureMime":"","commentsUrl":null}],"tags":["learning"]}