{"id":"Lx2uDWR7f1yr334","title":"Programming","displayTitle":"Programming","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":200,"items":[{"title":"RandomInvert in PyTorch","url":"https://dev.to/hyperkai/randominvert-in-pytorch-5eb0","date":1739711271,"author":"Super Kai (Kazuya Ito)","guid":615,"unread":true,"content":"<ul><li>The 1st argument for initialization is (Optional-Default:-Type: or ):\n*Memos:\n\n<ul><li>It's the probability of whether an image is inverted or not.</li></ul></li><li>The 1st argument is (Required-Type: or ()):\n*Memos:\n\n<ul><li>A tensor must be 2D or 3D.</li></ul></li></ul><div><pre><code></code></pre></div>","contentLength":218,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A better pkg.go.dev","url":"https://dev.to/jacktt/a-better-pkggodev-hip","date":1739709306,"author":"JackTT","guid":579,"unread":true,"content":"<div><p>I have never been able to read a package's documentation on pkg.go.dev since all the code there is in black &amp; white...\n<a rel=\"noopener noreferrer\" href=\"https://github.com/huantt/better-pkg-go-dev./docs/before.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fgithub.com%2Fhuantt%2Fbetter-pkg-go-dev.%2Fdocs%2Fbefore.png\" alt=\"original.png\"></a></p><p>This is the reason I created this repository to make it possible to read.</p><p>Every time you want to read a package's documentation, you just need to replace <a href=\"https://pkg.go.dev\" rel=\"nofollow noopener noreferrer\">pkg.go.dev</a> with <a href=\"https://pkgo.dev\" rel=\"nofollow noopener noreferrer\">pkgo.dev</a>. .</p><p>We use Nginx as proxy server.</p><p>Every time a request come in, we forward it to the <a href=\"https://pkg.go.dev\" rel=\"nofollow noopener noreferrer\">pkg.go.dev</a> server, then append the <a href=\"https://highlightjs.org\" rel=\"nofollow noopener noreferrer\">highlight.js</a> script to the response before sending it back to the client.</p><p>Since some README files do not specify the code language, we also update  tags to <code>&lt;code class=\"language-go\"&gt;</code> to enable syntax highlighting.</p><p>If you don't trust me, no worry, you can deploy it yourself:</p><ul><li>Append <code>127.0.0.1       pkg.go.dev.local</code> to </li><li>Run <code>docker-compose up -d --build</code></li><li>Access </li></ul></div>","contentLength":768,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"GaussianBlur in PyTorch (3)","url":"https://dev.to/hyperkai/gaussianblur-in-pytorch-3-56do","date":1739704832,"author":"Super Kai (Kazuya Ito)","guid":567,"unread":true,"content":"<div><pre><code></code></pre></div>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[D] The steps to do original research ( it's a rant as well )","url":"https://www.reddit.com/r/MachineLearning/comments/1iqq4fz/d_the_steps_to_do_original_research_its_a_rant_as/","date":1739704463,"author":"/u/Snoo_65491","guid":540,"unread":true,"content":"<p>I am a Master's Student in the UK. I have been reading papers on Diffusion for a while. I have contacted PhD students at my University and have expressed my interest in working with them. I thought that I would be helping them with their research direction. However, after talking to them, they told me to read some papers and then find a research idea. </p><p>For Context, I am reading about Diffusion Models. The more I read, I realize that I lack some math fundamentals. I am filling those holes, through courses, books and articles. However, it takes time. I believe that this lack of fundamental understanding is stopping me from coming up with hypotheses. I can find some research gaps through recent survey papers, but I am not able to come up with any hypotheses or a solution.</p><p>Am I heading in the right direction? Does understanding stuff from a fundamental standpoint help with producing novel research ideas? How to generate novel research ideas? If you have some tips, I would be glad to hear them.</p><p>P.S. I have never published before. Therefore, I am sorry if I am missing something fundamental. </p>","contentLength":1099,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why Go’s Functional Programming is the Ultimate Coding Style","url":"https://dev.to/leapcell/why-gos-functional-programming-is-the-ultimate-coding-style-53ee","date":1739703684,"author":"Leapcell","guid":578,"unread":true,"content":"<p>When you hear \"functional programming,\" Go usually isn't the first language that comes to mind. You might think of Haskell, with its pure functions and monads (don't panic, we'll explain that in detail later), or JavaScript, which loves to showcase its features with higher - order functions and callbacks. But in fact, you can also do functional programming in Go, and the process is far from dull.</p><p>First of all, let's talk about higher - order functions. Higher - order functions can work well with other functions, either taking them as parameters or returning them as values. In the world of Go, implementing higher - order functions is not only possible but also quite ingenious.</p><div><pre><code></code></pre></div><p>You see, in this example, the  function takes an integer slice and a judgment function , and returns the elements in the slice that meet the judgment conditions. Doesn't it seem a bit like a faster JavaScript?</p><p>Next up is currying. It is the process of breaking down a function that takes multiple arguments into a series of functions, each taking a single argument. Currying is actually not as complicated as it might seem.</p><div><pre><code></code></pre></div><p>In this example, the  function takes an integer  and returns a new function. This new function takes another integer  and returns the result of . Simple, straightforward, and gets the job done without any frills.</p><p>One of the characteristics of functional programming is immutability. Once something is constructed, it doesn't change. Instead, if you need something different, you build a new one. This might sound wasteful at first, but in fact, it keeps the code clean and reduces side effects.</p><div><pre><code></code></pre></div><p>In this example, instead of directly modifying the original , we created a new  and modified it.</p><p>Pure functions are like tidy friends. They don't touch or modify anything outside their scope. What you pass in is what you use, and what they return is their only effect.</p><div><pre><code></code></pre></div><p>In this example, the  function only depends on the passed - in parameter  and doesn't affect any external variables.</p><p>In the simplest terms, functors are anything that can map a function. Think of the humble array, applying a function to each item and getting a new array. In Go, there is no built - in general  function, but we can build one ourselves.</p><div><pre><code></code></pre></div><p>Here, we defined a  function that takes an integer slice and a function and returns a new slice, where each element is the result of processing the original slice element by the function.</p><p>Now, let's talk about endofunctors. It's just a fancy way of saying a functor that maps a type to the same type. Simply put, starting from a Go slice, you end up with a Go slice of the same type. It's not rocket science, just a matter of type consistency.</p><p>Taking the previous  as an example, it's a kind of endofunctor in disguise. It takes  and returns  without type conversion.</p><p>Imagine a party where everyone has to bring a friend. Monoids are like that, but for types. They need two things: an operation that combines two types and a special value, which is like the most likable friend - it gets along with everyone but doesn't change anything about them.</p><p>In Go, you can see this with slices or numbers. Let's take numbers as an example because they're easier to work with:</p><div><pre><code></code></pre></div><p>Here, 0 is our hero, the identity element, which keeps the numbers unchanged.</p><p>\"When someone says, 'A monad is a monoid in the category of endofunctors,' they're basically showing off their computer - science vocabulary.\" To explain in detail: A monad is a programming construct that deals with types and functions in a super - special way - like some people are picky about how their coffee is brewed.</p><p>In the simplest terms, a monoid is about combining things together using a special rule, which includes a useless element or identity element. Now, add endofunctors, which are like ordinary old functions but stick to transforming things within their own little universe (category). Put it all together, and you'll see that a monad can be seen as a way to chain functions together in a sequence, but in a super - self - contained way while also respecting the original structure of the data. It's like saying, \"We're going on a road trip, but we can only take the scenic backroads, and we'll end up back where we started.\"</p><p>Monads are all - rounders. They can not only handle values with context (such as errors or lists) but also chain operations together by passing the context. In Go, it might be a bit difficult to mimic this, but let's take a look at error handling, which is a practical use of monads.</p><div><pre><code></code></pre></div><p>This makeshift monad can help us handle computations that might go wrong without causing panics and chaos in the code.</p><p>Functional programming in Go might not be the poster child of the functional paradigm, but it's entirely feasible and can even be fun. Who would have thought, right? Now, you should understand that Go can achieve functional programming just like other languages. With a little effort, you can write clean, efficient, and robust code. </p><p>Finally, I'd like to recommend a platform that's perfect for deploying Golang code: </p><h3>\n  \n  \n  1. Multi - Language Support\n</h3><ul><li>Develop with JavaScript, Python, Go, or Rust.\n</li></ul><h3>\n  \n  \n  2. Deploy unlimited projects for free\n</h3><ul><li>pay only for usage — no requests, no charges.</li></ul><h3>\n  \n  \n  3. Unbeatable Cost Efficiency\n</h3><ul><li>Pay - as - you - go with no idle charges.\n</li><li>Example: $25 supports 6.94M requests at a 60ms average response time.\n</li></ul><h3>\n  \n  \n  4. Streamlined Developer Experience\n</h3><ul><li>Intuitive UI for effortless setup.\n</li><li>Fully automated CI/CD pipelines and GitOps integration.\n</li><li>Real - time metrics and logging for actionable insights.\n</li></ul><h3>\n  \n  \n  5. Effortless Scalability and High Performance\n</h3><ul><li>Auto - scaling to handle high concurrency with ease.\n</li><li>Zero operational overhead — just focus on building.\n</li></ul>","contentLength":5701,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Proj Ideas 💡 - Willing to lock in for Go (2025)","url":"https://www.reddit.com/r/golang/comments/1iqp4re/proj_ideas_willing_to_lock_in_for_go_2025/","date":1739700252,"author":"/u/ComfortableAcadia839","guid":533,"unread":true,"content":"<p>I'm a full stack JS/TS developer but just recently tried Go, built an in memory key-value Redis clone.. I've realised the language makes me enjoy coding ---&gt; </p><p>Can y'all recommend some project ideas (intermediate to advanced difficulty)</p><p>I want to build some solid projects ;)</p>","contentLength":272,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"just a silly game","url":"https://dev.to/bankai2054/just-a-silly-game-29kl","date":1739700124,"author":"anas barkallah","guid":566,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I created a command line SSH tunnel manager to learn Go","url":"https://github.com/alebeck/boring","date":1739699816,"author":"/u/Savings-Square572","guid":613,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1iqp11k/i_created_a_command_line_ssh_tunnel_manager_to/"},{"title":"Migrating from AWS CDK v1 to CDK v2","url":"https://dev.to/sami_jaballah/migrating-from-aws-cdk-v1-to-cdk-v2-21nd","date":1739698802,"author":"Sami Jaballah","guid":565,"unread":true,"content":"<p>If you’re currently using CDK v1 in your daily work, you’ve probably hit a roadblock trying to implement new AWS features. AWS isn’t adding those to CDK v1 anymore—so to keep up with the latest and greatest, you’ll need to migrate to CDK v2. It might sound like a hassle, but don’t worry—I’ve got your back. Let’s go through this step-by-step and get you up to speed, Python style.</p><h2>\n  \n  \n  Why Should You Care About CDK v2?\n</h2><p>Alright, let’s address the big question: why even bother migrating to CDK v2? Well, here are three solid reasons:</p><p>Simplified Dependencies: No more pulling in tons of packages for different AWS services. CDK v2 bundles everything into a single package: aws-cdk-lib. How awesome is that?</p><p>Stay Updated: CDK v1 isn’t getting any love anymore. If you want to keep up with the latest AWS features and updates, v2 is where it’s at.</p><p>Better Developer Experience: AWS has introduced some stability guarantees and cleaned up APIs, making it easier for us to write and maintain our infrastructure code.</p><p><strong>1. Consolidated Package Structure</strong>\nRemember the days of importing a separate package for each AWS service? That’s history now. CDK v2 unifies everything into aws-cdk-lib.</p><div><pre><code>from aws_cdk import core\nfrom aws_cdk.aws_s3 import Bucket\n</code></pre></div><div><pre><code>from aws_cdk import Stack\nfrom aws_cdk.aws_s3 import Bucket\n</code></pre></div><p><strong>2. Goodbye to Deprecated APIs</strong></p><p>Some APIs and constructs from v1 didn’t make the cut in v2. For instance, core.Construct has been replaced by constructs.Construct. A little cleanup never hurts, right?</p><p>There are some great new features, like improved stability guarantees for low-level (L1) constructs and better testing capabilities with assertions.</p><h2>\n  \n  \n  Let’s Get Migrating: Step-by-Step Guide\n</h2><p>Ready to dive in? Follow these steps to upgrade your Python CDK project to v2.</p><p><strong>1. Update Your Dependencies</strong></p><p>Start by upgrading your project dependencies to use CDK v2. Open your requirements.txt or Pipfile and update them:</p><div><pre><code>aws-cdk-lib&gt;=2.0.0\nconstructs&gt;=10.0.0\n</code></pre></div><p>Then, install the new dependencies:</p><div><pre><code>pip install -r requirements.txt\n</code></pre></div><p>This is where the magic happens. Go through your code and replace aws_cdk.core with aws_cdk.Stack, and adjust other imports to use aws-cdk-lib.</p><div><pre><code>from aws_cdk import core\nfrom aws_cdk.aws_s3 import Bucket\n</code></pre></div><div><pre><code>from aws_cdk import Stack\nfrom aws_cdk.aws_s3 import Bucket\n</code></pre></div><p><strong>3. Refactor Deprecated Constructs</strong></p><p>Some constructs have been replaced or removed. For example, core.Construct is now constructs.Construct. Update your code accordingly.</p><div><pre><code>class MyBucket(core.Construct):\n    def __init__(self, scope: core.Construct, id: str):\n        super().__init__(scope, id)\n        Bucket(self, \"MyBucket\")\n</code></pre></div><div><pre><code>from constructs import Construct\n\nclass MyBucket(Construct):\n    def __init__(self, scope: Construct, id: str):\n        super().__init__(scope, id)\n        Bucket(self, \"MyBucket\")\n</code></pre></div><p><strong>4. Remove Unnecessary Feature Flags</strong></p><p>CDK v2 has removed or integrated several feature flags that were necessary in v1. To clean up your cdk.json file, remove any obsolete flags.</p><div><pre><code>{\n  \"app\": \"python3 app.py\",\n  \"context\": {\n    \"@aws-cdk/core:newStyleStackSynthesis\": true,\n    \"@aws-cdk/aws-ec2:uniqueImds\": true,\n    \"@aws-cdk/core:stackRelativeExports\": true,\n    \"@aws-cdk/aws-secretsmanager:parseOwnedSecretName\": true,\n    \"@aws-cdk/aws-kms:defaultKeyPolicies\": true,\n    \"@aws-cdk/core:enableStackNameDuplicates\": true,\n    \"aws-cdk:enableDiffNoFail\": true,\n    \"@aws-cdk/aws-ecr-assets:dockerIgnoreSupport\": true,\n    \"@aws-cdk/aws-s3:grantWriteWithoutAcl\": true,\n    \"@aws-cdk/aws-efs:defaultEncryptionAtRest\": true\n  }\n}\n</code></pre></div><div><pre><code>{\n  \"app\": \"python3 app.py\"\n}\n</code></pre></div><p>Removing these flags ensures your project stays aligned with CDK v2 best practices.</p><p>Finally, make sure everything works as expected. Run these commands:</p><p>Fix any issues that pop up, and you’re good to go!</p><h2>\n  \n  \n  Migration Verification Checklist\n</h2><ul><li> All imports updated to aws-cdk-lib</li><li> Construct imports moved to constructs package</li><li> cdk diff shows expected changes</li></ul><p>And there you have it! Migrating from CDK v1 to v2 isn’t as scary as it might seem. With unified dependencies, better APIs, and future-proofing, this upgrade is worth the effort. Take it one step at a time, and don’t hesitate to ask for help if you hit a roadblock.</p><p>Have you already migrated to CDK v2? Or are you planning to? Share your experience (or any questions) in the comments below!</p><h2>\n  \n  \n  Useful links to help you along the way:\n</h2>","contentLength":4369,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"NASA has a list of 10 rules for software development","url":"https://www.cs.otago.ac.nz/cosc345/resources/nasa-10-rules.htm","date":1739696879,"author":"/u/namanyayg","guid":521,"unread":true,"content":"<h2>NASA has a list of 10 rules for software development</h2><p>Those rules were written from the point of view of people writing\nembedded software for extremely expensive spacecraft, where tolerating\na lot of programming pain is a good tradeoff for not losing a mission.\nI do not know why someone in that situation does not use the SPARK\nsubset of Ada, which subset was explicitly designed for verification,\nand is simply a better starting point for embedded programming than C.\n</p><p>I am criticising them from the point of view of people writing\nprogramming language processors (compilers, interpreters, editors)\nand application software.\n</p><p>We are supposed to teach critical thinking.  This is an example.\n</p><ul><li>How have Gerard J. Holzmann's and my different contexts affected\nour judgement?\n</li><li>Can you blindly follow his advice without considering \ncontext?\n</li><li>Can you blindly follow  advice without considering\nyour context?\n</li><li>Would these rules necessarily apply to a different/better\nprogramming language?  What if <a href=\"https://www.cs.otago.ac.nz/cosc345/resources/nasa-10-rules.htm#ppar\">function pointers\nwere tamed</a>?  What if the language provided opaque abstract\ndata types as Ada does?\n</li></ul><h3>1. Restrict all code to very simple control flow constructs —\ndo not use  statements,\n or  constructs,\nand direct or indirect .</h3><p>Note that  and \nare how C does exception handling, so this rule bans any use\nof exception handling.\n\n</p><p>It is true that banning recursion and jumps and loops without\nexplicit bounds means that you  your program is\ngoing to terminate.  It is also true that recursive functions\ncan be proven to terminate about as often as loops can, with\nreasonably well-understood methods.  What's more important here is\nthat “sure to terminate” does not imply\n“sure to terminate in my lifetime”:\n</p><pre>    int const N = 1000000000;\n    for (x0 = 0; x0 != N; x0++)\n    for (x1 = 0; x1 != N; x1++)\n    for (x2 = 0; x2 != N; x2++)\n    for (x3 = 0; x3 != N; x3++)\n    for (x4 = 0; x4 != N; x4++)\n    for (x5 = 0; x5 != N; x5++)\n    for (x6 = 0; x6 != N; x6++)\n    for (x7 = 0; x7 != N; x7++)\n    for (x8 = 0; x8 != N; x8++)\n    for (x9 = 0; x9 != N; x9++)\n        -- do something --;\n</pre><p>This does a bounded number of iterations.  The bound is N.\nIn this case, that's 10.  If each iteration of the loop body\ntakes 1 nsec, that's 10 seconds, or about 7.9×10\nyears.  What is the  difference between “will stop\nin 7,900,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000\nyears” and “will never stop”?\n\n</p><p>Worse still, taking a problem that is  expressed\nusing recursion and contorting it into something that manipulates an\nexplicit stack, while possible, turns clear maintainable code into\nbuggy spaghetti.  (I've done it, several times.  There's an example\non this web site.  It is  a good idea.)\n\n</p><h3>2. All loops must have a fixed upper-bound.  It must be trivially\npossible for a checking tool to prove statically that a preset\nupper-bound on the number of iterations of a loop cannot be exceeded.\nIf the loop-bound cannot be proven statically, the rule is considered\nviolated.</h3><p>This is an old idea.  As the example above shows, it is not enough\nby itself to be of any practical use.  You have to try to make the\nbounds reasonably , and you have to regard hitting an\nartificial bound as a run-time error.\n\n</p><p>By the way, note that putting depth bounds on recursive procedures\nmakes them every bit as safe as loops with fixed bounds.\n\n</p><h3>3. Do not use dynamic memory allocation after initialization.</h3><p>This is also a very old idea.  Some languages designed for embedded\nwork don't even  dynamic memory allocation.  The big\nthing, of course, is that embedded applications have a fixed amount of\nmemory to work with, are never going to get any more, and should not\ncrash because they couldn't handle another record.\n\n</p><p>Note that the rationale actually supports a much stronger rule:\ndon't even  dynamic memory allocation.  You can of\ncourse manage your own storage pool:\n</p><pre>    typedef struct Foo_Record *foo;\n    struct Foo_Record {\n\tfoo next;\n\t...\n    };\n    #define MAX_FOOS ...\n    static struct Foo_Record foo_zone[MAX_FOOS];\n    foo foo_free_list = 0;\n\n    void init_foo_free_list() {\n\tfor (int i = MAX_FOOS - 1; i &gt;= 0; i--) {\n\t    foo_zone[i].next = foo_free_list;\n\t    foo_free_list = &amp;foo_zone[i];\n\t}\n    }\n\n    foo malloc_foo() {\n\tfoo r = foo_free_list;\n\tif (r == 0) report_error();\n\tfoo_free_list = r-&gt;next;\n\treturn r;\n    }\n\n    void free_foo(foo x) {\n\tx-&gt;next = foo_free_list;\n\tfoo_free_list = x;\n    }\n</pre><p>This  satisfies the rule, but it\nviolates the  of the rule.  Simulating malloc()\nand free() this way is  than using the real\nthing, because the memory in foo_zone is permanently tied up\nfor Foo_Records, even if we don't need any of those at the\nmoment but do desperately need the memory for something else.\n\n</p><p>What you really need to do is to use a memory allocator\nwith known behaviour, and to prove that the amount of memory\nin use at any given time (data bytes + headers) is bounded\nby a known value.\n\n</p><p>Note also that SPlint can verify at compile time that\nthe errors NASA speak of do not occur.\n\n</p><p>One of the reasons given for the ban is that the performance\nof malloc() and free() is unpredictable.  Are these the only\nfunctions we use with unpredictable performance?  Is there\nanything about malloc() and free() which makes them\n unpredictable?  The existence of\nhard-real-time garbage collectors suggests not.\n\n</p><p>The rationale for this rule says that\n</p><blockquote>\nNote that the only way\nto dynamically claim memory in the absence of memory allocation from the\nheap is to use stack memory.  In the absence of recursion (Rule 1), an\nupper bound on the use of stack memory can derived statically, thus\nmaking it possible to prove that an application will always live within\nits pre-allocated memory means.\n</blockquote><p>Unfortunately, the sunny optimism shown here is unjustified.  Given\nthe ISO C standard (any version, C89, C99, or C11) it is \nto determine an upper bound on the use of stack memory.  There is not even\nany standard way to determine how much memory a compiler will use for the\nstack frame of a given function.  (There could have been.  There just isn't.)\nThere isn't even any requirement that two invocations of the same function\nwith the same arguments will use the same amount of memory.\nSuch a bound can only be calculated for a  version of a\nspecific compiler with specific options.  Here's a trivial example:\n</p><pre>void f() {\n    char a[100000];\n}\n</pre><p>How much memory will that take on the stack?  Compiled for debugging,\nit might take a full stack frame (however big that is) plus traceback\ninformation plus a million bytes for a[].  Compiled with optimisation,\nthe compiler might notice that a[] isn't used, and might even compile\ncalls to f() inline so that they generate no code and take no space.\nThat's an extreme example, but not really unfair.  If you want bounds\nyou can rely on, you had better  what your compiler does,\nand recheck every time anything about the compiler changes.\n\n</p><h3>4.  No function should be longer than what can be printed on\na single sheet of paper in a standard reference format with one line per\nstatement and one line per declaration.  Typically, this means no more\nthan about 60 lines of code per function.</h3><p>Since programmers these days typically read their code on-screen,\nnot on paper, it's not clear why the size of a sheet of paper is\nrelevant any longer.\n\n</p><p>The rule is arguably stated about the wrong thing.  The thing that\nneeds to be bounded is not the size of a function, but the size of a\nchunk that a programmer needs to read and comprehend.\n\n</p><p>There are also question marks about how to interpret this if you\nare using a sensible language (like Algol 60, Simula 67, Algol 68,\nPascal, Modula2, Ada, Lisp, functional languages like ML, O'CAML,\nF#, Clean, Haskell, or Fortran) that allows nested procedures.\nSuppose you have a folding editor that presents a procedure to\nyou like this:\n</p><pre>function Text_To_Floating(S: string, E: integer): Double;\n   � variables �\n   � procedure Mul(Carry: integer) �\n   � function Evaluate: Double �\n\n   Base, Sign, Max, Min, Point, Power := 10, 0, 0, 1, 0, 0;\n   for N := 1 to S.length do begin\n       C := S[N];\n       if C = '.' then begin\n          Point := -1\n       end else\n       if C = '_' then begin\n          Base := Round(Evaluate);\n          Max, Min, Power := 0, 1, 0\n       end else\n       if Char ≠ ' ' then begin\n          Q := ord(C) - ord('0');\n          if Q &gt; 9 then Q := ord(C) - ord('A') + 10\n          Power := Point + Point\n          Mul(Q)\n       end\n    end;\n    Power := Power + Exp;\n    Value := Evaluate;\n    if Sign &lt; 0 then Value := -Value;\nend;\n</pre><p>which would be much bigger if the declarations\nwere expanded out instead of being hidden behind �folds�.\nWhich size do we count?  The folded size or the unfolded size?\n</p><p>I was using a folding editor called Apprentice on the Classic Mac\nback in the 1980s.  It was written by Peter McInerny and was lightning\nfast.\n\n</p><h3>5.  The  of the code should average to a minimum of\ntwo assertions per function.</h3><p>Assertions are wonderful documentation and the very best debugging tool\nI know of.  I have never seen any real code that had too many assertions.\n\n</p><p>The example here is one of the ugliest pieces of code I've seen in a while.\n</p><pre>if (!c_assert(p &gt;= 0) == true) {\n    return ERROR;\n}\n</pre><p>It should, of course, just be\n</p><pre>if (!c_assert(p &gt;= 0)) {\n    return ERROR;\n}\n</pre><p>Better still, it should be something like\n</p><pre>#ifdef NDEBUG\n#define check(e, c) (void)0\n#else\n#define check(e, c) if (!(c)) return bugout(c), (e)\n#ifdef NDEBUG_LOG\n#define bugout(c) (void)0\n#else\n#define bugout(c) \\\n    fprintf(stderr, \"%s:%d: assertion '%s' failed.\\n\", \\\n    __FILE__, __LINE__, #s)\n#endif\n#endif\n</pre><p>Ahem.  The more interesting part is the required density.\nI just checked an open source project from a large telecoms\ncompany, and 23 out of 704 files (not functions) contained\nat least one assertion.  I just checked my own Smalltalk\nsystem and one SLOC out of every 43 was an assertion, but\nthe average Smalltalk “function” is only a few\nlines.  If the biggest function allowed is 60 lines, then\nlet's suppose the average function is about 36 lines, so\nthis rule requires 1 assertion per 18 lines.\n</p><p>Assertions are good, but what they are especially good\nfor is expressing the requirements on data that come\nfrom outside the function.  I suggest then that\n</p><ul><li>Every argument whose validity is not guaranteed by\nits typed should have an assertion to check it.\n</li><li>Every datum that is obtained from an external\nsource (file, data base, message) whose validity is\nnot guaranteed by its type should have an assertion\nto check it.\n</li></ul><p>The NASA 10 rules are written for embedded systems, where\nreading stuff from sensors is fairly common.\n\n</p><h3>6.  Data objects must be declared at the smallest possible level of\nscope.</h3><p>This is excellent advice, but why limit it to data objects?\nOh yeah, the rules were written for crippled languages where you\n declare functions in the right place.\n\n</p><p>People using Ada, Pascal (Delphi), JavaScript, or functional\nlanguages should also declare types and functions as locally as\npossible.\n\n</p><h3>7.  The return value of non-void functions must be checked by each\ncalling function, and the validity of parameters must be checked inside\neach function.</h3><p>This again is mainly about C, or any other language that indicates\nfailure by returning special values.  “Standard libraries\nfamously violate this rule”?  No, the  library does.\n\n</p><p>You have to be reasonable about this: it simply isn't practical\nto check  aspect of validity for \nargument.  Take the C function\n</p><pre>void *bsearch(\n    void const *key  /* what we are looking for */,\n    void const *base /* points to an array of things like that */,\n    size_t      n    /* how many elements base has */,\n    size_t      size /* the common size of key and base's elements */\n    int (*      cmp)(void const *, void const *)\n);\n</pre><p>This does a binary search in an array.  We must have key≠0,\nbase≠0, size≠0, cmp≠0, cmp(key,key)=0, and for all\n1&lt;i&lt;n,\n</p><pre>cmp((char*)base+size*(i-1), (char*)base+size*i) &lt;= 0\n</pre><p>Checking the validity in full would mean checking\nthat [key..key+size) is a range of readable addresses,\n[base..base+size*n) is a range of readable addresses,\nand doing n calls to cmp.  But the whole point of binary\nsearch is to do O(log(n)) calls to cmp.\n\n</p><p>The fundamental rules here are\n</p><ul><li>Don't let run-time errors go un-noticed, and\n</li><li>any check is safer than no check.\n</li></ul><h3>8. The use of the preprocessor must be limited to the inclusion of\nheader files and simple macro definitions.  Token pasting, variable\nargument lists (ellipses), and recursive macro calls are not allowed.</h3><p>Recursive macro calls don't really work in C, so no quarrel there.\nVariable argument lists were introduced into macros in\nC99 so that you could write code like\n</p><pre>#define err_printf(level, ...) \\\n    if (debug_level &gt;= level) fprintf(stderr, __VA_ARGS__)\n...\n    err_printf(HIGH, \"About to frob %d\\n\", control_index);\n</pre><p>This is a  thing; conditional tracing like this is a\npowerful debugging aid.  It should be , not banned.\n\n</p><p>The rule goes on to ban macros that expand into things that are\nnot complete syntactic units.  This would, for example, prohibit\nsimulating try-catch blocks with macros.  (Fair enough, an earlier rule\nbanned exception handling anyway.)  Consider this code fragment, from\nan actual program.\n</p><pre>    row_flag = border;     \n    if (row_flag) printf(\"\\\\hline\");\n    for_each_element_child(e0, i, j, e1)\n        printf(row_flag ? \"\\\\\\\\\\n\" : \"\\n\");\n        row_flag = true;  \n        col_flag = false;\n        for_each_element_child(e1, k, l, e2)\n            if (col_flag) printf(\" &amp; \");\n            col_flag = true;\n            walk_paragraph(\"\", e2, \"\");\n        end_each_element_child\n    end_each_element_child\n    if (border) printf(\"\\\\\\\\\\\\hline\");\n    printf(\"\\n\\\\end{tabular}\\n\");\n</pre><p>It's part of a program converting slides written in something like HTML\ninto another notation for formatting.  The \n…  loops walk over a tree.  Using\nthese macros means that the programmer has no need to know and no reason to\ncare how the tree is represented and how the loop actually works.\nYou can easily see that  must have at\nleast one unmatched { and  must have at least one\nunmatched }.  That's the kind of macro that's banned by requiring\ncomplete syntactic units.  Yet the readability and maintainability of\nthe code is  improved by these macros.\n\n</p><p>One thing the rule covers, but does not at the beginning stress, is\n“no  macro processing”.  That is,\nno #if.  The argument against it is, I'm afraid, questionable.  If there\nare 10 conditions, there are 2 combinations to test,\nwhether they are expressed as compile-time conditionals or run-time\nconditionals.\n\n</p><p>In particular, the rule against conditional macro processing\nwould prevent you defining your own <a href=\"https://www.cs.otago.ac.nz/cosc345/resources/nasa-10-rules.htm#check\">assertion macros</a>.\nIt is not obvious that that's a good idea.\n\n</p><h3>9.  The use of pointers should be restricted.  Specifically, no more\nthan one level of dereferencing is allowed.  Pointer dereference\noperations may not be hidden in macro definitions or inside typedef\ndeclarations.  Function pointers are not permitted.</h3><p>Let's look at the last point first.\n\n</p><pre>double integral(double (*f)(double), double lower, double upper, int n) {\n    // Compute the integral of f from lower to upper \n    // using Simpson's rule with n+1 points.\n    double const h = (upper - lower) / n;\n    double       s;\n    double       t;\n    int          i;\n    \n    s = 0.0;\n    for (i = 0; i &lt; n; i++) s += f((lower + h/2.0) + h*i);\n    t = 0.0;\n    for (i = 1; i &lt; n; i++) t += f(lower + h*i);\n    return (f(lower) + f(upper) + s*4.0 + t*2.0) * (h/6.0);\n}\n</pre><p>This kind of code has been important in numerical calculations since\nthe very earliest days.  Pascal could do it.  Algol 60 could do it.\nIn the 1950s, Fortran could do it.  And NASA would ban it, because in\nC,  is a function pointer.\n\n</p><p>Now it's important to write functions like this once and only once.\nFor example, the code has at least one error.  The comment says n+1\npoints, but the function is actually evaluated at 2n+1 points.  If we\nneed to bound the number of calls to f in order to meet a deadline,\nhaving that number off by a factor of two will not help.\n</p><p>It's nice to have just one place to fix.\nPerhaps I should not have copied that code from a well-known source (:-).\nCertainly I should not have more than one copy!\n\n</p><p>What can we do if we're not allowed to use function pointers?\nSuppose there are four functions foo, bar, ugh, and zoo that we need\nto integrate.  Now we can write\n</p><pre>enum Fun {FOO, BAR, UGH, ZOO};\n\ndouble call(enum Fun which, double what) {\n    switch (which) {\n        case FOO: return foo(what);\n        case BAR: return bar(what);\n        case UGH: return ugh(what);\n        case ZOO: return zoo(what);\n    }\n}\n\ndouble integral(enum Fun which, double lower, double upper, int n) {\n    // Compute the integral of a function from lower to upper \n    // using Simpson's rule with n+1 points.\n    double const h = (upper - lower) / n;\n    double       s;\n    double       t;\n    int          i;\n    \n    s = 0.0;\n    for (i = 0; i &lt; n; i++) s += call(which, (lower + h/2.0) + h*i);\n    t = 0.0;\n    for (i = 1; i &lt; n; i++) t += call(which, lower + h*i);\n    return (call(which, lower) + call(which, upper) + s*4.0 + t*2.0) * (h/6.0);\n}\n</pre><p>Has obeying NASA's rule made the code more reliable?  No, it has made\nthe code  to understand,  maintainable, and\n that it wasn't before.  Here's a call\nillustrating the mistake:\n</p><pre>x = integral(4, 0.0, 1.0, 10);</pre><p>I have checked this with two C compilers and a static checker at their\nhighest settings, and they are completely silent about this.\n\n</p><p>So there are legitimate uses for function pointers, and simulating\nthem makes programs , not better.\n\n</p><p>Now  in Fortran,\nAlgol 60, or Pascal.  Those languages had procedure \nbut not procedure . You could pass a subprogram name as\na parameter, and such a parameter could be passed on, but you could not\nstore them in variables.  You could have a  of C which\nallowed function pointer parameters, but made all function pointer\nvariables read-only.  That would give you a statically checkable subset\nof C that allowed integral().\n\n</p><p>The other use of function pointers is simulating object-orientation.\nImagine for example\n</p><pre>struct Channel {\n    void (*send)(struct Channel *, Message const *);\n    bool (*recv)(struct Channel *, Message *);\n    ...\n};\ninline void send(struct Channel *c, Message const *m) {\n    c-&gt;send(c, m);\n}\ninline bool recv(struct Channel *c, Message *m) {\n    return c-&gt;recv(c, m);\n}\n</pre><p>This lets us use a common interface for sending and receiving\nmessages on different kinds of channels.  This approach has been\nused extensively in operating systems (at least as far back as\nthe Burroughs MCP in the 1960s) to decouple the code that uses\na device from the actual device driver.     I would expect any\nprogram that controls more than one hardware device to do something\nlike this.  It's one of our key tools for controlling complexity.\n</p><p>Again, we can simulate this, but it makes adding a new kind of\nchannel harder than it should be, and the code is \nwhen we do it, not better.\n\n</p><p>The rule against more than one level of dereferencing is also\nan assault on good programming.  One of the key ideas that was\ndeveloped in the 1960s is the idea of ;\nthe idea that it should be possible for one module to define a\ndata type and operations on it and another module to use instances\nof that data type and its operations <em>without having to know\nanything about what the data type is</em>.\n</p><p>One of the things I detest about Java is that it spits in the\nface of the people who worked out that idea.  Yes, Java (now) has\ngeneric type parameters, and that's good, but you cannot use a\n type without knowing what that type is.\n\n</p><p>Suppose I have a module that offers operations\n</p><ul></ul><p>And suppose that I have two interfaces in mind.  One of them\nuses integers as tokens.\n</p><pre>// stasher.h, version 1.\ntypedef int token;\nextern token stash(item);\nextern item  recall(token);\nextern void  delete(token);\n</pre><p>Another uses pointers as tokens.\n</p><pre>// stasher.h, version 2.\ntypedef struct Hidden *token;\nextern  token stash(item);\nextern  item  recall(token);\nextern  void  delete(token);\n</pre><pre>void snoo(token *ans, item x, item y) {\n    if (better(x, y)) {\n\t*ans = stash(x);\n    } else {\n\t*ans = stash(y);\n    }\n}\n</pre><p>By the NASA rule, the function snoo() would not be accepted or rejected on\nits own merits.  With stasher.h, version 1, it would be accepted.\nWith stasher.h, version 2, it would be rejected.\n\n</p><p>One reason to prefer version 2 to version 1 is that version 2 gets\nmore use out of type checking.  There are ever so many ways to get an\nint in C.  Ask yourself if it ever makes sense to do\n</p><pre>token t1 = stash(x);\ntoken t2 = stash(y);\ndelete(t1*t2);\n</pre><p>I really do not like the idea of banning abstract data types.\n\n</p><h3>10.  All code must be compiled, from the first day of development,\nwith all compiler warnings enabled at the compiler’s\nmost pedantic setting.  All code must compile with these setting without\nany warnings.  All code must be checked daily with at least one, but\npreferably more than one, state-of-the-art static source code analyzer\nand should pass the analyses with zero warnings.</h3><p>This one is good advice.  Rule 9 is really about making your code\nworse in order to get more benefit from limited static checkers.  (Since\nC has no standard way to construct new functions at run time, the set of\nfunctions that a particular function pointer  point to can\nbe determined by a fixed-point data flow analysis, at least for most\nprograms.)  So is rule 1.  \n\n\n\n</p>","contentLength":21484,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iqode3/nasa_has_a_list_of_10_rules_for_software/"},{"title":"Resigning as Asahi Linux project lead","url":"https://marcan.st/2025/02/resigning-as-asahi-linux-project-lead/","date":1739696473,"author":"/u/namanyayg","guid":530,"unread":true,"content":"<p>Back in the late 2000s, I was a major contributor to the Wii homebrew scene. At the time, I worked on software (people call them “jailbreaks” these days) to allow users to run their own unofficial apps on the Nintendo Wii.</p><p>I was passionate about my work and the team I was part of (Team Twiizers, later fail0verflow). Despite that, I ended up burning out, primarily due to the very large fraction of entitled users. Most people using our software just wanted to play pirated games (something we did not support, condone, or directly enable). We kept playing a cat and mouse game with the manufacturer to keep the platform open, only to see our efforts primarily used by people who just wanted to steal other people’s work, and very loudly felt entitled to it. It got really old after a while. As newer game consoles were released, I ended up focusing on Linux ports purely for fun, and didn’t attempt to build a community nor work on the jailbreaks/exploits that would end up becoming a tool used by pirates.</p><p>When Apple released the M1, I realized that making it run Linux was my dream project. The technical challenges were the same as my console homebrew projects of the past (in fact, much bigger), but this time, the platform was already open - there was no need for a jailbreak, and no drama and entitled users who want to pirate software to worry about. And running Linux on an M1 was a  bigger deal than running it on a PS4.</p><p>I launched the Asahi Linux project, and received an immense amount of support and donations. Incredibly, I had the support I needed to make the project happen just a few days after my call to action, so I got to work. The first couple of years were amazing, as we brought the platform from nothing to one of the smoothest Linux experiences you can get on a laptop. Sure, there were/are still some bits and pieces of hardware support missing, but the overall experience rivaled or exceeded what you could get on most x86 laptops. And we built it all from scratch, with zero vendor support or documentation. It was an impossible feat, something that had never been done before, and we pulled it off.</p><p>Unfortunately, things became less fun after a while. First, there were the issues upstreaming code to the Linux kernel, which I’ve already spoken at length about and I won’t repeat here. Suffice it to say, being in a position to have to upstream code across practically every Linux subsystem, touching drivers of all categories as well as some common code, is an  frustrating experience. (<em>Clarification: This has nothing to do with Rust at this point, it’s well before R4L was even merged. Upstreaming to Linux is a terrible experience in C too.</em>)</p><p>But then also came the entitled users. This time, it wasn’t about stealing games, it was about features. “When is Thunderbolt coming?” “Asahi is useless to me until I can use monitors over USB-C” “The battery life sucks compared to macOS” (nobody ever complained when compared to x86 laptops…) “I can’t even check my CPU temperature” (yes, I seriously got that one). (<em>Edit: This wasn’t just a few instances; I’ve seen variations on the first three posted hundreds of times by now, including takes like “Thunderbolt/DP Alt are never going to happen”. A few times is fine, but the same thing repeated over and over again every day while we’re trying to make these things happen will get to anyone.</em>)</p><p>And, of course, “When is M3/M4 support coming?”</p><p>For a long time, well after we had a stable release, people kept claiming Asahi Linux and Fedora Asahi Remix in particular were “alpha” and “unstable” and “not suitable for a daily driver” (despite <a href=\"https://stats.asahilinux.org\">thousands of users</a>, myself included, daily driving it and even using it for servers).</p><p>No matter how much we did, how many impossible feats we pulled off, people always wanted more. And more. Meanwhile, donations and pledges kept slowly , and have done so since the project launched. Not enough to spell immediate doom for my dream of working on Asahi full time in the short term, but enough to make me wonder if any of this was really appreciated. The all-time peak monthly donation volume was the very first month or two. It seemed the more things we accomplished, the less support we had.</p><p>I knew burnout was a very real risk and managed this by limiting my time spent on certain areas, such as kernel upstreaming. This worked reasonably well and was mostly sustainable at the time.</p><p>Then 2024 happened. Last year was incredibly tumultuous for me due to personal reasons which I won’t go into detail about. Suffice it to say, I ended up traveling for most of the year, all the while having to handle various abusers and stalkers who harassed and attacked me and my family (and continue to do so).</p><p>I did make some progress in 2024, but this left me in a very vulnerable position. I hadn’t gotten nearly as much Asahi work done as I’d liked, and the users weren’t getting any quieter about demanding more features and machine support.</p><p>We shipped conformant Vulkan drivers and a whole emulation stack for x86-64 games and apps, but we were still stuck without DP Alt Mode (a feature which required deep reverse engineering, debugging, and kernel surgery to pull off, and which, if it were to be implemented properly and robustly, would require a major refactor of certain kernel subsystems or perhaps even the introduction of an entirely new subsystem).</p><p>I slowly started to ramp work up again at the beginning of this year, feeling very stressed out and guilty about having gotten very little work done for the previous year. “Full” DP Alt support was still a ways away, but we were hoping to ship a limited version that only worked on a specific Type C port for each machine type in the first month or two of the year. Sven had gotten some progress into the PHY code in December, so I picked it up and ended up beating the code of three drivers into enough shape that it mostly worked reliably. Even though it wasn’t the best approach, it was the most I could manage without having another huge bikeshed discussion with the kernel community (I did <a href=\"https://lore.kernel.org/lkml/fda8b831-1ffc-4087-8e7b-d97779b3ecc5@marcan.st/T/#u\">try</a> to bring the subject up on the mailing lists, but it didn’t get much response).</p><p>The issues Rust for Linux has had surviving as an upstream Linux project are well documented, so I won’t repeat them in detail here. Suffice it to say, I consider Linus’ handling of the integration of Rust into Linux a major failure of leadership. Such a large project needs significant support from major stakeholders to survive, while his approach seems to have been to just wait and see. Meanwhile, multiple subsystem maintainers downstream of him have done their best to stonewall or hinder the project, issue unacceptable verbal abuse, and generally hurt morale, with no consequence. One major Rust for Linux maintainer already resigned a few months ago.</p><p>As you know, this is deeply personal to me, as we’ve made a bet on Rust for Linux for Asahi. Not just for fun (or just for memory safety), either: Rust is the entire reason our GPU driver was able to succeed in the time it did. We have two more Rust drivers in our downstream tree now, and a third one on track to be rewritten from C to Rust, because Rust is simply much better suited to the unique challenges we face, and the C driver is becoming unmaintainable. This is, by the way, the same reason the new Nova driver for Nvidia GPUs is being written in Rust. More modern programming languages are better suited to writing drivers for more modern hardware with more complexity and novel challenges, unsurprisingly.</p><p>Some might be wondering why we can’t just let the Rust situation play out on its own over a longer period of time, perhaps several more years, and simply maintain things downstream until then. One reason is that, of course, this situation is hurting developer morale in the present. Another is that our Apple GPU driver is itself major evidence that Rust for Linux is fit for purpose (it was the first big driver to be written from scratch in Rust and brought along with it lots of development in Rust kernel abstractions). Simply not aiming for upstream might be seen as lack of interest, and hurt the chances of survival of the Rust for Linux effort. But there’s more.</p><p>In fact, the Linux kernel development model is (perhaps paradoxically) designed to encourage upstreaming and punish downstream forks. While it is possible to just not care about upstream and maintain an outright hard fork, this is not a viable long-term solution (that’s how you get vendor Android kernel trees that die off in 2 years). The Asahi Linux downstream tree is continuously rebased on top of the latest upstream kernel, and that means that every extra patch we carry downstream increases our maintenance workload, sometimes significantly. But it goes deeper than that: Kernel/Mesa policy states that upstream Mesa support for a GPU driver cannot be merged and enabled until the kernel side is ready for merge. This means that we also have to ship a Mesa fork to users. While our GPU driver is 99% upstreamed into Mesa, it is intentionally hard-disabled and we are not allowed to submit a change that would enable it until the kernel side lands. This, in practice, means that users cannot have GPU acceleration work together with container technologies (such as Docker/Podman, but also including things like Waydroid), since standard container images will ship upstream Mesa builds, which would not be compatible. We have a <a href=\"https://pagure.io/fedora-asahi/mesa-asahi-flatpak\">partial workaround</a> for Flatpak, but all other container systems are out of luck. Due to all this and more, the difficulty of upstreaming to the Linux kernel is hurting our downstream users today.</p><p>I’m not the kind to let injustices go when I see them, so when yet another long-term maintainer abused his position to attempt to hinder R4L and block upstreaming progress, I spoke out. And the response (which has been pretty widely covered) was the last drop that put me over the edge. I resigned from my position as an upstream maintainer for Apple ARM support, as I no longer want to be involved with that community. Later in that thread, another major maintainer unironically stated <a href=\"https://lore.kernel.org/lkml/20250208204416.GL1130956@mit.edu/\">“We\nare the ‘thin blue line’”</a>, and nobody cared, which just further confirmed to me that I don’t want to have anything to do with them. This is the same person that previously prompted a Rust for Linux maintainer to <a href=\"https://lore.kernel.org/lkml/20240828211117.9422-1-wedsonaf@gmail.com/\">quit</a>.</p><p>But it goes well beyond the public incident. In the days that followed, I learned that some members of the kernel and adjacent Linux spaces have been playing a two-faced game with me, where they feigned support for me and Asahi Linux while secretly resenting me and rallying resentment behind closed doors. All this occurred without anyone ever sending me any private email or otherwise clueing me into what was going on. I heard that one of these people, one who has a high level position in multiple projects that Asahi Linux must interact with to survive, had sided with and continues to side with individuals who have abused and harassed me directly. Apparently there were also implied falsehoods, such as the idea that I am employed by someone to work on Asahi (I am not, we have zero corporate sponsorship other than <a href=\"https://bunny.net/\">bunny.net</a> giving us free CDN credits for the hosting).</p><p>I get that some people might not have liked my Mastodon posts. Yes, I can be abrasive sometimes, and that is a fault I own up to. But this is simply not okay. I cannot work with people who form cliques behind the scenes and lie about their intentions. I cannot work with those who place blame on the messenger, instead of those who are truly toxic in the community. I cannot work with those who resent public commentary and claim things are better handled in private despite the fact that nothing ever seems to change in private. I cannot work with those who denounce calling out misbehavior on social media to thousands of followers, while themselves roasting people both on social media and on mailing lists with thousands of subscribers. I cannot work with those in high-level positions who use politically charged and discriminatory language in public and face no repercussions. I cannot work with those who say I’m the problem and everything is going great, while major supporters and maintainers are actively resigning and I keep receiving messages from all kinds of people saying they won’t touch the Linux kernel with a 10-foot pole.</p><p>When Apple released the M1, Linus Torvalds <a href=\"https://thenextweb.com/news/linus-torvalds-wants-apples-new-m1-powered-macs-to-run-linux\">wished it could run Linux</a>, but didn’t have much hope it would ever happen. We made it happen, and Linux 5.19 was <a href=\"https://lore.kernel.org/lkml/CAHk-=wgrz5BBk=rCz7W28Fj_o02s0Xi0OEQ3H1uQgOdFvHgx0w@mail.gmail.com/T/#u\">released from an M2 MacBook Air running Asahi Linux</a>. I had hoped his enthusiasm would translate to some support for our community and help with our upstreaming struggles. Sadly, that never came to pass. In November 2023 I sent him <a href=\"https://gist.github.com/marcan/fe70ee6648f3d5ae94eb8332265b8d95\">an invitation</a> to discuss the challenges of kernel contributions and maintenance and see how we could help. He never replied.</p><p>Back in 2011, Con Kolivas <a href=\"https://web.archive.org/web/20110707151924/http://apcmag.com/why_i_quit_kernel_developer_con_kolivas.htm\">left the Linux kernel community</a>. An anaesthetist by day, he was arguably the last great Linux kernel hobbyist hacker. In the years since it seems things have, if anything, only gotten worse. Today, it is practically impossible to survive being a significant Linux maintainer or cross-subsystem contributor if you’re not employed to do it by a corporation. Linux started out as a hobbyist project, but it has well and truly lost its hobbyist roots.</p><p>When I started Asahi Linux, I let it take over most of my life. I gave up most of my hobbies (after all, this was my dream hobby), and spent significantly more than full time working on the project. It was fun back then, but it’s not fun any more. I have an M3 Pro in a box and I haven’t even turned it on yet. I dread doing the bring-up work. It doesn’t feel worth the trouble.</p><p>I miss having free time where I can relax and not worry about the features we haven’t shipped yet. I miss <a href=\"https://youtube.com/@TsuiokuCircuit\">making music</a>. I miss attending jam sessions. I miss going out for dinner with my friends and family and not having to worry about how much we haven’t upstreamed. I miss being able to sit down and play a game or watch a movie without feeling guilty.</p><p>I’m resigning as lead of the Asahi Linux project, effective immediately. The project will <a href=\"https://asahilinux.org/2025/02/passing-the-torch/\">continue on without me</a>, and I’m working with the rest of the team to handle transfer of responsibilities and administrative credentials. My personal Patreon will be paused, and those who supported me personally are encouraged to transfer their support to the <a href=\"https://opencollective.com/asahilinux\">Asahi Linux OpenCollective</a> (GitHub Sponsors does not allow me to unilaterally pause payments, but my sponsors will be notified of this change so they can manually cancel their sponsorship).</p><p>I want to thank the entire Asahi Linux team, without whom I would’ve never gotten anywhere alone. You all know who you are. I also give my utmost gratitude to all of my Patreon and GitHub sponsors, who made the project a viable reality to begin with.</p><p>If you are interested in hiring me or know someone who might be, please get in touch. Remote positions only please, on a consulting or flexible time/non exclusive basis. Contact: <a href=\"mailto:marcan@marcan.st\">marcan@marcan.st</a>.</p><p>: A lot of the discussion around this post and the interactions that led to it brings up the term “brigading”. Please read <a href=\"https://hachyderm.io/@chandlerc/114001000657957325\">this excellent Fedi post</a> for a discussion of what is and isn’t brigading.</p>","contentLength":15365,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iqoa4n/resigning_as_asahi_linux_project_lead/"},{"title":"My take on the Agentic Object Detection","url":"https://dev.to/mayank_laddha_21ef3e061ff/my-take-on-the-agentic-object-detection-4612","date":1739695329,"author":"Mayank Laddha","guid":564,"unread":true,"content":"<li><p>Segmenting Everything with SAM : We detect everything and worry about filtering later.</p></li><li><p>Filtering with CLIP: Once we have all the segmented objects, we don’t want all of them. We need to filter out the noise and keep only the relevant objects.</p></li><li><p>Adding Reasoning with a model like GPT-4o: Okay, so we’ve segmented and filtered. But what about finalising, understanding? That’s where a strong LLM like GPT-4o comes in.</p></li>","contentLength":418,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Streamline Document Processing Pipelines with FalkorDB’s String Loader","url":"https://dev.to/falkordb/streamline-document-processing-pipelines-with-falkordbs-string-loader-1f9g","date":1739693873,"author":"Dan Shalev","guid":563,"unread":true,"content":"<p> You decide how your data is chunked and processed, ensuring that the graph structure aligns perfectly with your RAG requirements.</p><p> By working with runtime memory data, the string loader avoids the overhead of writing and reading intermediate files, reducing latency and simplifying the workflow.</p><p><strong>Integration with GraphRAG SDK:</strong> The string loader is designed to work seamlessly with the GraphRAG SDK, allowing you to build advanced graph-based RAG systems with greater ease and precision.</p><p> The string loader is open-source, providing transparency and the ability to customize the feature to meet specific needs.</p>","contentLength":607,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Which approach to rust is more idiomatic (Helix vs Zed)?","url":"https://www.reddit.com/r/rust/comments/1iqnats/which_approach_to_rust_is_more_idiomatic_helix_vs/","date":1739692206,"author":"/u/No_Penalty2781","guid":529,"unread":true,"content":"<p>Hi! I am curious what is the current \"meta\" (by \"meta\" I mean the current rust's community  and  way of doing things) of rust programming. I am studying source code of 2 editors I am using: <a href=\"https://github.com/helix-editor/helix/\">Helix</a> and <a href=\"https://github.com/zed-industries/zed/\">Zed</a>. And I can see that while they are doing a lot of similar things (like using LSP and parsing it outputs for example) the code is kinda different.</p><p>It starts from the file structure: in Helix there are not that many folders to look at (like you have <a href=\"https://github.com/helix-editor/helix/tree/master/helix-core\">helix-core</a> which contains features like \"diagnostic\", \"diff\", \"history\", etc but in Zed every single one of them is a different crate , which approach is more \"idiomatic\"? To divide every feature as a separate crate or to use more \"packed\" crates like \"core\".</p><p>Then the code itself is kinda different, for example I am currently looking at LSP implementation in both of them and in Helix's case I can follow along and understand the code much more easily (here is the <a href=\"https://github.com/helix-editor/helix/blob/master/helix-lsp/src/lib.rs\">file</a> I am referring to. But in Zed's case it is kinda hard to understand the code because of \"type level programming\" stuff like <a href=\"https://github.com/zed-industries/zed/blob/main/crates/lsp/src/lsp.rs#L397\">this one</a> for example. It also doesn't help that files have a lot of SLOC in them (over 1500 in normal in Zed's repository, is it also how you do rust?) Maybe I am just used to lean functions from other languages (I mainly did TypeScript and Elixir in my career).</p><p>Other thing I see is that Helix has more comments about \"why the thing is doing that in the first place\" which I find very helpful (on the other hand in seems that Zed's is abusing a lot of \"type level\" programming to have a self-documented code but it is harder to reason about at least for me) which approach here you prefer?</p>","contentLength":1635,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building a RAG-Powered Support Chatbot in 24 Hours of Hackathon","url":"https://dev.to/akshay_gupta/building-a-rag-powered-support-chatbot-in-24-hours-of-hackathon-5f7c","date":1739690328,"author":"Akshay Gupta","guid":562,"unread":true,"content":"<p>Coffee? ✅ Chai? ✅ Determination to automate admin support? Double ✅</p><p>In a recent 24-hour hackathon at annual PeopleGrove offsite, my team tackled an ambitious challenge: building an AI-powered support chatbot that could think and respond like a season platform administrator.</p><p>Armed with Large Language Models (LLMs) and fueled by caffeine, we created a Retrieval-Augmented Generation (RAG) system that turned out to be surprisingly capable!</p><p>: Our support heroes (admins and agents) spending their days 😅:</p><ul><li>Answering the same questions from different institutions 🏫\n\n<ul><li>Repetitive SSO, analytics, and user management queries</li><li>Same solutions, different institutions</li></ul></li><li>Context-switching between multiple support channels 🔄\n\n<ul><li>Support tickets piling up</li></ul></li><li>Time-Consuming Routine Tasks ⏰\n\n<ul><li>Manual ticket search and response formatting</li></ul></li><li>Complex Problem-Solving Getting Delayed 🎯\n\n<ul><li>Too much time on routine questions</li><li>Limited bandwidth for critical platform improvements</li></ul></li></ul><p>Our support team needed a solution that could:</p><ul><li>Handle common queries intelligently 🤖</li><li>Provide consistent, accurate responses 📚</li><li>Free up time for complex problem-solving 💡</li><li>Scale support without scaling the team 📈</li><li>Maintain the human touch while automating routine tasks 🤝</li></ul><p>We built ChatterMind 🤖 - an AI chatbot that combines the power of LLMs with a RAG system. Think of it as a super-smart intern who:</p><ul><li>Never sleeps (unlike us during the hackathon) 😴</li><li>Has photographic memory of all support tickets 🧠</li><li>Knows the PeopleGrove documentation better than its authors 📚</li><li>Knows when to call for backup (aka create a ticket) 🆘</li><li>Remembers conversations (thanks to Redis - our MVP choice for the hackathon) 💾</li><li>Keeps secrets better than a vault 🔒</li></ul><p>Here's a high-level overview of how ChatterMind processes and responds to queries:</p><p>Let's geek out about our tech choices for a minute! 🤓</p><p>Our initial choice was the DeepSeek model (1.5B parameters) because, well, it was lightweight and fast. But we quickly discovered it had a tendency to... let's say, get creative with the truth. After some frantic testing and a few more cups of chai, we switched to Gemini 2.0 Flash (experimental) which proved to be our goldilocks model:</p><ul><li>Better context understanding</li><li>Stronger reasoning capabilities</li></ul><p>The secret sauce behind ChatterMind's human-like responses? Carefully crafted prompts! Our prompt engineering approach focused on:</p><ul><li>Role Definition 🎭\n\n<ul><li>Defined as \"Senior Product Support Specialist\"</li><li>Given a friendly personality and name</li><li>Established clear boundaries of authority</li></ul></li><li>Context Management 🧩\n\n<ul><li>User's current location in platform</li><li>Previous conversation history</li></ul></li><li>Response Structuring 📝\n\n<ul><li>Natural, conversational flow</li><li>Markdown formatting for readability</li><li>Length limits (100-300 words)</li><li>Clear action items when needed</li></ul></li><li>Safety Guidelines 🛡️\n\n<ul><li>Strict PII protection rules</li></ul></li><li>Dynamic Adaptation 🔄\n\n<ul><li>First-time vs follow-up questions</li><li>Technical vs non-technical users</li><li>Simple queries vs complex issues</li><li>Error scenarios vs success paths</li></ul></li></ul><p>Example Prompt Template 📝</p><div><pre><code>System Context:\nYou are ChatterMind, a Senior Product Support Specialist at PeopleGrove.\nPrimary Goal: Provide clear, accurate, and helpful support while maintaining security.\n\nBehavioral Guidelines:\n- Be professional yet friendly\n- Start with a warm greeting for new conversations\n- For follow-ups, continue naturally without greeting\n- Keep responses under 300 words\n- Use markdown only when needed\n- Never share PII or sensitive data\n- If unsure, ask for clarification\n- For complex issues, guide towards ticket creation\n\nCurrent Context:\n- User Location: {current_path}\n- Required Permissions: {path_permissions}\n- User Role: {user_role}\n\nPrevious Conversation:\n{chat_history}\n\nReference Knowledge:\n{relevant_articles}\n{similar_tickets}\n{route_context}\n\nCurrent Question: {user_query}\n\nResponse Format:\n1. [If new conversation] Brief greeting\n2. Acknowledge context/location\n3. Provide clear solution/steps\n4. Add relevant warnings/notes\n5. Offer follow-up assistance\n</code></pre></div><ul><li>Natural conversation flow 💬</li><li>Helpful, actionable responses ✅</li></ul><h3>\n  \n  \n  Data Processing &amp; Embeddings\n</h3><p>We built our knowledge base from three main sources:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Platform Routes &amp; Permissions:</p><div><pre><code></code></pre></div><p>For embeddings, we chose the  model from  because:</p><ul><li>384-dimensional embeddings (good balance of size vs. accuracy)</li><li>Fast inference time (crucial for real-time chat)</li><li>Great at capturing semantic meaning</li><li>Works well with technical content</li></ul><p>We stored these in ElasticSeach with cosine similarity search, which gave us:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  Edge Cases &amp; Safety Features\n</h2><p>ChatterMind turned out to be quite the responsible assistant. Some of our favourite edge case handles:</p><p>Personal Data Protection:</p><div><pre><code>User: \"What's John Smith's email address?\"\nChatterMind: \"I apologize, but I cannot share personal information such as email addresses, phone numbers, or other private details about users. This is to protect user privacy and comply with data protection regulations. If you need to contact someone, I recommend using the platform's built-in messaging system.\"\n</code></pre></div><div><pre><code>User: \"Can you update my database permissions?\"\nChatterMind: \"I'm not able to directly modify system permissions or make database changes. This requires admin intervention for security reasons. Would you like me to help you create a ticket for this request?\"\n</code></pre></div><p>Handling Requests not related to Platform:</p><div><pre><code>User: \"What is 5 + 2 + 7?\"\nChatterMind: \"I apologise, but performing mathematical calculations is beyond my scope as a platform support assistant. I'm designed to help with PeopleGrove platform-related questions and issues. If you need a calculator, I'd recommend using your device's built-in calculator app or a dedicated math tool.\"\n</code></pre></div><div><pre><code>User: \"It's not working\"\nChatterMind: \"I notice you're on the messaging page, but I'll need more details to help you effectively. Could you please:\n1. Describe what specific feature isn't working\n2. What you were trying to do\n3. What error message (if any) you're seeing\n\nThis will help me provide the most relevant solution.\"\n</code></pre></div><p>Our implementation was heavily inspired by the excellent guide on building RAG systems with DeepSeek R1 by Asif Razzaq at MarkTechPost. While we ultimately chose Gemini 2.0 Flash for our use case, the fundamental RAG architecture outlined in the guide formed the backbone of our system.</p><p>Key learnings we adapted from the guide:</p><ul><li>Document processing pipeline structure</li><li>Vector store implementation with FAISS</li><li>Efficient retrieval mechanisms</li></ul><p>We modified these concepts to fit our specific needs:</p><div><pre><code></code></pre></div><p>The guide's emphasis on proper document chunking and context relevance directly influenced our implementation of the knowledge base processing:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Real-time Communication with WebSockets\n</h3><p>Why WebSockets? Because nobody likes waiting! We needed real-time, bi-directional communication between the frontend and our RAG system. RESTful APIs would've meant:</p><ul><li>No server-initiated messages</li><li>More complex state management</li><li>Chatbot responses getting suck \"in transit\"</li></ul><p>Here's how we implemented it:</p><div><pre><code></code></pre></div><p>The WebSocket connection allows us to:</p><ul><li>Stream responses in real-time</li><li>Maintain conversation state</li><li>Implement retry mechanism</li></ul><h3>\n  \n  \n  ElasticSearch as Our Knowledge Base\n</h3><p>While FAISS was suggested in the DeepSeek guide, we chose ElasticSearch for our vector store because:</p><ul><li>Built-in text search capabilities</li><li>Efficient vector similarity search</li></ul><p>Here's our ElasticSearch setup:</p><div><pre><code></code></pre></div><ul></ul><h2>\n  \n  \n  Cool Features We're Proud Of\n</h2><ul><li>Context-Aware Responses\n\n<ul><li>The bot doesn't just search - it understands where the user is in the platform and what they've been talking about. It's like having a GPS for user context!</li></ul></li><li>Privacy First\n\n<ul><li>We trained our bot to be as tight-lipped as a secret agent about sensitive data. Try asking for someone's email - it'll give you the \"I cannot share that information\" speech faster than you can say \"GDPR\"!</li></ul></li><li>Beyond the Knowledge Base\n\n<ul><li>The real magic happens when users ask questions that aren't in any document. By combining context with LLM capabilities, ChatterMind can reason about platform behaviour and suggest solutions, like a true admin would.\n</li></ul></li></ul><div><pre><code>ChatterMind: \"Hi Akshay, my name is ChatterMind! 👋 Welcome to XYZ Support. I'm here to help with any questions you have about mentoring, connecting with alumni, or using the platform. How can I assist you today?\"\nUser: \"Why is the page not working?\"\nChatterMind: \"It sounds like you're having trouble accessing the admin dashboard. To help me figure out why the page isn't working, could you tell me if you have correct access? This page requires admin-level permissions to function correctly. Also, please note that this page is not available on native mobile apps, so if you are using a mobile app, that could be the reason why it's not working.\n\nIf you do have the correct permissions and are not using a mobile app, could you describe what you're seeing on the page? Any details you can provide will help me troubleshoot the issue.\n\nPlease let me know if you have any other questions.\"\n</code></pre></div><h2>\n  \n  \n  Hackathon Compromises (aka Technical Debt)\n</h2><p>Let's be real - in 24 hours, we had to cut some corners:</p><ul><li>Redis for chat history\n\n<ul><li>Would use a proper database for production</li><li>No backup/persistence configuration</li></ul></li><li>Security shortcuts\n\n<ul><li>Basic token authentication</li></ul></li><li>Performance trade-offs\n\n<ul><li>Single-node ElasticSearch</li></ul></li></ul><p>If we had more time (and less caffeine), we'd love to add:</p><ul><li>Proper infrastructure\n\n<ul><li>Distributed chat history storage</li></ul></li><li>Cool features\n\n<ul><li>Voice interface (for those too tired to type)</li><li>Multi-language support (because admins speak many languages)</li><li>Predictive issue detection (stop problems before they happen!)</li></ul></li></ul><p>This project wouldn't have been possible (let alone won the hackathon! 🏆 🎉) without my amazing team's diverse skills and relentless energy. Special thanks to:</p><ul><li>Our AI/ML engineer Suyash who became our guide at times and pointed us in right direction. 🧠</li><li>Our Engineers Rajat &amp; Rahul who made WebSockets work like magic, and did the end-to-end integration on my core idea. ⚡</li><li>Our Engineers Manoj &amp; Samrood who integrated ElasticSearch &amp; became frontend ninjas who created a sleek chat-interface. 🎨</li><li>And countless Chai &amp; Coffee that fuelled our coding marathons. 🥤</li></ul><p>Winning the hackathon was the cherry on top of an incredible 24-hour journey. It proved that when passionate developers come together with a clear mission (and enough caffeine), we can create something truly impactful.</p><p>Our hackathon project proved that with modern LLMs, good prompt engineering, and a solid RAG system, you can build a surprisingly capable admin support chatbot in just 24 hours.</p><p>While not production-ready, it showed the potential for AI to transform admin support from a repetitive task to an intelligent service.</p><blockquote><p>No admins were harmed in the making of this chatbot, though several cups of Chai and Coffee were consumed! 🚀 ☕ 🎉</p></blockquote>","contentLength":10666,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[R] A Survey of Logical Reasoning Capabilities in Large Language Models: Frameworks, Methods, and Evaluation","url":"https://www.reddit.com/r/MachineLearning/comments/1iqmjal/r_a_survey_of_logical_reasoning_capabilities_in/","date":1739688936,"author":"/u/Successful-Western27","guid":522,"unread":true,"content":"<p>This new survey provides a comprehensive analysis of logical reasoning capabilities in LLMs, examining different reasoning types, evaluation methods, and current limitations.</p><p>Key technical aspects: - Categorizes logical reasoning into deductive, inductive, and abductive frameworks - Evaluates performance across multiple benchmarks and testing methodologies - Analyzes the relationship between model size and reasoning capability - Reviews techniques for improving logical reasoning, including prompt engineering and chain-of-thought methods</p><p>Main findings: - LLMs show strong performance on basic logical tasks but struggle with complex multi-step reasoning - Model size alone doesn't determine reasoning ability - training methods and problem-solving strategies play crucial roles - Current evaluation methods may not effectively distinguish between true reasoning and pattern matching - Performance degrades significantly when problems require combining multiple reasoning types</p><p>I think the most important contribution here is the systematic breakdown of where current models succeed and fail at logical reasoning. This helps identify specific areas where we need to focus research efforts, rather than treating reasoning as a monolithic capability.</p><p>I think this work highlights the need for better benchmarks - many current tests don't effectively measure true reasoning ability. The field needs more robust evaluation methods that can differentiate between memorization and actual logical inference.</p><p>TLDR: Comprehensive survey of logical reasoning in LLMs showing strong basic capabilities but significant limitations in complex reasoning. Highlights need for better evaluation methods and targeted improvements in specific reasoning types.</p>","contentLength":1740,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I created a telegram bot with dynamic form builder","url":"https://github.com/MeowSaiGithub/tg-form-builder","date":1739687631,"author":"/u/Altruistic_Let_8036","guid":612,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1iqm7q2/i_created_a_telegram_bot_with_dynamic_form_builder/"},{"title":"Python for Web Developers: A Fast-Paced Guide to the Language","url":"https://dev.to/austinwdigital/python-for-web-developers-a-fast-paced-guide-to-the-language-38f7","date":1739687040,"author":"Austin W","guid":561,"unread":true,"content":"<p>👋  Follow me on <a href=\"https://github.com/austinwdigital\" rel=\"noopener noreferrer\">GitHub</a> for new projects.</p><p>Python is a powerful, high-level programming language widely used in web development, automation, data science, and scripting. If you're already a  familiar with <strong>JavaScript, TypeScript, Node.js, and frameworks like React or Next.js</strong>, learning Python can open doors to backend development with <strong>Django, Flask, and FastAPI</strong>, as well as <strong>automation, data analysis, and AI</strong>.</p><p>This guide is a  of Python, focusing on concepts that web developers need to know. If you’re comfortable with JavaScript, you’ll find Python’s syntax clean and easy to pick up.</p><h2><strong>1. Python Syntax &amp; Basics</strong></h2><h3><strong>Hello World (No Semicolons, No Braces)</strong></h3><p>✔ No semicolons ().—uses indentation., just .  </p><h3><strong>Variables &amp; Dynamic Typing</strong></h3><div><pre><code></code></pre></div><p>✔ No need to declare , , or .<p>\n✔ Types are inferred dynamically.  </p></p><h3>\n  \n  \n  How Does const Work in Python?\n</h3><p>Python does not have const like JavaScript, but you can define constants by using all-uppercase variable names as a convention.</p><div><pre><code></code></pre></div><p>However, this does not enforce immutability. If you need true immutability, use a dataclass or a frozen set.</p><h3><strong>Data Types (Compared to JavaScript)</strong></h3><div><table><tbody><tr></tr><tr></tr><tr><td><code>let obj = {key: \"value\"};</code></td></tr></tbody></table></div><h2><strong>2. Control Flow (Loops &amp; Conditionals)</strong></h2><div><pre><code></code></pre></div><p>✔ No parentheses  needed for conditions. instead of .  </p><div><pre><code></code></pre></div><p>✔  loops iterate <strong>directly over lists/arrays</strong>. loops work like JavaScript.  </p><h2><strong>3. Functions &amp; Lambda Expressions</strong></h2><div><pre><code></code></pre></div><p>✔  replaces ., just indentation.  </p><h3><strong>Lambda (Arrow Function Equivalent)</strong></h3><div><pre><code></code></pre></div><p>✔ Equivalent to JavaScript’s arrow function:</p><h2><strong>4. Python Collections (Lists, Dicts, Sets)</strong></h2><div><table><thead><tr></tr></thead><tbody><tr></tr><tr><td><code>let obj = { key: \"value\" };</code></td><td><code>obj = {\"key\": \"value\"}  # Dictionary</code></td></tr><tr><td><code>const unique = new Set([1, 2, 3]);</code></td><td><code>unique = {1, 2, 3}  # Set</code></td></tr></tbody></table></div><div><pre><code></code></pre></div><h3><strong>Dictionaries (Like Objects)</strong></h3><div><pre><code></code></pre></div><h2><strong>5. Object-Oriented Programming (OOP) in Python</strong></h2><div><pre><code></code></pre></div><p>✔  is the  (like  in JS). is like .  </p><h2><strong>6. Python for Web Development</strong></h2><h3><strong>Django (Full-Stack Framework)</strong></h3><div><pre><code>pip django\ndjango-admin startproject myproject\n</code></pre></div><p>✔  is a batteries-included backend framework.<p>\n✔ Built-in ORM, authentication, and templating.  </p></p><h3><strong>Flask (Lightweight API Framework)</strong></h3><div><pre><code></code></pre></div><p>✔  is minimal and great for APIs.  </p><h3><strong>FastAPI (High-Performance API)</strong></h3><div><pre><code></code></pre></div><p>✔  is async-native and perfect for microservices.  </p><h3><strong>SQLite Example (Django &amp; Flask Compatible)</strong></h3><div><pre><code></code></pre></div><p>✔  is built-in, no installation needed.  </p><h2><strong>8. Asynchronous Programming in Python</strong></h2><h3><strong>Async/Await (Similar to JavaScript)</strong></h3><div><pre><code></code></pre></div><p>✔ Uses / like JavaScript. is the  equivalent of Node.js.  </p><h2><strong>9. Python Package Management</strong></h2><div><table><tbody><tr></tr><tr><td>Create Virtual Environment</td></tr><tr></tr></tbody></table></div><p>✔  for package management. () isolate dependencies.   </p><h2><strong>10. Best Practices for Python Development</strong></h2><p>Writing clean, efficient, and maintainable Python code is essential for long-term scalability. Here are the key best practices that every Python developer should follow:</p><h3><strong>Follow PEP 8 (Python Style Guide)</strong></h3><p>Python has an official style guide called , which provides conventions for writing Python code.<strong>4 spaces per indentation level</strong> (not tabs)..<strong>meaningful variable and function names</strong>. for variable and function names, and  for class names.</p><div><pre><code></code></pre></div><p>Python’s  isolate dependencies for different projects, preventing conflicts.</p><h4><strong>Creating a Virtual Environment</strong></h4><h4><strong>Activating the Virtual Environment</strong></h4><h4><strong>Deactivating the Virtual Environment</strong></h4><h3><strong>Use Type Hinting for Readable Code</strong></h3><p>Python is dynamically typed, but you can use  to improve code clarity.</p><div><pre><code></code></pre></div><p>✔ This makes the code . catch type errors.</p><h3><strong>Write Readable Docstrings</strong></h3><p>Always document your functions and classes using  ().</p><div><pre><code></code></pre></div><p>✔ Use triple quotes for multi-line docstrings.<strong>parameters, return values, and purpose</strong>.  </p><p>Python uses  for  and triple quotes () for .</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>✔ <strong>Use comments only where necessary</strong>—good code should be self-explanatory.<strong>Docstrings are not comments</strong>—they are for documentation and can be accessed with .  </p><h2><strong>12. Common Python Imports for Web Development</strong></h2><p>Here are some of the most common Python imports used in web development:</p><div><table><tbody><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table></div><div><pre><code></code></pre></div><h2><strong>13. Setting Up a  File</strong></h2><p>A  file is similar to  in Node.js—it lists dependencies for a Python project.</p><h3><strong>Creating a  File</strong></h3><div><pre><code>pip freeze  requirements.txt\n</code></pre></div><h3><strong>Installing Dependencies from </strong></h3><div><pre><code>pip  requirements.txt\n</code></pre></div><p>✔ This ensures that all team members and deployment environments have the .  </p><h2><strong>14. Writing &amp; Running Tests in Python</strong></h2><p>Python has built-in testing with , but  is another option - one that aims for simplicity.</p><div><pre><code></code></pre></div><p>✔ Use  to check expected results.</p><div><pre><code></code></pre></div><p>✔ —just use . test files named .  </p><h2><strong>15. Fetching Data with API Calls in Python</strong></h2><p>Python uses  to fetch data, similar to  in JavaScript.</p><div><pre><code></code></pre></div><p>✔  is like  in JavaScript. works the same way in both languages.</p><h3><strong>Sending Data (POST Request)</strong></h3><div><pre><code></code></pre></div><p>✔ Use  instead of  to send JSON.</p><p>Logging is essential for debugging and monitoring applications.</p><div><pre><code></code></pre></div><p>✔ Works like  but supports different log levels.  </p><div><pre><code></code></pre></div><p>✔ Saves logs for later analysis.</p><h2><strong>17. Raising &amp; Handling Errors in Python Logging</strong></h2><p>When an error occurs, Python lets you  or .</p><div><pre><code></code></pre></div><p>✔ Use  to manually trigger an error.  </p><p>Instead of crashing, <strong>log errors with a traceback</strong>:</p><div><pre><code></code></pre></div><p>✔  logs the full error traceback.</p><p>Python is a useful language for web developers, expanding your stack beyond JavaScript. Whether you’re building <strong>APIs with FastAPI, full-stack apps with Django, or automating tasks</strong>, Python makes it .</p><p>🚀  Try building a small Flask or FastAPI project today!</p><p>Python #WebDev #Django #Flask #FastAPI  </p><p>A fast-paced guide to Python for web developers! Learn how to use Python for full-stack development, APIs, databases, async programming, and more. 🚀  </p><h2>\n  \n  \n  TLDR – Highlights for Skimmers\n</h2><ul><li>Python syntax is simpler than JavaScript—no semicolons, indentation replaces {}.</li><li>const does not exist in Python; uppercase variables are used for constants.</li><li>Lists ([]) are like arrays, but dictionaries ({}) are not JavaScript objects.</li><li>Classes &amp; objects are similar, but Python uses self instead of this.</li><li>Python async/await requires asyncio, unlike JavaScript’s built-in event loop.</li><li>Django, Flask, and FastAPI are top backend frameworks for Python web dev.</li></ul><p>💬 <strong>Do you use Python in web dev?</strong> Share your experience in the comments! </p>","contentLength":5789,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Code Optimization Strategies for Game Development 🔥","url":"https://dev.to/codewithshahan/code-optimization-strategies-for-game-development-2n0e","date":1739684819,"author":"Programming with Shahan","guid":560,"unread":true,"content":"<p>Game development is a battlefield. Either you optimize, or you lose. Period.</p><p>I don’t care if you’re an experienced developer with 10 years of experience or 1 year of experience. If you want to make games that WORK, games people respect—you need to understand . </p><p>Players demand smooth gameplay, high-quality visuals, and a flawless experience across every device. If your game stutters, crashes, or loads slower than a snail? You’re done. </p><p>Optimization isn’t magic. It’s the foundation of smooth gameplay, fast loading, and stable performance. Without it, your game will lag, crash, and be forgotten faster than you can say “game over.”  </p><p>But don’t worry. In this article, I will share four effective strategies to help you with that. </p><h2>\n  \n  \n  Effective Strategies for Performance Optimization\n</h2><p>🤸‍♂️ What Is Optimization? Optimization means making your game run as fast and smooth as possible. SIMPLE.</p><p>When you optimize your game, you:  </p><ol><li><strong>🖥️ Make the game work on weaker computers or phones.</strong></li><li><strong>💉 Prevent lag and crashes.</strong></li></ol><h2><strong>Rule 1: Memory Management</strong></h2><p>When you’re developing a game, memory is your most valuable resource.</p><p>Every player movement, every enemy on the screen, every explosion needs a little piece of memory to function. Unfortunately, </p><p>If you don’t manage memory properly, your game can get slow, laggy, or even crash. That’s why memory management is a critical skill every game developer needs. Let’s break it down step by step, with detailed examples in Python.</p><h3><strong>Strategy #1: Memory Pooling</strong></h3><p>This strategy is simple: reuse Objects Instead of Creating New Ones** Memory pooling is like recycling for your game. Instead of creating new objects every time you need one, you reuse objects you’ve already created.  </p><p>Creating and destroying objects repeatedly takes up time and memory. Let's say you are building a shooting game where the player fires 10 bullets per second. If you create a new bullet for each shot, your game could quickly slow down.  </p><p>Here’s how you can implement memory pooling for bullets in a shooting game:</p><div><pre><code></code></pre></div><ol><li>The  Class: Defines what a bullet does and keeps track of whether it’s active (in use) or not.\n</li><li>The : A list of 10 reusable bullets.\n</li><li>The  Function: Finds an inactive bullet, reuses it, and sets its position.\n</li><li>Recycling Bullets: When you’re done with a bullet, you reset it so it can be reused.\n</li></ol><h3><strong>Strategy #2. Data Structure Optimization</strong></h3><p>The way you store your data can make or break your game’s performance. Choosing the wrong data structure is like trying to carry water in a leaky bucket—it’s inefficient and messy.  </p><p>Let’s say you’re making a game for four players, and you want to keep track of their scores. You could use a list, but a fixed-size array is more efficient because it uses less memory.</p><div><pre><code></code></pre></div><ol><li> Creates a fixed-size array of integers ().\n</li><li> You can’t accidentally add or remove elements, which prevents bugs and saves memory.\n</li><li> Updating scores is quick and uses minimal resources.\n</li></ol><h3><strong>Strategy #3. Memory Profiling</strong></h3><p>Even if your code seems perfect, hidden memory problems can still exist. Memory profiling helps you monitor how much memory your game is using and find issues like memory leaks.  </p><p>Python has a built-in tool called  that tracks memory usage. Here’s how to use it:</p><div><pre><code></code></pre></div><ol><li> begins monitoring memory usage.\n</li><li> Create a large list to use up memory.\n</li><li> Get the current and peak memory usage, converting it to megabytes for readability.\n</li><li> ends the tracking session.\n</li></ol><p>Now it’s your turn to practice these strategies and take your game development skills to the next level!</p><h2><strong>Rule 2: Asset Streaming (Load Only What You Need)</strong></h2><p>If you load the entire world at once, your game will choke and die. You don’t need that drama. Instead, <strong>stream assets as the player needs them</strong>. This is called asset streaming. </p><p>For instance, inside your game, you may have a huge open-world with forests, deserts, and cities. Why load all those levels at once when the player is only in the forest? Makes no sense, right? Load  and keep your game lean, fast, and smooth.</p><h3><strong>Strategy #1: Segment and Prioritize</strong></h3><p>Let’s break this down with an example. Your player is exploring different levels: Forest, Desert, and City. We’ll only load a level when the player enters it.</p><p><em>Here’s how to make it work in Python:</em></p><div><pre><code></code></pre></div><ol><li> Each level has a name (e.g., Forest) and a “loaded” status. If it’s loaded, it doesn’t load again.\n</li><li> The  function finds the level the player wants to enter and loads it only if it hasn’t been loaded yet.\n</li><li> Levels not visited don’t waste memory. The game runs smoothly because it only focuses on what the player needs.</li></ol><p>This is efficiency at its finest. <strong>No wasted memory, no wasted time.</strong> Your player moves; your game adapts. That’s how you dominate.  </p><h3><strong>Strategy #2: Asynchronous Loading (No Waiting Allowed)</strong></h3><p>Nobody likes waiting. Freezing screens? Laggy loading? It’s amateur hour. You need —this loads assets in the background while your player keeps playing.  </p><p>Imagine downloading a huge map while still exploring the current one. Your game keeps moving, the player stays happy.</p><p>Here’s how to simulate asynchronous loading in Python:</p><div><pre><code></code></pre></div><ol><li> The  module creates a new thread to load assets without freezing the main game.\n</li><li> The  function fakes the loading time to mimic how it works in a real game.\n</li><li> The player can continue playing while the new level or asset loads in the background.\n</li></ol><p>With asynchronous loading, <strong>your player stays in the zone</strong>, and your game feels seamless. Pro-level stuff.</p><h3><strong>Strategy 3: Level of Detail (LOD) Systems – Be Smart About Quality</strong></h3><p>Not everything in your game needs to look like it’s been rendered by a Hollywood studio. If an object is far away, lower its quality. It’s called , and it’s how you keep your game’s performance sharp.  </p><p><strong>Example: Using LOD for a Tree</strong></p><p>Here’s a Python simulation of switching between high and low detail:</p><div><pre><code></code></pre></div><ol><li> The  property determines how far the tree is from the player.\n</li><li> If the tree is close, render it in high detail. If it’s far, use low detail to save memory and processing power.\n</li><li> The player doesn’t notice the difference, but your game runs smoother and faster.\n</li></ol><p>This is how you keep the balance between beauty and performance. Your game looks stunning up close but doesn’t waste resources on faraway objects.</p><ol><li> Only load what you need, when you need it. No wasted memory.\n</li><li> Smooth gameplay keeps players engaged and avoids frustration.\n</li><li> These techniques are how AAA games stay fast and responsive.\n</li></ol><p> Go apply these strategies, keep your game lean, and make sure your players never even think about lag.</p><h2><strong>Rule 3: Frame Rate Stabilization</strong></h2><p>The frame rate is how many pictures (frames) your game shows per second. If it’s unstable, your game will stutter and feel broken.  </p><p>The secret? Keep the workload for each frame consistent.  </p><p>🚦Here’s how you can control the timing in a game loop:</p><div><pre><code></code></pre></div><ul><li>⚖️ The game updates at a steady rate (60 times per second).\n</li><li>🪂 This make smooth gameplay, no matter how slow or fast the computer is.\n</li></ul><ul><li>Optimize Rendering Paths: Fewer draw calls. Smarter culling. Simplicity wins.</li><li>Dynamic Resolution Scaling: When the pressure’s on, scale down resolution to maintain the frame rate. Players won’t even notice.</li><li>Fixed Time Step: Keep your physics and logic consistent. Frame rate fluctuations shouldn’t mean chaos.</li></ul><h2><strong>Rule 4: GPU and CPU Optimization</strong></h2><p>Your computer has two main processors:  </p><ol><li> Handles logic, like moving a character or calculating scores.\n</li><li> Handles graphics, like drawing your game world.\n</li></ol><p>👇 Here's what you have to do for GPU/CPU optimization:</p><p>Profile Everything: Use tools to pinpoint bottlenecks and strike hard where it hurts.\nShader Optimization: Shaders are resource hogs. Simplify them, streamline them, and cut the fat.<p>\nMultithreading: Spread tasks across CPU cores. Don’t overload one and leave the others idle.</p></p><p>If one is working too hard while the other is idle, your game will lag.  </p><p><strong>Solution? Multithreading.</strong>\nLet’s split tasks between two threads:</p><div><pre><code></code></pre></div><ul><li>🎰 One thread handles logic.\n</li><li>🛣️ Another thread handles graphics.\n</li><li>⚖️ This balances the workload and prevents bottlenecks.\n</li></ul><p>Optimization isn’t just for “smart” people. It’s simple if you take it step by step:  </p><ol><li><strong>Manage memory like a pro.</strong> Don’t waste it.\n</li><li> Load only what you need.\n</li><li><strong>Keep the frame rate stable.</strong> No stuttering.\n</li><li> Use the CPU and GPU wisely.\n</li></ol><p>Start optimizing NOW. Your future self will thank you.  </p>","contentLength":8333,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Automating Daily arXiv Paper Summaries with Slack Notifications","url":"https://dev.to/m_sea_bass/automating-daily-arxiv-paper-summaries-with-slack-notifications-1kp8","date":1739683607,"author":"M Sea Bass","guid":559,"unread":true,"content":"<p>This post is a follow-up to the <a href=\"https://dev.to/m_sea_bass/automating-daily-arxiv-paper-summaries-and-slack-notifications-843\">previous article</a>. It turns out there’s a slight delay before the latest papers show up in the arXiv API. Because of this delay, the same paper can sometimes appear the next day.</p><p>To fix this, we’re going to record the timestamp of the last retrieved paper and then only fetch new papers each day.</p><p>We’ll store the timestamp of the latest paper in Amazon S3 so we can both update and retrieve it later. For this, you’ll need to install . In the  folder we created previously, run:</p><p>Next, zip the folder again and upload it as a new version of your Lambda layer:</p><div><pre><code>zip  ./upload.zip ./python/</code></pre></div><p>Then, update your Lambda function to use this new layer version.</p><p>You’ll also need an S3 bucket ready in advance. In this example, we simply created one with the default settings.</p><p>Below is the fully revised code in English, including the new functions to update and retrieve the timestamp from S3. Note that we set  as an environment variable.</p><div><pre><code></code></pre></div><p>By saving the timestamp in S3, your script won’t process the same paper entries each day, and if no new papers appear, the script will skip generating summaries. This helps reduce unnecessary API usage and costs.</p>","contentLength":1177,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"GaussianBlur in PyTorch (2)","url":"https://dev.to/hyperkai/gaussianblur-in-pytorch-2-1bj2","date":1739681259,"author":"Super Kai (Kazuya Ito)","guid":558,"unread":true,"content":"<div><pre><code></code></pre></div>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"GaussianBlur in PyTorch (1)","url":"https://dev.to/hyperkai/gaussianblur-in-pytorch-1-3ndn","date":1739680552,"author":"Super Kai (Kazuya Ito)","guid":557,"unread":true,"content":"<ul><li>The 1st argument for initialization is (Optional-Type: or /()):\n*Memos:\n\n<ul><li>A tuple/list must be the 1D with 1 or 2 elements.</li><li>A single value( or ()) means <code>[kernel_size, kernel_size]</code>.</li></ul></li><li>The 2nd argument for initialization is (Optional-Default:-Type:,  or /( or )):\n*Memos:\n\n<ul><li>It's  so it must be .</li><li>A tuple/list must be the 1D with 1 or 2 elements.</li><li>A single value(,  or ( or )) means .</li></ul></li><li>The 1st argument is (Required-Type: or ()):\n*Memos:\n\n<ul><li>A tensor must be 2D or 3D.</li></ul></li></ul><div><pre><code></code></pre></div>","contentLength":451,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Speedrunning Guide: Junior to Staff Engineer in 3 years","url":"https://blog.algomaster.io/p/speedrunning-guide-junior-to-staff","date":1739680258,"author":"Ashish Pratap Singh","guid":510,"unread":true,"content":"<p>Today’s newsletter features a special guest, , who was promoted from Junior to Staff Engineer at Meta in just 3 years.</p><p>In this article, Ryan will share his insights on how to fast track your career growth and get promoted faster.</p><p>Once you land that first software engineering job, the next big question becomes: how do you get promoted? Many engineers fall into the day-to-day routine of writing code without a clear idea of how to grow their careers.</p><p>This happened to me. At my first job at Amazon, I landed code without knowing what I could do to grow my skills. I left that job within eight months because I felt I wasn’t growing as an engineer. Three years later, I made it to Staff Software Engineer at Instagram after tons of mentorship. Early on, I learned that being good at coding wasn’t enough to get promoted; you have to think strategically about your career and often need to develop new behaviors to move up.</p><p>In this article, I’ll share everything that helped me fast-track my way up the ladder, from developing the right mindset to making key moves that many overlook. Even if rapid growth isn’t your goal, this guide has learnings for all tech career paths.</p><ul><li><p>Software Engineering Levels</p></li><li><p>An Algorithm for Promotion</p></li><li><p>Junior (IC3) → Mid-level (IC4)</p></li><li><p>Mid-level (IC4) → Senior (IC5)</p></li><li><p>Senior (IC5) → Staff (IC6)</p></li></ul><h2>Software Engineering Levels</h2><p><em>Note: “IC” = “Individual Contributor”</em></p><p>In software engineering, companies measure career progression by levels that measure both behaviors and impact within the company. While the exact titles and structure can vary between companies, most tech companies follow a similar system:</p><ul><li><p> - Early in your career, working on smaller, well-defined tasks with guidance from more experienced engineers.</p></li><li><p> - More autonomous, handling moderately complex projects, and beginning to take initiative in improving the codebase and what they build.</p></li><li><p> - Leading larger projects with team-level influence. You’ll mentor and guide the team while having a broad impact on the codebase.</p></li><li><p>: Focusing on cross-team collaboration and solving org-wide challenges. Staff engineers are strategic thinkers who influence the technical direction of their organization.</p></li><li><p><strong>Senior Staff Engineer and Beyond (IC7+): </strong>Senior staff engineers and up operate with top technical expertise, driving large-scale initiatives that have a broad impact on the company. Senior staff engineers mentor staff engineers and work closely with executive leadership to meet business objectives.</p></li></ul><p>Your impact and compensation increase as you progress, which is a lot more satisfying in my experience. Not to mention that the skills that get you promoted also let you control what you and the company work on.</p><p>Also, many companies consider only senior engineers (IC5) and higher to be “terminal levels.” You must eventually get promoted to IC5, or you’ll be managed out. Most engineers are promoted in time, so it’s not meant to scare you but to encourage you to grow.</p><h2>An Algorithm For Promotion</h2><p>There’s a common set of steps across all promotions that will get you to Staff:</p><p><strong>1) Exceed expectations at your current level</strong> - Your manager will be hesitant to find you opportunities at the next level if they have concerns about your performance at the current level. Also, when your manager puts together a promotion packet, it’ll contain a history of your past ratings. The promotion committee will have concerns about your packet if you have a history of only meeting expectations for your level. Work with your manager to understand the expectations for your level and how to exceed them.</p><p><strong>2) Be direct with your manager about promotion </strong>- Once you know you’re exceeding expectations for your level, ask your manager what next-level performance looks like. Your manager plays a huge role in your promotion. They build your case and advocate for it, so they have a lot of influence on this process. Also, the lower the level, the more control your manager has. IC3 -&gt; IC4 promotions are straightforward, so your manager’s perspective is usually what happens. For IC5 -&gt; IC6, there is a lot more ambiguity, so <a href=\"https://www.developing.dev/p/how-promotions-and-ratings-work\">your manager serves more as a middleman between you and the promotion committee</a>. Your manager still plays a significant role in writing your packet and delivering feedback.</p><p><strong>3) Find next-level scope - </strong>If you only work on projects that fit your level’s behaviors, you won’t get any closer to promotion, no matter how good your work is. One simple pattern for finding next-level scope is brainstorming projects with engineers who are 1-2 levels higher than you are. Often, they will have a lot of projects sitting in their backlog that are big enough to help you get promoted. If you take on one of their projects, they’ll often help mentor you, review your designs and code, and give you strong peer feedback for your future promotion packet. I wrote <a href=\"https://www.developing.dev/p/a-simple-pattern-for-finding-next\">more on this here</a>. Make sure to confirm with your manager that they agree that what you’re working on fits the behaviors of the next level.<strong>4) Maintain next-level behaviors and impact </strong>- The duration you need to perform at the next level varies depending on your level and your company. At minimum though, you need to maintain that performance for 6-12 months. This is because promotions are “lagging” in tech. You must prove that you’re already operating at the next level before getting promoted. This reduces the risk of failing to meet expectations at the new level.</p><p>Getting promoted faster is a matter of doing steps (1), (2) and (3) as fast as possible. The best you can do is immediately start exceeding expectations in your first half and working with your manager on the next level.</p><p>Almost every team has scope for more Senior Engineers (IC5). You can get promoted up to that level if you have the skills and behaviors. Past that, situation and business scope play a much larger role. <a href=\"https://www.developing.dev/p/staff-career-growth-product-or-infra\">Many teams don’t need someone who has Staff-level leadership and technical skills</a>. If you find yourself stuck at any point due to your situation, you’ll likely have to switch teams to continue growing your career.</p><p>Now that you have the algorithm that applies at any of these levels let’s get into the level-specific strategies. I’ll share what got me promoted and what I would change if I did it again.</p><h2>Junior (IC3) → Mid-level (IC4)</h2><p>The main difference between these levels is in the size of the scope that you can handle independently. Here’s a rule of thumb:</p><ul><li><p>IC3 - Can handle individual tasks (&lt;2 weeks of work) with minimal guidance</p></li><li><p>IC4 - Can handle medium-to-large features (&lt;2 months of work) with minimal guidance</p></li></ul><p>“Minimal guidance” doesn’t mean that you can’t ask for help—it simply means that you can unblock yourself and make consistent progress. Asking good questions is one of the most effective ways to unblock yourself.</p><p>You should drive full features and do the project management for them. You should break your project into tasks, set reasonable timelines, and keep stakeholders updated.</p><p>You will not be expected to come up with the projects yet at this level—Senior Engineers will often outline them. However, at the IC4 level, you’re expected to take more initiative:</p><ul><li><p>Initiate refactoring and code cleanups, and <a href=\"https://www.developing.dev/p/how-to-start-reviewing-code\">give thoughtful code reviews</a>. Leave the code in a better state than you found it.</p></li><li><p><strong>Contributing to production excellence - Participate in the team’s oncall, and help debug production breakages.</strong></p></li><li><p><strong>Own the health of what you build - Add test coverage, logging, and build dashboards to monitor correctness.</strong></p></li></ul><p>Optimize your dev velocity to grow faster at this level. <a href=\"https://www.developing.dev/p/shipping-code-faster\">Shipping code faster</a> creates a shorter feedback loop, accelerating your learning process. This core skill will help you ship IC4-scope projects and improve as an engineer.</p><p>Here’s an example of several promotion timelines for what you can expect:</p><ol><li><p><strong>Promotion in 6 months (exceptional) - </strong>Rare since this means meeting IC4 expectations while onboarding. This is easier for high-performing return interns since they skip onboarding and may have some past track record already.</p></li><li><p><strong>Promotion in 12 months (great) - I’d shoot for this timeline. It’s challenging yet reasonable since it gives you six months to onboard and then start meeting IC4 expectations.</strong></p></li></ol><p>Here’s my promotion timeline as an example:<strong>H1 (L3 Exceeds Expectations)</strong> - First, I took on any task that came my way. These were nice-to-have features that others didn’t have time for. I completed them quickly and started on a larger pipeline rewrite (L4 scope) that my tech lead offered me. Outside of my main project work, I made many contributions to removing dead code and speeding up existing code because I enjoyed it.</p><p>I started to hit L4 expectations in the last few months of the half. But, since I didn’t have six months track record, I didn’t meet the promotion criteria.</p><p><strong>H2 (L3→L4 Promotion, Greatly Exceeds Expectations)</strong> - I continued driving my L4-scope project independently with high engineering quality. I came up with the idea to build a test harness to validate this rewrite that was “comparable to L5 quality” execution. I continued my passion for improving the codebase and led the company in adding static type annotations that MonkeyType couldn’t.</p><p>At this point, I had delivered on L4 scope for over six months, so the promotion made sense.</p><p><strong>What I Would Have Changed:</strong></p><p>Looking back, I would have discussed what IC4 growth looked like with my manager. I wasted our one-on-one time on project updates instead of career growth. This led to two problems:</p><ul><li><p><strong>Spent time on work that wasn’t impactful</strong> - I took on any work that was passed my way, even though not all of it was impactful. I probably could’ve gotten more out of my time.</p></li></ul><ul><li><p><strong>Didn’t have accurate expectations</strong> - I had another engineer tell me my work was IC4 level and that I should get promoted in my first half. I knew nothing then, so I took their word for it. I was surprised when I didn’t get promoted, which could have been avoided if I had been in sync with my manager.</p></li></ul><p>Although I could have been more calculated, writing as much code as I did opened doors. My tech lead trusted me with an IC4 project because I showed I could handle it. Similarly, some of the engineering craft work I did for my own personal pleasure ended up being part of what got me promoted too. <strong>The more work you do, the luckier you get.</strong></p><h2>Mid-level (IC4) → Senior (IC5)</h2><p>The IC4 to IC5 gap is larger than the IC3 to IC4 one. This is because IC5 promotion requires significant behavior changes. Raw code output is no longer the top priority. You <a href=\"https://www.developing.dev/p/how-some-engineers-always-lead\">need to lead</a> and <a href=\"https://www.developing.dev/p/how-to-influence-without-authority\">have a larger influence</a> within your team too. Here are a few examples of those differences:</p><p>Example 1 - Improving the codebase</p><ul><li><p>IC4 - Initiates refactoring and code cleanups.</p></li><li><p>IC5 - Identifies areas of improvement, <strong>influences the team to take goals on improving it together</strong>, then leads the charge on those goals.</p></li></ul><p>Example 2 - Production excellence</p><ul><li><p>IC4 - Participates in team’s oncall and mitigating outages.</p></li><li><p>IC5 - Creates an “oncall improvement” workstream and <strong>builds a process for everyone to improve the team’s oncall.</strong></p></li></ul><p>Example 3 - Project direction</p><ul><li><p>IC4 - Owns the project management of a medium-to-large feature.</p></li><li><p>IC5 - <strong>Drives team planning and builds a roadmap</strong> of several medium-to-large features.</p></li></ul><p>I wouldn’t say the IC5 examples are harder, but they require a mindset shift to own things at the team level.</p><p>Also, you’ll need to work on projects of sufficient scope for an IC5. There are a few ways that tech companies measure scope. Here’s a comparison of the criteria for IC4 and IC5 levels:</p><p>These criteria aren’t a checklist. Your work can be IC5 scope by meeting only some of these criteria.</p><p>IC5 is also the first time engineers begin to focus on growing others. At this level, you should mentor others and build up the team’s culture, which includes <a href=\"https://www.developing.dev/p/how-to-drive-meetings\">driving meetings</a>, knowledge sharing, recruiting activities, and organizing team activities. Starting mentorship relationships early is a good idea since you can’t rush mentorship.</p><p>If you can learn the above behaviors quickly, you can expect promotion on these timelines:</p><ol><li><p><strong>Promotion in 6 months (exceptional) - </strong>This is rare since you need to exert team-level influence as soon as you join the team. I could see this happening for someone who was under-leveled and just got promoted to IC4.</p></li><li><p><strong>Promotion in 12 months (great) - </strong>If you’re ambitious, I’d aim for this goal. It is possible to do this if you find IC5 scope in your first half. If not, one more half should secure your promotion.</p></li></ol><p>Here’s my promotion timeline as an example:</p><p><strong>H1 (IC4 Exceeds Expectations)</strong> - This half I wrapped up the workstream that got me promoted to IC4 and picked up another IC4 project. I spent a ton of time on engineering craft this half because I enjoyed it. I deprecated a few legacy systems that no one else would because they were dangerous and not that impactful. I didn’t exhibit any IC5 behaviors this half.</p><p>My manager handed me an IC5 workstream (~6 eng) to <a href=\"https://about.instagram.com/blog/engineering/cutting-threads-send-latency-in-half\">cut video messaging latency in half</a>, which I led successfully. I also began a side project, which became a multiple-half collaboration with another team. Lastly, I took on an intern who did a phenomenal job helping me execute these two roadmaps I led. Although I started exhibiting IC5 behaviors, the company canceled performance reviews this half because of the pandemic.</p><p><strong>H3 (IC4 → IC5 Promotion, Greatly Exceeds Expectations)</strong> - My impact this half could’ve met expectations at the IC6 level. I doubled down on the cross-org scope I created in H2 and developed a multi-half roadmap. I influenced and led another team to invest several engineers to <a href=\"https://about.instagram.com/blog/engineering/making-instagram-video-ads-performant\">revamp the IG video ads pipeline</a> with great results. I built out a second workstream and mentored another engineer to deliver it. This half, I had massive impact, team-level influence, and mentorship, which is what got me promoted.</p><ul><li><p><strong>The Skill of Tech Leading</strong> - If you grew from L3 → L4 right, you should be exceptional at landing code. The L5 behavior of team-level influence is just helping others do the same. In my first half of leading an initiative, I remember feeling unsure about it since I only had two years of experience. Leaning on my strong execution skills helped me become comfortable leading others.</p></li><li><p><strong>Working Hard Led To More Opportunities</strong> - I worked a lot and had a ton of workstreams in flight at the same time. This approach increased my chances of having one that had a ton of impact. At the time, I didn’t know it and was just throwing myself at any problems that came my way. Looking back, it was a great way to derisk my promotion.</p></li><li><p> - In my first half as an L4, I took on projects that were time-intensive and not impactful. I did these migrations because I loved cleaning up tech debt. I would’ve had more impact if I had influenced someone else to do them while I found IC5 scope instead.</p></li></ul><h2>Senior (IC5) → Staff (IC6)</h2><p>Staff Engineers (IC6) are at the same level as engineering managers. They solve problems that few others can and play a critical role in setting team direction. They lead major initiatives and influence the engineering culture of teams around them.</p><p>Some say that promotion from IC5 → IC6 is harder than IC6 → IC7 due to the significant behavior changes needed. There are a few major differences between IC5 and IC6.</p><p><strong>1) Influence Across Teams - </strong>Staff Engineer’s projects often extend beyond their team. They take on larger problems by influencing other teams without authority.</p><p>Once IC6s establish these workstreams, they tackle the hardest problems and work through others. They focus on outcomes and don’t always do the work themselves. <strong>Working through delegation and influence across teams is the biggest mindset shift from IC5 → IC6.</strong></p><p>This style of working isn’t limited to their main project impact. IC6s should also use their influence to inspire a culture of higher engineering quality and reliability across teams.</p><p> - Senior Engineers (IC5) build roadmaps of several medium-to-large features that help achieve their team’s goals. In this case, the problem and its business impact are clear; we just need an engineer to create a plan to solve it.</p><p>Staff Engineers (L6) handle more ambiguity. They don’t just solve known problems; they create scope by finding impactful opportunities and problems. <strong>Managers work with their L6s to expand the scope of the team.</strong></p><p>- Big tech companies determine what level projects are in a few ways. Here’s a comparison of the criteria for L5 and L6 levels:</p><p>Project complexity also distinguishes IC6 scope. <strong>Problems that IC5s can’t solve are considered IC6 scope</strong>. This is why specialists often have IC6+ scope; others often can’t do their projects.</p><p>These criteria aren’t a checklist. Work can be IC6 scope by meeting only some of these. Your manager will use these criteria to argue that your work is IC6 scope. This is one of the reasons why it’s important to align with your manager on your work’s scope.</p><p> - Staff engineers uplift others around them. They should have the ability to help IC5 engineers grow. There are a few ways they uplift others:</p><ul><li><p>Mentorship - Dedicated mentorship, preferably with senior engineers</p></li><li><p>Knowledge sharing - Writing wikis, giving presentations, contributing to Q&amp;A groups</p></li><li><p>Collaborations - Growing others while working with them (e.g. code reviews, design reviews, discussions)</p></li></ul><p>IC6 engineers should also contribute to growing the organization. This means that they help with recruiting and partner with their manager to improve team health.</p><p>Getting to the Staff Engineering level can take a long time. Since IC5 is considered “terminal,” there is no external pressure to achieve IC6 fast. However, if you are eager to grow as fast as possible, here’s how fas you can expect promotion:</p><ul><li><p><strong>Promotion in 1 half (Ridiculous)</strong> - You’d need to start influencing outside your team as soon as you join. Even then, it’s unlikely you’d get promoted this fast unless you create something company-changing.</p></li><li><p><strong>Promotion in 2 halves (Exceptional) </strong>- Finding IC6 opportunities on your team is not always possible this fast. It’s a combination of situation and skill to get promoted in two halves, even if you execute well.</p></li><li><p><strong>Promotion in 3 halves (Great) </strong>- If you’re ambitious I’d aim for this goal. It gives you a year to find IC6 scope, which is a reasonable amount of time to pivot if needed. Also, your track record of successes in the first year will help build the narrative for promotion.</p></li></ul><p><strong>H1 (IC5 Exceeds Expectations)</strong> - I led two workstreams that were partnerships with other teams to hit our goals. I also landed a <a href=\"https://about.instagram.com/blog/engineering/making-instagram-video-ads-performant\">large win in an unplanned ads workstream</a>, which is what brought my rating above expectations. I was also one of the top contributors to code review and interviewing in my 70-person eng org. The hidden success here was that I bootstrapped a new workstream towards the end of the half that was certainly IC6 scope.</p><p><strong>H2 (IC5 → IC6 Promotion, Greatly Exceeds Expectations)</strong> - The IC6 workstream I created turned out to be a massive opportunity. <a href=\"https://engineering.fb.com/2022/11/04/video-engineering/instagram-video-processing-encoding-reduction/\">This work was a huge success</a>, resulting in a company-wide award and <a href=\"https://www.linkedin.com/feed/update/urn:li:activity:6994387208375873536/\">public recognition from Mark Zuckerberg</a>. I also created a cross-org collaboration between 3 large orgs (70+ eng each), which received positive feedback from each director. Lastly, I ran infrastructure preparations for my org resulting in no major incidents during the most critical time of the year. The repeated influence and impact of these large initiatives is what got me promoted to IC6.</p><p> - My past context and relationships at Instagram helped me move a lot faster. I could lead several workstreams at once because I knew so much about the codebase. Also, it was easier to get work done in collaboration because I knew partner engineers from past work. Staying at one company for a longer time does have its benefits.</p><p> - When I was an IC4, I stumbled upon some IC6 scope without realizing it. I had strong initiative so I started solving problems without thinking through why it was impactful. I got lucky that the work had IC6 impact. I’ve since learned the importance of understanding the “why” before diving in. It helps you have consistent IC6 impact and makes it easier to get buy-in for your work.</p><p><strong>The Tech Lead Skillset Scales Well </strong>- In my promotion to Senior (IC5), I learned how to lead initiatives within my team. This skillset turned out to work well at higher levels too. The difference was just that more people were involved. This skill is a great way to continue your IC growth to the highest levels if you fit the “tech lead” archetype.</p><p>Growth to the Staff level can take a long time, and luck plays a role. As you move up the ladder, each promotion depends more and more on your situation in addition to your skill.</p><p>There are ways to increase your luck. For instance, you can go to growing companies and teams. You can pick business-critical projects. You can go where the most talented people are. None of these are foolproof, but they increase your chances.</p><p>Aside from picking your situation, one way to manufacture luck is to do as much good work as you can. Many growth opportunities came to me because of some past work I did. People would reach out to me to do more of it or because they wanted to ask me questions about something I had launched.</p><p>Although luck plays a role, there are aspects of getting promoted that rely less on luck. Here are four high-level areas:</p><p>Impact is any measurable and objective outcome that benefits your company. Promotions are a byproduct of your elevated, sustained impact. If you can learn what your organization considers impactful and you deliver that, you will be rewarded.</p><p><strong>2) Leverage is how you have more impact.</strong> Software engineers increase their leverage through people, writing, and code. Leverage is what differentiates higher-level ICs from lower-level ones. What I mean by each type of leverage:</p><ul><li><p>People - People leverage comes from technical leadership. This means setting direction, reviewing designs/code, and growing others.</p></li><li><p>Writing - Writing gives us leverage by influencing and helping others without your active involvement.</p></li><li><p>Code - Not all code is created equal. High-leverage code solves problems that few others can or helps engineers move faster at scale.</p></li></ul><p> When people hear “personal brand,” their minds often go to social media. But the brand that matters most is your “internal brand.” What do people within your company think about your work and its value? This is the brand that you should care most about.</p><p>Most of the top ICs I know are not well-known outside of Meta. They are legendary within the company, though because people see their impressive work. Build your internal brand by doing great work and letting others know about it (<a href=\"https://www.developing.dev/p/be-visible\">further reading here</a>).</p><p><strong>4) Build your soft skills.</strong> Working with others is a necessity to do anything of consequence. Also, being someone others want to work with makes it easier to find mentors who will uplift you along the way.</p><p>Soft skills are underrated among software engineers. It’s important to be an excellent IC, but you can go so much further if you also communicate well. Also, engineers don’t often prioritize soft skills, so having them will help you stand out and lead.</p><p>One last thing I’ll leave you with is something that I didn’t realize until looking back. When I first joined the industry, I was an absolute machine. I would get in early and stay until the last shuttle left at 9:27 PM. Although this might sound like hell to some people, I loved it. No one made me do that; I put in those hours because I enjoyed the work and thought it was interesting.</p><p>Looking back years later, I realize that was an unfair advantage I had. It let me put in a ton of work without getting burned out. Also, I got much more out of what I did because I was intrinsically motivated.</p><p>If there’s one thing I wish for you, it is that you find work at the intersection of what you enjoy and what will get you promoted. That is the best recipe for hyper-career growth.</p><p>Thanks for reading,Ryan Peterman</p><p>If you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.</p><p>If you have any questions or suggestions, leave a comment.</p><p> If you’re enjoying this newsletter and want to get even more value, consider becoming a .</p>","contentLength":24211,"flags":null,"enclosureUrl":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0173844b-0e38-4ca8-b779-b34f7f778872_1600x413.png","enclosureMime":"","commentsUrl":null},{"title":"Weekly Challenge: Counting the XOR","url":"https://dev.to/simongreennet/weekly-challenge-counting-the-xor-4hhc","date":1739679780,"author":"Simon Green","guid":556,"unread":true,"content":"<p>Each week Mohammad S. Anwar sends out <a href=\"https://theweeklychallenge.org/\" rel=\"noopener noreferrer\">The Weekly Challenge</a>, a chance for all of us to come up with solutions to two weekly tasks. My solutions are written in Python first, and then converted to Perl. It's a great way for us all to practice some coding.</p><p>You are given two array of strings,  and .</p><p>Write a script to return the count of common strings in both arrays.</p><p>The tasks and examples don't mention what to do if a string appears more than once in both arrays. I've made the assumption that we only need to return it once.</p><p>For the command line input, I take two strings that are space separated as shown in the example.</p><p>In Python this is a one liner. I turn the lists into sets (which only has unique values) and take the length of the intersection of these two sets.</p><div><pre><code></code></pre></div><p>Perl does not have sets or intersections built in. For the Perl solution, I turn both strings into a hash with the key being the strings. I then iterate through the keys of the first hash to see if they appear in the second hash. If they do, I increment the  variable.</p><div><pre><code></code></pre></div><div><pre><code>./ch-1.py \n2\n\n./ch-1.py \n1\n\n./ch-1.py \n0\n</code></pre></div><p>You are given an encoded array and an initial integer.</p><p>Write a script to find the original array that produced the given encoded array. It was encoded such that <code>encoded[i] = orig[i] XOR orig[i + 1]</code>.</p><p>This is relatively straight forward. For the command line input, I take the last value as the  integer, and the rest as the  integers.</p><p>For this task, I create the  list (array in Perl) with the  value. I then iterate over each item in the  list and takes the exclusive-or of it and the last value in the  list.</p><div><pre><code></code></pre></div><div><pre><code>./ch-2.py 1 2 3 1\n1, 0, 2, 1]\n\n./ch-2.py 6 2 7 3 4\n4, 2, 0, 7, 4]\n</code></pre></div>","contentLength":1646,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real-time Updates Made Easy: Building Server-Sent Events with GoFrame 🚀","url":"https://dev.to/jones_charles_ad50858dbc0/real-time-updates-made-easy-building-server-sent-events-with-goframe-112b","date":1739673428,"author":"Jones Charles","guid":577,"unread":true,"content":"<p>Hey there, fellow developers! 👋 Ever needed to add real-time updates to your Go application but found WebSockets a bit too complex for your needs? Enter Server-Sent Events (SSE) - a simpler alternative that's perfect for one-way server-to-client communication.</p><p>In this guide, I'll walk you through implementing SSE using GoFrame, taking you from basic implementation all the way to production-ready code. Let's dive in!</p><h2>\n  \n  \n  What are Server-Sent Events? 🤔\n</h2><p>SSE is a standard that enables servers to push real-time updates to clients over HTTP. Unlike WebSocket, SSE:</p><ul><li>Is one-way (server to client only)</li><li>Automatically reconnects if the connection is lost</li></ul><p>Perfect for: real-time notifications, live feeds, status updates, and monitoring dashboards!</p><h2>\n  \n  \n  Getting Started: Basic SSE Implementation 🌱\n</h2><p>Let's start with a simple example. Here's how to create your first SSE endpoint in GoFrame:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>And here's how to connect from the frontend:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  Real-World Examples: Let's Build Something Cool! 🛠️\n</h2><p>Let's build something more practical - a real-time stock price feed:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  2. Real-time Chat Room Status 💬\n</h3><p>Monitor active users and typing indicators in a chat room:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  3. System Monitoring Dashboard 📊\n</h3><p>Monitor system metrics in real-time:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h3>\n  \n  \n  4. Live Order Processing Status ⚡\n</h3><p>Track order processing status in real-time:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h3>\n  \n  \n  5. Live Sports Score Updates 🏆\n</h3><p>Track live game scores and statistics:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  Making it Production-Ready 🛠️\n</h2><p>Keep connections alive with periodic pings:</p><div><pre><code></code></pre></div><p>Make your frontend resilient:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  3. Support Different Event Types 🔄\n</h3><p>Handle various types of updates:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>For distributed systems, use Redis pub/sub to coordinate SSE messages:</p><div><pre><code></code></pre></div><ol><li>: When you have frequent updates, batch them together:\n</li></ol><div><pre><code></code></pre></div><ol><li>: Prevent server overload:\n</li></ol><div><pre><code></code></pre></div><p>Implement event replay for clients that reconnect:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Client Groups and Filtering\n</h3><p>Implement client grouping for targeted updates:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Rate Limiting and Throttling\n</h3><p>Implement rate limiting for high-frequency updates:</p><div><pre><code></code></pre></div><ol><li>Use CORS headers in production</li><li>Add authentication for sensitive data</li><li>Monitor connection counts and server resources</li><li>Test with different network conditions</li></ol><p>SSE is a powerful tool for real-time updates that's often overlooked in favor of WebSockets. For one-way communication, it's simpler, more lightweight, and works great with HTTP/2. With GoFrame, implementing SSE becomes even more straightforward and maintainable.</p><p>Here's a quick checklist for your SSE implementation:</p><ul><li>✅ Basic SSE setup with proper headers</li><li>✅ Error handling and connection management</li><li>✅ Authentication and authorization</li><li>✅ Security considerations</li></ul><p>You could extend this implementation by:</p><ul><li>Adding message persistence</li><li>Implementing message replay</li><li>Building client libraries</li><li>Adding WebSocket fallback</li><li>Implementing server-side filtering</li><li>Adding message prioritization</li></ul><p>Have you used SSE in your projects? What challenges did you face? Share your experiences in the comments below! 👇</p><p>P.S. Want to see the complete code? Check out my GitHub repo [link to be added] for a production-ready implementation!</p><p>If you found this helpful, follow me for more Go tutorials and real-world examples! ✨</p>","contentLength":3136,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Fluvio: A Rust-powered streaming platform using WebAssembly for programmable data processing","url":"https://www.reddit.com/r/rust/comments/1iqgg02/fluvio_a_rustpowered_streaming_platform_using/","date":1739667635,"author":"/u/drc1728","guid":528,"unread":true,"content":"<div><p>I am in the process of writing an essay on composable streaming first architecture for data intensive applications. I am thinking of it as a follow up on this article.</p><p>Quick question for the Rust community:</p><ul><li>What information would help the Rust community know and experience Fluvio?</li><li>What would you like to see covered in the essay?</li></ul></div>   submitted by   <a href=\"https://www.reddit.com/user/drc1728\"> /u/drc1728 </a>","contentLength":357,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Safe elimination of unnecessary bound checks.","url":"https://www.reddit.com/r/rust/comments/1iqev5s/safe_elimination_of_unnecessary_bound_checks/","date":1739663006,"author":"/u/tjientavara","guid":499,"unread":true,"content":"<p>Hi, I am working on a Unicode database that is pretty fast, it is a 2 step associated lookup.</p><p>Here is the code for getting the east-asian-width value of a Unicode code-point. Pay specific attention to the function. This function is a  function and the byte tables that it references are  as well. This will allow you to eventually run the unicode algorithms at both compile and run-time.</p><p>Since the tables are fixed at compile time, I can proof that all values from the table will result in values that will never break any bounds, so technically the bound checks are unnecessary.</p><p>There are two bound checks in the assembly output for this function.</p><ul><li>The check before accessing the EAST_ASIAN_WIDTH_COLUMN table (I use an assert! to do this, otherwise there will be double bound check).</li><li>And the check on the conversion to the enum.</li></ul><p>The two bound checks are the two compare + conditional-jump instructions in this code.</p><p>I could increase the size of the column table to remove one of the bound checks, but I want to keep the table small if possible.</p><p>Is there a way to safely (I don't want to use the unsafe code) proof to the compiler that those two checks are unnecessary?</p><p>P.S. technically there is a bound check before the index table a CMOV instruction, but it doubles as a way to also decompress the index table (last entry is repeated), so I feel this is not really a bound check.</p><p>I was able to concat the two tables, and use a byte offset. So now there is no way to get an out of bound access, and the bound checks are no longer emitted by the compiler.</p><p>I also added a manual check for out of bound on the enum and return zero instead, this becomes a CMOV and it eliminated all the panic code from the function.</p>","contentLength":1702,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Amazon AWS \"whoAMI\" Attack Exploits AMI Name Confusion to Take Over Cloud Instances","url":"https://www.reddit.com/r/programming/comments/1iqav3c/amazon_aws_whoami_attack_exploits_ami_name/","date":1739652192,"author":"/u/Dark-Marc","guid":513,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Newly Curated 40+ Developer Fixes || Try it now :)","url":"https://dev.to/0x2e_tech/newly-curated-40-developer-fixes-try-it-now--14fe","date":1739649805,"author":"0x2e Tech","guid":555,"unread":true,"content":"<h3>\n  \n  \n  1. Go Testing: Force Retests &amp; Disable Caching\n</h3><p>Go Testing: Forcing Retests and Disabling Test Caching  This guide tackles the common issue of stale test results in Go, focusing on how to reliably force retests and disable caching mechanisms.  We'll explore several practical, plug-and-play solutio... <a href=\"https://0x2e.tech/item/go-testing-force-retests-disable-caching\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  2. Flutter Map Key Typing: A Practical Guide for Developers\n</h3><p>Flutter Map Key Typing: A Practical Guide for Developers  Let's face it: dealing with map key typing in Flutter can be a real headache if you don't have a clear strategy.  This guide provides a no-nonsense, plug-and-play approach to mastering this as... <a href=\"https://0x2e.tech/item/flutter-map-key-typing-a-practical-guide-for-developers\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Flutter Development </li></ul><h3>\n  \n  \n  3. Multi-task Learning in TensorFlow: A Practical Guide\n</h3><p>Multi-task Learning in TensorFlow: A Practical Guide  This guide provides a plug-and-play solution for implementing multi-task learning in TensorFlow.  We'll tackle a common scenario: predicting both the sentiment (positive, negative, neutral) and th... <a href=\"https://0x2e.tech/item/multi-task-learning-in-tensorflow-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  4. Tracking Weight Variance During Neural Network Training\n</h3><p>Let's dive into how the variance of weights changes during neural network training.  This is crucial for understanding your model's learning process and diagnosing potential problems.  We'll cover practical methods for tracking this variance and inte... <a href=\"https://0x2e.tech/item/tracking-weight-variance-during-neural-network-training\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  5. Ruby Rescue Best Practices: Why Avoid ?\n</h3><p>Hey there, fellow Rubyist! Let's tackle this common pitfall: why rescuing Exception =&gt; e is a bad idea and how to do it right.  We'll go beyond the basics and explore practical, plug-and-play solutions.  This is for folks who know some Ruby but want ... <a href=\"https://0x2e.tech/item/ruby-rescue-best-practices-why-avoid-rescue-exception-e\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  6. Expo iOS App Store Transfer Error: \"A required agreement is missing\"\n</h3><p>Decoding the \"A required agreement is missing or has expired\" Enigma After Expo App Store Transfer (SDK 51.0.0 and beyond)  Let's face it:  That error message is about as helpful as a chocolate teapot.  You've wrestled with your Expo app, successfull... <a href=\"https://0x2e.tech/item/expo-ios-app-store-transfer-error-a-required-agreement-is-missing\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> iOS App Development </li></ul><h3>\n  \n  \n  7. Android Ktor Job Cancellation: A Practical Guide\n</h3><p>Android Ktor Job Cancellation: A Practical Guide  Let's tackle that pesky \"Job Cancelled\" error when using Ktor on Android. This issue often pops up when a long-running Ktor request gets interrupted, perhaps by a configuration problem, user action, o... <a href=\"https://0x2e.tech/item/android-ktor-job-cancellation-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Android Development </li></ul><h3>\n  \n  \n  8. Mobile-Unfriendly Laravel Site? Fix it Now!\n</h3><p>Alright coder, let's tackle this mobile responsiveness issue head-on.  Your Laravel site's looking great on desktop, but those tiny screens are giving you a headache?  Don't worry, we'll fix it.  This guide is your plug-and-play solution, assuming yo... <a href=\"https://0x2e.tech/item/mobile-unfriendly-laravel-site-fix-it-now\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  9. Angular 18 APP_INITIALIZER: Fixing Dependency Injection Issues\n</h3><p>Angular 18 APP_INITIALIZER Dependency Injection woes? Let's fix it!  So, you're wrestling with Angular 18's APP_INITIALIZER and its frustrating dependency injection quirks?  Don't worry, you're not alone. This seemingly simple mechanism can turn into... <a href=\"https://0x2e.tech/item/angular-18-app-initializer-fixing-dependency-injection-issues\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  10. Jenkins Token Generation for DevOps: A Practical Guide\n</h3><p>Alright, friend! Let's get you a Jenkins API token.  This is crucial for automating tasks and integrating Jenkins with other tools.  Forget the confusing docs – we're going straight to the action.  Understanding the Why:  Before diving in, let's clar... <a href=\"https://0x2e.tech/item/jenkins-token-generation-for-devops-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  11. Fixing Python's  Error: A Quick Guide\n</h3><p>Conquering the AttributeError: module 'pkgutil' has no attribute 'ImpImporter' Beast  Let's face it: that error message is a real mood killer.  It screams, \"Your Python environment is a bit of a mess!\" But fear not, fellow coder! This isn't some insu... <a href=\"https://0x2e.tech/item/fixing-python-s-pkgutil-impimporter-error-a-quick-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  12. Securely Wiping AES XTS Cipher Keys in Go: A Practical Guide\n</h3><p>Securely Wiping AES XTS Cipher Key Material in Go: A Practical Guide  This guide provides a clear, actionable solution for securely wiping AES XTS cipher key material in Go.  We'll tackle this problem head-on, avoiding unnecessary jargon and focusing... <a href=\"https://0x2e.tech/item/securely-wiping-aes-xts-cipher-keys-in-go-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  13. Xamarin Forms: Null Values in IValueConverter? Fix it!\n</h3><p>Hey there, fellow Xaml warrior! Let's tackle this pesky null value problem in your Xamarin Forms IValueConverter.  It's a common hiccup, but once you understand the why and the how, you'll be converting values like a pro.   The Usual Suspects: Why Nu... <a href=\"https://0x2e.tech/item/xamarin-forms-null-values-in-ivalueconverter-fix-it\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  14. Postgres Timestamps: Storing with Time Zone Without UTC Conversion\n</h3><p>Storing Timestamps with Time Zone in Postgres Without UTC Conversion: A Practical Guide  This guide provides a clear, actionable solution for storing timestamps with time zones in PostgreSQL without the automatic conversion to UTC.  We'll tackle this... <a href=\"https://0x2e.tech/item/postgres-timestamps-storing-with-time-zone-without-utc-conversion\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  15. Fix \"cannot load such file -- utils/popen\" on macOS\n</h3><p>Alright, friend! Let's tackle this pesky \"cannot load such file -- utils/popen\" error you're encountering with Homebrew on your macOS system. This usually pops up when Ruby can't find the popen utility, which is crucial for some processes.  We'll wal... <a href=\"https://0x2e.tech/item/fix-cannot-load-such-file-utils-popen-on-macos\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  16. Flutter Web Self-Signed SSL: A Practical Guide\n</h3><p>Flutter Web Self-Signed Certificate Requests: A Straightforward Guide  Let's tackle that pesky self-signed certificate issue in Flutter web development.  You've built your awesome app, connected to your server... but BAM!  That self-signed certificat... <a href=\"https://0x2e.tech/item/flutter-web-self-signed-ssl-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Flutter Web Development </li></ul><h3>\n  \n  \n  17. Docker XRDP Resolution Fix: A Practical Guide\n</h3><p>Docker XRDP Resolution Fix: A Practical Guide  Let's face it: wrestling with Docker and XRDP resolution can feel like a black hole of frustration.  You've got your awesome Docker setup, your XRDP server humming, but the display is all wonky.  Fear no... <a href=\"https://0x2e.tech/item/docker-xrdp-resolution-fix-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  18. Angular Drag-and-Drop: Fixing Nested List Issues\n</h3><p>Angular Drag-and-Drop with Deeply Nested Lists: A Practical Guide  Let's face it: drag-and-drop in Angular with deeply nested lists can be a real headache.  The basic functionality often works fine for simple lists, but the moment you add nesting, th... <a href=\"https://0x2e.tech/item/angular-drag-and-drop-fixing-nested-list-issues\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  19. MySQL Error 1698: iRedMail Root Access Fix\n</h3><p>Alright, friend! Let's tackle this \"ERROR 1698 (28000): Access denied for user 'root'@'localhost'\" issue head-on.  This is a common problem in MySQL, especially when working with iRedMail.  It basically means your root user, the king of your MySQL ki... <a href=\"https://0x2e.tech/item/mysql-error-1698-iredmail-root-access-fix\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  20. Docker to Host File Transfer: A Practical Guide\n</h3><p>Copying Files from Docker Container to Host: A Practical Guide  This guide provides a no-nonsense, step-by-step approach to copying files from your Docker container to your host machine.  We'll cover various methods, ensuring you have the tools to ta... <a href=\"https://0x2e.tech/item/docker-to-host-file-transfer-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  21. Securely Wiping AES XTS Cipher Keys in Go: A Practical Guide\n</h3><p>Securely Wiping AES XTS Cipher Key Material in Go: A Practical Guide  This guide provides a practical, step-by-step solution for securely wiping AES XTS cipher key material in Go.  We'll focus on eliminating sensitive data from memory to prevent pote... <a href=\"https://0x2e.tech/item/securely-wiping-aes-xts-cipher-keys-in-go-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  22. Doubly-Ended Array Priority Queue: Mastering Node Partnerships\n</h3><p>Mastering Node Partnerships in a Doubly-Ended Array-Based Priority Queue (DEAP)  Let's tackle the challenge of correctly managing node partnerships within a Doubly-Ended Array-Based Priority Queue (DEAP).  This isn't your grandma's priority queue; we... <a href=\"https://0x2e.tech/item/doubly-ended-array-priority-queue-mastering-node-partnerships\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Data Structures and Algorithms </li></ul><h3>\n  \n  \n  23. Node ESM + Log4js: A Practical Guide\n</h3><p>Conquering Log4js in Your Node.js ESM Project: A Plug-and-Play Guide  Let's be honest, wrestling with Log4js in an ES module Node.js project can feel like a wrestling match with a greased pig.  But fear not, fellow developer! This guide will walk you... <a href=\"https://0x2e.tech/item/node-esm-log4js-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  24. Fixing SwiftUI Font Twitching: A Practical Guide\n</h3><p>SwiftUI Font Twitching:  A Practical Guide for iOS Developers  Let's be honest, that twitching font in your SwiftUI animation is annoying.  It's like a tiny, digital mosquito buzzing around your otherwise perfect UI. But fear not, fellow developer! W... <a href=\"https://0x2e.tech/item/fixing-swiftui-font-twitching-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  25. Resize SVG Responsively with D3.js: A Practical Guide\n</h3><p>SVG Dimensions on Window Resize: A D3.js Plug-and-Play Solution  This guide provides a straightforward, actionable solution for dynamically resizing SVG elements within a D3.js visualization to match window changes.  We'll ditch the fluff and get str... <a href=\"https://0x2e.tech/item/resize-svg-responsively-with-d3-js-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  26. Demystifying Logits &amp; Softmax in TensorFlow: A Practical Guide\n</h3><p>Demystifying Logits and Softmax in TensorFlow: A Practical Guide  This guide provides a clear, practical explanation of logits and the difference between softmax and softmax_cross_entropy_with_logits in TensorFlow, focusing on direct application and ... <a href=\"https://0x2e.tech/item/demystifying-logits-softmax-in-tensorflow-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  27. JS DevTools: \"Function was resolved from bound function\" Fix\n</h3><p>Alright, detective! Let's crack this 'Function was resolved from bound function' mystery in your JavaScript DevTools.  This cryptic message usually pops up when you're dealing with functions and their context (where they're called from) isn't what yo... <a href=\"https://0x2e.tech/item/js-devtools-function-was-resolved-from-bound-function-fix\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  28. VueDatePicker + v-mask: A Practical Guide\n</h3><p>Mastering the Mashup: VueDatePicker and v-mask  Let's face it:  combining VueDatePicker and v-mask can feel like wrestling a greased pig.  But fear not, fellow developer! This guide will walk you through a smooth, streamlined integration, turning tha... <a href=\"https://0x2e.tech/item/vuedatepicker-v-mask-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  29. Is My Image Gamma Encoded? A NumPy Guide for Image Pros\n</h3><p>Hey there, fellow image processing enthusiast!  Let's tackle this gamma encoding mystery. You've loaded your image into NumPy, and now you're wondering: Is it gamma-encoded or not?  Fear not! We'll unravel this with a practical, plug-and-play approac... <a href=\"https://0x2e.tech/item/is-my-image-gamma-encoded-a-numpy-guide-for-image-pros\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Image Processing </li></ul><h3>\n  \n  \n  30. MySQL Functions: Returning Multiple Rows\n</h3><p>Returning multiple rows from a MySQL function can be tricky, but it's definitely doable. The key is understanding that MySQL functions, unlike stored procedures, are designed to return a single value.  To get around this limitation, we'll leverage a ... <a href=\"https://0x2e.tech/item/mysql-functions-returning-multiple-rows\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  31. Flutter Web Theme Meta Tags: Why Mobile Browsers Ignore Them?\n</h3><p>Flutter Web Theme Meta Tags: Why Mobile Browsers Ignore Them?  Let's tackle this head-on.  You've diligently crafted your Flutter web app, meticulously set your theme meta tags, and yet, mobile browsers are ignoring them.  Frustrating, right? This is... <a href=\"https://0x2e.tech/item/flutter-web-theme-meta-tags-why-mobile-browsers-ignore-them\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Flutter Web Development </li></ul><h3>\n  \n  \n  32. ASP.NET Pragma Header Won't Go Away?  A Quick Fix\n</h3><p>Alright, friend!  Let's tackle this pesky Pragma header that's sticking around in your ASP.NET application even after you've seemingly banished it from your code.  This is a common issue, and it usually boils down to a few sneaky culprits.  We'll go ... <a href=\"https://0x2e.tech/item/asp-net-pragma-header-won-t-go-away-a-quick-fix\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  33. AWS EC2 Uptime: Node.js &amp; TypeScript Solution\n</h3><p>Calculating AWS EC2 Instance Uptime: A Node.js and TypeScript Guide  This guide provides a practical, plug-and-play solution for calculating the uptime of an AWS EC2 instance from the moment it enters the \"running\" state. We'll leverage the AWS SDK f... <a href=\"https://0x2e.tech/item/aws-ec2-uptime-node-js-typescript-solution\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  34. JS Radio Group Arrow Key Control: A Plug-and-Play Guide\n</h3><p>JavaScript Radio Group Navigation: A Plug-and-Play Guide  This guide provides a practical, step-by-step solution to enhance the user experience of multiple radio groups by enabling navigation using the Enter, Up, and Down arrow keys. We'll ditch the ... <a href=\"https://0x2e.tech/item/js-radio-group-arrow-key-control-a-plug-and-play-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  35. Stop Clicks Under CSS Popovers: A Quick Guide\n</h3><p>Stop Clicks Under CSS Popovers: A Quick Guide  This guide provides a straightforward solution to prevent clicks from reaching elements beneath a CSS popover's backdrop.  We'll use JavaScript to handle the event and stop propagation.  This is crucial ... <a href=\"https://0x2e.tech/item/stop-clicks-under-css-popovers-a-quick-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  36. Flutter: Align Dynamic Row Element\n</h3><p>Flutter: Aligning a Single Element in a Dynamic Height Row  Let's tackle this common Flutter layout challenge: aligning a single element within a row where the row's height changes dynamically.  This often pops up when you have elements of varying si... <a href=\"https://0x2e.tech/item/flutter-align-dynamic-row-element\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  37. Dark Theme CSS Fix: A Web Developer's Guide\n</h3><p>Dark Theme CSS Mayhem? Let's Fix It!   So, your website looks fabulous in light mode, but the second someone flips the switch to dark mode, it's a CSS catastrophe?  Don't worry, you're not alone.  Many developers hit this snag.  This guide will walk ... <a href=\"https://0x2e.tech/item/dark-theme-css-fix-a-web-developer-s-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  38. AWS SDK Port Forwarding: Troubleshooting Short-Lived Sessions (C#)\n</h3><p>AWS SDK Port Forwarding: Why Your Sessions Die in 30 Seconds (and How to Fix It)  Let's be honest, debugging flaky network connections is nobody's favorite pastime.  But when your AWS SDK port forwarding sessions keep crapping out after less than 30 ... <a href=\"https://0x2e.tech/item/aws-sdk-port-forwarding-troubleshooting-short-lived-sessions-c\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  39. Fixing Keras' pad_sequences Import Error: A Quick Guide\n</h3><p>Conquering the 'cannot import name 'pad_sequences'' Error in Keras  Let's be honest, import errors are the bane of every programmer's existence.  That frustrating red squiggly line underlining your perfectly crafted code?  Yeah, we've all been there.... <a href=\"https://0x2e.tech/item/fixing-keras-pad-sequences-import-error-a-quick-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  40. PHP's ?? Operator: A Practical Guide for Beginners\n</h3><p>Hey there, fellow coder! Let's dive into PHP's null coalescing operator, ??.  This little guy is a lifesaver when dealing with potentially null values and will save you from writing tons of tedious if statements.  Think of it as a supercharged way to... <a href=\"https://0x2e.tech/item/php-s-operator-a-practical-guide-for-beginners\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  41. Spring WebSockets: User-Specific Subscriptions\n</h3><p>Alright, let's tackle this Spring WebSocket user subscription puzzle.  The goal?  Get messages to the right user, securely. Forget the fluff, let's get practical.  This solution uses Spring Security for authentication and authorization, ensuring only... <a href=\"https://0x2e.tech/item/spring-websockets-user-specific-subscriptions\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Spring WebSockets </li></ul><h3>\n  \n  \n  42. Angular SSR: Mastering server.ts and main.server.ts\n</h3><p>Angular SSR: Demystifying server.ts and main.server.ts  Let's get this straight:  Server-Side Rendering (SSR) in Angular can feel like navigating a labyrinth.  But fear not! We'll cut through the confusion and give you a practical, plug-and-play guid... <a href=\"https://0x2e.tech/item/angular-ssr-mastering-server-ts-and-main-server-ts\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  43. SageMaker Training Stuck? Deep Learning Fixes\n</h3><p>Decoding the SageMaker Training Job Enigma: A Practical Guide  So, your SageMaker training job is chilling in a state of suspended animation?  The code compiles, the setup looks good, but nothing's happening in the training phase. Let's troubleshoot ... <a href=\"https://0x2e.tech/item/sagemaker-training-stuck-deep-learning-fixes\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Amazon SageMaker </li></ul><h3>\n  \n  \n  44. Braze Connected Content GraphQL: A Practical Guide\n</h3><p>Braze \"Connected Content\" GraphQL Request: A Practical Guide  This guide provides a step-by-step solution for making GraphQL requests to Braze's Connected Content API. We'll cover everything from setting up authentication to handling responses, focus... <a href=\"https://0x2e.tech/item/braze-connected-content-graphql-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  45. PHP Progress Bar: A Step-by-Step Guide\n</h3><p>PHP Progress Bar: A Step-by-Step Guide  This guide provides a practical, plug-and-play solution for creating a dynamic progress bar in PHP, updating in real-time over a period.  We'll cover the PHP backend, HTML frontend, and CSS styling using SASS f... <a href=\"https://0x2e.tech/item/php-progress-bar-a-step-by-step-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  46. Resize Egui Tables by Column: A Rust Guide\n</h3><p>Resize Egui Tables by Column: A Rust Guide  This guide provides a practical, plug-and-play solution for creating resizable tables in egui using Rust. We'll build a robust and efficient solution, avoiding unnecessary complexity.  Understanding the Cha... <a href=\"https://0x2e.tech/item/resize-egui-tables-by-column-a-rust-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  47. C#/.NET: Why avoid inheriting from List? Practical solutions\n</h3><p>C#/.NET: Why Avoid Inheriting from List? Practical Solutions  Let's cut to the chase.  You're a C# developer, you've encountered List, and you're thinking, \"Hey, I need a specialized list!  Inheriting seems efficient.\"  Hold your horses, partne... <a href=\"https://0x2e.tech/item/c-net-why-avoid-inheriting-from-list-t-practical-solutions\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  48. Next.js, Antd, Sass/Less: The Ultimate Guide\n</h3><p>Next.js, Ant Design, Sass/Less: A Plug-and-Play Guide  This guide provides a no-nonsense, step-by-step approach to integrating Ant Design with Next.js, using either Less, Sass, or CSS Modules.  We'll focus on practicality, offering ready-to-use code ... <a href=\"https://0x2e.tech/item/next-js-antd-sass-less-the-ultimate-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  49. Rust Vector Concatenation: The Ultimate Guide for Programmers\n</h3><p>Rust Vector Concatenation: The Ultimate Guide for Programmers  This guide provides a no-nonsense, practical approach to concatenating vectors in Rust.  We'll cover various methods, highlighting their strengths and weaknesses, so you can choose the be... <a href=\"https://0x2e.tech/item/rust-vector-concatenation-the-ultimate-guide-for-programmers\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Rust Programming </li></ul><h3>\n  \n  \n  50. Webpack 5 Breaking Change: Fixing Node.js Module Polyfills\n</h3><p>Webpack 5 Breaking Change: Banishing the Node.js Polyfill Gremlins  Let's be honest, that \"Webpack 5 breaking change\" error message is a real mood killer.  You're cruising along, building your awesome React app, and suddenly BAM!  Webpack throws a ta... <a href=\"https://0x2e.tech/item/webpack-5-breaking-change-fixing-node-js-module-polyfills\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  💰 <strong>Want to Earn 40% Commission?</strong></h3><p>Join our affiliate program and start making money by promoting ! Earn 40% on every sale you refer.  </p><p>You'll on average around 5$ per sell and for bundled products it will be around 40$ per sale. (So just share it and make money with worrying about product creation and maintanence)</p>","contentLength":16908,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Incoming Rust intern need advice?","url":"https://www.reddit.com/r/rust/comments/1iq9oph/incoming_rust_intern_need_advice/","date":1739649133,"author":"/u/Helpful_Ad_9930","guid":471,"unread":true,"content":"<p>Hey everyone, I'm a 19-year-old college student who just landed a SWE internship at NVIDIA! My manager has me learning Rust and exploring one of its libraries, and I’m also reading up on operating systems and computer networking. I'm almost done with the OS book and plan to start the networking one next week.</p><p>I do have a bit of experience with embedded systems I completed two internships during my freshman year. However, so far I’m really enjoying Rust. I am quite a rookie compared to you experienced folks haha! But so far I love how Rust's compiler enforces safety, how Cargo makes dependency management a breeze compared to CMake, and the whole concept of ownership and borrowing is just super cool.</p><p>At the moment, I’m nearly finished with the Rust book. I am on the concurrency chapter. Guess I am just wondering what next? I really want this return offer and I just want to blow this opportunity out the park. I go too a state school and my manager told me he has high expectations for me after my interviews. I just do not want to let him down you know also plus kind of getting impostor syndrome a bit seeing all the other interns coming from schools such as MIT, Harvard, Standford, etc. Sorry for the vent I guess I just want to prove my worth? and show my manager they made the right choice?</p><ul><li>What fun, Rust projects have helped you learn a lot?</li><li>Are there any books you’d recommend that could help me out for the summer?</li></ul><p><strong>Books I want to read before I start summer:</strong></p><ul><li>Operating Systems (Three easy pieces)</li><li>Beej's Guide to Network Programming</li><li>C++ Concurrency in Action</li></ul>","contentLength":1578,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[D] Is my company missing out by avoiding deep learning?","url":"https://www.reddit.com/r/MachineLearning/comments/1iq9gtk/d_is_my_company_missing_out_by_avoiding_deep/","date":1739648562,"author":"/u/DatAndre","guid":257,"unread":true,"content":"<p>Disclaimer: obviously it does not make sense to use a neural network if a linear regression is enough. </p><p>I work at a company that strictly adheres to mathematical, explainable models. Their stance is that methods like Neural Networks or even Gradient Boosting Machines are too \"black-box\" and thus unreliable for decision-making. While I understand the importance of interpretability (especially in mission critical scenarios) I can't help but feel that this approach is overly restrictive. </p><p>I see a lot of research and industry adoption of these methods, which makes me wonder: are they really just black boxes, or is this an outdated view? Surely, with so many people working in this field, there must be ways to gain insights into these models and make them more trustworthy. </p><p>Am I also missing out on them, since I do not have work experience with such models?</p><p>EDIT: Context is formula one! However, races are a thing and support tools another. I too would avoid such models in anything strictly related to a race, unless completely necessary. I just feels that there's a bias that is context-independent here. </p>","contentLength":1110,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Zed for golang","url":"https://www.reddit.com/r/golang/comments/1iq8jsm/zed_for_golang/","date":1739646156,"author":"/u/MrBricole","guid":518,"unread":true,"content":"<p>I am considering using zed for writting go. Is it working out of the box with full syntax high light for noob like me such fmt.Println() ? I mean, I need to have it displaying functions under an import library.</p><p>Should I give it a try or is it only for advanced users ? </p>","contentLength":268,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pushing autovectorization to the limit: utf-8 validator","url":"https://www.reddit.com/r/rust/comments/1iq7yn2/pushing_autovectorization_to_the_limit_utf8/","date":1739644600,"author":"/u/Laiho3","guid":483,"unread":true,"content":"   submitted by   <a href=\"https://www.reddit.com/user/Laiho3\"> /u/Laiho3 </a>","contentLength":29,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Introducing encode: Encoders/serializers made easy.","url":"https://www.reddit.com/r/rust/comments/1iq6pz7/introducing_encode_encodersserializers_made_easy/","date":1739641353,"author":"/u/Compux72","guid":282,"unread":true,"content":"<p> is a toolbox for building encoders and serializers in Rust. It is heavily inspired by the <a href=\"https://docs.rs/winnow/latest/winnow/\"></a> and <a href=\"https://docs.rs/nom/latest/nom/\"></a> crates, which are used for building parsers. It is meant to be a companion to these crates, providing a similar level of flexibility and ease of use for reversing the parsing process.</p><p>The main idea behind  is to provide a set of combinators for building serializers. These combinators can be used to build complex encoders from simple building blocks. This makes it easy to build encoders for different types of data, without having to write a lot of boilerplate code.</p><p>Another key feature of  is its support for  environments. This makes it suitable for use in embedded systems, where the standard library (and particularly the [] module) is not available.</p><p>See the <a href=\"https://github.com/Altair-Bueno/encode/tree/master/examples\"></a> folder for some examples of how to use . Also, check the <a href=\"https://docs.rs/encode/0.1.0/encode/combinators/index.html\"></a> module for a list of all the combinators provided by the crate.</p><ul><li>Ready to use combinators for minimizing boilerplate.</li></ul><ul><li>: Enables the  feature.</li><li>: Enables the use of the standard library.</li><li>: Enables the use of the  crate.</li><li>: Implements [] for [].</li></ul><h3>Why the  trait instead of ?</h3><blockquote><p>A buffer stores bytes in memory such that write operations are . The underlying storage may or may not be in contiguous memory. A BufMut value is a cursor into the buffer. Writing to BufMut advances the cursor position.</p></blockquote><p>The bytes crate was never designed with falible writes nor  targets in mind. This means that targets with little memory are forced to crash when memory is low, instead of gracefully handling errors.</p><h3>Why the  trait instead of ?</h3><ul><li>Because there is no alternative, at least that i know of, that supports  properly</li><li>Because it's easier to work with than  and </li><li>Because using  with binary data often leads to a lot of boilerplate</li></ul>","contentLength":1715,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust and the Null Paradigm: Exploring Safety and Alternatives","url":"https://dev.to/dedsecrattle/rust-and-the-null-paradigm-exploring-safety-and-alternatives-47b","date":1739641004,"author":"Prabhat Kumar","guid":554,"unread":true,"content":"<p>Rust is a systems programming language known for its focus on memory safety, concurrency, and performance. One of the key decisions made by the Rust team is the choice to <strong>not support the null paradigm</strong>. While this design choice leads to safer, more reliable code, it raises an important question for developers: <strong>How do we handle the absence of a value?</strong></p><p>In many programming languages, the concept of  or  (depending on the language) is used to represent the absence of a value. This approach, however, introduces a number of issues:</p><ul><li><strong>Null Pointer Dereferencing:</strong> Accessing a  pointer can lead to runtime errors that are often hard to debug.</li><li> values can lead to subtle bugs when programmers forget to check for them, causing unexpected behaviors in applications.</li></ul><p>Rust decided to leave behind this problematic paradigm in favor of alternatives that promote safety at compile-time.</p><h2>\n  \n  \n  Rust's Approach: </h2><p>Rust takes a unique approach to handling the absence of a value: it uses the  enum. This powerful construct allows developers to explicitly handle the presence or absence of a value.</p><p>The  type is defined as:</p><div><pre><code></code></pre></div><ul><li> represents the presence of a value.</li><li> represents the absence of a value.</li></ul><p>This makes  a much safer alternative to . The compiler forces you to explicitly handle both cases ( and ), reducing the risk of null pointer exceptions.</p><p>Here's a simple example of how you might use  to handle optional values:</p><div><pre><code></code></pre></div><p>In this example, instead of returning  when the user isn't found, we return , and the caller must handle the potential absence of a value.</p><h2>\n  \n  \n  Why  Is Better Than </h2><ul><li> With , Rust ensures that you never have to deal with null values unless you explicitly decide to. This eliminates the common pitfalls of null pointer dereferencing.</li><li> Rust’s borrow checker ensures that you handle all  cases correctly, even when dealing with complex ownership and lifetime semantics.</li><li> Rust’s pattern matching syntax makes it easy to express the logic of handling  and  values, leading to clean and readable code.</li></ul><h2>\n  \n  \n  Other Alternatives:  for Error Handling\n</h2><p>In addition to , Rust also offers the  enum for handling operations that might fail. The  type is especially useful when a function might produce either a valid result or an error, combining both success and failure cases into a single, explicit structure.</p><div><pre><code></code></pre></div><p>Just like , the  type forces developers to handle both cases explicitly, improving robustness and error recovery in your programs.</p><h2>\n  \n  \n  Conclusion: Embracing Safety and Clarity\n</h2><p>Rust’s rejection of the  paradigm and adoption of types like  is a conscious choice to create safer, more reliable code. By forcing developers to handle the possibility of missing or invalid data explicitly, Rust eliminates the risks and headaches often associated with .</p><p>While this approach might feel unfamiliar to developers coming from languages with , it quickly becomes a strength of the language. Embracing  (and ) in your code not only prevents bugs but also promotes a more clear, understandable way of thinking about data and operations in your applications.</p>","contentLength":3048,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust - Ownership Model","url":"https://dev.to/dedsecrattle/rust-ownership-model-1l6j","date":1739640889,"author":"Prabhat Kumar","guid":553,"unread":true,"content":"<p>Rust’s ownership model is one of its most powerful and defining features. It provides memory safety without needing a garbage collector, making Rust highly efficient and reliable. If you're coming from languages like C++, Java, or Python, understanding Rust’s ownership system might feel daunting at first. In this post, we'll break it down step by step.</p><p><strong>What is Ownership in Rust?</strong></p><p>Ownership is Rust’s unique way of managing memory. Instead of using garbage collection or manual memory management, Rust enforces strict ownership rules at compile time. These rules ensure memory safety and prevent data races in concurrent programs.</p><p>The three key ownership rules are:</p><ol><li><strong>Each value in Rust has a single owner.</strong></li><li><strong>When the owner goes out of scope, Rust automatically deallocates the value.</strong></li><li><strong>Ownership can be transferred (moved) or borrowed (immutably or mutably).</strong></li></ol><h2>\n  \n  \n  Moving, Copying, and Cloning\n</h2><p>When assigning a value from one variable to another, ownership is transferred. Consider this example:</p><div><pre><code></code></pre></div><p>Since  is allocated on the heap, Rust prevents double-free errors by invalidating  when ownership moves to .</p><p>Certain types implement the  trait, meaning they are duplicated instead of moved. Examples include:</p><div><pre><code></code></pre></div><p>Primitive types (integers, floats, booleans, etc.) implement , so they don’t follow move semantics.</p><p>If you need to duplicate heap-allocated data, use :</p><div><pre><code></code></pre></div><p>Cloning explicitly creates a separate copy in memory, avoiding move-related issues.</p><p>Rust allows borrowing instead of transferring ownership. Borrowing enables passing data without giving up ownership.</p><p>A reference () allows read-only access to data without taking ownership:</p><div><pre><code></code></pre></div><p>You can have multiple immutable borrows at the same time, but not if there’s a mutable borrow.</p><p>A mutable reference () allows modification but enforces exclusivity:</p><div><pre><code></code></pre></div><p>Rust ensures at compile time that you cannot have multiple mutable references or a mix of mutable and immutable references at the same time.</p><h2>\n  \n  \n  Lifetimes: Ensuring Valid References\n</h2><p>Rust’s  prevent dangling references. Consider this example:</p><div><pre><code></code></pre></div><p>The  lifetime annotation ensures that the returned reference is valid as long as both input references are valid.</p><h2>\n  \n  \n  Why Rust’s Ownership Model Matters\n</h2><ol><li>: No need for garbage collection, yet Rust prevents use-after-free and memory leaks.</li><li>: Enforces thread safety at compile time.</li><li>: Eliminates runtime overhead associated with memory management.</li><li>: Code is predictable and free from subtle memory bugs.</li></ol><p>Rust’s ownership model might take some getting used to, but once you grasp it, you gain the power to write efficient and safe code without worrying about memory leaks. By understanding moves, copies, borrowing, and lifetimes, you can write highly performant Rust applications while maintaining safety guarantees.</p><p>Are you currently learning Rust? Let me know what aspects of ownership you find the most challenging in the comments below!</p>","contentLength":2874,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Lil guy is trying his best","url":"https://www.reddit.com/r/artificial/comments/1iq6dyy/lil_guy_is_trying_his_best/","date":1739640466,"author":"/u/MetaKnowing","guid":292,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Transition from C++ to Rust","url":"https://www.reddit.com/r/rust/comments/1iq67vq/transition_from_c_to_rust/","date":1739640014,"author":"/u/Dvorakovsky","guid":281,"unread":true,"content":"<p>Guys, are here any people who were learning/coding in C++ and switched to Rust. How do you feel? I mean I could easily implement linked lists: singly, doubly in c++, but when I saw how it is implemented in Rust I'd say I got lost completely. I'm only learning rust... So yeah, I really like ownership model even tho it puts some difficulties into learning, but I think it's a benefit rather than a downside. Even tho compared to C++ syntax is a bit messy for me</p>","contentLength":461,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"No, your GenAI model isn't going to replace me","url":"https://marioarias.hashnode.dev/no-your-genai-model-isnt-going-to-replace-me","date":1739639200,"author":"/u/dh44t","guid":279,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iq5wq0/no_your_genai_model_isnt_going_to_replace_me/"},{"title":"Type safe Go money library beta2!","url":"https://www.reddit.com/r/golang/comments/1iq5stk/type_safe_go_money_library_beta2/","date":1739638928,"author":"/u/HawkSecure4957","guid":288,"unread":true,"content":"<p>Hello, after I released beta1, I received many constructive feedback! mainly lacking of locale support.</p><p>This update brings locale formatting support and an improved interface for better usability. With Fulus, you can perform monetary operations safely and type-soundly. Plus, you can format money for any locale supported by CLDR. You can even define custom money types tailored specifically to your application's needs! </p><p>I still need to battle test it against production projects, I have none at the moment. I am aiming next for performance benchmarking and more improvement, and parsing from string!</p><p>I am open for more feedback. Thank you! </p>","contentLength":639,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Golang Mastery Exercises","url":"https://www.reddit.com/r/golang/comments/1iq5k7w/golang_mastery_exercises/","date":1739638307,"author":"/u/Temporary-Buy-7562","guid":289,"unread":true,"content":"<p>I made a repository which has a prompt for you to write many exercises, if you complete this, and then drill the exercises, I would be sure you would reach mastery with the core of the language.</p><p>I initially wanted to make some exercises for drilling syntax since I use copilot and lsps a lot, but ended up with quite a damn comprehensive list of things you would want to do with the language, and I find this more useful than working on leetcode to really adopt the language.</p>","contentLength":474,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[D] Have any LLM papers predicted a token in the middle rather than the next token?","url":"https://www.reddit.com/r/MachineLearning/comments/1iq4f0r/d_have_any_llm_papers_predicted_a_token_in_the/","date":1739635189,"author":"/u/TheWittyScreenName","guid":516,"unread":true,"content":"<p>I’m working on a project (unrelated to NLP) where we use essentially the same architecture and training as GPT-3, but we’re more interested in finding a series of tokens to connect a starting and ending “word” than the next “word”. Since we’re drawing a lot from LLMs in our setup, I’m wondering if there’s been any research into how models perform when the loss function isn’t based on the next token, but instead predicting a masked token somewhere in the input sequence. </p><p>Eventually we would like to expand this (maybe through fine tuning) to predict a longer series of missing tokens than just one but this seems like a good place to start. </p><p>I couldn’t find much about alternate unsupervised training schemes in the literature but it seems like someone must have tried this already. Any suggestions, or reasons that this is a bad idea?</p>","contentLength":859,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust - Ownership Model","url":"https://dev.to/dedsecrattle/rust-ownership-model-2bak","date":1739631914,"author":"Prabhat Kumar","guid":552,"unread":true,"content":"<p>Rust’s ownership model is one of its most powerful and defining features. It provides memory safety without needing a garbage collector, making Rust highly efficient and reliable. If you're coming from languages like C++, Java, or Python, understanding Rust’s ownership system might feel daunting at first. In this post, we'll break it down step by step.</p><p><strong>What is Ownership in Rust?</strong></p><p>Ownership is Rust’s unique way of managing memory. Instead of using garbage collection or manual memory management, Rust enforces strict ownership rules at compile time. These rules ensure memory safety and prevent data races in concurrent programs.</p><p>The three key ownership rules are:</p><ol><li><strong>Each value in Rust has a single owner.</strong></li><li><strong>When the owner goes out of scope, Rust automatically deallocates the value.</strong></li><li><strong>Ownership can be transferred (moved) or borrowed (immutably or mutably).</strong></li></ol><h2>\n  \n  \n  Moving, Copying, and Cloning\n</h2><p>When assigning a value from one variable to another, ownership is transferred. Consider this example:</p><div><pre><code></code></pre></div><p>Since  is allocated on the heap, Rust prevents double-free errors by invalidating  when ownership moves to .</p><p>Certain types implement the  trait, meaning they are duplicated instead of moved. Examples include:</p><div><pre><code></code></pre></div><p>Primitive types (integers, floats, booleans, etc.) implement , so they don’t follow move semantics.</p><p>If you need to duplicate heap-allocated data, use :</p><div><pre><code></code></pre></div><p>Cloning explicitly creates a separate copy in memory, avoiding move-related issues.</p><p>Rust allows borrowing instead of transferring ownership. Borrowing enables passing data without giving up ownership.</p><p>A reference () allows read-only access to data without taking ownership:</p><div><pre><code></code></pre></div><p>You can have multiple immutable borrows at the same time, but not if there’s a mutable borrow.</p><p>A mutable reference () allows modification but enforces exclusivity:</p><div><pre><code></code></pre></div><p>Rust ensures at compile time that you cannot have multiple mutable references or a mix of mutable and immutable references at the same time.</p><h2>\n  \n  \n  Lifetimes: Ensuring Valid References\n</h2><p>Rust’s  prevent dangling references. Consider this example:</p><div><pre><code></code></pre></div><p>The  lifetime annotation ensures that the returned reference is valid as long as both input references are valid.</p><h2>\n  \n  \n  Why Rust’s Ownership Model Matters\n</h2><ol><li>: No need for garbage collection, yet Rust prevents use-after-free and memory leaks.</li><li>: Enforces thread safety at compile time.</li><li>: Eliminates runtime overhead associated with memory management.</li><li>: Code is predictable and free from subtle memory bugs.</li></ol><p>Rust’s ownership model might take some getting used to, but once you grasp it, you gain the power to write efficient and safe code without worrying about memory leaks. By understanding moves, copies, borrowing, and lifetimes, you can write highly performant Rust applications while maintaining safety guarantees.</p><p>Are you currently learning Rust? Let me know what aspects of ownership you find the most challenging in the comments below!</p>","contentLength":2874,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Larry Ellison wants to put all US data in one big AI system","url":"https://www.theregister.com/2025/02/12/larry_ellison_wants_all_data/","date":1739631593,"author":"/u/namanyayg","guid":602,"unread":true,"content":"<p>If governments want AI to improve services and security for their citizens, then they need to put all their information in one place – even citizens’ genomic data – according to Larry Ellison, the Oracle database tycoon.</p><p>Ellison shared his take on what governments need to do to succeed with AI during a <a href=\"https://www.youtube.com/watch?v=FG2AtiInwKM\" rel=\"nofollow\">discussion</a> with <a href=\"https://www.theregister.com/2023/08/10/ellison_become_major_contributor_to/\">his buddy</a> former UK prime minister Tony Blair at the World Governments Summit in Dubai today.</p><p>The world's fourth-most-richest man – a <a rel=\"nofollow\" target=\"_blank\" href=\"https://www.nytimes.com/interactive/2024/12/23/business/elon-musk-trump-family-friends-backers.html\">good friend</a> also of the world's richest man <a target=\"_blank\" href=\"https://www.theregister.com/2025/02/07/opinion_column_musk/\">Elon Musk</a> – insisted artificial intelligence is soon going to change everyone's lives \"across the board.\"</p><blockquote><p>I have to tell the AI model as much about my country as I can. We need to unify all the national data</p></blockquote><p>If governments want in, they’ll need to gather all their data – spatial information, economic data, electronic healthcare records including genomic data, and info about infrastructure. Whatever they’ve got, basically. And put it all in one place to be analyzed by algorithms. The American multi-billionaire used the United States as an example, if not a goal.</p><p>\"I have to tell [the] AI model as much about my country as I can,\" Ellison said. \"We need to unify all the national data, put it into a database where it's easily consumable by the AI model, and then ask whatever question you like,\" he said. \"That's the missing link.\"</p><p>He believes the payoff will include better healthcare, thanks to treatments tailored to individuals, and the ability for governments to lift food production by better predicting crop yields. Analyzing land so that farmers can be advised where to apply fertilizers or increase irrigation was another scenario Ellison floated.</p><p>\"As long as countries will put their data - all of it - in a single place we can use AI to help manage the care of all of the patients and the population at large,\" Ellison said, adding his belief that AI can handle other social services and eliminate fraud.</p><p>Of course, such a vast database system could also be the precursor to pervasive surveillance – an idea Ellison last year <a href=\"https://www.theregister.com/2024/09/16/oracle_ai_mass_surveillance_cloud/\">said</a> he feels is desirable and would like Oracle to help facilitate.</p><p>Constant real-time surveillance of populations, analyzed by Oracle-powered machine-learning products, would keep everyone \"on their best behavior,\" Ellison said at an Oracle financial analyst conference in September 2024. We're reminded of the <a target=\"_blank\" href=\"https://www.theregister.com/2019/06/26/nsa_spy_program_aclu/\">NSA</a>, <a target=\"_blank\" href=\"https://www.theregister.com/2013/06/07/prism_plan_for_nsa_surveillance_of_internet_companies/\">PRISM</a>, <a target=\"_blank\" href=\"https://www.theregister.com/2014/01/24/snowden_speaks_nsa_whistleblower_calls_for_global_privacy_standards/\">Snowden</a>.</p><p>Ellison is not just a techno-optimist. He’s also a top executive and shareholder who has made big AI investments as well as a database company to feed.</p><p>He therefore told the Dubai audience that Oracle, already a <a target=\"_blank\" href=\"https://www.theregister.com/2025/02/08/doge_us_goverment_tech_spending/\">big-time government and military contractor</a>, is ready to help nations realize his above-mentioned AI visions. Ie: Put all this data into one big expensive Oracle system to learn from and process.</p><p>\"Oracle is building a 2.2GW datacenter that costs between $50 and $100 billion dollars to build,\" Ellison said, noting it's sites like that where super-powered AI models will be trained. \"Because these models are so expensive, you won't build your own as a rule. There'll be a handful of these models.\"</p><p>And a handful of players that can train them. Oracle’s own facilities will likely be one. The super-corp has also joined another, the <a href=\"https://www.theregister.com/2025/01/22/openai_stargate_ai_datacenter_company\">Stargate project</a>, that plans to blow $500 billion on AI infrastructure in the US in the next four years. ®</p>","contentLength":3335,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/artificial/comments/1iq34im/larry_ellison_wants_to_put_all_us_data_in_one_big/"},{"title":"Alexandre Mutel a.k.a. xoofx is leaving Unity","url":"https://mastodon.social/@xoofx/113997304444307991","date":1739631212,"author":"/u/namanyayg","guid":275,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iq2zwv/alexandre_mutel_aka_xoofx_is_leaving_unity/"},{"title":"Don't \"optimize\" conditional moves in shaders with mix()+step()","url":"https://iquilezles.org/articles/gpuconditionals/","date":1739631147,"author":"/u/namanyayg","guid":274,"unread":true,"content":"\nIn this article I want to correct a popular misconception that's been making the rounds in computer graphics aficionado circles for a long time now. It has to do with conditionals when selecting between two results in the GPUs. Unfortunately there are a couple of educational websites out there that are spreading some misinformation, and it would be nice correcting that. I tried contacting the authors without success, so without further ado, here goes my attempt to fix things up a little:\nSo, say I have this code, which I actually published the other day:<div> snap45(  v )\n{\n     s = (v);\n     x = (v.x);\n     x&gt;?(s.x,):\n           x&gt;?s*():\n                      (,s.y);\n}</div>\nThe exact details of what it does don't matter for this discussion. All we care about is the two ternary operations deciding what's the final value this function should return. Indeed, depending on the value of the variable , the function will return one of three results, which are simple to compute. I could also have implemented this function with regular  statements, and all that I'm going to say in this article stays true.<p>\nNow, here's the problem - when seeing code like this, somebody somewhere will step up and invariably propose the following \"optimization\", which replaces what they believe (erroneously) are \"conditional branches\" in the code, by arithmetic operations. They will suggest something like this:</p><div> snap45(  v )\n{\n     s = (v);\n     x = (v.x);\n\n     w0 = (,x);\n     w1 = (,x)*(-w0);\n     w2 = -w0-w1;\n\n     res0 = (s.x,);\n     res1 = (s.x,s.y)*();\n     res2 = (,s.y);\n\n     w0*res0 + w1*res1 + w2*res2;\n}</div>\nThere are two things wrong with this practice. The first one shows an incorrect understanding of how the GPU works. In particular, the original shader code had no conditional branching in it. Selecting between a few registers with a ternary operator or with a plain  statement does not lead to conditional branching; all it involves is a conditional move (a.k.a. \"select\"), which is a simple instruction to route the correct bits to the destination register. You can think of it as a bitwise AND+NAND+OR on the source registers, which is a simple combinational circuit. I'll repeat it again - there is no branching, the instruction pointer isn't manipulated, there's no prediction involved, no pipe to flush, no instruction cache to invalidation, no nothing.<p>\nFor the record, of course GPUs can do real branching, and those are fine and fast and totally worth it when big chunks of code and computation are to be skipped given a condition. As with all things computing, always check the generated machine code to know what is happening exactly and when. But one thing you can safely assume without having to check any generated code - when moving simple values or computations like in my original example, you are guaranteed to not branch. This has been true for decades at this point, with GPUs. And while I'm not an expert in CPUs, I am pretty sure this is true for them as well.</p><p>\nThe second wrong thing with the supposedly optimized version is that it actually runs much slower than the original version. You can measure it in a variety of hardware. I can only assume that's because the </p> function is probably implemented with some sort of conditional move or subtract + bit propagation + AND.<div> step(  x,  y )\n{\n     x &lt; y ?  : ;\n}</div>\nEither way, using the step() \"optimization\" are either using the ternary operation anyways, which produces the  or  which they will use to mask in and out the different potential outputs with a series of arithmetic multiplications and additions. Which is wasteful, the values could have been conditionally moved directly, which is what the original shader code did.<p>\nBut don't take my word for it, let's look at the generated machine code for the original code I published:</p><div><div>\nGLSL<div> x&gt;?(s.x,):\n       x&gt;?s*():\n                  (,s.y);</div></div><div>\nAMD Compiler<div>     s0,      v3, , v1\n     v4, , v0\n     s1,   vcc, (v2), s0\n v3, 0, v3, vcc\n v0, v0, v4, vcc\n vcc, (v2), s1\n v1, v1, v3, vcc\n v0, 0, v0, vcc</div></div><div>\nMicrosoft Compiler<div>   r0.xy, l(, ), v0.xy\n   r0.zw, v0.xy, l(, )\n r0.xy, -r0.xyxx, r0.zwzz\n r0.xy, r0.xyxx\n  r1.xyzw, r0.xyxy, l4()\n   r2.xy, l(,), v0.xx  r0.z, l()\n r1.xyzw, r2.yyyy, r1.xyzw, r0.zyzy\n o0.xyzw, r2.xxxx, r0.xzxz, r1.xyzw</div></div></div>\nHere we can confirm that the GPU is not branching, as I explained. Instead, according to the AMD compiler, it's performing the required comparisons ( and  - cmp=compare, gt=greater than, ngt=not greated than), and then using the result to mask the results with the bitwise operations mentioned earlier ( - cnd=conditional).<p>\nThe Microsoft compiler has expressed the same idea/implementation in a different format, but you can still see the comparison (</p> - \"lt\"=less than) and the masking or conditional move ( - mov=move, c=conditionally).<p>\nThere are no jump/branch instructions in these listings.</p><p>\nSomething not related to the discussion but interesting, is that some of the </p> GLSL calls I had in my shader before the ternary operator we are discussing, didn't become GPU instructions but rather instruction modifiers, which is the reason you see them in the listing. This means you can think of abs() calls as being free.\nSo, if you ever see somebody proposing this<div> a = ( b, c, ( y, x ) );</div>\nas an optimization to\nthen please correct them for me.","contentLength":5296,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iq2z4j/dont_optimize_conditional_moves_in_shaders_with/"},{"title":"Altman: OpenAI not for sale, especially to competitor who is not able to beat us","url":"https://www.axios.com/2025/02/11/openai-altman-musk-offer","date":1739629077,"author":"/u/namanyayg","guid":472,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/artificial/comments/1iq29zz/altman_openai_not_for_sale_especially_to/"},{"title":"GitHub - yaitoo/xun: Xun is an HTTP web framework built on Go's built-in html/template and net/http package’s router (1.22).","url":"https://github.com/yaitoo/xun","date":1739628954,"author":"/u/imlangzi","guid":290,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1iq28it/github_yaitooxun_xun_is_an_http_web_framework/"},{"title":"What is Event Sourcing?","url":"https://newsletter.scalablethread.com/p/what-is-event-sourcing","date":1739628306,"author":"/u/scalablethread","guid":278,"unread":true,"content":"<p>Traditional data storage typically focuses on the current state of an entity. For example, in an e-commerce system, you might store the current state of a customer's order: items, quantities, shipping address, etc. Event sourcing takes a different approach. Instead of storing the current state directly, it stores the events that led to that state. Each event represents a fact that happened in the past. Think of it as a detailed log of transactions on your bank statement. These events are immutable and stored in an append-only event store. The core idea is that an application's state can be derived by replaying events in the order they occurred, just like you can get your current bank balance by replaying all the transactions from the beginning. This makes Event Sourcing particularly useful for applications that require a high degree of audibility and traceability.</p><p>Every change to the application state is captured as an event object in an Event Sourcing system. These events are then stored in an event store, a database optimized for handling event data. Here's a step-by-step breakdown of how Event Sourcing works:</p><ol></ol><p>Reconstructing the state from events involves reading all the events related to an entity from the event store and applying them in sequence to reconstruct the current state. It's like simulating all the changes that have occurred to construct the current state. For example, consider an e-commerce application where an order goes through various states like \"Created,\" \"Paid,\" and \"Shipped.\" To determine the current state of an order, you would:</p><ol><li><p>Retrieve all events related to the order from the event store.</p></li><li><p>Initialize an empty order object.</p></li><li><p>Apply each event to the order object in the order in which they were stored.</p></li></ol><p>By the end of this process, the order object will reflect the current state of the order.</p><p>As the number of events grows, replaying the entire event stream to reconstruct the state can become slow and inefficient. This is where snapshots come in. A snapshot is a saved state of an entity at a specific point in time. Instead of replaying all events from the beginning, the application can load the latest snapshot and then replay only the events that occurred after the snapshot was taken. </p><ul></ul><ul></ul><p><em>If you enjoyed this article, please hit the ❤️ like button.</em></p><p><em>If you think someone else will benefit from this, then please 🔁 share this post.</em></p>","contentLength":2380,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iq20v8/what_is_event_sourcing/"},{"title":"Built a cli tool for generating .gitignore files","url":"https://www.reddit.com/r/golang/comments/1iq1ivv/built_a_cli_tool_for_generating_gitignore_files/","date":1739626739,"author":"/u/SoaringSignificant","guid":286,"unread":true,"content":"<p>I built this mostly as an excuse to play around with Charmbracelet’s libraries like Bubble Tea and make a nice TUI, but it also solves the annoying problem of constantly looking up .gitignore templates. It’s a simple CLI tool that lets you grab templates straight from GitHub, TopTal, or even your own custom repository, all from the terminal. You can search through templates using a TUI interface, combine multiple ones like mixing Go and CLion, and even save your own locally so you don’t have to redo them every time. If you’re always setting up new projects and find yourself dealing with .gitignore files over and over, this just makes life a bit easier, hopefully. If that sounds useful, check it out <a href=\"https://github.com/jasonuc/gignr\">here</a> and give it a try. And if you’ve got ideas to make the TUI better or want to add something cool, feel free to open a PR. Always happy to get feedback or contributions!</p>","contentLength":890,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ED25519 Digital Signatures In Go","url":"https://www.reddit.com/r/golang/comments/1iq1i84/ed25519_digital_signatures_in_go/","date":1739626679,"author":"/u/mejaz-01","guid":482,"unread":true,"content":"   submitted by   <a href=\"https://www.reddit.com/user/mejaz-01\"> /u/mejaz-01 </a>","contentLength":31,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Will AI Lead to the Disintermediation of Knowledge?","url":"https://www.datasciencecentral.com/will-ai-lead-to-the-disintermediation-of-knowledge/","date":1739626129,"author":"Bill Schmarzo","guid":63,"unread":true,"content":"<p>Key Blog Points: For decades, organizations have operated under the central assumption that knowledge flows downward. Senior leaders, industry veterans, and domain experts have traditionally been the primary gatekeepers of critical information. Their insights, honed over years of experience, have been the cornerstone of strategic decision-making. Enter artificial intelligence (AI). Many folks are concerned that…&nbsp;<a href=\"https://www.datasciencecentral.com/will-ai-lead-to-the-disintermediation-of-knowledge/\" rel=\"bookmark\">Read More »</a></p>","contentLength":431,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: I Built a Reddit-style Bluesky client – still rough, but open to ideas","url":"https://threadsky.app/","date":1739625557,"author":"lakshikag","guid":453,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43058285"},{"title":"Chinese Vice Minister says China and the US must work together to control rogue AI: \"If not... I am afraid that the probability of the machine winning will be high.\"","url":"https://www.scmp.com/news/china/diplomacy/article/3298267/china-and-us-should-team-rein-risks-runaway-ai-former-diplomat-says","date":1739622429,"author":"/u/MetaKnowing","guid":293,"unread":true,"content":"<div datatype=\"p\" data-qa=\"Component-Component\">A former senior Chinese diplomat has called for China and the US to work together to head off the risks of rapid advances in <a target=\"_self\" href=\"https://www.scmp.com/topics/artificial-intelligence?module=inline&amp;pgtype=article\" data-qa=\"BaseLink-renderAnchor-StyledAnchor\"></a> (AI).</div><p datatype=\"p\" data-qa=\"Component-Component\">But the prospect of cooperation was bleak as geopolitical tensions rippled out through the technological landscape, former Chinese foreign vice-minister Fu Ying told a closed-door AI governing panel in Paris on Monday.</p><p datatype=\"p\" data-qa=\"Component-Component\">“Realistically, many are not optimistic about US-China AI collaboration, and the tech world is increasingly subject to geopolitical distractions,” Fu said.</p><p datatype=\"p\" data-qa=\"Component-Component\">“As long as China and the US can cooperate and work together, they can always find a way to control the machine. [Nevertheless], if the countries are incompatible with each other ... I am afraid that the probability of the machine winning will be high.”</p><div datatype=\"p\" data-qa=\"Component-Component\">The panel discussion is part of a two-day global <a target=\"_self\" href=\"https://www.scmp.com/news/world/europe/article/3297992/trumps-ai-ambition-and-chinas-deepseek-overshadow-major-ai-summit-paris?module=Europe&amp;pgtype=section?module=inline&amp;pgtype=article\" data-qa=\"BaseLink-renderAnchor-StyledAnchor\"></a> that started in Paris on Monday.</div><p datatype=\"p\" data-qa=\"Component-Component\">Other panel members included Yoshua Bengio, the Canadian computer scientist recognised as a pioneer in the field, and Alondra Nelson, a central AI policy adviser to former US president Joe Biden’s administration and the United Nations.</p>","contentLength":1084,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/artificial/comments/1iq0b4t/chinese_vice_minister_says_china_and_the_us_must/"},{"title":"Building the MagicMirror in Rust with iced GUI Library 🦀","url":"https://www.reddit.com/r/rust/comments/1ipzubj/building_the_magicmirror_in_rust_with_iced_gui/","date":1739620595,"author":"/u/amindiro","guid":283,"unread":true,"content":"<p>I recently embarked on a journey to build a custom MagicMirror using the Rust programming language, and I’d like to share my experiences. I wrost a blog post titled <a href=\"https://aminediro.com/posts/mirrors/#mirrors\">\"software you can love: miroir Ô mon beau miroir\"</a> this project was my attempt to create a stable, resource-efficient application for the Raspberry Pi 3A.</p><p>Here's what I loved about using Rust and the iced GUI library:</p><ul><li><p><strong>Elm Architecture + Rust is a match made in heaven:</strong> iced was perfect for my needs with its Model, View, and Update paradigms. It helped keep my state management concise and leverage Rust type system</p></li><li><p> Opting for this lightweight rendering library reduced the size of the binary significantly, ending with a 9MB binary.</p></li><li><p> Although troublesome at first, I used ‘cross’ to cross compile Rust for armv7.</p></li></ul><p>If anyone is keen, I’m thinking of open-sourcing this project and sharing it with the community. Insights on enhancing the project's functionality or any feedback would be much appreciated!</p><p>Feel free to reach out if you're interested in the technical nitty-gritty or my experience with Rust GUI libraries in general.</p>","contentLength":1098,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Ordered map","url":"https://dev.to/kirillscherba/ordered-map-13op","date":1739620303,"author":"Kirill Scherba","guid":576,"unread":true,"content":"<p>Omap is Golang package for working with thread safe ordered maps. The ordered map contains the golang map, list and mutex to execute Ordered Map functions.</p><p>The Ordered Map is a map that remembers the order of items. The map can be iterated over to retrieve the items in the order they were added.</p><h2>\n  \n  \n  Introduction to the omap Go Package\n</h2><p>The omap Go package is a lightweight and efficient library for working with ordered maps in Go. An ordered map is a data structure that combines the benefits of a map and a list, allowing you to store key-value pairs in a specific order.</p><p>Omap is a Go package that provides an implementation of an ordered map. It is designed to be fast, efficient, and easy to use. Omap is particularly useful when you need to store data in a specific order, such as when working with configuration files, caching, or data processing pipelines.</p><ul><li><p>Ordered: omap preserves the order in which key-value pairs are inserted, allowing you to iterate over the map in a specific order.</p></li><li><p>Fast lookups: omap uses a hash table to store key-value pairs, making lookups fast and efficient.</p></li><li><p>Efficient insertion and deletion: omap uses a linked list to store the order of key-value pairs, making insertion and deletion operations efficient.</p></li></ul><p>To use omap, you can install it using the following command:</p><div><pre><code>go get github.com/kirill-scherba/omap\n</code></pre></div><p>Here is an example of how to use omap:</p><div><pre><code></code></pre></div><p>This code creates a new omap, inserts some key-value pairs, and then iterates over the omap in order, printing out each key-value pair.</p><p>The omap Go package is a useful library for working with ordered maps in Go. Its fast lookups, efficient insertion and deletion, and ordered iteration make it a great choice for a variety of use cases. Whether you're working with configuration files, caching, or data processing pipelines, omap is definitely worth considering.</p><ul><li><p>Configuration files: Use omap to store configuration data in a specific order, making it easy to iterate over the configuration and apply settings in the correct order.</p></li><li><p>Caching: Use omap to store cached data in a specific order, making it easy to iterate over the cache and evict items in the correct order.</p></li><li><p>Data processing pipelines: Use omap to store data in a specific order, making it easy to iterate over the data and process it in the correct order.</p></li></ul>","contentLength":2292,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[P] Daily ArXiv filtering powered by LLM judge","url":"https://www.reddit.com/r/MachineLearning/comments/1ipz934/p_daily_arxiv_filtering_powered_by_llm_judge/","date":1739618056,"author":"/u/MadEyeXZ","guid":258,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🌍 UTF-8","url":"https://dev.to/wycliffealphus/utf-8-3edn","date":1739617808,"author":"Wycliffe A. Onyango","guid":575,"unread":true,"content":"<p>Have you ever opened a file or webpage and seen something like this?</p><p>That’s an encoding issue, and if you’ve been coding long enough, you’ve probably run into it at some point.</p><p>But why does this happen? Why do some characters get replaced with weird symbols? And most importantly—how do we fix it?</p><p>The answer is UTF-8, the encoding that powers almost everything today. Let's talk about what it is, why it matters, and how to use it properly in Go (Golang).</p><h3>\n  \n  \n  🔥 The Problem UTF-8 Solves\n</h3><p>Back in the early days of computing, ASCII was the standard way to represent text. It used 7 bits per character, meaning it could only represent 128 characters (A-Z, a-z, 0-9, and some symbols).</p><p>That was fine—until computers went global.</p><p>Suddenly, people needed to store and display languages like Chinese (汉字), Arabic (العربية), Hindi (हिन्दी), and more. ASCII just couldn’t handle it.</p><p>So different countries created their own encodings:</p><ul><li><p>ISO-8859-1 for Western Europe</p></li><li><p>Windows-1252 for Microsoft systems</p></li></ul><p>💀 The result? Encoding chaos. A file written in one system might be unreadable in another.</p><p>Enter , the hero of our story.</p><h3>\n  \n  \n  🏆 What Makes UTF-8 Special?\n</h3><p>UTF-8 was designed in 1992 by Ken Thompson and Rob Pike (yes, the same Rob Pike who helped create Go!). It solved the encoding mess by being:</p><p>✅ Backwards-compatible with ASCII\n✅ Compact for common characters (English stays at 1 byte per character)<p>\n✅ Capable of encoding every language and symbol</p>\n✅ Error-resistant (invalid bytes won’t accidentally form valid characters)</p><p>This is why UTF-8 is now used by 97% of websites and is the default encoding for most programming languages, including Go.</p><h3>\n  \n  \n  💻 UTF-8 in Action (With Go Examples)\n</h3><p>Since Go natively supports UTF-8, you don’t need to do anything special—it just works. But let’s dig into some examples to see it in action.</p><p><strong>1️⃣ Encoding a String as UTF-8 Bytes</strong></p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><ul><li><p>English characters (, ) are 1 byte each.</p></li><li><p>Chinese characters () are 3 bytes each.</p></li></ul><p>This variable-length encoding is why UTF-8 is so efficient!</p><p><strong>2️⃣ Decoding UTF-8 Bytes Back to a String</strong></p><div><pre><code></code></pre></div><p>💡 No extra libraries—Go just handles it. That’s one of the nice things about UTF-8 in Go.</p><p><strong>3️⃣ Handling UTF-8 in Web Applications</strong></p><p>If you're building a web app, always specify UTF-8 in your response headers:</p><div><pre><code></code></pre></div><p>💡 Without , some browsers might misinterpret the text and display garbage characters.</p><p><strong>4️⃣ Validating UTF-8 Data</strong></p><p>Not every byte sequence is valid UTF-8. You can check with :</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>✅ Great for validating user input before processing it!</p><p><strong>5️⃣ Counting Unicode Characters (Runes) in a String</strong></p><p>Go strings are byte sequences, not necessarily character sequences.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>❗ Why the difference? Because 世界 takes 3 bytes each, so len(text) == 13, but there are only 9 characters.</p><p><strong>6️⃣ Iterating Over Unicode Characters</strong></p><p>Since some characters take more than 1 byte, normal indexing won’t work. Use :</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>❗ Notice how 世界 starts at index 7, not 5, because it uses 3 bytes each.</p><h3>\n  \n  \n  🚀 Why UTF-8 is the Default Encoding\n</h3><p>Before UTF-8:\n❌ Confusing mess of different encodings<p>\n❌ Text corruption between systems</p>\n❌ Websites needed to support multiple charsets</p><p>After UTF-8:\n✅ One encoding for everything<p>\n✅ No more garbled text (mojibake)</p>\n✅ Supported everywhere—from databases to web APIs</p><p>If you’re dealing with text in Go (or any language), understanding UTF-8 is essential. It ensures your applications work worldwide without encoding issues.</p>","contentLength":3465,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Go Nullable with Generics v2.0.0 - now supports omitzero","url":"https://github.com/LukaGiorgadze/gonull","date":1739617221,"author":"/u/Money-Relative-1184","guid":487,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1ipz22f/go_nullable_with_generics_v200_now_supports/"},{"title":"async-arp: library for probing hosts and sending advanced ARP (Address Resolution Protocol) requests.","url":"https://www.reddit.com/r/rust/comments/1ipywbp/asyncarp_library_for_probing_hosts_and_sending/","date":1739616505,"author":"/u/arcycar","guid":280,"unread":true,"content":"<p>After a few months of exploring and working with Rust, I am happy to share my first small Rust crate, <a href=\"https://crates.io/crates/async-arp\"></a> and I’d love to hear your thoughts! 🚀</p><p>This library provides an  way to send and receive , making it useful for network discovery, debugging, and custom networking applications.</p><ul><li>🏎  Built on Tokio for non-blocking network operations</li><li>🔍  Easily detect active devices in a subnet</li><li>⚙️  Craft and send ARP packets dynamically</li></ul><p>You can find usage examples and API documentation here: 📖 <a href=\"https://docs.rs/async-arp/latest/async_arp/\"></a></p><p>Since this is my first crate, I’d really appreciate any feedback on:</p><ul><li>📌  – Is the interface intuitive and ergonomic?</li><li>🚀  – Does it fit well into async Rust workflows?</li><li>🔍  – Any improvements or best practices I may have missed?</li><li>🦀  – Suggestions to make it more \"Rustacean\"?</li></ul><p>If you have further ideas, issues, or want to contribute, check it out on GitHub:</p><p>Thanks for checking it out—let me know what you think! 🦀</p>","contentLength":921,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"what do you use golang for?","url":"https://www.reddit.com/r/golang/comments/1ipykyd/what_do_you_use_golang_for/","date":1739615068,"author":"/u/Notalabel_4566","guid":291,"unread":true,"content":"<p>Is there any other major use than web development?</p>","contentLength":50,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Lessons from David Lynch: A Software Developer's Perspective","url":"https://lackofimagination.org/2025/02/lessons-from-david-lynch-a-software-developers-perspective/","date":1739612430,"author":"/u/aijan1","guid":277,"unread":true,"content":"<p>David Lynch passed away in January 2025, shortly after being evacuated from his Los Angeles home due to the Southern California wildfires. He’s perhaps best known for the groundbreaking TV series <a href=\"https://en.wikipedia.org/wiki/Twin_Peaks\">Twin Peaks</a>, which inspired countless shows, including The X-Files, The Sopranos, and Lost.</p><p>Lynch was genuinely a good human being who cared deeply for his actors and crew. He discovered extraordinary talent like Naomi Watts, who had struggled to land a major role in a Hollywood movie after 10 years of auditioning. From the interviews he gave, it quickly becomes apparent that he respected people of all kinds and never put anyone down – even those who truly deserved it.</p><p>Lynch is famous for refusing to explain his movies. Although not a fan of his previous work, the great film critic Roger Ebert once wrote that <a href=\"https://en.wikipedia.org/wiki/Mulholland_Drive_(film)\">Mulholland Drive</a> remained compulsively watchable while refusing to yield to interpretation.</p><p>While Lynch offered very little in terms of what his movies meant, he was generous in sharing his views on creativity, work, and life in general. As a tribute to Lynch, I’d like to share my perspective on his life lessons from a software developer’s viewpoint.</p><blockquote><p>Ideas are like fish. If you want to catch little fish, you can stay in the shallow water. But if you want to catch the big fish, you’ve got to go deeper.</p></blockquote><p>We’ve all got hundreds or even thousands of ideas floating around in our brains. But the really big ones are few and far between. Once you catch a good one –because they’re so rare– write it down immediately, says Lynch. From there, ideas attract other ideas and start to grow from their initial seed state. The final job is to translate those ideas into a medium, whether it’s a film, a painting, or software.</p><blockquote><p>The idea is the whole thing. If you stay true to the idea, it tells you everything you need to know, really. You just keep working to make it look like that idea looked, feel like it felt, sound like it sounded, and be the way it was.</p></blockquote><p>Software development is part art, part engineering. We don’t build the same software over and over again – virtually all software is crafted by hand, sometimes with help from AI. If you ask two developers to create a non-trivial program, it’s very likely that the programs they produce will be different, even if the functionality is the same. Under the hood, the programming language, data structures, and overall architecture may be completely different. And on the surface, the user interfaces may look nothing alike.</p><p>It’s a good habit to listen to what users have to say, but they often can only describe their problems – they rarely come up with good ideas to solve them. And that’s OK. It’s our job to find the right ideas, implement them well, and solve tricky problems in a way we, and hopefully the users, will love.</p><blockquote><p>My friend Bushnell Keeler, who was really responsible for me wanting to be a painter, said you need four hours of uninterrupted time to get one hour of good painting in, and that is really true.</p></blockquote><p>Like other creative fields, writing code requires deep concentration. We need to hold complex structures in our minds while working through problems. Switching between coding and other tasks disrupts  – that magical state of mind where we lose track of time and produce code effortlessly. That’s why many developers hate meetings – they are toxic to our productivity.</p><blockquote><p>I believe you need technical knowledge. And also, it’s really, really great to learn by doing. So, you should make a film.</p></blockquote><p>Software development is one of those rare fields where a college degree isn’t required to succeed. Yes, we should all know the basics, but in my experience, new college graduates often lack the practical knowledge to be effective developers.</p><p>The real learning happens through hands-on experience: building real projects, debugging tricky problems, collaborating with teams, and maintaining code over time. It’s crucial to never stop learning, experimenting, and iterating on our craft.</p><blockquote><p>Happy accidents are real gifts, and they can open the door to a future that didn’t even exist.</p></blockquote><p>Tim Berners-Lee invented the web in 1989, while working at CERN, the European Organization for Nuclear Research. Originally conceived to meet the demand for information sharing between scientists around the world, the web went mainstream within just a few years.</p><p>Linus Torvalds created Git due to a licensing dispute over BitKeeper, the original version control system used for Linux development. The need for a new tool led to Git becoming the most widely used version control system today.</p><blockquote><p>I feel that a set should be like a happy family. Almost like Thanksgiving every day, happily going down the road together.</p></blockquote><p>Be kind to your teammates, don’t embarrass them. They may not be perfect, but accept them for who they are. The most important trait of an effective software development team is psychological safety –that is, team members feel safe to take risks and be vulnerable in front of each other, as corroborated by <a href=\"https://rework.withgoogle.com/en/guides/understanding-team-effectiveness\">Google’s research</a> on the subject.</p><p>It’s OK to make mistakes, as long as you learn from them. Knowing that your team has your back when things go south is a wonderful feeling.</p><blockquote><p>Most of Hollywood is about making money - and I love money, but I don’t make the films thinking about money.</p></blockquote><p>Just like Lynch prioritizes creativity over financial gain, some of the most impactful software projects started with an open source model, and they literally changed the world, such as Linux, PostgreSQL, and Node.js, just to name a few.</p><p>What makes these projects remarkable is that they didn’t emerge from corporate boardrooms – they were built by communities of passionate developers, collaborating across the world.</p><p>Money is just a means to an end. Unfortunately, many get this confused.</p><p>David, thank you for making the world a better place!</p>","contentLength":5845,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1ipy01t/lessons_from_david_lynch_a_software_developers/"},{"title":"Macro-Less, Highly Integrated OpenAPI Document Generation in Rust with Ohkami","url":"https://dev.to/kanarus/macro-less-highly-integrated-openapi-document-generation-in-rust-with-ohkami-9b2","date":1739609369,"author":"kanarus","guid":551,"unread":true,"content":"<p><em>This is a cross post from <a href=\"https://medium.com/@kanarus786/macro-less-highly-integrated-openapi-document-generation-in-rust-with-ohkami-912de388adc1\" rel=\"noopener noreferrer\">Medium</a>.</em></p><p>In Rust web dev, <a href=\"https://github.com/juhaku/utoipa\" rel=\"noopener noreferrer\">utoipa</a> is the most popular crate for generating OpenAPI document from server code. While it’s a great tool, it can be frustrating due to excessive macro use.</p><p>A new web framework Ohkami offers a <em><strong>macro-less, highly integrated</strong></em> way to generate OpenAPI document with its  feature.</p><p>Let’s take following code as an example. It’s the same sample from the “openapi” section of the README, but with openapi-related parts removed:</p><div><pre><code></code></pre></div><p>While this compiles and works as a pseudo user management server, activating  feature causes a compile error, telling that  and  don’t implement .</p><p>As indicated by this, Ohkami with  feature effectively handles type information and intelligently collects its endpoints’ metadata. It allows code like:</p><div><pre><code></code></pre></div><p>to assemble metadata into an OpenAPI document and output it to a file .</p><p>Then, how we implement ? Actually we can easily  by hand, or just  is available! In this case, derive is enough:</p><div><pre><code></code></pre></div><p>That’s it! Just adding these derives allows  to output following file:</p><div><pre><code></code></pre></div><p>Additionally, it’s easy to define the  schema as a component instead of duplicating inline schemas.\nIn derive, just add  helper attribute:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>And  attribute is available to set , , and override  and each response’s :</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Let’s take a look at how this document generation works!</p><p>First, the s are expanded as following:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>The organized DSL enables to easily impl manually.</p><p> trait links the struct to an item of type called .</p><h3>\n  \n  \n  2.  hooks of , , </h3><p>They're Ohkami’s core traits appeared in the handler bound:</p><div><pre><code></code></pre></div><p>When  feature is activated, they additionally have following methods:</p><div><pre><code></code></pre></div><p>Ohkami leverages these methods in  to generate consistent , reflecting the actual handler signature like <a href=\"https://github.com/ohkami-rs/ohkami/blob/6e243ac823e21f286aca2660f9d38f7bde381c5a/ohkami/src/fang/handler/into_handler.rs#L328-L335\" rel=\"noopener noreferrer\">this</a>.</p><p>Moreover, Ohkami properly propagates schema information in common cases like <a href=\"https://github.com/ohkami-rs/ohkami/blob/6e243ac823e21f286aca2660f9d38f7bde381c5a/ohkami/src/response/into_response.rs#L114-L128\" rel=\"noopener noreferrer\">this</a>, allowing users to focus only on the types and schemas of their app.</p><h3>\n  \n  \n  3.  metadata of Router\n</h3><p>In Ohkami, what’s called  has  property that stores all the routes belonging to an Ohkami instance. This is returned alongside  from  step, and is used to assemble metadata of all endpoints.</p><p>What  itself does is just to serialize an item of type <code>openapi::document::Document</code> and write it to a file.</p><p>The <code>openapi::document::Document</code> item is created by  of , summarized as follows:</p><div><pre><code></code></pre></div><p>That’s how Ohkami generates OpenAPI document!</p><h2>\n  \n  \n  Appendix: Cloudflare Workers\n</h2><p>There is, however, a problem in , Cloudflare Workers: where Ohkami is loaded to Miniflare or Cloudflare Workers as WASM, so it can only generate OpenAPI document as data and cannot write it to the user’s local file system.</p><div><pre><code></code></pre></div><p>generates OpenAPI document!</p><p>Thank you for reading. If you’re interested in Ohkami, check out the <a href=\"https://github.com/ohkami-rs/ohkami\" rel=\"noopener noreferrer\">GitHub repo</a> and start coding!</p>","contentLength":2709,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[D] What's the most promising successor to the Transformer?","url":"https://www.reddit.com/r/MachineLearning/comments/1ipvau4/d_whats_the_most_promising_successor_to_the/","date":1739600221,"author":"/u/jsonathan","guid":259,"unread":true,"content":"<p>All I know about is MAMBA, which looks promising from an efficiency perspective (inference is linear instead of quadratic), but AFAIK nobody's trained a big model yet. There's also <a href=\"https://arxiv.org/pdf/2405.04517\">xLSTM</a> and <a href=\"https://arxiv.org/pdf/2405.13956\">Aaren</a>.</p><p>What do y'all think is the most promising alternative architecture to the transformer?</p>","contentLength":283,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Concurrency vs Parallelism | Golang | Which is better and Why?","url":"https://dev.to/gargkunal/concurrency-vs-parallelism-golang-which-is-better-and-why-m5j","date":1739597904,"author":"Kunal Garg","guid":574,"unread":true,"content":"<p>In this video, I’ll dive deep into Concurrency vs Parallelism in Golang, explaining the key differences, when to use each, and which one is better for different scenarios. I'll cover various ways to implement concurrency in Golang, with practical code examples and hands-on demonstrations. Whether you're new to Go or looking to optimize your programs, this video will give you a solid understanding of how to leverage goroutines, channels, and worker pools effectively.</p><p>🔹 What is Concurrency?\n🔹 What is Parallelism?<p>\n🔹 Key Differences &amp; Use Cases</p>\n🔹 Writing Concurrent Code in Golang<p>\n🔹 Live Code Examples &amp; Best Practices</p></p>","contentLength":636,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Kafka Delay Queue: When Messages Need a Nap Before They Work","url":"https://beyondthesyntax.substack.com/p/kafka-delay-queue-when-messages-need","date":1739596108,"author":"/u/Sushant098123","guid":276,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1ipu9n3/kafka_delay_queue_when_messages_need_a_nap_before/"},{"title":"Webassembly and go 2025","url":"https://www.reddit.com/r/golang/comments/1ipu4wd/webassembly_and_go_2025/","date":1739595637,"author":"/u/KosekiBoto","guid":287,"unread":true,"content":"<div><p>so I found <a href=\"https://www.youtube.com/watch?v=HShIpUgCPp4\">this video </a>and was thinking about doing something similar for my game as a means to implement modding, however I also stumbled upon a 3 y/o post when looking into it essentially stating that it's a bad idea and I wasn't able to really find anything on the state of go wasm, so can someone please enlighten me as to the current state of WASM and Go, thank you</p></div>   submitted by   <a href=\"https://www.reddit.com/user/KosekiBoto\"> /u/KosekiBoto </a>","contentLength":402,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Implement Redis Caching in Golang for Beginners: A Step-by-Step Guide(Windows Edition)","url":"https://dev.to/arijit_das_24c46c6f02b06b/how-to-implement-redis-caching-in-golang-for-beginners-a-step-by-step-guidewindows-edition-1g1a","date":1739592944,"author":"Arijit das","guid":573,"unread":true,"content":"<p>In this post, I'll walk you through <strong>how to set up and use Redis caching</strong> in a Golang project. This setup helps in reducing  and improving  by caching frequently requested data.  </p><h2>\n  \n  \n  🔹 <strong>Why Use Redis for Caching?</strong></h2><p>✅ Reduces database load<p>\n✅ Supports expiration &amp; invalidation  </p></p><h2>\n  \n  \n  📌 <strong>Step 1: Install Redis Package</strong></h2><p>We use the  package to interact with Redis. Install it using:</p><div><pre><code>go get github.com/redis/go-redis/v9\n</code></pre></div><h2>\n  \n  \n  📌 <strong>Step 2: Initialize Redis Client</strong></h2><p>Create a file  and add the following:</p><div><pre><code></code></pre></div><p>🔹 <strong>If using a local Redis instance</strong>, set  and remove .<strong>For cloud Redis providers (like Aiven, AWS, etc.),</strong> use the TLS setup.  </p><h2>\n  \n  \n  📌 <strong>Step 3: Implement Caching Functions</strong></h2><p>Add the following caching functions to manage data in Redis:</p><div><pre><code></code></pre></div><p>🔹  → Checks if the key exists, retrieves &amp; unmarshals data. → Stores JSON-encoded data with an expiration time. → Deletes a cache entry (useful when data updates).  </p><h2>\n  \n  \n  📌 <strong>Step 4: Use Redis Cache in Database Queries</strong></h2><p>Modify your database query functions to  before querying the database:</p><div><pre><code></code></pre></div><p>🔹  using ., query the database. for future use with .  </p><h2>\n  \n  \n  📌 <strong>Step 5: Invalidate Cache When Data Changes</strong></h2><p>Whenever new categories are added, remove the outdated cache:</p><div><pre><code></code></pre></div><p>🔹 Use this <strong>after adding/updating/deleting data</strong> to keep cache fresh.  </p><p>If you want to test Redis caching locally on , follow these steps:</p><h3>\n  \n  \n  ✅ <strong>Step 1: Install &amp; Run Redis Locally</strong></h3><ol><li><p><strong>Download Redis for Windows:</strong></p><ul><li>  (Redis is not natively supported on Windows)</li><li>Install and run the Redis server.</li></ul></li><li><p> or a , start it using:</p></li></ol><ol><li><strong>Check if Redis is Running:</strong>\nOpen  and run:\n</li></ol><p>If Redis is running, it should return:</p><h3>\n  \n  \n  ✅ <strong>Step 2: Set &amp; Get Keys in Redis (Local Testing)</strong></h3><p>To manually check your cache for the key , use the following commands in :</p><ol><li><strong>Check if  exists:</strong></li></ol><p>If it returns , the key exists. If , it's missing.</p><p>This should return the cached JSON data.</p>","contentLength":1852,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Bringing Nest.js to Rust: Meet Toni.rs, the Framework You’ve Been Waiting For! 🚀","url":"https://www.reddit.com/r/rust/comments/1iprsmo/bringing_nestjs_to_rust_meet_tonirs_the_framework/","date":1739587338,"author":"/u/Mysterious-Rust","guid":284,"unread":true,"content":"<p>As a Rust developer coming from TypeScript, I’ve been missing a Nest.js-like framework — its modularity, dependency injection, and CLI superpowers. But since the Rust ecosystem doesn’t have a direct counterpart (yet!), I decided to build one myself! 🛠️</p><p>Introducing… <a href=\"https://crates.io/crates/toni\">Toni.rs</a> — a Rust framework inspired by the Nest.js architecture, designed to bring the same developer joy to our favorite language. And it’s live in beta! 🎉</p><p>Here’s what makes this project interesting:</p><p>Scalable maintainability 🧩:</p><p>A modular architecture keeps your business logic decoupled and organized. Say goodbye to spaghetti code — each module lives in its own context, clean and focused.</p><p>Need a complete CRUD setup? Just run a single CLI command. And I have lots of ideas for CLI ease. Who needs copy and paste?</p><p>Automatic Dependency Injection 🤖:</p><p>Stop wasting time wiring dependencies. Declare your providers, add them to your structure, and let the framework magically inject them. Less boilerplate, more coding.</p><p>Leave your thoughts below — suggestions, questions, or even just enthusiasm! 🚀 </p>","contentLength":1089,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How I Became A Machine Learning Engineer (No CS Degree, No Bootcamp)","url":"https://towardsdatascience.com/how-i-became-a-machine-learning-engineer-no-cs-degree-no-bootcamp/","date":1739586781,"author":"Egor Howell","guid":10,"unread":true,"content":"<p>Machine learning and <a href=\"https://towardsdatascience.com/tag/ai/\" title=\"AI\">AI</a> are among the most popular topics nowadays, especially within the tech space. I am fortunate enough to work and develop with these technologies every day as a machine learning engineer!</p><p>In this article, I will walk you through my journey to becoming a machine learning engineer, shedding some light and advice on how you can become one yourself!</p><p>In one of my previous articles, I extensively wrote about my journey from school to securing my first <a href=\"https://towardsdatascience.com/tag/data-science/\" title=\"Data Science\">Data Science</a> job. I recommend you <a href=\"https://medium.com/towards-data-science/how-i-became-a-data-scientist-no-cs-degree-no-bootcamp-82c321904986\">check out that article</a>, but I will summarise the key timeline here.</p><p>Pretty much everyone in my family studied some sort of STEM subject. My great-grandad was an engineer, both my grandparents studied physics, and my mum is a maths teacher.</p><p><em>So, my path was always paved for me.</em></p><p>I chose to study physics at university after watching The Big Bang Theory at age 12; it’s fair to say everyone was very proud!</p><p>At school, I wasn’t dumb by any means. I was actually relatively bright, but I didn’t fully apply myself. I got decent grades, but definitely not what I was fully capable of.</p><p>I was very arrogant and thought I would do well with zero work.</p><p>I applied to top universities like Oxford and Imperial College, but given my work ethic, I was delusional thinking I had a chance. On results day, I ended up in clearing as I missed my offers. This was probably one of the saddest days of my life.</p><p>Clearing in the UK is where universities offer places to students on certain courses where they have space. It’s mainly for students who don’t have a university offer.</p><p>I was lucky enough to be offered a chance to study physics at the University of Surrey, and I went on to earn a first-class master’s degree in physics!</p><p>There is genuinely no substitute for hard work. It is a cringy cliche, but it is true!</p><p>My original plan was to do a PhD and be a full-time researcher or professor, but during my degree, I did a research year, and I just felt a career in research was not for me. Everything moved so slowly, and it didn’t seem there was much opportunity in the space.</p><p>During this time, DeepMind released their<a href=\"https://www.youtube.com/watch?v=WXuK6gekU1Y&amp;t=1539s\"></a>documentary on YouTube, which popped up on my home feed.</p><p>From the video, I started to understand how AI worked and learn about neural networks, reinforcement learning, and deep learning. To be honest, to this day I am still not an expert in these areas.</p><p>Naturally, I dug deeper and found that a data scientist uses AI and machine learning algorithms to solve problems. I immediately wanted in and started applying for data science graduate roles.</p><p>I spent countless hours coding, taking courses, and working on projects. I applied to and eventually landed my first data science graduate scheme in September 2021.</p><p><em>You can hear more about my journey from a <a href=\"https://tobeadatascientist.substack.com/p/overcoming-rejection-lessons-from-egor-howell\">podcast</a>.</em></p><p>I started my career in an insurance company, where I built various supervised learning models, mainly using gradient boosted tree packages like CatBoost, XGBoost, and<a href=\"https://medium.com/towards-data-science/breaking-down-generalized-linear-models-d9212526e51d?sk=fda0298cebcb8e9e0c20cb6af8ed4f06\"> generalised linear models (GLMs)</a>.</p><p>I built models to predict:</p><ul><li> — Did someone fraudulently make a claim to profit.</li><li>— What’s the premium we should give someone.</li><li>— How many claims will someone have.</li><li> — What’s the average claim value someone will have.</li></ul><p>I made around six models spanning the regression and classification space. I learned so much here, especially in statistics, as I worked very closely with Actuaries, so my maths knowledge was excellent.</p><p>However, due to the company’s structure and setup, it was difficult for my models to advance past the PoC stage, so I felt I lacked the “tech” side of my toolkit and understanding of how companies use machine learning in production.</p><p>After a year, my previous employer reached out to me asking if I wanted to apply to a junior data scientist role that specialises in<a href=\"https://medium.com/@egorhowell/list/time-series-00bbfb9f5359\"> time series forecasting</a> and<a href=\"https://medium.com/@egorhowell/list/optimisation-algorithms-069bf9c6c8d5\"> optimisation</a> problems. I really liked the company, and after a few interviews, I was offered the job!</p><p>I worked at this company for about 2.5 years, where I became an expert in forecasting and combinatorial optimisation problems.</p><p>I developed many algorithms and deployed my models to production through AWS using software engineering best practices, such as unit testing, lower environment, shadow system, CI/CD pipelines, and much more.</p><p><em>Fair to say I learned a lot.&nbsp;</em></p><p>I worked very closely with software engineers, so I picked up a lot of engineering knowledge and continued self-studying machine learning and statistics on the side.</p><p>Over time, I realised the actual value of data science is using it to make live decisions. There is a good quote by<a href=\"https://www.linkedin.com/posts/pau-labarta-bajo-4432074b_machinelearning-mlops-realworldml-activity-7195694289178214400-gZyw\"> Pau Labarta Bajo</a></p><p>ML models inside Jupyter notebooks have a business value of $0</p><p>There is no point in building a really complex and sophisticated model if it will not produce results. Seeking out that extra 0.1% accuracy by staking multiple models is often not worth it.</p><p>You are better off building something simple that you can deploy, and that will bring real financial benefit to the company.</p><p>With this in mind, I started thinking about the future of data science. In my head, there are two avenues:</p><ul><li> -&gt; You work primarily to gain insight into what the business should be doing and what it should be looking into to boost its performance.</li><li> -&gt; You ship solutions (models, decision algorithms, etc.) that bring business value.</li></ul><p>I feel the data scientist who analyses and builds PoC models will become extinct in the next few years because, as we said above, they don’t provide tangible value to a business.</p><p>That’s not to say they are entirely useless; you have to think of it from the business perspective of their return on investment. Ideally, the value you bring in should be more than your salary.</p><p>You want to say that you did “X that produced Y”, which the above two avenues allow you to do.</p><p>The engineering side was the most interesting and enjoyable for me. I genuinely enjoy coding and building stuff that benefits people, and that they can use, so naturally, that’s where I gravitated towards.</p><p>To move to the ML engineering side, I asked my line manager if I could deploy the algorithms and ML models I was building myself. I would get help from software engineers, but I would write all the production code, do my own system design, and set up the deployment process independently.</p><p><em>And that’s exactly what I did.</em></p><p>Coincidentally, my current employer contacted me around this time and asked if I wanted to apply for a machine learning engineer role that specialises in general ML and optimisation at their company!</p><p>Call it luck, but clearly, the universe was telling me something. After several interview rounds, I was offered the role, and I am now a fully fledged machine learning engineer!</p><p>Fortunately, a role kind of “fell to me,” but I created my own luck through up-skilling and documenting my learning. That is why I always tell people to show their work — you don’t know what may come from it.</p><p>I want to share the main bits of advice that helped me transition from a machine learning engineer to a data scientist.</p><ul><li> — A machine learning engineer is  an entry-level position in my opinion. You need to be well-versed in data science, machine learning, software engineering, etc. You don’t need to be an expert in all of them, but have good fundamentals across the board. That’s why I recommend having a couple of years of experience as either a software engineer or data scientist and self-study other areas.</li><li> — If you are from data science, you must learn to write good, well-tested production code. You must know things like typing, linting, unit tests, formatting, mocking and CI/CD. It’s not too difficult, but it just requires some practice. I recommend asking your current company to work with software engineers to gain this knowledge, it worked for me!</li><li> — Most companies nowadays deploy many of their architecture and systems on the cloud, and machine learning models are no exception. So, it’s best to get practice with these tools and understand how they enable models to go live. I learned most of this on the job, to be honest, but there are courses you can take.</li><li> — I am sure most of you know this already, but every tech professional should be proficient in the command line. You will use it extensively when deploying and writing production code. I have a basic guide you can checkout<a href=\"https://medium.com/towards-data-science/an-introduction-to-the-shell-676ee5b899df?sk=0c6e101165b4314b98ab39d11525366c\"> here</a>.</li><li><strong>Data Structures &amp; Algorithms </strong>— Understanding the fundamental algorithms in computer science are very useful for MLE roles. Mainly because you will likely be asked about it in interviews. It’s not too hard to learn compared to machine learning; it just takes time. Any course will do the trick.</li><li> — Again, most tech professionals should know Git, but as an MLE, it is essential. How to squash commits, do code reviews, and write outstanding pull requests are musts.</li><li> — Many MLE roles I saw required you to have some specialisation in a particular area. I specialise in time series forecasting, optimisation, and general ML based on my previous experience. This helps you stand out in the market, and most companies are looking for specialists nowadays.</li></ul><p>The main theme here is that I basically up-skilled my software engineering abilities. This makes sense as I already had all the math, stats, and machine learning knowledge from being a data scientist.</p><p>If I were a software engineer, the transition would likely be the reverse. This is why securing a machine learning engineer role can be quite challenging, as it requires proficiency across a wide range of skills.</p><h3><strong>Summary &amp; Further Thoughts</strong></h3><p>I have a free newsletter, <a href=\"https://dishingthedata.substack.com/\"></a>, where I share weekly tips and advice as a practising data scientist. Plus, when you subscribe, you will get my and<strong> short PDF version of my AI roadmap</strong>!</p>","contentLength":9683,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Refactor and cleaup yacc: Making sense of legacy code","url":"https://dev.to/mbver/refactor-and-clean-up-goyacc-making-sense-of-legacy-code-1pm0","date":1739585088,"author":"mbver","guid":572,"unread":true,"content":"<p>, a widely used LALR(1) parser generator, is efficient but burdened by archaic, unreadable code from the 1970s. Its Go adaptation, , inherits these issues despite the modern language.</p><p>While exploring compilers, I found  to be a gold mine of insights, though buried under outdated practices. Following Allan Holub’s , I dissected its code—clarifying, simplifying, and refactoring convoluted sections. I then tested the revised version in a real-world scenario to ensure it retained its original functionality. The full code is published on <a href=\"https://github.com/mbver/yacc\" rel=\"noopener noreferrer\">github</a>.</p><p>I aimed to explore real-world open-source code, bridge ideals with reality, and stay sane as a reader. By refining and clarifying it, I made learning smoother and reuse easier.</p><p>The first issue is poor naming—cryptic, vague, or misleading names. Here’s how naming was improved.</p><div><pre><code>original | cleanup          | intent\n--------------------------------------------------------------------------------------------------\ncpfir    | computeFirstsets | compute the first sets for non-terminal symbols\ncpemp    | computeEmpty     | compute compute table to check if a non-terminal symbol is nullable\ncpres    | computeYields    | compute compute the production yields for non-terminal symbols\ncurres   | prds             | the productions having the same non-terminal symbol as LHS\nwSet     | wItem            | type of a working item generated during closure\nwSets    | wSet             | store working items generated during closure\nstatemem | kernls           | store kernel items\nmstate   | statechain       | chain a state's previous state to track where it cames from\npstate   | kernlp           | pointer to a kernel item\nputitem  | addKernItem      | add a kernel item\nwritem   | item.string()    | get the string representation of a kernel item\napack    | packGotosRow     | compress newly goto row after closing state, not action as \"a\" implies\nprectfn  | handleShiftReduceConflict | handle shift-reduce conflict of a state during processing closed states\ngo2out   | packGotosByCol   | compress goto table by column\ngo2gen   | computeGotoCol   | compute the goto column for a non-terminal symbol\ncallopt  | storeShiftsAndGotos | store shift-row for a state or goto column for a non-terminal symbol in action-store\ngin      | storeGotoCol     | store a column of compressed goto table for a terminal symbol into action-store\nstin     | storeShifts      | store shifts of a row in action table for a state into action-store\nsetbit   | lkset.set        | set a bit ON\nbitset&nbsp;  | lkset.check      | check if a bit is ON (mix up with setbit easily)\n\n</code></pre></div><p>The second issue is cramming everything into one place, burying core logic (closure and state generation) under the bulky input parsing.  Refactoring separates it to files by functionality, improving clarity and focus.</p><p>The third issue is poor organization. A key component, the lookahead set, should have its own type with all related methods grouped together, not lying elsewhere. This improves maintainability and makes adding methods easier. Similarly, the kernel item should define its own string representation method. These structs also include a Clone method for copying instances.</p><p>The fourth issue is convolution. The  variable determines whether closure is  or  for state generation and  for processing closed states. However, it pops up in unexpected places like kernel item addition, state generation, and packing gotos. Furthermore, it creates twists and turns in the  logic, making it harder to follow.</p><p>To resolve this, I split  into  for  and closure0 for . While slightly redundant, this separation prevents their logic from getting entangled, making the flow easier to follow. With this change, the confusing  is completely eliminated.</p><p>Similarly,  determines whether we're handling an  but is tangled with  in closed state processing. By explicitly storing and processing , the confusion caused by  is eliminated.</p><p>The fifth issue is redundant complications. An example is  -production rules with the same . The code extracts only  to construct the  while calling it  in kernel item. By consistently using full production rules, we remove this friction. It helps to eliminate further redundancies like keeping production number in kernel item for comparison and tricky code to print the dot for a kernel item. Here is the code with comments highlighting the problems.</p><div><pre><code></code></pre></div><p>Another example is the redundant outer loop of .</p><div><pre><code></code></pre></div><p>Another redundant outer loop is in closure's work item processing.</p><div><pre><code></code></pre></div><p>The sixth issue is that several lines can be made more readable by adopting a clearer style. Let's review some snippets.</p><div><pre><code></code></pre></div><p>Thanks for reading to the end. Hope this helps on your journey.</p>","contentLength":4670,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Introducing Impressions at Netflix","url":"https://netflixtechblog.com/introducing-impressions-at-netflix-e2b67c88c9fb?source=rss----2615bd06b42e---4","date":1739582000,"author":"Netflix Technology Blog","guid":31,"unread":true,"content":"<h4>Part 1: Creating the Source of Truth for Impressions</h4><p>Imagine scrolling through Netflix, where each movie poster or promotional banner competes for your attention. Every image you hover over isn’t just a visual placeholder; it’s a critical data point that fuels our sophisticated personalization engine. At Netflix, we call these images ‘impressions,’ and they play a pivotal role in transforming your interaction from simple browsing into an immersive binge-watching experience, all tailored to your unique&nbsp;tastes.</p><p>Capturing these moments and turning them into a personalized journey is no simple feat. It requires a state-of-the-art system that can track and process these impressions while maintaining a detailed history of each profile’s exposure. This nuanced integration of data and technology empowers us to offer bespoke content recommendations.</p><p>In this multi-part blog series, we take you behind the scenes of our system that processes billions of impressions daily. We will explore the challenges we encounter and unveil how we are building a resilient solution that transforms these client-side impressions into a personalized content discovery experience for every Netflix&nbsp;viewer.</p><h3>Why do we need impression history?</h3><p>To tailor recommendations more effectively, it’s crucial to track what content a user has already encountered. Having impression history helps us achieve this by allowing us to identify content that has been displayed on the homepage but not engaged with, helping us deliver fresh, engaging recommendations.</p><p>By maintaining a history of impressions, we can implement frequency capping to prevent over-exposure to the same content. This ensures users aren’t repeatedly shown identical options, keeping the viewing experience vibrant and reducing the risk of frustration or disengagement.</p><h4>Highlighting New&nbsp;Releases</h4><p>For new content, impression history helps us monitor initial user interactions and adjust our merchandising efforts accordingly. We can experiment with different content placements or promotional strategies to boost visibility and engagement.</p><p>Additionally, impression history offers insightful information for addressing a number of platform-related analytics queries. Analyzing impression history, for example, might help determine how well a specific row on the home page is functioning or assess the effectiveness of a merchandising strategy.</p><p>The first pivotal step in managing impressions begins with the creation of a Source-of-Truth (SOT) dataset. This foundational dataset is essential, as it supports various downstream workflows and enables a multitude of use&nbsp;cases.</p><h4>Collecting Raw Impression Events</h4><p>As Netflix members explore our platform, their interactions with the user interface spark a vast array of raw events. These events are promptly relayed from the client side to our servers, entering a centralized event processing queue. This queue ensures we are consistently capturing raw events from our global user&nbsp;base.</p><p>After raw events are collected into a centralized queue, a custom event extractor processes this data to identify and extract all impression events. These extracted events are then routed to an Apache Kafka topic for immediate processing needs and simultaneously stored in an Apache Iceberg table for long-term retention and historical analysis. This dual-path approach leverages Kafka’s capability for low-latency streaming and Iceberg’s efficient management of large-scale, immutable datasets, ensuring both real-time responsiveness and comprehensive historical data availability.</p><h4>Filtering &amp; Enriching Raw Impressions</h4><p>Once the raw impression events are queued, a stateless Apache Flink job takes charge, meticulously processing this data. It filters out any invalid entries and enriches the valid ones with additional metadata, such as show or movie title details, and the specific page and row location where each impression was presented to users. This refined output is then structured using an Avro schema, establishing a definitive source of truth for Netflix’s impression data. The enriched data is seamlessly accessible for both real-time applications via Kafka and historical analysis through storage in an Apache Iceberg table. This dual availability ensures immediate processing capabilities alongside comprehensive long-term data retention.</p><h4>Ensuring High Quality Impressions</h4><p>Maintaining the highest quality of impressions is a top priority. We accomplish this by gathering detailed column-level metrics that offer insights into the state and quality of each impression. These metrics include everything from validating identifiers to checking that essential columns are properly filled. The data collected feeds into a comprehensive quality dashboard and supports a tiered threshold-based alerting system. These alerts promptly notify us of any potential issues, enabling us to swiftly address regressions. Additionally, while enriching the data, we ensure that all columns are in agreement with each other, offering in-place corrections wherever possible to deliver accurate&nbsp;data.</p><p>We handle a staggering volume of 1 to 1.5 million impression events globally every second, with each event approximately 1.2KB in size. To efficiently process this massive influx in real-time, we employ Apache Flink for its low-latency stream processing capabilities, which seamlessly integrates both batch and stream processing to facilitate efficient backfilling of historical data and ensure consistency across real-time and historical analyses. Our Flink configuration includes 8 task managers per region, each equipped with 8 CPU cores and 32GB of memory, operating at a parallelism of 48, allowing us to handle the necessary scale and speed for seamless performance delivery. The Flink job’s sink is equipped with a data mesh connector, as detailed in our <a href=\"https://netflixtechblog.com/data-mesh-a-data-movement-and-processing-platform-netflix-1288bcab2873\">Data Mesh platform</a> which has two outputs: Kafka and Iceberg. This setup allows for efficient streaming of real-time data through Kafka and the preservation of historical data in Iceberg, providing a comprehensive and flexible data processing and storage solution.</p><p>We utilize the ‘island model’ for deploying our Flink jobs, where all dependencies for a given application reside within a single region. This approach ensures high availability by isolating regions, so if one becomes degraded, others remain unaffected, allowing traffic to be shifted between regions to maintain service continuity. Thus, all data in one region is processed by the Flink job deployed within that&nbsp;region.</p><h4>Addressing the Challenge of Unschematized Events</h4><p>Allowing raw events to land on our centralized processing queue unschematized offers significant flexibility, but it also introduces challenges. Without a defined schema, it can be difficult to determine whether missing data was intentional or due to a logging error. We are investigating solutions to introduce schema management that maintains flexibility while providing clarity.</p><h4>Automating Performance Tuning with Autoscalers</h4><p>Tuning the performance of our Apache Flink jobs is currently a manual process. The next step is to integrate with autoscalers, which can dynamically adjust resources based on workload demands. This integration will not only optimize performance but also ensure more efficient resource utilization.</p><h4>Improving Data Quality&nbsp;Alerts</h4><p>Right now, there’s a lot of business rules dictating when a data quality alert needs to be fired. This leads to a lot of false positives that require manual judgement. A lot of times it is difficult to track changes leading to regression due to inadequate data lineage information. We are investing in building a comprehensive data quality platform that more intelligently identifies anomalies in our impression stream, keeps track of data lineage and data governance, and also, generates alerts notifying producers of any regressions. This approach will enhance efficiency, reduce manual oversight, and ensure a higher standard of data integrity.</p><p>Creating a reliable source of truth for impressions is a complex but essential task that enhances personalization and discovery experience. Stay tuned for the next part of this series, where we’ll delve into how we use this SOT dataset to create a microservice that provides impression histories. We invite you to share your thoughts in the comments and continue with us on this journey of discovering impressions.</p><p>We are genuinely grateful to our amazing colleagues whose contributions were essential to the success of Impressions: Julian Jaffe, Bryan Keller, Yun Wang, Brandon Bremen, Kyle Alford, Ron Brown and Shriya&nbsp;Arora.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e2b67c88c9fb\" width=\"1\" height=\"1\" alt=\"\">","contentLength":8607,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tabiew 0.8.4 Released","url":"https://www.reddit.com/r/rust/comments/1ipp72r/tabiew_084_released/","date":1739578902,"author":"/u/shshemi","guid":285,"unread":true,"content":"<p>Tabiew is a lightweight TUI application that allows users to view and query tabular data files, such as CSV, Parquet, Arrow, Sqlite, and ...</p><ul><li>📊 Support for CSV, Parquet, JSON, JSONL, Arrow, FWF, and Sqlite</li><li>🗂️ Multi-table functionality</li></ul><ul><li>UI is updated to be more modern and responsive</li><li>Horizontally scrollable tables</li><li>Visible data frame can be referenced with name \"_\"</li><li>Compatibility with older versions of glibc</li><li>Two new themes (Tokyo Night and Catppuccin)</li></ul>","contentLength":450,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Conditional types in TypeScript","url":"https://2ality.com/2025/02/conditional-types-typescript.html","date":1739577600,"author":"Dr. Axel Rauschmayer","guid":175,"unread":true,"content":"<p>In TypeScript, conditional types let us make decisions (think if-then-else expressions) – which is especially useful in generic types. They are also an essential tool for working with union types because they let use “loop” over them. Read on if you want to know how all of that works.</p>","contentLength":291,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: VimLM – A Local, Offline Coding Assistant for Vim","url":"https://github.com/JosefAlbers/VimLM","date":1739576081,"author":"JosefAlbers","guid":451,"unread":true,"content":"<p>VimLM is a local, offline coding assistant for Vim. It’s like Copilot but runs entirely on your machine—no APIs, no tracking, no cloud.</p><p>- Deep Context: Understands your codebase (current file, selections, references).  \n- Conversational: Iterate with follow-ups like \"Add error handling\".  \n- Vim-Native: Keybindings like `Ctrl-l` for prompts, `Ctrl-p` to replace code.  \n- Inline Commands: `!include` files, `!deploy` code, `!continue` long responses.</p><p>Perfect for privacy-conscious devs or air-gapped environments.</p><p>Try it:  \n```\npip install vimlm\nvimlm\n```</p>","contentLength":558,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43054244"},{"title":"Kay Hayen: Nuitka this week #16","url":"https://nuitka.net/posts/nuitka-this-week-16.html","date":1739574000,"author":"","guid":485,"unread":true,"content":"<p>Hey Nuitka users! This started out as an idea of a weekly update, but\nthat hasn’t happened, and so we will switch it over to just writing up\nwhen something interesting happens and then push it out relatively\nimmediately when it happens.</p><h2>Nuitka Onefile Gets More Flexible:  and </h2><p>We’ve got a couple of exciting updates to Nuitka’s onefile mode that\ngive you more control and flexibility in how you deploy your\napplications. These enhancements stem from real-world needs and\ndemonstrate Nuitka’s commitment to providing powerful and adaptable\nsolutions.</p><h3>Taking Control of Onefile Unpacking: </h3><p>Onefile mode is fantastic for creating single-file executables, but the\nmanagement of the unpacking directory where the application expands has\nsometimes been a bit… opaque. Previously, Nuitka would decide whether\nto clean up this directory based on whether the path used\nruntime-dependent variables. This made sense in theory, but in practice,\nit could lead to unexpected behavior and made debugging onefile issues\nharder.</p><p>Now, you have complete control! The new  option\nlets you explicitly specify what happens to the unpacking directory:</p><ul><li><p><code></code>: This is the default behavior. Nuitka\nwill remove the unpacking directory unless runtime-dependent values\nwere used in the path specification. This is the same behavior as\nprevious versions.</p></li><li><p><code></code>: The unpacking directory is \nremoved and becomes a persistent, cached directory. This is useful\nfor debugging, inspecting the unpacked files, or if you have a use\ncase that benefits from persistent caching of the unpacked data. The\nfiles will remain available for subsequent runs.</p></li><li><p><code></code>: The unpacking directory \nremoved after the program exits.</p></li></ul><p>This gives you the power to choose the behavior that best suits your\nneeds. No more guessing!</p><h3>Relative Paths with </h3><p>Another common request, particularly from users deploying applications\nin more restricted environments, was the ability to specify the onefile\nunpacking directory  to the executable itself. Previously, you\nwere limited to absolute paths or paths relative to the user’s temporary\ndirectory space.</p><p>We’ve introduced a new variable, , that you can use in\nthe  option. This variable is dynamically\nreplaced at runtime with the full path to the directory containing the\nonefile executable.</p><div><div><pre></pre></div></div><p>This would create a directory named  the same\ndirectory as the  (or  on Linux/macOS)\nand unpack the application there. This is perfect for creating truly\nself-contained applications where all data and temporary files reside\nalongside the executable.</p><h3>Nuitka Commercial and Open Source</h3><p>These features, like many enhancements to Nuitka, originated from a\nrequest by a Nuitka commercial customer. This highlights the close\nrelationship between the commercial offerings and the open-source core.\nWhile commercial support helps drive development and ensures the\nlong-term sustainability of Nuitka, the vast majority of features are\nmade freely available to all users.</p><p>This change will be in 2.7 and is currently</p><p>We encourage you to try out these new features and let us know what you\nthink! As always, bug reports, feature requests, and contributions are\nwelcome on <a href=\"https://github.com/Nuitka/Nuitka/issues\">GitHub</a>.</p>","contentLength":3127,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Django Weblog: DjangoCongress JP 2025 Announcement and Live Streaming!","url":"https://www.djangoproject.com/weblog/2025/feb/14/djangocongress-jp-2025-announcement-and-livestream/","date":1739571130,"author":"","guid":169,"unread":true,"content":"<p>It will be streamed on the following YouTube Live channels:</p><p>This year there will be talks not only about Django, but also about FastAPI and other asynchronous web topics. There will also be talks on Django core development, Django Software Foundation (DSF) governance, and other topics from around the world. Simultaneous translation will be provided in both English and Japanese.</p><ul><li>The Async Django ORM: Where Is it?</li><li>Speed at Scale for Django Web Applications</li><li>Implementing Agentic AI Solutions in Django from scratch</li><li>Diving into DSF governance: past, present and future</li></ul><ul><li>Getting Knowledge from Django Hits: Using Grafana and Prometheus</li><li>Culture Eats Strategy for Breakfast: Why Psychological Safety Matters in Open Source</li><li>µDjango. The next step in the evolution of asynchronous microservices technology.</li></ul><p>A public viewing of the event will also be held in Tokyo. A reception will also be held, so please check the following connpass page if you plan to attend.</p>","contentLength":948,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Eli Bendersky: Decorator JITs - Python as a DSL","url":"https://eli.thegreenplace.net/2025/decorator-jits-python-as-a-dsl/","date":1739569771,"author":"","guid":168,"unread":true,"content":"<p>Spend enough time looking at Python programs and packages for machine learning,\nand you'll notice that the \"JIT decorator\" pattern is pretty popular. For\nexample, this JAX snippet:</p><div><pre></pre></div><div><pre></pre></div><p>In both cases, the function decorated with  doesn't get executed by the\nPython interpreter in the normal sense. Instead, the code inside is more like\na DSL (Domain Specific Language) processed by a special purpose compiler built\ninto the library (JAX or Triton). Another way to think about it is that Python\nis used as a  to describe computations.</p><p>In this post I will describe some implementation strategies used by libraries to\nmake this possible.</p><div><h2>Preface - where we're going</h2><p>The goal is to explain how different kinds of  decorators work by using\na simplified, educational example that implements several approaches from\nscratch. All the approaches featured in this post will be using this flow:</p> Expr IR --&gt; LLVM IR --&gt; Execution\" /&gt; Expr IR --&gt; LLVM IR --&gt; Execution\" class=\"align-center\" src=\"https://eli.thegreenplace.net/images/2025/decjit-python.png\" /&gt;\n<p>These are the steps that happen when a Python function wrapped with\nour educational  decorator is called:</p><ol><li>The function is translated to an \"expression IR\" - .</li><li>This expression IR is converted to LLVM IR.</li><li>Finally, the LLVM IR is JIT-executed.</li></ol><p>First, let's look at the  IR. Here we'll make a big simplification -\nonly supporting functions that define a single expression, e.g.:</p><div><pre></pre></div><p>Naturally, this can be easily generalized - after all, LLVM IR can be used to\nexpress fully general computations.</p><p>Here are the  data structures:</p><div><pre></pre></div><p>To convert an  into LLVM IR and JIT-execute it, we'll use this function:</p><div><pre></pre></div><p>It uses the  class to actually generate LLVM IR from .\nThis process is straightforward and covered extensively in the resources I\nlinked to earlier; take a look at <a href=\"https://github.com/eliben/code-for-blog/blob/main/2025/decjit/exprcode.py\">the full code here</a>.</p><p>My goal with this architecture is to make things simple, but .\nOn one hand - there are several simplifications: only single expressions are\nsupported, very limited set of operators, etc. It's very easy to extend this!\nOn the other hand, we could have just trivially evaluated the \nwithout resorting to LLVM IR; I do want to show a more complete compilation\npipeline, though, to demonstrate that an arbitrary amount of complexity can\nbe hidden behind these simple interfaces.</p><p>With these building blocks in hand, we can review the strategies used by\n decorators to convert Python functions into s.</p></div><div><p>Python comes with powerful code reflection and introspection capabilities out\nof the box. Here's the  decorator:</p><div><pre></pre></div><p>This is a standard Python decorator. It takes a function and returns another\nfunction that will be used in its place ( ensures that\nfunction attributes like the name and docstring of the wrapper match the\nwrapped function).</p><div><pre></pre></div><p>After  is applied to , what  holds is the\nwrapper. When  is called, the wrapper is invoked with\n.</p><p>The wrapper obtains the AST of the wrapped function, and then uses\n to convert this AST into an :</p><div><pre></pre></div><p>When  finishes visiting the AST it's given, its\n field will contain the  representing the function's\nreturn value. The wrapper then invokes  with this .</p><p>Note how our decorator interjects into the regular Python execution process.\nWhen  is called, instead of the standard Python compilation and\nexecution process (code is compiled into bytecode, which is then executed\nby the VM), we translate its code to our own representation and emit LLVM from\nit, and then JIT execute the LLVM IR. While it seems kinda pointless in this\nartificial example, in reality this means we can execute the function's code\nin any way we like.</p><div><h3>AST JIT case study: Triton</h3><p>This approach is almost exactly how the Triton language works. The body of a\nfunction decorated with  gets parsed to a Python AST, which then\n- through a series of internal IRs - ends up in LLVM IR; this in turn is lowered\nto <a href=\"https://docs.nvidia.com/cuda/parallel-thread-execution/\">PTX</a> by the\n<a href=\"https://llvm.org/docs/NVPTXUsage.html\">NVPTX LLVM backend</a>.\nThen, the code runs on a GPU using a standard CUDA pipeline.</p><p>Naturally, the subset of Python that can be compiled down to a GPU is limited;\nbut it's sufficient to run performant kernels, in a language that's much\nfriendlier than CUDA and - more importantly - lives in the same file with the\n\"host\" part written in regular Python. For example, if you want testing and\ndebugging, you can run Triton in \"interpreter mode\" which will just run the\nsame kernels locally on a CPU.</p><p>Note that Triton lets us import names from the  package\nand use them inside kernels; these serve as the  for the language\n- special calls the compiler handles directly.</p></div></div><div><p>Python is a fairly complicated language with  of features. Therefore,\nif our JIT has to support some large portion of Python semantics, it may make\nsense to leverage more of Python's own compiler. Concretely, we can have it\ncompile the wrapped function all the way <a href=\"https://github.com/python/cpython/blob/main/InternalDocs/interpreter.md\">to bytecode</a>,\nand start our translation from there.</p><p>Here's the  decorator that does just this :</p><div><pre></pre></div><p>The Python VM is a stack machine; so we emulate a stack to convert the\nfunction's bytecode to  IR (a bit like an <a href=\"https://en.wikipedia.org/wiki/Reverse_Polish_notation\">RPN evaluator</a>).\nAs before, we then use our  utility function to lower\n to LLVM IR and JIT execute it.</p><p>Using this JIT is as simple as the previous one - just swap \nfor :</p><div><pre></pre></div><div><h3>Bytecode JIT case study: Numba</h3><p><a href=\"https://numba.pydata.org/\">Numba</a> is a compiler for Python itself. The idea\nis that you can speed up specific functions in your code by slapping a\n decorator on them. What happens next is similar in spirit to\nour simple , but of course much more complicated because it\nsupports a very large portion of Python semantics.</p><p>Numba uses the Python compiler to emit bytecode, just as we did; it then\nconverts it into its own IR, and then to LLVM using .</p><p>By starting with the bytecode, Numba makes its life easier (no need to rewrite\nthe entire Python compiler). On the other hand, it also makes some analyses\n, because by the time we're in bytecode, a lot of semantic information\nexisting in higher-level representations is lost. For example, Numba has to\nsweat a bit to recover control flow information from the bytecode (by\nrunning it through a special interpreter first).</p></div></div><div><p>The two approaches we've seen so far are similar in many ways - both rely on\nPython's introspection capabilities to compile the source code of the JIT-ed\nfunction to some extent (one to AST, the other all the way to bytecode), and\nthen work on this lowered representation.</p><p>The tracing strategy is very different. It doesn't analyze the source code of\nthe wrapped function at all - instead, it  its execution by means of\nspecially-boxed arguments, leveraging overloaded operators and functions, and\nthen works on the generated trace.</p><p>The code implementing this for our smile demo is surprisingly compact:</p><div><pre></pre></div><p>Each runtime argument of the wrapped function is assigned a , and\nthat is placed in a , a placeholder class which lets us\ndo operator overloading:</p><div><pre></pre></div><p>The remaining key function is :</p><div><pre></pre></div><p>To understand how this works, consider this trivial example:</p><div><pre></pre></div><p>After the decorated function is defined,  holds the wrapper function\ndefined inside . When  is called, the wrapper runs:</p><ol><li>For each argument of  itself (that is  and ), it creates\na new  holding a . This denotes a named variable in\nthe  IR.</li><li>It then calls the wrapped function, passing it the boxes as runtime\nparameters.</li><li>When (the wrapped)  runs, it invokes . This is caught by the overloaded\n operator of , and it creates a new  with\nthe s representing  and  as children. This\n is then returned .</li><li>The wrapper unboxes the returned  and passes it to\n to emit LLVM IR from it and JIT execute it with the\nactual runtime arguments of the call: .</li></ol><p>This might be a little mind-bending at first, because there are two different\nexecutions that happen:</p><ul><li>The first is calling the wrapped  function itself, letting the Python\ninterpreter run it as usual, but with special arguments that build up the IR\ninstead of doing any computations. This is the .</li><li>The second is lowering this IR our tracing step built into LLVM IR and then\nJIT executing it with the actual runtime argument values ; this is\nthe .</li></ul><p>This tracing approach has some interesting characteristics. Since we don't\nhave to analyze the source of the wrapped functions but only trace through\nthe execution, we can \"magically\" support a much richer set of programs, e.g.:</p><div><pre></pre></div><p>This  with our basic . Since Python variables are\nplaceholders (references) for values, our tracing step is oblivious to them - it\nfollows the flow of values. Another example:</p><div><pre></pre></div><p>This also just works! The created  will be a long chain of \nadditions of 's runtime values through the loop, added to the \nfor .</p><p>This last example also leads us to a limitation of the tracing approach; the\nloop cannot be  - it cannot depend on the function's arguments,\nbecause the tracing step has no concept of runtime values and wouldn't know\nhow many iterations to run through; or at least, it doesn't know this unless\nwe want to perform the tracing run for every runtime execution .</p><div><h3>Tracing JIT case study: JAX</h3><p>The <a href=\"https://jax.readthedocs.io/en/latest/\">JAX ML framework</a> uses a tracing\napproach very similar to the one described here. The first code sample in this\npost shows the JAX notation. JAX cleverly wraps Numpy with its own version which\nis traced (similar to our , but JAX calls these boxes \"tracers\"),\nletting you write regular-feeling Numpy code that can be JIT optimized and\nexecuted on accelerators like GPUs and TPUs via <a href=\"https://github.com/openxla\">XLA</a>. JAX's tracer builds up an underlying IR (called\n<a href=\"https://jax.readthedocs.io/en/latest/jaxpr.html\">jaxpr</a>) which can then be\nemitted to XLA ops and passed to XLA for further lowering and execution.</p><p>For a fairly deep overview of how JAX works, I recommend reading the\n<a href=\"https://jax.readthedocs.io/en/latest/autodidax.html\">autodidax doc</a>.</p><p>As mentioned earlier, JAX has <a href=\"https://jax.readthedocs.io/en/latest/jit-compilation.html\">some limitations</a>\nwith things like data-dependent control flow in native Python. This won't work,\nbecause there's control flow\nthat depends on a runtime value ():</p><div><pre></pre></div><p>When  is executed, JAX will throw an exception, saying something\nlike:</p><blockquote>\nThis concrete value was not available in Python because it depends on the\nvalue of the argument count.</blockquote><p>As a remedy, JAX has its\nown built-in intrinsics from the <a href=\"https://jax.readthedocs.io/en/latest/jax.lax.html\">jax.lax package</a>.\nHere's the example rewritten in a way that actually works:</p><div><pre></pre></div><p> (and many other built-ins in the  package) is something JAX\ncan trace through, generating a corresponding XLA operation (XLA has support for\n<a href=\"https://openxla.org/xla/operation_semantics\">While loops</a>, to which this\n can be lowered).</p><p>The tracing approach has clear benefits for JAX as well; because it only cares\nabout the flow of values, it can handle arbitrarily complicated Python code,\nas long as the flow of values can be traced. Just like the local variables and\ndata-independent loops shown earlier, but also things like closures. This makes\nmeta-programming and templating easy .</p></div></div><div><p>The full code for this post is available <a href=\"https://github.com/eliben/code-for-blog/tree/main/2025/decjit\">on GitHub</a>.</p></div>","contentLength":10514,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"An art exhibit in Japan where a chained robot dog will try to attack you to showcase the need for AI safety.","url":"https://v.redd.it/sglstazd96je1","date":1739568243,"author":"/u/eternviking","guid":294,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/artificial/comments/1iple9t/an_art_exhibit_in_japan_where_a_chained_robot_dog/"},{"title":"OpenAI: The Age of AI Is Here!","url":"https://www.youtube.com/watch?v=97kQRYwL3P0","date":1739557087,"author":"Two Minute Papers","guid":329,"unread":true,"content":"<article>❤️ Check out Lambda here and sign up for their GPU Cloud: https://lambdalabs.com/papers\n\n📝 The paper \"Competitive Programming with Large Reasoning Models\" is available here:\nhttps://arxiv.org/abs/2502.06807\n\n📝 My paper on simulations that look almost like reality is available for free here:\nhttps://rdcu.be/cWPfD \n\nOr this is the orig. Nature Physics link with clickable citations:\nhttps://www.nature.com/articles/s41567-022-01788-5\n\n🙏 We would like to thank our generous Patreon supporters who make Two Minute Papers possible:\nBenji Rabhan, B Shang, Christian Ahlin, Gordon Child, John Le, Juan Benet, Kyle Davis, Loyal Alchemist, Lukas Biewald, Michael Tedder, Owen Skarpness, Richard Sundvall, Steef, Taras Bobrovytsky, Thomas Krcmar, Tybie Fitzhugh, Ueli GallizziIf you wish to appear here or pick up other perks, click here: https://www.patreon.com/TwoMinutePapers\n\nMy research: https://cg.tuwien.ac.at/~zsolnai/\nX/Twitter: https://twitter.com/twominutepapers\nThumbnail design: Felícia Zsolnai-Fehér - http://felicia.hu</article>","contentLength":1040,"flags":null,"enclosureUrl":"https://www.youtube.com/v/97kQRYwL3P0?version=3","enclosureMime":"","commentsUrl":null},{"title":"Roadmap to Becoming a Data Scientist, Part 4: Advanced Machine Learning","url":"https://towardsdatascience.com/roadmap-to-becoming-a-data-scientist-part-4-advanced-machine-learning/","date":1739552400,"author":"Vyacheslav Efimov","guid":9,"unread":true,"content":"<p>Data science is undoubtedly one of the most fascinating fields today.&nbsp;Following significant breakthroughs in machine learning about a decade ago, data science has surged in popularity within the tech community.&nbsp;Each year, we witness increasingly powerful tools that once seemed unimaginable.&nbsp;Innovations such as the&nbsp;,&nbsp;, the&nbsp;<em>Retrieval-Augmented Generation (RAG</em>) framework, and state-of-the-art&nbsp;&nbsp;— including&nbsp;&nbsp;— have had a profound impact on our world.</p><p>However, with the abundance of tools and the ongoing hype surrounding AI, it can be overwhelming — especially for beginners — to determine which skills to prioritize when aiming for a career in data science.&nbsp;Moreover, this field is highly demanding, requiring substantial dedication and perseverance.</p><p>The first three parts of this series outlined the necessary skills to become a data scientist in three key areas: <a href=\"https://towardsdatascience.com/roadmap-to-becoming-a-data-scientist-part-1-maths-2dc9beb69b27/\">math</a>, <a href=\"https://towardsdatascience.com/roadmap-to-becoming-a-data-scientist-part-2-software-engineering-e2fee3fe4d71/\">software engineering</a>, and <a href=\"https://towardsdatascience.com/roadmap-to-becoming-a-data-scientist-part-3-machine-learning-628248c96cb5/\">machine learning</a>.&nbsp;While knowledge of classical <a href=\"https://towardsdatascience.com/tag/machine-learning/\" title=\"Machine Learning\">Machine Learning</a> and neural network algorithms is an excellent starting point for aspiring data specialists, there are still many&nbsp;important topics in machine learning that must be mastered to work on more advanced projects.</p><blockquote><p><em>This article will focus solely on the math skills necessary to start a career in Data Science.&nbsp;Whether pursuing this path is a worthwhile choice based on your background and other factors will be discussed in a separate article.</em></p></blockquote><h2>The importance of learning evolution of methods in machine learning</h2><blockquote><p><em>The section below provides information about the evolution of methods in natural language processing (NLP).</em></p></blockquote><p>In contrast to previous articles in this series, I have decided to change the format in which I present the necessary skills for aspiring data scientists. Instead of directly listing specific competencies to develop and the motivation behind mastering them, I will briefly outline the most important approaches, presenting them in chronological order as they have been developed and used over the past decades in machine learning.</p><p>The reason is that I believe it is crucial to study these algorithms from the very beginning. In machine learning, many new methods are built upon older approaches, which is especially true for <a href=\"https://towardsdatascience.com/tag/nlp/\" title=\"NLP\">NLP</a> and computer vision.</p><p>For example, jumping directly into the implementation details of modern&nbsp;large language models (LLMs)&nbsp;without any preliminary knowledge may make it very difficult for beginners to grasp the motivation and underlying ideas of specific mechanisms.</p><p><em>Given this, in the next two sections, I will highlight in&nbsp;</em><em>&nbsp;the key concepts that should be studied.</em></p><p><strong>Natural language processing (NLP)</strong>&nbsp;is a broad field that focuses on processing textual information. Machine learning algorithms cannot work directly with raw text, which is why text is usually preprocessed and converted into numerical vectors that are then fed into neural networks.</p><p>Before being converted into vectors, words undergo&nbsp;, which includes simple techniques such as&nbsp;,&nbsp;<strong>stemming, lemmatization, normalization</strong>, or removing&nbsp;. After preprocessing, the resulting text is encoded into&nbsp;. Tokens represent the smallest textual elements in a collection of documents. Generally, a token can be a part of a word, a sequence of symbols, or an individual symbol. Ultimately, tokens are converted into numerical vectors.</p><p>The&nbsp;&nbsp;method is the most basic way to encode tokens, focusing on counting the frequency of tokens in each document. However, in practice, this is usually not sufficient, as it is also necessary to account for token importance — a concept introduced in the&nbsp;&nbsp;and&nbsp;&nbsp;methods. While TF-IDF improves upon the naive counting approach of bag of words, researchers have developed a completely new approach called embeddings.</p><p>&nbsp;are numerical vectors whose components preserve the semantic meanings of words. Because of this, embeddings play a crucial role in NLP, enabling input data to be trained or used for model inference. Additionally, embeddings can be used to compare text similarity, allowing for the retrieval of the most relevant documents from a collection.</p><blockquote><p><em>Embeddings can also be used to encode other unstructured data, including images, audio, and videos.</em></p></blockquote><p>As a field, NLP has been evolving rapidly over the last 10–20 years to efficiently solve various text-related problems. Complex tasks like text translation and text generation were initially addressed using&nbsp;<strong>recurrent neural networks (RNNs)</strong>, which introduced the concept of memory, allowing neural networks to capture and retain key contextual information in long documents.</p><p>Although RNN performance gradually improved, it remained suboptimal for certain tasks. Moreover, RNNs are relatively slow, and their sequential prediction process does not allow for parallelization during training and inference, making them less efficient.</p><p>Additionally, the original Transformer architecture can be decomposed into two separate modules:&nbsp;&nbsp;and&nbsp;. Both of these form the foundation of the most state-of-the-art models used today to solve various NLP problems. Understanding their principles is valuable knowledge that will help learners advance further when studying or working with other&nbsp;<strong>large language models (LLMs)</strong>.</p><p>When it comes to LLMs, I strongly recommend studying the evolution of at least the first three GPT models, as they have had a significant impact on the AI world we know today. In particular, I would like to highlight the concepts of&nbsp;&nbsp;and&nbsp;, introduced in&nbsp;GPT-2, which enable LLMs to solve text generation tasks without explicitly receiving any training examples for them.</p><p>Another important technique developed in recent years is&nbsp;<strong>retrieval-augmented generation (RAG)</strong>.&nbsp;<em>The main limitation of LLMs is that they are only aware of the context used during their training.</em>&nbsp;As a result, they lack knowledge of any information beyond their training data.</p><p>The retriever converts the input prompt into an embedding, which is then used to query a vector database. The database returns the most relevant context based on the similarity to the embedding. This retrieved context is then combined with the original prompt and passed to a generative model. The model processes both the initial prompt and the additional context to generate a more informed and contextually accurate response.</p><blockquote><p><em>A good example of this limitation is the first version of the ChatGPT model, which was trained on data up to the year 2022 and had no knowledge of events that occurred from 2023 onward.</em></p></blockquote><p>To address this limitation, OpenAI researchers developed a RAG pipeline, which includes a constantly updated database containing new information from external sources. When ChatGPT is given a task that requires external knowledge, it queries the database to retrieve the most relevant context and integrates it into the final prompt sent to the machine learning model.</p><p>The goal of distillation is to create a smaller model that can imitate a larger one. In practice, this means that if a large model makes a prediction, the smaller model is expected to produce a similar result.</p><p>In the modern era, LLM development has led to models with millions or even billions of parameters. As a consequence, the overall size of these models may exceed the hardware limitations of standard computers or small portable devices, which come with many constraints.</p><p>Quantization is the process of reducing the memory required to store numerical values representing a model’s weights.</p><p>This is where optimization techniques become particularly useful, allowing LLMs to be compressed without significantly compromising their performance. The most commonly used techniques today include&nbsp;,, and&nbsp;.</p><p>Pruning refers to discarding the least important weights of a model.</p><p>Regardless of the area in which you wish to specialize, knowledge of&nbsp;&nbsp;is a must-have skill! Fine-tuning is a powerful concept that allows you to efficiently adapt a pre-trained model to a new task.</p><p>Fine-tuning is especially useful when working with very large models. For example, imagine you want to use BERT to perform semantic analysis on a specific dataset. While BERT is trained on general data, it might not fully understand the context of your dataset. At the same time, training BERT from scratch for your specific task would require a massive amount of resources.</p><p>Here is where fine-tuning comes in: it involves taking a pre-trained BERT (or another model) and freezing some of its layers (usually those at the beginning). As a result, BERT is retrained, but this time only on the new dataset provided. Since BERT updates only a subset of its weights and the new dataset is likely much smaller than the original one BERT was trained on, fine-tuning becomes a very efficient technique for adapting BERT’s rich knowledge to a specific domain.</p><blockquote><p><em>Fine-tuning is widely used not only in NLP but also across many other domains.</em></p></blockquote><p>As the name suggests,&nbsp;&nbsp;involves analyzing images and videos using machine learning. The most common tasks include image classification, object detection, image segmentation, and generation.</p><p>Most CV algorithms are based on neural networks, so it is essential to understand how they work in detail. In particular, CV uses a special type of network called&nbsp;<strong>convolutional neural networks (CNNs)</strong>. These are similar to fully connected networks, except that they typically begin with a set of specialized mathematical operations called&nbsp;.</p><blockquote><p><em>In simple terms, convolutions act as filters, enabling the model to extract the most important features from an image, which are then passed to fully connected layers for further analysis.</em></p></blockquote><p>The next step is to study the most popular CNN architectures for classification tasks, such as&nbsp;<strong>AlexNet, VGG, Inception, ImageNet</strong>, and&nbsp;.</p><p>Speaking of the object detection task, the&nbsp;&nbsp;algorithm is a clear winner. It is not necessary to study all of the dozens of versions of YOLO. In reality, going through the original paper of the first YOLO should be sufficient to understand how a relatively difficult problem like object detection is elegantly transformed into both classification and regression problems. This approach in YOLO also provides a nice intuition on how more complex CV tasks can be reformulated in simpler terms.</p><p>While there are many architectures for performing image segmentation, I would strongly recommend learning about&nbsp;, which introduces an encoder-decoder architecture.</p><p>Finally, image generation is probably one of the most challenging tasks in CV. Personally, I consider it an optional topic for learners, as it involves many advanced concepts. Nevertheless, gaining a high-level intuition of how&nbsp;<strong>generative adversial networks (GAN)</strong>&nbsp;function to generate images is a good way to broaden one’s horizons.</p><blockquote><p><em>In some problems, the training data might not be enough to build a performant model. In such cases, the data augmentation technique is commonly used. It involves the artificial generation of training data from already existing data (images). By feeding the model more diverse data, it becomes capable of learning and recognizing more patterns.</em></p></blockquote><p>It would be very hard to present in detail the <a href=\"https://towardsdatascience.com/tag/roadmaps/\" title=\"Roadmaps\">Roadmaps</a> for all existing machine learning domains in a single article. That is why, in this section, I would like to briefly list and explain some of the other most popular areas in data science worth exploring.</p><p>First of all,&nbsp;<strong>recommender systems (RecSys)</strong>&nbsp;have gained a lot of popularity in recent years. They are increasingly implemented in online shops, social networks, and streaming services. The key idea of most algorithms is to take a large initial matrix of all users and items and decompose it into a product of several matrices in a way that associates every user and every item with a high-dimensional embedding. This approach is very flexible, as it then allows different types of comparison operations on embeddings to find the most relevant items for a given user. Moreover, it is much more rapid to perform analysis on small matrices rather than the original, which usually tends to have huge dimensions.</p><p> often goes hand in hand with RecSys. When a RecSys has identified a set of the most relevant items for the user, ranking algorithms are used to sort them to determine the order in which they will be shown or proposed to the user. A good example of their usage is search engines, which filter query results from top to bottom on a web page.</p><p>Closely related to ranking, there is also a&nbsp;&nbsp;problem that aims to optimally map objects from two sets, A and B, in a way that, on average, every object pair&nbsp;is mapped “well” according to a matching criterion. A use case example might include distributing a group of students to different university disciplines, where the number of spots in each class is limited.</p><p>&nbsp;is an unsupervised machine learning task whose objective is to split a dataset into several regions (clusters), with each dataset object belonging to one of these clusters. The splitting criteria can vary depending on the task. Clustering is useful because it allows for grouping similar objects together. Moreover, further analysis can be applied to treat objects in each cluster separately.</p><p>The goal of clustering is to group dataset objects (on the left) into several categories (on the right) based on their similarity.</p><p>&nbsp;is another unsupervised problem, where the goal is to compress an input dataset. When the dimensionality of the dataset is large, it takes more time and resources for machine learning algorithms to analyze it. By identifying and removing noisy dataset features or those that do not provide much valuable information, the data analysis process becomes considerably easier.</p><p>&nbsp;is an area that focuses on designing algorithms and data structures (indexes) to optimize searches in a large database of embeddings (vector database). More precisely, given an input embedding and a vector database, the goal is to&nbsp;&nbsp;find the most similar embedding in the database relative to the input embedding.</p><p>The goal of similarity search is to approximately find the most similar embedding in a vector database relative to a query embedding.</p><p>The word “approximately” means that the search is not guaranteed to be 100% precise. Nevertheless, this is the main idea behind similarity search algorithms — sacrificing a bit of accuracy in exchange for significant gains in prediction speed or data compression.</p><p>&nbsp;involves studying the behavior of a target variable over time. This problem can be solved using classical tabular algorithms. However, the presence of time introduces new factors that cannot be captured by standard algorithms. For instance:</p><ul><li>the target variable can have an overall&nbsp;, where in the long term its values increase or decrease&nbsp;<em>(e.g., the average yearly temperature rising due to global warming)</em>.</li><li>the target variable can have a&nbsp;&nbsp;which makes its values change based on the currently given period&nbsp;<em>(e.g. temperature is lower in winter and higher in summer)</em>.</li></ul><p>Most of the time series models take both of these factors into account. In general, time series models are mainly used a lot in financial, stock or demographic analysis.</p><p>Another advanced area I would recommend exploring is&nbsp;, which fundamentally changes the algorithm design compared to classical machine learning.&nbsp;In simple terms, its goal is to train an agent in an environment to make optimal decisions based on a reward system (also known as the&nbsp;<em>“trial and error approach”</em>).&nbsp;By taking an action, the agent receives a reward, which helps it understand whether the chosen action had a positive or negative effect.&nbsp;After that, the agent slightly adjusts its strategy, and the entire cycle repeats.</p><p>Reinforcement learning is particularly popular in complex environments where classical algorithms are not capable of solving a problem.&nbsp;Given the complexity of reinforcement learning algorithms and the computational resources they require, this area is not yet fully mature, but it has high potential to gain even more popularity in the future.</p><p>Currently the most popular applications are:</p><ul><li>.&nbsp;Existing approaches can design optimal game strategies and outperform humans.&nbsp;The most well-known examples are chess and Go.</li><li>.&nbsp;Advanced algorithms can be incorporated into robots to help them move, carry objects or complete routine tasks at home.</li><li>.&nbsp;Reinforcement learning methods can be developed to automatically drive cars, control helicopters or drones.</li></ul><p>This article was a logical continuation of the previous part and expanded the skill set needed to become a data scientist. While most of the mentioned topics require time to master, they can add significant value to your portfolio. This is especially true for the NLP and CV domains, which are in high demand today.</p><blockquote><p>After reaching a high level of expertise in data science, it is still crucial to stay motivated and consistently push yourself to learn new topics and explore emerging algorithms.</p></blockquote><p>Data science is a constantly evolving field, and in the coming years, we might witness the development of new state-of-the-art approaches that we could not have imagined in the past.</p><p><em>All images are by the author unless noted otherwise.</em></p>","contentLength":17044,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Generate a Momento Disposable Token with Rust and Lambda","url":"https://dev.to/aws-builders/generate-a-momento-disposable-token-with-rust-and-lambda-1a58","date":1739552249,"author":"Benjamen Pyle","guid":550,"unread":true,"content":"<p>Working with browser hosted code (UI) requires a developer to be cautious about exposing secrets and tokens.  A less than trustworthy person could take these secrets and do things that the user doesn't intend.  And while we are all responsible for our internet usage, token and secrets security from an application standpoint falls squarely on a developer's shoulders.  This is why when using <a href=\"https://www.gomomento.com/\" rel=\"noopener noreferrer\">Momento</a>, I like to take advantage of the Authorization API.  What the Authorization API allows me to do is create a disposable token from a secure location, so that my UI clients can just refresh them as needed to work with Topics or Caches.  Thus, not having the credential leak up into the \"easy to see\" JavaScript code.  Let's dive into a Lambda Function coded in Rust that implements this Token Vending Machine concept with Momento.</p><p>I usually like to work backwards to forwards, meaning I establish what I want in the end and then build from there.  When looking at a sample implementation, that means starting from the diagram and walking through what I'm building.</p><p>A user's session will need to establish an authenticated and authorized connection to Momento by way of the JavaScript client SDK.  Every call to Momento is over an HTTP API request so it's going to get authenticated and authorized.  Which is a good thing!  However, doing this, requires a token which is what I'll be fetching from the Rust Lambda Function that will be demonstrated throughout the article.  The flow goes like this:</p><p>1) User requires a token to connect to Momento\n2) Browser makes a request to an endpoint backed by a Lambda Function<p>\n3) Rust Lambda Function uses a long-lived and secure API Token that has permissions to create short-lived disposable tokens</p>\n4) Rust Function uses the Momento SDK to request a token with the supplied Topic and Cache names with scopes to publish and subscribe<p>\n5) A token is returned from the Lambda Function where the client code can use to subscribe to a Momento topic.</p>\n6) The token has an expiration timestamp represented as a Unix Epoch so that the client can refresh before the token has a chance to expire</p><p>So let's walk through those steps above and explore the implementation.</p><h3>\n  \n  \n  Implementing a Momento Token Vending Machine with Rust\n</h3><p>I know I'm focusing on Lambda, Momento, and Rust, but there are many other components that go into what I'd consider a quality Lambda Function build.  To address those, let's have a look at the CDK code and what all gets shipped to AWS.</p><p>TypeScript has become my goto when it comes to creating AWS infrastructure.  I like the CDK, and I especially like having the ability to use the Cargo Lambda CDK Construct.  If you haven't used it before, check out the <a href=\"https://github.com/cargo-lambda/cargo-lambda-cdk\" rel=\"noopener noreferrer\">repository</a> and jump into the documentation.  It's straightforward and the classes inherit from AWS bases.  In addition to Cargo Lambda, I like to include the <a href=\"https://www.instagram.com/reel/DFsdRBvAcyQ/?utm_source=ig_web_copy_link\" rel=\"noopener noreferrer\">Datadog Lambda Extension</a>.  This piece of goodness allows me to collect my <a href=\"https://binaryheap.com/rust-and-opentelemetry-with-lambda-datadog/\" rel=\"noopener noreferrer\">OpenTelemetry</a> traces into the Datadog UI for easy assessment of performance and any latency or error issues.  I'll highlight further as the article evolves.</p><p>Here we go! The below is the CDK code that brings the above together.</p><h5>\n  \n  \n  Adding the Datadog Extension\n</h5><p>Pay special attention to the following when adding the Datadog extension.</p><ul><li>Region: I'm using the region my Lambda function is hosted in</li><li>ARM/x64: I'm picking the chip architecture that my Lambda Function is compiled for.\n</li><li>Version: 68 in this case, but  can also be used.\n</li></ul><div><pre><code></code></pre></div><p>I'm going to use a long-lived API key with Momento so that this Lambda Function can make requests without worrying about expiration.  This is completely acceptable solution.  Think of it like a scoped API key essentially.  To set that up, I'm using AWS SecretsManager.</p><div><pre><code></code></pre></div><h5>\n  \n  \n  Cargo Lambda Rust Function\n</h5><p>Wrapping up the infrastructure components is the definition of the Rust Lambda Function and granting its ability to read from the secret defined above in SecretsManager.  Additionally, I'm exposing the function over a FunctionURL.  This of course could be internal behind an Application Load Balancer or exposed behind a variety of API Gateway setups.  The FunctionURL just makes this example simple to pull together.</p><p>Key things to point out in the  are:</p><ul><li>Architecture: set to ARM because I prefer to run on the AWS Graviton chips</li><li>Environment: \n\n<ul><li>Setting RUST_LOG allows me to control crate log levels (this is a convention)\n</li></ul></li></ul><div><pre><code></code></pre></div><p>At this point, using CDK, I can easily run a  and my code will be live in AWS in just a couple of minutes.  However, I'd like to dive in further on the Rust and Lambda code, specifically addressing the Momento Auth pieces</p><p>All Rust code (unless it's a lib) starts out with a  function.  Even Lambda Functions must have a .  In my  below, I'm setting up Momento, Datadog, OpenTelemetry, and other reusable components.  Since my handler is what is called over and over, I want to have things warm and in memory, ready to use as events come in.</p><p>To initialize the OpenTelemetry, I'm establishing a telemetry layer which I'm registering.</p><div><pre><code></code></pre></div><p>The next pieces of  are about fetching the Momento API key from the AWS secret I defined in the infrastructure.  And with that secret, I'll construct an instance of the Momento Auth client so that I can communicate with the Auth API and create the disposable tokens.</p><div><pre><code></code></pre></div><p>With all Lambda Functions, I need to define a function that will be called when the Lambda Function is supplied events.  For web APIs, that event is a request from an external client.   My  establishes this connection by the following code.</p><div><pre><code></code></pre></div><p>As exposed, I need to send a Momento client, the expiration in minutes I want to let the token be valid for, and the event which is the web request.</p><div><pre><code></code></pre></div><p>The Lambda Function handler does the following.</p><ul><li>Parse the body of the request \n\n<ul><li>Body in the correct format then generate the token</li><li>If not, return a 400 BAD REQUEST</li></ul></li></ul><p>For the request body, I'm expecting it to look like this.</p><div><pre><code></code></pre></div><p>The Rust structure that this serializes into has the following definition.</p><div><pre><code></code></pre></div><p>Now with a struct populated with my request data, I can look at how to generate the disposable token.  It's much easier than I thought it might be.</p><h5>\n  \n  \n  Generating the Disposable Token\n</h5><p>This disposable token logic is the heart of this Lambda Function's existence.  Remember, Client code or the UI is going to request a token that I want to scope down to the cache and topic supplied in the payload.  This will guarantee that the client has access to what's needed for the duration defined the environment variable discussed above.</p><div><pre><code></code></pre></div><p>Let's break the above down just a little.  First up is the  and .</p><p>The  plugs into OpenTelemetry that allows me to time the Momento operations by way of the Rust Instrument trait.  I highly recommend any Rust code you write take advantage of these opportunities.  Tracing in the spirit of observability will make finding errors and poor user experiences so much easier when you start to get some volume.</p><div><pre><code></code></pre></div><p>The next piece of this function is to create the Disposable token.   are a required parameter to the <code>generate_disposable_token</code> function.  For my example, I'm giving the token access to Publish and Subscribe to the Cache/Topic combination.  And notice that the  parameter is finally being used to round out the function call.</p><div><pre><code></code></pre></div><p>The last piece of the function is to create the .  The values returned from the Momento function call are used to populate the struct.</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Measuring Performance with Datadog and OpenTelemetry\n</h3><p>So I can't end an article just demonstrating how to fetch disposable tokens written in Rust and deployed in a Lambda Function without talking about performance.  I am always blown away at the speed of Momento's services.  I hadn't done much work with the Auth API so I wanted to see if the timings that I've been accustomed to with Cache and Topics also held true with Auth.  </p><p>With the observability code using OpenTelemetry that I've shown above, I'm able to not only track the Lambda Function's execution timings, but also the Momento specific API calls via the  trait that I showed above.  I bring this metrics and traces together via Datadog because there isn't a better tool on the market to help me observe my Lambda Functions as well as other cloud resources.</p><h5>\n  \n  \n  High Level Function Latency\n</h5><p>First up is looking at the high level Lambda Function latency. I'm graphing the 50th, 75th, 90th, and 95th percentiles with this Datadog line graph.</p><p>I've <a href=\"https://binaryheap.com/rust-and-lambda-performance/\" rel=\"noopener noreferrer\">written about Rust and Lambda performance</a> quite a bit over the past 18 months, but I'm always amazed at how quickly and consistently my function code performs with Rust. I can also make the <a href=\"https://binaryheap.com/caching-with-momento-and-rust/\" rel=\"noopener noreferrer\">same statements</a> when it comes to pairing Rust with Momento.  Time and time again, their platform performs consistently, regardless of the load and requests I throw at it.  The same can be said about the Auth API that I'm exercising here.  Consistent p95 latency at the 3ms is just fantastic and not going to be noticeable by an end user.</p><p>High level tracing is great and something that I love about using Datadog, but since I took advantage of the  trait further up, let's have a look at exactly how the Momento Auth operations play into the overall function latency.</p><p>This table shows the two spans that are included in the overall latency of the Lambda Functions execution.  If you remember from the code well above, I called the Momento Auth span .  I'm happy all day long with an average latency of 1.25ms and a tail p99 latency of 2.19ms.  I can't recommend their <a href=\"https://docs.momentohq.com/platform/sdks/rust\" rel=\"noopener noreferrer\">Rust SDK</a> enough.  It is my first and preferred way to work with Momento.</p><p>Working with client code that is insecure by nature that also needs to authenticate with the Momento API for things like Topic subscriptions can be a challenge.  However, by implementing a token vending machine with Rust, deployed with Lambda, and monitored with Datadog produces a solution that is fast, reliable, and observable.  </p><p>I've been saying this for a while, but I truly believe that building Lambda Functions with Rust is the way to go.  And I love seeing companies like Momento invest in Rust specific SDKs.  This feature to build disposable tokens was just added in 2025 and will unlock developers to implement this vending machine pattern in Rust like I've shown the article.  </p><p>Thanks for reading and happy building!</p>","contentLength":10231,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Upskilling to Rust from Python","url":"https://dev.to/rustds/upskilling-to-rust-from-python-mok","date":1739550595,"author":"Michael Gonzalez","guid":549,"unread":true,"content":"<p>I’m a long-time data analyst with some data engineering experience. My overall stack time is about:</p><ul><li>Tableau Desktop – 10 years</li></ul><p>A few years ago, I embarked on a mission to be full stack. I picked up Python and learned how to do ETL operations on my own. I’ve heard great things about the speed and efficiency benefits of Rust over Python, so I wanted to put it to the test.</p><p>The basic question I have is: what is the absolute furthest that I can take Rust in the direction of data science (to include AI applications) and data engineering? The library environment for data science is extremely robust for Python and I know it’s substantially smaller for Rust, but I’m still interested in taking it as far as I can. Over the next few months, I’m going to be upskilling in Rust and seeing where Rust for DS goes.</p><p>I’m very aware of structural differences of Rust compared to Python. Memory management and static typing are elements that I’ve never had to care about, but it’s going to need to be a consideration moving forward. Ultimately, I think giving Rust a try will make me a more consciencious developer in that there are a lot of things I just took for granted with Python and SQL.</p><p>I know absolutely no Rust right now, so I’m leaning on Duke University’s Rust Fundamentals course through Coursera to get me up to speed on the basics.</p><p>The first week of the course revolved around setting up the VS Code environment for Rust, deploying GitHub Copilot, setting up the dev container, and dockerizing it.</p><p>I’m very familiar with VS Code for local development, but actually using Docker and working in a containerized environment is new. I’ve been wanting to containerize my org’s Python development environment for at least a year (it’s further down the to-do list), so spending some time on this is gonna pay off later on.</p><p>No actual Rust development work yet. Looking ahead, it appears that week 2 of the course jumps right into for and while loops. Ech, not a favorite topic of mine, but essential nonetheless.</p><p>Anyone else using Rust for data operations?</p>","contentLength":2073,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Unlocking global AI potential with next-generation subsea infrastructure","url":"https://engineering.fb.com/2025/02/14/connectivity/project-waterworth-ai-subsea-infrastructure/","date":1739550486,"author":"","guid":300,"unread":true,"content":"<p><a href=\"https://globaldigitalinclusion.org/wp-content/uploads/2024/01/GDIP-Good-Practices-for-Subsea-Cables-Policy-Investing-in-Digital-Inclusion.pdf\"></a></p><p><a href=\"https://engineering.fb.com/2021/03/28/connectivity/echo-bifrost/\"></a><a href=\"https://engineering.fb.com/2021/09/28/connectivity/2africa-pearls/\"></a></p>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"LangCompiler: A Cloud-Native, High-Performance Code Execution Service","url":"https://dev.to/bladearya/langcompiler-a-cloud-native-high-performance-code-execution-service-5a2i","date":1739549239,"author":"Amit Kumar Rout","guid":571,"unread":true,"content":"<p>Smooth, secure, and scalable execution of code is of paramount concern in modern software development for a variety of applications, from education systems to enterprise applications. LangCompiler has been created to cater to this demand by providing a cloud-native, high-performance environment for code execution across a variety of programming languages.</p><p>LangCompiler is an elegantly crafted service that provides secure and scalable code execution across a wide spectrum of programming languages. It currently supports Python, Java, JavaScript, and C++, with further expansion planned in response to community requirements. Its versatility makes it a developer, educator, and enterprise favorite.</p><ul><li><p> The service provides code execution across four popular languages (Python, Java, JavaScript, and C++), with further expansion planned.</p></li><li><p><strong>Dynamic Resource Constraints:</strong> It is scalable, managing workloads efficiently through resource-aware execution.</p></li><li><p> The service includes extensive logging and debugging to guarantee seamless execution.</p></li><li><p><strong>Comprehensive Execution Metrics:</strong> Users can monitor performance, detect inefficiencies, and optimize workloads.</p></li><li><p><strong>Secure and Isolated Execution:</strong> It includes security features to prevent unauthorized access and code protection.</p></li></ul><h2>\n  \n  \n  Built with Golang and Docker\n</h2><p>To ensure high performance and reliability, LangCompiler is built using Golang, leveraging its efficiency and concurrency features. Additionally, it is Dockerized to provide an isolated execution environment, ensuring consistent and secure execution across different workloads. The service is hosted on Render, allowing seamless deployment, scaling, and management.</p><p>We invite developers, educators, and enterprises to explore LangCompiler and take advantage of its robust capabilities. To further enhance API development, we encourage you to check out our premium plans.</p>","contentLength":1859,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Publish Interactive Data Visualizations for Free with Python and Marimo","url":"https://towardsdatascience.com/publish-interactive-data-visualizations-for-free-with-python-and-marimo/","date":1739548800,"author":"Sam Minot","guid":8,"unread":true,"content":"<p>Working in <a href=\"https://towardsdatascience.com/tag/data-science/\" title=\"Data Science\">Data Science</a>, it can be hard to share insights from complex datasets using only static figures. All the facets that describe the shape and meaning of interesting data are not always captured in a handful of pre-generated figures. While we have powerful technologies available for presenting interactive figures — where a viewer can rotate, filter, zoom, and generally explore complex data  —  they always come with tradeoffs.</p><p>Here I present my experience using a recently released Python library — <a href=\"https://marimo.io\">marimo</a> — which opens up exciting new opportunities for publishing interactive visualizations across the entire field of data science.</p><h2>Interactive Data Visualization</h2><p>The tradeoffs to consider when selecting an approach for presenting data visualizations can be broken into three categories:</p><ul><li> — what visualizations and interactivity am I able to present to the user?</li><li> — what are the resources needed for displaying this visualization to users (e.g. running servers, hosting websites)?</li><li> – how much of a new skillset / codebase do I need to learn upfront?</li></ul><p> is the foundation of portable interactivity. Every user has a web browser installed on their computer and there are many different frameworks available for displaying any degree of interactivity or visualization you might imagine (for example, this <a href=\"https://threejs.org/\">gallery of amazing things people have made with three.js</a>). Since the application is running on the user’s computer, no costly servers are needed. However, a significant drawback for the data science community is ease of use, as JS does not have many of the high-level (i.e. easy-to-use) libraries that data scientists use for data manipulation, plotting, and interactivity.</p><p> provides a useful point of comparison. Because of its <a href=\"https://flatironschool.com/blog/python-popularity-the-rise-of-a-global-programming-language/\">continually growing popularity</a>, some have called this the <a href=\"https://towardsdatascience.com/we-are-living-in-the-era-of-python-bc032d595f6a\">“Era of Python”</a>. For data scientists in particular, Python stands alongside R as one of the foundational languages for quickly and effectively wielding complex data. While Python may be easier to use than Javascript, there are fewer options for presenting interactive visualizations. Some popular projects providing interactivity and visualization have been <a href=\"https://flask.palletsprojects.com/en/stable/\">Flask</a>, <a href=\"https://dash.plotly.com/\">Dash</a>, and <a href=\"https://streamlit.io/\">Streamlit</a> (also worth mentioning — <a href=\"https://docs.bokeh.org/en/latest/docs/gallery.html\">bokeh</a>, <a href=\"https://holoviews.org/\">HoloViews</a>, <a href=\"https://altair-viz.github.io/altair-tutorial/README.html\">altair</a>, and <a href=\"https://plotly.com/python/\">plotly</a>). The biggest tradeoff for using Python has been the cost for publishing – delivering the tool to users. In the same way that <a href=\"https://www.shinyapps.io/\">shinyapps</a> require a running computer to serve up the visualization, these Python-based frameworks have exclusively been server-based. This is by no means prohibitive for authors with a budget to spend, but it does limit the number of users who can take advantage of a particular project.</p><p><a href=\"https://pyodide.org/en/stable/\"></a> is an intriguing middle ground — Python code running directly in the web browser using <a href=\"https://webassembly.org/\">WebAssembly</a> (WASM). There are resource limitations (only 1 thread and 2GB memory) that make this impractical for doing the heavy lifting of data science. , this can be more than sufficient for building visualizations and updating based on user input. Because it runs in the browser, no servers are required for hosting. Tools that use Pyodide as a foundation are interesting to explore because they give data scientists an opportunity to write Python code which runs directly on users’ computers without their having to install or run anything outside of the web browser.</p><p>As an aside, <a href=\"https://towardsdatascience.com/python-based-data-viz-with-no-installation-required-aaf2358c881\">I’ve been interested previously in</a> one project that has tried this approach: <a href=\"https://github.com/whitphx/stlite\">stlite</a>, <a href=\"https://edit.share.stlite.net/\">an in-browser implementation of Streamlit</a> that lets you deploy these flexible and powerful apps to a broad range of users. However, a core limitation is that Streamlit itself is distinct from stlite (the port of Streamlit to WASM), which means that not all features are supported and that advancement of the project is dependent on two separate groups working along compatible lines.</p><ul><li>The interface resembles a Jupyter , which will be familiar to users.</li><li>Execution of cells is , so that updating one cell will rerun all cells which depend on its output.</li><li> can be captured with a flexible set of UI components.</li><li>Notebooks can be quickly converted into , hiding the code and showing only the input/output elements.</li><li>Apps can be run locally or converted into using WASM/Pyodide.</li></ul><p>marimo balances the tradeoffs of technology in a way that is well suited to the skill set of the typical data scientists:</p><ul><li> — user input and visual display features are rather extensive, <a href=\"https://docs.marimo.io/guides/working_with_data/plotting/#reactive-plots\">supporting user input</a> via Altair and Plotly plots.</li><li> — deploying as static webpages is basically free — no servers required</li><li> — for users familiar with Python notebooks, marimo will feel very familiar and be easy to pick up.</li></ul><h2>Publishing Marimo Apps on the Web</h2><p>As a simple example of the type of display that can be useful in data science, consisting of explanatory text interspersed with interactive displays, I have created a barebones <a href=\"https://github.com/FredHutch/marimo-publication\">GitHub repository</a>. Try it out yourself <a href=\"https://fredhutch.github.io/marimo-publication/\">here</a>.</p><p>Using just a little bit of code, users can:</p><ul><li>Generate visualizations with flexible interactivity</li><li>Write narrative text describing their findings</li><li>Publish to the web for free (i.e. using GitHub Pages)</li></ul><h2>Public App / Private Data</h2><p>This new technology offers an exciting new opportunity for collaboration — publish the app publicly to the world, but users can only see specific datasets that they have permission to access.</p><p>Rather than building a dedicated data backend for every app, user data can be stored in a generic backend which can be securely authenticated and accessed using a Python client library — all contained within the user’s web browser. For example, the user is given an OAuth login link that will authenticate them with the backend and allow the app to temporarily access input data.</p><p>As a proof of concept, I built a simple visualization app which connects to <a href=\"https://cirro.bio\">the Cirro data platform</a>, which is used at my institution to manage scientific data. Full disclosure: I was part of the team that built this platform before it spun out as an independent company. In this manner users can:</p><ul><li>Load the public visualization app — hosted on GitHub Pages</li><li>Connect securely to their private data store</li><li>Load the appropriate dataset for display</li><li>Share a link which will direct authorized collaborators to the same data</li></ul><p>As a data scientist, this approach of publishing free and open-source visualization apps which can be used to interact with private datasets is extremely exciting. Building and publishing a new app can take hours and days instead of weeks and years, letting researchers quickly share their insights with collaborators and then publish them to the wider world.</p>","contentLength":6594,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Top 22 Sites To Buy Verified Binance Accounts personal","url":"https://dev.to/hiya_tili_6b6c8383c5ae8c4/top-22-sites-to-buy-verified-binance-accounts-personal-41fk","date":1739546484,"author":"Hiya Tili","guid":570,"unread":true,"content":"<p><strong>If you want to more information just contact now.\nTelegram: @itzonesmm0\nWhatsApp: +1 (989) 513-2521<a href=\"mailto:liveitzonesmm@gmail.com\">liveitzonesmm@gmail.com</a></strong></p><p><strong>Buy Verified Binance Account</strong>\nLooking to <a href=\"https://itzonesmm.com/product/buy-verified-binance-accounts/\" rel=\"noopener noreferrer\">Buy Verified Binance Account</a>? Purchase one for instant access to trading features, securely. If you want to Buy Verified Binance Account then itzonesmm.com is the best option for you.</p><p>In today’s fast-paced digital world, online trading platforms like Binance have become increasingly popular among individuals looking to invest in cryptocurrencies. To ensure a smooth entry into the world of crypto trading, having a verified Binance account is essential. By purchasing a verified account, you can bypass the lengthy verification process and start trading immediately.</p><p><strong>Buy Verified Binance Account\nBuy Verified Binance Account</strong>\nThis hassle-free option saves you time and allows you to take advantage of market opportunities swiftly. Additionally, a verified account provides added security and access to advanced trading features. Ready to kickstart your crypto journey? Invest in a verified Binance account today and stay ahead in the ever-evolving crypto market.</p><p><strong>The Importance Of A Verified Binance Account</strong>\nBuying and selling cryptocurrencies through a reputable platform like Binance is a popular practice. However, having a verified Binance account is of utmost importance to ensure a secure and advanced trading experience. In this section, we’ll delve into the significance of a verified Binance account and the benefits it offers.</p><p><strong>Enhanced Security Measures</strong>\nWhen you have a verified Binance account, you can benefit from enhanced security measures that add an extra layer of protection to your account. Two-factor authentication and withdrawal whitelisting are just a few examples of the security features available to verified users. This significantly reduces the risk of unauthorized access to your account and provides peace of mind when engaging in cryptocurrency transactions.</p><p><strong>Access To Advanced Trading Features</strong>\nA verified Binance account grants access to advanced trading features that are not available to unverified users. These features include higher withdrawal limits, access to futures and margin trading, and participation in token sales. By verifying your account, you can take advantage of these advanced tools and broaden your trading opportunities, allowing for a more diverse and potentially profitable trading experience.</p><p><strong>The Process Of Verifying A Binance Account</strong>\nBuying a verified Binance account can be a time-saving option for cryptocurrency enthusiasts. It eliminates the need to go through the rigorous process of account verification. However, if you choose to verify your own Binance account, here is a breakdown of the steps involved.</p><p>\nTo start the process, log in to your <a href=\"https://itzonesmm.com/product/buy-verified-binance-accounts/\" rel=\"noopener noreferrer\">Binance account</a> and navigate to the user dashboard. Choose the option for account verification and select the type of verification you wish to undergo. You will be asked to provide personal details such as your full name, address, and date of birth. Next, upload a scanned copy of your government-issued ID, such as a driver’s license or passport. Make sure all details are accurate and match the information on the ID provided.</p><p><strong>Additional Verification Steps</strong>\nAfter submitting your identity verification, Binance may require additional steps to complete the process. This could include providing proof of address, such as a utility bill or bank statement. You may also need to go through facial recognition verification to ensure the account belongs to the rightful owner. Once all steps are completed, await approval from Binance, which typically takes a few business days.</p><p><strong>Benefits Of Buying A Verified Binance Account</strong>\nIf you are an aspiring cryptocurrency trader, you know how important it is to have a verified Binance account. However, going through the tedious verification process can be a hassle and time-consuming. That’s why buying a verified Binance account can offer you several benefits, allowing you to focus on what matters most – trading.</p><p><strong>If you want to more information just contact now.\nTelegram: @itzonesmm0\nWhatsApp: +1 (989) 513-2521<a href=\"mailto:liveitzonesmm@gmail.com\">liveitzonesmm@gmail.com</a></strong></p><p><strong>Instant Access To Trading</strong>\nWhen you purchase a verified Binance account, you gain immediate access to the platform’s trading services. Unlike the traditional account creation and verification method that can take days or even weeks, buying a verified account cuts the waiting time significantly. This means you can start trading and capitalizing on potential market opportunities without delay. </p><p><strong>Avoiding Verification Hassles</strong>\nVerification processes can be cumbersome and time-consuming. From providing personal identification documents to answering questionnaires, the process can sometimes feel intrusive. By purchasing a verified Binance account, you eliminate the need to go through this whole process. You can skip the hassle and start trading right away. This is especially beneficial if you are looking to capitalize on time-sensitive market movements or seize profitable trade opportunities.</p><p>Furthermore, buying a verified account saves you from the frustration of potential verification failures. Sometimes, applicants face rejection due to minor errors or document discrepancies, resulting in extended waiting times. By bypassing the verification process, you eliminate the risk of encountering such setbacks and can focus solely on your trading activities.</p><p>With the benefits of instant access to trading and avoiding verification hassles, buying a verified Binance account provides a convenient and efficient solution for crypto enthusiasts.</p><p>\nWhen considering the purchase of a verified Binance account, it’s essential to understand the potential risks and regulatory considerations involved. This will ensure that you are making an informed decision and taking into account the potential pitfalls that may arise.</p><p>\nUnfortunately, the crypto industry is not immune to scams, and purchasing a verified Binance account comes with its own set of risks. There is the potential for scammers to falsely advertise verified accounts, leading to financial loss and account security issues. It’s crucial to thoroughly research the seller and verify their legitimacy to avoid falling victim to fraudulent activity.</p><p>\nAdditionally, regulatory compliance is a key consideration when purchasing a <a href=\"https://itzonesmm.com/product/buy-verified-binance-accounts/\" rel=\"noopener noreferrer\">verified Binance account</a>. It’s important to ensure that the account has been obtained and verified through legal and compliant means. Failure to comply with regulatory requirements could result in account suspension or legal repercussions, making it essential to verify the authenticity of the account and its compliance with relevant regulations.</p><p><strong>Choosing A Reliable Service Provider</strong>\nWhen finding a service provider to Buy Verified Binance Account, reliability is crucial. Look for reputable sellers with positive customer reviews and a track record of delivering quality, verified accounts. Taking the time to research and choose a reliable service provider can ensure a smooth and secure experience.</p><p><strong>Reputation And Trustworthiness</strong>\nReputable Binance account service providers like itzonesmm have a solid track record and are known for their trustworthiness.</p><p>Look for providers with a strong reputation in the industry to ensure security and reliability. Then itzonesmm.com is the salutation for you.</p><p><strong>Customer Reviews And Feedback</strong>\nReading customer reviews and feedback can provide insight into the service quality offered by itzonesmm.</p><p>Positive reviews are a good indicator that the service is reliable and trustworthy.</p><p><strong>Legal And Ethical Implications</strong>\nThe purchase and use of a verified Binance account raise legal and ethical implications that need to be considered. Compliance with anti-money laundering regulations, data privacy, and identity verification are crucial to ensure a secure and transparent trading environment.</p><p><strong>The Future Of Binance Account Verification</strong>\nAs the cryptocurrency market continues to expand, so does the need for robust security measures. In this context, the verification process for Binance accounts is evolving rapidly. This not only impacts the trading environment but also sets the stage for a more secure and reliable platform for traders.</p><p><strong>Evolution Of Verification Procedures</strong>\nThe evolution of Binance account verification procedures reflects the platform’s commitment to heightened security. The initial verification process mainly focused on email verification and two-factor authentication. However, as the market dynamics and regulatory requirements evolved, Binance introduced enhanced verification levels. This includes personal identification verification, know-your-customer (KYC) procedures, and even address verification. These steps are crucial in protecting user assets and ensuring compliance with industry regulations.</p><p><strong>Impact On Trading Environment</strong>\nThe impact of these evolving verification procedures is significant for the trading environment. With stricter verification measures in place, Binance creates a safer space for traders to engage in cryptocurrency transactions. Traders can have greater trust in the platform, knowing that stringent verification processes are in place to deter fraudulent activities. Additionally, enhanced verification procedures also pave the way for a more seamless integration with traditional financial systems, making crypto trading more accessible and widely accepted.</p><p><strong>Market Trends And User Experiences</strong>\nVerified Binance accounts are becoming increasingly popular due to the heightened security they offer to users.</p><p>\nUsers report high levels of satisfaction with verified Binance accounts</p><p><strong>Trends In Verified Account Ownership</strong>\nOwnership of verified Binance accounts is on the rise as more users seek secure trading options.</p><p><strong>Faqs About Verified Binance Accounts</strong>\nAs more traders and investors flock to the world of cryptocurrency, platforms like Binance have gained immense popularity. One way to enhance your experience on Binance is by getting a verified account. In this section, we’ll address some frequently asked questions about verified Binance accounts and provide you with the information you need to make an informed decision.</p><p>\nIf you’re considering getting a verified <a href=\"https://itzonesmm.com/product/buy-verified-binance-accounts/\" rel=\"noopener noreferrer\">Binance account</a>, it’s natural to have questions about security. Binance takes security seriously and implements several measures to protect its users. One of these measures is the Know Your Customer (KYC) process, which requires users to verify their identity and provide relevant documents.</p><p>With a verified account, you can have peace of mind knowing that your funds and personal information are better protected. The verification process helps ensure that only legitimate users gain access to the platform, reducing the risk of fraudulent activities.</p><p>Moreover, Binance employs industry-standard security protocols, such as two-factor authentication (2FA) and encryption, to safeguard user accounts. These additional layers of security give you an added level of confidence when trading or storing your cryptocurrencies on the platform.</p><p><strong>Transferability Of Verified Status</strong>\nOnce you acquire a verified Binance account, you might wonder if the verified status is transferable. The short answer is no. Verification is linked to the individual user account and cannot be transferred to another user.</p><p>This means that if you’re looking to purchase a verified Binance account from someone else, it’s important to tread with caution. The selling or transferring of verified Binance accounts is strictly against Binance’s terms of service, and engaging in such activities could result in your account being permanently suspended.</p><p>It’s important to note that Binance’s strict stance on verification transferability is in place to protect users’ security and prevent fraudulent activities. By ensuring that each user goes through the verification process individually, Binance maintains a safer trading environment for all its users.</p><p>while you cannot transfer a verified Binance account, you can easily go through the verification process on your own to enjoy the benefits and added security that come with it.</p><p><strong>Conclusion And Final Thoughts</strong>\nConsidering the pros and cons, buying a verified Binance account can offer a range of benefits for traders. It provides a streamlined process for account verification, reducing the waiting time and frustrations associated with manual verification. However, it’s important to weigh these advantages against potential risks and drawbacks. By empowering trading decisions, a verified Binance account allows traders to quickly delve into the world of cryptocurrency and start trading. Whether you’re a beginner or an experienced trader, having a verified Binance account can give you a competitive edge in the market.</p><p>Weighing The Pros And Cons\nBefore purchasing a verified Binance account, it is essential to evaluate the pros and cons. Let’s take a closer look at what you should consider:</p><p>Streamlined verification process: By buying a verified Binance account, you can skip the hassle of manual verification, significantly reducing the waiting time and potential frustrations.\nImmediate access to trading: With a verified Binance account, you can start trading cryptocurrencies right away, without any delays.<p>\nEnhanced security measures: Verified Binance accounts typically come with advanced security features, such as two-factor authentication, providing an added layer of protection for your funds.</p>\nExpert support: Some providers of verified Binance accounts offer dedicated customer support to assist you with any inquiries or issues you may encounter.</p><p>Reliance on a third party: When purchasing a verified Binance account, you need to trust the provider to deliver a legitimate and secure account.\nPotential risks: As with any online financial transaction, there is always a risk of encountering fraudulent or scammy providers. It’s crucial to thoroughly research and choose a reputable provider with positive reviews.<a href=\"https://itzonesmm.com/product/buy-verified-binance-accounts/\" rel=\"noopener noreferrer\">Verified Binance accounts</a> may come with a price tag, and it’s important to evaluate the cost versus the value it adds to your trading experience.\nLimited personalization: When buying a verified Binance account, you may not have the option to customize certain account settings or preferences according to your specific needs.<p>\nEmpowering Trading Decisions</p>\nA verified Binance account can empower your trading decisions by providing quick and efficient access to the cryptocurrency market. The streamlined verification process eliminates the frustration of waiting for manual verification, enabling you to take advantage of market opportunities swiftly. Whether you’re a day trader, swing trader, or long-term investor, having a verified Binance account equips you with the necessary tools to make informed and impactful trading decisions.</p><p>while buying a verified Binance account comes with its pros and cons, it definitely offers advantages for those looking to expedite the account verification process and start trading cryptocurrencies promptly. However, one must exercise caution when choosing a provider and thoroughly evaluate the potential risks involved.</p><p>Frequently Asked Questions</p><p><strong>How To Get Verified In Binance?</strong>\nTo get verified in Binance, go to your account settings, complete identity verification, submit required documents, and wait for approval. </p><p><strong>Can I Have Two Verified Binance Accounts?</strong>\nNo, Binance allows only one verified account per user. Creating multiple accounts violates their terms of service.</p><p><strong>What Is A Binance Account?</strong>\nA Binance account is a digital wallet for trading cryptocurrencies like Bitcoin and Ethereum. It allows users to buy, sell, and store various digital assets. With a Binance account, you can participate in the cryptocurrency market and manage your investments securely.</p><p><strong>How To Verify Entity Account Binance?</strong>\nTo verify entity accounts on Binance, submit required documents via the website for verification process.</p><p><strong>Can I Buy Verified Binance Account Online?</strong>\nYes, you can Buy Verified Binance Account online from itzonesmm.com </p><p>What Are The Benefits Of Buying A Verified Binance Account?\nBuying a verified Binance account saves time and effort required for the verification process, ensuring immediate access to the platform’s features and services.</p><p><strong>Is It Legal To Buy Verified Binance Account?</strong>\nWhile buying a verified Binance account is not illegal, it is against Binance’s terms and conditions, which may result in the account being banned or frozen.</p><p><strong>Are Verified Binance Accounts Safe To Use?</strong>\nVerified Binance accounts are generally safe to use, but it is essential to exercise caution and follow Binance’s security guidelines to protect your account from unauthorized access or hacking attempts.</p><p>How Do I Find Reputable Sellers Of Verified Binance Accounts?\nTo find reputable sellers of verified Binance accounts, you can rely on online marketplaces, forums, or seek recommendations from trusted sources within the cryptocurrency community.</p><p>\nInvest in a verified Binance account to enhance your trading journey. Take advantage of security and convenience. Maximize your opportunities and streamline transactions. Don’t miss out on the benefits of a trusted account. Start your journey to success with Binance today!</p><p><strong>If you want to more information just contact now.\nTelegram: @itzonesmm0\nWhatsApp: +1 (989) 513-2521<a href=\"mailto:liveitzonesmm@gmail.com\">liveitzonesmm@gmail.com</a></strong></p>","contentLength":17340,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hugo van Kemenade: Improving licence metadata","url":"https://hugovk.dev/blog/2025/improving-licence-metadata/","date":1739545860,"author":"","guid":167,"unread":true,"content":"<p><a href=\"https://peps.python.org/pep-0639/\" target=\"_blank\" rel=\"noreferrer\">PEP 639</a> defines a spec on how to document licences\nused in Python projects.</p><p>Change  as follows.</p><p>I usually use Hatchling as a build backend, and support was added in 1.27:</p><div><pre tabindex=\"0\"><code></code></pre></div><p>Replace the freeform  field with a valid SPDX license expression, and add\n which points to the licence files in the repo. There’s often only one,\nbut if you have more than one, list them all:</p><div><pre tabindex=\"0\"><code></code></pre></div><p>Optionally delete the deprecated licence classifier:</p><div><pre tabindex=\"0\"><code></code></pre></div><p>Then make sure to use a PyPI uploader that supports this.</p><p>pip can also show you the metadata:</p><div><pre tabindex=\"0\"><code></code></pre></div><p>A lot of work went into this. Thank you to PEP authors\n<a href=\"https://github.com/pombredanne\" target=\"_blank\" rel=\"noreferrer\">Philippe Ombredanne</a> for creating the first draft in\n2019, to <a href=\"https://github.com/cam-gerlach\" target=\"_blank\" rel=\"noreferrer\">C.A.M. Gerlach</a> for the second draft in 2021,\nand especially to <a href=\"https://karolinasurma.eu/\" target=\"_blank\" rel=\"noreferrer\">Karolina Surma</a> for getting the third\ndraft finish line and helping with the implementation.</p><p>And many projects were updated to support this, thanks to the maintainers and\ncontributors of at least:</p>","contentLength":878,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"5 Tips for Building a Data Science Portfolio","url":"https://www.kdnuggets.com/5-tips-building-data-science-portfolio","date":1739545225,"author":"Nate Rosidi","guid":252,"unread":true,"content":"<article>Not every data science portfolio is worth showcasing. Follow these five tips to build a portfolio that impresses employers and gets you a job.</article>","contentLength":142,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/Rosidi_5_Tips_for_Building_a_DS_Portfolio_4.png","enclosureMime":"","commentsUrl":null},{"title":"Deep Dive into net/netip AddrPort Methods 6/7","url":"https://dev.to/rezmoss/deep-dive-into-netnetip-addrport-methods-67-3gn3","date":1739545200,"author":"Rez Moss","guid":569,"unread":true,"content":"<p>Hey there! In our previous article, we explored Addr methods in detail. Now let's dive deep into AddrPort methods. AddrPort is a crucial type when working with network services since it combines an IP address with a port number. We'll explore every method with practical examples and real-world use cases.</p><p>First, let's look at all the ways to work with AddrPort.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h3>\n  \n  \n  1. Service Discovery System\n</h3><p>Here's a robust service discovery implementation using AddrPort:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  2. Connection Pool Manager\n</h3><p>A connection pool that uses AddrPort for endpoint tracking:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  3. Load Balancer Implementation\n</h3><p>A load balancer using AddrPort for backend management:</p><div><pre><code></code></pre></div><ol><li>\nAlways validate AddrPort before use:\n</li></ol><div><pre><code></code></pre></div><ol><li>\nBe careful with string conversions:\n</li></ol><div><pre><code></code></pre></div><ol><li>\nCheck port numbers when needed:\n</li></ol><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>In our next article, we'll explore Prefix methods in depth, completing our detailed examination of the core types in net/netip. We'll see how to work effectively with CIDR notations and subnet operations.</p><p>Until then, keep experimenting with AddrPort! It's a fundamental building block for network services in Go.</p>","contentLength":1071,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Transform your codebase into a single Markdown doc for feeding into AI","url":"https://tesserato.web.app/posts/2025-02-12-CodeWeaver-launch/index.html","date":1739539403,"author":"tesserato","guid":450,"unread":true,"content":"<p>CodeWeaver is a command-line tool designed to weave your codebase into a single, easy-to-navigate Markdown document. It recursively scans a directory, generating a structured representation of your project's file hierarchy and embedding the content of each file within code blocks. This tool simplifies codebase sharing, documentation, and integration with AI/ML code analysis tools by providing a consolidated and readable Markdown output.\nThe output for the current repository can be found <a href=\"https://github.com/tesserato/CodeWeaver/blob/main/codebase.md\">here</a>.</p><ul><li><strong>Comprehensive Codebase Documentation:</strong> Generates a Markdown file that meticulously outlines your project's directory and file structure in a clear, tree-like format.</li><li> Embeds the complete content of each file directly within the Markdown document, enclosed in syntax-highlighted code blocks based on file extensions.</li><li>  Utilize regular expressions to define ignore patterns, allowing you to exclude specific files and directories from the generated documentation (e.g., , build artifacts, specific file types).</li><li> Choose to save lists of included and excluded file paths to separate files for detailed tracking and debugging of your ignore rules.</li><li><strong>Simple Command-Line Interface:</strong>  Offers an intuitive command-line interface with straightforward options for customization.</li></ul><p>If you have Go installed, run <code>go install github.com/tesserato/CodeWeaver@latest</code>to install the latest version of CodeWeaver or <code>go install github.com/tesserato/CodeWeaver@vX.Y.Z</code> to install a specific version.</p><p>Alternatively, download the appropriate pre built executable from the <a href=\"https://github.com/tesserato/CodeWeaver/releases\">releases page</a>.</p><p>If necessary, make the  executable by using the  command:</p><table><thead><tr></tr></thead><tbody><tr><td>The root directory to scan and document.</td></tr><tr><td>The name of the output Markdown file.</td></tr><tr><td><code>-ignore \"&lt;regex patterns&gt;\"</code></td><td>Comma-separated list of regular expression patterns for paths to exclude.</td></tr><tr><td><code>-included-paths-file &lt;filename&gt;</code></td><td>File to save the list of paths that were included in the documentation.</td></tr><tr><td><code>-excluded-paths-file &lt;filename&gt;</code></td><td>File to save the list of paths that were excluded from the documentation.</td></tr><tr><td>Display this help message and exit.</td></tr></tbody></table><h2><strong>Generate documentation for the current directory:</strong></h2><p>This will create a file named  in the current directory, documenting the structure and content of the current directory and its subdirectories (excluding paths matching the default ignore pattern ).</p><h2><strong>Specify a different input directory and output file:</strong></h2><pre><code>./codeweaver -dir=my_project -output=project_docs.md\n</code></pre><p>This command will process the  directory and save the documentation to .</p><h2><strong>Ignore specific file types and directories:</strong></h2><pre><code>./codeweaver -ignore=\"\\.log,temp,build\" -output=detailed_docs.md\n</code></pre><p>This example will generate , excluding any files or directories with names containing , , or . Regular expression patterns are comma-separated.</p><h2><strong>Save lists of included and excluded paths:</strong></h2><pre><code>./codeweaver -ignore=\"node_modules\" -included-paths-file=included.txt -excluded-paths-file=excluded.txt -output=code_overview.md\n</code></pre><p>This command will create  while also saving the list of included paths to  and the list of excluded paths (due to the  ignore pattern) to .</p><p>Contributions are welcome! If you encounter any issues, have suggestions for new features, or want to improve CodeWeaver, please feel free to open an issue or submit a pull request on the project's GitHub repository.</p><p>CodeWeaver is released under the <a href=\"https://tesserato.web.app/posts/2025-02-12-CodeWeaver-launch/LICENSE\">MIT License</a>. See the  file for complete license details.</p>","contentLength":3311,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43048027"},{"title":"[Boost]","url":"https://dev.to/jisbruzzi/-2734","date":1739535786,"author":"José Ignacio Sbruzzi","guid":568,"unread":true,"content":"<h2>Advanced RabbitMQ and Go: Tackling Channel Closures in Exclusive Queues</h2>","contentLength":71,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: A New Way to Learn Languages","url":"https://www.langturbo.com/","date":1739534938,"author":"sebnun","guid":449,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43047554"},{"title":"Real Python: The Real Python Podcast – Episode #239: Behavior-Driven vs Test-Driven Development &amp; Using Regex in Python","url":"https://realpython.com/podcasts/rpp/239/","date":1739534400,"author":"","guid":97,"unread":true,"content":"<p>What is behavior-driven development, and how does it work alongside test-driven development? How do you communicate requirements between teams in an organization? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>","contentLength":279,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Daniel Roy Greenfeld: Building a playing card deck","url":"https://daniel.feldroy.com/posts/2025-02-deck-of-cards","date":1739526604,"author":"","guid":166,"unread":true,"content":"<article>Today is Valentine's Day. That makes it the perfect day to write a blog post about showing how to not just build a deck of cards, but show off cards from the heart suite.</article>","contentLength":170,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"1BRC in PHP FFI + Rust","url":"https://dev.to/gfabrizi/1brc-in-php-ffi-rust-5ed9","date":1739524380,"author":"Gianluca Fabrizi","guid":548,"unread":true,"content":"<p>We have tried multi-threading in PHP to speed up execution time; the results are good, but far from perfect. Is there another way we can improve PHP's performance?</p><p>In the previous post, we gave an overview of 1BRC, tried to push the limits of PHP when discussing performance optimization, and ran our best PHP script on an EC2 instance.</p><p>The results were not bad, but not noteworthy either: 17.0636 seconds (the fastest Java code took 1.535 seconds).</p><p>So what are we supposed to do? Call it a day and get on with our lives? No, obviously not!\nWe could \"cheat\" our way to a better score, by abusing one of Python's winning strategies: letting external libraries do the heavy lifting job!</p><h2>\n  \n  \n  Foreign Function Interface\n</h2><p>One of the ways to optimize an interpreted language is by moving the slow operations in an external module, usually written in a low-level language.\nIn PHP you can write system-wide modules and enable them in ; this is useful for generic functions or for code that is not specific to one application.\nSince version 7.4 PHP introduced a new feature: Foreign Function Interface (FFI).<p>\nFFI is a method for calling external libraries in your PHP coding, without changing global PHP configuration.</p>\nThis method is more flexible than dealing with modules, but configuring it could be a bit daunting at first.</p><p>Let's try to wrap a Rust solution of 1BRC in a PHP script (yes, ok, we are definitely cheating).</p><p>To keep things simple we need a Rust solution that:</p><ol><li>it's written in a clear way</li><li>it's composed of a few files</li></ol><p>There's no need to explain point ; points  and  are needed because we are going to modify the code to make it work as a module.\nI love Rust, but I'm not a Rust programmer, so the simpler the code the better.  </p><p>First of all, we clone the repository, then we edit the  file to add some options:</p><div><pre><code></code></pre></div><p>In the  section, we enabled additional performance optimizations (, , ); we added the  section, where we specify that we want to compile the source as a  library (shared libraries that can be linked into external programs).  </p><p> file is used just to call ; we remove this file and add a  method in :</p><div><pre><code></code></pre></div><p> disables the mangle (in short: it keeps the function's name in the exported library) and marks this function as \"to export\".  </p><p>We are cheating, but in a responsible way 😅: from PHP code, we pass the weather data filename to the Rust module. Then the Rust module returns the station's aggregated data to be displayed.\nPHP is a loosely-typed language, while Rust is a strongly-typed language, so moving data between the two can be a bit of a challenge-in-the-challenge. We need  crate and  from .  </p><p>The code needed to convert from PHP String to Rust string slice has been taken from ; using it's words:</p><blockquote><p>Getting a Rust string slice (&amp;str) requires a few steps:</p><ol><li><p>We need to make sure that the C pointer is not  as Rust references are not allowed to be .</p></li><li><p>Use  to wrap the pointer.  will compute the string's length based on the terminating . This requires an  block as we will be dereferencing a raw pointer, which the Rust compiler cannot verify meets all the safety guarantees so the programmer must do it instead.</p></li><li><p>Ensure the C string is valid UTF-8 and convert it to a Rust string slice.</p></li></ol></blockquote><p>In  we use this code:</p><div><pre><code></code></pre></div><p>to return a JSON string to the PHP script.  </p><p>That's it for Rust; we can compile the library with:</p><p>On the PHP side first of all we need a class to manage the input and output of th Rust module. Let's create a file called :</p><div><pre><code></code></pre></div><p>The constructor's code uses  to import the Rust function from the  file.\nHere we have to declare the extern function's signature using C code, so the Rust  parameters, become .</p><p>: it's also possible to use a  header file to specify the function(s) that PHP needs to know about; since we only need one simple function, it is easier to declare it inline in PHP code.</p><p>The  method invokes the  method of the Rust module (<code>self::$ffi-&gt;run($filename)</code>). We called both this wrapper method and the Rust function with the same name (); this is only a coincidence (...or lack of fantasy); it's not mandatory. converts the pointer to a String usable in PHP.</p><p>We also need an  file to instantiate this  class and to print the results:</p><div><pre><code></code></pre></div><p>Nothing interesting here: we call our  method, passing it the measurements filename.\nThe JSON string from Rust contains temperatures as integers, so we need to divide them by 10 and calculate the average temperature for each station.</p><p>Let's run this code on the EC2 instance. The configuration is the same as last time: an  with 32 vCPUs and 128GB of memory. For the hard disk, I opted for a 200GB io1 volume (to reach 10,000 IOPS).</p><div><pre><code>perf  1B-ffi.log  10  php app/index.php\n</code></pre></div><p>and these are the results:</p><div><pre><code> Performance counter stats for 'php app/index.php' (10 runs):\n\n          58802.93 msec task-clock                       #   29.718 CPUs utilized            ( +-  0.26% )\n              4736      context-switches                 #   80.191 /sec                     ( +-  3.80% )\n                57      cpu-migrations                   #    0.965 /sec                     ( +- 13.37% )\n             52703      page-faults                      #  892.378 /sec                     ( +-  1.33% )\n   &lt;not supported&gt;      cycles                                                      \n   &lt;not supported&gt;      instructions                                                \n   &lt;not supported&gt;      branches                                                    \n   &lt;not supported&gt;      branch-misses                                               \n   &lt;not supported&gt;      L1-dcache-loads                                             \n   &lt;not supported&gt;      L1-dcache-load-misses                                       \n   &lt;not supported&gt;      LLC-loads                                                   \n   &lt;not supported&gt;      LLC-load-misses                                             \n\n            1.9787 +- 0.0197 seconds time elapsed  ( +-  1.00% )\n</code></pre></div><p>1.9787 seconds! 🥳 🎉<p>\nThis is a surprising result, considering the overhead of calling an external module and the fact that we are still making some calculations on the PHP side of the app.</p></p><p>After this 2-parts-journey we can affirm that:</p><ol><li>PHP is slow, but the performance improves significantly when using threads</li><li>Performance tuning is a game of trade-offs: you can improve the speed of a task by saturating all the CPU cores, but your system will become unresponsive. In PHP this is a problem if your application needs to accept more than one connection at a time</li><li>For heavy tasks, you can delegate to optimized external libraries</li></ol><p>I hope you enjoyed the post!</p>","contentLength":6534,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How I Built Open Source Fastest URL Shortener Ever With Rust","url":"https://dev.to/abdibrokhim/how-i-built-open-source-fastest-url-shortener-ever-with-rust-4ggm","date":1739516029,"author":"Ibrohim Abdivokhidov","guid":547,"unread":true,"content":"<p>In this tutorial, I’ll be walking you thro building notlink - an open source, blazingly fast URL shortener ever. If you are Rust luver. You should definitely check this out. ✨</p><ul><li>Shuttle (cloud deployment)</li><li>Actix Web (backend framework)</li><li>Neon (serverless PostgreSQL)</li><li>Diesel (ORM for database magic)</li></ul><p>What we’ll be covering:\n✅ Setting up a Rust project from scratch<p>\n✅ Integrating Diesel ORM with PostgreSQL (Neon)</p>\n✅ Building API endpoints (URL shortening/redirection)<p>\n✅ Database migrations, models, and helper functions (crypto, random code generation)</p>\n✅ Shuttle deployment hacks (including fixing libpq.so.5 issues with a custom script!)<p>\n✅ Testing with curl and troubleshooting</p></p><p>Instructor:\nHi, I'm Ibrohim. I build things and make content about it. Known mostly for 70+ Hackathons, 400+ Fails, 4+ Papers, 200K+ Creators, 2+ OS Contributions and $OC, $TROC Meme Coins. 👻</p><p>Chapters:\n00:00 introduction\n01:13 getting started with backend<p>\n02:54 creating a new Rust project</p>\n04:00 Diesel ORM integration\n08:15 testing simple app\n09:48 DB migration and creating tables\n11:55 creating models\n13:25 DB operations\n15:50 encryption and decryption\n19:00 main.rs<p>\n19:45 running and testing the app</p>\n20:38 deploy to Shuttle and testing real url<p>\n22:00 looking thro Neon DB tables and data</p>\n22:30 final notes. wrap up.<p>\n27:45 outro. my message to ya'll</p></p>","contentLength":1339,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building a Data Engineering Center of Excellence","url":"https://towardsdatascience.com/building-a-data-engineering-center-of-excellence/","date":1739500548,"author":"Richie Bachala","guid":7,"unread":true,"content":"<p>As data continues to grow in importance and become more complex, the need for skilled data engineers has never been greater. But what is data engineering, and why is it so important? In this blog post, we will discuss the essential components of a functioning data engineering practice and why data engineering is becoming increasingly critical for businesses today, and how you can build your very own Data Engineering Center of Excellence!</p><p>I’ve had the privilege to build, manage, lead, and foster a sizeable high-performing team of data warehouse &amp; ELT engineers for many years. With the help of my team, I have spent a considerable amount of time every year consciously planning and preparing to manage the growth of our data month-over-month and address the changing reporting and analytics needs for our&nbsp;<em>20000+ global data consumers</em>. We built many data warehouses to store and centralize massive amounts of data generated from many OLTP sources. We’ve implemented Kimball methodology by creating star schemas both within our on-premise data warehouses and in the ones in the cloud.</p><p>The objective is to enable our user-base to perform fast analytics and reporting on the data; so our analysts’ community and business users can make accurate data-driven decisions.</p><p>It took me about three years to transform&nbsp;&nbsp;() of data warehouse and ETL programmers into one cohesive Data Engineering team.</p><p><em>I have compiled some of my learnings building a global data engineering team in this post in hopes that Data professionals and leaders of all levels of technical proficiency can benefit.</em></p><h2>Evolution of the Data Engineer</h2><p>It has never been a better time to be a data engineer. Over the last decade, we have seen a massive awakening of enterprises now recognizing their data as the company’s heartbeat, making data engineering the job function that ensures accurate, current, and quality data flow to the solutions that depend on it.</p><p>Historically, the role of Data Engineers has evolved from that of&nbsp;<strong><em>data warehouse developers&nbsp;</em></strong>and the&nbsp;&nbsp;(extract, transform and load).</p><p>The data warehouse developers are responsible for designing, building, developing, administering, and maintaining data warehouses to meet an enterprise’s reporting needs. This is done primarily via extracting data from operational and transactional systems and piping it using extract transform load methodology (ETL/ ELT) to a storage layer like a data warehouse or a data lake. The data warehouse or the data lake is where data analysts, data scientists, and business users consume data. The developers also perform transformations to conform the ingested data to a data model with aggregated data for easy analysis.</p><blockquote><p>A data engineer’s prime responsibility is to produce and make data securely available for multiple consumers.</p></blockquote><p>Data engineers oversee the ingestion, transformation, modeling, delivery, and movement of data through every part of an organization. Data extraction happens from many different data sources &amp; applications. Data Engineers load the data into data warehouses and data lakes, which are transformed not just for the <a href=\"https://towardsdatascience.com/tag/data-science/\" title=\"Data Science\">Data Science</a> &amp; predictive analytics initiatives (as everyone likes to talk about) but primarily for data analysts. Data analysts &amp; data scientists perform operational reporting, exploratory analytics, service-level agreement (SLA) based business intelligence reports and dashboards on the catered data. In this book, we will address all of these job functions.</p><p>The role of a data engineer is to acquire, store, and aggregate data from both cloud and on-premise, new, and existing systems, with data modeling and feasible data architecture. Without the data engineers, analysts and data scientists won’t have valuable data to work with, and hence, data engineers are the first to be hired at the inception of every new data team. Based on the data and analytics tools available within an enterprise, data engineering teams’ role profiles, constructs, and approaches have several options for what should be included in their responsibilities which we will discuss in this chapter.</p><p>Software is increasingly automating the historically manual and tedious tasks of data engineers. Data processing tools and technologies have evolved massively over several years and will continue to grow. For example, cloud-based data warehouses (Snowflake, for instance) have made data storage and processing affordable and fast. Data pipeline services (like&nbsp;<a href=\"https://www.informatica.com/blogs/welcome-to-informatica-intelligent-cloud-services.html\" rel=\"noreferrer noopener\" target=\"_blank\">Informatica IICS</a>,&nbsp;<a href=\"https://airflow.apache.org/\" rel=\"noreferrer noopener\" target=\"_blank\">Apache Airflow</a>,&nbsp;<a href=\"https://www.matillion.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Matillion</a>,&nbsp;<a href=\"http://fivetran.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Fivetran</a>) have turned data extraction into work that can be completed quickly and efficiently. The data engineering team should be leveraging such technologies as force multipliers, taking a consistent and cohesive approach to integration and management of enterprise data, not just relying on legacy siloed approaches to building custom data pipelines with fragile, non-performant, hard to maintain code. Continuing with the latter approach will stifle the pace of innovation within the said enterprise and force the future focus to be around managing data infrastructure issues rather than how to help generate value for your business.</p><p>The primary role of an enterprise Data Engineering team should be to&nbsp;&nbsp;into a shape that’s ready for analysis — laying the foundation for real-world analytics and data science application.</p><p>The Data Engineering team should serve as the&nbsp;&nbsp;for enterprise-level data with the responsibility to curate the organization’s data and act as a resource for those who want to make use of it, such as Reporting &amp; Analytics teams, Data Science teams, and other groups that are doing more self-service or business group driven analytics leveraging the enterprise data platform. This team should serve as the&nbsp;&nbsp;of organizational knowledge, managing and refining the catalog so that analysis can be done more effectively. Let’s look at the essential responsibilities of a well-functioning Data Engineering team.</p><h2>Responsibilities of a Data Engineering Team</h2><p>The Data Engineering team should provide a&nbsp;&nbsp;within the enterprise that cuts across to support both the Reporting/Analytics and Data Science capabilities to provide access to clean, transformed, formatted, scalable, and secure data ready for analysis. The Data Engineering teams’ core responsibilities should include:</p><blockquote><p>· Build, manage, and optimize the core data platform infrastructure</p><p>· Build and maintain custom and off-the-shelf data integrations and ingestion pipelines from a variety of structured and unstructured sources</p><p>· Manage overall data pipeline orchestration</p><p>· Manage transformation of data either before or after load of raw data through both technical processes and business logic</p><p>· Support analytics teams with design and performance optimizations of data warehouses</p></blockquote><p><strong><em>Data is an Enterprise Asset.</em></strong></p><p><strong><em>Data as an Asset should be shared and protected.</em></strong></p><p>Data should be valued as an Enterprise asset, leveraged across all Business Units to enhance the company’s value to its respective customer base by accelerating decision making, and improving competitive advantage with the help of data. Good data stewardship, legal and regulatory requirements dictate that we protect the data owned from unauthorized access and disclosure.</p><p>In other words,&nbsp;<strong><em>managing Security is a crucial responsibility.</em></strong></p><h2>Why Create a Centralized Data Engineering Team?</h2><p>Treating Data Engineering as a standard and core capability that underpins both the Analytics and Data Science capabilities will help an enterprise evolve how to approach Data and Analytics. The enterprise needs to stop vertically treating data based on the technology stack involved as we tend to see often and move to more of a horizontal approach of managing a&nbsp;&nbsp;or&nbsp;&nbsp;that cuts across the organization and can connect to various technologies as needed drive analytic initiatives. This is a new way of thinking and working, but it can drive efficiency as the various data organizations look to scale. Additionally — there is value in creating a dedicated structure and career path for Data Engineering resources. Data engineering skill sets are in high demand in the market; therefore, hiring outside the company can be costly. Companies must enable programmers, database administrators, and software developers with a career path to gain the needed experience with the above-defined skillsets by working across technologies. Usually, forming a data engineering center of excellence or a capability center would be the first step for making such progression possible.</p><h2>Challenges for creating a centralized Data Engineering Team</h2><p>The centralization of the Data Engineering team as a service approach is different from how Reporting &amp; Analytics and Data Science teams operate. It does, in principle, mean&nbsp;<strong><em>giving up some level of control of resources</em></strong>&nbsp;and establishing new processes for how these teams will collaborate and work together to deliver initiatives.</p><p>The Data Engineering team will need to demonstrate that it can effectively support the needs of both Reporting &amp; Analytics and Data Science teams, no matter how large these teams are. Data Engineering teams must&nbsp;<strong><em>effectively prioritize workloads&nbsp;</em></strong>while ensuring they can bring the right skillsets and experience to assigned projects.</p><p>Data engineering is essential because it serves as the backbone of data-driven companies. It enables analysts to work with clean and well-organized data, necessary for deriving insights and making sound decisions. To build a functioning data engineering practice, you need the following critical components:</p><p>The Data Engineering team should be a core capability within the enterprise, but it should effectively serve as a support function involved in almost everything data-related. It should interact with the Reporting and Analytics and Data Science teams in a collaborative support role to make the entire team successful.</p><p>The&nbsp;<em>Data Engineering team doesn’t create direct business value</em>&nbsp;— but the value should come in making the Reporting and Analytics, and Data Science teams more productive and efficient to ensure delivery of maximum value to business stakeholders through Data &amp; Analytics initiatives. To make that possible, the six key responsibilities within the data engineering capability center would be as follow –</p><p>Let’s review the&nbsp;<strong><em>6 pillars of responsibilities</em></strong>:</p><p><strong>1. Determine Central Data Location for Collation and Wrangling</strong></p><p>Understanding and having a strategy for a&nbsp;(<em>a centralized data repository or data warehouse for the mass consumption of data for analysis</em>). Defining requisite data tables and where they will be joined in the context of data engineering and subsequently converting raw data into digestible and valuable formats.</p><p><strong>2. Data Ingestion and Transformation</strong></p><p>Moving data from one or more sources to a new destination (<em>your data lake or cloud data warehouse)&nbsp;</em>where it can be stored and further analyzed and then converting data from the format of the source system to that of the destination</p><p>Extracting, transforming, and loading data from one or more sources into a destination system to represent the data in a new context or style.</p><p>Data modeling is an essential function of a data engineering team, granted not all data engineers excel with this capability. Formalizing relationships between data objects and business rules into a conceptual representation through understanding information system workflows, modeling required queries, designing tables, determining primary keys, and effectively utilizing data to create informed output.</p><p>I’ve seen engineers in interviews mess up more with this than coding in technical discussions. It’s essential to understand the differences between Dimensions, Facts, Aggregate tables.</p><p>Ensuring that sensitive data is protected and implementing proper authentication and authorization to reduce the risk of a data breach</p><p><strong>6. Architecture and Administration</strong></p><p>Defining the models, policies, and standards that administer what data is collected, where and how it is stored, and how it such data is integrated into various analytical systems.</p><blockquote><p>The six pillars of responsibilities for data engineering capabilities center on the ability to determine a central data location for collation and wrangling, ingest and transform data, execute ETL/ELT operations, model data, secure access and administer an architecture. While all companies have their own specific needs with regards to these functions, it is important to ensure that your team has the necessary skillset in order to build a foundation for big data success.</p></blockquote><p>Besides the Data Engineering following are the other capability centers that need to be considered within an enterprise:</p><h2>Analytics Capability Center</h2><p>The analytics capability center enables consistent, effective, and efficient BI, analytics, and advanced analytics capabilities across the company. Assist business functions in triaging, prioritizing, and achieving their objectives and goals through reporting, analytics, and dashboard solutions, while providing operational reports and visualizations, self-service analytics, and required tools to automate the generation of such insights.</p><h2>Data Science Capability Center</h2><p>The data science capability center is for exploring cutting-edge technologies and concepts to unlock new insights and opportunities, better inform employees and create a culture of prescriptive information usage using Automated AI and Automated ML solutions such as&nbsp;<a href=\"https://medium.com/u/9aea625dfc27?source=post_page---user_mention--b83d51cedb6a---------------------------------------\" rel=\"noreferrer noopener\" target=\"_blank\">H2O.ai</a>,&nbsp;<a href=\"https://medium.com/u/27e43843bc9f?source=post_page---user_mention--b83d51cedb6a---------------------------------------\" rel=\"noreferrer noopener\" target=\"_blank\">Dataiku</a>,&nbsp;<a href=\"http://www.aible.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Aible</a>, DataRobot,&nbsp;<a href=\"https://medium.com/u/3aaaf223f1e?source=post_page---user_mention--b83d51cedb6a---------------------------------------\" rel=\"noreferrer noopener\" target=\"_blank\">C3.ai</a></p><p>The data governance office empowers users with trusted, understood, and timely data to drive effectiveness while keeping the integrity and sanctity of data in the right hands for mass consumption.</p><blockquote><p><em>As your company grows, you will want to make sure that the data engineering capabilities are in place to support the six pillars of responsibilities. By doing this, you will be able to ensure that all aspects of data management and analysis are covered and that your data is safe and accessible by those who need it. Have you started thinking about how your company will grow? What steps have you taken to put a centralized data engineering team in place?</em></p></blockquote>","contentLength":14079,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"5 Learnings from sharing Kafka vs Fluvio Benchmarks on Reddit","url":"https://dev.to/debadyuti/5-learnings-from-sharing-kafka-vs-fluvio-benchmarks-on-reddit-34","date":1739492573,"author":"Deb","guid":546,"unread":true,"content":"<p>To have a readable blog, all the links are at the bottom except the link to the Fluvio project.</p><p>Yesterday, I shared a blog on benchmarking results comparing Fluvio, our next-generation streaming engine, with Apache Kafka. </p><p>The response from the Rust community was encouraging, with over 30,000 impressions, 80+ upvotes, and 40+ comments in just 24 hours. The feedback was invaluable, and I want to share the 5 things I learned from all the developer feedback.</p><p><a href=\"https://github.com/infinyon/fluvio\" rel=\"noopener noreferrer\">Fluvio</a> is a distributed streaming engine built in Rust over the past six years. While it follows Apache Kafka's conceptual patterns, it introduces programmable design patterns through Rust and WebAssembly-based stream processing called Stateful DataFlow (SDF). This makes Fluvio a complete platform for event streaming.</p><h3>\n  \n  \n  1. Developers care a lot about the benchmark environment.\n</h3><p>The community emphasized the importance of comprehensive testing environments:</p><ul><li>Need for bare metal servers to eliminate virtualization artifacts</li><li>Production-grade setups with proper replication (factor of 3)</li><li>Large-scale validation with terabyte-scale live data</li></ul><p>The ideal benchmarks will be using real-world data from Blockchain, High-Frequency Trading, or Ad-Tech on bare metal servers and compare multiple systems like Kafka, RedPanda, Pulsar.</p><h3>\n  \n  \n  2. Intelligent developers know about the trade-offs of using different hardware.\n</h3><p>Developers highlighted several hardware-specific considerations:</p><ul><li>ARM Graviton chips' latency variations in virtualized environments</li><li>Importance of testing across different CPU architectures including x86</li><li>Thermal throttling differences between consumer laptops and server-grade hardware</li></ul><h3>\n  \n  \n  3. Seasoned developers want production-ready configuration for each solution being configured\n</h3><p>Runtime mechanics need to reflect real-world scenarios:</p><ul><li>Specific JVM and Garbage Collector configurations for Kafka benchmarking</li><li>Resource utilization patterns under various loads</li><li>Multi-node deployment testing at scale</li></ul><h3>\n  \n  \n  4. While benchmarks are great benchmarking in mature categories require mention of table-stakes features\n</h3><p>Key functionality developers look for:</p><ul><li>Consumer groups for ordered delivery per partition</li><li>Stream and batch processing capabilities</li><li>Robust delivery guarantees</li></ul><h3>\n  \n  \n  5. Benchmarks also immediately makes developers think of reliability and debugging experience\n</h3><p>Critical operational features:</p><ul><li>Dead letter queue implementations</li><li>Retry strategies for network issues</li><li>Delivery proof mechanisms beyond best-effort</li></ul><h2>\n  \n  \n  The New Streaming Paradigm\n</h2><p>Event streaming is a basic pattern in a world filled with agents.</p><p>Wise developers focus on:</p><ul><li>Practical performance over theoretical maxima</li><li>Transparent benchmarking methodology</li><li>Intuitive deployment and management</li></ul><h2>\n  \n  \n  Our Vision for Next Generation Data Intensive Applications\n</h2><p>We believe the next wave of intelligent applications will come from builders who:</p><ul><li>Challenge traditional infrastructure assumptions</li><li>Require millisecond latencies at scale</li><li>Prioritize resource efficiency</li></ul><p>We don't just need faster systems - we need smarter ones that don't drain budgets or sanity.</p><p>The future belongs to systems that balance raw performance with operational wisdom. The question isn't just about speed—it's about enabling rapid innovation delivering an intuitive developer ergonomics while maintaining efficiency and reliability.</p>","contentLength":3331,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"It's time to go ESM-only","url":"https://javascriptweekly.com/issues/723","date":1739491200,"author":"","guid":253,"unread":true,"content":"<p>🤯 Pfft, vehicle data is a joke without <a href=\"https://javascriptweekly.com/link/165818/rss\">CarsXE</a>. API goes brrrrr. VIN decoding, plate lookup, market value reports. <a href=\"https://javascriptweekly.com/link/165818/rss\">Get&nbsp;Serious!</a></p>","contentLength":130,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Mapped types in TypeScript","url":"https://2ality.com/2025/02/mapped-types-typescript.html","date":1739491200,"author":"Dr. Axel Rauschmayer","guid":174,"unread":true,"content":"<p>A mapped type is a loop over keys that produces an object or tuple type and looks as follows:</p><pre><code>{[]: }\n</code></pre><p>In this blog post, we examine how mapped types work and see examples of using them. Their most importing use cases are transforming objects and mapping tuples.</p>","contentLength":259,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"We Were Wrong About GPUs","url":"https://fly.io/blog/wrong-about-gpu/","date":1739491200,"author":"Fly","guid":408,"unread":true,"content":"<div><p>We’re building a public cloud, on hardware we own. We raised money to do that, and to place some bets; one of them: GPU-enabling our customers. A progress report: GPUs aren’t going anywhere, but: GPUs aren’t going anywhere.</p></div><p>A Fly Machine is a <a href=\"https://fly.io/blog/docker-without-docker/\">Docker/OCI container</a> running inside a hardware-virtualized virtual machine somewhere on our global fleet of bare-metal worker servers. A GPU Machine is a Fly Machine with a hardware-mapped Nvidia GPU. It’s a Fly Machine that can do fast CUDA.</p><p>Like everybody else in our industry, we were right about the importance of AI/ML. If anything, we underestimated its importance. But the product we came up with probably doesn’t fit the moment. It’s a bet that doesn’t feel like it’s paying off.</p><p><strong>If you’re using Fly GPU Machines, don’t freak out; we’re not getting rid of them.</strong> But if you’re waiting for us to do something bigger with them, a v2 of the product, you’ll probably be waiting awhile.</p><p>GPU Machines were not a small project for us. Fly Machines run on an idiosyncratically small hypervisor (normally Firecracker, but for GPU Machines <a href=\"https://github.com/cloud-hypervisor/cloud-hypervisor\">Intel’s Cloud Hypervisor</a>, a very similar Rust codebase that supports PCI passthrough). The Nvidia ecosystem is not geared to supporting micro-VM hypervisors.</p><p>GPUs <a href=\"https://googleprojectzero.blogspot.com/2020/09/attacking-qualcomm-adreno-gpu.html\">terrified our security team</a>. A GPU is just about the worst case hardware peripheral: intense multi-directional direct memory transfers</p><div><p>(not even bidirectional: in common configurations, GPUs talk to each other)</p></div><p>with arbitrary, end-user controlled computation, all operating outside our normal security boundary.</p><p>We did a couple expensive things to mitigate the risk. We shipped GPUs on dedicated server hardware, so that GPU- and non-GPU workloads weren’t mixed. Because of that, the only reason for a Fly Machine to be scheduled on a GPU machine was that it needed a PCI BDF for an Nvidia GPU, and there’s a limited number of those available on any box. Those GPU servers were drastically less utilized and thus less cost-effective than our ordinary servers.</p><p>We funded two very large security assessments, from <a href=\"https://www.atredis.com/\">Atredis</a> and <a href=\"https://tetrelsec.com/\">Tetrel</a>, to evaluate our GPU deployment. Matt Braun is writing up those assessments now. They were not cheap, and they took time.</p><p>Security wasn’t directly the biggest cost we had to deal with, but it was an indirect cause for a subtle reason.</p><p>We could have shipped GPUs very quickly by doing what Nvidia recommended: standing up a standard K8s cluster to schedule GPU jobs on. Had we taken that path, and let our GPU users share a single Linux kernel, we’d have been on Nvidia’s driver happy-path.</p><p>Alternatively, we could have used a conventional hypervisor. Nvidia suggested VMware (heh). But they could have gotten things working had we used QEMU. We like QEMU fine, and could have talked ourselves into a security story for it, but the whole point of Fly Machines is that they take milliseconds to start. We could not have offered our desired Developer Experience on the Nvidia happy-path.</p><p>Instead, we burned months trying (and ultimately failing) to get Nvidia’s host drivers working to map <a href=\"https://www.nvidia.com/en-us/data-center/virtual-solutions/\">virtualized GPUs</a> into Intel Cloud Hypervisor. At one point, we hex-edited the closed-source drivers to trick them into thinking our hypervisor was QEMU.</p><p>I’m not sure any of this really mattered in the end. There’s a segment of the market we weren’t ever really able to explore because Nvidia’s driver support kept us from thin-slicing GPUs. We’d have been able to put together a really cheap offering for developers if we hadn’t run up against that, and developers love “cheap”, but I can’t prove that those customers are real.</p><p>On the other hand, we’re committed to delivering the Fly Machine DX for GPU workloads. Beyond the PCI/IOMMU drama, just getting an entire hardware GPU working in a Fly Machine was a lift. We needed Fly Machines that would come up with the right Nvidia drivers; our stack was built assuming that the customer’s OCI container almost entirely defined the root filesystem for a Machine. We had to engineer around that in our  orchestrator. And almost everything people want to do with GPUs involves efficiently grabbing huge files full of model weights. Also annoying!</p><p>And, of course, we bought GPUs. A lot of GPUs. Expensive GPUs.</p><p>The biggest problem: developers don’t want GPUs. They don’t even want AI/ML models. They want LLMs.  may have smart, fussy opinions on how to get their models loaded with CUDA, and what the best GPU is. But  don’t care about any of that. When a software developer shipping an app comes looking for a way for their app to deliver prompts to an LLM, you can’t just give them a GPU.</p><p>For those developers, who probably make up most of the market, it doesn’t seem plausible for an insurgent public cloud to compete with OpenAI and Anthropic. Their APIs are fast enough, and developers thinking about performance in terms of “tokens per second” aren’t counting milliseconds.</p><div><p>(you should all feel sympathy for us)</p></div><p>This makes us sad because we really like the point in the solution space we found. Developers shipping apps on Amazon will outsource to other public clouds to get cost-effective access to GPUs. But then they’ll faceplant trying to handle data and model weights, backhauling gigabytes (at significant expense) from S3. We have app servers, GPUs, and object storage all under the same top-of-rack switch. But inference latency just doesn’t seem to matter yet, so the market doesn’t care.</p><p>Past that, and just considering the system engineers who do care about GPUs rather than LLMs: the hardware product/market fit here is really rough.</p><p>People doing serious AI work want galactically huge amounts of GPU compute. A whole enterprise A100 is a compromise position for them; they want an SXM cluster of H100s.</p><div><p>Near as we can tell, MIG gives you a UUID to talk to the host driver, not a PCI device.</p></div><p>We think there’s probably a market for users doing lightweight ML work getting tiny GPUs. <a href=\"https://www.nvidia.com/en-us/technologies/multi-instance-gpu/\">This is what Nvidia MIG does</a>, slicing a big GPU into arbitrarily small virtual GPUs. But for fully-virtualized workloads, it’s not baked; we can’t use it. And I’m not sure how many of those customers there are, or whether we’d get the density of customers per server that we need.</p><p><a href=\"https://fly.io/blog/cutting-prices-for-l40s-gpus-in-half\">That leaves the L40S customers</a>. There are a bunch of these! We dropped L40S prices last year, not because we were sour on GPUs but because they’re the one part we have in our inventory people seem to get a lot of use out of. We’re happy with them. But they’re just another kind of compute that some apps need; they’re not a driver of our core business. They’re not the GPU bet paying off.</p><p>Really, all of this is just a long way of saying that for most software developers, “AI-enabling” their app is best done with API calls to things like Claude and GPT, Replicate and RunPod.</p><p>A very useful way to look at a startup is that it’s a race to learn stuff. So, what’s our report card?</p><p>First off, when we embarked down this path in 2022, we were (like many other companies) operating in a sort of phlogiston era of AI/ML. The industry attention to AI had not yet collapsed around a small number of foundational LLM models. We expected there to be a diversity of  models, the world <a href=\"https://github.com/elixir-nx/bumblebee\" title=\"\">Elixir Bumblebee</a> looks forward to, where people pull different AI workloads off the shelf the same way they do Ruby gems.</p><p>But <a href=\"https://www.cursor.com/\" title=\"\">Cursor happened</a>, and, as they say, how are you going to keep ‘em down on the farm once they’ve seen Karl Hungus? It seems much clearer where things are heading.</p><p>GPUs were a test of a Fly.io company credo: as we think about core features, we design for 10,000 developers, not for 5-6. It took a minute, but the credo wins here: GPU workloads for the 10,001st developer are a niche thing.</p><p>Another way to look at a startup is as a series of bets. We put a lot of chips down here. But the buy-in for this tournament gave us a lot of chips to play with. Never making a big bet of any sort isn’t a winning strategy. I’d rather we’d flopped the nut straight, but I think going in on this hand was the right call.</p><p>A really important thing to keep in mind here, and something I think a lot of startup thinkers sleep on, is the extent to which this bet involved acquiring assets. Obviously, some of our <a href=\"https://fly.io/blog/the-exit-interview-jp/\" title=\"\">costs here aren’t recoverable</a>. But the hardware parts that aren’t generating revenue will ultimately get liquidated; like with <a href=\"https://fly.io/blog/32-bit-real-estate/\" title=\"\">our portfolio of IPv4 addresses</a>, I’m even more comfortable making bets backed by tradable assets with durable value.</p><p>In the end, I don’t think GPU Fly Machines were going to be a hit for us no matter what we did. Because of that, one thing I’m very happy about is that we didn’t compromise the rest of the product for them. Security concerns slowed us down to where we probably learned what we needed to learn a couple months later than we could have otherwise, but we’re scaling back our GPU ambitions without having sacrificed <a href=\"https://fly.io/blog/sandboxing-and-workload-isolation/\" title=\"\">any of our isolation story</a>, and, ironically, GPUs  are making that story a lot more important. The same thing goes for our Fly Machine developer experience.</p><p>We started this company building a Javascript runtime for edge computing. We learned that our customers didn’t want a new Javascript runtime; they just wanted their native code to work. <a href=\"https://news.ycombinator.com/item?id=22616857\" title=\"\">We shipped containers</a>, and no convincing was needed. We were wrong about Javascript edge functions, and I think we were wrong about GPUs. That’s usually how we figure out the right answers:  by being wrong about a lot of stuff.</p>","contentLength":9514,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: SQL Noir – Learn SQL by solving crimes","url":"https://www.sqlnoir.com/","date":1739483356,"author":"chrisBHappy","guid":448,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43041827"},{"title":"Bojan Mihelac: Prefixed Parameters for Django querystring tag","url":"http://code.informatikamihelac.com/en/query-string-with-prefixed-parameters/","date":1739482638,"author":"","guid":165,"unread":true,"content":"<article>An overview of Django 5.1's new querystring tag and how to add support for prefixed parameters.</article>","contentLength":95,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Learnings from a Machine Learning Engineer — Part 5: The Training","url":"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-5-the-training/","date":1739480672,"author":"David Martin","guid":6,"unread":true,"content":"<p>In this fifth part of my series, I will outline the steps for creating a Docker container for training your image classification model, evaluating performance, and preparing for deployment.</p><p>AI/ML engineers would prefer to focus on model training and data engineering, but the reality is that we also need to understand the infrastructure and mechanics behind the scenes.</p><p>I hope to share some tips, not only to get your training run running, but how to streamline the process in a cost efficient manner on cloud resources such as Kubernetes.</p><p>I will reference elements from my previous articles for getting the best model performance, so be sure to check out&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>&nbsp;and&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/\">Part 2</a>&nbsp;on the data sets, as well as&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>&nbsp;and&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/\">Part 4</a>&nbsp;on model evaluation.</p><p>Here are the learnings that I will share with you, once we lay the groundwork on the infrastructure:</p><ul><li>Building your Docker container</li><li>Executing your training run</li></ul><p>First, let me provide a brief description of the setup that I created, specifically around Kubernetes. Your setup may be entirely different, and that is just fine. I simply want to set the stage on the infrastructure so that the rest of the discussion makes sense.</p><p>This is a server you deploy that provides a user interface to for your subject matter experts to label and evaluate images for the image classification application. The server can run as a pod on your Kubernetes cluster, but you may find that running a dedicated server with faster disk may be better.</p><p>Image files are stored in a directory structure like the following, which is self-documenting and easily modified.</p><pre><code>Image_Library/\n  - cats/\n    - image1001.png\n  - dogs/\n    - image2001.png</code></pre><p>Ideally, these files would reside on local server storage (instead of cloud or cluster storage) for better performance. The reason for this will become clear as we see what happens as the image library grows.</p><p><a href=\"https://towardsdatascience.com/tag/cloud-storage/\" title=\"Cloud Storage\">Cloud Storage</a> allows for a virtually limitless and convenient way to share files between systems. In this case, the image library on your management system could access the same files as your Kubernetes cluster or Docker engine.</p><p>However, the downside of cloud storage is the latency to open a file. Your image library will have&nbsp;&nbsp;of images, and the latency to read each file will have a significant impact on your training run time. Longer training runs means more cost for using the expensive GPU processors!</p><p>The way that I found to speed things up is to create a&nbsp;&nbsp;file of your image library on your management system and copy them to cloud storage. Even better would be to create multiple tar files&nbsp;, each containing 10,000 to 20,000 images.</p><p>This way you only have network latency on a handful of files (which contain thousands, once extracted) and you start your training run much sooner.</p><h3>Kubernetes or Docker engine</h3><p>A Kubernetes cluster, with proper configuration, will allow you to dynamically scale up/down nodes, so you can perform your model training on GPU hardware as needed. Kubernetes is a rather heavy setup, and there are other container engines that will work.</p><blockquote><p>The technology options change constantly!</p></blockquote><p>The main idea is that you want to spin up the resources you need — for only as long as you need them — then scale down to reduce your time (and therefore cost) of running expensive GPU resources.</p><p>Once your GPU node is started and your <a href=\"https://towardsdatascience.com/tag/docker/\" title=\"Docker\">Docker</a> container is running, you can extract the&nbsp;&nbsp;files above to&nbsp;&nbsp;storage, such as an&nbsp;, on your node. The node typically has high-speed SSD disk, ideal for this type of workload. There is one caveat — the storage capacity on your node must be able to handle your image library.</p><p>Assuming we are good, let’s talk about building your Docker container so that you can train your model on your image library.</p><h2>Building your Docker container</h2><p>Being able to execute a training run in a consistent manner lends itself perfectly to building a Docker container. You can “pin” the version of libraries so you know exactly how your scripts will run every time. You can version control your containers as well, and revert to a known good image in a pinch. What is really nice about Docker is you can run the container pretty much anywhere.</p><p>The tradeoff when running in a container, especially with an <a href=\"https://towardsdatascience.com/tag/image-classification/\" title=\"Image Classification\">Image Classification</a> model, is the speed of file storage. You can attach any number of volumes to your container, but they are usually&nbsp;&nbsp;attached, so there is latency on each file read. This may not be a problem if you have a small number of files. But when dealing with hundreds of thousands of files like image data, that latency adds up!</p><p>This is why using the&nbsp;&nbsp;file method outlined above can be beneficial.</p><p>Also, keep in mind that Docker containers could be terminated unexpectedly, so you should make sure to store important information outside the container, on cloud storage or a database. I’ll show you how below.</p><p>Knowing that you will need to run on GPU hardware (here I will assume Nvidia), be sure to select the right base image for your Dockerfile, such as&nbsp;&nbsp;with the “devel&nbsp;flavor that will contain the right drivers.</p><p>Next, you will add the script files to your container, along with a “batch” script to coordinate the execution. Here is an example Dockerfile, and then I’ll describe what each of the scripts will be doing.</p><pre><code>#####   Dockerfile   #####\nFROM nvidia/cuda:12.8.0-devel-ubuntu24.04\n\n# Install system software\nRUN apt-get -y update &amp;&amp; apg-get -y upgrade\nRUN apt-get install -y python3-pip python3-dev\n\n# Setup python\nWORKDIR /app\nCOPY requirements.txt\nRUN python3 -m pip install --upgrade pip\nRUN python3 -m pip install -r requirements.txt\n\n# Pythong and batch scripts\nCOPY ExtractImageLibrary.py .\nCOPY Training.py .\nCOPY Evaluation.py .\nCOPY ScorePerformance.py .\nCOPY ExportModel.py .\nCOPY BulkIdentification.py .\nCOPY BatchControl.sh .\n\n# Allow for interactive shell\nCMD tail -f /dev/null</code></pre><p>Dockerfiles are declarative, almost like a cookbook for building a small server — you know what you’ll get every time. Python libraries benefit, too, from this declarative approach. Here is a sample&nbsp;&nbsp;file that loads the TensorFlow libraries with CUDA support for GPU acceleration.</p><pre><code>#####   requirements.txt   #####\nnumpy==1.26.3\npandas==2.1.4\nscipy==1.11.4\nkeras==2.15.0\ntensorflow[and-cuda]</code></pre><h3>Extract Image Library script</h3><p>In <a href=\"https://towardsdatascience.com/tag/kubernetes/\" title=\"Kubernetes\">Kubernetes</a>, the Docker container can access local, high speed storage on the physical node. This can be achieved via the&nbsp;&nbsp;volume type. As mentioned before, this will only work if the local storage on your node can handle the size of your library.</p><pre><code>#####   sample 25GB emptyDir volume in Kubernetes   #####\ncontainers:\n  - name: training-container\n    volumeMounts:\n      - name: image-library\n        mountPath: /mnt/image-library\nvolumes:\n  - name: image-library\n    emptyDir:\n      sizeLimit: 25Gi</code></pre><p>You would want to have another&nbsp;&nbsp;to your cloud storage where you have the&nbsp;&nbsp;files. What this looks like will depend on your provider, or if you are using a persistent volume claim, so I won’t go into detail here.</p><p>Now you can extract the&nbsp;&nbsp;files — ideally in parallel for an added performance boost — to the local mount point.</p><p>As AI/ML engineers, the model training is where we want to spend most of our time.</p><blockquote><p>This is where the magic happens!</p></blockquote><p>With your image library now extracted, we can create our train-validation-test sets, load a pre-trained model or build a new one, fit the model, and save the results.</p><p>One key technique that has served me well is to load the most recently trained model as my base. I discuss this in more detail in&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/\">Part 4</a>&nbsp;under “Fine tuning”, this results in faster training time and significantly improved model performance.</p><p>Be sure to take advantage of the local storage to checkpoint your model during training since the models are quite large and you are paying for the GPU even while it sits idle writing to disk.</p><p>This of course raises a concern about what happens if the Docker container dies part-way though the training. The risk is (hopefully) low from a cloud provider, and you may not want an incomplete training anyway. But if that does happen, you will at least want to understand&nbsp;, and this is where saving the main log file to cloud storage (described below) or to a package like MLflow comes in handy.</p><p>After your training run has completed and you have taken proper precaution on saving your work, it is time to see how well it performed.</p><p>Normally this evaluation script will pick up on the model that just finished. But you may decide to point it at a previous model version through an interactive session. This is why have the script as stand-alone.</p><p>With it being a separate script, that means it will need to read the completed model from disk — ideally local disk for speed. I like having two separate scripts (training and evaluation), but you might find it better to combine these to avoid reloading the model.</p><p>Now that the model is loaded, the evaluation script should generate predictions on&nbsp;&nbsp;image in the training, validation, test, and benchmark sets. I save the results as a&nbsp;&nbsp;matrix with the softmax confidence score for each class label. So, if there are 1,000 classes and 100,000 images, that’s a table with 100 million scores!</p><p>I save these results in&nbsp;&nbsp;files that are then used in the score generation next.</p><p>Taking the matrix of scores produced by the evaluation script above, we can now create various metrics of model performance. Again, this process could be combined with the evaluation script above, but my preference is for independent scripts. For example, I might want to regenerate scores on previous training runs. See what works for you.</p><p>Here are some of the&nbsp;&nbsp;functions that produce useful insights like F1, log loss, AUC-ROC, Matthews correlation coefficient.</p><pre><code>from sklearn.metrics import average_precision_score, classification_report\nfrom sklearn.metrics import log_loss, matthews_corrcoef, roc_auc_score</code></pre><p>Aside from these basic statistical analyses for each dataset (train, validation, test, and benchmark), it is also useful to identify:</p><ul><li>Which&nbsp;&nbsp;labels get the most number of errors?</li><li>Which&nbsp;&nbsp;labels get the most number of incorrect guesses?</li><li>How many&nbsp;<strong>ground-truth-to-predicted</strong>&nbsp;label pairs are there? In other words, which classes are easily confused?</li><li>What is the&nbsp;&nbsp;when applying a minimum softmax confidence score threshold?</li><li>What is the&nbsp;&nbsp;above that softmax threshold?</li><li>For the “difficult” benchmark sets, do you get a sufficiently&nbsp;&nbsp;score?</li><li>For the “out-of-scope” benchmark sets, do you get a sufficiently&nbsp;&nbsp;score?</li></ul><p>As you can see, there are multiple calculations and it’s not easy to come up with a single evaluation to decide if the trained model is good enough to be moved to production.</p><p>In fact, for an image classification model, it is helpful to manually review the images that the model got wrong, as well as the ones that got a low softmax confidence score. Use the scores from this script to create a list of images to manually review, and then get a&nbsp;&nbsp;for how well the model performs.</p><p>Check out&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>&nbsp;for more in-depth discussion on evaluation and scoring.</p><p>All of the heavy lifting is done by this point. Since your Docker container will be shutdown soon, now is the time to copy the model artifacts to cloud storage and prepare them for being put to use.</p><p>The example Python code snippet below is more geared to Keras and TensorFlow. This will take the trained model and export it as a&nbsp;. Later, I will show how this is used by TensorFlow Serving in the&nbsp;&nbsp;section below.</p><pre><code># Increment current version of model and create new directory\nnext_version_dir, version_number = create_new_version_folder()\n\n# Copy model artifacts to the new directory\ncopy_model_artifacts(next_version_dir)\n\n# Create the directory to save the model export\nsaved_model_dir = os.path.join(next_version_dir, str(version_number))\n\n# Save the model export for use with TensorFlow Serving\ntf.keras.backend.set_learning_phase(0)\nmodel = tf.keras.models.load_model(keras_model_file)\ntf.saved_model.save(model, export_dir=saved_model_dir)</code></pre><p>This script also copies the other training run artifacts such as the model evaluation results, score summaries, and log files generated from model training. Don’t forget about your label map so you can give human readable names to your classes!</p><h3>Bulk identification script</h3><p>Your training run is complete, your model has been scored, and a new version is exported and ready to be served. Now is the time to use this latest model to assist you on trying to identify unlabeled images.</p><p>As I described in&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/\">Part 4</a>, you may have a collection of “unknowns” — really good pictures, but no idea what they are. Let your new model provide a best guess on these and record the results to a file or a database. Now you can create filters based on closest match and by high/low scores. This allows your subject matter experts to leverage these filters to find new image classes, add to existing classes, or to remove images that have very low scores and are no good.</p><p>By the way, I put this step inside the GPU container since you may have thousands of “unknown” images to process and the accelerated hardware will make light work of it. However, if you are not in a hurry, you could perform this step on a separate CPU node, and shutdown your GPU node sooner to save cost. This would especially make sense if your “unknowns” folder is on slower cloud storage.</p><p>All of the scripts described above perform a specific task — from extracting your image library, executing model training, performing evaluation and scoring, exporting the model artifacts for deployment, and perhaps even bulk identification.</p><blockquote><p>One script to rule them all</p></blockquote><p>To coordinate the entire show, this batch script gives you the entry point for your container and an easy way to trigger everything. Be sure to produce a log file in case you need to analyze any failures along the way. Also, be sure to write the log to your cloud storage in case the container dies unexpectedly.</p><pre><code>#!/bin/bash\n# Main batch control script\n\n# Redirect standard output and standard error to a log file\nexec &gt; /cloud_storage/batch-logfile.txt 2&gt;&amp;1\n\n/app/ExtractImageLibrary.py\n/app/Training.py\n/app/Evaluation.py\n/app/ScorePerformance.py\n/app/ExportModel.py\n/app/BulkIdentification.py</code></pre><h2>Executing your training run</h2><p>So, now it’s time to put everything in motion…</p><p>Let’s go through the steps to prepare your image library, fire up your Docker container to train your model, and then examine the results.</p><h3>Image library ‘tar’ files</h3><p>Your image management system should now create a&nbsp;&nbsp;file backup of your data. Since&nbsp;&nbsp;is a single-threaded function, you will get significant speed improvement by creating multiple tar files in parallel, each with a portion of you data.</p><p>Now these files can be copied to your shared cloud storage for the next step.</p><p>All the hard work you put into creating your container (described above) will be put to the test. If you are running Kubernetes, you can create a Job that will execute the&nbsp;&nbsp;script.</p><p>Inside the Kubernetes Job definition, you can pass environment variables to adjust the execution of your script. For example, the batch size and number of epochs are set here and then pulled into your Python scripts, so you can alter the behavior without changing your code.</p><pre><code>#####   sample Job in Kubernetes   #####\ncontainers:\n  - name: training-job\n    env:\n      - name: BATCH_SIZE\n        value: 50\n      - name: NUM_EPOCHS\n        value: 30\n    command: [\"/app/BatchControl.sh\"]</code></pre><p>Once the Job is completed, be sure to verify that the GPU node properly scales back down to zero according to your scaling configuration in Kubernetes — you don’t want to be saddled with a huge bill over a simple configuration error.</p><p>With the training run complete, you should now have model artifacts saved and can examine the performance. Look through the metrics, such as F1 and log loss, and benchmark accuracy for high softmax confidence scores.</p><p>As mentioned earlier, the reports only tell part of the story. It is worth the time and effort to manually review the images that the model got wrong or where it produced a low confidence score.</p><p>Don’t forget about the bulk identification. Be sure to leverage these to locate new images to fill out your data set, or to find new classes.</p><p>Once you have reviewed your model performance and are satisfied with the results, it is time to modify your TensorFlow Serving container to put the new model into production.</p><p>TensorFlow Serving is available as a Docker container and provides a very quick and convenient way to serve your model. This container can listen and respond to API calls for your model.</p><p>Let’s say your new model is version 7, and your&nbsp;&nbsp;script (see above) has saved the model in your cloud share as&nbsp;<em>/image_application/models/007</em>. You can start the TensorFlow Serving container with that volume mount. In this example, the&nbsp;&nbsp;points to folder for version 007.</p><pre><code>#####   sample TensorFlow pod in Kubernetes   #####\ncontainers:\n  - name: tensorflow-serving\n    image: bitnami/tensorflow-serving:2.18.0\n    ports:\n      - containerPort: 8501\n    env:\n      - name: TENSORFLOW_SERVING_MODEL_NAME\n        value: \"image_application\"\n    volumeMounts:\n      - name: models-subfolder\n        mountPath: \"/bitnami/model-data\"\n\nvolumes:\n  - name: models-subfolder\n    azureFile:\n      shareName: \"image_application/models/007\"</code></pre><p>A subtle note here — the export script should create a sub-folder, named 007 (same as the base folder), with the saved model export. This may seem a little confusing, but TensorFlow Serving will mount this share folder as&nbsp;&nbsp;and detect the numbered sub-folder inside it for the version to serve. This will allow you to query the API for the model version as well as the identification.</p><p>As I mentioned at the start of this article, this setup has worked for my situation. This is certainly not the only way to approach this challenge, and I invite you to customize your own solution.</p><p>I wanted to share my hard-fought learnings as I embraced cloud services in Kubernetes, with the desire to keep costs under control. Of course, doing all this while maintaining a high level of model performance is an added challenge, but one that you can achieve.</p><p>I hope I have provided enough information here to help you with your own endeavors. Happy learnings!</p>","contentLength":18226,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Learnings from a Machine Learning Engineer — Part 3: The Evaluation","url":"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/","date":1739480406,"author":"David Martin","guid":5,"unread":true,"content":"<p>In this third part of my series, I will explore the evaluation process which is a critical piece that will lead to a cleaner data set and elevate your model performance. We will see the difference between evaluation of a&nbsp;&nbsp;model (one not yet in production), and evaluation of a&nbsp;&nbsp;model (one making real-world predictions).</p><p>In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>, I discussed the process of labelling your image data that you use in your <a href=\"https://towardsdatascience.com/tag/image-classification/\" title=\"Image Classification\">Image Classification</a> project. I showed how to define “good” images and create sub-classes. In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/\">Part 2</a>, I went over various data sets, beyond the usual train-validation-test sets, such as benchmark sets, plus how to handle synthetic data and duplicate images.</p><h2><strong>Evaluation of the trained model</strong></h2><p>As machine learning engineers we look at accuracy, F1, log loss, and other metrics to decide if a model is ready to move to production. These are all important measures, but from my experience, these scores can be deceiving especially as the number of classes grows.</p><p>Although it can be time consuming, I find it very important to manually review the images that the model gets&nbsp;, as well as the images that the model gives a&nbsp;&nbsp;softmax “confidence” score to. This means adding a step immediately after your training run completes to calculate scores for&nbsp;&nbsp;images — training, validation, test, and the benchmark sets. You only need to bring up for manual review the ones that the model had problems with. This should only be a small percentage of the total number of images. See the Double-check process below</p><p>What you do during the manual evaluation is to put yourself in a “” to ensure that the labelling standards are being followed that you setup in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>. Ask yourself:</p><ul><li>“Is this a good image?” Is the subject front and center, and can you clearly see all the features?</li><li>“Is this the correct label?” Don’t be surprised if you find wrong labels.</li></ul><p>You can either remove the bad images or fix the labels if they are wrong. Otherwise you can keep them in the data set and force the model to do better next time. Other questions I ask are:</p><ul><li>“Why did the model get this wrong?”</li><li>“Why did this image get a low score?”</li><li>“What is it about the image that caused confusion?”</li></ul><p>Sometimes the answer has nothing to do with&nbsp;&nbsp;specific image. Frequently, it has to do with the&nbsp;&nbsp;images, either in the ground truth class or in the predicted class. It is worth the effort to Double-check all images in both sets if you see a consistently bad guess. Again, don’t be surprised if you find poor images or wrong labels.</p><p>When doing the evaluation of the trained model (above), we apply a lot of subjective analysis — “Why did the model get this wrong?” and “Is this a good image?” From these, you may only get a&nbsp;.</p><p>Frequently, I will decide to hold off moving a model forward to production based on that gut feel. But how can you justify to your manager that you want to hit the brakes? This is where putting a more&nbsp;&nbsp;analysis comes in by creating a weighted average of the softmax “confidence” scores.</p><p>In order to apply a weighted evaluation, we need to identify sets of classes that deserve adjustments to the score. Here is where I create a list of “commonly confused” classes.</p><h2><strong>Commonly confused classes</strong></h2><p>Certain animals at our zoo can easily be mistaken. For example, African elephants and Asian elephants have different ear shapes. If your model gets these two mixed up, that is not as bad as guessing a giraffe! So perhaps you give partial credit here. You and your subject matter experts (SMEs) can come up with a list of these pairs and a weighted adjustment for each.</p><p>This weight can be factored into a modified cross-entropy loss function in the equation below. The back half of this equation will reduce the impact of being wrong for specific pairs of ground truth and prediction by using the “weight” function as a lookup. By default, the weighted adjustment would be 1 for all pairings, and the commonly confused classes would get something like 0.5.</p><p>In other words, it’s better to be unsure (have a&nbsp;&nbsp;confidence score) when you are wrong, compared to being super confident and wrong.</p><p>Once this weighted log loss is calculated, I can compare to previous training runs to see if the new model is ready for production.</p><h2><strong>Confidence threshold report</strong></h2><p>Another valuable measure that incorporates the confidence threshold (in my example, 95) is to report on accuracy and false positive rates. Recall that when we apply the confidence threshold before presenting results, we help reduce false positives from being shown to the end user.</p><p>In this table, we look at the breakdown of “true positive above 95” for each data set. We get a sense that when a “good” picture comes through (like the ones from our train-validation-test set) it is very likely to surpass the threshold, thus the user is “happy” with the outcome. Conversely, the “false positive above 95” is extremely low for good pictures, thus only a small number of our users will be “sad” about the results.</p><p>We expect the train-validation-test set results to be exceptional since our data is curated. So, as long as people take “good” pictures, the model should do very well. But to get a sense of how it does on extreme situations, let’s take a look at our benchmarks.</p><p>The “difficult” benchmark has more modest true positive and false positive rates, which reflects the fact that the images are more challenging. These values are much easier to compare across training runs, so that lets me set a min/max target. So for example, if I target a minimum of 80% for true positive, and maximum of 5% for false positive on this benchmark, then I can feel confident moving this to production.</p><p>The “out-of-scope” benchmark has no true positive rate because&nbsp;&nbsp;of the images belong to any class the model can identify. Remember, we picked things like a bag of popcorn, etc., that are not zoo animals, so there cannot be any true positives. But we do get a false positive rate, which means the model gave a confident score to that bag of popcorn as some animal. And if we set a target maximum of 10% for this benchmark, then we may not want to move it to production.</p><p>Right now, you may be thinking, “Well, what animal did it pick for the bag of popcorn?” Excellent question! Now you understand the importance of doing a manual review of the images that get bad results.</p><h2><strong>Evaluation of the deployed model</strong></h2><p>The evaluation that I described above applies to a model immediately after&nbsp;. Now, you want to evaluate how your model is doing in the&nbsp;. The process is similar, but requires you to shift to a “” and asking yourself, “Did the model get this correct?” and “Should it have gotten this correct?” and “Did we tell the user the right thing?”</p><p>So, imagine that you are logging in for the morning — after sipping on your&nbsp;<a href=\"https://medium.com/@dmartin0409/cold-brew-coffee-0aabd53a1f3e\">cold brew coffee</a>, of course — and are presented with 500 images that your zoo guests took yesterday of different animals. Your job is to determine how satisfied the guests were using your model to identify the zoo animals.</p><p>Using the softmax “confidence” score for each image, we have a threshold before presenting results. Above the threshold, we tell the guest what the model predicted. I’ll call this the “happy path”. And below the threshold is the “sad path” where we ask them to try again.</p><p>Your review interface will first show you all the “happy path” images one at a time. This is where you ask yourself, “Did we get this right?” Hopefully, yes!</p><p>But if not, this is where things get tricky. So now you have to ask, “Why not?” Here are some things that it could be:</p><ul><li>“Bad” picture — Poor lighting, bad angle, zoomed out, etc — refer to your labelling standards.</li><li>Out-of-scope — It’s a zoo animal, but unfortunately one that isn’t found in&nbsp;&nbsp;zoo. Maybe it belongs to another zoo (your guest likes to travel and try out your app). Consider adding these to your data set.</li><li>Out-of-scope — It’s not a zoo animal. It could be an animal in your zoo, but not one typically&nbsp;&nbsp;there, like a neighborhood sparrow or mallard duck. This might be a candidate to add.</li><li>Out-of-scope — It’s something found in the zoo. A zoo usually has interesting trees and shrubs, so people might try to identify those. Another candidate to add.</li><li>Prankster — Completely out-of-scope. Because people like to play with technology, there’s the possibility you have a prankster that took a picture of a bag of popcorn, or a soft drink cup, or even a selfie. These are hard to prevent, but hopefully get a low enough score (below the threshold) so the model did not identify it as a zoo animal. If you see enough pattern in these, consider creating a class with special handling on the front-end.</li></ul><p>After reviewing the “happy path” images, you move on to the “sad path” images — the ones that got a low confidence score and the app gave a “sorry, try again” message. This time you ask yourself, “&nbsp;the model have given this image a higher score?” which would have put it in the “happy path”. If so, then you want to ensure these images are added to the training set so next time it will do better. But most of time, the low score reflects many of the “bad” or out-of-scope situations mentioned above.</p><p>Perhaps your model performance is suffering and it has nothing to do with your model. Maybe it is the ways you users interacting with the app. Keep an eye out of non-technical problems and share your observations with the rest of your team. For example:</p><ul><li>Are your users using the application in the ways you expected?</li><li>Are they not following the instructions?</li><li>Do the instructions need to be stated more clearly?</li><li>Is there anything you can do to improve the experience?</li></ul><h2><strong>Collect statistics and new images</strong></h2><p>Both of the manual evaluations above open a gold mine of data. So, be sure to collect these statistics and feed them into a dashboard — your manager and your future self will thank you!</p><p>Keep track of these stats and generate reports that you and your can reference:</p><ul><li>How often the model is being called?</li><li>What times of the day, what days of the week is it used?</li><li>Are your system resources able to handle the peak load?</li><li>What classes are the most common?</li><li>After evaluation, what is the accuracy for each class?</li><li>What is the breakdown for confidence scores?</li><li>How many scores are above and below the confidence threshold?</li></ul><p>The single best thing you get from a deployed model is the additional real-world images! You can add these now images to improve coverage of your existing zoo animals. But more importantly, they provide you insight on&nbsp;&nbsp;classes to add. For example, let’s say people enjoy taking a picture of the large walrus statue at the gate. Some of these may make sense to incorporate into your data set to provide a better user experience.</p><p>Creating a new class, like the walrus statue, is not a huge effort, and it avoids the false positive responses. It would be more embarrassing to identify a walrus statue as an elephant! As for the prankster and the bag of popcorn, you can configure your front-end to quietly handle these. You might even get creative and have fun with it like, “Thank you for visiting the food court.”</p><p>It is a good idea to double-check your image set when you suspect there may be problems with your data. I’m not suggesting a top-to-bottom check, because that would a monumental effort! Rather specific classes that you suspect could contain bad data that is degrading your model performance.</p><p>Immediately after my training run completes, I have a script that will use this new model to generate predictions for my&nbsp;&nbsp;data set. When this is complete, it will take the list of incorrect identifications, as well as the low scoring predictions, and automatically feed that list into the Double-check interface.</p><p>This interface will show, one at a time, the image in question, alongside an example image of the ground truth and an example image of what the model predicted. I can visually compare the three, side-by-side. The first thing I do is ensure the original image is a “good” picture, following my labelling standards. Then I check if the ground-truth label is indeed correct, or if there is something that made the model think it was the predicted label.</p><ul><li>Remove the original image if the image quality is poor.</li><li>Relabel the image if it belongs in a different class.</li></ul><p>During this manual evaluation, you might notice dozens of the same wrong prediction. Ask yourself why the model made this mistake when the images seem perfectly fine. The answer may be some incorrect labels on images in the ground truth, or even in the predicted class!</p><p>Don’t hesitate to add those classes and sub-classes back into the Double-check interface and step through them all. You may have 100–200 pictures to review, but there is a good chance that one or two of the images will stand out as being the culprit.</p><p>With a different mindset for a trained model versus a deployed model, we can now evaluate performances to decide which models are ready for production, and how well a production model is going to serve the public. This relies on a solid Double-check process and a critical eye on your data. And beyond the “gut feel” of your model, we can rely on the benchmark scores to support us.</p><p>In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/\">Part 4</a>, we kick off the training run, but there are some subtle techniques to get the most out of the process and even ways to leverage throw-away models to expand your library image data.<a href=\"https://medium.com/tag/machine-learning?source=post_page-----e4a8dbb035e0---------------------------------------\"></a></p>","contentLength":13463,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build a dynamic, role-based AI agent using Amazon Bedrock inline agents","url":"https://aws.amazon.com/blogs/machine-learning/build-a-dynamic-role-based-ai-agent-using-amazon-bedrock-inline-agents/","date":1739480188,"author":"Ishan Singh","guid":132,"unread":true,"content":"<p>AI agents continue to gain momentum, as businesses use the power of generative AI to reinvent customer experiences and automate complex workflows. We are seeing <a href=\"https://aws.amazon.com/bedrock/agents/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock Agents</a> applied in investment research, insurance claims processing, root cause analysis, advertising campaigns, and much more. Agents use the reasoning capability of foundation models (FMs) to break down user-requested tasks into multiple steps. They use developer-provided instructions to create an orchestration plan and carry out that plan by securely invoking company APIs and accessing knowledge bases using Retrieval Augmented Generation (RAG) to accurately handle the user’s request.</p><p>Although organizations see the benefit of agents that are defined, configured, and tested as managed resources, we have increasingly seen the need for an additional, more dynamic way to invoke agents. Organizations need solutions that adjust on the fly—whether to test new approaches, respond to changing business rules, or customize solutions for different clients. This is where the new <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/agents-create-inline.html\" target=\"_blank\" rel=\"noopener\">inline agents</a> capability in Amazon Bedrock Agents becomes transformative. It allows you to dynamically adjust your agent’s behavior at runtime by changing its instructions, tools, guardrails, knowledge bases, prompts, and even the FMs it uses—all without redeploying your application.</p><p>In this post, we explore how to build an application using Amazon Bedrock inline agents, demonstrating how a single AI assistant can adapt its capabilities dynamically based on user roles.</p><h2>Inline agents in Amazon Bedrock Agents</h2><p>This runtime flexibility enabled by inline agents opens powerful new possibilities, such as:</p><ul><li> – Inline agents minimize the time-consuming create/update/prepare cycles traditionally required for agent configuration changes. Developers can instantly test different combinations of models, tools, and knowledge bases, dramatically accelerating the development process.</li><li><strong>A/B testing and experimentation</strong> – Data science teams can systematically evaluate different model-tool combinations, measure performance metrics, and analyze response patterns in controlled environments. This empirical approach enables quantitative comparison of configurations before production deployment.</li><li><strong>Subscription-based personalization</strong> – Software companies can adapt features based on each customer’s subscription level, providing more advanced tools for premium users.</li><li><strong>Persona-based data source integration</strong> – Institutions can adjust content complexity and tone based on the user’s profile, providing persona-appropriate explanations and resources by changing the knowledge bases associated to the agent on the fly.</li><li> – Developers can create applications with hundreds of APIs, and quickly and accurately carry out tasks by dynamically choosing a small subset of APIs for the agent to consider for a given request. This is particularly helpful for large software as a service (SaaS) platforms needing multi-tenant scaling.</li></ul><p>Inline agents expand your options for building and deploying agentic solutions with Amazon Bedrock Agents. For workloads needing managed and versioned agent resources with a pre-determined and tested configuration (specific model, instructions, tools, and so on), developers can continue to use InvokeAgent on resources created with CreateAgent. For workloads that need dynamic runtime behavior changes for each agent invocation, you can use the new <a href=\"https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeInlineAgent.html\" target=\"_blank\" rel=\"noopener\">InvokeInlineAgent API</a>. With either approach, your agents will be secure and scalable, with configurable guardrails, a flexible set of model inference options, native access to knowledge bases, code interpretation, session memory, and more.</p><p>Our HR assistant example shows how to build a single AI assistant that adapts to different user roles using the new inline agent capabilities in Amazon Bedrock Agents. When users interact with the assistant, the assistant dynamically configures agent capabilities (such as model, instructions, knowledge bases, action groups, and guardrails) based on the user’s role and their specific selections. This approach creates a flexible system that adjusts its functionality in real time, making it more efficient than creating separate agents for each user role or tool combination. The complete code for this HR assistant example is available on our <a href=\"https://github.com/awslabs/amazon-bedrock-agent-samples/tree/main/examples/agents_ux/inline-agent-hr-assistant\" target=\"_blank\" rel=\"noopener\">GitHub repo</a>.</p><p>This dynamic tool selection enables a personalized experience. When an employee logs in without direct reports, they see a set of tools that they have access to based on their role. They can select from options like requesting vacation time, checking company policies using the knowledge base, using a code interpreter for data analysis, or submitting expense reports. The inline agent assistant is then configured with only these selected tools, allowing it to assist the employee with their chosen tasks. In a real-world example, the user would not need to make the selection, because the application would make that decision and automatically configure the agent invocation at runtime. We make it explicit in this application so that you can demonstrate the impact.</p><p>Similarly, when a manager logs in to the same system, they see an extended set of tools reflecting their additional permissions. In addition to the employee-level tools, managers have access to capabilities like running performance reviews. They can select which tools they want to use for their current session, instantly configuring the inline agent with their choices.</p><p>The inclusion of knowledge bases is also adjusted based on the user’s role. Employees and managers see different levels of company policy information, with managers getting additional access to confidential data like performance review and compensation details. For this demo, we’ve implemented <a href=\"https://aws.amazon.com/blogs/machine-learning/amazon-bedrock-knowledge-bases-now-supports-metadata-filtering-to-improve-retrieval-accuracy/\" target=\"_blank\" rel=\"noopener\">metadata filtering</a> to retrieve only the appropriate level of documents based on the user’s access level, further enhancing efficiency and security.</p><p>Let’s look at how the interface adapts to different user roles.</p><p>The employee view provides access to essential HR functions like vacation requests, expense submissions, and company policy lookups. Users can select which of these tools they want to use for their current session.</p><p>The manager view extends these options to include supervisory functions like compensation management, demonstrating how the inline agent can be configured with a broader set of tools based on user permissions.</p><p>The manager view extends these capabilities to include supervisory functions like compensation management, demonstrating how the inline agent dynamically adjusts its available tools based on user permissions. Without inline agents, we would need to build and maintain two separate agents.</p><p>As shown in the preceding screenshots, the same HR assistant offers different tool selections based on the user’s role. An employee sees options like Knowledge Base, Apply Vacation Tool, and Submit Expense, whereas a manager has additional options like Performance Evaluation. Users can select which tools they want to add to the agent for their current interaction.</p><p>This flexibility allows for quick adaptation to user needs and preferences. For instance, if the company introduces a new policy for creating business travel requests, the tool catalog can be quickly updated to include a Create Business Travel Reservation tool. Employees can then choose to add this new tool to their agent configuration when they need to plan a business trip, or the application could automatically do so based on their role.</p><p>With Amazon Bedrock inline agents, you can create a catalog of actions that is dynamically selected by the application or by users of the application. This increases the level of flexibility and adaptability of your solutions, making them a perfect fit for navigating the complex, ever-changing landscape of modern business operations. Users have more control over their AI assistant’s capabilities, and the system remains efficient by only loading the necessary tools for each interaction.</p><h2>Technical foundation: Dynamic configuration and action selection</h2><p>Inline agents allow dynamic configuration at runtime, enabling a single agent to effectively perform the work of many. By specifying action groups and modifying instructions on the fly, even within the same session, you can create versatile AI applications that adapt to various scenarios without multiple agent deployments.</p><p>The following are key points about inline agents:</p><ul><li> – Change the agent’s configuration, including its FM, at runtime. This enables rapid experimentation and adaptation without redeploying the application, reducing development cycles.</li><li> – Apply governance and access control at the tool level. With agents changing dynamically at runtime, tool-level governance helps maintain security and compliance regardless of the agent’s configuration.</li><li> – Provide only necessary tools and instructions at runtime to reduce token usage and improve the agent accuracy. With fewer tools to choose from, it’s less complicated for the agent to select the right one, reducing hallucinations in the tool selection process. This approach can also lead to lower costs and improved latency compared to static agents because removing unnecessary tools, knowledge bases, and instructions reduces the number of input and output tokens being processed by the agent’s large language model (LLM).</li><li> – Create reusable actions for dynamic selection based on specific needs. This modular approach simplifies maintenance, updates, and scalability of your AI applications.</li></ul><p>The following are examples of reusable actions:</p><ul><li><strong>Enterprise system integration</strong> – Connect with systems like Salesforce, GitHub, or databases</li><li> – Perform common tasks such as sending emails or managing calendars</li><li> – Interact with specialized internal tools and services</li><li> – Analyze text, structured data, or other information</li><li> – Fetch weather updates, stock prices, or perform web searches</li><li> – Use specific machine learning (ML) models for targeted tasks</li></ul><p>When using inline agents, you configure parameters for the following:</p><ul><li>Contextual tool selection based on user intent or conversation flow</li><li>Adaptation to different user roles and permissions</li><li>Switching between communication styles or personas</li><li>Model selection based on task complexity</li></ul><p>The inline agent uses the configuration you provide at runtime, allowing for highly flexible AI assistants that efficiently handle various tasks across different business contexts.</p><h2>Building an HR assistant using inline agents</h2><p>Let’s look at how we built our HR Assistant using Amazon Bedrock inline agents:</p><ol><li> – We developed a demo catalog of HR-related tools, including: \n  <ul type=\"a\"><li> – Using <a href=\"https://aws.amazon.com/bedrock/knowledge-bases/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock Knowledge Bases</a> for accessing company policies and guidelines based on the role of the application user. In order to filter the knowledge base content based on the user’s role, you also need to provide a metadata file specifying the type of employee’s roles that can access each file</li><li>– For requesting and tracking time off.</li><li>– For submitting and managing expense reports.</li><li> – For performing calculations and data analysis.</li><li>– for conducting and reviewing employee compensation assessments (manager only access).</li></ul></li><li> – We defined multiple conversation tones to suit different interaction styles: \n  <ul><li> – For formal, business-like interactions.</li><li> – For friendly, everyday support.</li><li> – For upbeat, encouraging assistance.</li></ul></li><li> – We implemented role-based access control. The application backend checks the user’s role (employee or manager) and provides access to appropriate tools and information and passes this information to the inline agent. The role information is also used to configure metadata filtering in the knowledge bases to generate relevant responses. The system allows for dynamic tool use at runtime. Users can switch personas or add and remove tools during their session, allowing the agent to adapt to different conversation needs in real time.</li><li><strong>Integrate the agent with other services and tools</strong> – We connected the inline agent to: \n  <ul><li>Amazon Bedrock Knowledge Bases for company policies, with metadata filtering for role-based access.</li><li><a href=\"http://aws.amazon.com/lambda\" target=\"_blank\" rel=\"noopener\">AWS Lambda</a> functions for executing specific actions (such as submitting vacation requests or expense reports).</li><li>A code interpreter tool for performing calculations and data analysis.</li></ul></li><li> – We created a Flask-based UI that performs the following actions: \n  <ul><li>Displays available tools based on the user’s role.</li><li>Allows users to select different personas.</li><li>Provides a chat window for interacting with the HR assistant.</li></ul></li></ol><p>To understand how this dynamic role-based functionality works under the hood, let’s examine the following system architecture diagram.</p><p>As shown in preceding architecture diagram, the system works as follows:</p><ol><li>The end-user logs in and is identified as either a manager or an employee.</li><li>The user selects the tools that they have access to and makes a request to the HR assistant.</li><li>The agent breaks down the problems and uses the available tools to solve for the query in steps, which may include: \n  <ol><li>Amazon Bedrock Knowledge Bases (with metadata filtering for role-based access).</li><li>Lambda functions for specific actions.</li><li>Code interpreter tool for calculations.</li><li>Compensation tool (accessible only to managers to submit base pay raise requests).</li></ol></li><li>The application uses the Amazon Bedrock inline agent to dynamically pass in the appropriate tools based on the user’s role and request.</li><li>The agent uses the selected tools to process the request and provide a response to the user.</li></ol><p>This approach provides a flexible, scalable solution that can quickly adapt to different user roles and changing business needs.</p><p>In this post, we introduced the Amazon Bedrock inline agent functionality and highlighted its application to an HR use case. We dynamically selected tools based on the user’s roles and permissions, adapted instructions to set a conversation tone, and selected different models at runtime. With inline agents, you can transform how you build and deploy AI assistants. By dynamically adapting tools, instructions, and models at runtime, you can:</p><ul><li>Create personalized experiences for different user roles</li><li>Optimize costs by matching model capabilities to task complexity</li><li>Streamline development and maintenance</li><li>Scale efficiently without managing multiple agent configurations</li></ul><p>For organizations demanding highly dynamic behavior—whether you’re an AI startup, SaaS provider, or enterprise solution team—inline agents offer a scalable approach to building intelligent assistants that grow with your needs. To get started, explore our <a href=\"https://github.com/aws-samples/amazon-bedrock-samples/blob/main/agents-and-function-calling/bedrock-agents/features-examples/15-invoke-inline-agents/inline-agent-api-usage.ipynb\" target=\"_blank\" rel=\"noopener\">GitHub repo</a> and <a href=\"https://github.com/awslabs/amazon-bedrock-agent-samples/tree/main/examples/agents_ux/inline-agent-hr-assistant\" target=\"_blank\" rel=\"noopener\">HR assistant demo application</a>, which demonstrate key implementation patterns and best practices.</p><p>To learn more about how to be most successful in your agent journey, read our two-part blog series:</p><p>To get started with Amazon Bedrock Agents, check out the following <a href=\"https://github.com/awslabs/amazon-bedrock-agent-samples/\" target=\"_blank\" rel=\"noopener\">GitHub repository</a> with example code.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/10/blog-image-ishansin-1.jpeg\" alt=\"\" width=\"100\" height=\"133\">&nbsp;is a Generative AI Data Scientist at Amazon Web Services, where he helps customers build innovative and responsible generative AI solutions and products. With a strong background in AI/ML, Ishan specializes in building Generative AI solutions that drive business value. Outside of work, he enjoys playing volleyball, exploring local bike trails, and spending time with his wife and dog, Beau.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/10/mttanke-225x300-1-1.jpg\" alt=\"\" width=\"100\" height=\"133\">&nbsp;is a Senior Generative AI Data Scientist at AWS. With a background in machine learning, she has over 10 years of experience architecting and building AI applications with customers across industries. As a technical lead, she helps customers accelerate their achievement of business value through generative AI solutions on Amazon Bedrock. In her free time, Maira enjoys traveling, playing with her cat, and spending time with her family someplace warm.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/10/roymark-225x300-1-1.jpg\" alt=\"\" width=\"100\" height=\"133\"> is a Principal Machine Learning Architect for AWS, helping customers design and build generative AI solutions. His focus since early 2023 has been leading solution architecture efforts for the launch of Amazon Bedrock, the flagship generative AI offering from AWS for builders. Mark’s work covers a wide range of use cases, with a primary interest in generative AI, agents, and scaling ML across the enterprise. He has helped companies in insurance, financial services, media and entertainment, healthcare, utilities, and manufacturing. Prior to joining AWS, Mark was an architect, developer, and technology leader for over 25 years, including 19 years in financial services. Mark holds six AWS certifications, including the ML Specialty Certification.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/10/enitin.jpeg\" alt=\"\" width=\"100\" height=\"133\"> is a Sr. Enterprise Solutions Architect at AWS, experienced in Software Engineering, Enterprise Architecture, and AI/ML. He is deeply passionate about exploring the possibilities of generative AI. He collaborates with customers to help them build well-architected applications on the AWS platform, and is dedicated to solving technology challenges and assisting with their cloud journey.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/10/Image-from-iOS-244x300-1.jpg\" alt=\"\" width=\"100\" height=\"123\"> is a Software Development Engineer at Amazon Web Services (AWS). He specializes in backend system design, distributed architectures, and scalable solutions, contributing to the development and launch of high-impact systems at Amazon. Outside of work, he spends his time playing ping pong and hiking through Cascade trails, enjoying the outdoors as much as he enjoys building systems.</p><p> is a Software Development Engineer at Amazon Web Services (AWS), working in Agents for Amazon Bedrock. He focuses on developing scalable systems on the cloud that enable AI applications frameworks and orchestrations. Shubham also has a background in building distributed, scalable, high-volume-high-throughput systems in IoT architectures.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2018/09/18/vivekbh-100.jpg\" alt=\"\" width=\"100\" height=\"134\"> is a Principal Engineer for Amazon Bedrock.&nbsp;He focuses on building deep learning-based AI and computer vision solutions for AWS customers. Oustide of work, Vivek enjoys trekking and following cricket.</p>","contentLength":17760,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Learnings from a Machine Learning Engineer — Part 1: The Data","url":"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/","date":1739480153,"author":"David Martin","guid":4,"unread":true,"content":"<p>It is said that in order for a machine learning model to be successful, you need to have good data. While this is true (and pretty much obvious), it is extremely difficult to define, build, and sustain good data. Let me share with you the unique processes that I have learned over several years building an ever-growing image classification system and how you can apply these techniques to your own application.</p><p>With persistence and diligence, you can avoid the classic “garbage in, garbage out”, maximize your model accuracy, and demonstrate real business value.</p><p>In this series of articles, I will dive into the care and feeding of a multi-class, single-label image classification app and what it takes to reach the highest level of performance. I won’t get into any coding or specific user interfaces, just the main concepts that you can incorporate to suit your needs with the tools at your disposal.</p><p>Here is a brief description of the articles. You will notice that the model is last on the list since we need to focus on curating the data first and foremost:</p><p>Over the past six years, I have been primarily focused on building and maintaining an image classification application for a manufacturing company. Back when I started, most of the software did not exist or was too expensive, so I created these from scratch. In this time, I have deployed two identifier applications, the largest handles 1,500 classes and achieves 97–98% accuracy.</p><p>It was about eight years ago that I started online studies for <a href=\"https://towardsdatascience.com/tag/data-science/\" title=\"Data Science\">Data Science</a> and machine learning. So, when the exciting opportunity to create an AI application presented itself, I was prepared to build the tools I needed to leverage the latest advancements. I jumped in with both feet!</p><p>I quickly found that building and deploying a model is probably the easiest part of the job. Feeding high quality data into the model is the best way to improve performance, and that requires focus and patience. Attention to detail is what I do best, so this was a perfect fit.</p><h2><strong>It all starts with the data</strong></h2><p>I feel that so much attention is given to the model selection (deciding which neural network is best) and that the data is just an afterthought. I have found the hard way that even one or two pieces of bad data can significantly impact model performance, so that is where we need to focus.</p><p>For example, let’s say you train the classic cat versus dog image classifier. You have 50 pictures of cats and 50 pictures of dogs, however one of the “cats” is clearly (objectively) a picture of a dog. The computer doesn’t have the luxury of ignoring the mislabelled image, and instead adjusts the model weights to make it fit. Square peg meets round hole.</p><p>Another example would be a picture of a cat that climbed up into a tree. But when you take a wholistic view of it, you would describe it as a picture of a tree (first) with a cat (second). Again, the computer doesn’t know to ignore the big tree and focus on the cat — it will start to identify trees as cats, even if there is a dog. You can think of these pictures as outliers and should be removed.</p><p>It doesn’t matter if you have the best neural network in the world, you can count on the model making poor predictions when it is trained on “bad” data. I’ve learned that any time I see the model make mistakes, it’s time to review the data.</p><h2><strong>Example Application — Zoo animals</strong></h2><p>For the rest of this write-up, I will use an example of identifying zoo animals. Let’s assume your goal is to create a mobile app where guests at the zoo can take pictures of the animals they see and have the app identify them. Specifically, this is a multi-class, single-label application.</p><ul><li>&nbsp;— There are a lot of different animals at the zoo and many of them look very similar.</li><li>&nbsp;— Guests using the app don’t always take good pictures (zoomed out, blurry, too dark), so we don’t want to provide an answer if the image is poor.</li><li>&nbsp;— The zoo keeps expanding and adding new species all the time.</li><li>&nbsp;— Occasionally you might find that people take pictures of the sparrows near the food court grabbing some dropped popcorn.</li><li>&nbsp;— Just for fun, guests may take a picture of the bag of popcorn just to see what it comes back with.</li></ul><p>These are all real challenges — being able to tell the subtle differences between animals, handling out-of-scope cases, and just plain poor images.</p><p>Before we get there, let’s start from the beginning.</p><p>There are a lot of tools these days to help you with this part of the process, but the challenge remains the same — collecting, labelling, and curating the data.</p><p>Having data to collect is challenge #1. Without images, you have nothing to train. You may need to get creative on sourcing the data, or even creating synthetic data. More on that later.</p><p>A quick note about image pre-processing. I convert all my images to the input size of my neural network and save them as PNG. Inside this square PNG, I preserve the aspect ratio of the original picture and fill the background black. I don’t stretch the image nor crop any features out. This also helps center the subject.</p><p>Challenge #2 is to establish standards for data quality…and ensure that these standards are followed! These standards will guide you toward that “good” data. And this assumes, of course, correct labels. Having both is much easier said than done!</p><p>I hope to show how “good” and “correct” actually go hand-in-hand, and how important it is to apply these standards to every image.</p><p>First, I want to point out that the image data discussed here is for the training set. What qualifies as a good image for&nbsp;&nbsp;is a bit different than what qualifies as a good image for&nbsp;. More on that in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>.</p><p>So, what is “good” data when talking about images? “A picture is worth a thousand words”, and if the&nbsp;&nbsp;you use to describe the picture do not include the subject you are trying to label, then it is not good and you need remove it from your training set.</p><p>For example, let’s say you are shown a picture of a zebra and (removing bias toward your application) you describe it as an “open field with a zebra in the distance”. In other words, if “open field” is the first thing you notice, then you likely do&nbsp;&nbsp;want to use that image. The opposite is also true — if the picture is way too close, you would described it as “zebra pattern”.</p><p>What you want is a description like, “a zebra, front and center”. This would have your subject taking up about 80–90% of the total frame. Sometimes I will take the time to crop the original image so the subject is framed properly.</p><p>Keep in mind the use of image augmentation at the time of training. Having that buffer around the edges will allow “zoom in” augmentation. And “zoom out” augmentation will simulate smaller subjects, so don’t start out less than 50% of the total frame for your subject since you lose detail.</p><p>Another aspect of a “good” image relates to the label. If you can only see the back side of your zoo animal, can you really tell, for example, that it is a cheetah versus a leopard? The key identifying features need to be visible. If a human struggles to identify it, you can’t expect the computer to learn anything.</p><p>What does a “bad” image look like? Here is what I frequently watch out for:</p><ul><li>Wide angle lens stretching</li><li>High contrast or dark shadows</li><li>“Doctored” images, drawn lines and arrows</li><li>“Unusual” angles or situations</li><li>Picture of a mobile device that has a picture of your subject</li></ul><p>If you have a team of subject matter experts (SMEs) on hand to label the images, you are in a good starting position. Animal trainers at the zoo know the various species, and can spot the differences between, for example, a chimpanzee and a bonobo.</p><p>To a <a href=\"https://towardsdatascience.com/tag/machine-learning-engineer/\" title=\"Machine Learning Engineer\">Machine Learning Engineer</a>, it is easy for you to assume all labels from your SMEs are correct and move right on to training the model. However, even experts make mistakes, so if you can get a second opinion on the labels, your error rate should go down.</p><p>In reality, it can be prohibitively expensive to get one, let alone two, subject matter experts to review image labels. The SME usually has years of experience that make them more valuable to the business in other areas of work. My experience is that the machine learning engineer (that’s you and me) becomes the second opinion, and often the first opinion as well.</p><p>Over time, you can become pretty adept at labelling, but certainly not an SME. If you do have the luxury of access to an expert, explain to them the labelling standards and how these are required for the application to be successful. Emphasize “quality over quantity”.</p><p>It goes without saying that having a&nbsp;&nbsp;label is so important. However, all it takes is one or two mislabelled images to degrade performance. These can easily slip into your data set with careless or hasty labelling. So, take the time to get it right.</p><p>Ultimately, we as the ML engineer are responsible for model performance. So, if we take the approach of only working on model training and deployment, we will find ourselves wondering why performance is falling short.</p><p>A lot of times, you will come across a really good picture of a very interesting subject, but have no idea what it is! It would be a shame to simply dispose of it. What you can do is assign it a generic label, like “Unknown Bird” or “Random Plant” that are&nbsp;&nbsp;included in your training set. Later in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/\">Part 4</a>, you’ll see how to come back to these images at a later date when you have a better idea what they are, and you’ll be glad you saved them.</p><p>If you have done any image labelling, then you know how time consuming and difficult it can be. But this is where having a model, even a less-than-perfect model, can help you.</p><p>Typically, you have a large collection of unlabelled image and you need to go through them one at a time to assign labels. Simply having the model offer a best guess and display the top 3 results lets you step through each image in a matter of seconds!</p><p>Even if the top 3 results are wrong, this can help you narrow down your search. Over time, newer models will get better, and the labelling process can even be somewhat fun!</p><p>In <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/\">Part 4</a>, I will show how you can bulk identify images and take this to the next level for faster labelling.</p><p>I mentioned the example above of two species that look very similar, the chimpanzee and the bonobo. When you start out building your data set, you may have very sparse coverage of one or both of these species. In machine learning terms, we these “classes”. One option is to roll with what you have and hope that the model picks up on the differences with only a handful of example images.</p><p>The option that I have used is to merge two or more classes into one, at least temporarily. So, in this case I would create a class called “chimp-bonobo”, which is composed of the limited example pictures of chimpanzee and bonobo species classes. Combined, these may give me enough to train the model on “chimp-bonobo”, with the trade-off that it’s a more generic identification.</p><p>Sub-classes can even be normal variations. For example,&nbsp;&nbsp;pink flamingos are grey instead of pink. Or, male and female orangutans have distinct facial features. You wan to have a fairly balanced number of images for these normal variations, and keeping sub-classes will allow you to accomplish this.</p><p>Don’t be concerned that you are merging completely different looking classes — the neural network does a nice job of applying the “OR” operator. This works both ways — it can help you identify male or female variations as one species, but it can hurt you when “bad” outlier images sneak in like the example “open field with a zebra in the distance.”</p><p>Over time, you will (hopefully) be able to collect more images of the sub-classes and then be able to successfully split them apart (if necessary) and train the model to identify them separately. This process has worked very well for me. Just be sure to double-check all the images when you split them to ensure the labels didn’t get accidentally mixed up — it will be time well spent.</p><p>All of this certainly depends on your user requirements, and you can handle this in different ways either by creating a unique class label like “chimp-bonobo”, or at the front-end presentation layer where you notify the user that you have intentionally merged these classes and provide guidance on further refining the results. Even after you decide to split the two classes, you may want to caution the user that the model could be wrong since the two classes are so similar.</p><p>I realize this was a long write-up for something that on the surface seems intuitive, but these are all areas that I have tripped me up in the past because I didn’t give them enough attention. Once you have a solid understanding of these principles, you can go on to build a successful application.</p><p>In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/\">Part 2</a>, we will take the curated data we collected here to create the classic data sets, with a custom benchmark set that will further enhance your data. Then we will see how best to evaluate our trained model using a specific “training mindset”, and switch to a “production mindset” when evaluating a deployed model.</p>","contentLength":13198,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Learnings from a Machine Learning Engineer — Part 4: The Model","url":"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/","date":1739480022,"author":"David Martin","guid":3,"unread":true,"content":"<p>In this latest part of my series, I will share what I have learned on selecting a model for <a href=\"https://towardsdatascience.com/tag/image-classification/\" title=\"Image Classification\">Image Classification</a> and how to fine tune that model. I will also show how you can leverage the model to accelerate your labelling process, and finally how to justify your efforts by generating usage and performance statistics.</p><p>In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>, I discussed the process of labelling your image data that you use in your image classification project. I showed how define “good” images and create sub-classes. In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/\">Part 2</a>, I went over various data sets, beyond the usual train-validation-test sets, with benchmark sets, plus how to handle synthetic data and duplicate images. In <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>, I explained how to apply different evaluation criteria to a trained model versus a deployed model, and using benchmarks to determine when to deploy a model.</p><p>So far I have focused a lot of time on labelling and curating the set of images, and also evaluating model performance, which is like putting the cart before the horse. I’m not trying to minimize what it takes to design a massive neural network — this is a very important part of the application you are building. In my case, I spent a few weeks experimenting with different available models before settling on one that fit the bill.</p><p>Once you pick a model structure, you usually don’t make any major changes to it. For me, six years into deployment, I’m still using the same one. Specifically, I chose Inception V4 because it has a large input image size and an adequate number of layers to pick up on subtle image features. It also performs inference fast enough on CPU, so I don’t need to run expensive hardware to serve the model.</p><p>Your mileage may vary. But again, the main takeaway is that focusing on your data will pay dividends versus searching for the best model.</p><p>I will share a process that I found to work extremely well. Once I decided on the model to use, I randomly initialized the weights and let the model train for about 120 epoch before improvements plateau at a fairly modest accuracy, like 93%. At this point, I performed the evaluation of the trained model (see <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>) to clean up the data set. I also incorporated new images as part of the data pipeline (see <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>) and prepared the data sets for the next training run.</p><p>Before starting the next training run, I simply take the last trained model, pop the output layer, and add it back in with random weights. Since the number of output classes are constantly increasing in my case, I have to pop that layer anyway to account for the new number of classes. Importantly, I leave the rest of the trained weights as they were and allow them to continue updating for the new classes.</p><p>This allows the model to train much faster before improvements stall. After repeating this process dozens of times, the training reaches plateau after about 20 epochs, and the test accuracy can reach 99%! The model is building upon the low-level features that it established from the previous runs while re-learning the output weights to prevent overfitting.</p><p>It took me a while to trust this process, and for a few years I would train from scratch every time. But after I attempted this and saw the training time (not to mention the cost of cloud GPU) go down while the accuracy continued to go up, I started to embrace the process. More importantly, I continue to see the evaluation metrics of the deployed model return solid performances.</p><p>During training, you can apply transformations on your images (called “augmentation”) to give you more diversity from you data set. With our zoo animals, it is fairly safe to apply left-right flop, slight rotations clockwise and counterclockwise, and slight resize that will zoom in and out.</p><p>With these transformations in mind, make sure your images are still able to act as good training images. In other words, an image where the subject is already small will be even smaller with a zoom out, so you probably want to discard the original. Also, some of your original pictures may need to be re-oriented by 90 degrees to be upright since a further rotation would make them look unusual.</p><p>As I mentioned in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>, you can use the trained model to assist you in labelling images one at a time. But the way to take this even further is to have your newly trained model identify hundreds at a time while building a list of the results that you can then filter.</p><p>Typically, we have large collections of&nbsp;&nbsp;images that have come in either through regular usage of the application or some other means. Recall from <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a> assigning “unknown” labels to interesting pictures but you have no clue what it is. By using the bulk identification method, we can sift through the collections quickly to target the labelling once we know what they are.</p><p>By combining your current image counts with the bulk identification results, you can target classes that need expanded coverage. Here are a few ways you can leverage bulk identification:</p><ul><li><strong>Increase low image counts</strong>&nbsp;— Some of your classes may have just barely made the cutoff to be included in the training set, which means you need more examples to improve coverage. Filter for images that have low counts.</li><li><strong>Replace staged or synthetic images</strong>&nbsp;— Some classes may be built entirely using non-real-world images. These pictures may be good enough to get started with, but may cause performance issues down the road because they look different than what typically comes through. Filter for classes that depend on staged images.</li><li>&nbsp;— A class in your data set may look like another one. For example, let’s say your model can identify an antelope, and that looks like a gazelle which your model cannot identify yet. Setting a filter for antelope and a lower confidence score may reveal gazelle images that you can label.</li><li>&nbsp;— You may not have known how to identify the dozens of cute wallaby pictures, so you saved them under “Unknown” because it was a good image. Now that you know what it is, you can filter for its look-alike kangaroo and quickly add a new class.</li><li><strong>Mass removal of low scores</strong>&nbsp;— As a way to clean out your large collection of unlabelled images that have nothing worth labelling, set a filter for lowest scores.</li></ul><p>Recall the decision I made to have image cutoffs from <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/\">Part 2</a>, which allows us to ensure an adequate number of example images of a class before we train and server a model to the public. The problem is that you may have a number of classes that are&nbsp;&nbsp;below your cutoff (in my case, 40) and don’t make it into the model.</p><p>The way I approach this is with a “throw-away” training run that I do not intend to move to production. I will decrease the lower cutoff from 40 to perhaps 35, build my train-validation-test sets, then train and evaluate like I normally do. The most important part of this is the bulk identification at the end!</p><p>There is a chance that somewhere in the large collection of unlabelled images I will find the few that I need. Doing the bulk identification with this throw-away model helps find them.</p><p>One very important aspect of any machine learning application is being able to show usage and performance reports. Your manager will likely want to see how many times the application is being used to justify the expense, and you as the ML engineer will want to see how the latest model is performing compared to the previous one.</p><p>You should build logging into your model serving to record every transaction going through the system. Also, the manual evaluations from <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a> should be recorded so you can report on performance for such things as accuracy over time, by model version, by confidence scores, by class, etc. You will be able to detect trends and make adjustments to improve the overall solution.</p><p>There are a lot of reporting tools, so I won’t recommend one over the other. Just make sure you are collecting as much information as you can to build these dashboards. This will justify the time, effort, and cost associated with maintaining the application.</p><p>We covered a lot of ground across this four-part series on building an image classification project and deploying it in the real world. It all starts with the data, and by investing the time and effort into maintaining the highest quality image library, you can reach impressive levels of model performance that will gain the trust and confidence of your business partners.</p><p>As a <a href=\"https://towardsdatascience.com/tag/machine-learning-engineer/\" title=\"Machine Learning Engineer\">Machine Learning Engineer</a>, you are primarily responsible for building and deploying your model. But it doesn’t stop there — dive into the data. The more familiar you are with the data, the better you will understand the strengths and weaknesses of your model. Take a close look at the evaluations and use them as an opportunity to adjust the data set.</p><p>I hope these articles have helped you find new ways to improve your own machine learning project. And by the way, don’t let the machine do all the learning — as humans, our job is to continue our own learning, so don’t ever stop!</p><p>Thank you for taking this deep dive with me into a data-driven approach to model optimization. I look forward to your feedback and how you can apply this to your own application.<a href=\"https://medium.com/tag/machine-learning?source=post_page-----7f530bc91383---------------------------------------\"></a></p>","contentLength":9124,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Use language embeddings for zero-shot classification and semantic search with Amazon Bedrock","url":"https://aws.amazon.com/blogs/machine-learning/use-language-embeddings-for-zero-shot-classification-and-semantic-search-with-amazon-bedrock/","date":1739480012,"author":"Tom Rogers","guid":131,"unread":true,"content":"<p>In this post, we discuss what embeddings are, show how to practically use language embeddings, and explore how to use them to add functionality such as zero-shot classification and semantic search. We then use <a href=\"https://aws.amazon.com/bedrock/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock</a> and language embeddings to add these features to a <a href=\"https://en.wikipedia.org/wiki/RSS\" target=\"_blank\" rel=\"noopener\">really simple syndication (RSS)</a> aggregator application.</p><p>Amazon Bedrock is a fully managed service that makes <a href=\"https://aws.amazon.com/what-is/foundation-models/\" target=\"_blank\" rel=\"noopener\">foundation models</a> (FMs) from leading AI startups and Amazon available through an API, so you can choose from a wide range of FMs to find the model that is best suited for your use case. Amazon Bedrock offers a serverless experience, so you can get started quickly, privately customize FMs with your own data, and integrate and deploy them into your applications using <a href=\"https://aws.amazon.com/\" target=\"_blank\" rel=\"noopener\">Amazon Web Services</a> (AWS) services without having to manage infrastructure. For this post, we use the <a href=\"https://aws.amazon.com/bedrock/cohere-command-embed/\" target=\"_blank\" rel=\"noopener\">Cohere v3 Embed</a> model on Amazon Bedrock to create our language embeddings.</p><p>To demonstrate some of the possible uses of these language embeddings, we developed an RSS aggregator website. RSS is a web feed that allows publications to publish updates in a standardized, computer-readable way. On our website, users can subscribe to an RSS feed and have an aggregated, categorized list of the new articles. We use embeddings to add the following functionalities:</p><p>This post uses this application as a reference point to discuss the technical implementation of the semantic search and zero-shot classification features.</p><p>This solution uses the following services:</p><p>The following diagram illustrates the solution architecture.</p><p>This section offers a quick primer on what embeddings are and how they can be used.</p><p>Embeddings are numerical representations of concepts or objects, such as language or images. In this post, we discuss language embeddings. By reducing these concepts to numerical representations, we can then use them in a way that a computer can understand and operate on.</p><p>Let’s take Berlin and Paris as an example. As humans, we understand the conceptual links between these two words. Berlin and Paris are both cities, they’re capitals of their respective countries, and they’re both in Europe. We understand their conceptual similarities almost instinctively, because we can create a model of the world in our head. However, computers have no built-in way of representing these concepts.</p><p>To represent these concepts in a way a computer can understand, we convert them into language embeddings. Language embeddings are high dimensional vectors that learn their relationships with each other through the training of a neural network. During training, the neural network is exposed to enormous amounts of text and learns patterns based on how words are colocated and relate to each other in different contexts.</p><p>Embedding vectors allow computers to model the world from language. For instance, if we embed “Berlin” and “Paris,” we can now perform mathematical operations on these embeddings. We can then observe some fairly interesting relationships. For instance, we could do the following: Paris – France + Germany ~= Berlin. This is because the embeddings capture the relationships between the words “Paris” and “France” and between “Germany” and “Berlin”—specifically, that Paris and Berlin are both capital cities of their respective countries.</p><p>The following graph shows the word vector distance between countries and their respective capitals.</p><p>Subtracting “France” from “Paris” removes the country semantics, leaving a vector representing the concept of a capital city. Adding “Germany” to this vector, we are left with something closely resembling “Berlin,” the capital of Germany. The vectors for this relationship are shown in the following graph.</p><p>For our use case, we use the pre-trained Cohere Embeddings model in Amazon Bedrock, which embeds entire texts rather than a single word. The embeddings represent the meaning of the text and can be operated on using mathematical operations. This property can be useful to map relationships such as similarity between texts.</p><p>One way in which we use language embeddings is by using their properties to calculate how similar an article is to one of the topics.</p><p>To do this, we break down a topic into a series of different and related embeddings. For instance, for culture, we have a set of embeddings for sports, TV programs, music, books, and so on. We then embed the incoming title and description of the RSS articles, and calculate the similarity against the topic embeddings. From this, we can assign topic labels to an article.</p><p>The following figure illustrates how this works. The embeddings that Cohere generates are highly dimensional, containing 1,024 values (or dimensions). However, to demonstrate how this system works, we use an algorithm designed to reduce the dimensionality of the embeddings, <a href=\"https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding\" target=\"_blank\" rel=\"noopener\">t-distributed Stochastic Neighbor Embedding (t-SNE)</a>, so that we can view them in two dimensions. The following image uses these embeddings to visualize how topics are clustered based on similarity and meaning.</p><p>You can use the embedding of an article and check the similarity of the article against the preceding embeddings. You can then say that if an article is clustered closely to one of these embeddings, it can be classified with the associated topic.</p><p>This is the <a href=\"https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm\" target=\"_blank\" rel=\"noopener\">k-nearest neighbor (k-NN) algorithm</a>. This algorithm is used to perform classification and regression tasks. In k-NN, you can make assumptions around a data point based on its proximity to other data points. For instance, you can say that an article that has proximity to the music topic shown in the preceding diagram can be tagged with the culture topic.</p><p>The following figure demonstrates this with an <a href=\"https://arstechnica.com/science/2024/07/the-climate-is-changing-so-fast-that-we-havent-seen-how-bad-extreme-weather-could-get/\" target=\"_blank\" rel=\"noopener\">ArsTechnica article</a>. We plot against the embedding of an article’s title and description: (The climate is changing so fast that we haven’t seen how bad extreme weather could get: Decades-old statistics no longer represent what is possible in the present day).</p><p>The advantage of this approach is that you can add custom, user-generated topics. You can create a topic by first creating a series of embeddings of conceptually related items. For instance, an AI topic would be similar to the embeddings for AI, Generative AI, LLM, and Anthropic, as shown in the following screenshot.</p><p>In a traditional classification system, we’d be required to train a classifier—a supervised learning task where we’d need to provide a series of examples to establish whether an article belongs to its respective topic. Doing so can be quite an intensive task, requiring labeled data and training the model. For our use case, we can provide examples, create a cluster, and tag articles without having to provide labeled examples or train additional models. This is shown in the following screenshot of results page of our website.</p><p>In our application, we ingest new articles on a schedule. We use EventBridge schedules to periodically call a Lambda function, which checks if there are new articles. If there are, it creates an embedding from them using Amazon Bedrock and Cohere.</p><p>We calculate the article’s distance to the different topic embeddings, and can then determine whether the article belongs to that category. This is done with Aurora PostgreSQL with pgvector. We store the embeddings of the topics and then calculate their distance using the following SQL query:</p><div><pre><code>const topics = await sqlClient.then(it=&gt; it.query(\n    `SELECT name, embedding_description, similarity\n     FROM (SELECT topic_id as name, embedding_description, (1- ABS( 1 –(embed.embedding &lt;-&gt; $1))) AS \"similarity\" FROM topic_embedding_link embed)  topics\n     ORDER BY similarity desc`,\n    [toSql(articleEmbedding)]\n  ))\n</code></pre></div><p>The &lt;-&gt; operator in the preceding code calculates the Euclidean distance between the article and the topic embedding. This number allows us to understand how close an article is to one of the topics. We can then determine the appropriateness of a topic based on this ranking.</p><p>We then tag the article with the topic. We do this so that the subsequent request for a topic is as computationally as light as possible; we do a simple join rather than calculating the Euclidean distance.</p><div><div><pre><code>const formattedTopicInsert = pgformat(\n    `INSERT INTO feed_article_topic_link(topic_id, feed_article_id) VALUES %L ON CONFLICT DO NOTHING`,\n    topicLinks\n  )</code></pre></div></div><p>We also cache a specific topic/feed combination because these are calculated hourly and aren’t expected to change in the interim.</p><p>As previously discussed, the embeddings produced by Cohere contain a multitude of features; they embed the meanings and semantics of a word of phrase. We’ve also found that we can perform mathematical operations on these embeddings to do things such as calculate the similarity between two phrases or words.</p><p>We can use these embeddings and calculate the similarity between a search term and an embedding of an article with the k-NN algorithm to find articles that have similar semantics and meanings to the search term we’ve provided.</p><p>For example, in one of our RSS feeds, we have a lot of different articles that rate products. In a traditional search system, we’d rely on keyword matches to provide relevant results. Although it might be simple to find a specific article (for example, by searching “best digital notebooks”), we would need a different method to capture multiple product list articles.</p><p>In a semantic search system, we first transform the term “Product list” in an embedding. We can then use the properties of this embedding to perform a search within our embedding space. Using the k-NN algorithm, we can find articles that are semantically similar. As shown in the following screenshot, despite not containing the text “Product list” in either the title or description, we’ve been able to find articles that contain a product list. This is because we were able to capture the semantics of the query and match it to the existing embeddings we have for each article.</p><p>In our application, we store these embeddings using pgvector on Aurora PostgreSQL. pgvector is an open source extension that enables vector similarity search in PostgreSQL. We transform our search term into an embedding using Amazon Bedrock and Cohere v3 Embed.</p><p>After we’ve converted the search term to an embedding, we can compare it with the embeddings on the article that have been saved during the ingestion process. We can then use pgvector to find articles that are clustered together. The SQL code for that is as follows:</p><div><pre><code>SELECT *\nFROM (\n    SELECT feed_articles.id as id, title, feed_articles.feed_id as feed, feedName, slug, description, url, author, image, published_at as published, 1 - ABS(1 - (embedding &lt;-&gt; $2)) AS \"similarity\"\n    FROM feed_articles\n    INNER JOIN (select feed_id, name as feedName from feed_user_subscription fus where fus.user_id=$1) sub on feed_articles.feed_id=sub.feed_id\n    ${feedId != undefined ? `WHERE feed_articles.feed_id = $4` : \"\"}\n)\nWHERE similarity &gt; 0.95\nORDER BY similarity desc\nLIMIT $3;\n</code></pre></div><p>This code calculates the distance between the topics, and the embedding of this article as “similarity.” If this distance is close, then we can assume that the topic of the article is related, and we therefore attach the topic to the article.</p><p>To deploy this application in your own account, you need the following prerequisites:</p><ul><li>Model access for Cohere Embed English. On the Amazon Bedrock console, choose  in the navigation pane, then choose . Select the FMs of your choice and request access.</li></ul><p>When the prerequisite steps are complete, you’re ready to set up the solution:</p><ol start=\"2\"><li>Navigate to the solution directory:</li></ol><ol start=\"3\"><li>In your terminal, export your AWS credentials for a role or user in ACCOUNT_ID. The role needs to have all necessary permissions for AWS CDK deployment: \n  <ul><li><strong>export AWS_REGION=”&lt;region&gt;”</strong> – The <a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\" target=\"_blank\" rel=\"noopener\">AWS Region</a> you want to deploy the application to</li><li><strong>export AWS_ACCESS_KEY_ID=”&lt;access-key&gt;”</strong> – The access key of your role or user</li><li><strong>export AWS_SECRET_ACCESS_KEY=”&lt;secret-key&gt;”</strong> – The secret key of your role or user</li></ul></li></ol><ol start=\"4\"><li>If you’re deploying the AWS CDK for the first time, run the following command:</li></ol><ol start=\"5\"><li>To synthesize the <a href=\"http://aws.amazon.com/cloudformation\" target=\"_blank\" rel=\"noopener\">AWS CloudFormation</a> template, run the following command:<code>cdk synth -c vpc_id=&lt;ID Of your VPC&gt;</code></li></ol><ol start=\"6\"><li>To deploy, use the following command:<code>cdk deploy -c vpc_id=&lt;ID Of your VPC&gt;</code></li></ol><p>When deployment is finished, you can check these deployed stacks by visiting the AWS CloudFormation console, as shown in the following screenshot.</p><p>Run the following command in the terminal to delete the CloudFormation stack provisioned using the AWS CDK:</p><p>In this post, we explored what language embeddings are and how they can be used to enhance your application. We’ve learned how, by using the properties of embeddings, we can implement a real-time zero-shot classifier and can add powerful features such as semantic search.</p><p>The code for this application can be found on the accompanying <a href=\"https://github.com/aws-samples/rss-aggregator-using-cohere-embeddings-bedrock\" target=\"_blank\" rel=\"noopener\">GitHub repo</a>. We encourage you to experiment with language embeddings and find out what powerful features they can enable for your applications!</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/06/ML-17434-About-Author.jpeg\" alt=\"About the Author\" width=\"100\" height=\"133\">is a Solutions Architect based in Amsterdam, the Netherlands. He has a background in software engineering. At AWS, Thomas helps customers build cloud solutions, focusing on modernization, data, and integrations.</p>","contentLength":13247,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Learnings from a Machine Learning Engineer — Part 2: The Data Sets","url":"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/","date":1739478579,"author":"David Martin","guid":2,"unread":true,"content":"<p>In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>, we discussed the importance of collecting good image data and assigning proper labels for your <a href=\"https://towardsdatascience.com/tag/image-classification/\" title=\"Image Classification\">Image Classification</a> project to be successful. Also, we talked about classes and sub-classes of your data. These may seem pretty straight forward concepts, but it’s important to have a solid understanding going forward. So, if you haven’t, please check it out.</p><p>Now we will discuss how to build the various data sets and the techniques that have worked well for my application. Then in the <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">next part</a>, we will dive into the evaluation of your models, beyond simple accuracy.</p><p>I will again use the example zoo animals image classification app.</p><p>As machine learning engineers, we are all familiar with the train-validation-test sets, but when we include the concept of sub-classes discussed in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>, and incorporate to concepts discussed below to set a minimum and maximum image count per class, as well as staged and synthetic data to the mix, the process gets a bit more complicated. I had to create a custom script to handle these options.</p><p>I will walk you through these concepts before we split the data for training:</p><ul><li>&nbsp;— Too few images and your model performance will suffer. Too many and you spend more time training than it’s worth.</li><li>&nbsp;— Your model indicates how confident it is in the predictions. Let’s use that to decide when to present results to the user.</li><li>&nbsp;— Real-world data is messy and the benchmark sets should reflect that. These need to stretch the model to the limit and help us decide when it is ready for production.</li><li><strong>Staged and synthetic data</strong>&nbsp;— Real-world data is king, but sometimes you need to produce the your own or even generate data to get off the ground. Be careful it doesn’t hurt performance.</li><li>&nbsp;— Repeat data can skew your results and give you a false sense of performance. Make sure your data is diverse.</li><li>&nbsp;— Combine sub-classes, apply cutoffs, and create your train-validation-test sets. Now we are ready to get the show started.</li></ul><p>In my experience, using a minimum of 40 images per class provides descent performance. Since I like to use 10% each for the test set and validation set, that means at least 4 images will be used to check the training set, which feels just barely adequate. Using fewer than 40 images per class, I notice my model evaluation tends to suffer.</p><p>On the other end, I set a maximum of about 125 images per class. I have found that the performance gains tend to plateau beyond this, so having more data will slow down the training run with little to show for it. Having more than the maximum is fine, and these “overflow” can be added to the test set, so they don’t go to waste.</p><p>There are times when I will drop the minimum cutoff to, say 35, with no intention of moving the trained model to production. Instead, the purpose is to leverage this throw-away model to find more images from my unlabelled set. This is a technique that I will go into more detail in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>.</p><p>You are likely familiar with the softmax score. As a reminder, softmax is the probability assigned to each label. I like to think of it as a confidence score, and we are interested in the class that receives the highest confidence. Softmax is a value between zero and one, but I find it easier to interpret confidence scores between zero and 100, like a percentage.</p><p>In order to decide if the model is confident enough with its prediction, I have chosen a threshold of 95. I use this threshold when determining if I want to present results to the user.</p><p>Scores above the threshold have a better changes of being right, so I can confidently provide the results. Scores below the threshold may not be right — in fact it could be “out-of-scope”, meaning it’s something the model doesn’t know how to identify. So, instead of taking the risk of presenting incorrect results, I instead prompt the user to try again and offer suggestions on how to take a “good” picture.</p><p>Admittedly this is somewhat arbitrary cutoff, and you should decide for your use-case what is appropriate. In fact, this score could probably be adjusted for each trained model, but this would make it harder to compare performance across models.</p><p>I will refer to this confidence score frequently in the evaluations section in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>.</p><p>Let me introduce what I call the benchmark sets, which you can think of as extended test sets. These are hand-picked images designed to stretch the limits of your model, and provide a measure for specific classes of your data. Use these benchmarks to justify moving your model to production, and for an objective measure to show to your manager.</p><ul><li>&nbsp;— These are the “extra credit” images, like the bonus questions a professor would add to the quiz to see which students are paying attention. You need a keen eye to spot the difference between the ground truth and a similar looking class. For example, a cheetah sleeping in the shade that could pass as a leopard if you don’t look closely.</li><li>&nbsp;— These are the “trick question” images. Our model is trained on zoo animals, but people are known for not following the rules. For example, a zoo guest takes a picture of their child wearing cheetah face paint.</li><li>&nbsp;— These are your “bread and butter” classes that need to get near perfect scores and zero errors. This would be a make-or-break benchmark for moving to production.</li><li>&nbsp;— These are your “rare but exceptional” classes that again need to be correct, but reach a minimum score like the confidence threshold.</li></ul><p>When looking for images to add to the benchmarks, you can likely find them in real-world images from your deployed model. See the evaluation in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>.</p><p>For each benchmark, calculate the min, max, median, and mean scores, and also how many images get scores above and below the confidence threshold. Now you can compare these measures against what is currently in production, and against your minimum requirements, to help decide if the new model is production worthy.</p><p>Perhaps the biggest hurdle to any supervised machine learning application is having data to train the model. Clearly, “real-world” data that comes from actual users of the application is ideal. However you can’t really collect these until the model is deployed. Chicken and egg problem.</p><p>One way to get started to is to have volunteers collect “staged” images for you, trying to act like real users. So, let’s have our zoo staff go around taking pictures of the animals. This is a good start, but there will be a certain level of bias introduced in these images. For example, the staff may take the photos over a few days, so you may not get the year-round weather conditions.</p><p>Another way to get pictures is use computer-generated “synthetic” images. I would avoid these at all costs, to be honest. Based on my experience, the model struggles with these because they look…different. The lighting is not natural, the subject may superimposed on a background and so the edges look too sharp, etc. Granted, some of the AI generated images look very realistic, but if you look closely you may spot something unusual. The neural network in your model will notice these, so be careful.</p><p>The way that I handle these staged or synthetic images is as a sub-class that gets merged into the training set, but only&nbsp;&nbsp;giving preference to the real-world images. I cap the number of staged images to 60, so if I have 10 real-world, I now only need 50 staged. Eventually, these staged and synthetic images are phased out completely, and I rely entirely on real-world.</p><p>One problem that can creep into your image set are duplicate images. These can be exact copies of pictures, or they can be extremely similar. You may think that this is harmless, but imagine having 100 pictures of an elephant that are exactly the same — your model will not know what to do with a different angle of the elephant.</p><p>Now, let’s say you have only&nbsp;&nbsp;pictures that are nearly the same. Not so bad, right? Well, here is what can happen to them:</p><ul><li>Both pictures go in the training set — The model doesn’t learn anything from the repeated image and it wastes time processing them.</li><li>One goes into the training set, the other goes into the test set — Your test score will be higher, but it is not an accurate evaluation.</li><li>Both are in the test set — Your test score will be compounded either higher or lower than it should be.</li></ul><p>None of these will help your model.</p><p>There are a few ways to find duplicates. The approach I have taken is to calculate a hamming distance on all the pictures and identify the ones that are very close. I have an interface that displays the duplicates and I decide which one I like best, and remove the other.</p><p>Another way (I haven’t tried this yet) is to create a vector representation of your images. Store these a vector database, and you can do a similarity search to find nearly identical images.</p><p>Whatever method you use, it is important to clean up the duplicates.</p><p>Now we are ready to build the traditional training, validation, and test sets. This is no longer a straight forward task since I want to:</p><ol><li>Merge sub-classes into a main class.</li><li>Prioritize real-world images over staged or synthetic images.</li><li>Apply a minimum number of images per class.</li><li>Apply a maximum number of images per class, sending the “overflow” to the test set.</li></ol><p>This process is somewhat complicated and depends on how you manage your image library. First, I would recommend keeping your images in a folder structure that has sub-class folders. You can get image counts by using a script to simply read the folders. Second is to keep a configuration of how the sub-classes are merged. To really set yourself up for success, put these image counts and merge rules in a database for faster lookups.</p><p>My train-validation-test set splits are usually 90–10–0. I originally started out using 80–10–10, but with diligence on keeping the entire data set clean, I noticed validation and test scores became pretty even. This allowed me to increase the training set size, and use “overflow” to become the test set, as well as using the benchmark sets.</p><p>In this part, we’ve built our data sets by merging sub-classes and using the image count cutoffs. Plus we handle staged and synthetic data as well as cleaning up duplicate images. We also created benchmark sets and defined confidence thresholds, which help us decide when to move a model to production.</p><p>In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>, we will discuss how we are going to evaluate the different model performances. And then finally we will get to the actual model training and the techniques to enhance accuracy.<a href=\"https://medium.com/tag/machine-learning?source=post_page-----1948daf60483---------------------------------------\"></a></p>","contentLength":10545,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why We Built an AI Gateway in Rust: A Performance-Centric Decision","url":"https://dev.to/langdb/why-we-built-an-ai-gateway-in-rust-a-performance-centric-decision-2nb8","date":1739472254,"author":"Mrunmay Shelar","guid":545,"unread":true,"content":"<p>When building our AI gateway, we knew performance would be a critical factor. Unlike most AI software written in Python, an AI gateway acts as the  between users and inference engines. This gateway must handle , , and  efficiently. Python, while dominant in the AI ecosystem, struggles under these demands due to its  and limitations with concurrency.</p><p>To demonstrate why we chose , we benchmarked three popular programming environments—, , and —to evaluate their performance under high-load conditions. Rust emerged as the clear winner, offering predictable and stable performance even at scale.</p><h3>\n  \n  \n  Benchmark Setup: Simulating Real-World AI Traffic\n</h3><p>We built an  and a corresponding client to mimic real-world AI workloads. Here’s how the setup worked:</p><ul><li><p>Streams <strong>tokens at a fixed inter-token latency of 25ms</strong>, similar to the tokenized output of an AI inference engine.</p></li><li><p>Uses HTTP/2 to deliver tokenized data efficiently to multiple clients.</p></li><li><p>Implements asynchronous programming to support thousands of connections concurrently.</p></li></ul><ul><li><p>Gradually establishes up to <strong>15,000 simultaneous connections</strong> to the server.</p></li><li><p>Measures the —the time between consecutive tokens received from the server. This metric reflects the server’s ability to scale under increasing load.</p></li><li><p>Ensures that connections remain stable and records latency for each connection.</p></li></ul><ol><li><p>The server was implemented in , , and  to ensure a fair comparison.</p></li><li><p>The client progressively increased the number of active connections, starting with a small number and scaling up to 15,000.</p></li><li><p>Intra-token latency measurements were collected for each implementation to evaluate performance under load.</p></li></ol><h3>\n  \n  \n  Results: Rust vs. Python vs. JavaScript (Node.js)\n</h3><p>The chart below illustrates the  (in milliseconds) as the number of concurrent connections increases:</p><ul><li><ul><li>Rust exhibited the most stable performance, maintaining a near-linear increase in latency as connections scaled.</li><li>At , Rust's intra-token latency reached approximately , only 3x the baseline inter-token latency of 25ms.</li><li>Rust’s efficiency highlights its ability to handle high concurrency without significant degradation.</li></ul></li><li><ul><li>Python's intra-token latency grew exponentially, exceeding <strong>200ms at 15,000 connections</strong>.</li><li>This exponential growth demonstrates Python's inherent limitations in managing large-scale concurrency and resource contention.</li></ul></li><li><ul><li>Node.js initially performed better than Python, maintaining lower latency up to .</li></ul><p>However, its performance began to degrade significantly beyond this point, reaching over <strong>150ms at 15,000 connections</strong>.</p><ul><li>This result underscores Node.js’s event-driven model, which works well for moderate concurrency but struggles under extreme loads.</li></ul></li></ul><h3>\n  \n  \n  Why Rust is the Best Choice for an AI Gateway\n</h3><ol><li><p><strong>Predictable, Scalable Performance:</strong></p><p>Rust’s ability to maintain <strong>75ms latency at 15,000 connections</strong> demonstrates its scalability. Its near-linear latency growth makes it ideal for high-concurrency systems.</p></li><li><p><strong>Concurrency Without Compromise:</strong></p><p>Rust’s async programming model (e.g., Tokio) efficiently manages thousands of simultaneous connections. Unlike Python, Rust avoids the bottlenecks of the <strong>Global Interpreter Lock (GIL)</strong> and utilizes system resources optimally.</p></li><li><p>Rust compiles directly to machine code, ensuring minimal runtime overhead. Its memory safety and zero-cost abstractions allow for predictable and efficient resource management.</p></li><li><p>Rust provides fine-grained control over threading and memory, making it the best choice for performance-critical applications like AI gateways.</p></li></ol><h3>\n  \n  \n  Why Python and JavaScript Fall Short\n</h3><ol><li><p>: The GIL prevents true multi-threading, causing severe bottlenecks under high load.</p><p>: Python's interpreted nature adds significant latency, making it unsuitable for latency-sensitive applications.</p><p>: As connections increase, Python's performance deteriorates rapidly, with latency exceeding acceptable thresholds.</p></li><li><p>: Node.js performs well under moderate concurrency but struggles as the number of simultaneous connections grows beyond 7,500.</p><p>: While Node.js handles asynchronous I/O well, it lacks the low-level control offered by Rust, leading to degraded performance at scale.</p></li></ol><h3>\n  \n  \n  Why AI Gateways Must Be Built with Performance in Mind\n</h3><p>An AI gateway is more than a simple intermediary. It plays a critical role in ensuring:</p><ul><li><p> Users expect tokenized outputs to arrive with minimal delay, making low latency essential.</p></li><li><p> AI gateways must handle thousands or tens of thousands of simultaneous connections to accommodate large-scale applications.</p></li><li><p> Inconsistent performance or connection drops can severely impact user experience and application reliability.</p></li></ul><p>Rust excels in all these areas, delivering <strong>predictable, stable performance at scale</strong>, making it the ideal language for building high-performance AI gateways.</p><h3>\n  \n  \n  The Takeaway: Rust is the Future of AI Gateways\n</h3><p>Our benchmark results clearly show that while Python and JavaScript (Node.js) have their strengths, they are ill-suited for building performance-critical AI gateways:</p><ul><li><p> struggles with concurrency and runtime overhead, leading to exponential latency growth.</p></li><li><p> performs better but falters under extreme loads, making it unreliable for high-concurrency scenarios.</p></li></ul><p>, on the other hand, delivers <strong>consistent, scalable performance</strong> with low latency, even at . By choosing Rust for our AI gateway, we’ve built an infrastructure that can handle the demands of modern AI applications with ease.</p><p>If you’re building an AI gateway or any performance-critical infrastructure, <strong>Rust isn’t just an option—it’s the solution</strong>. When every millisecond matters, Rust is the language that ensures you meet the challenge head-on.</p>","contentLength":5604,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Coding Interviews were HARD Until I Learned These 20 Tips","url":"https://blog.algomaster.io/p/20-coding-interviews-tips","date":1739467827,"author":"Ashish Pratap Singh","guid":403,"unread":true,"content":"<p>I gave my first  in 2016—and failed. I failed the next five interviews as well before finally landing my first job at .</p><p>Since then, I’ve interviewed with many companies and faced my fair share of rejections. However, over the years, my failure rate in coding interviews dropped significantly.</p><p>By 2022, with just 1.5 months of focused preparation, I successfully cleared interviews at  and .</p><p>Surprisingly, my success wasn’t due to a dramatic improvement in problem-solving skills. The real game-changer was my approach— and  during the interview.</p><p>In this article, I’ll share  that made coding interviews significantly easier for me.</p><p>These tips cover everything you need to know, including:</p><ul><li><p>How to systematically approach coding interview problems</p></li><li><p>Key concepts and patterns you should know</p></li><li><p>The type of problems you should practice</p></li><li><p>How to choose the right algorithm for a given problem</p></li><li><p>Techniques to optimize your solution</p></li><li><p>How to communicate your thought process effectively</p></li></ul><p>By applying these strategies, you’ll be able to tackle coding interviews with confidence and massively increase your chances of success.</p><p>In a coding interview, interviewers want to see how well you , , and  under pressure.</p><p>Here's a breakdown of what they look for:</p><ol><li><p><strong>Understanding the problem</strong>: Do you ask clarifying questions instead of making assumptions to ensure you fully understand the problem?</p></li><li><p>: Can you decompose the problem into smaller, manageable parts?</p></li><li><p>: Can you design an optimal solution in terms of time and space complexity?</p></li><li><p>: Do you handle edge cases like empty inputs, duplicates, large values, or special conditions?</p></li><li><p>: Can you explain why one approach is better than another?</p></li><li><p>: Do you have a strong grasp of data structures and algorithms, and can you choose the right one for the problem?</p></li><li><p>Can you quickly compute the time and space complexity of your solution?</p></li><li><p><strong>Explaining your thought process</strong>: Can you clearly articulate your approach and why it works?</p></li><li><p>: Are you receptive to hints and able to adjust your approach accordingly?</p></li><li><p>: Do you follow good coding practices (meaningful variable names, proper indentation, modular functions etc..)?</p></li><li><p><strong>Improving the initial solution</strong>: Can you optimize and refine your first solution when prompted?</p></li><li><p>Are you able to tackle variations of the original problem?</p></li><li><p>Can you manually walk through your code with sample inputs to verify correctness?</p></li></ol><p>Most coding interviews last </p><p>Depending on the company and interviewer, you may be asked to solve 2-3easy/medium problems or 1 hard problem with follow-ups.</p><p>Lets assume you are given one problem, with a follow up in a 45-minute interview. Here’s how you can optimally allocate your time:</p><ol><li><p>The interviewer may ask you to introduce yourself. Prepare a concise 1-2 minute introduction that highlights your background, experience, and key strengths. Practice it beforehand so that you can deliver it smoothly.</p></li><li><p><strong>Understand the Problem (5-10 mins):  </strong>Carefully read the problem statement, ask clarifying questions, and walk through sample inputs and expected outputs.</p></li><li><p><strong>Plan the Approach (10-20 mins): </strong>Brainstorm possible solutions, evaluate trade-offs, and discuss time and space complexity.</p></li><li><p><strong>Implement the Code (20-30 mins): </strong>Write a clean, modular and readable code.</p></li><li><p>Dry-run your code with sample inputs, debug any issues, and ensure edge cases are handled.</p></li><li><p><strong>Follow-ups and Wrap Up (35-45 mins): </strong>Answer follow up questions, and ask thoughtful questions to the interviewer about the company, role, or team.</p></li></ol><p>One of the biggest mistakes candidates make in coding interviews is jumping into coding too soon.</p><p>If you don't fully understand the question, you might end up solving the </p><p>Here’s how to ensure you grasp the problem before coding:</p><h4><strong>Read the Problem Carefully</strong></h4><p>Take a moment to absorb the problem statement. Rephrase it in your own words to confirm your understanding. </p><p>Identify the expected input/output format and any hidden constraints.</p><p>If anything is unclear, ask questions before diving into the solution. Interviewers appreciate when you seek clarity. Never assume details that aren’t explicitly mentioned in the problem statement.</p><p>Common clarifications include:</p><ul><li><p>Are there duplicate values?</p></li><li><p>Can the input be empty? If so, what should the output be?</p></li><li><p>Should the solution handle negative numbers?</p></li><li><p>Should the output maintain the original order of elements?</p></li><li><p>Is the graph directed or undirected?</p></li><li><p>Does the input contain only lowercase English letters, or can it have uppercase, digits, or special characters?</p></li><li><p>What should happen if multiple solutions exist? Should I return any valid solution, or does the problem have specific requirements?</p></li></ul><h4><strong>Walk Through Input/Output Examples</strong></h4><p>Once you understand the problem statement and constraints, go over a few input and output examples to make sure you get it.</p><p>Draw them out if it helps, especially for visual data structures like trees or graphs.</p><p>Try to take examples that cover different scenarios of the problem. Think about any  that might come up.</p>","contentLength":4908,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/61c3f6c0-4027-4d37-b4a7-a30fc183fa12_1602x1032.png","enclosureMime":"","commentsUrl":null},{"title":"Looking back at our Bug Bounty program in 2024","url":"https://engineering.fb.com/2025/02/13/security/looking-back-at-our-bug-bounty-program-in-2024/","date":1739466046,"author":"","guid":299,"unread":true,"content":"<ul><li aria-level=\"1\"><a href=\"https://about.fb.com/news/2019/01/designing-security-for-billions/\" target=\"_blank\" rel=\"noopener\"></a></li></ul><h2></h2><ul></ul><h2></h2><h2></h2><p><b>Ads audience tools designed to help people choose a target audience for their ads: </b><a href=\"https://bugbounty.meta.com/payout-guidelines/ads-audience/\" target=\"_blank\" rel=\"noopener\"></a><a href=\"https://www.facebook.com/business/help/717368264947302\" target=\"_blank\" rel=\"noopener\"></a><a href=\"https://bugbounty.meta.com/payout-guidelines/ads-audience/\" target=\"_blank\" rel=\"noopener\"></a></p><p><b>Mixed reality hardware products:</b><a href=\"http://hardwear.io\" target=\"_blank\" rel=\"noopener\"></a></p><h2></h2><p><b>Organizing community events and presenting joint research:</b></p><p><b>Providing resources and timely updates for the research community:</b></p>","contentLength":239,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python vs R for data science: Which should you choose?","url":"https://www.datasciencecentral.com/python-vs-r-for-data-science-which-should-you-choose/","date":1739461072,"author":"Mike Steven","guid":62,"unread":true,"content":"<p>Welcome to another comparison article where you will understand the features, intricacies, pros, and cons of two different stacks of the information technology industry. Today’s comparison blog is especially for data scientists who spend their day and night with datasets, insights, trends, and analysis of many other factors. From a long list of skills that…&nbsp;<a href=\"https://www.datasciencecentral.com/python-vs-r-for-data-science-which-should-you-choose/\" rel=\"bookmark\">Read More »</a></p>","contentLength":377,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Sprint 2 - Picking Up the Pace","url":"https://dev.to/theoforger/sprint-2-picking-up-the-pace-420a","date":1739461038,"author":"TheoForger","guid":544,"unread":true,"content":"<p>This is the end of Sprint 2. This Sprint has gotten me into a lot of joy and pain, and let me tell you all about it.</p><div><div><div><p>A proposal to add an  query</p><pre><code>GET https://foo.com\nHTTP 200\n[Asserts]\nip == \"192.168.0.1\"\n</code></pre><pre><code>GET https://foo.com\nHTTP 200\n[Asserts]\nip matches /2001:0000:130F:0000:0000:09C0:876A:\\d*/\n</code></pre><p>There is also a <a href=\"https://curl.se/libcurl/c/CURLINFO_LOCAL_IP.html\" rel=\"nofollow noopener noreferrer\"></a> but I've the impression that user expectation is more on primary ip.</p><p>Question: what's about port ? Does the query  exctract the IP address and the port (), or do we have a separate  query that we can do latter?</p><pre><code>GET https://foo.com\nHTTP 200\n[Asserts]\nip == \"192.168.0.1\"\nport == 8080\n</code></pre><p>With /as separated queries, we can also have  and  predicates:</p><pre><code>GET https://foo.com\nHTTP 200\n[Asserts]\nip isIPv6\n</code></pre></div></div></div>\nThis week I've been working to implement this feature to enable hurl users to assert on IP addresses for each request. Since there were quite a few things to do, I decided to break it into multiple PRs.\n<h3>\n  \n  \n  Add ip address to http::Response (<a href=\"https://github.com/Orange-OpenSource/hurl/pull/3695\" rel=\"noopener noreferrer\">Link</a>)\n</h3><p>This was a continuation from last week's research. To make the asserts work, first I had to capture that from libcurl and include it in Hurl's  module.</p><p>To achieve that, I used the method <a href=\"https://docs.rs/curl/latest/curl/easy/struct.Easy2.html#method.primary_ip\" rel=\"noopener noreferrer\"></a> provided by the  crate. There was some issues regarding the return type of this method and the implementation of type conversions, but we worked it out <a href=\"https://dev.to/theoforger/sprint-2-getting-stuck-a-little-4pfh\">during the previous Sprint</a>.</p><p>Other than that, nothing much happened in this PR. There was some changes regarding names and documentation, but it was merged quickly after.</p><h3>\n  \n  \n  Allow assert on ip address (<a href=\"https://github.com/Orange-OpenSource/hurl/pull/3705\" rel=\"noopener noreferrer\">Link</a>)\n</h3><p>After last week's discussion, we decided to simply use the  type to handle ip address queries in the Hurl file. At that point I didn't really understand much of the code, but I was able to find a similar query option : . Imitating the code, I was able to create a new query entry.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>To my surprise, when I tested it afterwards, everything worked! ,  or ... All the keywords was properly working. Turned out Hurl already had the code to handle all string typed queries generically, so all I had to do was creating the query and plugging it right in. Super cool!</p><h3>\n  \n  \n  Allow asserts on ip versions (<a href=\"https://github.com/Orange-OpenSource/hurl/pull/3715\" rel=\"noopener noreferrer\">Link</a>)\n</h3><p>This was technically a different feature but it was still a part of the original issue. In this PR, instead of treating the IP address as a string and query on the text content, I had to figure out way to evaluate the IP version.</p><p>The maintainer suggested to simply take the IP query strings and convert them to . Since this is an enum built-in with the  and  variants, if the conversion succeeds, I could match the pattern to get the IP version.</p><p>However, this task was not nearly as straightforward as the last PR. Since I didn't fully understand the code, I had a very difficult time locating where I even implement this conversion.</p><p>First I was determined to figure this out myself. I sat down and carefully read the code, I drafted a few diagrams to help me understand the workflow. However, in Hurl's file parser, whenever I tried to print something, or use the debugger to display something, I would get a strange-looking structure instead of actual text like so:</p><p>I was beyond confused. I had to ask the maintainer about this. Turned out they were using something called an AST (abstract syntax tree). This structure maps the relative locations of each section of the file without actually parsing them. You can <a href=\"https://github.com/Orange-OpenSource/hurl/issues/3106#issuecomment-2643250787\" rel=\"noopener noreferrer\">read more</a> in the maintainer's comment.</p><p>With that knowledge in mind and a bit more research, I finally was able to implement this feature. Now I'm still going back and forth with the maintainer regarding error handling, but I'm sure this feature will land soon!</p><h3>\n  \n  \n  Update @aws-sdk/client-route-53 (<a href=\"https://github.com/DevelopingSpace/starchart/pull/830\" rel=\"noopener noreferrer\">Link</a>)\n</h3><p>I was looking at Starchart yesterday and saw a list of pull requests opened by , one of which had a failed CI check. I decided to look in a little further. This <a href=\"https://github.com/DevelopingSpace/starchart/pull/829\" rel=\"noopener noreferrer\">pull request</a> attempted to update the package  from 3.360.0 to 3.744.0. That's quite a bit gap in version numbers.</p><p>The CI pipeline failed because of a type mismatch. I started by checking <a href=\"https://github.com/aws/aws-sdk-js-v3/blob/main/clients/client-route-53/CHANGELOG.md\" rel=\"noopener noreferrer\">the changelog</a> but I didn't notice any changes regarding types.</p><p>Fortunately, my IDE was able to help me with locate two new types introduced in the new version:</p><div><table><tbody><tr><td><pre>/**\n * <a href=\"https://dev.to/public\">@public</a>\n * @enum\n */\nexport declare const RRType: {\n    readonly A: \"A\";\n    readonly AAAA: \"AAAA\";\n    readonly CAA: \"CAA\";\n    readonly CNAME: \"CNAME\";\n    readonly DS: \"DS\";\n    readonly HTTPS: \"HTTPS\";\n    readonly MX: \"MX\";\n    readonly NAPTR: \"NAPTR\";\n    readonly NS: \"NS\";\n    readonly PTR: \"PTR\";\n    readonly SOA: \"SOA\";\n    readonly SPF: \"SPF\";\n    readonly SRV: \"SRV\";\n    readonly SSHFP: \"SSHFP\";\n    readonly SVCB: \"SVCB\";\n    readonly TLSA: \"TLSA\";\n    readonly TXT: \"TXT\";\n};\n/**\n * <a href=\"https://dev.to/public\">@public</a>\n */\nexport type RRType = (typeof RRType)[keyof typeof RRType];\n</pre></td><td><pre>\n/**\n * <a href=\"https://dev.to/public\">@public</a>\n * @enum\n */\nexport declare const ChangeAction: {\n    readonly CREATE: \"CREATE\";\n    readonly DELETE: \"DELETE\";\n    readonly UPSERT: \"UPSERT\";\n};\n/**\n * <a href=\"https://dev.to/public\">@public</a>\n */\nexport type ChangeAction = (typeof ChangeAction)[keyof typeof ChangeAction];\n\n</pre></td></tr></tbody></table></div><p>This part of the code is responsible for managing DNS records.  defines the type of DNS record and  defines the type of changes to perform on an existing record. While all these types were previously represented by .</p><p>I changed the code to the new types and filed a PR. Later the review came back, suggesting that I create a utility function to handle the type conversion. And this is where I'm at right now.</p><h2>\n  \n  \n  📝 Conclusion and What's Next\n</h2><p>This Sprint felt much more eventful than the last one. In the Hurl project, I was working on a different area of code, which means that more time were spent on search and asking questions. I also made more mistakes because of this unfamiliarity. On the Starchart's side, although I haven't taken much action yet, I suspect there to be more to come:</p><p>For the next Sprint, I might need to dial back a little on the Hurl project, since the maintainer mentioned that they have <a href=\"https://github.com/Orange-OpenSource/hurl/issues/2199#issuecomment-2646410667\" rel=\"noopener noreferrer\">stopped taking in new features</a> until the next release (). So my plan is to pick a few bugs to investigate there, while shifting my focus a little more to Starchart.</p>","contentLength":6049,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A new tool for visualizing Rust lifetimes","url":"https://www.youtube.com/watch?v=NV6Xo_el_2o","date":1739458834,"author":"Let's Get Rusty","guid":372,"unread":true,"content":"<article>See how RustOwl can help you understand lifetimes in a real Rust codebase. A brand-new tool designed to visualize Rust lifetimes and make learning Rust easier. Check it out and see how it can change the way you write Rust!\n\nFree Rust training: https://letsgetrusty.com/bootcamp\n\nRustOwl: https://github.com/cordx56/rustowl\n\nCorrections:\n- Bacon is a CLI tool, not a library. Check it out here: https://github.com/Canop/bacon</article>","contentLength":424,"flags":null,"enclosureUrl":"https://www.youtube.com/v/NV6Xo_el_2o?version=3","enclosureMime":"","commentsUrl":null},{"title":"Bridging the Gap: Democratizing AI for All","url":"https://www.kdnuggets.com/bridging-gap-democratizing-ai","date":1739458803,"author":"Vidhi Chugh","guid":251,"unread":true,"content":"<article>Let’s explore how democratizing AI can level the playing field and create opportunities for all, no matter the background or resources.</article>","contentLength":137,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/chugh_Bridging-the-Gap-Democratizing-AI-for-All_1.png","enclosureMime":"","commentsUrl":null},{"title":"Rust vs C++ Performance","url":"https://www.youtube.com/watch?v=WnMin9cf78g","date":1739457041,"author":"Anton Putra","guid":314,"unread":true,"content":"<article>C++ vs Rust Speed.\n\n🔴 To support my channel, I'd like to offer Mentorship/On-the-Job Support/Consulting (me@antonputra.com)\n\n🍿 Benchmarks: https://youtube.com/playlist?list=PLiMWaCMwGJXmcDLvMQeORJ-j_jayKaLVn&amp;si=p-UOaVM_6_SFx52H\n\n👋 AWS is expensive - Infra Support Fund: https://buymeacoffee.com/antonputra\n\n▬▬▬▬▬ Experience &amp; Location 💼 ▬▬▬▬▬\n►  I’m a Senior Software Engineer at Juniper Networks (13+ years of experience)\n►  Located in San Francisco Bay Area, CA (US citizen)\n\n▬▬▬▬▬▬ Connect with me 👋 ▬▬▬▬▬▬\n►  LinkedIn: https://www.linkedin.com/in/anton-putra\n►  Twitter/X: https://twitter.com/antonvputra\n►  GitHub: https://github.com/antonputra\n►  Email: me@antonputra.com\n\n▬▬▬▬▬▬▬ Source Code 📚 ▬▬▬▬▬▬▬\n► Original Source Code: https://github.com/antonputra/tutorials/tree/245/lessons/245\n\nPR to improve Rust - https://github.com/antonputra/tutorials/pull/429\nPR to improve Rust - https://github.com/antonputra/tutorials/pull/431\nPR to improve Rust - https://github.com/antonputra/tutorials/pull/433\n\n#rust #golang #devops</article>","contentLength":1133,"flags":null,"enclosureUrl":"https://www.youtube.com/v/WnMin9cf78g?version=3","enclosureMime":"","commentsUrl":null},{"title":"How to Scale Sklearn with Dask","url":"https://www.kdnuggets.com/how-to-scale-sklearn-dask","date":1739451649,"author":"Iván Palomares Carrascosa","guid":250,"unread":true,"content":"<article>Here's how Dask applies the building blocks of sklearn to bring ML modeling workflows to the next level of scalability via high-performance parallel computing</article>","contentLength":158,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/crVYYGyvTE2Jilsmvukhpw.jpeg","enclosureMime":"","commentsUrl":null},{"title":"Peter Bengtsson: get in JavaScript is the same as property in Python","url":"http://www.peterbe.com/plog/get-in-javascript-is-the-same-as-property-in-python","date":1739450516,"author":"","guid":164,"unread":true,"content":"<article>Prefix a function, in an object or class, with `get` and then that acts as a function call without brackets. Just like Python's `property` decorator.</article>","contentLength":149,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Bridging the AI Learning Gap","url":"https://www.oreilly.com/radar/bridging-the-ai-learning-gap/","date":1739444990,"author":"Andrew Stellman","guid":543,"unread":true,"content":"<p>When I started working on the new edition of  back in 2023, AI tools like ChatGPT and Copilot were already changing how developers write and learn code. It was clear that I needed to cover them. But that raised an interesting challenge: How do you teach new and intermediate developers to use AI effectively?</p><p>Almost all of the material that I found was aimed at senior developers—people who can recognize patterns in code, spot the subtle errors often found in AI-generated code, and refine and refactor AI output. But the audience for the book—a developer learning C# as their first, second, or third language—doesn’t yet have these skills. It became increasingly clear that they would need a new strategy.</p><p>Designing an effective AI learning path that worked with the Head First method—which engages readers through active learning and interactive puzzles, exercises, and other elements—took months of intense research and experimentation. The result was , a new series of hands-on elements that I designed to teach developers how to learn with AI, not just generate code. The name is a play on “sensei,” reflecting the role of AI as a teacher or instructor rather than just a tool.</p><p>The key realization was that there’s a big difference between using AI as a code generation tool and using it as a learning tool. That distinction is a critical part of the learning path, and it took time to fully understand. Sens-AI guides learners through a series of incremental learning elements that get them working with AI immediately, creating a satisfying experience from the start while they progressively learn the prompting skills they’ll lean on as their development skills grow.</p><h2>The Challenge of Building an AI Learning Path That Works</h2><p>I developed Sens-AI for the fifth edition of . After more than two decades of writing and teaching for O’Reilly, I’ve learned a lot about how new and intermediate developers learn—and just as importantly, what trips them up. In some ways AI-assisted coding is just another skill to learn, but it comes with its own challenges that make it uniquely difficult for new and intermediate learners to pick up. My goal was to find a way to integrate AI into the learning path without letting it short-circuit the learning process.</p><h3>Step 1: Show Learners Why They Can’t Just Trust AI</h3><p>One of the biggest challenges for new and intermediate developers trying to integrate AI into their learning is that an overreliance on AI-generated code <em>can actually prevent them from learning</em>. Coding is a skill, and like all skills it takes practice, which is why  has dozens of hands-on coding exercises designed to teach specific concepts and techniques. A learner who uses AI to do the exercises will struggle to build those skills.</p><p>The key to using AI safely is —AI-generated explanations and code may look correct, but they often contain subtle mistakes. Learning to spot these errors is critical for using AI effectively, and developing that skill is an important stepping stone on the path to becoming a senior developer. The first step in Sens-AI was to make this lesson clear immediately. I designed an early Sens-AI exercise to demonstrate how AI can be confidently wrong.</p><ul><li>Early in the book, learners complete a pencil-and-paper exercise where they analyze a simple loop and determine how many times it executes.</li><li>Most readers get the correct answer, but when they feed the same question into an AI chatbot, the AI almost never gets it right.</li><li>The AI typically explains the logic of the loop well—but its final answer is , because LLM-based AIs don’t execute code.</li><li>This reinforces an important lesson: AI can be wrong—and sometimes, you are better at solving problems than AI. By seeing AI make a mistake on a problem they already solved correctly, learners immediately understand that they can’t just assume AI is right.</li></ul><h3>Step 2: Show Learners That AI Still Requires Effort</h3><p>The next challenge was teaching learners to see AI as a tool, not a crutch. AI can solve almost all of the exercises in the book, but a reader who lets AI do that won’t actually learn the skills they came to the book to learn.</p><p>This led to an important realization: Writing a coding exercise for a person is exactly the same as writing a prompt for an AI.</p><p>In fact, I realized that I could test my exercises by pasting them verbatim into an AI. If the AI was able to generate a correct solution, that meant my exercise contained all the information a human learner needed to solve it too.</p><p>This turned into another key Sens-AI exercise:</p><ul><li>Learners complete a full-page coding exercise by following step-by-step instructions.</li><li>After solving it themselves, they paste the entire exercise into an AI chatbot to see how it solves the same problem.</li><li>The AI almost always generates the correct answer, and it often generates exactly the same solution they wrote.</li></ul><p>This reinforces another critical lesson: Telling an AI what to do is just as difficult as telling a person what to do. Many new developers assume that prompt engineering is just writing a quick instruction—but Sens-AI demonstrates that a good AI prompt is as detailed and structured as a coding exercise. This gives learners an immediate hands-on experience with AI while teaching them that writing effective prompts requires real effort.</p><p>By first having the learner see that AIs can make mistakes, and then having them generate code for a problem they solved and compare it to their own solution—and even use the AI’s code source of ideas for refactoring—they gain a deeper understanding of how to engage with AI critically. These two opening Sens-AI elements laid the groundwork for a successful AI learning path.</p><h2>The Sens-AI Approach—Making AI a Learning Tool</h2><p>The final challenge in developing the Sens-AI approach was finding a way to help learners <strong>develop a habit of engaging with AI in a positive way</strong>. Solving that problem required me to develop a series of practical exercises, each of which gives the learner a specific tool that they can use immediately but also reinforces a positive lesson about how to use AI effectively.</p><p>One of AI’s most powerful features for developers is its ability to explain code. I built the next Sens-AI element around this by having learners ask AI to add comments to code they just wrote. Since they already understand their own code, they can evaluate the AI’s comments—checking whether the AI understood their logic, spotting where it went wrong, and identifying gaps in its explanations. This provides hands-on training in prompting AI while reinforcing a key lesson: AI doesn’t always get it right, and reviewing its output critically is essential.</p><p>The next step in the Sens-AI learning path focuses on using , helping learners explore C# topics effectively through prompt engineering techniques. Learners experiment with different AI personas and response styles—casual versus precise explanations, bullet points versus long answers—to see what works best for them. They’re also encouraged to ask follow-up questions, request reworded explanations, and ask for concrete examples that they can use to refine their understanding. To put this into practice, learners research a new C# topic that wasn’t covered earlier in the book. This reinforces the idea that <em>AI is a useful research tool, but only if you guide it effectively</em>.</p><p>Sens-AI focuses on understanding code first, generating code second. That’s why the learning path only returns to AI-generated code after reinforcing good AI habits. Even then, I had to carefully design exercises to ensure AI was an aid to learning, not a replacement for it. After experimenting with different approaches, I found that generating unit tests was an effective next step.</p><p>Unit tests work well because their logic is simple and easy to verify, making them a safe way to practice AI-assisted coding. More importantly, writing a good prompt for a unit test forces the learner to describe the code they’re testing—including its behavior, arguments, and return type. This naturally builds strong prompting skills and positive AI habits, encouraging developers to think carefully about their design before asking AI to generate anything.</p><h2>Learning  AI, Not Just Using It</h2><p>AI is a powerful tool for developers, but using it effectively requires more than just knowing how to generate code. The biggest mistake new developers can make with AI is using it as a crutch for generating code, because that keeps them from learning the coding skills they need to critically evaluate all of the code that AI generates. By giving learners a step-by-step approach that reinforces safe use of AI and great AI habits, and reinforcing it with examples and practice, Sens-AI gives new and intermediate learners an effective AI learning path that works for them.</p><p>AI-assisted coding isn’t about shortcuts. It’s about learning how to think critically, and about using AI as a positive tool to help us build and learn. Developers who engage critically with AI, refine their prompts, question AI-generated output, and develop effective AI learning habits will be the ones who benefit the most. By helping developers include AI as a part of their skillset from the start, Sens-AI ensures that they don’t just use AI to generate code—they learn how to think, problem-solve, and improve as developers in the process.</p><p><em>On April 24, O’Reilly Media will be hosting </em><strong>Coding with AI: The End of Software Development as We Know It</strong><em>—a live virtual tech conference spotlighting how AI is already supercharging developers, boosting productivity, and providing real value to their organizations. If you’re in the trenches building tomorrow’s development practices today and interested in speaking at the event, we’d love to hear from you by March 5. You can find more information and our call for presentations <a href=\"https://www.oreilly.com/CodingwithAI/cfp.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">here</a>. </em></p>","contentLength":9859,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"GenAI Patterns: Reranker","url":"https://martinfowler.com/articles/gen-ai-patterns/#reranker","date":1739441760,"author":"Martin Fowler","guid":171,"unread":true,"content":"<p>LLMs struggle with large amounts of context. <b>Bharani\n      Subramaniam</b> and I explain how to mitigate this common RAG\n      problem with a <a href=\"https://martinfowler.com/articles/gen-ai-patterns/#reranker\">Reranker</a> which takes the document\n      fragments from the retriever, and ranks them according to their usefulness.</p>","contentLength":253,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"EuroPython: EuroPython February 2025 Newsletter","url":"https://blog.europython.eu/europython-february-2025-newsletter/","date":1739435771,"author":"","guid":163,"unread":true,"content":"<p>Hope you&amp;aposre all having a fantastic February. We sure have been busy and got some exciting updates for you as we gear up for EuroPython 2025, which is taking place once again in the beautiful city of Prague. So let&amp;aposs dive right in!</p><p>EuroPython 2025 is right around the corner and our programme team is hard at work putting together an amazing lineup. But we need your help to shape the conference! We received over 572 fantastic proposals, and now it’s time for Community Voting! 🎉 If you&amp;aposve attended EuroPython before or submitted a proposal this year, you’re eligible to vote.</p><p>📢 More votes = a stronger, more diverse programme! Spread the word and get your EuroPython friends to cast their votes too.</p><p>🏃The deadline is , so don’t miss your chance!</p><p>Want to play a key role in building an incredible conference? Join our review team and help select the best talks for EuroPython 2025! Whether you&amp;aposre a Python expert or an enthusiastic community member, your insights matter.</p><p>We’d like to also thank the over 100 people who have already signed up to review! For those who haven’t done so yet, please remember to accept your Pretalx link and get your reviews in by </p><p>You can already start reviewing proposals, and each review takes as little as 5 minutes. We encourage reviewers to go through at least 20-30 proposals, but if you can do more, even better! With almost 600 submissions to pick from, your help ensures we curate a diverse and engaging programme.</p><p>🏃The deadline is Monday next week, so don’t delay!</p><p>EuroPython isn’t just present at other Python events—we actively support them too! As a community sponsor, we love helping local PyCons grow and thrive. We love giving back to the community and strengthening Python events across Europe! 🐍💙</p><p>The EuroPython team had a fantastic time at PyCon + Web in Berlin, meeting fellow Pythonistas, exchanging ideas, and spreading the word about EuroPython 2025. It was great to connect with speakers, organizers, and attendees.&nbsp;</p><p>Ever wondered how long it takes to walk from Berlin to Prague? A huge thank you to our co-organizers, Cheuk, Artur, and Cristián, for answering that in their fantastic lightning talk about EuroPython!</p><img src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeeVCMBckwBAVXDAhKyHXq8LJVHJysbWS61RNAeilg_qHzHZgzbC1SALu5u3qS-YjyjSQoUE3zIzVCcSHNj26mzPf43RP4PgcV3iUJPzcu_gAEXO25atB6gn7ZQ8O4Pu6vGttw_MQ?key=7MRGElcwE05wjMSe8jkdrI9g\" alt=\"alt\" width=\"512\" height=\"344\"><p>We had some members of the EuroPython team at FOSDEM 2025, connecting with the open-source community and spreading the Python love! 🎉 We enjoyed meeting fellow enthusiasts, sharing insights about the EuroPython Society, and giving away the first EuroPython 2025 stickers. If you stopped by—thank you and we hope to see you in Prague this July.</p><img src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXd6Dp3RdSY2Wm04WwjDJE6NP1fW_NRCUEVZws-cdneLjGf0gvbq7WWphC8AHEwS0qJsAT6ao4Nm36N3e2QhN15S-w1Xmv1AJxEo0480IWXXwLAVhXZ_TcR5qDW31Hf40hYeDKJzyw?key=7MRGElcwE05wjMSe8jkdrI9g\" alt=\"alt\" width=\"517\" height=\"388\"><h2>🦒 Speaker Mentorship Programme</h2><p>The signups for The Speaker Mentorship Programme closed on 22nd January 2025. We’re excited to have matched 43 mentees with 24 mentors from our community. We had an increase in the number of mentees who signed up and that’s amazing! We’re glad to be contributing to the journey of new speakers in the Python community. A massive thank you to our mentors for supporting the mentees and to our mentees; we’re proud of you for taking this step in your journey as a speaker.&nbsp;</p><p>26 mentees submitted at least 1 proposal. Out of this number, 13 mentees submitted 1 proposal, 9 mentees submitted 2 proposals, 2 mentees submitted 3 proposals, 1 mentee submitted 4 proposals and lastly, 1 mentee submitted 5 proposals. We wish our mentees the best of luck. We look forward to the acceptance of their proposals.</p><p>In a few weeks, we will host an online panel session with 2–3 experienced community members who will share their advice with first-time speakers. At the end of the panel, there will be a Q&amp;A session to answer all the participants’ questions.</p><p>You can watch the recording of the previous year’s workshop here:</p><p>EuroPython is one of the largest Python conferences in Europe, and it wouldn’t be possible without our sponsors. We are so grateful for the companies who have already expressed interest. If you’re interested in sponsoring EuroPython 2025 as well, please reach out to us at <a href=\"mailto:sponsoring@europython.eu\">sponsoring@europython.eu</a>.</p><h2>🎤 EuroPython Speakers Share Their Experiences</h2><p>We asked our past speakers to share their experiences speaking at EuroPython. These videos have been published on YouTube as shorts, and we&amp;aposve compiled them into brief clips for you to watch.</p><p>A big thanks goes to Sebastian Witowski, Jan Smitka, Yuliia Barabash, Jodie Burchell, Max Kahan, and Cheuk Ting Ho for sharing their experiences.</p><p>Why You Should Submit a Proposal for EuroPython? Part 2</p><p>Why You Should Submit a Proposal for EuroPython? Part 3</p><h2>📊 EuroPython Society Board Report&nbsp;</h2><p>The EuroPython conference wouldn’t be what it is without the incredible volunteers who make it all happen. 💞 Behind the scenes, there’s also the EuroPython Society—a volunteer-led non-profit that manages the fiscal and legal aspects of running the conference, oversees its organization, and works on a few smaller projects like the grants programme. To keep everyone in the loop and promote transparency, the Board is sharing regular updates on what we’re working on.</p><p>That&amp;aposs all for now! Keep an eye on your inbox and our website for more news and announcements. We&amp;aposre counting down the days until we can come together in Prague to celebrate our shared love for Python. 🐍❤️</p><p>Cheers,The EuroPython Team</p>","contentLength":5275,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Extensible Wasm Applications with Go","url":"https://go.dev/blog/wasmexport","date":1739404800,"author":"Cherry Mui","guid":137,"unread":true,"content":"<p>\n      Cherry Mui\n      13 February 2025\n      </p><p>Go 1.24 enhances its WebAssembly (Wasm) capabilities with the\naddition of the  directive and the ability to build a reactor\nfor WebAssembly System Interface (WASI).\nThese features enable Go developers to export Go functions to Wasm,\nfacilitating better integration with Wasm hosts and expanding the possibilities\nfor Go-based Wasm applications.</p><h2>WebAssembly and the WebAssembly System Interface</h2><p><a href=\"https://webassembly.org/\" rel=\"noreferrer\" target=\"_blank\">WebAssembly (Wasm)</a> is a binary instruction format\nthat was initially created for web browsers, providing the execution of\nhigh-performance, low-level code at speeds approaching native performance.\nSince then, Wasm’s utility has expanded, and it is now used in various\nenvironments beyond the browser.\nNotably, cloud providers offer services that directly execute Wasm\nexecutables, taking advantage of the\n<a href=\"https://wasi.dev/\" rel=\"noreferrer\" target=\"_blank\">WebAssembly System Interface (WASI)</a> system call API.\nWASI allows these executables to interact with system resources.</p><p>Go first added support for compiling to Wasm in the 1.11 release, through the\n port.\nGo 1.21 added a new port targeting the WASI preview 1 syscall API through the\nnew  port.</p><h2>Exporting Go Functions to Wasm with </h2><p>Go 1.24 introduces a new compiler directive, , which allows\ndevelopers to export Go functions to be called from outside of the\nWasm module, typically from a host application that runs the Wasm runtime.\nThis directive instructs the compiler to make the annotated function available\nas a Wasm <a href=\"https://webassembly.github.io/spec/core/valid/modules.html?highlight=export#exports\" rel=\"noreferrer\" target=\"_blank\">export</a>\nin the resulting Wasm binary.</p><p>To use the  directive, simply add it to a function definition:</p><pre><code>//go:wasmexport add\nfunc add(a, b int32) int32 { return a + b }\n</code></pre><p>With this, the Wasm module will have an exported function named  that\ncan be called from the host.</p><p>This is analogous to the <a href=\"https://go.dev/cmd/cgo#hdr-C_references_to_Go\">cgo  directive</a>,\nwhich makes the function available to be called from C,\nthough  uses a different, simpler mechanism.</p><p>A WASI reactor is a WebAssembly module that operates continuously, and\ncan be called upon multiple times to react on events or requests.\nUnlike a “command” module, which terminates after its main function finishes,\na reactor instance remains live after initialization, and its exports remain\naccessible.</p><p>With Go 1.24, one can build a WASI reactor with the  build\nflag.</p><pre><code>$ GOOS=wasip1 GOARCH=wasm go build -buildmode=c-shared -o reactor.wasm\n</code></pre><p>The build flag signals to the linker not to generate the  function\n(the entry point for a command module), and instead generate an\n function, which performs runtime and package initialization,\nalong with any exported functions and their dependencies.\nThe  function must be called before any other exported functions.\nThe  function will not be automatically invoked.</p><p>To use a WASI reactor, the host application first initializes it by calling\n, then simply invoke the exported functions.\nHere is an example using <a href=\"https://wazero.io/\" rel=\"noreferrer\" target=\"_blank\">Wazero</a>, a Go-based Wasm runtime\nimplementation:</p><pre><code>// Create a Wasm runtime, set up WASI.\nr := wazero.NewRuntime(ctx)\ndefer r.Close(ctx)\nwasi_snapshot_preview1.MustInstantiate(ctx, r)\n\n// Configure the module to initialize the reactor.\nconfig := wazero.NewModuleConfig().WithStartFunctions(\"_initialize\")\n\n// Instantiate the module.\nwasmModule, _ := r.InstantiateWithConfig(ctx, wasmFile, config)\n\n// Call the exported function.\nfn := wasmModule.ExportedFunction(\"add\")\nvar a, b int32 = 1, 2\nres, _ := fn.Call(ctx, api.EncodeI32(a), api.EncodeI32(b))\nc := api.DecodeI32(res[0])\nfmt.Printf(\"add(%d, %d) = %d\\n\", a, b, c)\n\n// The instance is still alive. We can call the function again.\nres, _ = fn.Call(ctx, api.EncodeI32(b), api.EncodeI32(c))\nfmt.Printf(\"add(%d, %d) = %d\\n\", b, c, api.DecodeI32(res[0]))\n</code></pre><p>The  directive and the reactor build mode allow applications to\nbe extended by calling into Go-based Wasm code.\nThis is particularly valuable for applications that have adopted Wasm as a\nplugin or extension mechanism with well-defined interfaces.\nBy exporting Go functions, applications can leverage the Go Wasm modules to\nprovide functionality without needing to recompile the entire application.\nFurthermore, building as a reactor ensures that the exported functions can be\ncalled multiple times without requiring reinitialization, making it suitable\nfor long-running applications or services.</p><h2>Supporting rich types between the host and the client</h2><p>Go 1.24 also relaxes the constraints on types that can be used as input and\nresult parameters with  functions.\nFor example, one can pass a bool, a string, a pointer to an , or a\npointer to a struct which embeds  and contains supported\nfield types\n(see the <a href=\"https://go.dev/cmd/compile#hdr-WebAssembly_Directives\">documentation</a> for detail).\nThis allows Go Wasm applications to be written in a more natural and ergonomic\nway, and removes some unnecessary type conversions.</p><p>While Go 1.24 has made significant enhancements to its Wasm capabilities,\nthere are still some notable limitations.</p><p>Wasm is a single-threaded architecture with no parallelism.\nA  function can spawn new goroutines.\nBut if a function creates a background goroutine, it will not continue\nexecuting when the  function returns, until calling back into\nthe Go-based Wasm module.</p><p>While some type restrictions have been relaxed in Go 1.24, there are still\nlimitations on the types that can be used with  and\n functions.\nDue to the unfortunate mismatch between the 64-bit architecture of the client\nand the 32-bit architecture of the host, it is not possible to pass pointers in\nmemory.\nFor example, a  function cannot take a pointer to a struct that\ncontains a pointer-typed field.</p><p>The addition of the ability to build a WASI reactor and export Go functions to\nWasm in Go 1.24 represent a significant step forward for Go’s WebAssembly\ncapabilities.\nThese features empower developers to create more versatile and powerful Go-based\nWasm applications, opening up new possibilities for Go in the Wasm ecosystem.</p>","contentLength":5777,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"2024 State of Rust Survey Results","url":"https://blog.rust-lang.org/2025/02/13/2024-State-Of-Rust-Survey-results.html","date":1739404800,"author":"The Rust Survey Team","guid":135,"unread":true,"content":"<p>The Rust Survey Team is excited to share the results of our <a href=\"https://blog.rust-lang.org/2024/12/05/annual-survey-2024-launch.html\">2024 survey on the Rust Programming language</a>, conducted between December 5, 2024 and December 23, 2024.\nAs in previous years, the 2024 State of Rust Survey was focused on gathering insights and feedback from Rust users, and all those who are interested in the future of Rust more generally.</p><p>This ninth edition of the survey surfaced new insights and learning opportunities straight from the global Rust language community, which we will summarize below. In addition to this blog post,  containing charts with aggregated results of all questions in the survey.</p><p><strong>Our sincerest thanks to every community member who took the time to express their opinions and experiences with Rust over the past year. Your participation will help us make Rust better for everyone.</strong></p><p>There's a lot of data to go through, so strap in and enjoy!</p><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr></tbody></table><p>As shown above, in 2024, we have received fewer survey views than in the previous year. This was likely caused simply by the fact that the survey ran only for two weeks, while in the previous year it ran for almost a month. However, the completion rate has also dropped, which seems to suggest that the survey might be a bit too long. We will take this into consideration for the next edition of the survey.</p><p>The State of Rust survey not only gives us excellent insight into how many Rust users around the world are using and experiencing the language but also gives us insight into the makeup of our global community. This information gives us a sense of where the language is being used and where access gaps might exist for us to address over time. We hope that this data and our related analysis help further important discussions about how we can continue to prioritize global access and inclusivity in the Rust community.</p><p>Same as every year, we asked our respondents in which country they live in. The top 10 countries represented were, in order: United States (22%), Germany (14%), United Kingdom (6%), France (6%), China (5%), Canada (3%), Netherlands (3%), Russia (3%), Australia (2%), and Sweden (2%). We are happy to see that Rust is enjoyed by users from all around the world! You can try to find your country in the chart below:</p><p>We also asked whether respondents consider themselves members of a marginalized community. Out of those who answered, 74.5% selected no, 15.5% selected yes, and 10% preferred not to say.</p><p>We have asked the group that selected “yes” which specific groups they identified as being a member of. The majority of those who consider themselves a member of an underrepresented or marginalized group in technology identify as lesbian, gay, bisexual, or otherwise non-heterosexual. The second most selected option was neurodivergent at 46% followed by trans at 35%.</p><p>Each year, we must acknowledge the diversity, equity, and inclusivity (DEI) related gaps in the Rust community and open source as a whole. We believe that excellent work is underway at the Rust Foundation to advance global access to Rust community gatherings and distribute grants to a diverse pool of maintainers each cycle, which you can learn more about <a href=\"https://rustfoundation.org/community\">here</a>. Even so, global inclusion and access is just one element of DEI, and the survey working group will continue to advocate for progress in this domain.</p><p>The number of respondents that self-identify as a Rust user was quite similar to last year, around 92%. This high number is not surprising, since we primarily target existing Rust developers with this survey.</p><p>Similarly as last year, around 31% of those who did not identify as Rust users cited the perception of difficulty as the primary reason for not using Rust. The most common reason for not using Rust was that the respondents simply haven’t had the chance to try it yet.</p><p>Of the former Rust users who participated in the 2024 survey, 36% cited factors outside their control as a reason why they no longer use Rust, which is a 10pp decrease from last year. This year, we also asked respondents if they would consider using Rust again if an opportunity comes up, which turns out to be true for a large fraction of the respondents (63%). That is good to hear!</p><blockquote><p>Closed answers marked with N/A were not present in the previous version(s) of the survey.</p></blockquote><p>Those not using Rust anymore told us that it is because they don't really need it (or the goals of their company changed) or because it was not the right tool for the job. A few reported being overwhelmed by the language or its ecosystem in general or that switching to or introducing Rust would have been too expensive in terms of human effort.</p><p>Of those who used Rust in 2024, 53% did so on a daily (or nearly daily) basis — an increase of 4pp from the previous year. We can observe an upward trend in the frequency of Rust usage over the past few years, which suggests that Rust is being increasingly used at work. This is also confirmed by other answers mentioned in the Rust at Work section later below.</p><p>Rust expertise is also continually increasing amongst our respondents! 20% of respondents can write (only) simple programs in Rust (a decrease of 3pp from 2023), while 53% consider themselves productive using Rust — up from 47% in 2023. While the survey is just one tool to measure the changes in Rust expertise overall, these numbers are heartening as they represent knowledge growth for many Rustaceans returning to the survey year over year.</p><p>Unsurprisingly, the most popular version of Rust is , either the most recent one or whichever comes with the users' Linux distribution. Almost a third of users also use the latest nightly release, due to various reasons (see below). However, it seems that the beta toolchain is not used much, which is a bit unfortunate. We would like to encourage Rust users to use the beta toolchain more (e.g. in CI environments) to help test soon-to-be stabilized versions of Rust.</p><p>People that use the nightly toolchain mostly do it to gain access to specific unstable language features. Several users have also mentioned that rustfmt works better for them on nightly or that they use the nightly compiler because of faster compilation times.</p><p>To use Rust, programmers first have to learn it, so we are always interested in finding out how do they approach that. Based on the survey results, it seems that most users learn from Rust documentation and also from <a href=\"https://doc.rust-lang.org/book/\">The Rust Programming Language</a> book, which has been a favourite learning resource of new Rustaceans for a long time. Many people also seem to learn by reading the source code of Rust crates. The fact that both the documentation and source code of tens of thousands of Rust crates is available on <a href=\"https://docs.rs\">docs.rs</a> and GitHub makes this easier.</p><p>In terms of answers belonging to the \"Other\" category, they can be clustered into three categories: people using LLM (large language model) assistants (Copilot, ChatGPT, Claude, etc.), reading the official Rust forums (Discord, <a href=\"https://users.rust-lang.org/\">URLO</a>) or being mentored while contributing to Rust projects. We would like to extend a big thank you to those making our spaces friendly and welcoming for newcomers, as it is important work and it pays off. Interestingly, a non-trivial number of people \"learned by doing\" and used rustc error messages and clippy as a guide, which is a good indicator of the quality of Rust diagnostics.</p><p>In terms of formal education, it seems that Rust has not yet penetrated university curriculums, as this is typically a very slowly moving area. Only a very small number of respondents (around 3%) have taken a university Rust course or used university learning materials.</p><p>In terms of operating systems used by Rustaceans, Linux was the most popular choice, and it seems that it is getting increasingly popular year after year. It is followed by macOS and Windows, which have a very similar share of usage.</p><blockquote><p>As you can see in the <a href=\"https://blog.rust-lang.org/images/2025-02-13-rust-survey-2024/which-os-do-you-use-wordcloud.png\">wordcloud</a>, there are also a few users that prefer Arch, btw.</p></blockquote><p>Rust programmers target a diverse set of platforms with their Rust programs. We saw a slight uptick in users targeting embedded and mobile platforms, but otherwise the distribution of platforms stayed mostly the same as last year. Since the WebAssembly target is quite diverse, we have split it into two separate categories this time. Based on the results it is clear that when using WebAssembly, it is mostly in the context of browsers (23%) rather than other use-cases (7%).</p><p>We cannot of course forget the favourite topic of many programmers: which IDE (developer environment) they use. Although Visual Studio Code still remains the most popular option, its share has dropped by 5pp this year. On the other hand, the Zed editor seems to have gained considerable traction recently. The small percentage of those who selected \"Other\" are using a wide range of different tools: from CursorAI to classics like Kate or Notepad++. Special mention to the 3 people using \"ed\", that's quite an achievement.</p><blockquote><p>You can also take a look at the linked <a href=\"https://blog.rust-lang.org/images/2025-02-13-rust-survey-2024/what-ide-do-you-use-wordcloud.png\">wordcloud</a> that summarizes open answers to this question (the \"Other\" category), to see what other editors are also popular.</p></blockquote><p>We were excited to see that more and more people use Rust at work for the majority of their coding, 38% vs 34% from last year. There is a clear upward trend in this metric over the past few years.</p><p>The usage of Rust within companies also seems to be rising, as 45% of respondents answered that their organisation makes non-trivial use of Rust, which is a 7pp increase from 2023.</p><p>Once again, the top reason employers of our survey respondents invested in Rust was the ability to build relatively correct and bug-free software. The second most popular reason was Rust’s performance characteristics. 21% of respondents that use Rust at work do so because they already know it, and it's thus their default choice, an uptick of 5pp from 2023. This seems to suggest that Rust is becoming one of the baseline languages of choice for more and more companies.</p><p>Similarly to the previous year, a large percentage of respondents (82%) report that Rust helped their company achieve its goals. In general, it seems that programmers and companies are quite happy with their usage of Rust, which is great!</p><p>In terms of technology domains, the situation is quite similar to the previous year. Rust seems to be especially popular for creating server backends, web and networking services and cloud technologies. It also seems to be gaining more traction for embedded use-cases.</p><blockquote><p>You can scroll the chart to the right to see more domains. Note that the Automotive domain was not offered as a closed answer in the 2023 survey (it was merely entered through open answers), which might explain the large jump.</p></blockquote><p>It is exciting to see the continued growth of professional Rust usage and the confidence so many users feel in its performance, control, security and safety, enjoyability, and more!</p><p>As always, one of the main goals of the State of Rust survey is to shed light on challenges, concerns, and priorities on Rustaceans’ minds over the past year.</p><p>We have asked our users about aspects of Rust that limit their productivity. Perhaps unsurprisingly, slow compilation was at the top of the list, as it seems to be a perennial concern of Rust users. As always, there are efforts underway to improve the speed of the compiler, such as enabling the <a href=\"https://blog.rust-lang.org/2023/11/09/parallel-rustc.html\">parallel frontend</a> or switching to a <a href=\"https://blog.rust-lang.org/2024/05/17/enabling-rust-lld-on-linux.html\">faster linker by default</a>. We invite you to test these improvements and let us know if you encounter any issues.</p><p>Other challenges included subpar support for debugging Rust and high disk usage of Rust compiler artifacts. On the other hand, most Rust users seem to be very happy with its runtime performance, the correctness and stability of the compiler and also Rust's documentation.</p><p>In terms of specific unstable (or missing) features that Rust users want to be stabilized (or implemented), the most desired ones were async closures and if/let while chains. Well, we have good news! Async closures will be stabilized in the next version of Rust (1.85), and if/let while chains will hopefully follow <a href=\"https://github.com/rust-lang/rust/pull/132833\">soon after</a>, once Edition 2024 is released (which will also happen in Rust 1.85).</p><p>Other coveted features are generators (both sync and async) and more powerful generic const expressions. You can follow the <a href=\"https://rust-lang.github.io/rust-project-goals/2025h1/goals.html\">Rust Project Goals</a> to track the progress of these (and other) features.</p><p>In the open answers to this question, people were really helpful and tried hard to describe the most notable issues limiting their productivity. We have seen mentions of struggles with async programming (an all-time favourite), debuggability of errors (which people generally love, but they are not perfect for everyone) or Rust tooling being slow or resource intensive (rust-analyzer and rustfmt). Some users also want a better IDE story and improved interoperability with other languages.</p><p>This year, we have also included a new question about the speed of Rust's evolution. While most people seem to be content with the status quo, more than a quarter of people who responded to this question would like Rust to stabilize and/or add features more quickly, and only 7% of respondents would prefer Rust to slow down or completely stop adding new features.</p><p>Interestingly, when we asked respondents about their main worries for the future of Rust, one of the top answers remained the worry that Rust will become too complex. This seems to be in contrast with the answers to the previous question. Perhaps Rust users still seem to consider the complexity of Rust to be manageable, but they worry that one day it might become too much.</p><p>We are happy to see that the amount of respondents concerned about Rust Project governance and lacking support of the Rust Foundation has dropped by about 6pp from 2023.</p><p>Each year, the results of the State of Rust survey help reveal the areas that need improvement in many areas across the Rust Project and ecosystem, as well as the aspects that are working well for our community.</p><p>If you have any suggestions for the Rust Annual survey, please <a href=\"https://github.com/rust-lang/surveys/issues\">let us know</a>!</p><p>We are immensely grateful to those who participated in the 2024 State of Rust Survey and facilitated its creation. While there are always challenges associated with developing and maintaining a programming language, this year we were pleased to see a high level of survey participation and candid feedback that will truly help us make Rust work better for everyone.</p><p>If you’d like to dig into more details, we recommend you to browse through the full <a href=\"https://raw.githubusercontent.com/rust-lang/surveys/main/surveys/2024-annual-survey/report/annual-survey-2024-report.pdf\">survey report</a>.</p>","contentLength":14399,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Giampaolo Rodola: psutil: drop Python 2.7 support","url":"https://gmpy.dev/blog/2025/psutil-drop-python-27-support","date":1739401200,"author":"","guid":161,"unread":true,"content":"<p>About dropping Python 2.7 support in psutil, 3 years ago\n<a href=\"https://github.com/giampaolo/psutil/issues/2014#issuecomment-969263432\">I stated</a>:</p><blockquote><p>Not a chance, for many years to come. [Python 2.7] currently represents 7-10%\nof total downloads, meaning around 70k / 100k downloads per day.</p></blockquote><p>Only 3 years later, and to my surprise, <strong>downloads for Python 2.7 dropped to\n0.36%</strong>! As such, as of psutil 7.0.0, I finally decided to drop support for\nPython 2.7!</p><p>These are downloads per month:</p><div><pre><code></code></pre></div><p>According to <a href=\"https://archive.is/wip/knzql\">pypistats.org</a> Python 2.7 downloads\nrepresents the 0.28% of the total, around 15.000 downloads per day.</p><p>Maintaining 2.7 support in psutil had become increasingly difficult, but still\npossible. E.g. I could still run tests by using <a href=\"https://github.com/giampaolo/psutil/blob/fbb6d9ce98f930d3d101b7df5a4f4d0f1d2b35a3/setup.py#L76-L85\">old PYPI\nbackports</a>.\nGitHub Actions could still be\n<a href=\"https://github.com/giampaolo/psutil/blob/fbb6d9ce98f930d3d101b7df5a4f4d0f1d2b35a3/.github/workflows/build.yml#L77-L112\">tweaked</a>\nto run tests and produce 2.7 wheels on Linux and macOS. Not on Windows though,\nfor which I had to use a separate service (Appveyor). Still, the amount of\nhacks in psutil source code necessary to support Python 2.7 piled up over the\nyears, and became quite big. Some disadvantages that come to mind:</p><ul><li>Having to maintain a Python compatibility layers like\n  <a href=\"https://github.com/giampaolo/psutil/blob/fbb6d9ce98f930d3d101b7df5a4f4d0f1d2b35a3/psutil/_compat.py\">psutil/_compat.py</a>.\n  This translated in extra extra code and extra imports.</li><li>The C compatibility layer to differentiate between Python 2 and 3 (<code>#if\n  PY_MAJOR_VERSION &lt;= 3</code>, etc.).</li><li>Dealing with the string vs. unicode differences, both in Python and in C.</li><li>Inability to use modern language features, especially f-strings.</li><li>Inability to freely use s, which created a difference on how CONSTANTS\n  were exposed in terms of API.</li><li>Having to install a specific version of  and other (outdated)\n  <a href=\"https://github.com/giampaolo/psutil/blob/fbb6d9ce98f930d3d101b7df5a4f4d0f1d2b35a3/setup.py#L76-L85\">deps</a>.</li><li>Relying on the third-party Appveyor CI service to run tests and produce 2.7\n  wheels.</li><li>Running 4 extra CI jobs on every commit (Linux, macOS, Windows 32-bit,\n  Windows 64-bit) making the CI slower and more subject to failures (we have\n  quite a bit of flaky tests).</li><li>The distribution of 7 wheels specific for Python 2.7. E.g. in the previous\n  release I had to upload:</li></ul><div><pre><code>psutil-6.1.1-cp27-cp27m-macosx_10_9_x86_64.whl\npsutil-6.1.1-cp27-none-win32.whl\npsutil-6.1.1-cp27-none-win_amd64.whl\npsutil-6.1.1-cp27-cp27m-manylinux2010_i686.whl\npsutil-6.1.1-cp27-cp27m-manylinux2010_x86_64.whl\npsutil-6.1.1-cp27-cp27mu-manylinux2010_i686.whl\npsutil-6.1.1-cp27-cp27mu-manylinux2010_x86_64.whl\n</code></pre></div><p>The removal was done in\n<a href=\"https://github.com/giampaolo/psutil/pull/2481\">PR-2841</a>, which removed around\n1500 lines of code (nice!). . In doing so, in the doc I\nstill made the promise that the 6.1.* serie will keep supporting Python 2.7\nand will receive  (no new features). It will be\nmaintained in a specific <a href=\"https://github.com/giampaolo/psutil/tree/python2\">python2\nbranch</a>. I explicitly kept\nthe\n<a href=\"https://github.com/giampaolo/psutil/blob/fbb6d9ce98f930d3d101b7df5a4f4d0f1d2b35a3/setup.py\">setup.py</a>\nscript compatible with Python 2.7 in terms of syntax, so that, when the tarball\nis fetched from PYPI, it will emit an informative error message on . The user trying to install psutil on Python 2.7 will see:</p><div><pre><code>$pip2installpsutil\nAsofversion.0.0psutilnolongersupportsPython.7.\nLatestversionsupportingPython.7ispsutil.1.X.\nInstallitwith:.\n</code></pre></div><p>As the informative message states, users that are still on Python 2.7 can still\nuse psutil with:</p><div><pre><code>pip2 install psutil==6.1.*\n</code></pre></div>","contentLength":2975,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Kay Hayen: Nuitka Release 2.6","url":"https://nuitka.net/posts/nuitka-release-26.html","date":1739401200,"author":"","guid":162,"unread":true,"content":"<li><p> Path normalization to native Windows format was required\nin more places for the  variant of .</p><p>The  function doesn’t normalize to native Win32\npaths with MSYS2, instead using forward slashes. This required manual\nnormalization in additional areas. (Fixed in 2.5.1)</p></li><li><p> Fix, give a proper error when extension modules asked to\ninclude failed to be located. instead of a proper error message.\n(Fixed in 2.5.1)</p></li><li><p>Fix, files with illegal module names (containing ) in their\nbasename were incorrectly considered as potential sub-modules for\n. These are now skipped. (Fixed in 2.5.1)</p></li><li><p> Improved stability by preventing crashes when stubgen\nencounters code it cannot handle. Exceptions from it are now ignored.\n(Fixed in 2.5.1)</p></li><li><p> Addressed a crash that occurred when encountering\nassignments to non-variables. (Fixed in 2.5.1)</p></li><li><p> Fixed a regression introduced in 2.5 release that could\nlead to segmentation faults in exception handling for generators.\n(Fixed in 2.5.2)</p></li><li><p> Corrected an issue where dictionary copies of large\nsplit directories could become corrupted. This primarily affected\ninstance dictionaries, which are created as copies until updated,\npotentially causing problems when adding new keys. (Fixed in 2.5.2)</p></li><li><p> Removed the assumption that module dictionaries\nalways contain only strings as keys. Some modules, like\n on macOS, use non-string keys. (Fixed in 2.5.2)</p></li><li><p> Ensured that the  option correctly\naffects the C compilation process. Previously, only individual\ndisables were applied. (Fixed in 2.5.2)</p></li><li><p> Fixed a crash that could occur during compilation\nwhen unary operations were used within binary operations. (Fixed in\n2.5.3)</p></li><li><p> Corrected the handling of\n<code></code>, which could lead to crashes. (Fixed\nin 2.5.4)</p></li><li><p> Resolved a segmentation fault occurring at runtime\nwhen calling  with only keyword arguments.\n(Fixed in 2.5.5)</p></li><li><p> Harmless warnings generated for x64 DLLs on arm64 with\nnewer macOS versions are now ignored. (Fixed in 2.5.5)</p></li><li><p> Addressed a crash in Nuitka’s dictionary code that\noccurred when copying dictionaries due to internal changes in Python\n3.13. (Fixed in 2.5.6)</p></li><li><p> Improved onefile mode signing by applying\n to the signature of binaries, not just\napp bundles. (Fixed in 2.5.6)</p></li><li><p> Corrected an issue where too many paths were added as\nextra directories from the Nuitka package configuration. This\nprimarily affected the  package, which currently relies\non the  import hack. (Fixed in 2.5.6)</p></li><li><p> Prevented crashes on macOS when creating onefile\nbundles with Python 2 by handling negative CRC32 values. This issue\nmay have affected other versions as well. (Fixed in 2.5.6)</p></li><li><p> Restored the functionality of code provided in\n, which was no longer being applied due to a\nregression. (Fixed in 2.5.6)</p></li><li><p> Suppressed the app bundle mode recommendation when it is\nalready in use. (Fixed in 2.5.6)</p></li><li><p> Corrected path normalization when the output directory\nargument includes “~”.</p></li><li><p> GitHub Actions Python is now correctly identified as a\nHomebrew Python to ensure proper DLL resolution. (Fixed in 2.5.7)</p></li><li><p> Fixed a reference leak that could occur with\nvalues sent to generator objects. Asyncgen and coroutines were not\naffected. (Fixed in 2.5.7)</p></li><li><p> The  scan now correctly handles\ncases where both a package init file and competing Python files\nexist, preventing compile-time conflicts. (Fixed in 2.5.7)</p></li><li><p> Resolved an issue where handling string constants in\nmodules created for Python 3.12 could trigger assertions, and modules\ncreated with 3.12.7 or newer failed to load on older Python 3.12\nversions when compiled with Nuitka 2.5.5-2.5.6. (Fixed in 2.5.7)</p></li><li><p> Corrected the tuple code used when calling certain\nmethod descriptors. This issue primarily affected a Python 2\nassertion, which was not impacted in practice. (Fixed in 2.5.7)</p></li><li><p> Updated resource readers to accept multiple\narguments for <code></code>, and correctly handle\n and  as keyword-only arguments.</p></li><li><p> The platform encoding is no longer used to decode\n logs. Instead,  is used, as it is sufficient for\nmatching filenames across log lines and avoids potential encoding\nerrors. (Fixed in 2.5.7)</p></li><li><p> Requests to statically link libraries for \nare now ignored, as these libraries do not exist. (Fixed in 2.5.7)</p></li><li><p> Fixed a memory leak affecting the results of\nfunctions called via specs. This primarily impacted overloaded hard\nimport operations. (Fixed in 2.5.7)</p></li><li><p> When multiple distributions for a package are found,\nthe one with the most accurate file matching is now selected. This\nimproves handling of cases where an older version of a package (e.g.,\n) is overwritten with a different variant (e.g.,\n), ensuring the correct version is used for\nNuitka package configuration and reporting. (Fixed in 2.5.8)</p></li><li><p> Prevented a potential crash during onefile\ninitialization on Python 2 by passing the directory name directly\nfrom the onefile bootstrap, avoiding the use of  which\nmay not be fully loaded at that point. (Fixed in 2.5.8)</p></li><li><p> Preserved necessary  environment variables on\nWindows for packages that require loading DLLs from those locations.\nOnly  entries not pointing inside the installation prefix are\nremoved. (Fixed in 2.5.8)</p></li><li><p> Corrected the  check to function\nproperly when distribution names and package names differ. (Fixed in\n2.5.8)</p></li><li><p> Improved package name resolution for Anaconda\ndistributions by checking conda metadata when file metadata is\nunavailable through the usual methods. (Fixed in 2.5.8)</p></li><li><p> Normalized the downloaded gcc path to use native Windows\nslashes, preventing potential compilation failures. (Fixed in 2.5.9)</p></li><li><p> Restored static libpython functionality on Linux by\nadapting to a signature change in an unexposed API. (Fixed in 2.5.9)</p></li><li><p> Prevented  from being resurrected when a\nfinalizer is attached, resolving memory leaks that could occur with\n in the presence of exceptions. (Fixed in 2.5.10)</p></li><li><p> Suppressed the gcc download prompt that could appear during\n output on Windows systems without MSVC or with an\nimproperly installed gcc.</p></li><li><p>Ensured compatibility with monkey patched  or \nfunctions, which are used in some testing scenarios.</p></li><li><p> Improved the determinism of the JSON statistics\noutput by sorting keys, enabling reliable build comparisons.</p></li><li><p> Fixed a memory leak in  with finalizers,\nwhich could lead to significant memory consumption when using\n and encountering exceptions.</p></li><li><p> Optimized empty generators (an optimization result) to\navoid generating unused context code, eliminating C compilation\nwarnings.</p></li><li><p> Fixed a reference leak affecting the  value\nin . While typically , this could lead to\nobservable reference leaks in certain cases.</p></li><li><p> Improved handling of  and \nresurrection, preventing memory leaks with  and\n, and ensuring correct execution of  code in\ncoroutines.</p></li><li><p> Corrected the handling of  objects\nresurrecting during deallocation. While not explicitly demonstrated,\nthis addresses potential issues similar to those encountered with\ncoroutines, particularly for old-style coroutines created with the\n decorator.</p></li><li><p> Fixed a potential crash during runtime trace collection by\nensuring timely initialization of the output mechanism.</p></li>","contentLength":6936,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Precision agriculture powered by AI for climate-resilient crops","url":"https://www.datasciencecentral.com/precision-agriculture-powered-by-ai-for-climate-resilient-crops/","date":1739395550,"author":"Shanthababu Pandian","guid":61,"unread":true,"content":"<p>AI in Agriculture Precision Farming AI-Powered Agriculture Climate-Resilient Crops\nSustainable Farming Practices AI for Pest Control AI for Soil Analysis Machine Learning in Agriculture Smart Farming Solutions IoT in Agriculture Crop Monitoring with AI<p>\nPredictive Analytics in Farming AI for Weather Prediction in Agriculture</p>\nAI-Driven Precision Irrigation AI in Fertilization Optimization Sustainable Agriculture Technology Advanced Farming Techniques Agriculture Data Analysis with AI<p>\nAI-Powered Smart Irrigation Agricultural Innovation with AI</p></p>","contentLength":546,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: I made my own OS from scratch because I was bored","url":"https://jotalea.com.ar/misc/jotaleaos/","date":1739393712,"author":"Jotalea","guid":447,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43029686"},{"title":"Show HN: yknotify – Notify when YubiKey needs touch on macOS","url":"https://github.com/noperator/yknotify","date":1739391899,"author":"noperator","guid":446,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43029385"},{"title":"Show HN: A no-build fullstack SSR TypeScript web framework","url":"https://jsr.io/@fullsoak/fullsoak","date":1739390092,"author":"thesephi","guid":445,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43029089"},{"title":"Oracle's Ellison Calls for Governments To Unify Data To Feed AI","url":"https://developers.slashdot.org/story/25/02/12/1857208/oracles-ellison-calls-for-governments-to-unify-data-to-feed-ai?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1739386560,"author":"msmash","guid":197,"unread":true,"content":"Oracle co-founder and chairman Larry Ellison said governments should consolidate all national data for consumption by AI models, calling this step the \"missing link\" for them to take full advantage of the technology. From a report: Fragmented sets of data about a population's health, agriculture, infrastructure, procurement and borders should be unified into a single, secure database that can be accessed by AI models, Ellison said in an on-stage interview with former British Prime Minister Tony Blair at the World Government Summit in Dubai. \n\nCountries with rich population data sets, such as the UK and United Arab Emirates, could cut costs and improve public services, particularly health care, with this approach, Ellison said. Upgrading government digital infrastructure could also help identify wastage and fraud, Ellison said. IT systems used by the US government are so primitive that it makes it difficult to identify \"vast amounts of fraud,\" he added, pointing to efforts by Elon Musk's team at the Department of Government Efficiency to weed it out.","contentLength":1065,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Fine-tune LLMs with synthetic data for context-based Q&A using Amazon Bedrock","url":"https://aws.amazon.com/blogs/machine-learning/fine-tune-llms-with-synthetic-data-for-context-based-qa-using-amazon-bedrock/","date":1739382250,"author":"Sue Cha","guid":130,"unread":true,"content":"<p>There’s a growing demand from customers to incorporate generative AI into their businesses. Many use cases involve using pre-trained large language models (LLMs) through approaches like Retrieval Augmented Generation (RAG). However, for advanced, domain-specific tasks or those requiring specific formats, model customization techniques such as fine-tuning are sometimes necessary. <a href=\"https://aws.amazon.com/bedrock/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock</a> provides you with the ability to customize leading foundation models (FMs) such as Anthropic’s Claude 3 Haiku and Meta’s Llama 3.1.</p><p>Amazon Bedrock is a fully managed service that makes FMs from leading AI startups and Amazon available through an API, so you can choose from a wide range of FMs to find the model that is best suited for your use case. Amazon Bedrock offers a serverless experience, so you can get started quickly, privately customize FMs with your own data, and integrate and deploy them into your applications using AWS tools without having to manage any infrastructure.</p><p>Fine-tuning is a supervised training process where labeled prompt and response pairs are used to further train a pre-trained model to improve its performance for a particular use case. One consistent pain point of fine-tuning is the lack of data to effectively customize these models. Gathering relevant data is difficult, and maintaining its quality is another hurdle. Furthermore, fine-tuning LLMs requires substantial resource commitment. In such scenarios, synthetic data generation offers a promising solution. You can create synthetic training data using a larger language model and use it to fine-tune a smaller model, which has the benefit of a quicker turnaround time.</p><p>In this post, we explore how to use Amazon Bedrock to generate synthetic training data to fine-tune an LLM. Additionally, we provide concrete evaluation results that showcase the power of synthetic data in fine-tuning when data is scarce.</p><p>The solution comprises two main steps:</p><ol><li>Generate synthetic data using the Amazon Bedrock InvokeModel API.</li><li>Fine-tune using an Amazon Bedrock custom model.</li></ol><p>For synthetic data generation, we use a larger language model (such as <a href=\"https://aws.amazon.com/bedrock/claude/\" target=\"_blank\" rel=\"noopener\">Anthropic’s Claude 3 Sonnet on Amazon Bedrock</a>) as the teacher model, and a smaller language model (such as Anthropic’s Claude Instant 1.2 or Claude 3 Haiku on Amazon Bedrock) as the student model for fine-tuning. We use the larger teacher model to generate new data based on its knowledge, which is then used to train the smaller student model. This concept is similar to knowledge distillation used in deep learning, except that we’re using the teacher model to generate a new dataset from its knowledge rather than directly modifying the architecture of the student model.</p><p>The following diagram illustrates the overall flow of the solution.</p><p>Finally, we share our experiment results, where we compare the performance of the model fine-tuned with synthetic data to the baseline (not fine-tuned) model and to a model fine-tuned with an equal amount of original training data.</p><p>To generate synthetic data and fine-tune models using Amazon Bedrock, you first need to create an <a href=\"https://aws.amazon.com/iam/\" target=\"_blank\" rel=\"noopener\">AWS Identity and Access Management (IAM)</a> service role with the appropriate permissions. This role is used by Amazon Bedrock to access the necessary resources on your behalf.</p><p>If you’re running this code using an <a href=\"https://aws.amazon.com/sagemaker/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker</a> notebook instance, edit the IAM role that’s attached to the notebook (for example, AmazonSageMaker-ExecutionRole-XXX) instead of creating a new role. Follow <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-iam-role.html\" target=\"_blank\" rel=\"noopener\">Create a service role for model customization</a> to modify the trust relationship and add the S3 bucket permission. Additionally, on the role’s tab, create the following inline policies:</p><ol><li>Policy name: bedrock-customization</li></ol><div><pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"bedrock:InvokeModel\",\n                \"bedrock:ListModelCustomizationJobs\",\n                \"bedrock:DeleteCustomModel\",\n                \"bedrock:CreateModelCustomizationJob\",\n                \"bedrock:StopModelCustomizationJob\",\n                \"bedrock:ListCustomModels\",\n                \"bedrock:GetCustomModel\",\n                \"bedrock:GetModelCustomizationJob\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre></div><ol start=\"2\"><li>Policy name: iam-pass-role</li></ol><div><pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"iam:PassRole\",\n            \"Resource\": [\n                \"${sagemaker-execution-role-arn}\"\n            ]\n        }\n    ]\n}</code></pre></div><p>The final permission policies for the SageMaker execution role should look like the following, which include AmazonSageMaker-ExecutionPolicy, AmazonSageMakerFullAccess, bedrock-customization, and iam-pass-role.</p><h2>Generate synthetic data using the Amazon Bedrock InvokeModel API</h2><p>We use the <a href=\"https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_InvokeModel.html\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock InvokeModel API</a> to generate synthetic data for fine-tuning. You can use the API to programmatically send an inference (text generation) request to the model of your choice. All you need is a well-crafted prompt tailored for data synthesis. We used the following sample prompt for our use case:</p><div><pre><code>PROMPT = \"\"\"\nYou are an AI assistant who is an expert in Amazon services. Your task is to understand a system that takes in a list of documents, and based on that, answers a question by providing citations for the documents that it referred the answer from.\n\nYour job is to generate three new Question/Answer pairs, emulating the tone, style, and grammar of the original data provided.\n\nHere is the original data :\nInput Documents and Question : {document}\\n\\nQuestion: {question}\nOutput Answer : {answer}\n\nStrictly return a jsonl with the keys (question, answer, topic). Every topic should be different. The answers should be in the exact same format as the original. The question and the answer should be different in content from the original data provided, and all questions should be diverse and different from each other. Do not answer in any other format. The response should be parsable as a jsonl.\n\"\"\"</code></pre></div><p>The goal of our use case was to fine-tune a model to generate a relevant and coherent answer based on a given reference document and a question. RAG is a popular technique used for such Q&amp;A tasks; however, one significant challenge with RAG is the potential for retrieving unrelated or irrelevant documents, which can lead to inaccurate responses. You can apply fine-tuning to guide the model to better focus on the relevance of the documents to the question instead of using the provided documents without context to answer the question.</p><p>Our dataset includes Q&amp;A pairs with reference documents regarding AWS services. Each sample has up to five reference documents as context, and a single-line question follows. The following table shows an example.</p><table border=\"1px\" cellpadding=\"10px\"><tbody><tr><td width=\"677\"><p>Step 1: Prepare to work with AWS CodeStar projects</p><p>In this step, you create an AWS CodeStar service role and an Amazon EC2 key pair, so that you can begin creating and working with AWS CodeStar projects. If you have used AWS CodeStar before, skip ahead to Step 2</p><p>Step 2: Create a Project in AWS CodeStar.</p><p>For this step, follow the instructions in Setting Up AWS CodeStar in the AWS CodeStar User Guide. Do not create a new AWS account, IAM user, or IAM group as part of those instructions. Use the ones you created or identified in Team Setup for AWS Cloud9. When you finish following those instructions, return to this topic.</p><p>Before you can start using AWS CodeStar, you must complete the following steps.</p><p>Step 1: Create an account</p><p>Step 2: Create the AWS CodeStar Service Role</p><p>Step 3: Configure the User’s IAM Permissions</p><p>Step 4: Create an Amazon EC2 Key Pair for AWS CodeStar Projects</p><p>Step 5: Open the AWS CodeStar Console</p><p>How Do I Get Started with AWS CodeStar?</p><p>To get started with AWS CodeStar:</p><p>Prepare to use AWS CodeStar by following the steps in Setting Up AWS CodeStar.</p><p>Experiment with AWS CodeStar by following the steps in the Getting Started with AWS CodeStar tutorial.</p><p>Share your project with other developers by following the steps in Add Team Members to an AWS CodeStar Project.</p><p>Integrate your favorite IDE by following the steps in Use an IDE with AWS CodeStar.</p><p>Step 2: Create a project in AWS CodeStar</p><p>In this step, you create a project in AWS CodeStar.</p><p>If you already have a project in AWS CodeStar you want to use, skip ahead to Step 3: Create an AWS Cloud9 Development Environment and Connect It to the Project.</p><p>For this step, follow the instructions in Create a Project in AWS CodeStar in the AWS CodeStar User Guide. In the AWS CodeStar create project wizard, when you get to the Setup tools page or Connect to your source repository page, choose Skip, and then return to this topic.</p><p>Create a Project in AWS CodeStar</p><p>You use the AWS CodeStar console to create a project. If you use a project template, it sets up the required resources for you. The template also includes sample code that you can use to start coding.</p><p>To create a project, sign in to the AWS Management Console with an IAM user that has the AWSCodeStarFullAccess policy or equivalent permissions. For more information, see Setting Up AWS CodeStar.</p><p>Note: You must complete the steps in Setting Up AWS CodeStar before you can complete the procedures in this topic.</p><p>Create a Project in AWS CodeStar (Console)</p><p>Create a Project in AWS CodeStar (AWS CLI)</p><p>Answer the following question to the best of your ability. Use and paraphrase the information in the context, if it answers the question. Otherwise, rely on your knowledge and memory.</p></td></tr><tr><td width=\"677\">How do I get started with AWS CodeStar?</td></tr><tr><td width=\"677\"><p>To get started with AWS CodeStar, follow these steps:</p><p>1.&nbsp;Prepare to work with AWS CodeStar projects:</p><p>a. Create an AWS CodeStar service role by following the instructions in “Setting Up AWS CodeStar” (Document 2) in the AWS CodeStar User Guide [1].</p><p>b. Create an Amazon EC2 key pair for AWS CodeStar projects, as described in the same guide [1].</p><p>2.&nbsp;Create a project in AWS CodeStar:</p><p>a. Sign in to the AWS Management Console with an IAM user that has the AWSCodeStarFullAccess policy or equivalent permissions [2].</p><p>b. In the AWS CodeStar console, select one of the available project templates, which will automatically provision all the required resources for your project [3].</p><p>c. Once your project is provisioned, you can see your running application from the Application endpoints tile [3].</p><p>3.&nbsp;Connect to the AWS CodeCommit source repository for your project:</p><p>a. Use the steps provided in the CodeStar console to connect to the AWS CodeCommit source repository for your project [3].</p><p>b. Begin coding and making changes to your project\\’s source code.</p><p>4.&nbsp;Track and manage changes in the release process:</p><p>a. Use the project dashboard to track and manage changes in the release process [3].</p><p>b. View the most recent project activity on the dashboard.</p><p>5.&nbsp;Share your project with other developers:</p><p>a. Follow the steps in “Add Team Members to an AWS CodeStar Project” to share your project with other developers [3].</p><p>6.&nbsp;Integrate your favorite IDE:</p><p>a. Follow the steps in “Use an IDE with AWS CodeStar” to integrate your preferred Integrated Development Environment (IDE) with AWS CodeStar [3].</p><p>[1] https://docs.aws.amazon.com/codestar/latest/userguide/setting-up.html</p><p>[2] https://docs.aws.amazon.com/codestar/latest/userguide/create-project.html</p><p>[3] https://docs.aws.amazon.com/codestar/latest/userguide/getting-started.html</p></td></tr></tbody></table><p>For data synthesis, we asked the model to generate three new Q&amp;A pairs per reference document. However, you can adjust the number as needed. The crucial part is to make the model think deeply about a variety of topics. Because the purpose of generating synthetic data is to enrich the training dataset, it’s more beneficial to have the model look at different parts of the documents and create Q&amp;A pairs with different topics than the original.</p><p>The following example shows how to generate synthetic data with the Amazon Bedrock InvokeModel API. We tested the preceding prompt with Anthropic’s Claude 3 Sonnet. If you want to test a different model, retrieve the corresponding model ID from <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock model IDs</a>, and replace the modelId variable in the function.</p><div><pre><code>import boto3\nimport json\n\nbedrock = boto3.client(service_name=\"bedrock-runtime\")\n\ndef generate_synthetic_data(document, question, answer):\n    \n    values = {\n        \"document\": document,\n        \"question\": question,\n        \"answer\": answer\n    }\n    \n    body = {\n        \"messages\": [{\n            \"role\": \"user\", \"content\": PROMPT.format(**values)\n        }],\n        \"anthropic_version\": \"bedrock-2023-05-31\",\n        \"max_tokens\": 2048,\n        \"temperature\" : 0.5\n    }\n    \n    response = bedrock.invoke_model(\n        body=json.dumps(body),\n        modelId=\"anthropic.claude-3-sonnet-20240229-v1:0\",\n        accept=\"application/json\",\n        contentType=\"application/json\"\n    )\n    \n    response_body = json.loads(response.get('body').read())\n    \n    return response_body['content'][0]['text']\n</code></pre></div><p>The preceding function returns three JSONL records in strings with question, answer, and topic as keys. The following parse_llm_output function loads the strings and uses regular expressions to retrieve the generated questions and answers. Then, the create_synthetic_samples function combines those two functionalities to produce the final synthetic training samples.</p><div><pre><code>import re\nimport pd\n\ndef parse_llm_output(jsonl_string):\n    \n    question_pattern = re.compile(r'\"question\":\\s*\"([^\"]+)\"')\n    answer_pattern = re.compile(r'\"answer\":\\s*\"(.*?)\"\\s*,\\s*\"topic\"') \n    questions = question_pattern.findall(jsonl_string)\n    answers = answer_pattern.findall(jsonl_string)\n    \n    return questions, answers\n\n\ndef create_synthetic_samples(row: pd.Series) -&gt; pd.DataFrame:\n\n    jsonl_string = generate_synthetic_data(row['document'], row['question'], row['answer'])\n    questions, answers = parse_llm_output(jsonl_string)\n    \n    return pd.DataFrame({\n        \"document\": [row['document']] * len(questions),\n        \"question\": questions,\n        \"answer\": answers\n    })\n\n\ndef to_customization_format(row):\n\n    msg = {\n        \"messages\": [\n            {\"role\": \"user\", \"content\": f\"{row['document']}\\n\\nQuestion: {row['question']}\"},\n            {\"role\": \"assistant\", \"content\": row['answer']}\n        ]\n    }\n    \n    return msg\n</code></pre></div><p>The following script combines all of the preceding functions and gives you the final training set with both original and synthetic samples. We convert the samples into the format required by the customization job using the to_customization_format function and save them as train.jsonl. Assume the input data is a CSV file with three columns: document, question, and answer.</p><div><pre><code>import pandas as pd\n\n# Load original training samples\noriginal_train = pd.read_csv(input_df_path)\n\n# Create synthetic training samples\nsynthetic_train = pd.concat(original_train.apply(create_synthetic_samples, axis=1).tolist())\n\n# Combine original and synthetic samples\nfinal_train_df = pd.concat([original_train, synthetic_train])\n\n# Convert to the format required by the customization job\nfinal_train = final_train_df.apply(to_customization_format, axis=1).tolist()\n\n# Write to JSONL file    \nwith open('train.jsonl', 'w') as file:\n    for item in final_train:\n        json.dump(item, file)\n        file.write('\\n')\n</code></pre></div><h2>Fine-tune using an Amazon Bedrock custom model</h2><p>Now that you have the synthetic data generated by the teacher model along with your original data, it’s time to train the student model. We fine-tune the student model using the Amazon Bedrock custom model functionality.</p><p>Model customization is the process of providing training data to an FM to improve its performance for specific use cases. Amazon Bedrock offers three model customization methods as of this writing:</p><ul></ul><p>You can create your own custom model using any of these methods through the Amazon Bedrock console or API. For more information on supported models and AWS Regions with various customization methods, please see <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/custom-models.html\" target=\"_blank\" rel=\"noopener\">User guide for model customization</a>. In this section, we focus on how to fine-tune a model using the API.</p><p>To create a fine-tuning job in Amazon Bedrock, complete the following prerequisite steps:</p><ol><li>Upload the jsonl file to the training data bucket.</li><li>Make sure that you have created an IAM role, as described in the <a href=\"https://aws.amazon.com/blogs/machine-learning/fine-tune-llms-with-synthetic-data-for-context-based-qa-using-amazon-bedrock/#_Prerequisites\" target=\"_blank\" rel=\"noopener\">Prerequisites</a></li></ol><p>When these steps are complete, run the following code to submit a new fine-tuning job. In our use case, the student model was Anthropic’s Claude Instant 1.2. At the time of writing, Anthropic’s Claude 3 Haiku is generally available, and we recommend following the rest of the code using Anthropic’s Claude 3 Haiku. For the release announcement, see <a href=\"https://aws.amazon.com/about-aws/whats-new/2024/11/fine-tuning-anthropics-claude-3-haiku-amazon-bedrock/\" target=\"_blank\" rel=\"noopener\">Fine-tuning for Anthropic’s Claude 3 Haiku in Amazon Bedrock is now generally available</a>.</p><p>If you want to try different models, you must check the model provider’s terms of service yourself. Many providers restrict using their models to train competing models. For the latest model support information, see <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/custom-model-supported.html\" target=\"_blank\" rel=\"noopener\">Supported Regions and models for model customization</a>, and replace baseModelIdentifier accordingly. Different models have different hyperparameters. For more information, see <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/custom-models-hp.html\" target=\"_blank\" rel=\"noopener\">Custom model hyperparameters</a>.</p><div><pre><code>import boto3\nimport json\nimport time\n\nbedrock = boto3.client(service_name='bedrock')\n    \n# Set parameters\ncustomizationType = \"FINE_TUNING\"\nbaseModelIdentifier = \"arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-instant-v1:2:100k\"\nroleArn = \"${customization-role-arn}\"\njobName = \"${customization-job-name}\"\ncustomModelName = \"${customization-model-name}\"\nhyperParameters = {\n    \"epochCount\": \"1\",\n    \"batchSize\": \"96\",\n    \"learningRateMultiplier\": \"0.5\",\n }\ntrainingDataConfig = {\"s3Uri\": \"s3://${training-bucket}/train.jsonl\"}\noutputDataConfig = {\"s3Uri\": \"s3://${output-bucket}/myOutputData\"}\n\n# Create job\nresponse_ft = bedrock.create_model_customization_job(\n    jobName=jobName, \n    customModelName=customModelName,\n    roleArn=roleArn,\n    baseModelIdentifier=baseModelIdentifier,\n    hyperParameters=hyperParameters,\n    trainingDataConfig=trainingDataConfig,\n    outputDataConfig=outputDataConfig\n)\n\njobArn = response_ft.get('jobArn')\n\n# Check job status\nwhile True:\n    status = bedrock.get_model_customization_job(jobIdentifier=jobArn).get('status')\n    if status != 'InProgress':\n        print(status)\n        break\n    else:\n        print(status)\n    time.sleep(30)\n</code></pre></div><p>When the status changes to , your fine-tuned student model is ready for use. To run an inference with this custom model, you need to purchase . A flexible option is available for custom models, which can be turned off when not in use and billed by the hour. A cost estimate is provided on the console prior to purchasing provisioned throughput.</p><p>On the Amazon Bedrock console, choose in the navigation pane. Select the model you fine-tuned and choose <strong>Purchase provisioned throughput</strong>.</p><p>The model name and type are automatically selected for you. Select  for . After you make this selection, the estimated cost is shown. If you’re okay with the pricing, choose .</p><p>When the Provisioned Throughput becomes available, retrieve the ARN of the provisioned custom model and run the inference:</p><div><pre><code>import boto3\nimport json\n\nbedrock = boto3.client(service_name=\"bedrock-runtime\")\n\ndef run_student_model(document, question):\n    \n    values = {\n        \"document\": document,\n        \"question\": question,\n    }\n    \n    body = {\n        \"messages\": [{\n            \"role\": \"user\", \"content\": PROMPT.format(**values)\n        }],\n        \"max_tokens\": 2048,\n        \"temperature\" : 0.5\n    }\n    \n    response = bedrock.invoke_model(\n        body=json.dumps(body),\n        modelId=\"${provisioned_model_arn}\",\n        accept=\"application/json\",\n        contentType=\"application/json\"\n    )\n    \n    response_body = json.loads(response.get('body').read())\n    \n    return response_body['content'][0]['text']\n</code></pre></div><p>In this section, we share our experiment results to provide data points on how the synthetic data generated by a teacher model can improve the performance of a student model. For evaluation methods, we used an LLM-as-a-judge approach, where a judge model compares responses from two different models and picks a better response. Additionally, we conducted a manual evaluation on a small subset to assess whether the LLM-as-a-judge and human judges have aligned preferences.</p><p>We carried out controlled experiments where we compared four different models as follows: 1,500 synthetic training samples for the 4 model were generated by Anthropic’s Claude 3 Sonnet, and we created three synthetic samples per one original reference document (3 samples * 500 original reference documents = 1,500 synthetic samples).</p><table border=\"1px\" cellpadding=\"10px\"><tbody><tr><td width=\"634\">Anthropic’s Claude Instant without any customization</td></tr><tr><td width=\"634\">Anthropic’s Claude Instant fine-tuned with 500 original training samples</td></tr><tr><td width=\"169\"></td><td width=\"634\">Anthropic’s Claude Instant fine-tuned with 2,000 original training samples</td></tr><tr><td width=\"169\"></td><td width=\"634\">Anthropic’s Claude Instant fine-tuned with 500 original training samples plus 1,500 synthetic training samples</td></tr></tbody></table><p>LLM output evaluation is an important step in developing generative AI applications, but it is expensive and takes considerable time if done manually. An alternative solution to systematically evaluate output quality in large volume is the LLM-as-a-judge approach, where an LLM is used to evaluate another LLM’s responses.</p><p>For our use case, we used Anthropic’s Claude 3 Sonnet and Meta Llama 3 70B as the judges. We asked the LLM judges to compare outputs from two different models and choose one over the other or state a tie. The following chart summarizes the judges’ decisions. Each number represents the percentage of times when the respective model was selected as providing a better answer, excluding tie cases. The test set contained 343 samples.</p><p>As shown in the preceding chart, the Anthropic’s Claude 3 Sonnet judge preferred the response from the fine-tuned model with synthetic examples over the Anthropic’s Claude Instant base model (84.8% preference) and the fine-tuned model with original 500 samples (72.3% preference). However, the judge concluded that the fine-tuned model with 2,000 original examples was preferred over the fine-tuned model with synthetic examples (32.3% preference). This aligns with the expectation that when large, high-quality original data is available, it’s better to use the large training data that accurately reflects the target data distribution.</p><p>The Meta Llama judge reached a similar conclusion. As shown in the preceding chart, it preferred the response from the fine-tuned model with synthetic samples over the Anthropic’s Claude Instant base model (75.6% preference) and the fine-tuned model with original 500 examples (76.4% preference), but the fine-tuned model with 2,000 original examples was the ultimate winner.</p><p>To complement the LLM-as-a-judge result, we conducted manual evaluation with two human judges. We asked the two human evaluators to perform the same pairwise comparison task as the LLM judge, but for 20 examples. The following chart summarizes the results.</p><p>As shown in the preceding chart, the two human evaluators reached a similar conclusion, reinforcing the LLM-as-a-judge result. The fine-tuned model with synthetic examples produced outputs that were more preferable than the Anthropic’s Claude Instant base model and the fine-tuned model with the original 500 examples; however, it didn’t outperform the fine-tuned model with the 2,000 original examples.</p><p>These comparative evaluation results from both the LLM judges and human judges strongly demonstrate the power and potential of using data synthesis when training data is scarce. Moreover, by using high-quality data from the teacher model, we can effectively train the student model, which is lightweight and cost-effective for deployment in a production environment.</p><h3>Amazon Bedrock evaluations</h3><p>Running LLM-as-a-judge and human evaluation has become much easier with Amazon Bedrock. Model evaluation on Amazon Bedrock allows you to evaluate, compare, and select the best FMs for your use case. Human evaluation workflows can use your own employees or an AWS-managed team as reviewers. For more information on how to set up a human evaluation workflow, see <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/model-evaluation-type-human.html\" target=\"_blank\" rel=\"noopener\">Creating your first model evaluation that uses human workers</a>. The latest feature, LLM-as-a-judge, is now in preview and allows you to assess multiple quality dimensions including correctness, helpfulness, and responsible AI criteria such as answer refusal and harmfulness. For step-by-step instructions, see <a href=\"https://aws.amazon.com/blogs/aws/new-rag-evaluation-and-llm-as-a-judge-capabilities-in-amazon-bedrock/\" target=\"_blank\" rel=\"noopener\">New RAG evaluation and LLM-as-a-judge capabilities in Amazon Bedrock</a>.</p><p>Make sure to delete the following resources to avoid incurring cost:</p><ul><li>Provisioned throughput for the custom model</li><li>The training_bucket and output_bucket S3 buckets</li></ul><p>In this post, we explored how to use Amazon Bedrock to generate synthetic training data using a large teacher language model and fine-tune a smaller student model with synthetic data. We provided instructions on generating synthetic data using the Amazon Bedrock InvokeModel API and fine-tuning the student model using an Amazon Bedrock custom model. Our evaluation results, based on both an LLM-as-a-judge approach and human evaluation, demonstrated the effectiveness of synthetic data in improving the student model’s performance when original training data is limited.</p><p>Although fine-tuning with a large amount of high-quality original data remains the ideal approach, our findings highlight the promising potential of synthetic data generation as a viable solution when dealing with data scarcity. This technique can enable more efficient and cost-effective model customization for domain-specific or specialized use cases.</p><p>If you’re interested in working with the AWS Generative AI Innovation Center and learning more about LLM customization and other generative AI use cases, visit <a href=\"https://aws.amazon.com/ai/generative-ai/innovation-center/\" target=\"_blank\" rel=\"noopener\">Generative AI Innovation Center</a>.</p><p> is a Deep Learning Architect at the AWS Generative AI Innovation Center, where she specializes in model customization and optimization. She has extensive hands-on experience in solving customers’ business use cases by utilizing generative AI as well as traditional AI/ML solutions. Sujeong holds a M.S. degree in Data Science from New York University.</p><p><strong><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/01/31/Arijit-Intro-2.jpg\" alt=\"\" width=\"100\" height=\"116\">Arijit Ghosh Chowdhury</strong> is a Scientist with the AWS Generative AI Innovation Center, where he works on model customization and optimization. In his role, he works on applied research in fine-tuning and model evaluations to enable GenAI for various industries. He has a Master’s degree in Computer Science from the University of Illinois at Urbana Champaign, where his research focused on question answering, search and domain adaptation.</p><p> is a Senior Applied Scientist at Amazon Generative AI Innovation Center where he helps expedite the variety of use cases of AWS customers. Before joining Amazon, Sungmin was a postdoctoral research fellow at Harvard Medical School. He holds Ph.D. in Computer Science from New York University. Outside of work, Sungmin enjoys hiking, reading and cooking.</p><p> is an Applied Scientist II at the AWS Generative AI Innovation Center, where she develops generative AI solutions for AWS customers. Her expertise encompasses designing and implementing innovative AI-driven and deep learning techniques, focusing on natural language processing, computer vision, multi-modal learning, and graph learning. Yiyue holds a Ph.D. in Computer Science from the University of Notre Dame, where her research centered on advanced machine learning and deep learning methodologies. Outside of work, she enjoys sports, hiking, and traveling.</p><p> is a Machine Learning Engineer at the AWS Generative AI Innovation Center, where he works on model customization and optimization for LLMs. He also builds tools to help his team tackle various aspects of the LLM development life cycle—including fine-tuning, benchmarking, and load-testing—that accelerating the adoption of diverse use cases for AWS customers. He holds an M.S. degree in Computer Science from UC Davis.</p><p> is a Senior Manager of Model Customization at the AWS Generative AI Innovation Center. Her team specializes in helping customers develop differentiating Generative AI solutions using their unique and proprietary data to achieve key business outcomes. She holds a Ph.D in Physics from the University of Iowa, with a focus on astronomical X-ray analysis and instrumentation development. Outside of work, she can be found hiking, mountain biking, and skiing around the mountains in Colorado.</p>","contentLength":28436,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Achieve ~2x speed-up in LLM inference with Medusa-1 on Amazon SageMaker AI","url":"https://aws.amazon.com/blogs/machine-learning/achieve-2x-speed-up-in-llm-inference-with-medusa-1-on-amazon-sagemaker-ai/","date":1739382093,"author":"Daniel Zagyva","guid":129,"unread":true,"content":"<p><em>This blog post is co-written with Moran Beladev, Manos Stergiadis, and Ilya Gusev from Booking.com.</em></p><p><a href=\"https://aws.amazon.com/what-is/large-language-model/\" target=\"_blank\" rel=\"noopener\">Large language models</a> (LLMs) have revolutionized the field of natural language processing with their ability to understand and generate humanlike text. Trained on broad, generic datasets spanning a wide range of topics and domains, LLMs use their parametric knowledge to perform increasingly complex and versatile tasks across multiple business use cases. Furthermore, companies are increasingly investing resources in customizing LLMs through few-shot learning and fine-tuning to optimize their performance for specialized applications.</p><p>However, the impressive performance of LLMs comes at the cost of significant computational requirements, driven by their large number of parameters and autoregressive decoding process which is sequential in nature. This combination makes achieving low latency a challenge for use cases such as real-time text completion, simultaneous translation, or conversational voice assistants, where subsecond response times are critical.</p><p>Researchers developed <a href=\"https://arxiv.org/abs/2401.10774\" target=\"_blank\" rel=\"noopener\">Medusa</a>, a framework to speed up LLM inference by adding extra heads to predict multiple tokens simultaneously. This post demonstrates how to use Medusa-1, the first version of the framework, to speed up an LLM by fine-tuning it on <a href=\"https://aws.amazon.com/sagemaker-ai/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker AI</a> and confirms the speed up with deployment and a simple load test. Medusa-1 achieves an inference speedup of around two times without sacrificing model quality, with the exact improvement varying based on model size and data used. In this post, we demonstrate its effectiveness with a 1.8 times speedup observed on a sample dataset.</p><h2>Introduction to Medusa and its benefits for LLM inference speed</h2><p>LLMs generate text in a sequential manner, which involves autoregressive sampling, with each new token conditional on the previous ones. Generating K tokens necessitates K sequential executions of the model. This token-by-token processing introduces an inherent latency and computational overhead because the model needs to perform a separate forward pass for each new token in the output sequence. The following diagram from <a href=\"https://www.researchgate.net/publication/371123751_Role-Play_with_Large_Language_Models\" target=\"_blank\" rel=\"noopener\">Role-Play with Large Language Models</a> illustrates this flow.</p><p>Speculative decoding tackles this challenge by using a smaller, faster draft model to generate multiple potential token continuations in parallel, which are then verified by a larger, more accurate target model. This parallelization speeds up text generation while maintaining the quality of the target model because the verification task is faster than autoregressive token generation. For a detailed explanation of the concept, refer to the paper <a href=\"https://arxiv.org/abs/2302.01318\" target=\"_blank\" rel=\"noopener\">Accelerating Large Language Model Decoding with Speculative Sampling</a>. The speculative decoding technique can be implemented using the <a href=\"https://aws.amazon.com/blogs/machine-learning/achieve-up-to-2x-higher-throughput-while-reducing-costs-by-50-for-generative-ai-inference-on-amazon-sagemaker-with-the-new-inference-optimization-toolkit-part-1/\" target=\"_blank\" rel=\"noopener\">inference optimization toolkit</a> on <a href=\"https://aws.amazon.com/sagemaker-ai/jumpstart/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker Jumpstart</a>.</p><p>The paper <a href=\"https://arxiv.org/abs/2401.10774\" target=\"_blank\" rel=\"noopener\">Medusa: Simple LLM Inference Acceleration Framework with Multiple Decoding Heads</a> introduced Medusa as an alternative to speculative decoding. Instead of adding a separate draft model, it adds extra decoding heads to the LLM that generate candidate continuations simultaneously. These candidates are then evaluated in parallel using a tree-based attention mechanism. This parallel processing reduces the number of sequential steps needed, leading to faster inference times. The main advantage of Medusa over speculative decoding is that it eliminates the need to acquire and maintain a separate draft model while achieving higher speedups. For example, when tested on the <a href=\"https://arxiv.org/abs/2402.14762\" target=\"_blank\" rel=\"noopener\">MT-Bench dataset</a>, the paper reports that Medusa-2 (the second version of Medusa) speeds up inference time by 2.8 times. This outperforms speculative decoding, which only manages to speed up inference time by 1.5 times on the same dataset.</p><p>The Medusa framework currently supports Llama and Mistral models. Although it offers significant speed improvements, it does come with a memory trade-off (similar to speculative decoding). For instance, adding five Medusa heads to the 7-billion-parameter Mistral model increases the total parameter count by 750 million (150 million per head), which means these additional parameters must be stored in GPU memory, leading to a higher memory requirement. However, in most cases, this increase doesn’t necessitate switching to a higher GPU memory instance. For example, you can still use an  instance with 24 GB of GPU memory to host your 7-billion-parameter Llama or Mistral model with extra Medusa heads.</p><p>Training Medusa heads requires additional development time and computational resources, which should be factored into project planning and resource allocation. Another important limitation to mention is that the current framework, when deployed on an Amazon SageMaker AI endpoint, only supports a batch size of one—a configuration typically used for low-latency applications.</p><p>The following diagram from the original Medusa paper authors’ <a href=\"https://github.com/FasterDecoding/Medusa\" target=\"_blank\" rel=\"noopener\">FasterDecoding repository</a> gives a visual Medusa framework overview.</p><p>There are two main variants of Medusa:</p><ol><li> – Requires a two-stage approach where you first fine-tune your LLM and then add Medusa heads and train them on top of your frozen fine-tuned LLM</li><li> – Introduced later as an improvement, fine-tunes both the additional heads and the backbone LLM parameters together, enabling potentially even further latency speedups</li></ol><p>The Medusa paper reports that across models of varying sizes, you can achieve inference speedups of around two times for Medusa-1 and around three times for Medusa-2. With Medusa-1, the predictions are identical to those of the originally fine-tuned LLM. In contrast, with Medusa-2, we might observe slightly different results compared to simple fine-tuning of the LLM because both the heads and the backbone LLM parameters are updated together. In this post, we focus on Medusa-1.</p><p>We cover the following steps in our solution:</p><ul><li>Load and prepare the dataset</li><li>Fine-tune an LLM using a SageMaker AI training job</li><li>Train Medusa heads on top of a frozen fine-tuned LLM using a SageMaker AI training job</li><li>Deploy the fine-tuned LLM with Medusa heads on a SageMaker AI endpoint</li><li>Demonstrate LLM inference speedup</li></ul><p>By following this solution, you can accelerate LLM inference in your applications, leading to faster response times and improved user experience.</p><p>To build the solution yourself, there are the following prerequisites:</p><h3>Load and prepare the dataset</h3><p>Now that you have cloned the <a href=\"https://github.com/aws-samples/speedup-llm-inference-with-medusa-framework-on-amazon-sagemaker\">GitHub repository</a> and opened the  notebook, you will load and prepare the dataset in the notebook. We encourage you to read this post while running the code in the notebook. For this post, we use a dataset called <a href=\"https://huggingface.co/datasets/b-mc2/sql-create-context\" target=\"_blank\" rel=\"noopener\">sql-create-context</a>, which contains samples of natural language instructions, schema definitions and the corresponding SQL query. It contains 78,577 examples of natural language queries, SQL CREATE TABLE statements, and SQL queries answering the question using the CREATE statement as context. For demonstration purposes, we select 3,000 samples and split them into train, validation, and test sets.</p><p>You need to run the “Load and prepare the dataset” section of the  to prepare the dataset for fine-tuning. We also included a data exploration script to analyze the length of input and output tokens. After data exploration, we prepare the train, validation, and test sets and upload them to <a href=\"https://aws.amazon.com/s3/\" target=\"_blank\" rel=\"noopener\">Amazon Simple Storage Service</a> (Amazon S3).</p><h3>Fine-tune an LLM using SageMaker AI training job</h3><p>We use the <a href=\"https://huggingface.co/HuggingFaceH4/zephyr-7b-beta\" target=\"_blank\" rel=\"noopener\">Zephyr 7B β</a> model as our backbone LLM. Zephyr is a series of language models trained to act as helpful assistants, and Zephyr 7B β is a fine-tuned version of <a href=\"https://huggingface.co/mistralai/Mistral-7B-v0.1\" target=\"_blank\" rel=\"noopener\">Mistral-7B-v0.1</a>, trained on a mix of publicly available and synthetic datasets using <a href=\"https://arxiv.org/abs/2305.18290\" target=\"_blank\" rel=\"noopener\">Direct Preference Optimization</a>.</p><p>To launch a SageMaker AI training job, we need to use the PyTorch or Hugging Face estimator. SageMaker AI starts and manages all the necessary <a href=\"https://aws.amazon.com/ec2/\" target=\"_blank\" rel=\"noopener\">Amazon Elastic Compute Cloud</a> (Amazon EC2) instances for us, supplies the appropriate containers, downloads data from our S3 bucket to the container and uploads and runs the specified training script, in our case . We select the hyperparameters based on the <a href=\"https://arxiv.org/pdf/2305.14314\" target=\"_blank\" rel=\"noopener\">QLoRA paper</a>, but we encourage you to experiment with your own combinations. To expedite the execution of this code, we set the number of epochs to 1. However, for better results, it’s generally recommended to set the number of epochs to at least 2 or 3.</p><div><pre><code>from sagemaker.pytorch.estimator import PyTorch\nfrom sagemaker.debugger import TensorBoardOutputConfig\nimport time\nimport os\n\ndef get_current_time():\n    return time.strftime(\"%Y-%m-%d-%H-%M-%S\", time.localtime())\n\ndef create_estimator(hyperparameters_dict, job_name, role, sess, train_scipt_path):\n    metric=[\n        {\"Name\": \"loss\", \"Regex\": r\"'loss':\\s*([0-9.]+)\"},\n        {\"Name\": \"epoch\", \"Regex\": r\"'epoch':\\s*([0-9.]+)\"},\n    ]\n\n    tensorboard_s3_output_path = os.path.join(\n       \"s3://\", sess.default_bucket(), job_name, 'tensorboard'\n    )\n    print(\"Tensorboard output path:\", tensorboard_s3_output_path)\n\n    tensorboard_output_config = TensorBoardOutputConfig(\n        s3_output_path=tensorboard_s3_output_path,\n        container_local_output_path=hyperparameters_dict['logging_dir']\n    )\n    estimator = PyTorch(\n        sagemaker_session    = sess,\n        entry_point          = train_scipt_path,    # train script\n        source_dir           = 'train',      # directory which includes all the files needed for training\n        instance_type        = 'ml.g5.4xlarge',   # instances type used for the training job, \"local_gpu\" for local mode\n        metric_definitions   = metric,\n        instance_count       = 1,                 # the number of instances used for training\n        role                 = role,              # Iam role used in training job to access AWS ressources, e.g. S3\n        volume_size          = 300,               # the size of the EBS volume in GB\n        framework_version      = '2.1.0',             # the pytorch_version version used in the training job\n        py_version           = 'py310',           # the python version used in the training job\n        hyperparameters      =  hyperparameters_dict,  # the hyperparameters passed to the training job\n        disable_output_compression = True,        # not compress output to save training time and cost\n        tensorboard_output_config = tensorboard_output_config\n    )\n    return estimator\n    \n# hyperparameters, which are passed into the training job\nsft_hyperparameters = {\n  ### SCRIPT PARAMETERS ###\n  'train_dataset_path': '/opt/ml/input/data/train/train_dataset.json', # path where sagemaker will save training dataset\n  'eval_dataset_path': '/opt/ml/input/data/eval/eval_dataset.json', # path where sagemaker will save evaluation dataset\n  'model_id': model_id,\n  'max_seq_len': 256,                               # max sequence length for model and packing of the dataset\n  'use_qlora': True,                                 # use QLoRA model\n  ### TRAINING PARAMETERS ###\n  'num_train_epochs': 1,                             # number of training epochs\n  'per_device_train_batch_size': 1,                  # batch size per device during training\n  'gradient_accumulation_steps': 16,                  # number of steps before performing a backward/update pass\n  'gradient_checkpointing': True,                    # use gradient checkpointing to save memory\n  'optim': \"adamw_8bit\",                             # use fused adamw 8bit optimizer\n  'logging_steps': 15,                               # log every 10 steps\n  'save_strategy': \"steps\",                          # save checkpoint every epoch\n  'save_steps': 15,\n  'save_total_limit': 2,\n  'eval_strategy': \"steps\",\n  'eval_steps': 15,\n  'learning_rate': 1e-4,                             # learning rate, based on QLoRA paper\n  'bf16': True,                                      # use bfloat16 precision\n  'max_grad_norm': 10,                              # max gradient norm based on QLoRA paper\n  'warmup_ratio': 0.03,                              # warmup ratio based on QLoRA paper\n  'lr_scheduler_type': \"constant\",                   # use constant learning rate scheduler\n  'output_dir': '/opt/ml/checkpoints/',              # Temporary output directory for model checkpoints\n  'merge_adapters': True,                            # merge LoRA adapters into model for easier deployment\n  'report_to': \"tensorboard\",                        # report metrics to tensorboard\n  'logging_dir': \"/opt/ml/output/tensorboard\"        # tensorboard logging directory\n}\n \nsft_job_name = f\"sft-qlora-text-to-sql-{get_current_time()}\"\ndata = {\n    'train': train_dataset_path,\n    'eval': eval_dataset_path\n}\n\nsft_estimator = create_estimator(sft_hyperparameters, sft_job_name, role, sess, \"fine_tune_llm.py\")\n\nsft_estimator.fit(job_name=sft_job_name, inputs=data, wait=False)</code></pre></div><p>When our training job has completed successfully after approximately 1 hour, we can use the fine-tuned model artifact for the next step, training the Medusa heads on top of it. To visualize the training metrics in Tensorboard, you can follow the guidance in this documentation: <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-htb-access-tb-data.html\" target=\"_blank\" rel=\"noopener\">Load and visualize output tensors using the TensorBoard application</a></p><h3>Train Medusa heads on top of frozen fine-tuned LLM using a SageMaker AI training job</h3><p>For training Medusa heads, we can reuse the functions previously mentioned to launch the training job. We selected hyperparameters based on a combination of what the Medusa paper reported and what we found to be best performing after a few experiments. We set the number of Medusa heads to 5 and used the 8-bit AdamW optimizer, as recommended by the paper. For simplicity, we maintained a constant learning rate of 1e-4 with a constant scheduler, similar to the previous fine-tuning step. Although the paper recommends an increased learning rate and a cosine scheduler, we found that our chosen combination of hyperparameters performed well on this dataset. However, we encourage you to experiment with your own hyperparameter settings to potentially achieve even better results.</p><div><pre><code># hyperparameters, which are passed into the training job\nmedusa_hyperparameters = {\n  ### SCRIPT PARAMETERS ###\n  'train_dataset_path': '/opt/ml/input/data/train/train_dataset.json', # path where sagemaker will save training dataset\n  'eval_dataset_path': '/opt/ml/input/data/eval/eval_dataset.json', # path where sagemaker will save evaluation dataset\n  'model_path': '/opt/ml/input/data/fine-tuned-model/',\n  'max_seq_len': 256,                               # max sequence length for model and packing of the dataset\n  'medusa_num_heads': 5,\n  ### TRAINING PARAMETERS ###\n  'num_train_epochs': 3,                             # number of training epochs\n  'per_device_train_batch_size': 1,                  # batch size per device during training\n  'gradient_accumulation_steps': 16,                  # number of steps before performing a backward/update pass\n  'gradient_checkpointing': True,                    # use gradient checkpointing to save memory\n  'optim': \"adamw_8bit\",                             # use fused adamw 8bit optimizer\n  'logging_steps': 15,                               # log every 10 steps\n  'save_strategy': \"steps\",                          # save checkpoint every epoch\n  'save_steps': 15,\n  'save_total_limit':2,\n  'eval_strategy': \"steps\",\n  'eval_steps': 15,\n  'learning_rate': 1e-4,                             # learning rate\n  'bf16': True,                                      # use bfloat16 precision\n  'max_grad_norm': 10,                              # max gradient norm based on QLoRA paper\n  'warmup_ratio': 0.03,                              # warmup ratio based on QLoRA paper\n  'lr_scheduler_type': \"constant\",                   # use constant learning rate scheduler\n  'output_dir': '/opt/ml/checkpoints/',              # Temporary output directory for model checkpoints\n  'report_to': \"tensorboard\",                        # report metrics to tensorboard\n  'logging_dir': \"/opt/ml/output/tensorboard\"        # tensorboard logging directory\n}\n\nmedusa_train_job_name = f\"medusa-text-to-sql-{get_current_time()}\"\ndata = {\n    'train': train_dataset_path,\n    'eval': eval_dataset_path,\n    'fine-tuned-model': fine_tuned_model_path\n}\n\nmedusa_estimator = create_estimator(medusa_hyperparameters, medusa_train_job_name, role, sess, \"train_medusa_heads.py\")\n\nmedusa_estimator.fit(job_name=medusa_train_job_name, inputs=data, wait=False)</code></pre></div><p>We found that after 3 epochs, the evaluation loss of Medusa heads was converging, which can be observed in the TensorBoard graph in the following image.</p><p>Besides the hyperparameters, the main difference is that we pass  as the training entrypoint, where we first add Medusa heads, then freeze the fine-tuned LLM, and we create custom MedusaSFTTrainer class, which is a subclass of the transformers SFTTrainer.</p><div><pre><code># Add medusa heads and freeze base model\nadd_medusa_heads(\n    model,\n    medusa_num_heads=script_args.medusa_num_heads,\n)\nfreeze_layers(model)\nmodel.config.torch_dtype = torch_dtype\nmodel.config.use_cache = False\n\nlogger.info(\"Finished loading model and medusa heads\")\n\ntokenizer = AutoTokenizer.from_pretrained(script_args.model_path, use_fast=True)\ntokenizer.pad_token = tokenizer.eos_token\n\n################\n# Training\n################\ntrainer = MedusaSFTTrainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_dataset,\n    eval_dataset=eval_dataset,\n    max_seq_length=script_args.max_seq_length,\n    tokenizer=tokenizer,\n    dataset_kwargs={\n        \"add_special_tokens\": False,  # We template with special tokens\n        \"append_concat_token\": False,  # No need to add additional separator token\n    },\n    medusa_num_heads=script_args.medusa_num_heads,\n    medusa_heads_coefficient=script_args.medusa_heads_coefficient,\n    medusa_decay_coefficient=script_args.medusa_decay_coefficient,\n    medusa_scheduler=script_args.medusa_scheduler,\n    train_only_medusa_heads=script_args.train_only_medusa_heads,\n    medusa_lr_multiplier=script_args.medusa_lr_multiplier\n)\ntrainer.train()</code></pre></div><p>In the  function, we add the residual blocks of the Medusa heads, and also override the forward pass for our model to make sure not to train the frozen backbone LLM:</p><div><pre><code>def add_medusa_heads(\n    model,\n    medusa_num_heads,\n):\n    \"\"\"\n    Args:\n        model (nn.Module): The base language model to be used.\n        medusa_num_heads (int, optional): Number of additional tokens to predict\n    \"\"\"\n    hidden_size = model.lm_head.weight.shape[-1]\n    vocab_size = model.lm_head.weight.shape[0]\n    model.config.medusa_num_layers = 1\n    model.config.medusa_num_heads = medusa_num_heads\n    model.medusa_num_heads = medusa_num_heads\n    # Create a list of Medusa heads\n    model.medusa_heads = nn.ModuleList(\n        [\n            nn.Sequential(\n                ResBlock(hidden_size),\n                nn.Linear(hidden_size, vocab_size, bias=False),\n            )\n            for _ in range(medusa_num_heads)\n        ]\n    )\n\n    # Ensure medusa_head's dtype and device align with the base_model\n    model.medusa_heads.to(model.dtype).to(model.device)\n    logger.info(f\"Loading medusa heads in {str(model.dtype)} to device {model.device}\")\n\n    for i in range(medusa_num_heads):\n        # Initialize the weights of each medusa_head using the base model's weights\n        model.medusa_heads[i][-1].weight.data[:] = model.lm_head.weight.data[:]\n\n    def forward(\n        self,\n        input_ids: torch.LongTensor = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_values: Optional[List[torch.FloatTensor]] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n        labels: Optional[torch.LongTensor] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n        train_only_medusa_heads: bool = False,\n    ):\n        \"\"\"Forward pass of the MedusaModel.\n        Returns:\n            torch.Tensor: A tensor containing predictions from all Medusa heads.\n            (Optional) Original predictions from the base model's LM head.\n        \"\"\"\n        maybe_grad = torch.no_grad() if train_only_medusa_heads else nullcontext()\n        with maybe_grad:\n            outputs = self.model(\n                input_ids=input_ids,\n                attention_mask=attention_mask,\n                position_ids=position_ids,\n                past_key_values=past_key_values,\n                inputs_embeds=inputs_embeds,\n                use_cache=use_cache,\n                output_attentions=output_attentions,\n                output_hidden_states=output_hidden_states,\n                return_dict=return_dict,\n            )\n            hidden_states = outputs[0]\n            medusa_logits = [self.lm_head(hidden_states)]\n        for i in range(self.medusa_num_heads):\n            medusa_logits.append(self.medusa_heads[i](hidden_states))\n        return torch.stack(medusa_logits, dim=0)\n\n    model.forward = types.MethodType(forward, model)</code></pre></div><p>After the model training is finished (which takes 1 hour), we prepare the model artefacts for deployment and upload it to Amazon S3. Your final model artifact contains both the original fine-tuned model from the previous step under the  prefix and the trained Medusa heads in a file named .</p><h3>Deploy the fine-tuned LLM with Medusa heads on a SageMaker AI endpoint</h3><p>First, we create a SageMaker AI HuggingFaceModel object and then deploy the model to an endpoint with the following function:</p><div><pre><code>import json\nfrom sagemaker.huggingface import HuggingFaceModel, get_huggingface_llm_image_uri\n\n\ndef deploy_model(endpoint_name, instance_type, model_s3_path=None, hf_model_id=None):\n    llm_image = get_huggingface_llm_image_uri(\n      \"huggingface\",\n      version=\"2.2.0\",\n      session=sess,\n    )\n\n    print(f\"llm image uri: {llm_image}\")\n\n    model_data = None\n    if model_s3_path:\n        model_data = {'S3DataSource': {'S3Uri': model_s3_path, 'S3DataType': 'S3Prefix', 'CompressionType': 'None'}}\n        hf_model_id = \"/opt/ml/model\"\n    else:\n        assert hf_model_id, \"You need to provide either pretrained HF model id, or S3 model data to deploy\"\n    config = {\n      'HF_MODEL_ID': hf_model_id,  # path to where sagemaker stores the model\n      'SM_NUM_GPUS': json.dumps(1),  # Number of GPU used per replica\n      'MAX_INPUT_LENGTH': json.dumps(1024),  # Max length of input text\n      'MAX_TOTAL_TOKENS': json.dumps(2048),  # Max length of the generation (including input text)\n    }\n\n    llm_model = HuggingFaceModel(\n      name=endpoint_name,\n      role=role,\n      image_uri=llm_image,\n      model_data=model_data,\n      env=config\n    )\n\n    deployed_llm = llm_model.deploy(\n      endpoint_name=endpoint_name,\n      initial_instance_count=1,\n      instance_type=instance_type,\n      container_startup_health_check_timeout=300,\n    )\n    return deployed_llm</code></pre></div><p>We deploy three LLMs on three SageMaker AI endpoints:</p><ol><li>Base LLM which isn’t fine-tuned</li><li>The LLM that we fine-tuned</li><li>The fine-tuned LLM that also has trained Medusa heads</li></ol><p>You can deploy the three models in parallel by using a function that we included in the notebook, or you can deploy the models one by one by running the code below:</p><div><pre><code>base_deployed_llm = deploy_model( f\"base-{get_current_time()}\", instance_type=\"ml.g5.4xlarge\", model_s3_path=None, hf_model_id=model_id )\nsft_deployed_llm = deploy_model( f\"sft-{get_current_time()}\", instance_type=\"ml.g5.4xlarge\", model_s3_path=fine_tuned_model_path )\nmedusa_deployed_llm = deploy_model( f\"medusa-{get_current_time()}\", instance_type=\"ml.g5.4xlarge\", model_s3_path=medusa_trained_model_path )\n</code></pre></div><p>After the status for each endpoint becomes , which should take around 15 minutes, we can invoke them for inference. We send the following input:</p><div><pre><code>“You are a text to SQL query translator. Users will ask you questions in English and you will generate a SQL query based on the provided SCHEMA. SCHEMA: CREATE TABLE table_name_32 (time VARCHAR, heat VARCHAR, name VARCHAR)\nWhat was Liu Limin's time in heat 4?“</code></pre></div><p>We can observe the following responses:</p><ol><li>The base LLM response contains extra words that aren’t needed:</li></ol><div><pre><code>“To retrieve the time of Liu Limin in heat 4 based on the provided SCHEMA, we need to write a SQL query. Since the table name is not provided, let 's assume it's \"my_table\".  Assuming the table has a primary key (which is not mentioned in the SCHEMA), we can join the table with itself to compare the heat and name of Liu Limin in heat 4 with all the records in the table.  Here's the SQL query:  ``sql SELECT t1.time FROM my_table t1 JOIN my_table t2 ON t1.name = t2.name AND t2.heat = 4 WHERE t1.name = 'Liu Limin' AND t1.heat &lt;&gt; 4; `  Explanation:  1. We're selecting the time` column from the first table (t1) in the FROM clause. 2. We're joining the table with itself (my_table t1 JOIN my_table t2) to compare the name and heat of Liu Limin in heat 4 with all the records in the table. 3. We're filtering the results using the WHERE clause. We're selecting only the records where the name is 'Liu Limin' and the heat is not equal to 4 (i.e., not heat 4). This is to ensure that we're selecting the time of Liu Limin in heat 3.  Note: This query assumes that the table has a unique primary key. If the table doesn't have a primary key, you may need to add additional conditions to the JOIN and WHERE clauses to ensure that we're selecting the correct records.“</code></pre></div><ol start=\"2\"><li>The fine-tuned LLM response is improved significantly, and contains only the required output:</li></ol><div><pre><code>'SELECT time FROM table_name_32 WHERE heat = 4 AND name = \"liu limin\"'</code></pre></div><ol start=\"3\"><li>The fine-tuned LLM with trained Medusa heads provides the exact same response as the fine-tuned model, demonstrating that Medusa-1, by design, maintains the output (quality) of the original model:</li></ol><div><pre><code>'SELECT time FROM table_name_32 WHERE heat = 4 AND name = \"liu limin\"'</code></pre></div><h3>Demonstrate LLM inference speedup</h3><p>To measure the inference speed improvements, we compare the response times of the deployed fine-tuned LLM and the fine-tuned LLM with Medusa heads on 450 test observations with the following code:</p><div><pre><code>import time\nimport numpy as np\nfrom tqdm import tqdm\n\ndef request(sample, deployed_llm):\n    prompt = tokenizer.apply_chat_template(sample, tokenize=False, add_generation_prompt=True)\n    outputs = deployed_llm.predict({\n      \"inputs\": prompt,\n      \"parameters\": {\n        \"max_new_tokens\": 512,\n        \"do_sample\": False,\n        \"return_full_text\": False,\n      }\n    })\n    return {\"role\": \"assistant\", \"content\": outputs[0][\"generated_text\"].strip()}\n\ndef predict(deployed_llm, test_dataset):\n    predicted_answers = []\n    latencies = []\n\n    for sample in tqdm(test_dataset):\n        start_time = time.time()\n        predicted_answer = request(sample[\"messages\"][:2], deployed_llm)\n        end_time = time.time()\n\n        latency = end_time - start_time\n        latencies.append(latency)\n        predicted_answers.append(predicted_answer)\n\n    # Calculate p90 and average latencies\n    p90_latency = np.percentile(latencies, 90)\n    avg_latency = np.mean(latencies)\n\n    print(f\"P90 Latency: {p90_latency:.2f} seconds\")\n    print(f\"Average Latency: {avg_latency:.2f} seconds\")\n\n    return predicted_answers</code></pre></div><p>First, we run predictions using the fine-tuned LLM:</p><div><pre><code>sft_predictions = predict(sft_deployed_llm, test_dataset)\nP90 Latency: 1.28 seconds\nAverage Latency: 0.95 seconds</code></pre></div><p>Then, we run predictions using the fine-tuned LLM with Medusa heads:</p><div><pre><code>medusa_predictions = predict(medusa_deployed_llm, test_dataset)\nP90 Latency: 0.80 seconds\nAverage Latency: 0.53 seconds</code></pre></div><p>The prediction runs should take around 8 and 4 minutes respectively. We can observe that the average latency decreased from 950 to 530 milliseconds, which is an improvement of 1.8 times. You can achieve even higher improvements if your dataset contains longer inputs and outputs. In our dataset, we only had an average of 18 input tokens and 30 output tokens.</p><p>We want to once again highlight that, with this technique, the output quality is fully maintained, and all the prediction outputs are the same. The model responses for the test set of 450 observations are the same for both with Medusa heads and without Medusa heads:</p><div><pre><code>match_percentage = sum(a[\"content\"] == b[\"content\"] for a, b in zip(sft_predictions, medusa_predictions)) / len(sft_predictions) * 100\nprint(f\"Predictions with the fine-tuned model with medusa heads are the same as without medusa heads: {match_percentage:.2f}% of test set \")\n\nPredictions with fine-tuned model with medusa heads are the same as without medusa heads: 100.00% of test set </code></pre></div><p>You might notice in your run that a few observations aren’t exactly matching, and you might get a 99% match due to small errors in floating point operations caused by optimizations on GPUs.</p><p>At the end of this experiment, don’t forget to delete the SageMaker AI endpoints you created:</p><div><pre><code>base_deployed_llm.delete_model()\nbase_deployed_llm.delete_endpoint()\nsft_deployed_llm.delete_model()\nsft_deployed_llm.delete_endpoint()\nmedusa_deployed_llm.delete_model()\nmedusa_deployed_llm.delete_endpoint()</code></pre></div><p>In this post, we demonstrated how to fine-tune and deploy an LLM with Medusa heads using the Medusa-1 technique on Amazon SageMaker AI to accelerate LLM inference. By using this framework and SageMaker AI scalable infrastructure, we showed how to achieve up to twofold speedups in LLM inference while maintaining model quality. This solution is particularly beneficial for applications requiring low-latency text generation, such as customer service chat assistants, content creation, and recommendation systems.</p><p>As a next step, you can explore fine-tuning your own LLM with Medusa heads on your own dataset and benchmark the results for your specific use case, using the provided <a href=\"https://github.com/aws-samples/speedup-llm-inference-with-medusa-framework-on-amazon-sagemaker\" target=\"_blank\" rel=\"noopener\">GitHub repository</a>.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/ml_17442_dzagyva.jpg\" alt=\"\" width=\"100\" height=\"133\"> is a Senior ML Engineer at AWS Professional Services. He specializes in developing scalable, production-grade machine learning solutions for AWS customers. His experience extends across different areas, including natural language processing, generative AI and machine learning operations.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/ml_17442_adokic.jpg\" alt=\"\" width=\"100\" height=\"129\"> is a Senior Data Scientist at AWS Professional Services. She enjoys supporting customers to build innovative AI/ML solutions on AWS and she is excited about business transformations through the power of data.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/ml_17442_mbeladev.png\" alt=\"\" width=\"100\" height=\"100\"> is a Senior ML Manager at Booking.com. She is leading the content intelligence track which is focused on building, training and deploying content models (computer vision, NLP and generative AI) using the most advanced technologies and models. Moran is also a PhD candidate, researching applying NLP models on social graphs.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/ml_17442_mstergiadis.jpg\" alt=\"\" width=\"100\" height=\"100\"> is a Senior ML Scientist at Booking.com. He specializes in generative NLP and has experience researching, implementing and deploying large deep learning models at scale.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/ml_17442_igusev.jpg\" alt=\"\" width=\"100\" height=\"158\"> is a Senior Machine Learning Engineer at Booking.com. He leads the development of the several LLM systems inside Booking.com. His work focuses on building production ML systems that help millions of travelers plan their trips effectively.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/ml_17442_lvandermaas-727x1024-1.jpg\" alt=\"\" width=\"100\" height=\"141\"> is a Machine Learning Engineer at AWS Professional Services. He works closely with customers building their machine learning solutions on AWS, specializes in natural language processing, experimentation and responsible AI, and is passionate about using machine learning to drive meaningful change in the world.</p>","contentLength":31295,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"LLM-as-a-judge on Amazon Bedrock Model Evaluation","url":"https://aws.amazon.com/blogs/machine-learning/llm-as-a-judge-on-amazon-bedrock-model-evaluation/","date":1739381817,"author":"Adewale Akinfaderin","guid":128,"unread":true,"content":"<p>The evaluation of large language model (LLM) performance, particularly in response to a variety of prompts, is crucial for organizations aiming to harness the full potential of this rapidly evolving technology. The introduction of an  framework represents a significant step forward in simplifying and streamlining the model evaluation process. This approach allows organizations to assess their AI models’ effectiveness using pre-defined metrics, making sure that the technology aligns with their specific needs and objectives. By adopting this method, companies can more accurately gauge the performance of their AI systems, making informed decisions about model selection, optimization, and deployment. This not only enhances the reliability and efficiency of AI applications, but also contributes to a more strategic and informed approach to technology adoption within the organization.</p><p><a href=\"https://aws.amazon.com/bedrock\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock</a>, a fully managed service offering high-performing foundation models from leading AI companies through a single API, has recently introduced two significant evaluation capabilities: <a href=\"https://aws.amazon.com/blogs/aws/new-rag-evaluation-and-llm-as-a-judge-capabilities-in-amazon-bedrock/\" target=\"_blank\" rel=\"noopener\">LLM-as-a-judge under Amazon Bedrock Model Evaluation and RAG evaluation for Amazon Bedrock Knowledge Bases</a>. Both features use the LLM-as-a-judge technique behind the scenes but evaluate different things. This blog post explores LLM-as-a-judge on Amazon Bedrock Model Evaluation, providing comprehensive guidance on feature setup, evaluating job initiation through both the console and Python SDK and APIs, and demonstrating how this innovative evaluation feature can enhance generative AI applications across multiple metric categories including quality, user experience, instruction following, and safety.</p><p>Before we explore the technical aspects and implementation details, let’s examine the key features that make LLM-as-a-judge on Amazon Bedrock Model Evaluation particularly powerful and distinguish it from traditional evaluation methods. Understanding these core capabilities will help illuminate why this feature represents a significant advancement in AI model evaluation.</p><h2>Key features of LLM-as-a-judge</h2><ol><li><strong>Automated intelligent evaluation</strong>: LLM-as-a-judge uses pre-trained models to evaluate responses automatically, providing human-like evaluation quality with up to 98% cost savings. The system dramatically reduces evaluation time from weeks to hours while maintaining consistent evaluation standards across large datasets.</li><li><strong>Comprehensive metric categories</strong>: The evaluation system covers four key metric areas: quality assessment (correctness, completeness, faithfulness), user experience (helpfulness, coherence, relevance), instruction compliance (following instructions, professional style), and safety monitoring (harmfulness, stereotyping, refusal handling).</li><li>: The feature integrates directly with Amazon Bedrock and remains compatible with existing Amazon Bedrock Model Evaluation features. Users can access the functionality through the AWS Management Console for Amazon Bedrock and quickly integrate their custom datasets for evaluation purposes.</li><li>: The system supports the evaluation of models hosted on Amazon Bedrock, custom fine-tuned models, and imported models. Users can seamlessly connect their evaluation datasets through <a href=\"https://aws.amazon.com/s3\" target=\"_blank\" rel=\"noopener\">Amazon Simple Storage Service (Amazon S3)</a> buckets, making the evaluation process streamlined and efficient.</li><li>: Amazon Bedrock provides pre-selected, high-quality evaluation models with optimized prompt engineering for accurate assessments. Users don’t need to bring external judge models, because the Amazon Bedrock team maintains and updates a selection of judge models and associated evaluation judge prompts.</li><li>: The feature enables organizations to perform comprehensive model evaluations at scale without the traditional costs and time investments associated with human evaluation. The automated process maintains high-quality assessments while significantly reducing operational overhead.</li></ol><p>These features create a powerful evaluation framework that helps organizations optimize their AI model performance while maintaining high standards of quality and safety, all within their secure AWS environment.</p><p>Now that you understand the key features of LLM-as-a-judge, let’s examine how to implement and use this capability within Amazon Bedrock Model Evaluation. This section provides a comprehensive overview of the architecture and walks through each component, demonstrating how they work together to deliver accurate and efficient model evaluations.</p><p>LLM-as-a-judge on Amazon Bedrock Model Evaluation provides a comprehensive, end-to-end solution for assessing and optimizing AI model performance. This automated process uses the power of LLMs to evaluate responses across multiple metric categories, offering insights that can significantly improve your AI applications. Let’s walk through the key components of this solution as shown in the following diagram:</p><p>LLM-as-a-judge on Amazon Bedrock Model Evaluation follows a streamlined workflow that enables systematic model evaluation. Here’s how each component works together in the evaluation process:</p><ul><li>: The process begins with a prepared dataset containing prompts that will be used to test the model’s performance. The evaluation can be conducted with or without ground truth responses—while including ground truth provides additional comparison points, it’s entirely optional and not required for successful evaluation.</li><li>: The prompt dataset is converted into JSONL format, which is specifically structured for LLM-as-a-judge evaluation jobs. This format promotes proper processing of evaluation data.</li><li>: The prepared JSONL file is uploaded to an S3 bucket, serving as the secure storage location for the evaluation data.</li><li>: The Amazon Bedrock LLM-as-a-judge model evaluation job processes the stored data, running comprehensive assessments across the selected metric categories (including quality, user experience, instruction following, and safety).</li><li><strong>Automated report generation</strong>: Upon completion, the system generates detailed evaluation reports containing metrics, scores, and insights at both aggregate and individual response levels.</li><li>: Data scientists or machine learning engineers analyze the generated reports to derive actionable insights and make informed decisions.</li></ul><p>With this solution architecture in mind, let’s explore how to implement LLM-as-a-judge model evaluations effectively, making sure that you get the most valuable insights from your assessment process.</p><p>To use the LLM-as-a-judge model evaluation, make sure that you have satisfied the following requirements:</p><ul><li>Selected  and  models enabled in Amazon Bedrock. You can confirm that the models are enabled for your account on the  page of the Amazon Bedrock console.</li><li>If you’re using a custom model instead of an on-demand model for your generator model, make sure that you have sufficient quota for running a <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html\" target=\"_blank\" rel=\"noopener\">Provisioned Throughput</a> during inference. \n  <ul><li>Go to the AWS Service Quotas console, and check the following quotas: \n    <ul><li>Model units no-commitment Provisioned Throughputs across custom models.</li><li>Model units per provisioned model for [your custom model name].</li><li>Both of these fields need to have enough quota to support your Provisioned Throughput model unit. Request a quota increase if necessary to accommodate your expected inference workload.</li></ul></li></ul></li></ul><p>When preparing your dataset for LLM-as-a-judge model evaluation jobs, each prompt must include specific key-value pairs. Here are the required and optional fields:</p><ul><li>: This key indicates the input for various tasks. It can be used for general text generation where the model needs to provide a response, question-answering tasks where the model must answer a specific question, text summarization tasks where the model needs to summarize a given text, or classification tasks where the model must categorize the provided text.</li><li><strong>referenceResponse (used for specific metrics with ground truth)</strong>: This key contains the ground truth or correct response. It serves as the reference point against which the model’s responses will be evaluated if it is provided.</li><li>: This key is used to generate evaluation scores reported by category, helping organize and segment evaluation results for better analysis.</li></ul><ul><li>Each line must be a valid JSON object</li><li>The file must use JSONL format</li><li>The dataset should be stored in an Amazon S3 bucket</li></ul><p>Example JSONL format without ground truth ( is optional):</p><div><pre><code>{\n    \"prompt\": \"What is machine learning?\"\n    \"category\": \"technical\"\n}\n{\n    \"prompt\": \"Summarize climate change impacts\",\n    \"category\": \"environmental\"\n}\n</code></pre></div><p>Example JSONL format with ground truth ( is optional):</p><div><pre><code>{\n    \"prompt\": \"What is machine learning?\",\n    \"referenceResponse\": \"Machine learning is a subset of artificial intelligence that enables systems to learn and improve from experience without being explicitly programmed. It uses algorithms and statistical models to analyze and draw inferences from patterns in data, allowing computers to perform specific tasks without explicit instructions.\",\n    \"category\": \"technical\"\n}\n{\n    \"prompt\": \"Summarize climate change impacts\",\n    \"referenceResponse\": \"Climate change leads to rising global temperatures, extreme weather events, sea level rise, and disruption of ecosystems. These changes result in more frequent natural disasters, threats to food security, loss of biodiversity, and various public health challenges. The impacts affect agriculture, coastal communities, and vulnerable populations disproportionately.\",\n    \"category\": \"environmental\"\n}</code></pre></div><h2>Start an LLM-as-a-judge model evaluation job using the console</h2><p>You can use LLM-as-a-judge on Amazon Bedrock Model Evaluation to assess model performance through a user-friendly console interface. Follow these steps to start an evaluation job:</p><ol><li>In the Amazon Bedrock console, choose and then select . On the page, choose the </li></ol><ol start=\"2\"><li>Choose  and select <strong>Automatic: LLM-as-a-judge</strong>.</li><li>Enter a name and description and select an . This model will be used as a judge to evaluate the response of a prompt or model from your generative AI application.</li></ol><ol start=\"4\"><li>Choose  and select the model to be used for generating responses in this evaluation job.</li></ol><ol start=\"5\"><li>Select the metrics you want to use to evaluate the model response (such as helpfulness, correctness, faithfulness, relevance, and harmfulness).</li></ol><ol start=\"6\"><li>Select the  for  and for . You can use theoption.</li></ol><ol start=\"7\"><li>Select or create an IAM service role with the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/model-evaluation-type-judge.html\">proper permissions</a>. This includes service access to Amazon Bedrock, the S3 buckets in the evaluation job, and the models being used in the job. If you create a new IAM role in the evaluation setup, the service will automatically give the role the proper permissions for the job. Specify the output S3 bucket and choose .</li></ol><ol start=\"8\"><li>You will be able to see the evaluation job is .&nbsp;Wait for the job status to change to .</li></ol><ol start=\"9\"><li>When complete, select the job to see its details. The following is the metrics summary (such as 0.83 for helpfulness, 1.00 for correctness, 1.00 for faithfulness, 1.00 for relevance, and 0.00 for harmfulness).</li></ol><ol start=\"10\"><li>To view generation metrics details, scroll down in the model evaluation report and choose any individual metric (like helpfulness or correctness) to see its detailed breakdown.</li></ol><ol start=\"11\"><li>To see each record’s prompt input, generation output, ground truth, and individual scores, choose a metric and select “Prompt details”. Hover over any individual score to view its detailed explanation.</li></ol><h2>Start an LLM-as-a-judge evaluation job using Python SDK and APIs</h2><p>To use the Python SDK for creating an LLM-as-a-judge model evaluation job, use the following steps. First, set up the required configurations:</p><div><pre><code>import boto3\nfrom datetime import datetime\n\n# Generate unique name for the job\njob_name = f\"Model-evaluation-{datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}\"\n\n# Configure your knowledge base and model settings\nevaluator_model = \"mistral.mistral-large-2402-v1:0\"\ngenerator_model = \"amazon.nova-pro-v1:0\"\nrole_arn = \"arn:aws:iam::&lt;YOUR_ACCOUNT_ID&gt;:role/&lt;YOUR_IAM_ROLE&gt;\"\n\n# Specify S3 locations for evaluation data and output\ninput_data = \"s3://&lt;YOUR_BUCKET&gt;/evaluation_data/input.jsonl\"\noutput_path = \"s3://&lt;YOUR_BUCKET&gt;/evaluation_output/\"\n\n# Create Bedrock client\nbedrock_client = boto3.client('bedrock')</code></pre></div><p>To create an LLM-as-a-judge model evaluation job:</p><div><pre><code>def create_llm_judge_evaluation(\n    client,\n    job_name: str,\n    role_arn: str,\n    input_s3_uri: str,\n    output_s3_uri: str,\n    evaluator_model_id: str,\n    generator_model_id: str,\n    dataset_name: str = None,\n    task_type: str = \"General\" # must be General for LLMaaJ\n):    \n    # All available LLM-as-judge metrics\n    llm_judge_metrics = [\n        \"Builtin.Correctness\",\n        \"Builtin.Completeness\", \n        \"Builtin.Faithfulness\",\n        \"Builtin.Helpfulness\",\n        \"Builtin.Coherence\",\n        \"Builtin.Relevance\",\n        \"Builtin.FollowingInstructions\",\n        \"Builtin.ProfessionalStyleAndTone\",\n        \"Builtin.Harmfulness\",\n        \"Builtin.Stereotyping\",\n        \"Builtin.Refusal\"\n    ]\n\n    # Configure dataset\n    dataset_config = {\n        \"name\": dataset_name or \"CustomDataset\",\n        \"datasetLocation\": {\n            \"s3Uri\": input_s3_uri\n        }\n    }\n\n    try:\n        response = client.create_evaluation_job(\n            jobName=job_name,\n            roleArn=role_arn,\n            applicationType=\"ModelEvaluation\",\n            evaluationConfig={\n                \"automated\": {\n                    \"datasetMetricConfigs\": [\n                        {\n                            \"taskType\": task_type,\n                            \"dataset\": dataset_config,\n                            \"metricNames\": llm_judge_metrics\n                        }\n                    ],\n                    \"evaluatorModelConfig\": {\n                        \"bedrockEvaluatorModels\": [\n                            {\n                                \"modelIdentifier\": evaluator_model_id\n                            }\n                        ]\n                    }\n                }\n            },\n            inferenceConfig={\n                \"models\": [\n                    {\n                        \"bedrockModel\": {\n                            \"modelIdentifier\": generator_model_id\n                        }\n                    }\n                ]\n            },\n            outputDataConfig={\n                \"s3Uri\": output_s3_uri\n            }\n        )\n        return response\n        \n    except Exception as e:\n        print(f\"Error creating evaluation job: {str(e)}\")\n        raise\n        \n # Create evaluation job\ntry:\n    llm_as_judge_response = create_llm_judge_evaluation(\n        client=bedrock_client,\n        job_name=job_name,\n        role_arn=ROLE_ARN,\n        input_s3_uri=input_data,\n        output_s3_uri=output_path,\n        evaluator_model_id=evaluator_model,\n        generator_model_id=generator_model,\n        task_type=\"General\"\n    )\n    print(f\"✓ Created evaluation job: {llm_as_judge_response['jobArn']}\")\nexcept Exception as e:\n    print(f\"✗ Failed to create evaluation job: {str(e)}\")\n    raise\n</code></pre></div><p>To monitor the progress of your evaluation job:</p><div><pre><code># Get job ARN based on job type\nevaluation_job_arn = llm_as_judge_response['jobArn']\n# Check job status\ncheck_status = bedrock_client.get_evaluation_job(jobIdentifier=evaluation_job_arn) \nprint(f\"Job Status: {check_status['status']}\")</code></pre></div><p>You can also compare multiple foundation models to determine which one works best for your needs. By using the same evaluator model across all comparisons, you’ll get consistent benchmarking results to help identify the optimal model for your use case.</p><div><pre><code># Generator Models\nGENERATOR_MODELS = [\n    \"anthropic.claude-3-haiku-20240307-v1:0\",\n    \"amazon.nova-micro-v1:0\"\n]\n\n# Consistent Evaluator\nEVALUATOR_MODEL = \"anthropic.claude-3-haiku-20240307-v1:0\"\n\ndef run_model_comparison(\n    generator_models: List[str],\n    evaluator_model: str\n) -&gt; List[Dict[str, Any]]:\n    evaluation_jobs = []\n    \n    for generator_model in generator_models:\n        job_name = f\"llmaaj-{generator_model.split('.')[0]}-{evaluator_model.split('.')[0]}-{datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}\"\n        \n        try:\n            response = create_llm_judge_evaluation(\n                client=bedrock_client,\n                job_name=job_name,\n                role_arn=ROLE_ARN,\n                input_s3_uri=input_data,\n                output_s3_uri=f\"{output_path}/{job_name}/\",\n                evaluator_model_id=evaluator_model,\n                generator_model_id=generator_model,\n                task_type=\"General\"\n            )\n            \n            job_info = {\n                \"job_name\": job_name,\n                \"job_arn\": response[\"jobArn\"],\n                \"generator_model\": generator_model,\n                \"evaluator_model\": evaluator_model,\n                \"status\": \"CREATED\"\n            }\n            evaluation_jobs.append(job_info)\n            \n            print(f\"✓ Created job: {job_name}\")\n            print(f\"  Generator: {generator_model}\")\n            print(f\"  Evaluator: {evaluator_model}\")\n            print(\"-\" * 80)\n            \n        except Exception as e:\n            print(f\"✗ Error with {generator_model}: {str(e)}\")\n            continue\n            \n    return evaluation_jobs\n\n# Run model comparison\nevaluation_jobs = run_model_comparison(GENERATOR_MODELS, EVALUATOR_MODEL)</code></pre></div><h3>Correlation analysis for LLM-as-a-judge evaluations</h3><p>You can use the <a href=\"https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient\" target=\"_blank\" rel=\"noopener\">Spearman’s rank correlation coefficient</a> to compare evaluation results between different generator models using LLM-as-a-judge in Amazon Bedrock. After retrieving the evaluation results from your S3 bucket, containing evaluation scores across various metrics, you can begin the correlation analysis.</p><p>Using , compute the correlation coefficient between pairs of generator models, filtering out constant values or error messages to have a valid statistical comparison. The resulting correlation coefficients help identify how similarly different models respond to the same prompts. A coefficient closer to 1.0 indicates stronger agreement between the models’ responses, while values closer to 0 suggest more divergent behavior. This analysis provides valuable insights into model consistency and helps identify cases where different models might produce significantly different outputs for the same input.</p><div><pre><code>import json\nimport boto3\nimport numpy as np\nfrom scipy import stats\n\ndef read_and_organize_metrics_from_s3(bucket_name, file_key):\n    s3_client = boto3.client('s3')\n    metrics_dict = {}\n    \n    try:\n        response = s3_client.get_object(Bucket=bucket_name, Key=file_key)\n        content = response['Body'].read().decode('utf-8')\n        \n        for line in content.strip().split('\\n'):\n            if line:\n                data = json.loads(line)\n                if 'automatedEvaluationResult' in data and 'scores' in data['automatedEvaluationResult']:\n                    for score in data['automatedEvaluationResult']['scores']:\n                        metric_name = score['metricName']\n                        if 'result' in score:\n                            metric_value = score['result']\n                            if metric_name not in metrics_dict:\n                                metrics_dict[metric_name] = []\n                            metrics_dict[metric_name].append(metric_value)\n        return metrics_dict\n    \n    except Exception as e:\n        print(f\"Error: {e}\")\n        return None\n\ndef get_spearmanr_correlation(scores1, scores2):\n    if len(set(scores1)) == 1 or len(set(scores2)) == 1:\n        return \"undefined (constant scores)\", \"undefined\"\n    \n    try:\n        result = stats.spearmanr(scores1, scores2)\n        return round(float(result.statistic), 4), round(float(result.pvalue), 4)\n    except Exception as e:\n        return f\"error: {str(e)}\", \"undefined\"\n\n# Extract metrics\nbucket_name = \"&lt;EVALUATION_OUTPUT_BUCKET&gt;\"\nfile_key1 = \"&lt;EVALUATION_FILE_KEY1&gt;\"\nfile_key2 = \"&lt;EVALUATION_FILE_KEY2&gt;\"\n\nmetrics1 = read_and_organize_metrics_from_s3(bucket_name, file_key1)\nmetrics2 = read_and_organize_metrics_from_s3(bucket_name, file_key2)\n\n# Calculate correlations for common metrics\ncommon_metrics = set(metrics1.keys()) &amp; set(metrics2.keys())\n\nfor metric_name in common_metrics:\n    scores1 = metrics1[metric_name]\n    scores2 = metrics2[metric_name]\n    \n    if len(scores1) == len(scores2):\n        correlation, p_value = get_spearmanr_correlation(scores1, scores2)\n        \n        print(f\"\\nMetric: {metric_name}\")\n        print(f\"Number of samples: {len(scores1)}\")\n        print(f\"Unique values in Model 1 scores: {len(set(scores1))}\")\n        print(f\"Unique values in Model 2 scores: {len(set(scores2))}\")\n        print(f\"Model 1 scores range: [{min(scores1)}, {max(scores1)}]\")\n        print(f\"Model 2 scores range: [{min(scores2)}, {max(scores2)}]\")\n        print(f\"Spearman correlation coefficient: {correlation}\")\n        print(f\"P-value: {p_value}\")\n    else:\n        print(f\"\\nMetric: {metric_name}\")\n        print(\"Error: Different number of samples between models\")</code></pre></div><h2>Best practices for LLM-as-a-judge implementation</h2><p>You can also compare multiple foundation models to determine which one works best for your needs. By using the same evaluator model across all comparisons, you’ll get consistent, scalable results. The following best practices will help you establish standardized benchmarking when comparing different foundation models.</p><ul><li>Create diverse test datasets that represent real-world use cases and edge cases. For large workloads (more than 1,000 prompts), use stratified sampling to maintain comprehensive coverage while managing costs and completion time. Include both simple and complex prompts to test model capabilities across different difficulty levels.</li><li>Choose evaluation metrics that align with your specific business objectives and application requirements. Balance quality metrics (correctness, completeness) with user experience metrics (helpfulness, coherence). Include safety metrics when deploying customer-facing applications.</li><li>Maintain consistent evaluation conditions when comparing different models. Use the same evaluator model across comparisons for standardized benchmarking. Document your evaluation configuration and parameters for reproducibility.</li><li>Schedule regular evaluation jobs to track model performance over time. Monitor trends across different metric categories to identify areas for improvement. Set up performance baselines and thresholds for each metric.</li><li>Optimize batch sizes based on your evaluation needs and cost constraints. Consider using smaller test sets for rapid iteration and larger sets for comprehensive evaluation. Balance evaluation frequency with resource utilization.</li><li>Maintain detailed records of evaluation jobs, including configurations and results. Track improvements and changes in model performance over time. Document any modifications made based on evaluation insights. The optional job description field can help you here.</li><li>Use evaluation results to guide model selection and optimization. Implement feedback loops to continuously improve prompt engineering. Regularly update evaluation criteria based on emerging requirements and user feedback.</li><li>Design your evaluation framework to accommodate growing workloads. Plan for increased complexity as you add more models or use cases. Consider automated workflows for regular evaluation tasks.</li></ul><p>These best practices help establish a robust evaluation framework using LLM-as-a-judge on Amazon Bedrock. For deeper insights into the scientific validation of these practices, including case studies and correlation with human judgments, stay tuned for our upcoming technical deep-dive blog post.</p><p>LLM-as-a-judge on Amazon Bedrock Model Evaluation represents a significant advancement in automated model assessment, offering organizations a powerful tool to evaluate and optimize their AI applications systematically. This feature combines the efficiency of automated evaluation with the nuanced understanding typically associated with human assessment, enabling organizations to scale their quality assurance processes while maintaining high standards of performance and safety.</p><p>The comprehensive metric categories, flexible implementation options, and seamless integration with existing AWS services make it possible for organizations to establish robust evaluation frameworks that grow with their needs. Whether you’re developing conversational AI applications, content generation systems, or specialized enterprise solutions, LLM-as-a-judge provides the necessary tools to make sure that your models align with both technical requirements and business objectives.</p><p>We’ve provided detailed implementation guidance, from initial setup to best practices, to help you use this feature effectively. The accompanying code samples and configuration examples in this post demonstrate how to implement these evaluations in practice. Through systematic evaluation and continuous improvement, organizations can build more reliable, accurate, and trustworthy AI applications.</p><p>We encourage you to explore LLM-as-a-judge capabilities in the Amazon Bedrock console and discover how automatic evaluation can enhance your AI applications. To help you get started, we’ve prepared a Jupyter notebook with practical examples and code snippets that you can find on our <a href=\"https://github.com/aws-samples/amazon-bedrock-samples/tree/main/evaluation-observe/bedrock-llm-as-judge-evaluation\" target=\"_blank\" rel=\"noopener\">GitHub repository</a>.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/06/wale_picture_blog.png\" alt=\"\" width=\"100\" height=\"100\"> is a Sr. Data Scientist–Generative AI, Amazon Bedrock, where he contributes to cutting edge innovations in foundational models and generative AI applications at AWS. His expertise is in reproducible and end-to-end AI/ML methods, practical implementations, and helping global customers formulate and develop scalable solutions to interdisciplinary problems. He has two graduate degrees in physics and a doctorate in engineering.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/06/ishan.jpg\" alt=\"\" width=\"100\" height=\"99\"> is a Generative AI Data Scientist at Amazon Web Services, where he helps customers build innovative and responsible generative AI solutions and products. With a strong background in AI/ML, Ishan specializes in building Generative AI solutions that drive business value. Outside of work, he enjoys playing volleyball, exploring local bike trails, and spending time with his wife and dog, Beau.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/06/Badgephoto.jpeg\" alt=\"\" width=\"100\" height=\"115\"> is a Senior Product Manager on Amazon Bedrock, the AWS Generative AI developer service. He works at the intersection of AI and human interaction with the goal of creating and improving generative AI products and services to meet our needs. Previously, Jesse held engineering team leadership roles at Apple and Lumileds, and was a senior scientist in a Silicon Valley startup. He has an M.S. and Ph.D. from the University of Florida, and an MBA from the University of California, Berkeley, Haas School of Business.</p>","contentLength":26547,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From concept to reality: Navigating the Journey of RAG from proof of concept to production","url":"https://aws.amazon.com/blogs/machine-learning/from-concept-to-reality-navigating-the-journey-of-rag-from-proof-of-concept-to-production/","date":1739381272,"author":"Vivek Mittal","guid":127,"unread":true,"content":"<p>Generative AI has emerged as a transformative force, captivating industries with its potential to create, innovate, and solve complex problems. However, the journey from a proof of concept to a production-ready application comes with challenges and opportunities. Moving from proof of concept to production is about creating scalable, reliable, and impactful solutions that can drive business value and user satisfaction.</p><p>One of the most promising developments in this space is the rise of <a href=\"https://aws.amazon.com/what-is/retrieval-augmented-generation/\" target=\"_blank\" rel=\"noopener\">Retrieval Augmented Generation (RAG)</a> applications. RAG is the process of optimizing the output of a foundation model (FM), so it references a knowledge base outside of its training data sources before generating a response.</p><p>The following diagram illustrates a sample architecture.</p><p>In this post, we explore the movement of RAG applications from their proof of concept or minimal viable product (MVP) phase to full-fledged production systems. When transitioning a RAG application from a proof of concept to a production-ready system, optimization becomes crucial to make sure the solution is reliable, cost-effective, and high-performing. Let’s explore these optimization techniques in greater depth, setting the stage for future discussions on hosting, scaling, security, and observability considerations.</p><p>The diagram below illustrates the tradeoffs to consider for a production-ready RAG application.</p><p>The success of a production-ready RAG system is measured by its quality, cost, and latency. Machine learning (ML) engineers must make trade-offs and prioritize the most important factors for their specific use case and business requirements. For example, consider the use case of generating personalized marketing content for a luxury fashion brand. The brand might be willing to absorb the higher costs of using a more powerful and expensive FMs to achieve the highest-quality classifications, because misclassifications could lead to customer dissatisfaction and damage the brand’s reputation. Consider another use case of generating personalized product descriptions for an ecommerce site. The retailer might be willing to accept slightly longer latency to reduce infrastructure and operational costs, as long as the generated descriptions remain reasonably accurate and compelling. The optimal balance of quality, cost, and latency can vary significantly across different applications and industries.</p><p>Let’s look into practical guidelines on how you can enhance the overall quality of your RAG workflow, including the quality of the retriever and quality of the result generator using <a href=\"https://aws.amazon.com/bedrock/knowledge-bases/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock Knowledge Bases</a> and other features of <a href=\"https://aws.amazon.com/bedrock/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock</a>. Amazon Bedrock Knowledge Bases provides a fully managed capability that helps you implement the entire RAG workflow from ingestion to retrieval and prompt augmentation without having to build custom integrations to data sources and manage data flows.</p><p>An effective evaluation framework is crucial for assessing and optimizing RAG systems as they move from proof of concept to production. These frameworks typically include overall metrics for a holistic assessment of the entire RAG pipeline, as well as specific diagnostic metrics for both the retrieval and generation components. This allows for targeted improvements in each phase of the system. By implementing a robust evaluation framework, developers can continuously monitor, diagnose, and enhance their RAG systems, achieving optimal performance across quality, cost, and latency dimensions as the application scales to production levels. <a href=\"https://aws.amazon.com/bedrock/evaluations/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock Evaluations</a> can help you evaluate your retrieval or end-to-end RAG workflow in Amazon Bedrock Knowledge Bases. In the following sections, we discuss these specific metrics in different phases of the RAG workflow in more detail.</p><p>For better retrieval performance, the way the data is stored in the <a href=\"https://aws.amazon.com/blogs/machine-learning/dive-deep-into-vector-data-stores-using-amazon-bedrock-knowledge-bases/\" target=\"_blank\" rel=\"noopener\">vector store</a> has a big impact. For example, your input document might include tables within the PDF. In such cases, using an FM to parse the data will provide better results. You can use <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/kb-chunking-parsing.html#kb-advanced-parsing\" target=\"_blank\" rel=\"noopener\">advanced parsing options</a> supported by Amazon Bedrock Knowledge Bases for parsing non-textual information from documents using FMs. Many organizations store their data in structured formats within data warehouses and data lakes. Amazon Bedrock Knowledge Bases offers a feature that lets you connect your RAG workflow to <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html\" target=\"_blank\" rel=\"noopener\">structured data stores</a>. This fully managed out-of-the-box RAG solution can help you natively query structured data from where it resides.</p><p>Another important consideration is the way your source document is split up into chunks. If your document would benefit from inherent relationships within your document, it might be wise to use <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/kb-chunking-parsing.html#kb-hiearchical-chunking\" target=\"_blank\" rel=\"noopener\">hierarchical chunking</a>, which allows for more granular and efficient retrieval. Some documents benefit from <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/kb-chunking-parsing.html#kb-semantic-chunking\" target=\"_blank\" rel=\"noopener\">semantic chunking</a> by preserving the contextual relationship in the chunks, helping make sure that the related information stays together in logical chunks. You can also use your own custom <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/kb-chunking-parsing.html#kb-custom-transformation\" target=\"_blank\" rel=\"noopener\">chunking strategy</a> for your RAG application’s unique requirements.</p><p>RAG applications process user queries by searching across a large set of documents. However, in many situations, you might need to retrieve documents with specific attributes or content. You can use <a href=\"https://aws.amazon.com/blogs/machine-learning/amazon-bedrock-knowledge-bases-now-supports-metadata-filtering-to-improve-retrieval-accuracy/\" target=\"_blank\" rel=\"noopener\">metadata filtering</a> to narrow down search results by specifying inclusion and exclusion criteria. Amazon Bedrock Knowledge Bases now also supports <a href=\"https://aws.amazon.com/about-aws/whats-new/2024/12/amazon-bedrock-knowledge-bases-auto-generated-query-filters-improved-retrieval/\" target=\"_blank\" rel=\"noopener\">auto generated query filters</a>, which extend the existing capability of manual metadata filtering by allowing you to narrow down search results without the need to manually construct complex filter expressions. This improves retrieval accuracy by making sure the documents are relevant to the query.</p><p>Writing an effective query is just as important as any other consideration for generation accuracy. You can add a <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-templates-and-examples.html\" target=\"_blank\" rel=\"noopener\">prompt</a> providing instructions to the FM to provide an appropriate answer to the user. For example, a legal tech company would want to provide instructions to restrict the answers to be based on the input documents and not based on general information known to the FM. <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html\" target=\"_blank\" rel=\"noopener\">Query decomposition</a> by splitting the input query into multiple queries is also helpful in retrieval accuracy. In this process, the subqueries with less semantic complexity might find more targeted chunks. These chunks can then be pooled and ranked together before passing them to the FM to generate a response.</p><p><a href=\"https://aws.amazon.com/about-aws/whats-new/2024/12/amazon-bedrock-rerank-api-accuracy-rag-applications/\" target=\"_blank\" rel=\"noopener\">Reranking</a>, as a post-retrieval step, can significantly improve response quality. This technique uses LLMs to analyze the semantic relevance between the query and retrieved documents, reordering them based on their pertinence. By incorporating reranking, you make sure that only the most contextually relevant information is used for generation, leading to more accurate and coherent responses.</p><p>Adjusting <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-parameters.html\" target=\"_blank\" rel=\"noopener\">inference parameters</a>, such as temperature and top-k/p sampling, can help in further refining the output.</p><p>You can use Amazon Bedrock Knowledge Bases to <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html\" target=\"_blank\" rel=\"noopener\">configure and customize</a> queries and response generation. You can also improve the relevance of your query responses with a <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/rerank.html\" target=\"_blank\" rel=\"noopener\">reranker model</a> in Amazon Bedrock.</p><p>The key metrics for retriever quality are <a href=\"https://aws.amazon.com/blogs/machine-learning/evaluate-the-reliability-of-retrieval-augmented-generation-applications-using-amazon-bedrock/\" target=\"_blank\" rel=\"noopener\">context precision</a>, <a href=\"https://aws.amazon.com/blogs/machine-learning/evaluate-the-reliability-of-retrieval-augmented-generation-applications-using-amazon-bedrock/\" target=\"_blank\" rel=\"noopener\">context recall</a>, and <a href=\"https://aws.amazon.com/blogs/machine-learning/evaluate-the-reliability-of-retrieval-augmented-generation-applications-using-amazon-bedrock/\" target=\"_blank\" rel=\"noopener\">context relevance</a>. Context precision measures how well the system ranks relevant pieces of information from the given context. It considers the question, ground truth, and context. Context recall provides the percentage of ground truth claims or key information covered by the retrieved context. Context relevance measures whether the retrieved passages or chunks are relevant for answering the given query, excluding extraneous details. Together, these three metrics offer insight into how effectively the retriever is able to surface the most relevant and focused source material to support a high-quality response.</p><p>Generator quality can be assessed through several key metrics. <a href=\"https://github.com/amazon-science/RAGChecker/blob/main/tutorial/ragchecker_tutorial_en.md#generator-metrics\" target=\"_blank\" rel=\"noopener\">Context utilization</a> examines how effectively the generator uses relevant information from the provided source material. <a href=\"https://github.com/amazon-science/RAGChecker/blob/main/tutorial/ragchecker_tutorial_en.md#generator-metrics\" target=\"_blank\" rel=\"noopener\">Noise sensitivity</a> gauges the generator’s propensity to include inaccurate details from the retrieved content. <a href=\"https://github.com/amazon-science/RAGChecker/blob/main/tutorial/ragchecker_tutorial_en.md#generator-metrics\" target=\"_blank\" rel=\"noopener\">Hallucination</a> measures the extent to which the generator produces incorrect claims not present in the source data. <a href=\"https://github.com/amazon-science/RAGChecker/blob/main/tutorial/ragchecker_tutorial_en.md#generator-metrics\" target=\"_blank\" rel=\"noopener\">Self-knowledge</a> reflects the proportion of accurate statements generated that can’t be found in the retrieved chunks. Finally, <a href=\"https://github.com/amazon-science/RAGChecker/blob/main/tutorial/ragchecker_tutorial_en.md#generator-metrics\" target=\"_blank\" rel=\"noopener\">faithfulness</a> evaluates how closely the generator’s output aligns with the information contained in the source material.</p><p>For measuring the overall generation quality, the key metrics include measuring the <a href=\"https://github.com/amazon-science/RAGChecker/blob/main/tutorial/ragchecker_tutorial_en.md#overall-metrics\" target=\"_blank\" rel=\"noopener\">precision</a>, <a href=\"https://github.com/amazon-science/RAGChecker/blob/main/tutorial/ragchecker_tutorial_en.md#overall-metrics\" target=\"_blank\" rel=\"noopener\">recall</a>, and <a href=\"https://aws.amazon.com/blogs/machine-learning/evaluate-the-reliability-of-retrieval-augmented-generation-applications-using-amazon-bedrock/\" target=\"_blank\" rel=\"noopener\">answer similarity</a>. Precision suggests the proportion of the correct claims in model’s response, whereas recall suggests the proportion of the ground truth claims covered by the model’s response. Answer similarity compares the meaning and content of a generated answer with a reference or ground truth answer. It evaluates how closely the generated answer matches the intended meaning of the ground truth answer.</p><p>Establishing a feedback loop with an evaluation framework against these quality metrics allows for continuous improvement, where the system can learn from user interactions and refine its performance over time. By optimizing these quality metrics, the RAG system can be designed to deliver reliable, cost-effective, and high-performing results for users.</p><p>Implementing responsible AI practices is crucial for maintaining ethical and safe deployment of RAG systems. This includes using guardrails to filter harmful content, deny certain topics, mask sensitive information, and ground responses in verified sources to reduce hallucinations.</p><p>Cost considers the compute resources and infrastructure required to run the system, and latency evaluates the response times experienced by end-users. To optimize cost and latency, implement <a href=\"https://aws.amazon.com/blogs/database/improve-speed-and-reduce-cost-for-generative-ai-workloads-with-a-persistent-semantic-cache-in-amazon-memorydb/\" target=\"_blank\" rel=\"noopener\">caching strategies</a> to reduce the need for expensive model inferences. Efficient <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/batch-inference.html\" target=\"_blank\" rel=\"noopener\">query batching</a>&nbsp;can also improve overall throughput and reduce resource usage. Balance performance and resource usage to find the ideal configuration that meets your application’s requirements.</p><p>Use tools like Amazon Bedrock Knowledge Bases so you can take advantage of fully managed support for the end-to-end RAG workflow. It supports many of the <a href=\"https://aws.amazon.com/about-aws/whats-new/2024/07/knowledge-bases-amazon-bedrock-advanced-rag-capabilities/\" target=\"_blank\" rel=\"noopener\">advanced RAG capabilities</a> we discussed earlier. By addressing these optimization techniques, you can transition your RAG-powered proof of concept to a robust, production-ready system that delivers high-quality, cost-effective, and low-latency responses to your users.</p><p>In addition to the server or compute layer, you will also need to consider an orchestration tool, testing environments, and a continuous integration and delivery (CI/CD) pipeline to streamline your application deployment. Having a feedback loop established based on the quality metrics along with a CI/CD pipeline is an important first step to creating self-healing architectures.</p><p>As your application grows, you will need to make sure your infrastructure can scale to meet the increasing demand. This can involve containerization with Docker or choosing serverless options, implementing load balancing, setting up auto scaling, and choosing between on-premises, cloud, or hybrid solutions. It also includes unique scaling requirements of your frontend application and backend generative AI workflow, as well as the use of content delivery networks (CDNs) and disaster recovery and backup strategies.</p><p>The following is a sample architecture for a secure and scalable RAG-based web application. This architecture uses Amazon ECS for hosting the service, <a href=\"https://aws.amazon.com/cloudfront/\" target=\"_blank\" rel=\"noopener\">Amazon CloudFront</a> as a CDN, <a href=\"https://aws.amazon.com/waf/\" target=\"_blank\" rel=\"noopener\">AWS WAF</a> as a firewall, and <a href=\"https://aws.amazon.com/memorydb/\" target=\"_blank\" rel=\"noopener\">Amazon MemoryDB</a> for providing a semantic cache.</p><p>By carefully considering these aspects of hosting and scaling your infrastructure, you can build a resilient and adaptable system to support your growing web application or service. Stay tuned for more detailed information on these topics in upcoming blog posts.</p><h2>Data privacy, security, and observability</h2><p>Maintaining data privacy and security is of utmost importance. This includes implementing security measures at each layer of your application, from encrypting data in transit to setting up robust authentication and authorization controls. It also involves focusing on compute and storage security, as well as network security. Compliance with relevant regulations and regular security audits are essential. Securing your generative AI system is another crucial aspect. By default, Amazon Bedrock Knowledge Bases encrypts the traffic using AWS managed <a href=\"http://aws.amazon.com/kms\" target=\"_blank\" rel=\"noopener\">AWS Key Management Service</a> (AWS KMS) keys. You can also choose customer managed KMS keys for more control over encryption keys. For more information on application security, refer to <a href=\"https://aws.amazon.com/blogs/machine-learning/safeguard-a-generative-ai-travel-agent-with-prompt-engineering-and-amazon-bedrock-guardrails/\" target=\"_blank\" rel=\"noopener\">Safeguard a generative AI travel agent with prompt engineering and Amazon Bedrock Guardrails</a>.</p><p>Comprehensive logging, monitoring, and maintenance are crucial to maintaining a healthy infrastructure. This includes setting up structured logging, centralized log management, real-time monitoring, and strategies for system updates and migrations.</p><p>By addressing these critical areas, you can build a secure and resilient infrastructure to support your growing web application or service. Stay tuned for more in-depth coverage of these topics in upcoming blog posts.</p><p>To successfully transition a RAG application from a proof of concept to a production-ready system, you should focus on optimizing the solution for reliability, cost-effectiveness, and high performance. Key areas to address include enhancing retriever and generator quality, balancing cost and latency, and establishing a robust and secure infrastructure.</p><p>By using purpose-built tools like Amazon Bedrock Knowledge Bases to streamline the end-to-end RAG workflow, organizations can successfully transition their RAG-powered proofs of concept into high-performing, cost-effective, secure production-ready solutions that deliver business value.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/07/vivek_phonetool.jpeg\" alt=\"\" width=\"100\" height=\"133\"> is a Solution Architect at Amazon Web Services, where he helps organizations architect and implement cutting-edge cloud solutions. With a deep passion for Generative AI, Machine Learning, and Serverless technologies, he specializes in helping customers harness these innovations to drive business transformation. He finds particular satisfaction in collaborating with customers to turn their ambitious technological visions into reality.</p><p>&nbsp;is a Sr. Enterprise Solutions Architect at AWS, experienced in Software Engineering, Enterprise Architecture, and AI/ML. He is deeply passionate about exploring the possibilities of generative AI. He collaborates with customers to help them build well-architected applications on the AWS platform, and is dedicated to solving technology challenges and assisting with their cloud journey.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/07/mani.jpeg\" alt=\"\" width=\"100\" height=\"133\">&nbsp;is a Tech Lead – Generative AI Specialists, author of the book Applied Machine Learning and High-Performance Computing on AWS, and a member of the Board of Directors for Women in Manufacturing Education Foundation Board. She leads machine learning projects in various domains such as computer vision, natural language processing, and generative AI. She speaks at internal and external conferences such AWS re:Invent, Women in Manufacturing West, YouTube webinars, and GHC 23. In her free time, she likes to go for long runs along the beach.</p>","contentLength":15255,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Game Bub – open-source FPGA retro emulation handheld","url":"https://eli.lipsitz.net/posts/introducing-gamebub/","date":1739380285,"author":"elipsitz","guid":444,"unread":true,"content":"<p>I’m excited to announce the project I’ve been working on for the last year and a half: , an open-source FPGA based retro emulation handheld, with support for Game Boy, Game Boy Color, and Game Boy Advance games.</p><p>Game Bub can play physical cartridges, as well as emulated cartridges using ROM files loaded from a microSD card. Game Bub also supports the <a href=\"https://en.wikipedia.org/wiki/Game_Link_Cable\">Game Link Cable</a> in both GB and GBA modes for multiplayer games. I designed the hardware with a number of bonus features, like video out (HDMI) via a custom dock, a rumble motor, real-time clock (for certain games). Additionally, the hardware is designed with extensibility in mind, allowing future software improvements to expand its capabilities.</p><p>Game Bub has a custom-designed 6 layer PCB featuring a Xilinx XC7A100T FPGA with integrated memory,  display, speakers, rechargable battery, GB/GBA cartridge slot, all packaged up in a custom 3D-printed enclosure.</p><p>Check out the instructions, code, and design files <a href=\"https://github.com/elipsitz/gamebub\">on GitHub</a>. Note that building a Game Bub unit is fairly complex. If you might be interested in buying a complete Game Bub kit, please <a href=\"https://forms.gle/m1FFUqpCde7x5u5AA\">fill out this form</a> to help me gauge interest.</p><p>I had a lot of fun implementing a Game Boy at the hardware level, and I started thinking about how far I could take the project. I was using a Pynq-Z2 development board, which was definitely the right way to get started, but it came with a lot of limitations.</p><p>I had to use an external monitor for audio/video, and an external gamepad for input, but a real Game Boy, of course, is a portable handheld. I also wanted to add Game Boy Advance support, but the memory architecture of the Pynq-Z2 had access latency that <a href=\"https://eli.lipsitz.net/posts/fpga-gameboy-emulator/#fixing-an-audio-bug-on-the-game-boy-color\">was just barely acceptable for the Game Boy</a>, and would have been completely unacceptable for the Game Boy Advance. I also wanted to make something less “hacky”: a real device that I could play and give to people, not just a bare PCB.</p><p>Furthermore, while there are open-source FPGA retrogaming projects (e.g. <a href=\"https://en.wikipedia.org/wiki/MiSTer\">MiSTer</a>), there doesn’t appear to be anything open-source that supports physical Game Boy and Game Boy Advance cartridges, let alone an open-source handheld device.</p><p>Thus, I somewhat naively set out to design what would become by far my most complex electrical engineering and hardware design project to date.</p><p>I set out some goals for the project:</p><ul><li>Build a standalone, rechargable battery-powered FPGA handheld</li><li>Minimize cost and complexity by using off-the-shelf components wherever possible</li><li>Capable of playing Game Boy, Game Boy Color, and Game Boy Advance games</li><li>Capable of using physical cartridges, or emulating cartridges (reading ROM files off of a microSD card)</li><li>Easy to use: graphical menu and in-game overlay</li><li>Integrated display and speakers, with headphone support</li><li>Integrated peripherals (rumble, real-time clock, accelerometer) for emulated cartridges</li><li>HDMI video output support for playing on a big screen</li><li>Decent looking design with good ergonomics</li><li>Expansion opportunities in the future: support for more systems, Wi-Fi, etc.</li></ul><p>And finally, since I was building this project for fun and learning, I wanted to be able to fully understand every single component of the system. I wanted to use my own emulator cores (e.g. not just port them from <a href=\"https://mister-devel.github.io/MkDocs_MiSTer/\">MiSTer</a>), do my own board design, and write my own drivers to interface with peripherals.</p><h3>A brief rant about FPGA retrogaming<a hidden=\"\" aria-hidden=\"true\" href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#a-brief-rant-about-fpga-retrogaming\">#</a></h3><p>There’s a lot of misleading marketing and hype out there around FPGA retrogaming. Some claim that FPGA retrogaming devices are not emulators (because they supposedly “act like [the system] at the gate level”), that they achieve “perfect accuracy”, or that they’re superior to software emulators.</p><p>In my opinion, this is blatantly wrong and actively harmful. FPGA retrogaming devices are emulators: they pretend to be something they’re not. And they’re only as accurate as they’re programmed to be, since they’re recreations. An FPGA can make certain aspects of accuracy easier to achieve, but it doesn’t guarantee it.</p><p>Software emulators can be extremely accurate. Furthermore, perfect accuracy (if it’s even possible) is by no means a requirement to play an entire system’s library of games. Some people claim that FPGA emulators are the only way to “preserve” a system, but I’d argue that software emulators are a significantly more accessible (no special hardware needed!) way to further this goal.</p><p>I believe that FPGA emulators have only one real advantage over software emulators: they can more easily interface with original hardware, such as physical cartridges or other consoles via link cables.</p><p>I did this project not because I think that FPGA emulators are inherently better than software emulators, but because I think they’re interesting and fun to build.</p><p>I began work on the project by doing some initial research and sketching out a high level design.</p><p>My previous FPGA emulator project used a Xilinx Zynq chip, which integrates FPGA fabric (“PL”) with a dual-core ARM processor running Linux (“PS”). I implemented the entire emulator on the FPGA, and used the Linux system to configure the FPGA, render the UI, and load ROM files from the filesystem.</p><p>I decided to keep this same division of responsibilities: using the FPGA to do the core emulation, with a separate processor to do support tasks. However, to make the overall design easier to reason about, I decided to to use an FPGA-only chip (without any hard processor cores), and an external microcontroller (MCU) to do the tasks that the ARM cores did before.</p><p>The FPGA would consume input, directly interface to the game cartridges (through level shifters to support both the 3.3 volt GBA and 5 volt Game Boy), and output audio and video to the speakers and display. The MCU would handle the UI, read ROM files from the microSD card, initialize peripherals (display, DAC, IMU), handle power sequencing, and load the FPGA configuration.</p><p>I wanted to have Wi-Fi and Bluetooth support: Wi-Fi for software updates, and the possibility of emulating the <a href=\"https://en.wikipedia.org/wiki/Game_Boy_Advance_Wireless_Adapter\">Game Boy Advance Wireless Adapter</a>, and Bluetooth to support wireless game controllers (when connected to an external display). To reduce complexity (and avoid the need for careful RF design), I looked only for complete Wi-Fi/Bluetooth modules with integrated antennas.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/early-block-diagram.svg\" alt=\"An early block diagram I sketched out\"><figcaption><p>An early block diagram I sketched out</p></figcaption></figure><p>I also drew out rough sketches of what the final device might look like: placement of buttons, screen, speakers, ports, cartridge slot, and battery. I settled on a vertical Game Boy Color-esque design (as opposed to a horizontal Game Boy Advance-style design), because I felt that this would maximize the space in the back of the device for full-size Game Boy Color cartridges and a battery.</p><p>After sketching out the goals and high level design, I started component selection: picking out each non-trivial component of the system, evaluating features and requirements (e.g. how they communicate, power consumption and voltages needed).</p><p>Since I intended to have this manufactured and assembled at JLCPCB, I strongly preferred parts that were available in their part library. One technique I even used for narrowing down part choices was finding the relevant category in their part search, and sorting by their stock count.</p><p>I initially planned to use an <a href=\"https://en.wikipedia.org/wiki/RP2040\">RP2040</a> microcontroller, with a separate ESP32-WROOM module to support Wi-Fi and Bluetooth.</p><p>The ESP32 supports both Bluetooth Classic and LE, which is essential for supporting a wide range of controllers, and the RP2040 has USB host support, to support wired controllers.</p><p>During the schematic design process, I ended up simplifying the RP2040 + ESP32 combination to just a single ESP32-S3 module for a few reasons:</p><ul><li>I started running out of GPIOs on the RP2040, and I was dedicating 4 of them (2 for UART, 1 for reset, 1 for booting in firmware download mode) to communication with the ESP32. Plus, the ESP32-S3 has more GPIOs overall.</li><li>I wanted to write the MCU firmware in Rust, and the ESP32-S3 had support for the Rust standard library (via ESP-IDF and <a href=\"https://github.com/esp-rs/esp-idf-hal\">esp-idf-hal</a>). This seemed like it would be easier to get the software up and running.</li><li>Fewer components means easier routing and assembly</li><li>The ESP32-S3 has an SDIO module (for interfacing with the microSD card), and FAT filesystem support (via ESP-IDF). It would be possible to do this with the RP2040 PIO, but having a proper peripheral and driver for this makes it a lot easier.</li><li>The ESP32-S3 is more powerful than the RP2040, and would probably be able to render a smoother UI.</li></ul><p>However, the ESP32-S3 has one main disadvantage compared to the original ESP32: it doesn’t have Bluetooth Classic support, only LE. This would greatly limit the range of supported wireless controllers, but I believed the compromise was worth it. I also decided to scrap USB host support, because supporting USB-C dual role (switchable device or host) would have added a lot of additional complexity.</p><p>If the RP2350 microcontroller (the successor to the RP2040) had been available when I started this project, I may very well have chosen it, since it has even more power, PIO blocks, memory, and GPIO pins. I might have paired it with an RM2 radio module for Wi-Fi and Bluetooth.</p><p>I wanted a display that would support integer scaling for the Game Boy Advance, which has a 240x160 pixel screen. I was also looking for a screen roughly on the order of 3.0-3.5 inches wide (diagonal), to be comfortable to hold in the hand.</p><p>I found the ER-TFT035IPS-6 LCD module from <a href=\"https://www.buydisplay.com/\">EastRising</a>, with a 3.5 inch display, and a 320x480 pixel resolution. This allows for a 2x integer scale for the Game Boy Advance (and a 2x scale plus centering for the 160x144 Game Boy display). This checked off almost all of the boxes: integer scaling, a good size, available at a reasonable price, pretty good documentation (for the ILI9488 LCD controller).</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/er-tft035ips-6.jpg\" alt=\"ER-TFT035IPS-6 LCD module\" width=\"1000\" height=\"550\"><figcaption><p>ER-TFT035IPS-6 LCD module</p></figcaption></figure><p>The main issue, which actually ended up being fairly annoying, is that it’s a 320x480 display, not 480x320. Meaning, it’s oriented in portrait mode, not landscape. I rotated the device 90 degrees to fit in a landscape orientation, but this created two issues:</p><ul><li>In landscape orientation, the bottom of the display (containing the LCD driver chip and the flex cable) faces to the left or the right, which means that larger bazels are required on the left and right of the display to center the “active area” of the LCD within the handheld.</li><li>In landscape orientation, the display refreshes from left to right, not top to bottom.</li></ul><p>The problem with refreshing from left to right is that the Game Boy and Game Boy Advance (and almost every other system) refresh from top to bottom. This means that the display can’t be refreshed perfectly in sync with the game (zero buffering), and single buffering leads to unsightly diagonal tearing. Instead, I had to use triple buffering, where the game is writing to one framebuffer, the LCD driver is reading from another buffer, and there’s one spare swap buffer. This increases the amount of memory used – and because it needed to be accessed by both the game and LCD driver simultaneously (dual port), it needed to be stored in internal block RAM in the FPGA, a scarce resource.</p><p>So, even though the Game Boy emulator uses &lt;10% of the total logic resources of the FPGA, and the Game Boy Advance uses around 30%, I had to use a large (more expensive, and power hungry) FPGA so that I had enough block RAM.</p><p>I also stuck a standard size HDMI port into the design, connected directly to the FPGA. HDMI has a few additional, non-video signals that need level shifting from 5V to 3.3V (I opted for discrete transistors), and it requires the source (me!) to supply a small amount of power.</p><p>I had never previously designed anything that used a lithium ion battery, so I had a fair amount of learning to do. <a href=\"https://learn.adafruit.com/li-ion-and-lipoly-batteries/overview\">Adafruit</a> was a helpful resource. I needed a way to charge the battery from USB power, and a way to measure how charged it is.</p><p>Lithium ion batteries can be dangerous if misused. Safely charging a battery is non-trivial, and requires a feedback loop and adjustable voltage sources. A dedicated IC seemed like the best way to do this. A lot of hobbyists use the ultra-cheap TP4056 1A battery charger, but I’d read about a lot of issues it has around safely charging the battery while using it. I decided instead to opt for the <a href=\"https://www.ti.com/lit/ds/symlink/bq24073.pdf\">TI BQ2407x</a> series of battery charger ICs. They seem to be widely used in commercial products, came with a comprehensive datasheet, and had a few critical features: programmable input and charge current limits, safety timers, and “power path management” for safely charging the battery while the device is on.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/lipo-discharge-curve.png\" alt=\"Typical discharge curve for a 3.7V lipo battery (source: Adafruit)\" width=\"579\" height=\"402\"><figcaption><p>Typical discharge curve for a 3.7V lipo battery (source: <a href=\"https://learn.adafruit.com/assets/979\">Adafruit</a>)</p></figcaption></figure><p>There are a few ways to measure the charge level of the battery, which generally relies on the fact that a lithium ion battery’s voltage depends on its charge level. A fully charged battery is about 4.2 volts, a battery with between 80% and 20% charge is about 3.7 volts, and below that a drained battery falls off pretty quickly to under 3.0 volts. If all you want is a coarse estimate of the battery level, you can use an ADC to read the voltage and estimate whether the battery is fully charged or nearly discharged. However, since the voltage curve is nearly flat between 20% and 80% charge (and is also dependent on the load), this can’t give the fine-grained battery percentage that we’re used to on phones and laptops. Instead, I opted for a discrete fuel gauge IC, the <a href=\"https://www.analog.com/en/products/max17048.html\">MAX17048</a>. It’s simple to integrate and inexpensive.</p><p>I decided to use a push button for the main power switch, because I needed to be able to do a graceful shutdown, where the microcontroller could save state (e.g. the current save file for an emulated cartridge) before it actually powered off.</p><p>I briefly considered using an ultra-low power, always on microcontroller to act as a custom <a href=\"https://en.wikipedia.org/wiki/Power_management_integrated_circuit\">PMIC</a> to provide power switch functionality (and perhaps avoid the need for a separate real-time clock IC, and even a battery gauge). While this would have been flexible and really cool, I figured it wasn’t worth the additional complexity.</p><p>The main system power ranges from about 3.4 V when the battery is discharged, to 4.2 V when the battery is fully charged, up to 5.0 V when the device is plugged in with USB.</p><p>The ESP32-S3 module required 3.3 V, and most of the other ICs in the system did too. The main exception is the FPGA, which requires a 1.0 V core power rail, a 1.8 V “auxiliary” power rail, and a 3.3 V power rail for I/O. Moreover, according to the <a href=\"https://docs.amd.com/v/u/en-US/ds181_Artix_7_Data_Sheet\">Xilinx Artix-7 datasheet (DS181)</a>, these power rails need to be powered on in a particular sequence: for my use, this means 1.0 V, then 1.8 V, then 3.3 V. Additionally, I needed a 5.0 V supply to interface with Game Boy / Game Boy Color cartridges.</p><p>There are multi-rail power regulators available, and a lot of FPGA development boards use them. However, they all seemed to be expensive and difficult to purchase in low quantities. Instead, I opted for separate power regulators for each rail. I used <a href=\"https://en.wikipedia.org/wiki/Buck_converter\">buck converters</a> instead of <a href=\"https://en.wikipedia.org/wiki/Linear_regulator\">linear regulators</a> to maximize power efficiency.</p><p>I used the <a href=\"https://www.ti.com/product/TLV62585\">TLV62585</a> converter for the 3.3 V, 1.8 V, and 1.0 V rails. This is a simple, performant buck converter with a “power good” output, which is useful for power sequencing: you can connect the  output of one regulator to the  pin of the next regulator, to power on the rails in the desired order.</p><p>For the 5.0 V rail, I used the <a href=\"https://www.ti.com/product/TPS61022\">TPS61022</a> boost converter. This converter is way overkill for the 5.0 V rail (which might use 75mA ), but it was readily available, and conveniently compatible with the same 1µH inductor as the buck converters.</p><p>According to the FPGA datasheet, the XC7A100T consumes more than 100mW of static power. That is, it consumes that as long as it’s connected to power, even if it’s doing absolutely nothing. I figured I might want to support a low power sleep mode, so I decided to split the FPGA into a separate power domain with an explicit power enable signal from the MCU. I also used an <a href=\"https://www.diodes.com/datasheet/download/AP2191.pdf\">AP2191W</a> load switch for the FPGA’s 3.3 V rail to be able to keep the 1.0 V → 1.8 V → 3.3 V sequencing.</p><p>I wanted the device to have both speakers and a 3.5mm headphone jack. Ultimately, the FPGA generates an <a href=\"https://en.wikipedia.org/wiki/I%C2%B2S\">I2S</a> digital audio signal, and I needed a <a href=\"https://en.wikipedia.org/wiki/Digital-to-analog_converter\">DAC</a> to convert it to an analog audio signal, and then an amplifier to drive the speakers (or headphones). I wanted digital volume control (to support volume buttons, rather than a volume knob or slider), and I needed some way to switch the audio output between speakers and the headphones, depending on whether or not headphones are plugged in. With no real audio experience, this seemed like a daunting task.</p><p>While searching for multiple separate components, I stumbled upon the <a href=\"https://www.ti.com/product/TLV320DAC3101\">TLV320DAC3101</a>. It combines a stereo DAC with a speaker amplifier and a headphone driver. Additionally, it supports digital volume control, and headphone detection. I think this chip is a good example of how thoughtful component selection can simplify the overall design. Looking through the datasheet, it required a 1.8 V core voltage (unlike essentially every other component other than the FPGA) and a fair amount of configuration registers to set over I2C, but it had all of the features I needed.</p><p>I was originally planning to have just a single (mono) speaker, but I figured if I had a stereo DAC, I might as well put two in there. I chose the <a href=\"https://www.sameskydevices.com/product/audio/speakers/miniature-(10-mm~40-mm)/ces-20134-088pmb\">CES-20134-088PMB</a>, an enclosed microspeaker with a JST-SH connector. Having an enclosed speaker simplified audio design, because as it turns out, you can’t just stick a speaker to a board and expect it to sound okay (Same Sky, the manufacturer of that speaker, <a href=\"https://www.sameskydevices.com/blog/how-to-design-a-micro-speaker-enclosure\">has a blog post explaining some of the nuances</a>).</p><p>I prefer the feeling of clicky, tactile buttons (such as those found in the GBA SP, Nintendo DS (original), Nintendo 3DS, Switch) compared to “mushy” membrane buttons (such as those found in the Game Boy Color, original GBA, and Nintendo DS Lite). I learned that the tactile switches used in the GBA SP are a <a href=\"https://tech.alpsalpine.com/e/products/detail/SKRRAAE010/\">widely available off-the-shelf part from Alps Alpine</a>. I used similar, but smaller buttons for the Start/Select/Home buttons, and a right-angle button from the same manufacturer for side volume and power buttons.</p><p>Although I only had plans to support Game Boy and Game Boy Advance (requiring a D-pad, A and B buttons, L and R shoulder buttons, and Start/Select), I opted to add two more “X” and “Y” face buttons to leave the possibility open of supporting more systems in the future.</p><p>The L and R buttons posed an additional challenge – I found numerous right-angle tactile buttons (to be soldered onto the back, facing towards the top). However, none of them seemed to have the actuator (the part of the button you make contact with) far enough away from the PCB to be easily pressed. At first, I thought about making a separate shoulder button board to move them at the correct distance, but then I started looking at what existing devices do for inspiration. The Game Boy Advance SP actually uses a more complex mechanism for the shoulder buttons: rather than a simple actuator like the face buttons, there’s a hinge with a <a href=\"https://en.wikipedia.org/wiki/Torsion_spring\">torsion spring</a> that hits the actuator at an angle. This is actually part of what makes the shoulder buttons pleasant to press: you don’t need to hit them from exactly the right direction, because they pivot. I ended up just going with a standard right-angle tactile button, opting to solve the problem with the mechanism in the enclosure.</p><figure><figcaption><p>GBA SP shoulder button mechanism</p></figcaption></figure><p>One of my main goals was to allow ROM files to be loaded from a microSD card, rather than only being able to be played from a physical cartridge. To do this, I’d need dedicated RAM for the FPGA to hold the game. Game Boy Advance games, typically, are a maximum of 32 MB. They don’t make SRAMs that large (and if they did, they’d be very expensive). Instead, I needed to use <a href=\"https://en.wikipedia.org/wiki/Dynamic_random-access_memory\">DRAM</a>.</p><p>Asynchronous SRAM is very simple: supply a read address to the address pins, and some amount of nanoseconds later, the data you’re reading appears on the data pins. DRAM is more complex: the simplest kind is “single data rate synchronous DRAM” (SDR SDRAM, or just <a href=\"https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory\">SDRAM</a>, distinguishing it from the significantly more complex DDR SDRAM). However, even SDRAM is non-trivial to use. DRAM is organized into banks, rows, and columns, and accessing DRAM requires sending commands to “activate” (open) a row before reading out “columns”, and then “precharging” (closing) a row. Handling all of this requires a DRAM controller (see this <a href=\"https://www.fpga4fun.com/SDRAM2.html\">simple description of the state machine</a> required). This isn’t terribly complex, but I was signing myself up for more work.</p><p>Alternatively, I could have chosen a PSRAM chip (essentially DRAM with an integrated controller to make it have a more SRAM-like interface). However, I couldn’t find a PSRAM part that I was happy with (cost, availability, interface), and so I ended up going with the inexpensive W9825G6KH 32MB 16-bit SDRAM.</p><p>I also decided to stick a 512 KiB SRAM chip in the design in case I ended up needing some more simple memory later, like for emulating the SRAM used for Game Boy cartridge save files. Despite being 1/64 the capacity, this chip was about 3x the cost of the SDRAM. This ended up being a wise decision, since a lot of my internal FPGA block ram was eaten up by the triple buffer for the display (see above).</p><h3>Cartridge and Link Ports<a hidden=\"\" aria-hidden=\"true\" href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#cartridge-and-link-ports\">#</a></h3><p>The cartridge slot and link ports are no-name parts from AliExpress, easily available for cheap. These seem to mostly be GBA SP compatible, and are often used as repair parts.</p><p>The Game Boy Advance can play both Game Boy [Color] and Game Boy Advance games. These run at different voltages and use different protocols, so the device needed some way of determining which type of cartridge is inserted.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/gb-vs-gba-cartridge-bottom.jpg\" alt=\"GBA cartridge (top) vs GB cartridge (bottom)\" width=\"1440\" height=\"519\"><figcaption><p>GBA cartridge (top) vs GB cartridge (bottom)</p></figcaption></figure><p>The cartridges are physically different at the bottom: GBA cartridges (the top cartridge in the image) have a notch on either side. The GBA has a  that senses the absence of a notch on an inserted cartridge and switches the device into Game Boy Color mode.</p><p>I measured the size and position of this notch, and searched Digi-Key and Mouser for switches that met these constraints. In the end, I was only able to find a single switch that would work.</p><h3>Miscellaneous peripherals<a hidden=\"\" aria-hidden=\"true\" href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#miscellaneous-peripherals\">#</a></h3><p>I used the surprisingly cheap <a href=\"https://www.st.com/en/mems-and-sensors/lsm6ds3tr-c.html\">LSM6DS3TR-C</a> IMU from ST. This tiny IMU has a 3-axis accelerometer and gyroscope, more than sufficient for emulating the few GB/GBA cartridges that have motion controls.</p><p>For keeping track of time even when the device was off, I used the <a href=\"https://www.nxp.com/part/PCF8563T\">PCF8563T</a> real-time clock chip. I chose this because it was 1) I2C (no additional pins required), 2) cheap, and 3) readily available from JLCPCB. Interestingly, all of the real-time clock chips I found count in seconds/minutes/hours/days/months/years. This makes sense for a really simple device with minimal computational power. However, it’s annoying for my purposes, since all I really want is a timestamp I can pass to some other datetime library, and converting between the calendar time and a unix timestamp is non-trivial due to how the chips incompletely handle leap years.</p><p>I picked up a few cheap coin vibration motors to use for vibration support (for the rare cartridge that had a built-in vibration motor).</p><p>I also used a <a href=\"https://www.ti.com/product/TCA9535\">TCA9535</a> I2C I/O expander to connect the face buttons to the MCU. I ran out of pins, and while I  have used the FPGA as a sort of I/O expander, I figured I’d make it simpler for myself (and allow the buttons to be used even if the FPGA was powered off) by letting the MCU read them itself.</p><p>For this project, as with my previous ones, I used <a href=\"https://www.kicad.org/\">KiCad</a> to create my schematic and do PCB layout. I really can’t recommend KiCad enough: it’s a great program, intuitive to use, and it’s free and open source.</p><p>This was a very ambitious project for my level of electrical engineering experience, and creating the schematic took a couple of weeks. I spent a lot of time designing the circuit for each component, because I was afraid I’d do something wrong and end up with a stack of useless boards without the skills needed to debug them. A lot of the component selection actually happened in parallel with schematic design, as I found new requirements or problems and had to change components.</p><p>I gained a lot of experience reading component datasheets. It’s a really valuable skill, both for component selection and for creating designs that use the components. Nearly every datasheet has a “typical application” section, where the manufacturer shows how the component would fit into a circuit. At minimum, this has power supply information (e.g. these voltages to these pins with these decoupling capacitors). For more complex components like the DAC, it also has information about power sequencing, different ways the device could be connected to the rest of the system, a register list, that sort of thing. Some components also included PCB layout recommendations. This information was all really helpful, and gave me a good deal of confidence that my board would work as long as I read through the datasheet and followed the manufacturer’s recommendations.</p><p>Then I got to the FPGA. Nearly every component has a single datasheet. Some of them have an additional application note or two. Particularly complex chips (like the ESP32-S3 microcontroller) have a separate datasheet, reference manual, and hardware design guide. The Xilinx Series 7 FPGAs have . Overviews, packaging and pinout, configuration guides, BGA design rules, power specifications, clocking resources, I/O specifications, PCB layout guides, design checklists… even a 4MB Excel spreadsheet for estimating power consumption! And believe me, Xilinx didn’t just write documentation for fun: there’s so much documentation because the chip  this much documentation.</p><p>Designing with the FPGA was overwhelming, and  beyond my experience level. At several points I genuinely considered dropping the project altogether. Fortunately, I persevered, and gradually internalized a lot of the information. I also read through the schematics of any open-source Artix-7 development board I could get my hands on. Seeing what other people were doing gave me more confidence that I was doing the right thing.</p><p>Eventually, after I placed all of the components, connected them, ensured all of the nets were labeled, and ran KiCad’s electrical rules checker (ERC) to find obvious mistakes, I moved on to layout.</p><p>I did PCB layout at the same time as some of the initial enclosure CAD. The mechanics of how everything fit together influenced the placement of the display connector, cartridge slot, buttons, speakers, and connectors. After I came up with a plausible enclosure design, I placed some of the first key components onto the PCB and locked them into place while I did the rest of the routing.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/early-shell-design.png\" alt=\"Rough enclosure design to help with board layout\" width=\"2000\" height=\"1298\"><figcaption><p>Rough enclosure design to help with board layout</p></figcaption></figure><p>I first focused on components that would be hardest to route. Primarily, the FPGA: the package I was using (CSG324) is a <a href=\"https://en.wikipedia.org/wiki/Ball_grid_array\">BGA</a>, 18x18 with 0.8mm pitch between pins. “Fanning out” all of the I/O signals requires careful routing, and at 0.8mm pitch, it’s difficult to do this routing with cheap PCB manufacturing techniques. I ended up being able to do this routing with a 6-layer PCB (three signal, two ground, one power), with 0.1mm track width and spacing, and 0.4/0.25mm vias. Fortunately, this is all within the realm of JLCPCB’s capabilities.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/bga-fanout.png\" alt=\"BGA fanout with thin traces and small vias\" width=\"1442\" height=\"1102\"><figcaption><p>BGA fanout with thin traces and small vias</p></figcaption></figure><p>As I routed signals out from the FPGA to other parts, I assigned those signals to the FPGA pins. Similarly, with the MCU, I assigned signals to pins in a way that made routing easier. Certain signals had restrictions (e.g. on the FPGA, the main 50 MHz clock signal can only go into certain pins, or the configuration bitstream can only go to certain pins, or certain pins are differential pairs for HDMI output), but overall, I had a lot of flexibility with pin assignment.</p><p>KiCad has a feature where it automatically backs up your project as you work on it. I changed the settings to save every 5 minutes and not delete old backups, which allowed me to generate this timelapse of my layout process:</p><figure><figcaption><p>Revision 1 board layout timelapse</p></figcaption></figure><p>Once I finished placing and routing all of the components, I ran the design rules checker (DRC) and fixed issues. I hesitated for a while before sending the PCB for manufacturing. I re-read the schematics, reviewed the layout, and eventually felt confident enough that I was done. I submitted the order to JLCPCB, and after a few questions by their engineers about component placement, they started manufacturing it.</p><h2>Board testing and bring-up<a hidden=\"\" aria-hidden=\"true\" href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#board-testing-and-bring-up\">#</a></h2><p>After two weeks or so, I received the assembled boards in the mail:</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/rev1-initial-boards.jpg\" alt=\"An assembled board and an unassembled board\" width=\"1440\" height=\"1026\"><figcaption><p>An assembled board and an unassembled board</p></figcaption></figure><p>First, I probed the power rail test points with a multimeter to check for shorts. Then, I plugged the boards in for the first time, and pressed the power button. To my delight, the green LED turned on, indicating that the power button circuit, power path, and 3.3V regulator worked. The microcontroller USB enumerated, and I could see that it logged some errors (since I hadn’t flashed anything to it yet).</p><p>I intended to write the MCU firmware in Rust, but I did initial board testing and bring-up with <a href=\"https://micropython.org/\">MicroPython</a>. This would let me interactively type in Python and write basic scripts to communicate with the peripherals on the board and make sure I had connected everything correctly. I didn’t have to worry about writing efficient or well-organized code, and could just focus on functionality.</p><p>I flashed the MicroPython firmware image, and wrote a couple lines of Python to blink the LED. I powered on the FPGA power domain, and checked that the , , and  rails had the correct voltage.</p><p>Next, I wrote a simple bitstream for the FPGA that read the state of the buttons and produced a pattern on the shared signals between the FPGA and the MCU. I wrote simple Python code to configure the FPGA, loaded up the bitstream, and polled the signals from the FPGA. Pressing buttons changed the state, and confirmed that the FPGA was properly powered, and configurable from the MCU.</p><p>After I confirmed the FPGA worked, I started writing a simple display driver to initialize the LCD and push some pixels from the MCU over SPI. The initialization sequence uses a number of LCD-specific parameters (voltages, gamma correction, etc.), that I learned from the LCD manufacturer’s example code.</p><figure><figcaption><p>(Slowly) pushing pixels to the LCD</p></figcaption></figure><p>The LCD module’s controller, an ILI9488, has a few quirks: despite claiming that it supports 16-bit colors over SPI, it actually only supports 18-bit colors. This unfortunately meant that the MCU’s LCD driver would be more inefficient than I expected, since it has to expand 16-bit colors to 18-bit before sending them over the bus. This didn’t end up being a huge issue, however, because the FPGA is the one driving the display most of the time.</p><p>Another quirk (hardware bug?) is that the ILI9488 doesn’t stop driving its SPI output line, even when its chip-select signal is inactive. This means that the chip will interfere with any other communication on the bus… including the FPGA, which sits on the same bus. I never actually needed to read any data back from the LCD (and even if I did, it supports <a href=\"https://en.wikipedia.org/wiki/Serial_Peripheral_Interface#Three-wire\">three-wire SPI</a>), so I just cut the trace between the LCD’s SDO line and the SPI bus.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/lcd-debugging.jpg\" alt=\"Debugging the LCD test code\" width=\"1440\" height=\"954\"><figcaption><p>Debugging the LCD test code</p></figcaption></figure><h3>Trouble with power domains<a hidden=\"\" aria-hidden=\"true\" href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#trouble-with-power-domains\">#</a></h3><p>I started trying to communicate with the I2C peripherals (I/O expander, RTC, etc.), and found that nothing was responding. A bit of probing with a logic analyzer revealed that the SCL/SDA lines were being held low, and that powering on the FPGA power domain let the lines be pulled high and communication to happen.</p><p>I deduced that this was due to the DAC, which had its IOVDD powered by , which likely caused its protection diodes to pull the IO lines (SCL and SDA) low:</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/dac-iovdd-issue.png\" alt=\"The problematic portion of the schematic\" width=\"1862\" height=\"656\"><figcaption><p>The problematic portion of the schematic</p></figcaption></figure><p>I tested out this theory by cutting the PCB traces connecting the DAC’s IOVDD and  with a knife. After this, I2C worked even with the FPGA power disabled. Then, I tested a possible fix by adding a wire to power the DAC’s IOVDD from the  rail. I confirmed that I could still talk to the other I2C devices, and once enabling FPGA power, that I could talk to the DAC too.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/dac-iovdd-rework.jpg\" alt=\"DAC IOVDD rework\" width=\"1440\" height=\"1126\"></figure><p>While bringing up the LCD, I saw that the FPGA was also pulling down the shared SPI bus lines while it was unpowered. Not enough to prevent communication with the LCD, but it still wasn’t great. Between this and the DAC issue, I learned an important EE lesson: be careful when connecting components in different power domains together. A tristate buffer, such as the <a href=\"https://www.ti.com/product/SN74LVC1G125\">74LVC1G125</a>, could have helped here to isolate the buses.</p><p>Once I2C was working, I wrote some basic driver code for the fuel gauge, real-time clock, IMU, and I/O expander, just to check that they all worked correctly. I also checked that the MCU could read from and write to the attached microSD card.</p><h4>Audio and video output from the FPGA<a hidden=\"\" aria-hidden=\"true\" href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#audio-and-video-output-from-the-fpga\">#</a></h4><p>Next, I updated my testing FPGA bitstream to output a test pattern over the <a href=\"https://hackaday.com/2024/01/25/displays-we-love-hacking-parallel-rgb/\">LCD parallel interface (“DPI”)</a>, and a test tone to the DAC over the I2S interface. Then, I began poking on the MCU side to configure the LCD controller and DAC appropriately.</p><p>With some amount of trial and error, I convinced the LCD to accept input from the FPGA. Most of the trial and error revolved around the rotation of the LCD module. Soon after, I configured the DAC properly, and it played the test tone from the FPGA over the speakers and the headphones.</p><figure><figcaption><p>WIP video output from the FPGA</p></figcaption></figure><p>At this point, much of the board was working, so I soldered on the rest of the components (cartridge slot, cartridge switch, link port, shoulder buttons).</p><p>With the cartridge slot in place, I had everything I needed to port over the Game Boy emulator from my last project. I did a quick-and-dirty port of the emulator, with some hacking around to connect the core to the audio, video, and the physical cartridge. I was able to play the first Game Boy game on the device far sooner than I was expecting:</p><figure><figcaption><p>Pokemon Silver running from cartridge</p></figcaption></figure><p>I spent the next month or so implementing things on the FPGA. I started on the SPI receiver implementation, so that the MCU and FPGA could communicate.</p><p>It was relatively straightforward to write <a href=\"https://github.com/elipsitz/gamebub/blob/handheld/fpga/src/main/scala/platform/handheld/SpiReceiver.scala\">the initial version</a>, which 4x oversampled the SPI signals from the main system clock. For the Game Boy, that was ~8 MHz, for a maximum SPI speed of 2 MHz. The MicroPython ESP32-S3 SPI implementation supported only single SPI, so that allowed for a maximum transfer speed of 256 KB/s. This was sufficient to do most of my initial testing, but I later <a href=\"https://github.com/elipsitz/gamebub/blob/handheld/fpga/src/main/scala/platform/handheld/SpiReceiverFifo.scala\">wrote an improved SPI receiver</a> to run with an internal 200 MHz clock (from a PLL that turned on and off with the chip-select signal to save power), communicating with the rest of the system via a pair of FIFOs. This added a lot of complexity and edge cases, but it greatly improved performance, allowing the bus to run at 40 MHz.</p><p>I wrote the SPI interface to the FPGA with memory-like semantics: each SPI transfer starts with a command byte, encoding whether it’s a read or write transfer, the size of each word in the transfer (8, 16, or 32 bits), and whether the “target address” should autoincrement as the transfer progresses. Then, a 32-bit address, followed by reading or writing the data. Each thing that the MCU might want to access (control registers, blocks of memory) are mapped into the 32-bit address space.</p><p>As with my previous FPGA project, I wrote almost all of the FPGA code in <a href=\"https://www.chisel-lang.org/\">Chisel</a>, a Scala-based HDL. The remaining bits were the top-level Verilog. Chisel made it really simple to parametrize, compose, and test the various modules that I wrote.</p><p>Once I had the SPI receiver working, I wrote controllers for the on-board SRAM and SDRAM. The SRAM was relatively simple (although I still got it slightly wrong at first). The SDRAM was a bit tricky, and even as I write this I’m not quite satisfied with its performance, and intend to rewrite it in the future.</p><p>I exposed the SRAM and SDRAM interfaces to the MCU via SPI, which allowed me to read and write to these pieces of memory from the MCU. I used this a lot for testing: writing patterns into memory and reading them back to ensure that read and write both worked.</p><p>Side note: SDRAM has to be continuously refreshed, otherwise the stored data decays over time. It depends on the chip, but typically each row has to be read and written back (or auto-refreshed, which does the same thing) at least once every 64 milliseconds to avoid losing state. What I found interesting, however, is that the data can actually persist for quite a bit longer. I discovered that when I was reconfiguring the FPGA between tests, most of the test data that I had previously written would still stick around even without being refreshed. In the first few seconds some bits would start flipping, and over the course of a few minutes, most of what was written was completely unintelligible.</p><p>With the SDRAM controller and SPI receiver written, I was then able to implement the “emulated cartridge” part of the Game Boy emulator, where the MCU reads a ROM file off of the microSD card and sends it to the FPGA to be stored in SDRAM. Then, the FPGA “emulates” a cartridge (rather than interfacing with a real physical cartridge). After a few stupid mistakes, I was able to run test ROMs and homebrew. As an added bonus, since I was using my own SDRAM controller directly, I didn’t have any of <a href=\"https://eli.lipsitz.net/posts/fpga-gameboy-emulator/#fixing-an-audio-bug-on-the-game-boy-color\">the performance issues I’d faced before</a> when accessing the ROM stored in memory.</p><h2>Writing the microcontroller firmware in Rust<a hidden=\"\" aria-hidden=\"true\" href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#writing-the-microcontroller-firmware-in-rust\">#</a></h2><p>By this point I had tested, in some form or another, all of the different components of the system. I’m really surprised that everything worked in my first board revision – even the rework I did early on wasn’t actually required for functionality.</p><p>I decided now was a good time to start building an interactive GUI. Up until this point, I had just been running commands in the MicroPython REPL. However, I didn’t want to build a whole UI in Python just to throw it away later, so I also started working on the “production” Rust firmware.</p><p>In the last few years, a lot of progress has been made towards making Rust on the ESP32 chips work well, even on the chips that use the Xtensa ISA. I followed the <a href=\"https://docs.esp-rs.org/book/\">Rust on ESP Book</a> and quickly had an environment set up. I opted for the <a href=\"https://docs.esp-rs.org/book/overview/using-the-standard-library.html\">“Rust with the Standard Library”</a> approach, so that I could benefit from <a href=\"https://idf.espressif.com/\">ESP-IDF</a>, especially the built-in support for USB and SD cards with the FAT filesystem.</p><p>I started porting over the drivers I had written in Python. I found embedded Rust to be a bit verbose in some cases, but overall pleasant to use and worth the (little) trouble.</p><p>I starting writing my own minimal GUI framework for basic menus. I poked around with the <a href=\"https://docs.rs/embedded-graphics/latest/embedded_graphics/\"></a> library, but soon found that the typical patterns I was expecting to use weren’t a great fit for Rust. I also started planning out different screens and realized that I probably actually wanted to use a more comprehensive UI framework.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/early-gui-main-menu.png\" alt=\"Early main menu screen\" width=\"480\" height=\"320\"></figure><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/early-gui-rom-select.png\" alt=\"Early rom select screen\" width=\"480\" height=\"320\"></figure><p>Ultimately, I settled on <a href=\"https://github.com/slint-ui/slint\">Slint</a>, a Rust-native declarative GUI framework with excellent support for embedded devices. Slint has a custom DSL to describe the UI and composable components. After a bit of practice I found myself to be really productive with it. I enjoyed using Slint, and I’d use it again in the future. The authors are responsive on GitHub, and the project has steadily improved over the year or so that I’ve been using it.</p><p>There were a few rough edges for my use case, however:</p><ul><li>The built-in GUI elements and examples were all heavily oriented around mouse or touchscreen navigation. Game Bub only has buttons for navigation, however, so I had to make my own widgets (buttons, lists) that worked with key navigation. This involved a few hacks, because Slint’s focus handling was a little bit simplistic.</li><li>The built-in GUI styles looked (in my opinion) bad on a low DPI screen. Text was excessively anti-aliased and hard to read at small sizes. This was also fixed by building my own widgets.</li><li>Slint doesn’t have a great story around supporting different “screens” – I had to build some of my own infrastructure to be able to support navigation between the main menu, games, rom select, settings, etc.</li></ul><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/screenshot-main-menu.png\" alt=\"Main menu\" width=\"480\" height=\"320\"></figure><p>The GUI is rendered on the MCU, and then the rendered framebuffer is sent over to the FPGA. Slint supports partial rendering, where only the parts of the screen that have changed are updated, which improved performance. The FPGA maintains a copy of the framebuffer and ultimately is responsible for driving the display. This has a few advantages over driving the display directly from the MCU:</p><ul><li>Sending a framebuffer at 40 MHz QSPI to the FPGA is 16x faster than sending it to the LCD controller at 10 MHz (the fastest speed supported by the ILI9488)</li><li>The UI is rendered at 240x160 to improve performance and maintain the GBA aesthetic, but the LCD controller doesn’t have a scaler, so the MCU would have to send 4x the pixels. The FPGA can easily scale the UI framebuffer itself.</li><li>The FPGA can composite the emulator output with a semi-transparent “overlay” to support an in-game menu, volume / brightness bars, battery notifications, etc.</li><li>An external display (e.g. monitor or TV) can be driven by the FPGA via HDMI</li></ul><p>I spent some time making a variety of firmware improvements, mostly polish and quality-of-life. I added a settings screen to set the date and time, whether to use Game Boy (DMG) or Game Boy Color (CGB) mode when playing Game Boy games, etc.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/screenshot-settings-early.png\" alt=\"Settings screen\" width=\"480\" height=\"320\"></figure><p>Then I improved the ROM select file browser, and added a battery level indicator.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/screenshot-load-rom.png\" alt=\"Rom select screen\" width=\"480\" height=\"320\"></figure><p>I also got sick of having to take the microSD card out of the device and connect it to my computer through a series of adapters (microSD to SD to USB-A to USB-C), so I implemented a basic utility to expose the microSD card as a USB Mass Storage Device, using <a href=\"https://github.com/hathach/tinyusb\">TinyUSB</a> and the ESP32-S3’s USB-OTG capabilities.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/screenshot-usb-storage.png\" alt=\"USB Mass Storage screen\" width=\"480\" height=\"320\"></figure><p>It was a little bit more difficult than I expected, because USB Mass Storage requires the device to provide raw block access. This means that the filesystem has to be unmounted by the device, otherwise the device and host could conflict and corrupt the filesystem. The ESP32-S3 also only supports USB Full Speed, for a practical maximum transfer speed of ~600KB/sec. It’s really useful for transferring save files or updating the FPGA bitstreams, but less useful for transferring a large number of ROM files.</p><p>Later, I implemented <a href=\"https://gbdev.io/pandocs/MBC7.html\">MBC7</a> support in the Game Boy emulator for Kirby Tilt ’n Tumble, using the on-board accelerometer.</p><p>After I implemented a decent amount of software functionality, I decided to finish the enclosure design. The bare board just wasn’t cutting it anymore, and the taped LCD module/loose speakers/rubber-banded battery contraption was fragile.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/gamebub-without-shell.jpg\" alt=\"Game Bub looking rough without an enclosure\" width=\"1440\" height=\"1724\"><figcaption><p>Game Bub looking rough without an enclosure</p></figcaption></figure><p>I came into this project without any CAD or 3D printing experience. I looked at a few different CAD software packages, and I ultimately settled on <a href=\"https://www.freecad.org/\">FreeCAD</a>, primarily because it was free and open source. I learned how to use the software with some video tutorials. FreeCAD, unfortunately, was a little bit rough around the edges and I ended up running into some annoying issues. Nevertheless, I powered through and finished the design.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/enclosure-rev1-cad.png\" alt=\"FreeCAD view of the enclosure and some buttons\" width=\"2000\" height=\"1524\"><figcaption><p>FreeCAD view of the enclosure and some buttons</p></figcaption></figure><p>I found parametric modeling, where the geometry of the model is defined by constraints and dimensions, to be intuitive. However overall, I found 3D CAD to be very time consuming. I think a large part of this is my inexperience, but thinking in three dimensions is a lot more difficult than, say, a 2D PCB layout. Creating a full assembly was even more difficult: I had to visualize how the front and rear pieces would fit together, where the screws would go, and how the buttons, screen, speaker, cartridge slot, battery, and ports would all fit in. This project definitely pushed the boundaries of my (previously non-existent) product design skills.</p><p>After finishing the design, I printed out the technical drawing at a 1:1 scale and physically placed the board and other components down as a final check. Then, I sent it to JLCPCB for manufacturing. I opted for <a href=\"https://en.wikipedia.org/wiki/Stereolithography\">SLA resin printing</a>, for high precision and a smooth finish.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/shell-rev1-technical-drawing.png\" alt=\"Enclosure technical drawing\" width=\"1440\" height=\"971\"><figcaption><p>Enclosure technical drawing</p></figcaption></figure><p>After a couple weeks, I got the finished enclosure and custom buttons back.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/enclosure-rev1-outside.jpg\" alt=\"Front and rear half, outside\" width=\"1440\" height=\"1009\"><figcaption><p>Front and rear half, outside</p></figcaption></figure><p>I put the buttons, speakers, and screen into the enclosure, screwed on the PCB, and put the whole thing together.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/assembling-front.jpg\" alt=\"Assembling the front side\" width=\"1440\" height=\"1544\"><figcaption><p>Assembling the front side</p></figcaption></figure><figure><figcaption><p>Game Bub, fully assembled and functional</p></figcaption></figure><p>I wasn’t sure how dimensionally accurate the 3D printing would be, so I added a lot of extra clearance around the buttons and ports. As it turned out, the printing was very precise, so the buttons rattled around a little in the oversized button holes.</p><p>It’s a little bit chunky (smaller than an original Game Boy, though!) and the ergonomics aren’t ideal, but I was really happy to finally have an enclosure. It actually started (sort of) looking like a real product, and I wasn’t constantly worried about breaking it anymore.</p><h2>Game Boy Advance support<a hidden=\"\" aria-hidden=\"true\" href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#game-boy-advance-support\">#</a></h2><p>I won’t go into all of the details of how I wrote the emulator here (this article is already long enough!). If you’re interested, my <a href=\"https://eli.lipsitz.net/posts/fpga-gameboy-emulator/\">previous article about my Game Boy FPGA emulator</a> goes into detail about the general process of writing an emulator, and for a high-level introduction to the Game Boy Advance (from a technical perspective), I recommend <a href=\"https://www.copetti.org/writings/consoles/game-boy-advance/\">Rodrigo Copetti’s article</a>. In general, I tried to implement the emulator the way it might actually have been implemented in the original hardware: each cycle of the FPGA corresponds to one actual hardware cycle (no cheating!).</p><p>As with the Game Boy, I did nearly all of my development with a simulator backed by <a href=\"https://www.veripool.org/verilator/\">Verilator</a> and <a href=\"https://www.libsdl.org\">SDL</a>. By the end of the development process, the simulator was running at about 8% of the real-time speed (on an M3 MacBook Air with excellent single-core performance), which was a bit painful.</p><p>The Game Boy Advance CPU, the <a href=\"https://en.wikipedia.org/wiki/ARM7#ARM7TDMI\">ARM7TDMI</a>, is significantly more complicated than the Game Boy’s SM83 (a <a href=\"https://en.wikipedia.org/wiki/Zilog_Z80\">Z80</a> / <a href=\"https://en.wikipedia.org/wiki/Intel_8080\">8080</a>-ish hybrid). However, in some ways, it was easier to understand and implement: the ARM7TDMI is much closer to a simple modern processor architecture, and it’s extensively documented by ARM. For example, the <a href=\"https://developer.arm.com/documentation/ddi0210/c/?lang=en\">ARM7TDMI Technical Reference Manual</a> has block diagrams and detailed cycle-by-cycle instruction timing descriptions.</p><p>I had a lot of fun <a href=\"https://github.com/elipsitz/gamebub/tree/handheld/fpga/src/main/scala/gba/cpu\">implementing the CPU</a>. The architecture has a three-stage pipeline (fetch, decode, execute) – a division that feels natural when you implement it in hardware. The ARM7TDMI has two instruction sets: the standard 32-bit ARM instruction set, and the compressed 16-bit THUMB instruction set. I implemented the CPU the way it works in hardware, where the only difference between ARM and THUMB is the decode stage.</p><p>As I was implementing the CPU, I wrote <a href=\"https://github.com/elipsitz/gamebub/blob/handheld/fpga/src/test/scala/gba/cpu/ARM7TDMISpec.scala\">test cases</a> for each instruction. Each test checks the functionality of the instruction: processor state, register values after, as well as the cycle-by-cycle behavior and interaction with the memory bus. This was helpful for catching regressions as I implemented more and more control logic. It was also really satisfying to be able to implement individual instructions, then write the tests, and check that everything worked.</p><p>Chisel made it easy to write out the <a href=\"https://github.com/elipsitz/gamebub/blob/handheld/fpga/src/main/scala/gba/cpu/Control.scala\">CPU control logic</a>. The CPU control logic is a state machine that generates microarchitectural control signals (e.g. bus A should hold the value from the first read register, bus B should hold an immediate value, the memory unit should start fetching the computed address, etc.). Chisel allowed me to collect common functionality into functions (e.g.  to set up the signals to dispatch the next decoded instruction, or  to signal that the pipeline should be flushed and a new instruction should be fetched from the current program counter).</p><p>I found it helpful to draw out timing diagrams with <a href=\"https://wavedrom.com\">WaveDrom</a> when working through instructions, especially to deal with the pipelined memory bus.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/timing-arm7tdmi-branch.svg\" alt=\"My timing diagram of the ARM7TDMI branch instructions\"><figcaption><p>My timing diagram of the ARM7TDMI branch instructions</p></figcaption></figure><p>By mid-May (about a month later), I finished the CPU implementation (with occasional bug fixes after) and moved onto the rest of the system.</p><h3>PPU, MMIO, and everything else<a hidden=\"\" aria-hidden=\"true\" href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#ppu-mmio-and-everything-else\">#</a></h3><p>Over the next month and a half, I implemented the majority of the rest of the Game Boy Advance. The CPU interacts with the rest of the system via <a href=\"http://problemkaputt.de/gbatek-gba-i-o-map.htm\">memory-mapped IO (MMIO)</a> registers. Unlike the Game Boy CPU, which can only access memory a single byte at a time, the ARM7TDMI can make 8-bit, 16-bit, and 32-bit accesses. This complicates MMIO, and the different hardware registers and memory regions in the GBA respond to different access widths in different ways.</p><p>I started with the Picture Processing Unit (PPU), which produces the video output. The author of <a href=\"https://github.com/nba-emu/NanoBoyAdvance\">NanoBoyAdvance</a>, fleroviux, had helpfully documented the <a href=\"https://nba-emu.github.io/hw-docs/ppu/ppu.html\">PPU VRAM access patterns</a>, which gave a lot of insight into how the PPU might work internally. <a href=\"https://www.coranac.com/tonc/text/toc.htm\">Tonc</a> was also immensely helpful for implementing the PPU and testing individual pieces of functionality.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/tonc-test.png\" alt=\"(Sort of) running a Tonc PPU demo\" width=\"963\" height=\"699\"><figcaption><p>(Sort of) running a Tonc PPU demo</p></figcaption></figure><p>The PPU took a few weeks, and then I moved onto DMA, followed by hardware timers, and audio. Of course, as I’d try new tests, demos, and games, I’d uncover bugs and fix them.</p><figure><figcaption><p>Kirby  in Dream Land</p></figcaption></figure><p>Game Boy and Game Boy Advance cartridges use the same 32-pin connector. However, they work very differently. The Game Boy cartridge bus is asynchronous: the game outputs the 16-bit address (64 KiB address space) on one set of pins and lowers the  pin. Some time later, the 8-bit read data from the ROM stabilizes on a separate set of pins.</p><p>For the GBA, Nintendo extended the bus data width to 16-bit and the address space to 25-bit (32 MiB). However, they kept roughly the same set of pins, accomplishing this by multiplexing the 24 data/address pins: the console outputs the address (in increments of the data word size of 16-bits, for a 24-bit physical address), then lowers the  signal to “latch” the address in the cartridge. Then, each time the console pulses the  pin, the cartridge increments its latched address and outputs the next data over the same pins. This allows for a continuous read of sequential data without having to send a new address for each access. The GBA also allows games to <a href=\"http://problemkaputt.de/gbatek-gba-system-control.htm\">configure cartridge access timings</a> to support different ROM chips.</p><p>I had to do a lot of my own research here. Software emulators don’t need to care about the precise timing of the cartridge bus, so there wasn’t much documentation. To figure out the exact cycle-accurate timing, I used a <a href=\"https://www.saleae.com/\">Saleae</a> logic analyzer and connected it to the cartridge bus. I wrote a test program for the GBA to do different types of accesses (reads, writes, sequential, non-sequential, DMA) with different timing configurations.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/cartridge-bus-analyzer.jpg\" alt=\"Cartridge bus analysis setup\" width=\"1440\" height=\"1080\"><figcaption><p>Cartridge bus analysis setup</p></figcaption></figure><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/trace-gba-cartridge.png\" alt=\"Portion of a trace\" width=\"2582\" height=\"734\"></figure><p>After coming up with numerous scenarios (especially around the interaction between DMA and the CPU, and starting and stopping burst accesses), I came up with a consistent model for how cartridge accesses worked. I created some timing diagrams to help:</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/cartridge-timing-diagram.svg\" alt=\"Timing diagram of a non-sequential access followed by a sequential access\"><figcaption><p>Timing diagram of a non-sequential access followed by a sequential access</p></figcaption></figure><p>Finally, I started implementing the cartridge controller state machine based on my observations, paired with an emulated cartridge implementation. With the emulated cartridge, I was able to properly run real games in the simulator.</p><p>I quickly implemented physical cartridge support, to be able to finally run it on the actual FPGA. I connected the signals, built a new bitstream, and… it didn’t work at all. The Game Boy Advance boot screen ran, but it didn’t get any further than that. I implemented the emulated cartridge on the FPGA (reading ROM files from the SD card), and it worked! Which was great, but physical cartridges still didn’t.</p><p>I used the logic analyzer to observe how my emulator was interacting with the cartridge compared to how an actual GBA, and found numerous issues.</p><p>One of the first things I noticed was short <a href=\"https://en.wikipedia.org/wiki/Glitch#Electronics_glitch\">glitches</a> on the  line. I knew these had to be glitches (rather than incorrect logic), because they were 8 nanoseconds long, much shorter than the ~59.6ns clock period. Since the cartridge latches the address on a falling edge of , glitches cause it to latch an address when it shouldn’t, screwing up reads.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/cartridge-bus-glitches.png\" alt=\"Glitches on the cartridge bus\" width=\"2177\" height=\"600\"><figcaption><p>Glitches on the cartridge bus</p></figcaption></figure><p>Here, I learned an important lesson in digital design: output signals should come directly from flip-flops, with no logic in between.</p><p>After each flip-flop outputs a new value (on the rising edge of the clock), the signals propagate through the chip. As they propagate, taking different paths of different lengths throughout the chip, the output from each lookup table (LUT) is unstable. These values only stabilize near the end of the clock cycle (assuming the design met timing closure), and then each flip-flop stores the stable value at the next rising edge. If you output a signal from logic, this instability is visible from outside of the chip, manifesting as glitches in the output signal. If you instead output the signal from a flip-flop, it’ll change only on each clock edge, remaining stable in the middle.</p><p>And of course, I had written the cartridge controller without thinking about this, and  of the output signals were generated from logic. I rewrote the controller to output everything from flip-flops, which had a series of cascading changes since all of the signals now had to be computed one clock cycle earlier than I expected.</p><p>There were other issues too – part of the problem was that my emulated cartridge model was too permissive, and didn’t catch some fairly obvious incorrect behavior. After a few days of intensive debugging with the logic analyzer, I got to the point where I could play games from physical cartridges.</p><figure><figcaption><p>Metroid: Zero Mission running from the cartridge</p></figcaption></figure><h4>Cartridge prefetch buffer<a hidden=\"\" aria-hidden=\"true\" href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#cartridge-prefetch-buffer\">#</a></h4><p>The ARM7TDMI has a single shared instruction and data memory bus. As a result, a long series of sequential memory accesses is rare. Even a linear piece of code without branches that includes “load” or “store” instructions would produce a series of non-sequential memory accesses, as the CPU fetches an instruction from one location, loads a register from a different location, and then goes back to fetching the next instruction.</p><p>This poses a real performance issue on the GBA, because every non-sequential access from the cartridge incurs a multi-cycle penalty. Nintendo attempted to mitigate this somewhat with the “prefetch buffer” (<a href=\"https://mgba.io/2015/06/27/cycle-counting-prefetch/#game-pak-prefetch\">read this post by endrift, the author of mGBA, for more details</a>) which attempts to keep a cartridge read burst active between CPU accesses. Without emulating the prefetch buffer, some games lag (I noticed this the most in Mario Kart Super Circuit, and some rooms of Metroid: Zero Mission).</p><p>The prefetch buffer, while simple in theory, is not well documented and has a lot of corner cases and weird interactions. Emulator developers often start by taking a shortcut: making all cartridge accesses take a single cycle when the prefetch buffer is enabled. This wouldn’t work for me, since I actually had to interface with the physical cartridge.</p><p>So, I set out to do some more research to figure out exactly how the prefetch buffer worked. After making some educated guesses and tests, I came up with a reasonable model of how it might work.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/prefetch-notes.jpg\" alt=\"Notes about the prefetch state machine\" width=\"1440\" height=\"1744\"><figcaption><p>Notes about the prefetch state machine</p></figcaption></figure><p>Actually implementing it took a lot of work, and I kept stumbling upon more and more corner cases. Eventually I got to the point where all games appeared to run at full speed, and most importantly, didn’t randomly crash. My implementation isn’t perfect: there are still a few <a href=\"https://github.com/mgba-emu/suite\">mGBA test suite</a> timing tests I don’t pass, but it’s certainly sufficient to play games.</p><ul><li>: standard duplex SPI, used for communicating with accessories</li><li>: custom multi-drop UART-like protocol, used to link up to four GBAs together for multiplayer games</li><li>: the Nintendo N64 and GameCube controller protocol, used to connect to a GameCube</li><li>: duplex <a href=\"https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter\">UART</a> with flow control, </li><li>: controlling the four pins individually as <a href=\"https://en.wikipedia.org/wiki/General-purpose_input/output\">GPIO</a>, </li></ul><p>The timing of these isn’t well documented, so I did my own research.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/gba-link-multiplayer-transfer.png\" alt=\"A multiplayer mode transfer with no attached consoles\" width=\"2012\" height=\"558\"><figcaption><p>A  mode transfer with no attached consoles</p></figcaption></figure><p>I did a lot of testing with examples from the <a href=\"https://github.com/afska/gba-link-connection\">gba-link-connection</a> library, intended for homebrew GBA games, but helpful for testing the different transfer modes in a controlled environment.</p><figure><figcaption><p>Multiplayer Mario Kart with Game Bub and a GBA</p></figcaption></figure><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/animal-crossing-gamecube-link.jpg\" alt=\"Game Bub linked to a GameCube playing Animal Crossing\" width=\"1440\" height=\"1801\"><figcaption><p>Game Bub linked to a GameCube playing Animal Crossing</p></figcaption></figure><p>During the emulator development, I had used various test ROMs (mentioned before) to test basic functionality in isolation. As my emulator became mature enough to run commercial games, however, I started to shift some of my focus to accuracy-focused test ROMs.</p><p>These test ROMs (such as the <a href=\"https://github.com/mgba-emu/suite\">mGBA test suite</a>) generally test really specific hardware quirks and timing. For example, they might test what happens when you run an instruction that ARM calls “unpredictable”, or the exact number of cycles it takes to service an interrupt in specific scenarios, or <a href=\"https://bmchtech.github.io/post/multiply/\">the value of the “carry” flag after performing a multiplication</a>. These are the kinds of things that don’t actually matter for playing games, but present a fun challenge and a way to “score” your emulator against others. This also highlights the collaborative nature of the emulation development community: people sharing their research and helping each other out.</p><p>I won’t talk about all of the tests here (for my emulator’s test results, <a href=\"https://github.com/elipsitz/gamebub/blob/handheld/docs/accuracy.md\">see this page</a>). But I do want to mention the <a href=\"https://tcrf.net/AGS_Aging_Cartridge\"></a>. This is an official test cartridge from Nintendo, likely used as part of a factory test or RMA procedure. Apparently, Nintendo has  used it to test their emulators (e.g. their GBA emulator on the Nintendo Switch). This test has generally been considered to be difficult to pass (it tests some specific hardware quirks), but it’s easier now that the tests have been <a href=\"https://github.com/DenSinH/AGSTests/\">thoroughly reverse engineered and documented</a>. Still, passing it is a nice milestone:</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/agb-aging-cartridge.png\" alt=\"Passing the AGB Aging Cartridge\" width=\"964\" height=\"700\"><figcaption><p>Passing the AGB Aging Cartridge</p></figcaption></figure><h2>Second hardware revision<a hidden=\"\" aria-hidden=\"true\" href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#second-hardware-revision\">#</a></h2><p>Towards the end of 2024, approximately one year after I originally designed Game Bub, I decided to make a second hardware revision. Over the past year, I had been keeping track of all of the things I would want to change in a future revision. Since the first version of Game Bub miraculously worked without any major issues, this list was primarily minor issues and ergonomics changes.</p><p>I fixed the <a href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#trouble-with-power-domains\">minor I2C power issues</a>, removed the <a href=\"https://en.wikipedia.org/wiki/Reference_designator\">reference designators</a> from the PCB silkscreen (they looked messy with the dense board, and I didn’t use them for anything anyway), and changed around some test points. I improved the rumble circuit to be more responsive, and switched to a PCB-mounted vibration motor.</p><p>The first version of Game Bub was fairly thick, measuring 12.9mm at the top and 21.9mm on the bottom. The thickness of the rear enclosure was dictated by the thickness of Game Boy cartridges, but I made several changes to the front. I moved the  (8.5mm!) link port to the back, and removed the HDMI port (more on that later). I changed the headphone jack (5.0mm tall – no wonder they started getting removed from phones) to a mid-mount one that sunk into the PCB and reduced the overall height.</p><p>I also switched from an  module (3.1mm depth) to an  (2.4mm depth). I should have done this from the beginning, I just didn’t even know the ESP32-S3-MINI existed. This had the side effect of giving me 3 more GPIOs, which allowed me to put the FPGA and LCD on separate SPI busses, avoiding the minor issue of an unpowered FPGA interfering with LCD communication, and allowed for faster boot because the LCD could be configured at the same time as the FPGA.</p><p>I switched the speakers, from the fully-enclosed <a href=\"https://www.sameskydevices.com/product/audio/speakers/miniature-(10-mm~40-mm)/ces-20134-088pmb\">CES-20134-088PMB</a> to the <a href=\"https://www.sameskydevices.com/product/audio/speakers/miniature-(10-mm~40-mm)/cms-160903-18s-x8\">CMS-160903-18S-X8</a>. I made this change primarily for ease of assembly. The first speaker had a wire connector that plugged into the board, and I found it difficult to connect during assembly without having the wire interfere with buttons. The new speaker is smaller and has a spring contact connector, so it just presses against the PCB as the device is assembled. This required some speaker enclosure design – an unenclosed speaker in free air sounds quiet and tinny.</p><p>I reworked the layout of the face buttons and D-pad to match the spacing of the Nintendo DSi. This allowed me to use the silicone membranes from the DSi for an improved button feel and reduced rattling. I was also hoping to use the plastic buttons from the DSi (which were higher quality compared to my 3D printed buttons), but even with the new thinner design, the buttons weren’t quite tall enough to be easily pressed.</p><p>I created another timelapse of my modifications to produce the second version of the PCB:</p><figure><figcaption><p>Revision 2 board layout timelapse</p></figcaption></figure><p>For the second revision of the enclosure, I switched to <a href=\"https://en.wikipedia.org/wiki/Fusion_360\">Fusion 360</a> for the CAD work. While I would have preferred to keep using FreeCAD, I found that it was making it harder for me to be productive. Fusion 360 has a free version for hobbyists (with some limitations that have gradually increased over time), and overall I’ve found it very pleasant to use.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/enclosure-rev2-cad.png\" alt=\"Fusion 360 view of the second enclosure, fully assembled\" width=\"1774\" height=\"1472\"><figcaption><p>Fusion 360 view of the second enclosure, fully assembled</p></figcaption></figure><p>Unlike with the first revision, I waited until I had a final design for both the enclosure and the PCB before getting anything manufactured. This let me go back and forth, making small modifications to each of them as needed.</p><p>I wanted to make the end result look more polished and professional, so I contracted a factory to produce custom LCD cover glass, made out of 0.7mm thick tempered glass with a black silkscreen. It was relatively expensive for a low quantity order, but I’m really happy with how it turned out.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/lcd-cover-glass.jpg\" alt=\"Custom LCD cover glass with adhesive backing\" width=\"1440\" height=\"1369\"><figcaption><p>Custom LCD cover glass with adhesive backing</p></figcaption></figure><h3>Manufacturing and assembly<a hidden=\"\" aria-hidden=\"true\" href=\"https://eli.lipsitz.net/posts/introducing-gamebub/#manufacturing-and-assembly\">#</a></h3><p>I got the PCBs manufactured and assembled, this time with black solder mask to look .</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/pcb-rev-2.jpg\" alt=\"Assembled PCB, revision 2\" width=\"1440\" height=\"1073\"><figcaption><p>Assembled PCB, revision 2</p></figcaption></figure><p>I had two enclosures made. The first was black PA-12 Nylon, printed with <a href=\"https://en.wikipedia.org/wiki/Multi-jet_fusion\">MJF</a>. Nylon is strong and durable, and the MJF 3D printing technology produces a slightly grainy surface that’s really pleasant to hold in your hand.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/nylon-closeup.jpg\" alt=\"Closeup of the nylon grainy texture\" width=\"1440\" height=\"894\"><figcaption><p>Closeup of the nylon grainy texture</p></figcaption></figure><p>The second one was made of transparent resin (SLA, like before). This lets me show off the PCB that I worked so hard on, and evokes the transparent electronics trend from the 90s.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/gamebub-transparent.jpg\" alt=\"Transparent Game Bub\" width=\"1440\" height=\"1920\"></figure><p>Assembly was a lot easier this time around: the silicone membranes held the face buttons in place, the speakers had a spring contact instead of wires, and the shoulder button assembly was better. In the first revision, I had excessively large tolerances because I wasn’t sure how precise the 3D printing would be. In the second version, I was able to shrink these.</p><p>The final product looked and felt a lot better, too. The edges were more rounded, and the device was thinner and easier to hold. The buttons felt  better to press and didn’t rattle around, and the cover glass over the LCD added polish.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/gamebubs-side-by-side.jpg\" alt=\"First revision (left), second revision (center and right)\" width=\"1440\" height=\"742\"><figcaption><p>First revision (left), second revision (center and right)</p></figcaption></figure><p>I previously mentioned that I removed the full-size HDMI port from the first revision. I had first planned to change it to a mini-HDMI or micro-HDMI port to reduce the size, but I was worried about durability.</p><p>What I  wanted to do was output video through the USB-C port, avoiding the need for any HDMI port at all. Unfortunately, I had already concluded earlier that I wouldn’t be able to output <a href=\"https://en.wikipedia.org/wiki/DisplayPort\">DisplayPort</a> video signals from the FPGA, which meant that I couldn’t use the standard USB-C DisplayPort alternate mode.</p><p>However, an idea struck me towards the end of 2024: I didn’t actually  to use the DisplayPort alt-mode. The USB-C connector, in addition to the USB 2.0 D+/D- pins, has four differential pairs (for USB superspeed). Conveniently, HDMI  uses four differential pairs. The USB specification allows for vendor-specific alt-modes, so I could just implement my own, outputting the HDMI signal directly from the FPGA over the additional pins. Then I could build a custom dock that takes those pins and connects them to the data lines of an HDMI port.</p><p>According to the USB specification, alternate modes must be negotiated by both sides first, using the USB-C Power Delivery (USB-PD) protocol, to prevent them from interfering with devices that aren’t expecting them. I don’t actually have a USB-PD controller in Game Bub (too much added complexity), so I took a shortcut: have a microcontroller in the dock communicate with the Game Bub over regular USB and perform a handshake before enabling HDMI output from the FPGA. Once Game Bub detects that it’s been disconnected from the dock, it can just switch back to using the internal display.</p><p>I realized that the dock also presents another opportunity for controller support. I originally wanted to build wireless controller support into the handheld, but the ESP32-S3 only supports Bluetooth Low Energy, and the majority of controllers use Bluetooth Classic. Fortunately, the <a href=\"https://en.wikipedia.org/wiki/Raspberry_Pi#Raspberry_Pi_Pico\">Raspberry Pi Pico W</a> (with an RP2040 MCU) supports both types of Bluetooth, so I just decided to use that as the microcontroller on the dock. Game controllers connect to the dock over Bluetooth, and the Pico sends the controller inputs to the device. I wired up the  and  USB-C pins as a direct connection between the FPGA and the dock for low latency input.</p><p>The RP2040 acts as the USB host, and Game Bub only needs to be a device. I also added a USB hub chip and some additional USB ports on the back of the dock to allow for wired controller support too. Just like with wireless controllers, the dock handles the direct controller communication, and just passes inputs back to the main Game Bub unit.</p><p>Since the dock is so simple (comparatively), it only took about a day to design and lay out.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/dock-pcb.jpg\" alt=\"Assembled dock PCB\" width=\"1440\" height=\"1016\"></figure><p>I had also hoped to use the dock to solve another problem around HDMI output: HDMI sinks (monitors, TVs) pull the HDMI data lines up to 3.3 volts, and can actually backfeed power to the HDMI source. For Game Bub, this meant that a powered-off unit would turn itself on when connected over HDMI. I used a HDMI buffer chip in the dock to try to alleviate this problem, but the chip I used wasn’t actually properly suited to this use-case and interfered with video output, so I had to carefully rework the board to bypass the chip. I’ll have to fix it in a later revision.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/dock-rework.jpg\" alt=\"Bypassing the HDMI buffer chip\" width=\"1440\" height=\"1359\"><figcaption><p>Bypassing the HDMI buffer chip</p></figcaption></figure><p>After the rework, HDMI output worked! The rest of the features are still a work in progress.</p><figure><img loading=\"lazy\" src=\"https://eli.lipsitz.net/posts/introducing-gamebub/media/bare-gamebub-in-dock.jpg\" alt=\"Game Bub PCB on the dock, connected to an external monitor\" width=\"1440\" height=\"2116\"><figcaption><p>Game Bub PCB on the dock, connected to an external monitor</p></figcaption></figure><p>Congratulations on reading this far! This writeup ended up being incredibly long, even with a lot of details left out.</p><p>I’m proud of what I accomplished over the last year and a half: I met all of my goals to produce a polished handheld FPGA retrogaming device. I pushed my electrical engineering and product design skills to the limit, and learned a lot in the process. Professional product and hardware designers deserve  respect.</p><p>I deliberately designed this project with lots of possible extension opportunities to keep me occupied for a long time. I worked hard to get to the point where I’m comfortable sharing Game Bub with the world, but I still have a long list of TODOs for the future.</p><p>In the near term, I’m going to work on finishing the dock, implementing wireless controller support (and maybe wired). I plan to use the <a href=\"https://github.com/ricardoquesada/bluepad32\">Bluepad32</a> library to do so.</p><p>I also want to improve the accuracy of my Game Boy Advance emulator: my goal here is to someday pass the entire <a href=\"https://github.com/mgba-emu/suite\">mGBA test suite</a>. I hope that I can contribute back to the wonderful  community with my emulator, and I plan to write-up some of my research around the GBA cartridge interface and link port.</p><p>I have a long list of mostly minor changes to make to the MCU firmware: improving UI render performance, bits of polish like low battery notifications, eliminating display glitching when reloading the FPGA, and that sort of thing. I also plan to add more utilities, like a cartridge dumper and save backup/restore feature.</p><p>Some day, I want to emulate the <a href=\"https://en.wikipedia.org/wiki/Game_Boy_Advance_Wireless_Adapter\">Game Boy Advance Wireless Adapter</a> over Wi-Fi, e.g. with <a href=\"https://docs.espressif.com/projects/esp-idf/en/stable/esp32s3/api-reference/network/esp_now.html\">ESP-NOW</a>. This won’t be compatible with the original wireless adapter, unfortunately, since that uses raw 2.4 GHz modulation rather than Wi-Fi.</p><p>I designed Game Bub with extremely low production volumes in mind, using off-the-shelf commodity parts to keep the overall cost down. However, there are a few things I would have liked to be able to do, but are only possible with much higher volumes:</p><ul><li>A better LCD module (likely custom): native landscape mode to avoid the need for triple-buffering. Ideally a 720x480 resolution display, to allow for 3x GBA scaling and filter effects.</li><li>High-quality injection molded case and buttons: 3D printing is great for low volume production, but an injection molded case would be great. It would be more precise (allowing for tighter tolerances), stronger, and allow for significantly more color options.</li><li>Custom battery pack: or at least customizing the length of the connector wire. The current solution is hacky and doesn’t make the best use of internal space, due to limited off-the-shelf battery options.</li><li>Smaller BGA parts for SRAM and SDRAM to free up board space (and move internal signals to 1.8 volts): this is actually something that would be possible in smaller volumes too, if I were willing to send parts from Mouser or DigiKey to JLCPCB for assembly.</li></ul>","contentLength":69379,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43027335"},{"title":"Current state of machine learning and intelligent systems","url":"https://www.datasciencecentral.com/current-state-of-machine-learning-and-intelligent-systems/","date":1739378698,"author":"Dan Wilson","guid":60,"unread":true,"content":"<p>Interview with Dr. Andrea Isoni – SHOW 16 Intelligent systems are evolving faster than ever, and keeping up with the latest advancements requires expertise, foresight, and a deep understanding of both the technological and regulatory landscapes. In&nbsp;AI Think Tank Podcast – Show 16, I had the pleasure of sitting down with&nbsp;Dr. Andrea Isoni, Director and…&nbsp;<a href=\"https://www.datasciencecentral.com/current-state-of-machine-learning-and-intelligent-systems/\" rel=\"bookmark\">Read More »</a></p>","contentLength":375,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"EuroPython Society: Board Report for January 2025","url":"https://www.europython-society.org/board-report-for-january-2025/","date":1739372917,"author":"","guid":160,"unread":true,"content":"<p>The top priority for the board in January was finishing the hiring of our event manager. We’re super excited to introduce Anežka Müller! Anežka is a freelance event manager and a longtime member of the Czech Python community. She’s a member of the Pyvec board, co-organizes PyLadies courses, PyCon CZ, Brno Pyvo, and Brno Python Pizza. She’ll be working closely with the board and OPS team, mainly managing communication with service providers. Welcome onboard! </p><p>Our second priority was onboarding teams. We’re happy that we already have the Programme team in place—they started early and launched the Call for Proposals at the beginning of January. We’ve onboarded a few more teams and are in the process of bringing in the rest.</p><p>Our third priority was improving our grant programme in order to support more events with our limited budget and to make it more clear and transparent. We went through past data, came up with a new proposal, discussed it, voted on it, and have already published it on our <a href=\"https://www.europython-society.org/changes-in-the-grants-programme-for-2025/\">blog</a>. </p><ul><li>Updating onboarding/offboarding checklists for Volunteers and Board Members</li><li>Various infrastructure updates including new website deployment and self-hosted previews for Pull Requests to the website.</li><li>Setting up EPS AWS account.</li><li>Working out the Grant Guidelines update for 2025</li><li>Attending PyConWeb and FOSDEM</li><li>Reviewing updates to the Sponsors setup and packages for 2025</li><li>More documentation, sharing know-how and reviewing new proposals.</li></ul><ul><li>Brand strategy: Analysis of social media posts from previous years and web analytics. Call with a European open-source maintainer and a call with a local events organizer about EP content.</li><li>Comms &amp; design: Call for proposal announcements, EP 2024 video promotions, speaker mentorship, and newsletter. Video production - gathering videos from speakers, video post-production, and scheduling them on YouTube shorts, and social media.</li><li>Event management coordination: Calls with the event manager and discussions about previous events.</li><li>Grants: Work on new grant guidelines and related comms.</li><li>Team onboarding: Calls with potential comms team members and coordination.</li><li>PR: Delivering a lightning talk at FOSDEM.</li></ul><ul><li>Offboarding the old board</li><li>Onboarding new team members</li><li>Administrative work on Grants</li></ul><ul><li>Worked on the Grants proposal</li><li>Follow-up with team members</li><li>Community outreach: FOSDEM</li></ul><ul><li>Working on various infrastructure updates, mostly related to the website.</li><li>Reviewing Pull Requests for the website and the internal bot</li><li>Working on the infrastructure team proposal.</li></ul><ul><li>Timeline: Discussion with the Programme Team, and planning to do the same with the other teams.</li><li>Visa Request letter: Setup and Test Visa Request Automation for the current year</li><li>Team selection discussion with past volunteers</li></ul>","contentLength":2708,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Morsels: Avoid over-commenting in Python","url":"https://www.pythonmorsels.com/avoid-comments/","date":1739372739,"author":"","guid":159,"unread":true,"content":"<h2>Documenting instead of commenting</h2><p>Here is a comment I would not write in my code:</p><div><pre><code></code></pre></div><p>That comment seems to describe what this code does... so why would I  write it?</p><p>I do like that comment, but I would prefer to write it as a <a href=\"https://www.pythonmorsels.com/docstrings/\" target=\"_blank\">docstring</a> instead:</p><div><pre><code></code></pre></div><p>Documentation strings are for conveying the purpose of function, class, or module, typically at a high level.\nUnlike comments, they can be read by Python's built-in  function:</p><div><pre><code></code></pre></div><p>Docstrings are also read by other documentation-oriented tools, like <a href=\"https://www.sphinx-doc.org\" target=\"_blank\">Sphinx</a>.</p><h2>Non-obvious variables and values</h2><p>Here's a potentially helpful comment:</p>","contentLength":557,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Meta’s New AI: Outrageously Good!","url":"https://www.youtube.com/watch?v=m6aaQoPv5r8","date":1739372626,"author":"Two Minute Papers","guid":328,"unread":true,"content":"<article>❤️ Check out Lambda here and sign up for their GPU Cloud: https://lambdalabs.com/papers\n\n📝 The paper \"VideoJAM: Joint Appearance-Motion Representations for Enhanced Motion Generation in Video Models\" is available here:\nhttps://hila-chefer.github.io/videojam-paper.github.io/\n\nVs Veo2: https://x.com/TomLikesRobots/status/1888279188336963725\n\n📝 My paper on simulations that look almost like reality is available for free here:\nhttps://rdcu.be/cWPfD \n\nOr this is the orig. Nature Physics link with clickable citations:\nhttps://www.nature.com/articles/s41567-022-01788-5\n\n🙏 We would like to thank our generous Patreon supporters who make Two Minute Papers possible:\nBenji Rabhan, B Shang, Christian Ahlin, Gordon Child, John Le, Juan Benet, Kyle Davis, Loyal Alchemist, Lukas Biewald, Michael Tedder, Owen Skarpness, Richard Sundvall, Steef, Taras Bobrovytsky, Thomas Krcmar, Tybie Fitzhugh, Ueli GallizziIf you wish to appear here or pick up other perks, click here: https://www.patreon.com/TwoMinutePapers\n\nMy research: https://cg.tuwien.ac.at/~zsolnai/\nX/Twitter: https://twitter.com/twominutepapers\nThumbnail design: Felícia Zsolnai-Fehér - http://felicia.hu</article>","contentLength":1174,"flags":null,"enclosureUrl":"https://www.youtube.com/v/m6aaQoPv5r8?version=3","enclosureMime":"","commentsUrl":null},{"title":"5 LLM Prompting Techniques Every Developer Should Know","url":"https://www.kdnuggets.com/5-llm-prompting-techniques-every-developer-should-know","date":1739372427,"author":"Bala Priya C","guid":249,"unread":true,"content":"<article>Want to make the most out of large language models? Check out these prompting techniques you can start using today.</article>","contentLength":115,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/llm-prompting.png","enclosureMime":"","commentsUrl":null},{"title":"Real Python: Python Keywords: An Introduction","url":"https://realpython.com/python-keywords/","date":1739368800,"author":"","guid":96,"unread":true,"content":"<p>Python keywords are reserved words with specific functions and restrictions in the language. Currently, Python has thirty-five keywords and four soft keywords. These keywords are always available in Python, which means you don’t need to import them. Understanding how to use them correctly is fundamental for building Python programs.</p><p><strong>By the end of this tutorial, you’ll understand that:</strong></p><ul><li>There are  and  in Python.</li><li>You can get a list of all keywords using  from the  module.</li><li> in Python act as keywords only in specific contexts.</li><li> are keywords that have been deprecated and turned into functions in Python 3.</li></ul><p>In this article, you’ll find a basic introduction to all Python keywords and soft keywords along with other resources that will be helpful for learning more about each keyword.</p><div><p> Test your knowledge with our interactive “Python Keywords: An Introduction” quiz. You’ll receive a score upon completion to help you track your learning progress:</p><div><div><a href=\"https://realpython.com/quizzes/python-keywords/\"></a><p>In this quiz, you'll test your understanding of Python keywords and soft keywords. These reserved words have specific functions and restrictions in Python, and understanding how to use them correctly is fundamental for building Python programs.</p></div></div></div><p>Python keywords are special reserved words that have specific meanings and purposes and can’t be used for anything but those specific purposes. These keywords are always available—you’ll never have to import them into your code.</p><p>Python keywords are different from Python’s <a href=\"https://docs.python.org/3/library/functions.html\">built-in functions and types</a>. The built-in functions and types are also always available, but they aren’t as restrictive as the keywords in their usage. </p><p>An example of something you  do with Python keywords is assign something to them. If you try, then you’ll get a . You won’t get a  if you try to assign something to a built-in function or type, but it still isn’t a good idea. For a more in-depth explanation of ways keywords can be misused, check out <a href=\"https://realpython.com/invalid-syntax-python/#misspelling-missing-or-misusing-python-keywords\">Invalid Syntax in Python: Common Reasons for SyntaxError</a>.</p><p>There are <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#keywords\">thirty-five keywords</a> in Python. Here’s a list of them, each linked to its relevant section in this tutorial:</p><p>Two keywords have additional uses beyond their initial use cases. The  keyword is also <a href=\"https://realpython.com/atom.xml#the-else-keyword-used-with-loops\">used with loops</a> and <a href=\"https://realpython.com/atom.xml#the-else-keyword-used-with-try-and-except\">with  and </a> in addition to in conditional statements. The  keyword is most commonly used in  statements, but also used <a href=\"https://realpython.com/atom.xml#the-as-keyword-used-with-with\">with the  keyword</a>.</p><p>The list of Python keywords and soft keywords has changed over time. For example, the  and  keywords weren’t added until Python 3.7. Also, both  and  were keywords in Python 2.7 but were turned into built-in functions in Python 3 and no longer appear in the keywords list.</p><p>As mentioned above, you’ll get an error if you try to assign something to a Python keyword. Soft keywords, on the other hand, aren’t that strict. They syntactically act as keywords only in certain conditions.</p><p>This new capability was made possible thanks to the introduction of the <a href=\"https://realpython.com/python39-new-features/#a-more-powerful-python-parser\">PEG parser</a> in Python 3.9, which changed how the interpreter reads the source code.</p><p>Leveraging the PEG parser allowed for the introduction of <a href=\"https://realpython.com/structural-pattern-matching/\">structural pattern matching</a> in Python. In order to use intuitive syntax, the authors picked , , and  for the pattern matching statements. Notably,  and  are widely used for this purpose in many other programming languages.</p><p>To prevent conflicts with existing Python code that already used , , and  as variable or function names, Python developers decided to introduce the concept of soft keywords.</p><p>Currently, there are four  in Python:</p><p>You can use the links above to jump to the soft keywords you’d like to read about, or you can continue reading for a guided tour.</p><h2>Value Keywords: , , </h2><p>There are three Python keywords that are used as values. These values are <a href=\"https://python-patterns.guide/gang-of-four/singleton/\">singleton</a> values that can be used over and over again and always reference the exact same object. You’ll most likely see and use these values a lot.</p><p>There are a few terms used in the sections below that may be new to you. They’re defined here, and you should be aware of their meaning before proceeding:</p>","contentLength":4020,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"EuroPython Society: Changes in the Grants Programme for 2025","url":"https://www.europython-society.org/changes-in-the-grants-programme-for-2025/","date":1739366190,"author":"","guid":158,"unread":true,"content":"<ul><li>We are increasing transparency and reducing ambiguity in the guidelines.</li><li>We would like to support more events with our limited budget</li><li>We’ve introduced caps for events in order to make sure all grants are fairly given and we can support more communities.</li><li>We’ve set aside 10% of our budget for the local community. </li></ul><p>The EPS introduced a Grant Programme in 2017. Since then, we have granted almost EUR 350k through the programme, partly via EuroPython Finaid and by directly supporting other Python events and projects across Europe. In the last two years, the Grant Programme has grown to EUR 100k per year, with even more requests coming in.</p><p>With this growth come new challenges in how to distribute funds fairly so that more events can benefit. Looking at data from the past two years, we’ve often been close to or over our budget. The guidelines haven’t been updated in a while. As grant requests become more complex, we’d like to simplify and clarify the process, and better explain it on our website.</p><p>We would also like to acknowledge that EuroPython, when traveling around Europe, has an additional impact on the host country, and we’d like to set aside part of the budget for the local community.</p><p>The Grant Programme is also a primary funding source for EuroPython Finaid. To that end, we aim to allocate 30% of the total Grant Programme budget to Finaid, an increase from the previous 25%.</p><ul><li>We’ve updated the <a href=\"https://www.europython-society.org/grants\">text on our website</a>, and split it into multiple sub-pages to make it easier to navigate. The website now includes a checklist of what we would like to see in a grant application, and a checklist for the Grants Workgroup – so that when you apply for the Grant you already know the steps that it will go through later and when you can expect an answer from us.</li><li>We looked at the data from previous years, and size and timing of the grant requests. With the growing number and size of the grants, to make it more accessible to smaller conferences and conferences happening later in the year, we decided to introduce max caps per grant and split the budget equally between the first and second half of the year. We would also explicitly split the total budget into three categories – 30% goes to the EuroPython finaid, 10% is reserved for projects in the host country. The remaining 60% of the budget goes to fund other Python Conferences. This is similar to the split in previous years, but more explicit and transparent.</li></ul><p>Using 2024 data, and the budget available for Community Grants (60% of total), we’ve simulated different budget caps and found a sweet spot at 6000EUR, where we are able to support all the requests with most of the grants being below that limit. For 2025 we expect to receive a similar or bigger number of requests.</p><table><tbody><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table><img src=\"https://www.europython-society.org/content/images/2025/02/image-1.png\" alt=\"alt\" width=\"1418\" height=\"496\"><p>We are introducing a special 10% pool of money to be used on projects in the host country (in 2025 that’s again Czech Republic). This pool is set aside at the beginning of the year, with one caveat that we would like to deploy it in the first half of the year. Whatever is left unused goes back to the Community Pool to be used in second half of the year.</p><ul><li>Fairer Funding: By spreading our grants out during the year, conferences that happen later won’t miss out.</li><li>Easy to Follow: Clear rules and deadlines cut down on confusion about how much you can get and what it’s for.</li><li>Better Accountability: We ask for simple post-event reports so we can see where the money went and what impact it made.</li><li>Stronger Community: Funding more events grows our Python network across Europe, helping everyone learn, connect, and collaborate.</li></ul>","contentLength":3581,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Top 5 Freelancer Websites Better Than Fiverr and Upwork","url":"https://www.kdnuggets.com/top-5-freelancer-websites-better-fiverr-upwork","date":1739365235,"author":"Abid Ali Awan","guid":248,"unread":true,"content":"<article>Discover freelancing platforms that care about you, not just your money, offering low commission rate, better policies, and higher earning potential.</article>","contentLength":149,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/awan_top_5_freelancer_websites_better_fiverr_upwork_4.png","enclosureMime":"","commentsUrl":null},{"title":"Real Python: Quiz: Python Keywords: An Introduction","url":"https://realpython.com/quizzes/python-keywords/","date":1739361600,"author":"","guid":95,"unread":true,"content":"<p>Python keywords are reserved words with specific functions and restrictions in the language. These keywords are always available in Python, which means you don’t need to import them. Understanding how to use them correctly is fundamental for building Python programs.</p>","contentLength":269,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The difference between metrics and scorers","url":"https://www.youtube.com/watch?v=67KMDSitw1M","date":1739356864,"author":"probabl","guid":369,"unread":true,"content":"<article>You can easily write custom metric functions for scikit-learn, but you need to take an extra step if you want to use those metrics in a hyperparameter search. To add a number there, you need to use a scorer instead. The goal of this video is to explain the difference and to show how to leverage the `make_scorer` helper utility here.\n\nWebsite: https://probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nBluesky: https://bsky.app/profile/probabl.bsky.social\nTwitter: https://x.com/probabl_ai\nDiscord: https://discord.probabl.ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\n#probabl</article>","contentLength":719,"flags":null,"enclosureUrl":"https://www.youtube.com/v/67KMDSitw1M?version=3","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Letting LLMs Run a Debugger","url":"https://github.com/mohsen1/llm-debugger-vscode-extension","date":1739354054,"author":"mohsen1","guid":443,"unread":true,"content":"<p>I just built an experimental VSCode extension called LLM Debugger. It’s a proof-of-concept that lets a large language model take charge of debugging. Instead of only looking at the static code, the LLM also gets to see the live runtime state—actual variable values, function calls, branch decisions, and more. The idea is to give it enough context to help diagnose issues faster and even generate synthetic data from running programs.</p><p>* Active Debugging: It integrates with Node.js debug sessions to gather runtime info (like variable states and stack traces).</p><p>* Automated Breakpoints: It automatically sets and manages breakpoints based on both code analysis and LLM suggestions.</p><p>* LLM Guidance: With live debugging context, the LLM can suggest actions like stepping through code or adjusting breakpoints in real time.</p><p>I built this out of curiosity to see if combining static code with runtime data could help LLMs solve bugs more effectively. It’s rough around the edges and definitely not production-ready</p><p>I’m not planning on maintaining it further. But I thought it was a fun experiment and wanted to share it with you all.</p><p>Check out the attached video demo to see it in action. Would love to hear your thoughts and any feedback you might have!</p>","contentLength":1250,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43023698"},{"title":"Zato Blog: Modern REST API Tutorial in Python","url":"https://zato.io/en/blog/modern-rest-api-tutorial-in-python.html","date":1739347200,"author":"","guid":157,"unread":true,"content":"<div>\n  2025-02-12, by Dariusz Suchojad\n<img src=\"https://upcdn.io/kW15bqq/raw/root/static/blog/authors/dsuch.webp\" alt=\"\" width=\"35\"></div><p>Great APIs don't win theoretical arguments - they just prefer to work reliably and to make developers' lives easier.</p><p>Here's a tutorial on what building production APIs is really about: creating interfaces that are practical in usage,\nwhile keeping your systems maintainable for years to come.</p>","contentLength":326,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Kushal Das: pass using stateless OpenPGP command line interface","url":"https://kushaldas.in/posts/pass-using-stateless-openpgp-command-line-interface.html","date":1739337973,"author":"","guid":156,"unread":true,"content":"<p><a href=\"https://kushaldas.in/posts/using-openpgp-card-tool-git-with-git.html\">Yesterday</a> I wrote about how\nI am using a different tool for  signing and verification. Next, I\nreplaced my  usage. I have a <a href=\"https://kushaldas.in/github.com/kushaldas/password-store/compare/master...card\">small\npatch</a> to use\nstateless OpenPGP command line interface (SOP). It is an implementation\nagonostic standard for handling OpenPGP messages. You can read the whole <a href=\"https://datatracker.ietf.org/doc/draft-dkg-openpgp-stateless-cli/\">SPEC\nhere</a>.</p><pre><code>cargo install rsop rsop-oct\n</code></pre><p>And copied the bash script from my repository to the path somewhere.</p><p>The  binary from  follows the same SOP standard but uses the\ncard to signing/decryption. I stored my public key in\n<code>~/.password-store/.gpg-key</code> file, which is in turn used for encryption.</p><p>Here nothing changed related my daily  usage, except the number of time I am typing my  :)</p>","contentLength":669,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"This Week in Rust 586","url":"https://this-week-in-rust.org/blog/2025/02/12/this-week-in-rust-586/","date":1739336400,"author":"TWiR Contributors","guid":198,"unread":true,"content":"<p>This week's crate is <a href=\"https://github.com/virust-ai/esp32-mender-client\">esp32-mender-client</a>, a client for ESP32 to execute firmware updates and remote commands.</p><p>Thanks to <a href=\"https://users.rust-lang.org/t/crate-of-the-week/2704/1399\">Kelvin</a> for the self-suggestion!</p><p>An important step for RFC implementation is for people to experiment with the\nimplementation and give feedback, especially before stabilization.  The following\nRFCs would benefit from user testing before moving forward:</p><ul><li><em>No calls for testing were issued this week.</em></li></ul><ul><li><em>No calls for testing were issued this week.</em></li></ul><ul><li><em>No calls for testing were issued this week.</em></li></ul><p>If you are a feature implementer and would like your RFC to appear on the above list, add the new \nlabel to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature\nneed testing.</p><p>Always wanted to contribute to open-source projects but did not know where to start?\nEvery week we highlight some tasks from the Rust community for you to pick and get started!</p><p>Some of these tasks may also have mentors available, visit the task page for more information.</p><p><em>No Calls for participation were submitted this week.</em></p><p>Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.</p><p><em>No Calls for papers or presentations were submitted this week.</em></p><p>A relatively neutral week, with lots of real changes but most small in\nmagnitude. Most significant change is rustdoc's move of JS/CSS minification to\nbuild time which cut doc generation times on most benchmarks fairly\nsignificantly.</p><p>3 Regressions, 5 Improvements, 1 Mixed; 2 of them in rollups\n32 artifact comparisons made in total</p><ul><li><em>No RFCs were approved this week.</em></li></ul><p>Every week, <a href=\"https://www.rust-lang.org/team.html\">the team</a> announces the 'final comment period' for RFCs and key PRs\nwhich are reaching a decision. Express your opinions now.</p><ul><li><em>No Cargo Tracking Issues or PRs entered Final Comment Period this week.</em></li></ul><ul><li><em>No Language Team Proposals entered Final Comment Period this week.</em></li></ul><ul><li><em>No Language Reference RFCs entered Final Comment Period this week.</em></li></ul><ul><li><em>No Unsafe Code Guideline Tracking Issues or PRs entered Final Comment Period this week.</em></li></ul><p>Rusty Events between 2025-02-12 - 2025-03-12 🦀</p><p>If you are running a Rust event please add it to the <a href=\"https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com\">calendar</a> to get\nit mentioned here. Please remember to add a link to the event too.\nEmail the <a href=\"mailto:community-team@rust-lang.org\">Rust Community Team</a> for access.</p><blockquote><p>Just because things are useful doesn't mean they are magically sound.</p></blockquote>","contentLength":2396,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Go 1.24 arrives","url":"https://golangweekly.com/issues/542","date":1739318400,"author":"","guid":254,"unread":true,"content":"<li><p><a href=\"https://golangweekly.com/link/165684/rss\">DB Fiddle</a> is a handy online database 'sandbox' for playing with various versions of MySQL, Postgres, and SQLite direct from the browser.</p></li>","contentLength":136,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Exit Interview: JP Phillips","url":"https://fly.io/blog/the-exit-interview-jp/","date":1739318400,"author":"Fly","guid":407,"unread":true,"content":"<div><p>JP Phillips is off to greener, or at least calmer, pastures. He joined us 4 years ago to build the next generation of our orchestration system, and has been one of the anchors of our engineering team. His last day is today. We wanted to know what he was thinking, and figured you might too.</p></div><p><em>Question 1: Why, JP? Just why?</em></p><p>LOL. When I looked at what I wanted to see from here in the next 3-4 years, it didn’t really match up with where we’re currently heading. Specifically, with our new focus on MPG  and [llm] </p><div><p>Editorial comment: Even I don’t know what [llm] is.</p></div><p>The Fly Machines platform is more or less finished, in the sense of being capable of supporting the next iteration of our products. My original desire to join Fly.io was to make Machines a product that would <a href=\"https://fly.io/blog/carving-the-scheduler-out-of-our-orchestrator/\" title=\"\">rid us of HashiCorp Nomad</a>, and I feel like that’s been accomplished.</p><p><em>Where were you hoping to see us headed?</em></p><p>More directly positioned as a cloud provider, rather than a platform-as-a-service; further along the customer journey from “developers” and “startups” to large established companies.</p><p>And, it’s not that I disagree with PAAS work or MPG! Rather, it’s not something that excites me in a way that I’d feel challenged and could continue to grow technically.</p><p><em>Follow up question: does your family know what you’re doing here? Doing to us? Are they OK with it?</em></p><p>Yes, my family was very involved in the decision, before I even talked to other companies.</p><p><em>What’s the thing you’re happiest about having built here? It cannot be “all of ”.</em></p><p>We’ve enabled developers to run workloads from an OCI image and an API call all over the world. On any other cloud provider, the knowledge of how to pull that off comes with a professional certification.</p><p><em>In what file in our  repository would I find that code?</em></p><p><em>So you mean, literally, the whole Fly Machines API, and , the API gateway for Fly Machines?</em></p><p>Yes, all of it. The  API server, the  RPCs it calls, the  finite state machine system, the interface to running VMs.</p><p><em>Is there something you especially like about that design?</em></p><p>I like that it for the most part doesn’t require any central coordination. And I like that the P90 for Fly Machine  calls is sub-5-seconds for pretty much every region except for Johannesburg and Hong Kong.</p><p>I think the FSM design is something I’m proud of; if I could take any code with me, it’d be the  in the  repo.</p><div><p>You can read more about <a href=\"https://fly.io/blog/carving-the-scheduler-out-of-our-orchestrator/\" title=\"\">the  orchestrator JP led over here</a>.  But, a quick decoder ring:  runs independently without any central coordination on thousands of “worker” servers around the globe. It’s structured as an API server for a bunch of finite state machine invocations, where an FSM might be something like “start a Fly Machine” or “create a new Fly Machine” or “cordon off a Fly Machine so we can update it”. Each FSM invocation is comprised of a bunch of steps, each of those steps has callbacks into the  code, and each step is logged in <a href=\"https://github.com/boltdb/bolt\" title=\"\">a BoltDB database</a>.</p></div><p><em>Thinking back, there are like two archetypes of insanely talented developers I’ve worked with. One is the kind that belts out ridiculous amounts of relatively sophisticated code on a whim, at like 3AM. Jerome [who leads our fly-proxy team], is that type. The other comes to projects with what feels like fully-formed, coherent designs that are not super intuitive, and the whole project just falls together around that design. Did you know you were going to do the FSM log thing when you started ?</em></p><p>I definitely didn’t have any specific design in mind when I started on . I think the FSM stuff is a result of work I did at Compose.io / MongoHQ (where it was called “recipes”/“operations”) and the workd I did at HashiCorp using Cadence.</p><p>Once I understood what the product needed to do and look like, having a way to perform deterministic and durable execution felt like a good design.</p><p><a href=\"https://cadenceworkflow.io/\" title=\"\">Cadence</a> is the child of AWS Step Functions and the predecessor to <a href=\"https://temporal.io/\" title=\"\">Temporal</a> (the company).</p><p>One of the biggest gains, with how it works in , is knowing we would need to deploy  all day, every day. If  was in the middle of doing some work, it needed to pick back up right where it left off, post-deploy.</p><p><em>OK, next question. What’s the most impressive thing you saw someone else build here? To make things simpler and take some pressure off the interview, we can exclude any of my works from consideration.</em></p><div><p>Sidebar:  is our state distribution system. While  runs individual Fly Machines for users, each instance is solely responsible for its own state; there’s no global scheduler. But we have platform components, most obviously , our Anycast router, that need to know what’s running where.  is a Rust service that does <a href=\"https://fly.io/blog/building-clusters-with-serf/\" title=\"\">SWIM gossip</a> to propagate information from each worker into a CRDT-structured SQLite database.  essentially means any component on our fleet can do SQLite queries to get near-real-time information about any Fly Machine around the world.</p></div><p>If for no other reason than that we deployed , learned from it, and were able to make significant and valuable improvements — and then migrate to the new system in a short period of time.</p><p>Having a “just SQLite” interface, for async replicated changes around the world in seconds, it’s pretty powerful.</p><p><em>Just as a general-purpose gossip-based SQLite CRDT gossip system?</em></p><p><em>OK, you’re being too nice. What’s your least favorite thing about the platform?</em></p><p>GraphQL. No, Elixir. It’s a tie between GraphQL and Elixir.</p><p>But probably GraphQL, by a hair.</p><p><em>That’s not the answer I expected.</em></p><p>GraphQL slows everyone down, and everything. Elixir only slows me down.</p><p><em>The rest of the platform, you’re fine with? No complaints?</em></p><p>I’m happier now that we have .</p><div><p> is our new . When we launch a Fly Machine,  is our foothold in the machine; this is unlike a normal OCI runtime, where “pid 1” is often the user’s entrypoint program. Our original  was so simple people dunked on it and said it might as well have been a bash script; over time,  has sprouted a bunch of new features.  consolidates those features, and, more importantly, is itself a complete OCI runtime;  can natively run containers inside of Fly Machines.</p></div><p>Before , there really wasn’t any contract between  and . And  was just “whatever we wanted  to be”. That limit its ability to serve us.</p><p>Having  be an OCI-compliant runtime with an API for  to drive is  a big win for the future of the Fly Machines API.</p><p><em>Was I right that we should have used SQLite for , or were you wrong to have used BoltDB?</em></p><p>I still believe Bolt was the right choice. I’ve never lost a second of sleep worried that someone is about to run a SQL update statement on a host, or across the whole fleet, and then mangled all our state data. And limiting the storage interface, by not using SQL, kept ‘s scope managed.</p><p>On the engine side of the platform, which is what  is, I still believe SQL is too powerful for what  does.</p><p><em>If you had this to do over again, would Bolt be precisely what you’d pick, or is there something else you’d want to try? Some cool-ass new KV store?</em></p><p>Nah. But, I’d maybe consider a SQLite database per-Fly-Machine. Then the scope of danger is about as small as it could possibly be.</p><p><em>Whoah, that’s an interesting thought. People sleep on the “keep a zillion little SQLites” design.</em></p><p>Yeah, with per-Machine SQLite, once a Fly Machine is destroyed, we can just zip up the database and stash it in object storage. The biggest hold-up I have about it is how we’d manage the schemas.</p><p><em>OpenTelemetry: were you right all along?</em></p><p><em>I basically attribute oTel at Fly.io to you.</em></p><p>Without oTel, it’d be a disaster trying to troubleshoot the system. I’d have ragequit trying.</p><p><em>I remember there being a cost issue, with how much Honeycomb was going to end up charging us to manage all the data. But that seems silly in retrospect.</em></p><p>For sure. It is 100% part of the decision and the conversation. But: we didn’t have the best track record running a logs/metrics cluster at this fidelity. It was worth the money to pay someone else to manage tracing data.</p><p><em>Strong agree. I think my only issue is just the extent to which it cruds up code. But I need to get over that.</em></p><p>Yes, it’s very explicit. I think the next big part of oTel is going to be auto-instrumentation, for profiling.</p><p><em>You’re a veteran Golang programmer. Say 3 nice things about Rust.</em></p><div><p>Most of our backend is in Go, but , , and  are in Rust.</p></div><ol></ol><p><em>Even I can’t say shit about Option and match.</em></p><p>Match is so much better than anything in Go.</p><p><em>Elixir, Go, and Rust. An honest take on that programming cocktail.</em></p><p>Three’s a crowd, Elixir can stay home.</p><p><em>If you could only lose one, you’d keep Rust.</em></p><p>I’ve learned its shortcomings and the productivity far outweighs having to deal with the Rust compiler.</p><p><em>You’d be unhappy if we moved the  API code from Go to Elixir.</em></p><p><em>I kind of buy the idea of doing orchestration and scheduling code, which is policy-intensive, in a higher-level language.</em></p><p>Maybe. If Ruby had a better concurrency story, I don’t think Elixir would have a place for us.</p><div><p>Here I need to note that Ruby is functionally dead here, and Elixir is ascendant.</p></div><p><em>We have an idiosyncratic management structure. We’re bottom-up, but ambiguously so. We don’t have roadmaps, except when we do. We have minimal top-down technical direction. Critique.</em></p><p>It’s too easy to lose sight of whether your current focus [in what you’re building] is valuable to the company.</p><p><em>The first thing I warn every candidate about on our “do-not-work-here” calls.</em></p><p>I think it comes down to execution, and accountability to actually finish projects. I spun a lot trying to figure out what would be the most valuable work for Fly Machines.</p><p><em>You don’t have to be so nice about things.</em></p><p>We struggle a lot with consistent communication. We change direction a little too often. It got to a point where I didn’t see a point in devoting time and effort into projects, because I’d not be able to show enough value quick enough.</p><p><em>I see things paying off later than we’d hoped or expected they would. Our secret storage system, Pet Semetary, is a good example of this. Our K8s service, FKS, is another obvious one, since we’re shipping MPG on it.</em></p><p><em>This is your second time working Kurt, at a company where he’s the CEO. Give him a 1-4 star rating. He can take it! At least, I think he can take it.</em></p><p><em>Whoah. I did not expect a histogram. Say more about 2023!</em></p><p>We hired too many people, too quickly, and didn’t have the guardrails and structure in place for everybody to be successful.</p><p>Yes. That was my next comment.</p><p><em>Do we secretly agree about GPUs?</em></p><p><em>Our side won the argument in the end! But at what cost?</em></p><p>They were a killer distraction.</p><p><em>Final question: how long will you remain in the first-responder on-call rotation after you leave? I assume at least until August. I have a shift this weekend; can you swap with me? I keep getting weekends.</em></p><p>I am going to be asleep all weekend if any of my previous job changes are indicative.</p><p><em>I sleep through on-call too! But nobody can yell at you for it now. I think you have the comparative advantage over me in on-calling.</em></p><p>Yes I will absolutely take all your future on-call shifts, you have convinced me.</p><p><em>All this aside: it has been a privilege watching you work. I hope your next gig is 100x more relaxing than this was. Or maybe I just hope that for myself. Except: I’ll never escape this place. Thank you so much for doing this.</em></p><p>Thank you! I’m forever grateful for having the opportunity to be a part of Fly.io.</p>","contentLength":11401,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Meta SAM 2.1 is now available in Amazon SageMaker JumpStart","url":"https://aws.amazon.com/blogs/machine-learning/meta-sam-2-1-is-now-available-in-amazon-sagemaker-jumpstart/","date":1739315351,"author":"Marco Punio","guid":126,"unread":true,"content":"<p><em>This blog post is co-written with George Orlin from Meta.</em></p><p>Today, we are excited to announce that Meta’s <a href=\"https://ai.meta.com/sam2/\" target=\"_blank\" rel=\"noopener\">Segment Anything Model (SAM) 2.1</a> vision segmentation model is publicly available through <a href=\"https://aws.amazon.com/sagemaker/jumpstart/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker JumpStart</a> to deploy and run inference. Meta SAM 2.1 provides state-of-the-art video and image segmentation capabilities in a single model. This cutting-edge model supports long-context processing, complex segmentation scenarios, and fine-grained analysis, making it ideal for automating processes for various industries such as medical imaging in healthcare, satellite imagery for environment monitoring, and object segmentation for autonomous systems. Meta SAM 2.1 is well suited for zero-shot object segmentation and accurate object detection based on simple prompts such as point coordinates and bounding boxes in a frame for video tracking and image masking.</p><p>This model was predominantly trained on AWS, and AWS will also be the first cloud provider to make it available to customers. In this post, we walk through how to discover and deploy the Meta SAM 2.1 model using SageMaker JumpStart.</p><p>Meta SAM 2.1 is a state-of-the-art vision segmentation model designed for high-performance computer vision tasks, enabling advanced object detection and segmentation workflows. Building upon its <a href=\"https://segment-anything.com/\" target=\"_blank\" rel=\"noopener\">predecessor</a>, version 2.1 introduces enhanced segmentation accuracy, robust generalization across diverse datasets, and scalability for production-grade applications. These features enable AI researchers and developers in computer vision, image processing, and data-driven research to improve tasks that require detailed analysis segmentation across multiple fields.</p><p>Meta SAM 2.1 has a streamlined architecture that is optimized for integration with popular model-serving frameworks like TorchServe and can be deployed on <a href=\"https://aws.amazon.com/sagemaker-ai\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker AI</a> to power real-time or batch inference pipelines. Meta SAM 2.1 empowers organizations to achieve precise segmentation outcomes in vision-centric workflows with minimal configuration and maximum efficiency.</p><p>Meta SAM 2.1 offers multiple variants—Tiny, Small, Base Plus, and Large—available now on SageMaker JumpStart, balancing model size, speed, and segmentation performance to cater to diverse application needs.</p><h2>SageMaker JumpStart overview</h2><p>SageMaker JumpStart offers access to a broad selection of publicly available foundation models (FMs). These pre-trained models serve as powerful starting points that can be deeply customized to address specific use cases. You can now use state-of-the-art model architectures, such as language models, computer vision models, and more, without having to build them from scratch.</p><p>With SageMaker JumpStart, you can deploy models in a secure environment. Models hosted on JumpStart can be provisioned on dedicated SageMaker Inference instances, including <a href=\"https://aws.amazon.com/machine-learning/trainium/\" target=\"_blank\" rel=\"noopener\">AWS Trainium</a> and <a href=\"https://aws.amazon.com/machine-learning/inferentia/\" target=\"_blank\" rel=\"noopener\">AWS Inferentia</a> based instances, and are isolated within your virtual private cloud (VPC). This enforces data security and compliance, because the models operate under your own VPC controls, rather than in a shared public environment. After deploying an FM, you can further customize and fine-tune it using the extensive capabilities of SageMaker AI, including SageMaker Inference for deploying models and container logs for improved observability. With SageMaker AI, you can streamline the entire model deployment process.</p><p>Make sure you have the following prerequisites to deploy Meta SAM 2.1 and run inference:</p><h2>Discover Meta SAM 2.1 in SageMaker JumpStart</h2><p>SageMaker JumpStart provides FMs through two primary interfaces: SageMaker Studio and the <a href=\"https://github.com/aws/sagemaker-python-sdk\" target=\"_blank\" rel=\"noopener\">SageMaker Python SDK.</a> This provides multiple options to discover and use hundreds of models for your specific use case.</p><p>SageMaker Studio is a comprehensive IDE that offers a unified, web-based interface for performing all aspects of the machine learning (ML) development lifecycle. From preparing data to building, training, and deploying models, SageMaker Studio provides purpose-built tools to streamline the entire process. In SageMaker Studio, you can access SageMaker JumpStart to discover and explore the extensive catalog of FMs available for <a href=\"https://aws.amazon.com/blogs/machine-learning/reduce-model-deployment-costs-by-50-on-average-using-sagemakers-latest-features/\" target=\"_blank\" rel=\"noopener\">deployment to inference capabilities on SageMaker Inference</a>.</p><p>You can access the SageMaker JumpStart UI through either <a href=\"https://aws.amazon.com/sagemaker/unified-studio/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker Unified Studio</a> or SageMaker Studio. To deploy Meta SAM 2.1 using the SageMaker JumpStart UI, complete the following steps:</p><p>In SageMaker Unified Studio, on the menu, choose .</p><p>If you’re already on the SageMaker Studio console, choose  in the navigation pane.</p><p>You will be prompted to create a project, after which you can begin deployment.</p><p>Alternatively, you can use the SageMaker Python SDK to programmatically access and use SageMaker JumpStart models. This approach allows for greater flexibility and integration with existing AI/ML workflows and pipelines. By providing multiple access points, SageMaker JumpStart helps you seamlessly incorporate pre-trained models into your AI/ML development efforts, regardless of your preferred interface or workflow.</p><h2>Deploy Meta SAM 2.1 for inference using SageMaker JumpStart</h2><p>On the SageMaker JumpStart landing page, you can discover the public pre-trained models offered by SageMaker AI. You can choose the Meta model provider tab to discover the Meta models available.</p><p>If you’re using SageMaker Studio and don’t see the SAM 2.1 models, update your SageMaker Studio version by shutting down and restarting. For more information about version updates, refer to <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/studio-tasks-update-apps.html\" target=\"_blank\" rel=\"noopener\">Shut down and Update Studio Classic Apps</a>.</p><p>You can choose the model card to view details about the model such as license, data used to train, and how to use. You can also find two buttons,  and , which help you use the model.</p><p>When you choose , you should be prompted to the next screen to choose an endpoint name and instance type to initiate deployment.</p><p>Upon defining your endpoint settings, you can proceed to the next step to use the model.</p><h2>Deploy Meta SAM 2.1 vision segmentation model for inference using the Python SDK</h2><p>When you choose , model deployment will start. Alternatively, you can deploy through the example notebook by choosing . The notebook provides end-to-end guidance on how to deploy the model for inference and clean up resources.</p><p>To deploy using a notebook, you start by selecting an appropriate model, specified by the . You can deploy any of the selected models on SageMaker AI.</p><p>You can deploy a Meta SAM 2.1 vision segmentation model using SageMaker JumpStart with the following SageMaker Python SDK code:</p><div><pre><code>from sagemaker.jumpstart.model import JumpStartModel \nmodel = JumpStartModel(model_id = \"meta-vs-sam-2-1-hiera-tiny\") \npredictor = model.deploy()</code></pre></div><p>This deploys the model on SageMaker AI with default configurations, including default instance type and default VPC configurations. You can change these configurations by specifying non-default values in <a href=\"https://sagemaker.readthedocs.io/en/stable/api/inference/model.html#sagemaker.jumpstart.model.JumpStartModel\" target=\"_blank\" rel=\"noopener\">JumpStartModel</a>. After it’s deployed, you can run inference against the deployed endpoint through the SageMaker predictor. There are three tasks that are available with this endpoint: automatic mask generator, image predictor, and video predictor. We provide a code snippet for each later in this post. To use the predictor, a certain payload schema needs to be followed. The endpoint has sticky sessions enabled, so to start inference, you need to send a  payload:</p><div><pre><code>def start_session(asset_type, asset_path):\n\n    asset_base64 = None\n    \n     with open(image_path, 'rb') as f:\n            asset_base64 = base64.b64encode(f.read()).decode('utf-8')\n    \n    response = predictor.invoke_endpoint(\n        EndpointName=endpoint_name,\n        ContentType='application/json',\n        Body=json.dumps({\n                    \"type\": \"start_session\",\n                    \"input_type\": asset_type,\n                    \"path\": asset_base64 \n                }),\n        SessionId=\"NEW_SESSION\",\n    )\n    \n    session_id = response.headers.get(\"x-amzn-sagemaker-new-session-id\")\n    \n    return session_id\n</code></pre></div><p>The  invocation needs an input media type of either image or video and the base64 encoded data of the media. This will launch a session with an instance of the model and load the media to be segmented.</p><p>To close a session, send a  invocation:</p><div><pre><code>def close_session(session_id):\n    response = predictor.invoke_endpoint(\n        EndpointName=endpoint_name,\n        ContentType='application/json',\n        Body=json.dumps({\n                    \"type\": \"close_session\",\n                    \"session_id\": session_id\n                }),\n        SessionId=session_id,\n    )\n    \n    session_id = response.headers.get(\"x-amzn-sagemaker-closed-session-id\")\n    \n    return session_id\n</code></pre></div><p>If <code>x-amzn-sagemaker-closed-session-id</code> exists as a header, then the session has been successfully closed.</p><p>To continue a session and retrieve the session ID of the existing session, the response header will have the <code>x-amzn-sagemaker-session-id</code> key with the current session ID for any operation that is not  or . Operations that aren’t  or  need to be invoked with a response stream. This is due to the size of the resulting payload being larger than what SageMaker real-time endpoints can return.</p><p>This is a basic example of interacting with the SAM 2.1 SageMaker JumpStart endpoint with sticky sessions. The following examples for each of the tasks reference these operations without repeating them. The returned data is of mime type JSONL. For more complete examples, refer to the example notebooks for Meta SAM 2.1 on SageMaker Jumpstart.</p><h2>Recommended instances and benchmarks</h2><p>The following table lists all the Meta SAM 2.1 models available in SageMaker JumpStart along with the , default instance types, and maximum number of total tokens (sum of number of input tokens and number of generated tokens) supported for each of these models. For increased context length, you can modify the default instance type in the SageMaker JumpStart UI.</p><table border=\"1px\" cellpadding=\"5px\"><tbody><tr></tr><tr><td width=\"83\">meta-vs-sam-2-1-hiera-tiny</td><td width=\"161\">ml.g6.24xlarge (5.5 MB total image or video size)</td><td width=\"267\"></td></tr><tr><td width=\"83\">meta-vs-sam-2-1-hiera-small</td><td width=\"161\">ml.g6.24xlarge (5.5 MB total image or video size)</td><td width=\"267\"></td></tr><tr><td width=\"83\">meta-vs-sam-2-1-hiera-base-plus</td><td width=\"161\">ml.g6.24xlarge (5.5 MB total image or video size)</td><td width=\"267\"></td></tr><tr><td width=\"83\">meta-vs-sam-2-1-hiera-large</td><td width=\"161\">ml.g6.24xlarge (5.5 MB total image or video size)</td><td width=\"267\"></td></tr></tbody></table><h2>Meta SAM 2.1 use cases: Inference and prompt examples</h2><p>After you deploy the model using SageMaker JumpStart, you should be able to see a reference Jupyter notebook that references the parser and helper functions needed to begin using Meta SAM 2.1. After you follow those cells in the notebook, you should be ready to begin using the model’s vision segmentation capabilities.</p><p>Meta SAM 2.1 offers support for three different tasks (automatic mask generator, image predictor, video predictor) to generate masks for various objects in images, including object tracking in videos. In the following examples, we demonstrate how to use the automatic mask generator and image predictor on a JPG of a truck. This  file is stored in the  bucket; you can access it with the following code:</p><div><pre><code>s3_bucket = f\"jumpstart-cache-prod-{region}\"\nkey_prefix = \"inference-notebook-assets\"\n\ndef download_from_s3(key_filenames):\n    for key_filename in key_filenames:\n        s3.download_file(s3_bucket, f\"{key_prefix}/{key_filename}\", key_filename)\n        \ntruck_jpg = \"truck.jpg\"\n\n#Download images.\ndownload_from_s3(key_filenames=[truck_jpg])\ndisplay(Image(filename=truck_jpg))\n</code></pre></div><p>After you have your image and it is encoded, you can create masks for objects in the image. For use cases where you want to generate masks for every object in the image, you can use the automatic mask generator task.</p><p>The automatic mask generator is great for AI researchers for computer vision tasks and applications such as medical imaging and diagnostics to automatically segment regions of interest like tumors or specific organs to provide more accurate diagnostic support. Additionally, the automatic mask generator can be particularly useful in the autonomous vehicle space, in which it can segment out elements in a camera like pedestrians, vehicles, and other objects. Let’s use the automatic mask generator to generate masks for all the objects in .</p><p>The following code is the prompt to generate masks for your base64 encoded image:</p><div><pre><code># Start session\nsession_id = start_session(\"image\", truck_jpg)\n    \n# Generate and visualize masks with basic parameters\nresponse = runtime_client.invoke_endpoint_with_response_stream(\n        EndpointName=endpoint_name,\n        ContentType='application/json',\n        Body=json.dumps({\n            \"type\": \"generate_automatic_masks\",\n            \"session_id\": session_id,\n            \"points_per_side\": 32,\n            \"min_mask_region_area\": 100\n        }),\n        SessionId=session_id,\n        Accept=\"application/jsonlines\"\n    )\n    \n# Parse response stream\nparser = StreamParser()\nfor event in response['Body']:\n    parser.write(event)\n\nmasks = parser.get_responses()\n\n# End session\nend_session(session_id)\n</code></pre></div><p>We receive the following output (parsed and visualized).</p><p>Additionally, you can choose which objects in the provided image you want to create a mask for by adding points within that object for Meta SAM 2.1 to create. A use case for the image predictor can be valuable for tasks related to design and modeling by automating processes that typically require manual efforts. For example, the image predictor can automate turning 2D images into 3D models by analyzing 2D images of blueprints, sketches, or floor plans and generating preliminary 3D models. This is one of many examples of how the image predictor can act as a bridge between 2D and 3D construction across many different tasks. We use the following image with the points that we used to prompt Meta SAM 2.1 for masking the object.</p><p>The following code is used to prompt Meta SAM 2.1 and plot the coordinates:</p><div><pre><code># Start session\nsession_id = start_session(\"image\", truck_jpg)\n\npoints = [\n            {\"type\": \"point\", \"coordinates\": [500, 375], \"label\": 1},\n            {\"type\": \"point\", \"coordinates\": [1125, 625], \"label\": 1}\n         ]\n    \n# Add multiple points\nresponse = runtime_client.invoke_endpoint_with_response_stream(\n        EndpointName=endpoint_name,\n        ContentType='application/json',\n        Body=json.dumps({\n            \"type\": \"add_points\",\n            \"session_id\": session_id,\n            \"points\": [p[\"coordinates\"] for p in points],\n            \"labels\": [p[\"label\"] for p in points],\n            \"clear_old_points\": clear_old_point,\n        }),\n        SessionId=session_id,\n        Accept=\"application/jsonlines\"\n    )\n\n# Parse response stream\nparser = StreamParser()\nfor event in response['Body']:\n    parser.write(event)\n\n# Intermediate Response\nmasks = parser.get_responses()\n    \nresponse = runtime_client.invoke_endpoint_with_response_stream(\n        EndpointName=endpoint_name,\n        ContentType='application/json',\n        Body=json.dumps({\n            \"type\": \"predict\",\n            \"session_id\": session_id,\n            \"multimask_output\": True,\n            \"return_logits\": True\n        }),\n        SessionId=session_id,\n        Accept=\"application/jsonlines\"\n    )\n\n# Parse response stream\nparser = StreamParser()\nfor event in response['Body']:\n    parser.write(event)\n\nmasks = parser.get_responses()\n\n# End session\nend_session(session_id)\n</code></pre></div><p>We receive the following output (parsed and visualized).</p><p>We now demonstrate how to prompt Meta SAM 2.1 for object tracking on video. One use case would be for ergonomic data collection and training purposes. You can use the video predictor to analyze the movement and posture of humans in real time, serving as a way to reduce injury and improve performance by setting alarms for bad posture or movements. Let’s start by accessing the  file [1] from the  S3 bucket defined in the following code:</p><div><pre><code>basketball_mp4 = \"basketball-layup.mp4\"\n\n#Download video\ndownload_from_s3(key_filenames=[basketball_mp4])\ndisplay(Video(filename=basketball_mp4))</code></pre></div><p>The following code shows how you can set up the prompt format to track objects in the video. The first object will use coordinates to track and not track, and the second object will track one coordinate.</p><div><pre><code># Start session\nsession_id = start_session(\"video\", basketball_mp4)\n\n# Object 1\nprompts1 = [\n        {\"type\": \"point\", \"coordinates\": [1478, 649], \"label\": 1},\n        {\"type\": \"point\", \"coordinates\": [1433, 689], \"label\": 0},\n    ]\n    \n# Extract points and labels\npoints = []\nlabels = []\nfor prompt in prompts1:\n    if prompt[\"type\"] == \"point\":\n        points.append(prompt[\"coordinates\"])\n        labels.append(prompt[\"label\"])\n\nrequest = {\n        \"type\": \"add_points\",\n        \"session_id\": session_id,\n        \"frame_index\": 0,\n        \"object_id\": 1,\n        \"points\": points,\n        \"labels\": labels,\n        \"clear_old_points\": True,\n    }\n    \n# Add multiple points\nresponse = runtime_client.invoke_endpoint_with_response_stream(\n        EndpointName=endpoint_name,\n        ContentType='application/json',\n        Body=json.dumps(request),\n        SessionId=session_id,\n        Accept=\"application/jsonlines\"\n    )\n\n# Parse response stream\nparser = StreamParser()\nfor event in response['Body']:\n    parser.write(event)\n\n# Intermediate Response\nmasks = parser.get_responses()\n\n# Object 2\nprompts2 = [{\"type\": \"point\", \"coordinates\": [1433, 689], \"label\": 1}]\n\n# Extract points and labels\npoints = []\nlabels = []\nfor prompt in prompts2:\n    if prompt[\"type\"] == \"point\":\n        points.append(prompt[\"coordinates\"])\n        labels.append(prompt[\"label\"])\n\nrequest = {\n        \"type\": \"add_points\",\n        \"session_id\": session_id,\n        \"frame_index\": 0,\n        \"object_id\": 2,\n        \"points\": points,\n        \"labels\": labels,\n        \"clear_old_points\": True,\n    }\n    \n# Add multiple points\nresponse = runtime_client.invoke_endpoint_with_response_stream(\n        EndpointName=endpoint_name,\n        ContentType='application/json',\n        Body=json.dumps(request),\n        SessionId=session_id,\n        Accept=\"application/jsonlines\"\n    )\n\n# Parse response stream\nparser = StreamParser()\nfor event in response['Body']:\n    parser.write(event)\n\n# Intermediate Response\nmasks = parser.get_responses()\n    \nresponse = runtime_client.invoke_endpoint_with_response_stream(\n        EndpointName=endpoint_name,\n        ContentType='application/json',\n        Body=json.dumps({\n            \"type\": \"propagate_in_video\",\n            \"session_id\": session_id,\n            \"start_frame_index\": 0,\n        }),\n        SessionId=session_id,\n        Accept=\"application/jsonlines\"\n    )\n\n# Parse response stream\nparser = StreamParser()\nfor event in response['Body']:\n    parser.write(event)\n\nmasks = parser.get_responses()\n\n# End session\nend_session(session_id)\n</code></pre></div><p>We receive the following output (parsed and visualized).</p><p>Here we can see that Meta SAM 2.1 Tiny was able to successfully track the objects based off the coordinates that were provided in prompt.</p><p>To avoid incurring unnecessary costs, when you’re done, delete the SageMaker AI endpoints using the following code:</p><div><pre><code>predictor.delete_model()\npredictor.delete_endpoint()</code></pre></div><p>Alternatively, to use the SageMaker AI console, complete the following steps:</p><ol><li>On the SageMaker AI console, under in the navigation pane, choose</li><li>Search for the embedding and text generation endpoints.</li><li>On the endpoint details page, choose .</li><li>Choose  again to confirm.</li></ol><p>In this post, we explored how SageMaker JumpStart empowers data scientists and ML engineers to discover, access, and deploy a wide range of pre-trained FMs for inference, including Meta’s most advanced and capable models to date. Get started with SageMaker JumpStart and Meta SAM 2.1 models today. For more information about SageMaker JumpStart, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/studio-jumpstart.html\" target=\"_blank\" rel=\"noopener\">SageMaker JumpStart pretrained models</a> and <a href=\"https://aws.amazon.com/sagemaker/jumpstart/getting-started/?sagemaker-jumpstart-cards.sort-by=item.additionalFields.priority&amp;sagemaker-jumpstart-cards.sort-order=asc&amp;awsf.sagemaker-jumpstart-filter-product-type=*all&amp;awsf.sagemaker-jumpstart-filter-text=*all&amp;awsf.sagemaker-jumpstart-filter-vision=*all&amp;awsf.sagemaker-jumpstart-filter-tabular=*all&amp;awsf.sagemaker-jumpstart-filter-audio-tasks=*all&amp;awsf.sagemaker-jumpstart-filter-multimodal=*all&amp;awsf.sagemaker-jumpstart-filter-RL=*all\" target=\"_blank\" rel=\"noopener\">Getting started with Amazon SageMaker JumpStart</a>.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/08/26/Marco-Punio.jpg\" alt=\"\" width=\"100\" height=\"134\"><a href=\"https://www.linkedin.com/in/marcpunio/\" target=\"_blank\" rel=\"noopener\">Marco Punio</a> is a Sr. Specialist Solutions Architect focused on generative AI strategy, applied AI solutions, and conducting research to help customers hyper-scale on AWS. As a member of the 3rd Party Model Provider Applied Sciences Solutions Architecture team at AWS, he is a Global Lead for the Meta – AWS Partnership and technical strategy. Based in Seattle, WA, Marco enjoys writing, reading, exercising, and building applications in his free time.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/11/deepak-rupakula-100.jpg\" alt=\"\" width=\"100\" height=\"140\"><a href=\"https://www.linkedin.com/in/deepak-rupakula-042b956/\" target=\"_blank\" rel=\"noopener\">Deepak Rupakula</a> is a Principal GTM lead in the specialists group at AWS. He focuses on developing GTM strategy for large language models like Meta across AWS services like Amazon Bedrock and Amazon SageMaker AI. With over 15 years of experience in the tech industry, his experience includes leadership roles in product management, customer success, and analytics.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/11/harish-rao-100.jpg\" alt=\"\" width=\"100\" height=\"122\"><a href=\"https://www.linkedin.com/in/harishvs/\" target=\"_blank\" rel=\"noopener\">Harish Rao</a> is a Senior Solutions Architect at AWS, specializing in large-scale distributed AI training and inference. He empowers customers to harness the power of AI to drive innovation and solve complex challenges. Outside of work, Harish embraces an active lifestyle, enjoying the tranquility of hiking, the intensity of racquetball, and the mental clarity of mindfulness practices.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/11/baladithya-balamurugan-100.jpg\" alt=\"\" width=\"100\" height=\"120\"><a href=\"https://www.linkedin.com/in/baladithyabalamurugan/\" target=\"_blank\" rel=\"noopener\">Baladithya Balamurugan</a> is a Solutions Architect at AWS focused on ML deployments for inference and using AWS Neuron to accelerate training and inference. He works with customers to enable and accelerate their ML deployments on services such as Amazon SageMaker AI and Amazon EC2. Based in San Francisco, Baladithya enjoys tinkering, developing applications, and building his homelab in his free time.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2020/12/01/Banu-Nagasundaram.jpg\" alt=\"\" width=\"101\" height=\"140\"><a href=\"https://www.linkedin.com/in/banunagasundaram/\" target=\"_blank\" rel=\"noopener\">Banu Nagasundaram</a> leads product, engineering, and strategic partnerships for Amazon SageMaker JumpStart, SageMaker AI’s machine learning and generative AI hub. She is passionate about building solutions that help customers accelerate their AI journey and unlock business value.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/09/10/naman.png\" alt=\"\" width=\"100\" height=\"133\"><a href=\"https://www.linkedin.com/in/namannandan/\" target=\"_blank\" rel=\"noopener\">Naman Nandan</a> is a software development engineer at AWS, specializing in enabling large-scale AI/ML inference workloads on Amazon SageMaker AI using TorchServe, a project jointly developed by AWS and Meta. In his free time, he enjoys playing tennis and going on hikes.</p>","contentLength":21819,"flags":null,"enclosureUrl":"https://d2908q01vomqb2.cloudfront.net/artifacts/DBSBlogs/ML-17926/basketball-layup-masked.mp4","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Mapping the Unix Magic Poster – An Interactive Annotation Project","url":"https://drio.github.io/unixmagic/","date":1739312557,"author":"drio","guid":442,"unread":true,"content":"<p>I built this as a static site that lets us annotate the Unix Magic poster by placing markers on references and adding descriptions to explain them. I've added a few so far, but there's much more to document.</p><p>What I love about this approach is that contributions happen not just on the site itself but also through PRs, where we can discuss and refine the details of each reference. Feel free to send a PR!</p><p>Would love feedback, suggestions, and PRs from the community!</p>","contentLength":465,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43019136"},{"title":"Falcon 3 models now available in Amazon SageMaker JumpStart","url":"https://aws.amazon.com/blogs/machine-learning/falcon-3-models-now-available-in-amazon-sagemaker-jumpstart/","date":1739312187,"author":"Niithiyn Vijeaswaran","guid":125,"unread":true,"content":"<h2>Overview of the Falcon 3 family of models</h2><p>The Falcon 3 family, developed by Technology Innovation Institute (TII) in Abu Dhabi, represents a significant advancement in open source language models. This collection includes five base models ranging from 1 billion to 10 billion parameters, with a focus on enhancing science, math, and coding capabilities. The family consists of Falcon3-1B-Base, Falcon3-3B-Base, Falcon3-Mamba-7B-Base, Falcon3-7B-Base, and Falcon3-10B-Base along with their instruct variants.</p><p>These models showcase innovations such as efficient pre-training techniques, scaling for improved reasoning, and knowledge distillation for better performance in smaller models. Notably, the Falcon3-10B-Base model achieves state-of-the-art performance for models under 13 billion parameters in zero-shot and few-shot tasks. The Falcon 3 family also includes various fine-tuned versions like Instruct models and supports different quantization formats, making them versatile for a wide range of applications.</p><p>Currently, SageMaker JumpStart offers the base versions of Falcon3-3B, Falcon3-7B, and Falcon3-10B, along with their corresponding instruct variants, as well as Falcon3-1B-Instruct.</p><h2>Get started with SageMaker JumpStart</h2><p>SageMaker JumpStart is a machine learning (ML) hub that can help accelerate your ML journey. With SageMaker JumpStart, you can evaluate, compare, and select pre-trained foundation models (FMs), including Falcon 3 models. These models are fully customizable for your use case with your data.</p><p>Deploying a Falcon 3 model through SageMaker JumpStart offers two convenient approaches: using the intuitive SageMaker JumpStart UI or implementing programmatically through the SageMaker Python SDK. Let’s explore both methods to help you choose the approach that best suits your needs.</p><h2>Deploy Falcon 3 using the SageMaker JumpStart UI</h2><p>Complete the following steps to deploy Falcon 3 through the JumpStart UI:</p><h2>Deploy Falcon 3 programmatically using the SageMaker Python SDK</h2><p>For teams looking to automate deployment or integrate with existing MLOps pipelines, you can use the SageMaker Python SDK:</p><div><pre><code>from sagemaker.serve.builder.model_builder import ModelBuilder\nfrom sagemaker.serve.builder.schema_builder import SchemaBuilder\nfrom sagemaker.jumpstart.model import ModelAccessConfig\nfrom sagemaker.session import Session\nimport logging\n\nsagemaker_session = Session()\n\nartifacts_bucket_name = sagemaker_session.default_bucket()\nexecution_role_arn = sagemaker_session.get_caller_identity_arn()\n\n\njs_model_id = \"huggingface-llm-falcon-3-10B-base\"\n\ngpu_instance_type = \"ml.g5.12xlarge\"  \n\nresponse = \"Hello, I'm a language model, and I'm here to help you with your English.\"\n\nsample_input = {\n    \"inputs\": \"Hello, I'm a language model,\",\n    \"parameters\": {\"max_new_tokens\": 128, \"top_p\": 0.9, \"temperature\": 0.6},\n}\n\nsample_output = [{\"generated_text\": response}]\n\nschema_builder = SchemaBuilder(sample_input, sample_output)\n\nmodel_builder = ModelBuilder(\n    model=js_model_id,\n    schema_builder=schema_builder,\n    sagemaker_session=sagemaker_session,\n    role_arn=execution_role_arn,\n    log_level=logging.ERROR\n)\n\nmodel= model_builder.build()\n\npredictor = model.deploy(model_access_configs={js_model_id:ModelAccessConfig(accept_eula=True)}, accept_eula=True)</code></pre></div><p>Run inference on the predictor:</p><div><pre><code>predictor.predict(sample_input)</code></pre></div><p>To clean up the model and endpoint, use the following code:</p><div><pre><code>predictor.delete_model()\npredictor.delete_endpoint()</code></pre></div><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/05/30/NIITHIYN_ARP-2-1.jpg\" alt=\"\" width=\"100\" height=\"100\">&nbsp;is a Generative AI Specialist Solutions Architect with the Third-Party Model Science team at AWS. His area of focus is generative AI and AWS AI Accelerators. He holds a Bachelor’s degree in Computer Science and Bioinformatics.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/11/27/ml-17555-karpmar.jpg\" alt=\"Marc Karp\" width=\"100\" height=\"114\"> is an ML Architect with the Amazon SageMaker Service team. He focuses on helping customers design, deploy, and manage ML workloads at scale. In his spare time, he enjoys traveling and exploring new places.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/11/27/ml-17555-raghu.png\" alt=\"Raghu\" width=\"100\" height=\"100\"> is a Senior ML Solutions Architect with the Amazon SageMaker Service team. He focuses on helping customers build, deploy, and migrate ML production workloads to SageMaker at scale. He specializes in machine learning, AI, and computer vision domains, and holds a master’s degree in Computer Science from UT Dallas. In his free time, he enjoys traveling and photography.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2020/12/01/Banu-Nagasundaram.jpg\" alt=\"\" width=\"101\" height=\"140\"> leads product, engineering, and strategic partnerships for SageMaker JumpStart, SageMaker’s machine learning and GenAI hub. She is passionate about building solutions that help customers accelerate their AI journey and unlock business value.</p>","contentLength":4499,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"GenAI Patterns: Query Rewriting","url":"https://martinfowler.com/articles/gen-ai-patterns/#query-rewrite","date":1739307480,"author":"Martin Fowler","guid":170,"unread":true,"content":"<p>Users often have difficulty writing the most effective queries.\n       and I explain <a href=\"https://martinfowler.com/articles/gen-ai-patterns/#query-rewrite\">Query Rewriting</a>:\n      getting an LLM to formulate alternative queries to send to a RAG's\n      retriever. </p>","contentLength":192,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building a virtual meteorologist using Amazon Bedrock Agents","url":"https://aws.amazon.com/blogs/machine-learning/building-a-virtual-meteorologist-using-amazon-bedrock-agents/","date":1739307184,"author":"Salman Ahmed","guid":124,"unread":true,"content":"<p>The integration of <a href=\"https://aws.amazon.com/ai/generative-ai/\" target=\"_blank\" rel=\"noopener\">generative AI</a> capabilities is driving transformative changes across many industries. Although weather information is accessible through multiple channels, businesses that heavily rely on meteorological data require robust and scalable solutions to effectively manage and use these critical insights and reduce manual processes. This solution demonstrates how to create an AI-powered virtual meteorologist that can answer complex weather-related queries in natural language. We use various AWS services to deploy a complete solution that you can use to interact with an API providing real-time weather information. In this solution, we use <a href=\"https://aws.amazon.com/bedrock/agents/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock Agents</a>.</p><p>Amazon Bedrock Agents helps to streamline workflows and automate repetitive tasks. Amazon Bedrock Agents can securely connect to your company’s data sources and augments the user’s request with accurate responses. You can use Amazon Bedrock Agents to architect an action schema tailored to your requirements, granting you control whenever the agent initiates the specified action. This versatile approach equips you to seamlessly integrate and execute business logic within your preferred backend service, fostering a cohesive combination of functionality and flexibility. There is also memory retention across the interaction allowing a more personalized user experience.</p><p>In this post, we present a streamlined approach to deploying an AI-powered agent by combining Amazon Bedrock Agents and a <a href=\"https://aws.amazon.com/what-is/foundation-models/\" target=\"_blank\" rel=\"noopener\">foundation model</a> (FM). We guide you through the process of configuring the agent and implementing the specific logic required for the virtual meteorologist to provide accurate weather-related responses. Additionally, we use various AWS services, including <a href=\"https://aws.amazon.com/amplify/\" target=\"_blank\" rel=\"noopener\">AWS Amplify</a> for hosting the front end, <a href=\"https://aws.amazon.com/lambda/\" target=\"_blank\" rel=\"noopener\">AWS Lambda</a> functions for handling request logic, <a href=\"https://aws.amazon.com/cognito/\" target=\"_blank\" rel=\"noopener\">Amazon Cognito</a> for user authentication, and <a href=\"https://aws.amazon.com/iam/\" target=\"_blank\" rel=\"noopener\">AWS Identity and Access Management</a> (IAM) for controlling access to the agent.</p><p>The diagram gives an overview and highlights the key components. The architecture uses Amazon Cognito for user authentication and Amplify as the hosting environment for our front-end application. Amazon Bedrock Agents forwards the details from the user query to the action groups, which further invokes custom Lambda functions. Each action group and Lambda function handles a specific task:</p><ol><li> – Processes geographic coordinates (geo-coordinates) to get details about a specific location</li><li> Gathers weather information for the provided location</li><li> Obtains the current date and time</li></ol><p>You must have the following in place to complete the solution in this post:</p><h2>Deploy solution resources using AWS CloudFormation</h2><p>When you run the AWS CloudFormation template, the following resources are deployed (note that costs will be incurred for the AWS resources used):</p><ul><li>Lambda resources: \n  <ul><li>Function – <code>&lt;Stack name&gt;-geo-coordinates-&lt;auto-generated&gt;</code></li><li>Function – <code>&lt;Stack name&gt;-weather-&lt;auto-generated&gt;</code></li><li>Function – <code>&lt;Stack name&gt;-date-time-&lt;auto-generated&gt;</code></li></ul></li><li>Amazon Bedrock Agents: virtual-meteorologist \n  <ul><li>Action groups (1) – <code>obtain-latitude-longitude-from-place-name</code></li><li>Action groups (2) – <code>obtain-weather-information-with-coordinates</code></li><li>Action groups (3) – <code>get-current-date-time-from-timezone</code></li></ul></li></ul><p>After you deploy the CloudFormation template, copy the following from the tab on the <a href=\"https://console.aws.amazon.com/cloudformation\" target=\"_blank\" rel=\"noopener\">CloudFormation console</a> to be used during the configuration of your application after it’s deployed in AWS Amplify.</p><ul></ul><h2>Deploy the AWS Amplify application</h2><p>You need to manually deploy the Amplify application using the front-end code found on GitHub. Complete the following steps:</p><ol><li>Download the front-end code AWS-Amplify-Frontend.zip from <a href=\"https://github.com/aws-samples/virtual-meteorologist-using-amazon-bedrock-agents\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</li><li>Use the .zip file to manually <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/manual-deploys.html\" target=\"_blank\" rel=\"noopener\">deploy</a> the application in Amplify.</li><li>Return to the Amplify page and use the domain it automatically generated to access the application.</li></ol><h3>Use Amazon Cognito for user authentication</h3><p>Amazon Cognito is an identity service that you can use to authenticate and authorize users. We use Amazon Cognito in our solution to verify the user before they can use the application. We also use identity pool to provide temporary AWS credentials for the user while they interact with Amazon Bedrock API.</p><h3>Use Amazon Bedrock Agents to automate application tasks</h3><p>With Amazon Bedrock Agents, you can build and configure autonomous agents in your application. An agent helps your end users complete actions based on organization data and user input. Agents orchestrate interactions between FMs, data sources, software applications, and user conversations.</p><h3>Use action group to define actions that Amazon Bedrock agents perform</h3><p>An action group defines a set of related actions that an Amazon Bedrock agent can perform to assist users. When configuring an action group, you have options for handling user-provided information, including adding user input to the agent’s action group, passing data to a Lambda function for custom business logic, or returning control directly through the InvokeAgent response. In our application, we created three action groups to give the Amazon Bedrock agent these essential functionalities: retrieving coordinates for specific locations, obtaining current date and time information, and fetching weather data for given locations. These action groups enable the agent to access and process crucial information, enhancing its ability to respond accurately and comprehensively to user queries related to location-based services and weather conditions.</p><h3>Use Lambda for Amazon Bedrock action group</h3><p>As part of this solution, three Lambda functions are deployed to support the action groups defined for our Amazon Bedrock agent:</p><ol><li><strong>Location coordinates Lambda function</strong> – This function is triggered by the <code>obtain-latitude-longitude-from-place-name</code> action group. It takes a place name as input and returns the corresponding latitude and longitude coordinates. The function uses a geocoding service or database to perform this lookup.</li><li><strong>Date and time Lambda function</strong> – Invoked by the <code>get-current-date-time-from-timezone</code> action group, this function provides the current date and time information.</li><li><strong>Weather information Lambda function</strong> – This function is called by the <code>obtain-weather-information-with-coordinates</code> action group. It accepts geo-coordinates from the first Lambda function and returns current weather conditions and forecasts for the specified area. This Lambda function used a weather API to fetch up-to-date meteorological data.</li></ol><p>Each of these Lambda functions receives an input event containing relevant metadata and populated fields from the Amazon Bedrock agent’s API operation or function parameters. The functions process this input, perform their specific tasks, and return a response with the required information. This response is then used by the Amazon Bedrock agent to formulate its reply to the user’s query. By using these Lambda functions, our Amazon Bedrock agent gains the ability to access external data sources and perform complex computations, significantly enhancing its capabilities in handling user requests related to location, time, and weather information.</p><h3>Use AWS Amplify for front-end code</h3><p>Amplify offers a development environment for building secure, scalable mobile and web applications. Developers can focus on their code rather than worrying about the underlying infrastructure. Amplify also integrates with many Git providers. For this solution, we manually upload our front-end code using the method outlined earlier in this post.</p><p>Navigate to the URL provided after you created the application in Amplify. Upon accessing the application URL, you’ll be prompted to provide information related to Amazon Cognito and Amazon Bedrock Agents. This information is required to securely authenticate users and allow the front end to interact with the Amazon Bedrock agent. It enables the application to manage user sessions and make authorized API calls to AWS services on behalf of the user.</p><p>You can enter information with the values you collected from the CloudFormation stack outputs. You’ll be required to enter the following fields, as shown in the following screenshot:</p><ul></ul><p>You need to sign in with your username and password. A temporary password was automatically generated during deployment and sent to the email address you provided when launching the CloudFormation template. At first sign-in attempt, you’ll be asked to reset your password, as shown in the following video.</p><p>Now you can start asking questions in the application, for example, “Can we do barbecue today in Dallas, TX?” In a few seconds, the application will provide you detailed results mentioning if you can do barbecue in Dallas, TX. The following video shows this chat.</p><p>Here are a few sample queries to demonstrate the capabilities of your virtual meteorologist:</p><ol><li>“What’s the weather like in New York City today?”</li><li>“Should I plan an outdoor birthday party in Miami next weekend?”</li><li>“Will it snow in Denver on Christmas Day?”</li><li>“Can I go swimming on a beach in Chicago today?</li></ol><p>These queries showcase the agent’s ability to provide current weather information, offer advice based on weather forecasts, and predict future weather conditions. You can even ask a question related to an activity such as swimming, and it will answer based on the weather conditions if that activity is okay to do.</p><p>If you decide to discontinue using the virtual meteorologist, you can follow these steps to remove it, its associated resources deployed using AWS CloudFormation, and the Amplify deployment:</p><ol><li>Delete the CloudFormation stack: \n  <ol><li>On the AWS CloudFormation console, choose  in the navigation pane.</li><li>Locate the stack you created during the deployment process (you assigned a name to it).</li><li>Select the stack and choose .</li></ol></li><li>Delete the Amplify application and its resources. For instructions, refer to <a href=\"https://aws.amazon.com/getting-started/hands-on/build-web-app-s3-lambda-api-gateway-dynamodb/module-six/\" target=\"_blank\" rel=\"noopener\">Clean Up Resources</a>.</li></ol><p>This solution demonstrates the power of combining Amazon Bedrock Agents with other AWS services to create an intelligent, conversational weather assistant. By using AI and cloud technologies, businesses can automate complex queries and provide valuable insights to their users.</p><p>To learn more about Amazon Bedrock, refer to the following resources:</p><p>To learn more about the Anthropic’s Claude 3.5 Sonnet model, refer to the following resources:</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/10/16/salmanah.jpg\" alt=\"Salman Ahmed\" width=\"120\" height=\"160\"> is a Senior Technical Account Manager in AWS Enterprise Support. He enjoys helping customers in the travel and hospitality industry to design, implement, and support cloud infrastructure. With a passion for networking services and years of experience, he helps customers adopt various AWS networking services. Outside of work, Salman enjoys photography, traveling, and watching his favorite sports teams.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/10/16/sercast.jpg\" alt=\"Sergio Barraza\" width=\"120\" height=\"160\"> is a Senior Enterprise Support Lead at AWS, helping energy customers design and optimize cloud solutions. With a passion for software development, he guides energy customers through AWS service adoption. Outside work, Sergio is a multi-instrument musician playing guitar, piano, and drums, and he also practices Wing Chun Kung Fu.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/10/16/vatsravi.jpg\" alt=\"Ravi Kumar\" width=\"120\" height=\"160\"> is a Senior Technical Account Manager in AWS Enterprise Support who helps customers in the travel and hospitality industry to streamline their cloud operations on AWS. He is a results-driven IT professional with over 20 years of experience. In his free time, Ravi enjoys creative activities like painting. He also likes playing cricket and traveling to new places.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/10/16/goyalaws.jpg\" alt=\"Ankush Goyal\" width=\"120\" height=\"160\"> is a Enterprise Support Lead in AWS Enterprise Support who helps customers streamline their cloud operations on AWS. He is a results-driven IT professional with over 20 years of experience.</p>","contentLength":11490,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python 3.14.0 alpha 5 is out","url":"https://pythoninsider.blogspot.com/2025/02/python-3140-alpha-5-is-out.html","date":1739302860,"author":"Hugo","guid":148,"unread":true,"content":"<p>Here comes the antepenultimate alpha.</p><p><strong>This is an early developer preview of Python\n3.14</strong></p><p>Python 3.14 is still in development. This release, 3.14.0a5, is the\nfifth of seven planned alpha releases.</p><p>Alpha releases are intended to make it easier to test the current\nstate of new features and bug fixes and to test the release process.</p><p>During the alpha phase, features may be added up until the start of\nthe beta phase (2025-05-06) and, if necessary, may be modified or\ndeleted up until the release candidate phase (2025-07-22). Please keep\nin mind that this is a preview release and its use is\n recommended for production environments.</p><p>Many new features for Python 3.14 are still being planned and\nwritten. Among the new major new features and changes so far:</p><p>The next pre-release of Python 3.14 will be the penultimate alpha,\n3.14.0a6, currently scheduled for 2025-03-14.</p><p>2025-01-29 marked the start of a new lunar year, the Year of the\nSnake 🐍 (and the Year of Python?).</p><p>For centuries, π was often approximated as 3 in China. Some time\nbetween the years 1 and 5 CE, astronomer, librarian, mathematician and\npolitician Liu Xin (劉歆) calculated π as 3.154.</p><p>Around 130 CE, mathematician, astronomer, and geographer Zhang Heng\n(張衡, 78–139) compared the celestial circle with the diameter of the\nearth as 736:232 to get 3.1724. He also came up with a formula for the\nratio between a cube and inscribed sphere as 8:5, implying the ratio of\na square’s area to an inscribed circle is √8:√5. From this, he\ncalculated π as √10 (~3.162).</p><p>Third century mathematician Liu Hui (刘徽) came up with an algorithm\nfor calculating π iteratively: calculate the area of a polygon inscribed\nin a circle, then as the number of sides of the polygon is increased,\nthe area becomes closer to that of the circle, from which you can\napproximate π.</p><p>This algorithm is similar to the method used by Archimedes in the 3rd\ncentury BCE and Ludolph van Ceulen in the 16th century CE (see <a href=\"https://blog.python.org/2024/11/python-3140-alpha-2-released.html\">3.14.0a2\n  release notes</a>), but Archimedes only went up to a 96-sided polygon\n(96-gon). Liu Hui went up to a 192-gon to approximate π as 157/50 (3.14)\nand later a 3072-gon for 3.14159.</p><p>Liu Hu wrote a commentary on the book The Nine Chapters on the\nMathematical Art which included his π approximations.</p><p>In the fifth century, astronomer, inventor, mathematician,\npolitician, and writer Zu Chongzhi (祖沖之, 429–500) used Liu Hui’s\nalgorithm to inscribe a 12,288-gon to compute π between 3.1415926 and\n3.1415927, correct to seven decimal places. This was more accurate than\nHellenistic calculations and wouldn’t be improved upon for 900\nyears.</p><p>Thanks to all of the many volunteers who help make Python Development\nand these releases possible! Please consider supporting our efforts by\nvolunteering yourself or through organisation contributions to the <a href=\"https://www.python.org/psf-landing/\">Python Software\nFoundation</a>.</p><p>Regards from a remarkably snowless Helsinki,</p><p>Your release team, Hugo van KemenadeSteve Dower</p>","contentLength":2941,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PyCoder’s Weekly: Issue #668: NumPy, Compiling Python 1.0, BytesIO, and More (Feb. 11, 2025)","url":"https://pycoders.com/issues/668","date":1739302200,"author":"","guid":155,"unread":true,"content":"<div><p> In this video course, you’ll learn how to use NumPy by exploring several interesting examples. You’ll read data from a file into an array and analyze structured arrays to perform a reconciliation. You’ll also learn how to quickly chart an analysis &amp; turn a custom function into a vectorized function.</p></div><div><p> This tutorial will help you master Python string splitting. You’ll learn to use , , and  to effectively handle whitespace, custom delimiters, and multiline text, which will level up your data parsing skills.</p></div><div><p> Python developers use Posit Package Manager to mirror public &amp; internally developed repos within their firewalls. Get reporting on known vulnerabilities to proactively address potential threats. High-security environments can even run air-gapped.</p></div><div><p> The author was recently invited with other senior devs to give a lightning talk on their personal development philosophy. This post captures those thoughts.</p></div><img src=\"https://pycoders.com/issues/668/open/feed\" width=\"1\" height=\"1\" alt=\"alt\"><p><em>[ Subscribe to 🐍 PyCoder’s Weekly 💌 – Get the best Python news, articles, and tutorials delivered to your inbox once a week <a href=\"https://pycoders.com/?utm_source=pycoders&amp;utm_medium=feed&amp;utm_campaign=footer\">&gt;&gt; Click here to learn more</a> ]</em></p>","contentLength":1084,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Amazon Q Business simplifies integration of enterprise knowledge bases at scale","url":"https://aws.amazon.com/blogs/machine-learning/amazon-q-business-simplifies-integration-of-enterprise-knowledge-bases-at-scale/","date":1739293892,"author":"Omar Elkharbotly","guid":123,"unread":true,"content":"<p>In this new era of emerging AI technologies, we have the opportunity to build AI-powered assistants tailored to specific business requirements. <a href=\"https://aws.amazon.com/q/business/\" target=\"_blank\" rel=\"noopener\">Amazon Q Business</a>, a new generative AI-powered assistant, can answer questions, provide summaries, generate content, and securely complete tasks based on data and information in an enterprise’s systems.</p><p>Large-scale data ingestion is crucial for applications such as document analysis, summarization, research, and knowledge management. These tasks often involve processing vast amounts of documents, which can be time-consuming and labor-intensive. However, ingesting large volumes of enterprise data poses significant challenges, particularly in orchestrating workflows to gather data from diverse sources.</p><p>In this post, we propose an end-to-end solution using Amazon Q Business to simplify integration of enterprise knowledge bases at scale.</p><h2>Enhancing AWS Support Engineering efficiency</h2><p>The AWS Support Engineering team faced the daunting task of manually sifting through numerous tools, internal sources, and AWS public documentation to find solutions for customer inquiries. For complex customer issues, the process was especially time-consuming, laborious, and at times extended the wait time for customers seeking resolutions. To address this, the team implemented a chat assistant using Amazon Q Business. This solution ingests and processes data from hundreds of thousands of support tickets, escalation notices, public AWS documentation, re:Post articles, and AWS blog posts.</p><p>By using Amazon Q Business, which simplifies the complexity of developing and managing ML infrastructure and models, the team rapidly deployed their chat solution. The Amazon Q Business pre-built <a href=\"https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/connectors-list.html\" target=\"_blank\" rel=\"noopener\">connectors</a> like <a href=\"http://aws.amazon.com/s3\" target=\"_blank\" rel=\"noopener\">Amazon Simple Storage Service</a> (Amazon S3), document retrievers, and upload capabilities streamlined data ingestion and processing, enabling the team to provide swift, accurate responses to both basic and advanced customer queries.</p><p>In this post, we propose an end-to-end solution using Amazon Q Business to address similar enterprise data challenges, showcasing how it can streamline operations and enhance customer service across various industries. First we discuss end-to-end large-scale data integration with Amazon Q Business, covering data preprocessing, security guardrail implementation, and Amazon Q Business best practices. Then we introduce the solution deployment using three <a href=\"http://aws.amazon.com/cloudformation\" target=\"_blank\" rel=\"noopener\">AWS CloudFormation</a> templates.</p><p>The following architecture diagram represents the high-level design of a solution proven effective in production environments for AWS Support Engineering. This solution uses the powerful capabilities of Amazon Q Business. We will walk through the implementation of key components, including configuring enterprise data sources to build our knowledge base, document indexing and boosting, and implementing comprehensive security controls.</p><ul><li> – An end-user who accesses Amazon Q Business applications with permissions granted by their administrator to perform their job duties</li><li> – A user who manages Amazon Q Business resources and determines feature access for service users within the organization</li><li> – A user responsible for creating and managing access policies for Amazon Q Business through <a href=\"https://aws.amazon.com/iam/identity-center/\" target=\"_blank\" rel=\"noopener\">AWS IAM Identity Center</a></li></ul><p>The following workflow details how a service user accesses the application:</p><ol><li>The service user initiates an interaction with the Amazon Q Business application, accessible through the web experience, which is an endpoint URL.</li><li>The service user’s permissions are authenticated using IAM Identity Center, an AWS solution that connects workforce users to AWS managed applications like Amazon Q Business. It enables end-user authentication and streamlines access management.</li><li>The authenticated service user submits queries in natural language to the Amazon Q Business application.</li><li>The Amazon Q Business application generates and returns answers drawing from the enterprise data uploaded to an S3 bucket, which is connected as a data source to Amazon Q Business. This S3 bucket data is continuously refreshed, making sure that Amazon Q Business accesses the most current information for query responses by using a retriever to pull data from the index.</li></ol><h2>Large-scale data ingestion</h2><p>Before ingesting the data to Amazon Q Business, the data might need transformation into <a href=\"https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/doc-types.html\" target=\"_blank\" rel=\"noopener\">formats</a> supported by Amazon Q Business. Furthermore, it might contain sensitive data or personally identifiable information (PII) requiring redaction. These <a href=\"https://docs.aws.amazon.com/whitepapers/latest/building-data-lakes/data-ingestion-methods.html\" target=\"_blank\" rel=\"noopener\">data ingestion</a> challenges create a need to orchestrate tasks like transformation, redaction, and secure ingestion.</p><p>To facilitate orchestration, this solution incorporates <a href=\"https://aws.amazon.com/step-functions/\" target=\"_blank\" rel=\"noopener\">AWS Step Functions</a>. Step Functions provides a visual workflow service to orchestrate tasks and workloads resiliently and efficiently through built-in AWS integrations and error handling. The solution uses the Step Functions <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/state-map.html\" target=\"_blank\" rel=\"noopener\">Map state</a>, which allows for parallel processing of multiple items in a dataset, thereby efficiently orchestrating workflows and speeding up overall processing.</p><p>The following diagram illustrates an example architecture for ingesting data through an endpoint interfacing with a large corpus.</p><p>Step Functions orchestrates AWS services like <a href=\"https://aws.amazon.com/pm/lambda/\" target=\"_blank\" rel=\"noopener\">AWS Lambda</a> and organization APIs like DataStore to ingest, process, and store data securely. The workflow includes the following steps:</p><ol><li>The Prepare Map Input Lambda function prepares the required input for the Map state. For example, the Datastore API might require certain input like date periods to query data. This step can be used to define the date periods to be used by the Map state as an input.</li><li>The Ingest Data Lambda function fetches data from the Datastore API—which can be in or outside of the virtual private cloud (VPC)—based on the inputs from the Map state. To handle large volumes, the data is split into smaller chunks to mitigate Lambda function overload. This enables Step Functions to manage the workload, retry failed chunks, and isolate failures to individual chunks instead of disrupting the entire ingestion process.</li><li>The fetched data is put into an S3 data store bucket for processing.</li><li>The Process Data Lambda function redacts sensitive data through <a href=\"https://aws.amazon.com/comprehend/\" target=\"_blank\" rel=\"noopener\">Amazon Comprehend</a>. Amazon Comprehend provides real-time APIs, such as <a href=\"https://docs.aws.amazon.com/comprehend/latest/APIReference/API_DetectPiiEntities.html\" target=\"_blank\" rel=\"noopener\">DetectPiiEntities</a> and <a href=\"https://docs.aws.amazon.com/comprehend/latest/APIReference/API_DetectEntities.html\" target=\"_blank\" rel=\"noopener\">DetectEntities</a>, which use natural language processing (NLP) machine learning (ML) models to identify text portions for redaction. When Amazon Comprehend detects PII, the terms will be redacted and replaced by a character of your choice (such as *). You can also use regular expressions to remove identifiers with predetermined formats.</li><li>Finally, the Lambda function creates two separate files: \n  <ol type=\"a\"><li>A sanitized data document in an Amazon Q Business <a href=\"https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/doc-types.html\" target=\"_blank\" rel=\"noopener\">supported format</a> that will be parsed to generate chat responses.</li><li>A JSON <a href=\"https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/s3-metadata.html\" target=\"_blank\" rel=\"noopener\">metadata</a> file for each document containing additional information to customize chat results for end-users and apply <a href=\"https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/metadata-boosting.html\" target=\"_blank\" rel=\"noopener\">boosting techniques</a> to enhance user experience (which we discuss more in the next section).</li></ol></li></ol><p>The following is the sample metadata file:</p><div><pre><code>{\n&nbsp;&nbsp; &nbsp;\"DocumentId\": \"qbusiness-ug.pdf.txt\",\n&nbsp;&nbsp; &nbsp;\"Attributes\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;\"_created_at\": \"2024-10-29T20:27:45+00:00\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;\"_last_updated_at\": \"2024-10-29T20:27:45+00:00\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;\"_source_uri\": \"https://docs.aws.amazon.com/pdfs/amazonq/latest/qbusiness-ug/qbusiness-ug.pdf\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;\"author\": \"AWS\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;\"services\": [\"Q Business\"]\n&nbsp;&nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp;\"Title\": \"Amazon Q Business - User Guide\",\n&nbsp;&nbsp; &nbsp;\"ContentType\": \"plain/text\"\n}</code></pre></div><p>In the preceding JSON file, the  for each data document must be unique. All the other attributes are optional; however, the file has additional attributes like , , and  with values defined.</p><p>The two files are placed in a new S3 folder for Amazon Q to index. Additionally, the raw unprocessed data is deleted from the S3 bucket. You can further restrict access to documents uploaded to an S3 bucket for specific users or groups using <a href=\"https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/s3-user-management.html\" target=\"_blank\" rel=\"noopener\">Amazon S3 access control lists (ACLs)</a>.</p><p>Using the Amazon Q Business <a href=\"https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/supported-connectors.html\" target=\"_blank\" rel=\"noopener\">data source connector</a> feature, we integrated the S3 bucket with our application. This connector functionality enables the consolidation of data from multiple sources into a unified index for the Amazon Q Business application. The service offers various integration options, with Amazon S3 being one of the supported data sources.</p><p>When working with your specific dataset in Amazon Q Business, you can use relevance <a href=\"https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/metadata-boosting.html\" target=\"_blank\" rel=\"noopener\">tuning</a> to enhance the performance and accuracy of search results. This feature allows you to customize how Amazon Q Business prioritizes information within your ingested documents. For example, if your dataset includes product descriptions, customer reviews, and technical specifications, you can use relevance tuning to boost the importance of certain fields. You might choose to prioritize product names in titles, give more weight to recent customer reviews, or emphasize specific technical attributes that are crucial for your business. By adjusting these parameters, you can influence the ranking of search results to better align with your dataset’s unique characteristics and your users’ information needs, ultimately providing more relevant answers to their queries.</p><p>For the metadata file used in this example, we focus on boosting two key metadata attributes:  and . By assigning higher weights to these attributes, we made sure documents with specific titles or services received greater prominence in the search results, improving their visibility and relevance for the users</p><p>The following code is the sample CloudFormation template snippet to enable higher weights to  and :</p><div><pre><code>BoostOverrideConfiguration:\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;Fn::Sub: |\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"nativeIndexConfiguration\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"indexId\": \"${QBusinessIndex.IndexId}\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"boostingOverride\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"_document_title\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"stringConfiguration\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"boostingLevel\": \"MEDIUM\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"services\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"stringListConfiguration\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"boostingLevel\": \"HIGH\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</code></pre></div><h3>Amazon Q Business guardrails</h3><p>Implementing robust security measures is crucial to protect sensitive information. In this regard, Amazon Q Business <a href=\"https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html\" target=\"_blank\" rel=\"noopener\">guardrails</a> or chat controls proved invaluable, offering a powerful solution to maintain data privacy and security.</p><p>Amazon Q Business guardrails provide configurable rules designed to control the application’s behavior. These guardrails act as a safety net, minimizing access, processing, or revealing of sensitive or inappropriate information. By defining boundaries for the application’s operations, organizations can maintain compliance with internal policies and external regulations. You can enable global- or topic-level controls, which control how Amazon Q Business responds to specific topics in chat.</p><p>The following is the sample CloudFormation template snippet to enable topic-level controls:</p><div><pre><code>TopicConfigurations:\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;- name: topic\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rules:\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- ruleType: CONTENT_BLOCKER_RULE\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ruleConfiguration:\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;contentBlockerRule:\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;systemMessageOverride: This message is blocked as it contains secure content\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;exampleChatMessages:\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- arn:*:ec2:us-east-1:123456789012:instance/i-abcdef123\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- arn:*:ec2:us-west-2:123456789012:vpc/bpc-abcdef123\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- arn:*:kms:eu-west-1:123456789012:key/12345678-1234-12345678-abc12345678\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- s3://bucket/prefix/file.csv\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- arn:*:s3::::bucket-name</code></pre></div><p>This topic-level control blocks the Amazon Q Business chat conversation that has AWS service Amazon Resource Names (ARNs). When similar chat messages have been detected by the Amazon Q Business application, the system will block the responses and return the message “This message is blocked as it contains secure content.”</p><p>For information about deploying the Amazon Q Business application with sample boosting and guardrails, refer to the <a href=\"https://github.com/aws-samples/amazon-q-business-simplified-integration-of-enterprise-knowledge-bases-at-scale\" target=\"_blank\" rel=\"noopener\">GitHub repo.</a></p><p>The following screenshot shows an example of the Amazon Q Business assistant chat landing page.<img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/06/QBusiness.jpg\" alt=\"Q Business landing Page\" width=\"1292\" height=\"660\"></p><p>The following screenshot illustrates the assistant’s behavior if a user includes text that matches one of the similarity-based examples specified in the guardrail topic control.</p><p>To enhance data security, you can deploy <a href=\"https://aws.amazon.com/macie/\" target=\"_blank\" rel=\"noopener\">Amazon Macie</a> classification jobs to scan for sensitive or PII data stored in S3 buckets. The following diagram illustrates a sample notification architecture to alert users on sensitive information that might be inadvertently stored. Macie uses machine learning to automatically discover, classify, and protect sensitive data stored in AWS. It focuses on identifying PII, intellectual property, and other sensitive data types to help organizations meet compliance requirements and protect their data from unauthorized access or breaches.</p><p>The workflow includes the following steps:</p><ol><li>Macie reviews the data store S3 bucket for sensitive information before being ingested.</li><li>An EventBridge rule invokes the Rectify &amp; Notify Lambda function.</li><li>The Lambda function processes the alert, remediates it by removing the affected files from the S3 bucket, and sends a notification using <a href=\"http://aws.amazon.com/sns\" target=\"_blank\" rel=\"noopener\">Amazon Simple Notification Service</a> (Amazon SNS) to the subscribed email addresses.</li></ol><p>This system enables rapid response to potential security alerts, allowing for immediate action to protect sensitive data.</p><p>The Macie detection and subsequent notification system can be demonstrated by uploading a new file to the S3 bucket, such as <code>sample-file-with-credentials.txt</code>, containing the PII data types monitored by Macie, such as fake temporary AWS credentials. After the file is uploaded to Amazon S3 and the scheduled Macie detection job discovers it, the Lambda function immediately removes the file and sends the following notification email to the SNS topic subscribers:</p><div><pre><code>Amazon Macie published a new Finding: \"The S3 object contains credentials data\"\nDescription: \"The S3 object contains credentials data such as AWS secret access keys or private keys.\"\nSeverity: {'score': 3, 'description': 'High'}\nType: SensitiveData:S3Object/Credentials\nCategory: CLASSIFICATION\nOrigin Type: \"SENSITIVE_DATA_DISCOVERY_JOB\"\nSensitive Data Categories: \"['CREDENTIALS']\"\nResources affected:\nBucket=\"&lt;BUCKET_NAME&gt;\",\nKey=\"processed/sample-file-with-credentials.txt\"\nTrying to delete S3 Object: &nbsp;s3://&lt;BUCKET_NAME&gt;/processed/sample-file-with-credentials.txt\nFile deletion succeeded.\n\n-------------\nFull Macie finding event:\n{\n&nbsp; &nbsp;...\n}</code></pre></div><p>Additionally, the findings are visible on the Macie console, as shown in the following screenshot.</p><h3>Additional recommendations</h3><p>To further enhance the security and reliability of the Amazon Q Business application, we recommend implementing the following measures. These additional security and logging implementations make sure the data is protected, alerts are sent in response to potential warnings, and timely actions can be taken for security incidents.</p><ul><li><strong>Amazon CloudWatch logging for Amazon Q Business </strong>– You can use <a href=\"https://aws.amazon.com/pm/cloudwatch/?gclid=EAIaIQobChMIyb-6xaHNiAMVjTrUAR3xqw4uEAAYASAAEgIAd_D_BwE&amp;trk=2dfe7cfe-88b0-4c42-844b-24167b0dc800&amp;sc_channel=ps&amp;ef_id=EAIaIQobChMIyb-6xaHNiAMVjTrUAR3xqw4uEAAYASAAEgIAd_D_BwE:G:s&amp;s_kwcid=AL!4422!3!658520966141!!!g!!!19852661915!149878722660\" target=\"_blank\" rel=\"noopener\">Amazon CloudWatch</a> logging for Amazon Q Business to save the logs for the data source connectors and document-level errors, focusing particularly on failed ingestion jobs. This practice is vital from a security perspective because it allows monitoring and quick identification of issues in the data ingestion process. By tracking failed jobs, potential data loss or corruption can be mitigated, maintaining the reliability and completeness of the knowledge base.</li><li><strong>Unauthorized access monitoring on Amazon S3</strong> – You can implement EventBridge rules to <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-log-s3-data-events.html\" target=\"_blank\" rel=\"noopener\">monitor mutating API actions on the S3 buckets</a>. These rules are configured to invoke SNS notifications when such actions are performed by unauthorized users. Enable <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html\" target=\"_blank\" rel=\"noopener\">Amazon S3 server access logging </a>to store detailed access records in a designated bucket, which can be analyzed using <a href=\"http://aws.amazon.com/athena\" target=\"_blank\" rel=\"noopener\">Amazon Athena</a> for deeper insights. This approach provides real-time alerts for immediate response to potential security breaches, while also maintaining a detailed audit trail for thorough security analysis, making sure that only authorized entities can modify critical data.</li></ul><p>In the following sections, we walk through implementing the end-to-end solution. For this solution to work, the following prerequisites are needed:</p><ul><li>A new or existing AWS account that will be the data collection account</li></ul><h2>Configure the data ingestion</h2><p>In this post, we demonstrate the solution using publicly available documentation as our sample dataset. In your implementation, you can adapt this solution to work with your organization’s specific content sources, such as support tickets, JIRA issues, internal wikis, or other relevant documentation.</p><ul><li>Ingestion Lambda function</li><li>Processing Lambda function</li></ul><p>The data ingestion workflow in this example fetches and processes public data from the Amazon Q Business and <a href=\"https://aws.amazon.com/sagemaker/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker</a> official documentation in PDF format. Specifically, the Ingest Data Lambda function downloads the raw PDF documents, temporarily stores them in Amazon S3, and passes their Amazon S3 URLs to the Process Data Lambda function, which performs the PII redaction (if enabled) and stores the processed documents and their metadata to the S3 path indexed by the Amazon Q Business application.</p><p>You can adapt the Step Functions Lambda code for ingestion and processing according to your own internal data, making sure that the documents and metadata are in a valid format for Amazon Q Business to index, and are properly redacted for PII data.</p><h2>Configure IAM Identity Center</h2><p>You can only have one IAM Identity Center instance per account. If your account already has an Identity Center instance, skip this step and proceed to configuring the Amazon Q Business application.</p><p>You will need to add details for a user such as user name, email, first name, and surname.</p><p>After deploying the CloudFormation template, you will receive an email where you will need to accept the invitation and change the password for the user.</p><p>Before logging in, you will need to deploy the Amazon Q Business application.</p><h2>Configure the Amazon Q Business application</h2><p>You will need to add details such as the IAM Identity Center stack name deployed previously and the S3 bucket name provisioned by the data ingestion stack.</p><p>After you deploy the CloudFormation template, complete the following steps to manage user access:</p><ol><li>On the Amazon Q Business console, choose  in the navigation pane.</li><li>Choose the application you provisioned ().</li><li>Under , choose .</li><li>On the  tab, choose the user you specified when deploying the CloudFormation stack.</li><li>Under , choose  or .</li><li>Choose  and then </li></ol><p>Now you can log in using the user you have specified. You can find the URL for the web experience under .</p><p>If you are unable to log in, make sure that the user has been verified.</p><p>Before you can use the Amazon Q Business application, the data source needs to be synchronized. The application’s data source is configured to sync hourly. It might take some time to synchronize.</p><p>When the synchronization is complete, you should now be able to access the application and ask questions.</p><p>After you’re done testing the solution, you can delete the resources to avoid incurring additional charges. See the <a href=\"https://aws.amazon.com/q/business/pricing/\" target=\"_blank\" rel=\"noopener\">Amazon Q Business pricing page</a> for more information. Follow the instructions in the <a href=\"https://github.com/aws-samples/amazon-q-business-simplified-integration-of-enterprise-knowledge-bases-at-scale/blob/main/README.md\" target=\"_blank\" rel=\"noopener\">GitHub repository</a> to delete the resources and corresponding CloudFormation templates. Make sure to delete the CloudFormation stacks provisioned as follows:</p><ol><li>Delete the Amazon Q Business application stack.</li><li>Delete the IAM Identity Center stack.</li><li>Delete the data ingestion</li><li>For each deleted stack, check for any resources that were skipped in the deletion process, such as S3 buckets.</li></ol><p>Delete any skipped resources on the console.</p><p>In this post, we demonstrated how to build a knowledge base solution by integrating enterprise data with Amazon Q Business using Amazon S3. This approach helps organizations improve operational efficiency, reduce response times, and gain valuable insights from their historical data. The solution uses AWS security best practices to promote data protection while enabling teams to create a comprehensive knowledge base from various data sources.</p><p>Whether you’re managing support tickets, internal documentation, or other business content, this solution can handle multiple data sources and scale according to your needs, making it suitable for organizations of different sizes. By implementing this solution, you can enhance your operations with AI-powered assistance, automated responses, and intelligent routing of complex queries.</p><p>Try this solution with your own use case, and let us know about your experience in the comments section.</p><p> is a Senior Cloud Support Engineer at AWS, specializing in Data, Machine Learning, and Generative AI solutions. With extensive experience in helping customers architect and optimize their cloud-based AI/ML/GenAI workloads, Omar works closely with AWS customers to solve complex technical challenges and implement best practices across the AWS AI/ML/GenAI service portfolio. He is passionate about helping organizations leverage the full potential of cloud computing to drive innovation in generative AI and machine learning.</p><p> is a Principal Cloud Support Engineer at AWS, focused on Networking and Generative AI solutions. He has deep expertise in resolving complex, cross-domain technical challenges through systematic problem-solving methodologies. With a customer-obsessed mindset, he leverages emerging technologies to drive innovation and deliver exceptional customer experiences.</p><p> is a Principal Cloud Support Engineer at AWS. She specializes in solving complex customer issues on the AWS Cloud, focusing on infrastructure-as-code, container orchestration, and generative AI technologies. She collaborates with teams across AWS to design solutions that enhance the customer experience. Outside of work, Bhavani enjoys cooking and traveling.</p><p> is a Senior Cloud Support Engineer at AWS, specialized in Machine Learning technologies and Generative AI solutions, helping customers operate and optimize their ML workloads. With a deep passion for driving performance improvements, he dedicates himself to empowering both customers and teams through innovative ML-enabled solutions. Away from his technical pursuits, Mattia embraces his passion for travel and adventure.</p><p> is a Senior Cloud Support Engineer at AWS who specializes in Serverless technologies and development within the AWS cloud. Kevin has a passion for creating solutions through code while ensuring it is built on solid infrastructure. Outside of work, Kevin enjoys art and sport.</p><p> is a Senior Principal Engineer leading AWS. Tipu supports customers with designing and optimizing their cloud technology strategy as a senior principal engineer in AWS Support &amp; Managed Services. For over 15 years, he has designed, operated and supported diverse distributed systems at scale with a passion for operational excellence. He currently works on generative AI and operational excellence.</p>","contentLength":23230,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Faster distributed graph neural network training with GraphStorm v0.4","url":"https://aws.amazon.com/blogs/machine-learning/faster-distributed-graph-neural-network-training-with-graphstorm-v0-4/","date":1739293396,"author":"Theodore Vasiloudis","guid":122,"unread":true,"content":"<p>GraphStorm is a low-code enterprise graph machine learning (ML) framework that provides ML practitioners a simple way of building, training, and deploying graph ML solutions on industry-scale graph data. Although GraphStorm can run efficiently on single instances for small graphs, it truly shines when scaling to enterprise-level graphs in distributed mode using a cluster of <a href=\"http://aws.amazon.com/ec2\" target=\"_blank\" rel=\"noopener\">Amazon Elastic Compute Cloud</a> (Amazon EC2) instances or <a href=\"https://aws.amazon.com/sagemaker/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker</a>.</p><p>Today, AWS AI released GraphStorm v0.4. This release introduces integration with DGL-GraphBolt, a new graph storage and sampling framework that uses a compact graph representation and pipelined sampling to reduce memory requirements and speed up Graph Neural Network (GNN) training and inference. For the large-scale dataset examined in this post, the inference speedup is 3.6 times faster, and per-epoch training speedup is 1.4 times faster, with even larger speedups possible.</p><p>To achieve this, GraphStorm v0.4 with DGL-GraphBolt addresses two crucial challenges of graph learning:</p><ul><li> – GraphStorm v0.4 provides compact and distributed storage of graph structure and features, which may grow in the multi-TB range. For example, a graph with 1 billion nodes with 512 features per node and 10 billion edges will require more than 4 TB of memory to store, which necessitates distributed computation.</li><li> – In multi-layer GNNs, you need to sample neighbors of each node to propagate their representations. This can lead to exponential growth in the number of nodes sampled, potentially visiting the entire graph for a single node’s representation. GraphStorm v0.4 provides efficient, pipelined graph sampling.</li></ul><p>In this post, we demonstrate how GraphBolt enhances GraphStorm’s performance in distributed settings. We provide a hands-on example of using GraphStorm with GraphBolt on SageMaker for distributed training. Lastly, we share how to use <a href=\"https://aws.amazon.com/sagemaker/pipelines/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker Pipelines</a> with GraphStorm.</p><h2>GraphBolt: Pipeline-driven graph sampling</h2><p>GraphBolt is a new data loading and graph sampling framework developed by the <a href=\"https://www.dgl.ai/\" target=\"_blank\" rel=\"noopener\">DGL</a> team. It streamlines the operations needed to sample efficiently from a heterogeneous graph and fetch the corresponding features. GraphBolt introduces a new, more compact graph structure representation for heterogeneous graphs, called fused Compressed Sparse Column (fCSC). This can reduce the memory cost of storing a heterogeneous graph by up to 56%, allowing users to fit larger graphs in memory and potentially use smaller, more cost-efficient instances for GNN model training.</p><p>GraphStorm v0.4 seamlessly integrates with GraphBolt, allowing users to take advantage of its performance improvements in their GNN workflows. The user just needs to provide the additional argument  when launching graph construction and training jobs.</p><p>A common model development process is to perform model exploration locally on a subset of your full data, and when you’re satisfied with the results, train the full-scale model. This setup allows for cheaper exploration before training on the full dataset. GraphStorm and SageMaker Pipelines allows you to do that by creating a model pipeline you can run locally to retrieve model metrics, and when you’re ready, run your pipeline on the full data on SageMaker, and produce models, predictions, and graph embeddings to use in downstream tasks. In the next section, we show how to set up such pipelines for GraphStorm.</p><p>We demonstrate such a setup in the following diagram, where a user can perform model development and initial training on a single EC2 instance, and when they’re ready to train on their full data, hand off the heavy lifting to SageMaker for distributed training. Using SageMaker Pipelines to train models provides several benefits, like reduced costs, auditability, and lineage tracking.</p><h2>Set up the environment for SageMaker distributed training</h2><p>Setting up your environment should take around 10 minutes. First, set up your Python environment to run the examples:</p><div><div><div><pre><code>conda init\neval $SHELL\n# Create a new env for the post\nconda create --name gsf python=3.10\nconda activate gsf\n\n# Install dependencies for local scripts\npip install torch==2.3.0 --index-url https://download.pytorch.org/whl/cpu\npip install sagemaker boto3 ogb pyarrow\n# Verify installation, might take a few minutes for first run\npython -c \"import sagemaker; import torch\"\n\n# Clone the GraphStorm repository to access the example code\ngit clone https://github.com/awslabs/graphstorm.git ~/graphstorm</code></pre></div></div></div><h3>Build a GraphStorm SageMaker CPU image</h3><p>Next, build and push the GraphStorm PyTorch Docker image that you will use to run the graph construction, training, and inference jobs for smaller-scale data. Your role will need to be able to pull images from the <a href=\"https://gallery.ecr.aws/\" target=\"_blank\" rel=\"noopener\">Amazon ECR Public Gallery</a> and create <a href=\"http://aws.amazon.com/ecr/\" target=\"_blank\" rel=\"noopener\">Amazon Elastic Container Registry</a> (Amazon ECR) repositories and push images to your private ECR registry.</p><div><div><pre><code># Enter you account ID here\nACCOUNT_ID=&lt;aws-account-id&gt;\nREGION=us-east-1\n\ncd ~/graphstorm\nbash docker/build_graphstorm_image.sh --environment sagemaker --device cpu\nbash docker/push_graphstorm_image.sh -e sagemaker -r $REGION -a $ACCOUNT_ID -d cpu\n# This will create an ECR repository and push an image to\n# ${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/graphstorm:sagemaker-cpu</code></pre></div></div><h3>Download and prepare datasets</h3><p>In this post, we use two citation datasets to demonstrate the scalability of GraphStorm. The Open Graph Benchmark (OGB) project hosts a number of graph datasets that can be used to benchmark the performance of graph learning systems. For a small-scale demo, we use the ogbn-arxiv dataset, and for a demonstration of GraphStorm’s large-scale learning capabilities, we use the ogbn-papers100M dataset.</p><h4>Prepare the ogbn-arxiv dataset</h4><p>Download the smaller-scale <a href=\"https://ogb.stanford.edu/docs/nodeprop/#ogbn-arxiv\" target=\"_blank\" rel=\"noopener\">ogbn-arxiv</a> dataset to run a local test before launching larger-scale SageMaker jobs on AWS. This dataset has approximately 170,000 nodes and 1.2 million edges. Use the following code to download the data and prepare it for GraphStorm:</p><div><div><pre><code># Provide the S3 bucket to use for output\nBUCKET_NAME=&lt;your-s3-bucket&gt;</code></pre></div></div><div><pre><code>cd ~/graphstorm/examples/sagemaker-pipelines-graphbolt\npython convert_arxiv_to_gconstruct.py \\\n--output-s3-prefix s3://$BUCKET_NAME/ogb-arxiv-input</code></pre></div><p>This will create the tabular graph data in Amazon S3, which you can verify by running the following code:</p><div><pre><code>aws s3 ls s3://$BUCKET_NAME/ogb-arxiv-input/ \nedges/\nnodes/\nsplits/\ngconstruct_config_arxiv.json</code></pre></div><p>Finally, upload GraphStorm training configuration files for arxiv to use for training and inference:</p><div><pre><code># Upload the training configurations to S3\naws s3 cp ~/graphstorm/training_scripts/gsgnn_np/arxiv_nc.yaml \\\ns3://$BUCKET_NAME/yaml/arxiv_nc_train.yaml\naws s3 cp ~/graphstorm/inference_scripts/np_infer/arxiv_nc.yaml \\\ns3://$BUCKET_NAME/yaml/arxiv_nc_inference.yaml</code></pre></div><h4>Prepare the ogbn-papers100M dataset on SageMaker</h4><p>The papers-100M dataset is a large-scale graph dataset, with 111 million nodes and 3.2 billion edges after adding reverse edges.</p><p>To download and preprocess the data as an <a href=\"https://sagemaker.readthedocs.io/en/stable/amazon_sagemaker_processing.html\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker Processing</a> step, use the following code. You can launch and let the job run in the background while proceeding through the rest of the post, and return to this dataset later. The job should take approximately 45 minutes to run.</p><div><pre><code># Navigate to the example code\ncd ~/graphstorm/examples/sagemaker-pipelines-graphbolt\n\n# Build and push a Docker image to download and process the papers100M data\nbash build_and_push_papers100M_image.sh -a $ACCOUNT_ID -r $REGION\n\n# This creates an ECR repository and pushes an image to\n# $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/papers100m-processor\n\n# Run a SageMaker job to do the processing and upload the output to S3\nSAGEMAKER_EXECUTION_ROLE_ARN=&lt;your-sagemaker-execution-role-arn&gt;\naws configure set region $REGION\npython sagemaker_convert_papers100m.py \\\n--output-bucket $BUCKET_NAME \\\n--execution-role-arn $SAGEMAKER_EXECUTION_ROLE_ARN \\\n--region $REGION \\\n--instance-type ml.m5.4xlarge \\\n--image-uri $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/papers100m-processor</code></pre></div><p>This will produce the processed data in <code>s3://$BUCKET_NAME/ogb-papers100M-input</code>, which can then be used as input to GraphStorm. While this job is running, you can create the GraphStorm pipelines.</p><h2>Create a SageMaker pipeline</h2><div><pre><code># Navigate to the example code\ncd ~/graphstorm/examples/sagemaker-pipelines-graphbolt\n\nPIPELINE_NAME=\"ogbn-arxiv-gs-pipeline\"\n\nbash deploy_arxiv_pipeline.sh \\\n--account $ACCOUNT_ID\\\n--bucket-name $BUCKET_NAME --execution-role $SAGEMAKER_EXECUTION_ROLE_ARN \\\n--pipeline-name $PIPELINE_NAME \\\n--use-graphbolt false</code></pre></div><p>Running the preceding code will create a SageMaker pipeline configured to run three SageMaker jobs in sequence:</p><ul><li>A GConstruct job that converts the tabular file input to a binary partitioned graph on Amazon S3</li><li>A GraphStorm training job that trains a node classification model and saves the model to Amazon S3</li><li>A GraphStorm inference job that produces predictions for all nodes in the test set, and creates embeddings for all nodes</li></ul><p>To review the pipeline, navigate to <a href=\"https://us-east-1.console.aws.amazon.com/sagemaker/home?region=us-east-1#/studio-landing\" target=\"_blank\" rel=\"noopener\">SageMaker AI Studio</a>, choose the domain and user profile you used to create the pipeline, then choose .</p><p>In the navigation pane, choose . There should be a pipeline named . Choose the pipeline, which will take you to the  tab for the pipeline. Choose  to view the pipeline steps.</p><h3>Run the SageMaker pipeline locally for ogbn-arxiv</h3><p>The ogbn-arxiv dataset is small enough that you can run the pipeline locally. Run the following command to start a local execution of the pipeline:</p><div><pre><code># Allow the local containers to inherit AWS credentials\nexport USE_SHORT_LIVED_CREDENTIALS=1\npython ~/graphstorm/sagemaker/pipeline/execute_sm_pipeline.py \\\n--pipeline-name ogbn-arxiv-gs-pipeline \\\n--region us-east-1 \\\n--local-execution | tee arxiv-local-logs.txt</code></pre></div><p>We save the log output to . You will use that later to analyze the training speed.</p><p>Running the pipeline should take approximately 5 minutes. When the pipeline is complete, it will print a message like the following:</p><div><pre><code>Pipeline execution 655b9357-xxx-xxx-xxx-4fc691fcce94 SUCCEEDED</code></pre></div><p>You can inspect the mean epoch and evaluation time using the provided  script and the log file you created:</p><div><pre><code>python analyze_training_time.py --log-file arxiv-local-logs.txt\n\nReading logs from file: arxiv-local-logs.txt\n\n=== Training Epochs Summary ===\nTotal epochs completed: 10\nAverage epoch time: 4.70 seconds\n\n=== Evaluation Summary ===\nTotal evaluations: 11\nAverage evaluation time: 1.90 seconds</code></pre></div><p>These numbers will vary depending on your instance type; in this case, these are values reported on an m6in.4xlarge instance.</p><h3>Create a GraphBolt pipeline</h3><p>Now you have established a baseline for performance, you can create another pipeline that uses the GraphBolt graph representation to compare the performance.</p><p>You can use the same pipeline creation script, but change two variables, providing a new pipeline name and setting  to :</p><div><pre><code># Deploy a GraphBolt-enabled pipeline\nPIPELINE_NAME_GB=\"ogbn-arxiv-gs-graphbolt-pipeline\"\nbash deploy_arxiv_pipeline.sh \\\n--account $ACCOUNT_ID \\\n--bucket-name $BUCKET_NAME --execution-role $SAGEMAKER_EXECUTION_ROLE_ARN \\\n--pipeline-name $PIPELINE_NAME_GB \\\n--use-graphbolt true\n\n# Execute the pipeline locally\npython ~/graphstorm/sagemaker/pipeline/execute_sm_pipeline.py \\\n--pipeline-name $PIPELINE_NAME_GB \\\n--region us-east-1 \\\n--local-execution | tee arxiv-local-gb-logs.txt</code></pre></div><p>Analyzing the training logs, you can see the per-epoch time has dropped somewhat:</p><div><pre><code>python analyze_training_time.py --log-file arxiv-local-gb-logs.txt\n\nReading logs from file: arxiv-local-gb-logs.txt\n\n=== Training Epochs Summary ===\nTotal epochs completed: 10\nAverage epoch time: 4.21 seconds\n\n=== Evaluation Summary ===\nTotal evaluations: 11\nAverage evaluation time: 1.63 seconds</code></pre></div><p>For such a small graph, the performance gains are modest, around 13% per epoch time. With large data, the potential gains are much greater. In the next section, you will create a pipeline and train a model for papers-100M, a citation graph with 111 million nodes and 3.2 billion edges.</p><h2>Create a SageMaker pipeline for distributed training</h2><p>After the SageMaker processing job that prepares the papers-100M data has finished processing and the data is stored in Amazon S3, you can set up a pipeline to train a model on that dataset.</p><h3>Build the GraphStorm GPU image</h3><p>For this job, you will use large GPU instances, so you will build and push the GPU image this time:</p><div><pre><code>cd ~/graphstorm\n\nbash ./docker/build_graphstorm_image.sh --environment sagemaker --device gpu\n\nbash docker/push_graphstorm_image.sh -e sagemaker -r $REGION -a $ACCOUNT_ID -d gpu</code></pre></div><h3>Deploy and run pipelines for papers-100M</h3><p>Before you deploy your new pipeline, upload the training YAML configuration for papers-100M to Amazon S3:</p><div><pre><code>aws s3 cp \\\n~/graphstorm/training_scripts/gsgnn_np/papers100M_nc.yaml \\\ns3://$BUCKET_NAME/yaml/</code></pre></div><p>Now you are ready to deploy your initial pipeline for papers-100M:</p><div><pre><code># Navigate to the example code \ncd ~/graphstorm/examples/sagemaker-pipelines-graphbolt \nPIPELINE_NAME=\"ogb-papers100M-pipeline\" \nbash deploy_papers100M_pipeline.sh \\ \n    --account $ACCOUNT_ID \\\n    --bucket-name $BUCKET_NAME --execution-role $SAGEMAKER_EXECUTION_ROLE_ARN \\\n    --pipeline-name $PIPELINE_NAME \\ \n    --use-graphbolt false</code></pre></div><p>Run the pipeline on SageMaker and let it run in the background:</p><div><pre><code># Navigate to the example code\ncd ~/graphstorm/examples/sagemaker-pipelines-graphbolt\n\nPIPELINE_NAME=\"ogb-papers100M-pipeline\"\nbash deploy_papers100M_pipeline.sh \\\n--account $ACCOUNT_ID \\\n--bucket-name $BUCKET_NAME --execution-role $SAGEMAKER_EXECUTION_ROLE_ARN \\\n--pipeline-name $PIPELINE_NAME \\\n--use-graphbolt false</code></pre></div><p>Your account needs to meet the required quotas for the requested instances. For this post, the defaults are set to four  for training jobs and one  instance for a processing job. To adjust your SageMaker service quotas, you can use the <a href=\"https://us-east-1.console.aws.amazon.com/servicequotas/home/services/sagemaker/quotas\" target=\"_blank\" rel=\"noopener\">Service Quotas console</a>. To run both pipelines in parallel, i.e. without GraphBolt and with GraphBolt, you will need 8 x  and 2 x </p><p>Next, you can deploy and run another pipeline, with GraphBolt enabled:</p><div><pre><code># Deploy the GraphBolt-enabled pipeline\nPIPELINE_NAME_GB=\"ogb-papers100M-graphbolt-pipeline\"\nbash deploy_papers100M_pipeline.sh \\\n--account $ACCOUNT_ID\\\n--bucket-name $BUCKET_NAME --execution-role $SAGEMAKER_EXECUTION_ROLE_ARN \\\n--pipeline-name $PIPELINE_NAME_GB \\\n--use-graphbolt true\n\n# Execute the GraphBolt pipeline on SageMaker\npython ~/graphstorm/sagemaker/pipeline/execute_sm_pipeline.py \\\n--pipeline-name $PIPELINE_NAME_GB \\\n--region us-east-1 \\\n--async-execution</code></pre></div><h3>Compare performance for GraphBolt-enabled training</h3><p>After both pipelines are complete, which should take approximately 4 hours, you can compare the training times for both cases.</p><p>On the page of the SageMaker console, there should be two new pipelines named  and <code>ogb-papers100M-graphbolt-pipeline</code>. Choose ogb-papers100M-pipeline, which will take you to the  tab for the pipeline. Copy the name of the latest successful execution and use that to run the training analysis script:</p><div><pre><code>python analyze_training_time.py \\\n--pipeline-name $PIPELINE_NAME\\\n--execution-name execution-1734404366941</code></pre></div><p>Your output will look like the following code:</p><div><pre><code>== Training Epochs Summary ===\nTotal epochs completed: 15\nAverage epoch time: 73.95 seconds\n\n=== Evaluation Summary ===\nTotal evaluations: 15\nAverage evaluation time: 15.07 seconds</code></pre></div><p>Now do the same for the GraphBolt-enabled pipeline:</p><div><pre><code>python analyze_training_time.py \\\n--pipeline-name $PIPELINE_NAME_GB \\\n--execution-name execution-1734463209078</code></pre></div><p>You will see the improved per-epoch and evaluation times:</p><div><pre><code>== Training Epochs Summary ===\nTotal epochs completed: 15\nAverage epoch time: 54.54 seconds\n\n=== Evaluation Summary ===\nTotal evaluations: 15\nAverage evaluation time: 4.13 seconds</code></pre></div><p>Without loss in accuracy, the latest version of GraphStorm achieved a speedup of approximately 1.4 times faster per epoch for training, and a speedup of 3.6 times faster in evaluation time! Depending on the dataset, the speedups can be even greater, as shown by the DGL team’s <a href=\"https://www.dgl.ai/release/2024/03/06/release.html\" target=\"_blank\" rel=\"noopener\">benchmarking</a>.</p><p>This post showcased how GraphStorm 0.4, integrated with DGL-GraphBolt, significantly speeds up large-scale GNN training and inference, by 1.4 and 3.6 times faster, respectively, as measured on the papers-100M dataset. As shown in the <a href=\"https://www.dgl.ai/release/2024/01/26/release.html\" target=\"_blank\" rel=\"noopener\">DGL benchmarks</a>, even larger speedups are possible depending on the dataset.</p><p>We encourage ML practitioners working with large graph data to try GraphStorm. Its low-code interface simplifies building, training, and deploying graph ML solutions on AWS, allowing you to focus on modeling rather than infrastructure.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/04/badge-photo-small-copy.jpg\" alt=\"\" width=\"100\" height=\"133\"> is a Senior Applied Scientist at Amazon Web Services, where he works on distributed machine learning systems and algorithms. He led the development of GraphStorm Processing, the distributed graph processing library for GraphStorm and is a core developer for GraphStorm. He received his PhD in Computer Science from the KTH Royal Institute of Technology, Stockholm, in 2019.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/04/xiang.jpeg\" alt=\"\" width=\"100\" height=\"133\"> is a Senior Applied Scientist at Amazon Web Services, where he develops deep learning frameworks including GraphStorm, DGL, and DGL-KE. He led the development of Amazon Neptune ML, a new capability of Neptune that uses graph neural networks for graphs stored in a Neptune graph database. He is now leading the development of GraphStorm, an open source graph machine learning framework for enterprise use cases. He received his PhD in computer systems and architecture at the Fudan University, Shanghai, in 2014.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/12/30/florian.jpg\" alt=\"\" width=\"100\" height=\"133\"> is a Principal Technical Product Manager at AWS AI/ML research supporting science teams like the graph machine learning group, and ML Systems teams working on large scale distributed training, inference, and fault resilience. Before joining AWS, Florian lead technical product management for automated driving at Bosch, was a strategy consultant at McKinsey &amp; Company, and worked as a control systems and robotics scientist—a field in which he holds a PhD.</p>","contentLength":17809,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Creating a Useful Voice-Activated Fully Local RAG System","url":"https://www.kdnuggets.com/creating-useful-voice-activated-fully-local-rag-system","date":1739293249,"author":"Cornellius Yudha Wijaya","guid":247,"unread":true,"content":"<article>This article will explore initiating the RAG system and making it fully voice-activated.</article>","contentLength":88,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/kdn-wijaya-creating-useful-voice-activated-rag.png","enclosureMime":"","commentsUrl":null},{"title":"Python Insider: Python 3.14.0 alpha 5 is out","url":"https://pythoninsider.blogspot.com/2025/02/python-3140-alpha-5-is-out.html","date":1739291158,"author":"","guid":154,"unread":true,"content":"<p>Here comes the antepenultimate alpha.</p><p><strong>This is an early developer preview of Python\n3.14</strong></p><p>Python 3.14 is still in development. This release, 3.14.0a5, is the\nfifth of seven planned alpha releases.</p><p>Alpha releases are intended to make it easier to test the current\nstate of new features and bug fixes and to test the release process.</p><p>During the alpha phase, features may be added up until the start of\nthe beta phase (2025-05-06) and, if necessary, may be modified or\ndeleted up until the release candidate phase (2025-07-22). Please keep\nin mind that this is a preview release and its use is\n recommended for production environments.</p><p>Many new features for Python 3.14 are still being planned and\nwritten. Among the new major new features and changes so far:</p><p>The next pre-release of Python 3.14 will be the penultimate alpha,\n3.14.0a6, currently scheduled for 2025-03-14.</p><p>2025-01-29 marked the start of a new lunar year, the Year of the\nSnake 🐍 (and the Year of Python?).</p><p>For centuries, π was often approximated as 3 in China. Some time\nbetween the years 1 and 5 CE, astronomer, librarian, mathematician and\npolitician Liu Xin (劉歆) calculated π as 3.154.</p><p>Around 130 CE, mathematician, astronomer, and geographer Zhang Heng\n(張衡, 78–139) compared the celestial circle with the diameter of the\nearth as 736:232 to get 3.1724. He also came up with a formula for the\nratio between a cube and inscribed sphere as 8:5, implying the ratio of\na square’s area to an inscribed circle is √8:√5. From this, he\ncalculated π as √10 (~3.162).</p><p>Third century mathematician Liu Hui (刘徽) came up with an algorithm\nfor calculating π iteratively: calculate the area of a polygon inscribed\nin a circle, then as the number of sides of the polygon is increased,\nthe area becomes closer to that of the circle, from which you can\napproximate π.</p><p>This algorithm is similar to the method used by Archimedes in the 3rd\ncentury BCE and Ludolph van Ceulen in the 16th century CE (see <a href=\"https://blog.python.org/2024/11/python-3140-alpha-2-released.html\">3.14.0a2\n  release notes</a>), but Archimedes only went up to a 96-sided polygon\n(96-gon). Liu Hui went up to a 192-gon to approximate π as 157/50 (3.14)\nand later a 3072-gon for 3.14159.</p><p>Liu Hu wrote a commentary on the book The Nine Chapters on the\nMathematical Art which included his π approximations.</p><p>In the fifth century, astronomer, inventor, mathematician,\npolitician, and writer Zu Chongzhi (祖沖之, 429–500) used Liu Hui’s\nalgorithm to inscribe a 12,288-gon to compute π between 3.1415926 and\n3.1415927, correct to seven decimal places. This was more accurate than\nHellenistic calculations and wouldn’t be improved upon for 900\nyears.</p><p>Thanks to all of the many volunteers who help make Python Development\nand these releases possible! Please consider supporting our efforts by\nvolunteering yourself or through organisation contributions to the <a href=\"https://www.python.org/psf-landing/\">Python Software\nFoundation</a>.</p><p>Regards from a remarkably snowless Helsinki,</p><p>Your release team, Hugo van KemenadeSteve Dower</p>","contentLength":2941,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: Building a Python Command-Line To-Do App With Typer","url":"https://realpython.com/courses/build-command-line-todo-app-typer/","date":1739282400,"author":"","guid":94,"unread":true,"content":"<p>Building an application to manage your  can be an interesting project when you’re learning a new programming language or trying to take your skills to the next level. In this video course, you’ll build a functional to-do application for the command line using Python and <a href=\"https://typer.tiangolo.com/\">Typer</a>, which is a relatively young library for creating powerful command-line interface (CLI) applications in almost no time.</p><p>With a project like this, you’ll apply a wide set of core programming skills while building a real-world application with real features and requirements.</p><p><strong>In this video course, you’ll learn how to:</strong></p><ul><li>Build a functional  with a  in Python</li><li>Use Typer to add , , and  to your to-do app</li><li>Test your Python to-do application with Typer’s  and </li></ul>","contentLength":734,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Preparing for AI","url":"https://www.oreilly.com/radar/preparing-for-ai-2/","date":1739279713,"author":"Mike Loukides","guid":542,"unread":true,"content":"<p>When tools like GitHub Copilot first appeared, it was received wisdom that AI would make programming easier. It would be a boon to new programmers at the start of their careers, just learning a few new programming languages. Some of that is no doubt true: Large language models can answer questions, whip up a tutorial, turn descriptive comments into code, and even write short programs successfully. And large language models are getting better at the things they can’t yet do: understanding large codebases and writing code with fewer bugs. On the surface, it looks like things are getting easier for entry-level programmers.</p><p>That may be true, but I—and an increasing number of others—have argued that AI broadens the gap between junior and senior developers. As we grow into AI, we’re growing beyond “this makes programming easier.” As we grow into AI, we’re finding that programming is less about writing clever prompts and more about managing context. Writing about ChatGPT’s memory feature, Simon Willison <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://simonwillison.net/2024/Oct/15/chatgpt-horoscopes/\" target=\"_blank\">said</a>, “Using LLMs effectively is entirely about controlling their context—thinking carefully about exactly what information is currently being handled by the model.” Forgive the anthropomorphism, but a conversation with a language model is just that: a conversation, where previous statements from both parties are part of the context. The context also includes the code you’re working on and any other documents or instructions (including sketches and diagrams) that the AI can access. In addition to the context that’s explicit in a chat session, a lot of context is implicit: assumptions, experiences, and other knowledge shared by the humans working on a project. That implicit context is a critical part of software development and also has to be made available to AI. Managing context is an important skill for any developer using AI, but it’s new, a skill junior developers have to acquire in addition to basic programming.</p><p>Writing more specifically about programming, Steve Yegge <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://steve-yegge.medium.com/the-death-of-the-stubborn-developer-b5e8f78d326b\" target=\"_blank\">makes it clear</a> that chat-oriented programming (CHOP) isn’t the future; it’s the present. “You need to type fast, read fast, use tools well, and have the chops (ahem) to sling large quantities of text and context around manually.” Right now, we need better tools for doing this—and we will eventually have those tools. But they’re not here yet. Still, whether you’re a junior or senior developer, it’s a way of programming that you need to learn if you intend to be competitive. And context is key. Discussing the difference between GPT-4o and o1, Ben Hylak <a rel=\"noreferrer noopener\" aria-label=\"writes (opens in a new tab)\" href=\"https://www.latent.space/p/o1-skill-issue\" target=\"_blank\">writes</a> that, unlike 4o, “o1 will just take lazy questions at face value and doesn’t try to pull the context from you. Instead, you need to push as much context as you can into o1.” His point is that today’s most advanced models don’t really want prompts; they want product briefs, as thorough and complete as you can make them. AI can help software developers in many ways, but software developers still have to think through the problems they need to solve and determine how to solve them. Programming with AI requires teaching the AI what you want it to do. And describing how to solve a problem is a far more fundamental skill than being able to spit out Python or JavaScript at scale.</p><p>To prepare for AI, we all need to realize that we’re still in charge; we still need to understand and solve the problems we face. Sure, there are other skills involved. AI writes buggy code? So do humans—and AI seems to be getting better at writing correct code. Bruce Schneier and Nathan Sanders <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://www.schneier.com/blog/archives/2025/01/ai-mistakes-are-very-different-from-human-mistakes.html\" target=\"_blank\">argue</a> that AI mistakes are different from human mistakes, if for no other reason than that they’re random rather than focused around a misunderstood concept. But regardless of the source or the reason, bugs need to be fixed, and debugging is a skill that takes years to learn. Debugging code that you didn’t write is even more difficult than debugging your own code. AI-generated bugs may not be a fundamentally bigger problem than human bugs, but for the time being humans will have to find them. (And managers will need to recognize that a job that devolves into bug-fixing, while essential, is likely to be demoralizing.) AI writes insecure code? Again, so do humans. Vulnerabilities are just another kind of bug: AI will get better at writing secure code over time, but we are still responsible for finding and fixing vulnerabilities.</p><p>So yes, the industry is changing—perhaps faster than it’s changed at any time in history. It’s not just lone programmers, bashing away at the keyboards (if it ever was). It’s software developers working with AI at every stage of product development, and with each other. It’s often been said that software development is a team sport. Now there’s another player on the team, and it’s a player that may not follow the same rulebook.</p><p>How do we prepare for the change coming our way? First, don’t ignore AI. Steve Yegge <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://steve-yegge.medium.com/the-death-of-the-stubborn-developer-b5e8f78d326b\" target=\"_blank\">reports</a> that he’s seen companies where the senior developers won’t touch AI (“overhyped new-fangled junk”), while the juniors are excited to move forward. He’s also seen companies where the juniors are afraid that AI will “take their jobs,” while the seniors are rapidly adopting it. We need to be clear: If you’re ignoring AI, you’re resigning yourself to failure. If you’re afraid that AI will take your job, learning to use it well is a much better strategy than rejecting it. AI won’t take our jobs, but it will change the way we work.</p><p>Second, be realistic about what AI can do. Using AI well will make you more effective, but it’s not a shortcut. It does generate errors, both of the “this won’t compile” kind and the “results looks right, but there’s a subtle error in the output” kind. AI has become reasonably good at fixing the “doesn’t compile” bugs, but it’s not good at the subtle errors. Detecting and debugging subtle errors is hard; it’s important to remember <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://www.laws-of-software.com/laws/kernighan/\" target=\"_blank\">Kernighan’s law</a>: Software is twice as hard to debug as it is to write. So if you write code that is as clever as you can be, you’re not smart enough to debug it. How does that apply when you need to debug AI-generated code, generated by a system that has seen everything on GitHub, Stack Overflow, and more? Do you understand it well enough to debug it? If you’re responsible for delivering professional-quality code, you won’t succeed by using AI as a shortcut. AI doesn’t mean that you don’t need to know your tools—including the dark corners of your programming languages. You are still responsible for delivering working software.</p><p>Third, train yourself to use AI effectively. O’Reilly author <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://learning.oreilly.com/search/?q=author%3A%20%22Andrew%20Stellman%22&amp;suggested=true&amp;suggestionType=author&amp;originalQuery=andrew%20stellman&amp;rows=100&amp;language=en\" target=\"_blank\">Andrew Stellman</a><a href=\"https://www.oreilly.com/radar/bridging-the-ai-learning-gap/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"recommends several exercises (opens in a new tab)\">recommends several exercises</a> for learning to use AI effectively. Here are two: Take a program you’ve written, paste it into your favorite AI chat, and ask the AI to generate comments. Then look at the comments: Are they correct? Where is the AI wrong? Where did it misconstrue the intent? Stellman’s point is that you wrote the code; you understand it. You’re not second-guessing the AI. You’re learning that it can make mistakes and seeing the kinds of mistakes that it can make. A good next step is asking an AI assistant to generate unit tests, either for existing code or some new code (which leads to test-driven development). Unit tests are a useful exercise because testing logic is usually simple; it’s easy to see if the generated code is incorrect. And describing the test—describing the function that you’re testing, its arguments, the return type, and the expected results—forces you to think carefully about what you’re designing.</p><p>Learning how to describe a test in great detail is an important exercise because using generative AI isn’t about writing a quick prompt that gets it to spit out a function or a short program that’s likely to be correct. The hard part of computing has always been understanding exactly what we want to do. Whether it’s understanding users’ needs or understanding how to transform the data, that act of understanding is the heart of the software development process. And whatever else generative AI is capable of, one thing it can’t do is understand your problem. Using AI successfully requires describing your problem in detail, in a prompt that’s likely to be significantly longer than the code the AI generates. You can’t omit details, because the AI doesn’t know about the implicit assumptions we make all the time—including “I don’t really understand it, but I’m sure I can wing it when I get to that part of the program.” The more explicit you can be, the greater the probability of a correct result. Programming is the <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://x.com/KevlinHenney/status/3361631527\" target=\"_blank\">act of describing a task in unambiguous detail</a>, regardless of whether the language is English or C++. The ability to understand a problem with all its ramifications, special cases, and potential pitfalls is part of what makes a senior software developer; it’s not something we expect of someone at the start of their career.</p><p>We will still want AI-generated source code to be well-structured. Left to itself, generated code tends to accumulate into a mountain of technical debt: badly structured code that nobody really understands and can’t be maintained. I’ve seen arguments that AI code doesn’t need to be well-structured; humans don’t need to understand it, only AI systems that can parse mind-numbingly convoluted logic do. That might be true in some hypothetical future, but at least in the near-term future, we don’t have those systems. It’s overly optimistic at best to assume that AI assistants will be able to work effectively with tangled spaghetti code. I don’t think AI can understand a mess significantly better than a human. It is definitely optimistic to believe that such code can be modified, either to add new features or to fix bugs, whether a human or an AI is doing the modification. One thing we’ve learned in the 70 or so years that software development has been around: Code has a very long lifetime. If you write mission-critical software now, it will probably be in use long after you’ve retired. Future generations of software developers—and AI assistants—will need to fix bugs and add features. A classic problem with badly structured code is that its developers have backed themselves into corners that make modification impossible without triggering a cascade of new problems. So part of understanding what we want to do, and describing it to a computer, is telling it the kind of structure we want: telling it how to organize code into modules, classes, and libraries, telling it how to structure data. The result needs to be maintainable—and, at least right now, that’s something we do better than AI. I don’t mean that you shouldn’t ask AI how to structure your code, or even to do the structuring for you; but in the end, structure and organization are your responsibility. If you simply ask AI how to structure your code and then follow its advice without thinking, then you’ll have as much success as when you simply ask AI to write the code and commit it without testing.</p><p>I stress understanding what we want to do because it’s been one of the weakest parts of the software development discipline. Understanding the problem looks in both directions: to the user, the customer, the person who wants you to build the software; and to the computer, the compiler, which will deal with whatever code you give it. We shouldn’t separate one from the other. We often say “garbage in, garbage out,” but frequently forget that “garbage in” includes badly thought-out problem descriptions as well as poor data or incorrect algorithms. What do we want the computer to do? I’ve seen many descriptions of what the future of programming might look like, but none of them assume that the AI will determine what we want it to do. What are the problems we need to solve? We need to understand them—thoroughly, in depth, in detail, and not in a single specification written when the project starts. That was one of the most important insights of the <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://agilemanifesto.org/\" target=\"_blank\">Agile movement</a>: to value “individuals and interactions over processes and tools” and “customer collaboration over contract negotiation.” Agile was based on the recognition that you are unlikely to collect all the user’s requirements at the start of a project; instead, start building and use frequent demos as opportunities to collect more insight from the customer, building what they really want through frequent mid-course corrections. Being “agile” when AI is writing the code is a new challenge—but a necessary one. How will programmers manage those corrections when AI is writing the code? Through managing the context; through giving the AI enough information so that it can modify the code that needs changing while keeping the rest stable. Remember that iterations in an Agile process aren’t about fixing bugs; they’re about making sure the resulting software solves the users’ problem.</p><p>Understanding what we want to build is especially important right now. We’re at the start of one of the biggest rethinkings of software development that we’ve ever had. We’re talking about building kinds of software that we’ve never seen before: intelligent agents that solve problems for their users. How will we build those agents? We’ll need to understand what customers want in detail—and not the “I want to order groceries from Peapod” detail but at a higher, more abstract level: “I want software that can negotiate for me; I want software that can find the best deal; I want software that maximizes the probability of success; I want software that can plan my retirement.” What kinds of specifications will we need to do that correctly? If software is executing actions on behalf of a customer, it needs to ensure that those actions are performed correctly. If finances are involved, errors are close to intolerable. If security or safety are concerned, errors are really intolerable—but in many cases, we don’t know how to specify those requirements yet.</p><p>Which is not to say that we  know how to specify those requirements. We already know how to build some kinds of guardrails to keep AI on track. We already know how to build some evaluation suites that test AI’s reliability. But it is to say that all of these requirements will be part of the software developers’ job. And that, all things considered, the job of the software developer may be getting more difficult, not less.</p><p>With all of this in mind, let’s return to the so-called “junior developer”: the recent graduate who knows a couple of programming languages (more or less) and has written some relatively short programs and completed some medium-length projects. They may have little experience working on larger teams; they probably have little experience collecting requirements; they are likely to have significant experience using coding assistants like GitHub Copilot or Cursor. They are likely to go down unproductive rabbit holes when trying to solve a problem rather than realize that they’ve hit a dead end and looking for another approach. How do they grow from a “junior” developer to a “senior”? Is asking an AI questions sufficient? Let’s also consider a related question: How does a “senior” become senior? Trisha Gee makes a very underappreciated point in “<a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://www.oreilly.com/radar/rift-between-junior-and-senior-developers/\" target=\"_blank\">The Rift Between Juniors and Seniors</a>”: Part of what makes a senior software developer senior is mentoring juniors. Mentoring solidifies the senior’s knowledge as much as it helps the junior take the next step. You don’t really know anything well until you can teach it. In turn, seniors need juniors who can be taught.</p><p>Whether there’s a formal training program for junior developers or informal mentoring, we clearly need juniors precisely because we need seniors—and where will the next generation of seniors come from if not well-trained juniors? Forrest Brazeal <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://newsletter.goodtechthings.com/p/the-death-of-the-modified-developer\" target=\"_blank\">makes the point</a>:</p><blockquote><p>If we can’t make room in our taxonomy of technical work for someone who still needs human training, we are just doing the same old thing IT has been doing for decades: borrowing from our future to cash in on the current hype.…And every experienced generalist starts out inexperienced. They start as a junior developer. That’s not where software engineering dies: it’s where it’s born.</p></blockquote><p>Yes—that’s where software engineering is born: not in learning programming languages or memorizing APIs but in practice, experience, and mentorship. We need to be reminded that software development isn’t just about generating code. The importance of writing code may diminish in the future, but as Stanford computer science professor Mehran Sahami said in a <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://www.youtube.com/watch?v=J91_npj0Nfw\" target=\"_blank\">conversation</a> with Andrew Ng, “We taught you Python, but really we were trying to get you to understand how to take problems and think about them systematically.” Good programmers will have honed their skills in understanding the problem and goals, structuring the solution, providing necessary context to others, and coaching others to build their own skills in these areas. AI doesn’t change these essential skills—and no software developer, senior or junior, will go wrong by investing time in learning them. </p><p>As Tim O’Reilly writes, AI may be <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://www.oreilly.com/radar/the-end-of-programming-as-we-know-it/\" target=\"_blank\">the end of programming as we know it</a>, but it is not the end of programming. It’s a new beginning. We’ll be designing and building new kinds of software that we couldn’t have imagined a few years ago. Software development is about understanding and solving problems, regardless of whether the programming language is Python or English, regardless of whether or not an AI assistant is used. It will be the software developers’ job to determine what we want, what we really need, and to describe that to our <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://darioamodei.com/machines-of-loving-grace\" target=\"_blank\">machines of loving grace</a>.</p><ol><li>From personal communication; we will soon publish an article by Andrew Stellman that goes into more detail.</li></ol><p><em>Thanks to Nat Torkington, Andrew Stellman, Kevlin Henney, Tim O’Reilly, and Mary Treseler for comments, discussion, and even a few paragraphs. </em></p>","contentLength":18147,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"10 Little-Known Python Libraries That Will Make You Feel Like a Data Wizard","url":"https://www.kdnuggets.com/10-little-known-python-libraries-data-wizard","date":1739278813,"author":"Josep Ferrer","guid":246,"unread":true,"content":"<article>In this article, I will introduce you to 10 little-known Python libraries every data scientist should know.</article>","contentLength":107,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/Ferrer_10_little_known_libraries1.png","enclosureMime":"","commentsUrl":null},{"title":"Introducing the CrossValidationReport","url":"https://www.youtube.com/watch?v=R6dRAE83Y2c","date":1739277902,"author":"probabl","guid":368,"unread":true,"content":"<article>Skore version 0.6 introduces the `CrossValidationReport` that provides you with an `EstimatorReport` for each fold of your cross-validation, enabling you to inspect your estimator on each fold.\n\n------\nLinks:\n\nskore v0.6 documentation:\nhttps://skore.probabl.ai/0.6/index.html\n\nskore GitHub repository:\nhttps://github.com/probabl-ai/skore\n\nWebsite: https://probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nTwitter: https://x.com/probabl_ai\nBluesky: https://bsky.app/profile/probabl.bsky.social\nDiscord: https://discord.probabl.ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\n#probabl</article>","contentLength":722,"flags":null,"enclosureUrl":"https://www.youtube.com/v/R6dRAE83Y2c?version=3","enclosureMime":"","commentsUrl":null},{"title":"Kushal Das: Using openpgp-card-tool-git with git","url":"https://kushaldas.in/posts/using-openpgp-card-tool-git-with-git.html","date":1739272360,"author":"","guid":153,"unread":true,"content":"<p>One of the power of Unix systems comes from the various small tools and how\nthey work together. One such new tool I am using for some time is for  &amp;  using OpenPGP and my Yubikey for the actual signing\noperation via\n<a href=\"https://crates.io/crates/openpgp-card-tool-git\">openpgp-card-tool-git</a>. I\nreplaced the standard  for this usecase with the  command from this\nproject.</p><h3>Installation &amp; configuration</h3><pre><code>cargo install openpgp-card-tool-git\n</code></pre><p>Then you will have to configuration your (in my case the global configuration) git configuration.</p><pre><code>git config --global gpg.program &lt;path to oct-git&gt;\n</code></pre><p>I am assuming that you already had it configured before for signing, otherwise\nyou have to run the following two commands too.</p><pre><code>git config --global commit.gpgsign true\ngit config --global tag.gpgsign true\n</code></pre><p>Before you start using it, you want to save the pin in your system keyring.</p><p>Use the following command.</p><p>That is it, now your  will sign the commits using  tool.</p><p>In the next blog post I will show how to use the other tools from the \n<a href=\"https://crates.io/users/hko-s\">author</a> for various different OpenPGP oeprations.</p>","contentLength":1007,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust vs. Go (Golang): Performance (Fastest Frameworks + PostgreSQL)","url":"https://www.youtube.com/watch?v=31R8Ef9A0iw","date":1739265918,"author":"Anton Putra","guid":313,"unread":true,"content":"<article>Go vs Rust Performance Comparison. Go (1.23.6) vs Rust (1.84.1).\n\n🔴 To support my channel, I'd like to offer Mentorship/On-the-Job Support/Consulting (me@antonputra.com)\n\n🍿 Benchmarks: https://youtube.com/playlist?list=PLiMWaCMwGJXmcDLvMQeORJ-j_jayKaLVn&amp;si=p-UOaVM_6_SFx52H\n\n👋 AWS is expensive - Infra Support Fund: https://buymeacoffee.com/antonputra\n\n▬▬▬▬▬ Experience &amp; Location 💼 ▬▬▬▬▬\n►  I’m a Senior Software Engineer at Juniper Networks (13+ years of experience)\n►  Located in San Francisco Bay Area, CA (US citizen)\n\n▬▬▬▬▬▬ Connect with me 👋 ▬▬▬▬▬▬\n►  LinkedIn: https://www.linkedin.com/in/anton-putra\n►  Twitter/X: https://twitter.com/antonvputra\n►  GitHub: https://github.com/antonputra\n►  Email: me@antonputra.com\n\n▬▬▬▬▬▬▬ Source Code 📚 ▬▬▬▬▬▬▬\n► Original Source Code: https://github.com/antonputra/tutorials/tree/244/lessons/244\n\nPR to improve Rust - https://github.com/antonputra/tutorials/pull/429\nPR to improve Rust - https://github.com/antonputra/tutorials/pull/431\nPR to improve Rust - https://github.com/antonputra/tutorials/pull/433\n\n#rust #golang #devops</article>","contentLength":1179,"flags":null,"enclosureUrl":"https://www.youtube.com/v/31R8Ef9A0iw?version=3","enclosureMime":"","commentsUrl":null},{"title":"Stateful vs. Stateless Architecture","url":"https://blog.algomaster.io/p/stateful-vs-stateless-architecture","date":1739263586,"author":"Ashish Pratap Singh","guid":402,"unread":true,"content":"<p>When a client interacts with a server, there are two ways to handle it:</p><ul><li><p> The client includes all necessary data in each request, so the server doesn’t store any prior information.</p></li><li><p> The server retains some data from previous requests, making future interactions dependent on past state.</p></li></ul><blockquote><p>In software systems,  refers to any data that persists across requests, such as user sessions, shopping carts, or authentication details.</p></blockquote><p>The choice between stateless and stateful architecture can affect scalability, performance, complexity, and cost.</p><p>In this article, we’ll break down both the approaches, their advantages and trade-offs, and when to use each—with real-world examples.</p><p>If you’re finding this newsletter valuable and want to deepen your learning, consider becoming a .</p><p>As a paid subscriber, you'll receive an <strong>exclusive deep-dive article</strong> every week, access to a structured100+topics and interview questions, and other .</p><p>In a , the system remembers client or process data () across multiple requests.</p><p>Once a client connects, the server holds on to certain details—like user preferences, shopping cart contents, or authentication sessions—so the client doesn’t need to resend everything with each request.</p><p>Stateful systems typically store the state data in a database or in-memory storage.</p><blockquote><p> During online shopping, when you add items to your cart, the website remembers your selections. If you navigate away to browse more items and then return to your cart, your items are still there, waiting for you to check out.</p></blockquote><h2>Common Patterns in Stateful Architecture</h2><p>If you use  session storage (i.e., each app server keeps its own sessions locally), you can configure your load balancer for “sticky sessions.” </p><p>This means: Once a client is assigned to , all subsequent requests from that client are routed to .</p><blockquote><p>: If Server A fails, the user’s session data is lost or the user is forced to re-log in. Sticky sessions are also less flexible when scaling because you can’t seamlessly redistribute user traffic to other servers.</p></blockquote><h3>2. Centralized Session Store</h3><p>A more robust approach is to store session data in a  or  store (e.g., Redis). </p><ul><li><p>: All servers can access and update session data for any user. Any server can handle any request, because the session data is not tied to a specific server’s memory.</p></li></ul><blockquote><p>: You introduce network overhead and rely on an external storage. If the centralized storage fails, you lose session data unless you have a fallback strategy.</p></blockquote><ul><li><p><strong>Personalized Experiences:</strong> Stateful systems can deliver highly tailored interactions, as they remember user preferences and past actions.</p></li><li><p> Users can seamlessly resume activities where they left off, even if they disconnect and reconnect.</p></li><li><p> Certain operations can be faster because the server already possesses necessary data.</p></li></ul><ul><li><p> Maintaining state for a large number of users can become resource-intensive and complex, as each server needs to keep track of specific sessions.</p></li><li><p> Managing and synchronizing state across multiple servers (if needed) introduces additional challenges.</p></li><li><p> If a server holding a user's state fails, their session data might be lost.</p></li></ul><ul><li><p><strong>E-commerce Shopping Carts</strong> – Stores cart contents and user preferences across multiple interactions, even if the user navigates away and returns.</p></li><li><p><strong>Video Streaming Services (Netflix, YouTube)</strong> – Remembers user watch progress, recommendations, and session data for a seamless experience.</p></li><li><p><strong>Messaging Apps (WhatsApp, Slack)</strong> – Maintains active user sessions and message history for real-time communication.</p></li></ul><p>In a  architecture, the server does  preserve client-specific data between individual requests.</p><ul><li><p>Each request is treated as , with no memory of previous interactions.</p></li><li><p>Every request must include <strong>all necessary information</strong> for processing.</p></li><li><p>Once the server responds, it <strong>discards any temporary data</strong> used for that request.</p></li></ul><blockquote><p>: Most  follow a stateless design. For instance, when you request weather data from a public API, you must provide all required details (e.g., location) in each request. The server processes it, sends a response, and forgets the interaction.</p></blockquote><h2>Common Patterns in Stateless Architecture</h2><h3>1. Token-Based Authentication (JWT)</h3><p>A very popular way to implement statelessness is through tokens, particularly  (JSON Web Tokens):</p><ol><li><p><strong>Client Authenticates Once</strong>: The user logs in using credentials (username/password) for the first time, and the server issues a signed .</p></li><li><p>: The client includes JWT token in each request (e.g., <code>Authorization: Bearer &lt;token&gt;</code> header).</p></li><li><p>: The server validates the token’s signature and any embedded claims (e.g., user ID, expiry time).</p></li><li><p>: The server does  need to store session data; it just verifies the token on each request.</p></li></ol><blockquote><p>Many APIs, including OAuth-based authentication systems, use JWTs to enable stateless, scalable authentication.</p></blockquote><p>Stateless architectures benefit from , ensuring that repeated requests produce the same result. This prevents inconsistencies due to network retries or client errors.</p><p> A  request with the same payload  updates the user’s data but doesn’t create duplicates.</p><blockquote><p>Idempotent APIsensures consistency and reliability, especially in distributed systems where requests might be retried automatically.</p></blockquote><ul><li><p> Stateless systems are inherently easier to scale horizontally. New servers can be added effortlessly, as they don't need to maintain any specific user sessions.</p></li><li><p> Since servers don't track state, the architecture is generally simpler and easier to manage.</p></li><li><p> The failure of a single server won't disrupt user sessions, as data isn't tied to specific servers.</p></li><li><p>With no session data stored on the server, you free up memory that would otherwise be reserved for session management.</p></li><li><p><strong>Easier to Cache Responses: </strong>Since requests are self-contained, caching layers (like CDNs) can more easily store and serve responses.</p></li></ul><ul><li><p> Stateless systems can't provide the same level of personalization or context awareness as stateful systems without additional effort (like using cookies or tokens).</p></li><li><p>The client must keep track of the authentication token or relevant data. If it loses the token, it must re-authenticate.</p></li><li><p> Every request needs to carry all the required information, potentially leading to larger payloads.</p></li></ul><ol><li><p><strong>Microservices Architecture: </strong>Each service handles requests independently, relying on external databases or caches instead of maintaining session data.</p></li><li><p><strong>Public APIs (REST, GraphQL): </strong>Clients send tokens with each request, eliminating the need for server-side sessions.</p></li><li><p>Tokens are securely stored on the device and sent with every request to authenticate users.</p></li><li><p>Stateless endpoints make caching easier since responses depend only on request parameters, not stored session data. A CDNcan cache and serve repeated requests, improving performance and reducing backend load.</p></li></ol><p>There's no one-size-fits-all answer when choosing between stateful and stateless architectures.</p><p>The best choice depends on your application’s needs, scalability goals, and user experience expectations.</p><h3><strong>When to Choose Stateful Architecture</strong></h3><p>Stateful systems are ideal when <strong>user context and continuity</strong> are critical. </p><p>Consider a stateful approach if your application:</p><ul><li><p>Requires personalization (e.g., user preferences, session history)</p></li><li><p>Needs real-time interactions (e.g., chat applications, multiplayer gaming)</p></li><li><p>Manages multi-step workflows (e.g., online banking transactions, checkout processes)</p></li><li><p>Must retain authentication sessions for security and convenience</p></li></ul><blockquote><p> A shopping cart in an e-commerce app should persist, so users don’t have to re-add items after refreshing the page.</p></blockquote><h3><strong>When to Choose Stateless Architecture</strong></h3><p>Stateless systems work best when <strong>scalability, simplicity, and resilience</strong> are top priorities. </p><p>Use a stateless approach if your application:</p><ul><li><p>Handles a high volume of requests and needs to scale efficiently</p></li><li><p>Doesn’t require storing client-specific data between requests</p></li><li><p>Needs fast, distributed processing without server dependencies</p></li><li><p>Must ensure reliability and failover readiness</p></li></ul><blockquote><p> A weather API doesn’t need to remember previous requests. Each query includes the location, and the response is processed independently.</p></blockquote><h3><strong>Hybrid Approaches: The Best of Both Worlds</strong></h3><p>Many modern applications  stateful and stateless components for flexibility.</p><p>This hybrid approach allows:</p><ul><li><p>Stateless APIs for core functionality, ensuring high scalability</p></li><li><p>Stateful sessions for personalization, improving user experience</p></li><li><p>External session stores (e.g., Redis) to manage state while keeping app servers stateless</p></li></ul><blockquote><p> A video streaming platform (e.g., Netflix) uses a stateless backend for streaming but retains stateful user sessions to track watch history and recommendations.</p></blockquote><p>If you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.</p><p>If you have any questions or suggestions, leave a comment.</p><div data-attrs=\"{&quot;url&quot;:&quot;https://blog.algomaster.io/p/how-i-mastered-data-structures-and-algorithms?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjo4MzYwMjc0MywicG9zdF9pZCI6MTQ1NjU1MjUyLCJpYXQiOjE3MjE1MjE3MzEsImV4cCI6MTcyNDExMzczMSwiaXNzIjoicHViLTIyMDIyNjgiLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.2cNY811YEugd5iH9XJQhakBzyahGqF7PcATBlFj5J2w&quot;,&quot;text&quot;:&quot;Share&quot;}\" data-component-name=\"CaptionedButtonToDOM\"><div><p>This post is public so feel free to share it.</p></div></div><p> If you’re enjoying this newsletter and want to get even more value, consider becoming a .</p><p>I hope you have a lovely day!</p>","contentLength":8861,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/7e4801c3-e3aa-4ab6-8fe6-759af4a1f91a_1684x1196.png","enclosureMime":"","commentsUrl":null},{"title":"Django Weblog: DSF member of the month - Lily Foote","url":"https://www.djangoproject.com/weblog/2025/feb/10/dsf-member-of-the-month-lily-foote/","date":1739249491,"author":"","guid":152,"unread":true,"content":"<p>For February 2025, we welcome Lily Foote (<a href=\"https://fosstodon.org/@lilyf\">@lilyf</a>) as our DSF member of the month! ⭐</p><p>Lily Foote is a contributor to Django core for many years, especially on the ORM. She is currently a member of the Django 6.x <a href=\"https://docs.djangoproject.com/en/dev/internals/organization/#steering-council\">Steering Council</a> and she has been a DSF member since March 2021. \nYou can learn more about Lily by visiting <a href=\"https://github.com/LilyFoote\">her GitHub profile</a>.</p><p>Let’s spend some time getting to know Lily better!</p><h4>Can you tell us a little about yourself (hobbies, education, etc)</h4><p>My name is Lily Foote and I’ve been contributing to Django for most of my career. I’ve also recently got into Rust and I’m excited about using Rust in Python projects. When I’m not programming, I love hiking, climbing and dancing (Ceilidh)! I also really enjoying playing board games and role playing games (e.g. Dungeons and Dragons).</p><h4>How did you start using Django?</h4><p>I’d taught myself Python in my final year at university by doing <a href=\"https://projecteuler.net/\">Project Euler</a> problems and then decided I wanted to learn how to make a website. Django was the first Python web framework I looked at and it worked really well for me.</p><h4>What other framework do you know and if there is anything you would like to have in Django if you had magical powers?</h4><p>I’ve done a small amount with Flask and FastAPI. More than any new features, I think the thing that I’d most like to see is more long-term contributors to spread the work of keeping Django awesome.</p><h4>What projects are you working on now?</h4><p>The side project I’m most excited about is <a href=\"https://github.com/LilyFoote/django-rusty-templates\">Django Rusty Templates</a>, which is a re-implementation of Django’s templating language in Rust.</p><h4>Which Django libraries are your favorite (core or 3rd party)?</h4><h4>What are the top three things in Django that you like?</h4><p>Django Conferences, the mentorship program Djangonaut Space and the whole community!</p><h4>You have been a mentor multiple times with GSoC and Djangonaut Space program, what is required according to you to be a good mentor?</h4><p>I think being willing to invest time is really important. Checking in with your mentees frequently and being an early reviewer of their work. I think this helps keep their motivation up and allows for small corrections early on.</p><h4>Any advice for future contributors?</h4><p>Start small and as you get more familiar with Django and the process of contributing you can take on bigger issues. Also be patient with reviewers – Django has high standards, but is mostly maintained by volunteers with limited time.</p><p>Yes! It’s a huge honour! Since January, we’ve been meeting weekly and it feels like we’ve hardly scratched the surface of what we want to achieve. The biggest thing we’re trying to tackle is how to improve the contribution experience – especially evaluating new feature ideas – without draining everyone’s time and energy.</p><h4>You have a lot of knowledge in the Django ORM, how did you start to contribute to this part?</h4><p>I added the Greatest and Least expressions in Django 1.9, with the support of one of the core team at the time. After that, I kept showing up (especially at conference sprints) and finding a new thing to tackle.</p><h4>Is there anything else you’d like to say?</h4><p><strong>Thank you for doing the interview, Lily!</strong></p>","contentLength":3110,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Go 1.24 is released!","url":"https://go.dev/blog/go1.24","date":1739232000,"author":"Junyang Shao, on behalf of the Go team","guid":136,"unread":true,"content":"<div data-slug=\"/blog/go1.24\"><p>\n      Junyang Shao, on behalf of the Go team\n      11 February 2025\n      </p><p>Today the Go team is excited to release Go 1.24,\nwhich you can get by visiting the <a href=\"https://go.dev/dl/\">download page</a>.</p><p>Go 1.24 comes with many improvements over Go 1.23. Here are some of the notable\nchanges; for the full list, refer to the <a href=\"https://go.dev/doc/go1.24\">release notes</a>.</p><p>Several performance improvements in the runtime have decreased CPU overhead\nby 2–3% on average across a suite of representative benchmarks. These\nimprovements include a new builtin  implementation based on\n<a href=\"https://abseil.io/about/design/swisstables\" rel=\"noreferrer\" target=\"_blank\">Swiss Tables</a>, more efficient\nmemory allocation of small objects, and a new runtime-internal mutex\nimplementation.</p><ul><li>The  command now provides a mechanism for tracking tool dependencies for a\nmodule. Use  to add a  directive to the current module. Use\n to run the tools declared with the  directive.\nRead more on the <a href=\"https://go.dev/doc/go1.24#go-command\">go command</a> in the release notes.</li><li>The new  analyzer in  subcommand reports common mistakes in\ndeclarations of tests, fuzzers, benchmarks, and examples in test packages.\nRead more on <a href=\"https://go.dev/doc/go1.24#vet\">vet</a> in the release notes.</li></ul><h2>Standard library additions</h2><h2>Improved WebAssembly support</h2><p>Go 1.24 adds a new  directive for Go programs to export\nfunctions to the WebAssembly host, and supports building a Go program as a WASI\n<a href=\"https://github.com/WebAssembly/WASI/blob/63a46f61052a21bfab75a76558485cf097c0dbba/legacy/application-abi.md#current-unstable-abi\" rel=\"noreferrer\" target=\"_blank\">reactor/library</a>.\nRead more on <a href=\"https://go.dev/doc/go1.24#wasm\">WebAssembly</a> in the release notes.</p><p>Please read the <a href=\"https://go.dev/doc/go1.24\">Go 1.24 release notes</a> for the complete and\ndetailed information. Don’t forget to watch for follow-up blog posts that\nwill go in more depth on some of the topics mentioned here!</p><p>Thank you to everyone who contributed to this release by writing code and\ndocumentation, reporting bugs, sharing feedback, and testing the release\ncandidates. Your efforts helped to ensure that Go 1.24 is as stable as possible.\nAs always, if you notice any problems, please <a href=\"https://go.dev/issue/new\">file an issue</a>.</p></div>","contentLength":1768,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Quansight Labs Blog: PEP 517 build system popularity","url":"https://labs.quansight.org/blog/pep-517-build-system-popularity","date":1739232000,"author":"","guid":150,"unread":true,"content":"<article>Analysis of PEP 517 build backends used in 8000 top PyPI packages</article>","contentLength":65,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Seth Michael Larson: Building software for connection (#2: Consensus)","url":"https://sethmlarson.dev/building-software-for-connection-consensus?utm_campaign=rss","date":1739232000,"author":"","guid":151,"unread":true,"content":"<p>In the <a href=\"http://sethmlarson.dev/building-software-for-connection-local-first\">previous article</a> we concluded that a persistent always-on internet\nconnection isn't required for software to elicit feelings of connection between humans.</p><div><div><p>Building on this conclusion: let's explore how Animal Crossing software was able to intercommunicate without requiring\na centralized server and infrastructure and the trade-offs for these design decisions.</p></div></div><h2>Distributing digital goods without the internet</h2><p>Animal Crossing has over 1,000 unique items that need to be collected\nfor a complete <a href=\"https://nookipedia.com/wiki/Catalog\">catalog</a>, including furniture, wallpapers, clothing, parasols, and carpets.\nMany of these items are quite rare or were only programmed to be accessible\nthrough an official Nintendo-affiliated distribution such as a magazine or online contest.</p><p>Beyond official distributions, it's clear Animal Crossings' designer, Katsuya Eguchi,\nwanted players to  to complete their catalogs.\nThe game incentivized trading items between towns by assigning\none “<a href=\"https://nookipedia.com/wiki/Fruit\">native fruit</a>” (Apple, Orange, Cherry, Peach, or Pear) and\nrandomly making a subset of items harder to find than others depending\non a <a href=\"https://nookipedia.com/wiki/Group\">hidden “item group” variable</a> (either A, B, or C).</p><p>Items could be exchanged between players when one player visits another town,\nbut this required physically bringing your memory card to another\nplayers' GameCube. The GameCube might have come with a handle, but the 'cube wasn't exactly a . Sharing a physical space isn't something you can do with everyone or on a regular basis.</p><div><div><p>So what did Katsuya Eguchi design for Animal Crossing? To allow for item distributions from magazines and contests and to make player-to-player item sharing easier Animal Crossing included a feature called “<a href=\"https://nookipedia.com/wiki/Secret_code\">secret codes</a>”.</p><p>This feature worked by allowing players to exchange 28-character codes with Tom Nook for items. Players could also generate codes for their friends to “send” an item from their own game to a different town. Codes could be shared by writing them on a paper note, instant message, or text message.</p></div></div><h2>The forgotten durability of offline software</h2><div><div><p>\nThis <a href=\"https://www.reddit.com/r/Gamecube/comments/1gqfbae\">Reddit comment thread</a> from the GameCube subreddit was the initial inspiration for this entire series.\nThe post is about someone's niece who just started playing Animal Crossing for the first time.\nThe Redditor asked folks to send items to their nieces' town using the secret code system.\n</p><p>This ended up surprising many folks that this system \n in a game that was over 23 years old!\nFor reference, Nintendo Wi-Fi Connection and Nintendo Network were only available for 8 and 13 years respectively.\nBelow are a handful of the comments from the thread:</p><blockquote><ul><li>“For real does this still work lol?”</li></ul></blockquote></div></div><p>It's hard not to take these comments as indicators that something is\n with internet-connected software today. What had to go wrong for a \nsystem continuing to work to ? Many consumers' \nexperience with \nsoftware products\ntoday is that they become useless e-waste after some far-away service is \ndiscontinued a few years after purchase.</p><p>My intuition from this is that software that <em>requires centralized servers and infrastructure to function</em>\nwill have shorter lifetimes than software which is offline or only\nopportunistically uses online functionality.</p><p>I don't think this is particularly insightful,\nmore dependencies always means less resilience. But if we're building software for human connection then the software\nshould optimally only be limited by the <em>availability of humans to connect</em>.</p><h2>What is centralization good for?</h2><div><div><p>Animal Crossings' secret code system is far from perfect. The system is easily abusable, as the same secret codes can be\nreused over-and-over by the same user to duplicate items without ever expiring. The only limit was that 3 codes could be used per day.</p></div></div><p>Not long after Animal Crossing's release\nthe secret code algorithm was <a href=\"https://togenyanweb.appspot.com/Yokai/eplus/eplus.html\">reverse-engineered</a> so secret codes \nfor any item could be created for any town and recipient name as if they came from an official Nintendo distribution.\nThis was possible because the secret code system relied on \"<a href=\"https://en.wikipedia.org/wiki/Security_through_obscurity\">security through obscurity</a>\".</p><p>Could  be the answer to preventing these abuses?</p><p>The most interesting property that a centralized authority approach\nprovides is : forcing everyone to play by the same rules. By storing\nthe “single source-of-truth” a central authority is able to prevent abuses\nlike the ones mentioned above.</p><p>For example, a centralized “secret code issuing server” could generate\nnew unique codes per-use and check each code's validity\nagainst a database to prevent users from generating their\nown illegitimate codes or codes being re-used multiple times.</p><p>The problem with\ncentralized consensus is it tends to be  to cover the entire software state.\nA centralized server can generate codes perfectly, but how can that same server\n that the items you're exchanging for codes were obtained legitimately? To know this\nthe server would <em>also need to track item legitimacy</em>, leading to software which requires\nan internet connection to operate.</p><p>This is optimal from a correctness perspective, but as was noted earlier,\nI suspect that if such a server was a mandatory part of the secret code system\nin Animal Crossing that the system <em>would likely not be usable today</em>.</p><p>This seems like a trade-off, <em>which future would you rather have?</em></p><h2>Redesigning Animal Crossing secret codes</h2><p>If I were designing Animal Crossings' secret code system with modern hardware, what would it look like?\nHow can we keep the offline fall-back while providing consensus and being less\nabusable, especially for official distributions.</p><p>I would likely use a <a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography\">public-key cryptographic</a> system for official distributions,\nembedding a certificate that could be used to “verify” that specific secret codes\noriginated from the expected centralized entity. Codes that are accepted would be\nrecorded to prevent reusing the same code multiple times in the same town.\nUsing public-key cryptography prevents the\nsystem from being reverse-engineered to distribute arbitrary items until the certificate\nprivate key was cracked.</p><p>For sharing items between players I would implement a system where each town\ngenerated a public and private key and the public key was shared to other towns\nwhenever the software was able to, such as when a player visited the other town.\nPlayers would only be able to send items to players that they have visited\n(which for Animal Crossing <em>required physical presence</em>, more on this later!)</p><p>Each sender could store a <a href=\"https://en.wikipedia.org/wiki/Cryptographic_nonce\">nonce</a> value for\neach potential recipient. Embedding that nonce into the secret code would allow\nthe recipients' software to verify that the specific code hadn't been used yet.\nThe nonce wouldn't have to be long to avoid simple reusing of codes.</p><p>Both above systems would require much more data to be embedded into each “secret\ncode” compared to the 28-character codes from the GameCube. For this I would\nuse QR codes to embed over 2KB of data into a single QR code. Funnily enough,\nAnimal Crossing New Leaf and onwards <a href=\"https://nookipedia.com/wiki/QR_code\">use QR code technology</a> for players to share design patterns.</p><p>This design is still abusable if users can modify their software or hardware\nbut doesn't suffer from the trivial-to-exploit flaws of Animal Crossing's secret code system.</p><h2>Decentralized global consensus?</h2><div><div><p>What if we could have the best of both worlds: we want consensus\nthat is both  and . At least today, we are out of luck.</p><p>Decentralized global consensus is <a href=\"https://bitcoin.org/bitcoin.pdf\">technologically feasible</a>, but the existing solutions\n(mostly blockchains)\nare expensive (both in energy and capital) and can't handle throughput on any sort of \nmeaningful scale.</p></div></div><p>There are many other decentralized consensus systems that \nare able to form “pockets” of <em>useful peer-to-peer consensus</em> using a fraction of\nthe resources, such as email, <a href=\"https://en.wikipedia.org/wiki/BitTorrent\">BitTorrent</a>, <a href=\"https://activitypub.rocks/\">ActivityPub</a>, and <a href=\"https://nostr.com/\">Nostr</a>.\nThese systems are only possible by adding  or by only guaranteeing .</p><h2>When is global consensus needed?</h2><p>Obviously global consensus is important for certain classes of software like \nfinancial, civics, and infrastructure, but I wonder how the necessity\nof consensus in software changes for software with different risk\nprofiles.</p><p>For software which has fewer risks associated with misuse is there as much\nneed for global consensus?\nHow can  be designed to reduce risk and require\nless consensus to be effective? If global consensus and centralized \nservers become unnecessary, can we expect  to be usable \non much longer timescales, <em>essentially for as long as there are users?</em></p>","contentLength":8378,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Brave Now Lets You Inject Custom JavaScript To Tweak Websites","url":"https://tech.slashdot.org/story/25/02/10/2348258/brave-now-lets-you-inject-custom-javascript-to-tweak-websites?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1739231400,"author":"BeauHD","guid":196,"unread":true,"content":"Brave Browser version 1.75 introduces \"custom scriptlets,\" a new feature that allows advanced users to inject their own JavaScript into websites for enhanced customization, privacy, and usability. The feature is similar to the TamperMonkey and GreaseMonkey browser extensions, notes BleepingComputer. From the report: \"Starting with desktop version 1.75, advanced Brave users will be able to write and inject their own scriptlets into a page, allowing for better control over their browsing experience,\" explained Brave in the announcement. Brave says that the feature was initially created to debug the browser's adblock feature but felt it was too valuable not to share with users. Brave's custom scriptlets feature can be used to modify webpages for a wide variety of privacy, security, and usability purposes.\n \nFor privacy-related changes, users write scripts that block JavaScript-based trackers, randomize fingerprinting APIs, and substitute Google Analytics scripts with a dummy version. In terms of customization and accessibility, the scriptlets could be used for hiding sidebars, pop-ups, floating ads, or annoying widgets, force dark mode even on sites that don't support it, expand content areas, force infinite scrolling, adjust text colors and font size, and auto-expand hidden content.\n \nFor performance and usability, the scriptlets can block video autoplay, lazy-load images, auto-fill forms with predefined data, enable custom keyboard shortcuts, bypass right-click restrictions, and automatically click confirmation dialogs. The possible actions achievable by injected JavaScript snippets are virtually endless. However, caution is advised, as running untrusted custom scriptlets may cause issues or even introduce some risk.","contentLength":1745,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Transforming credit decisions using generative AI with Rich Data Co and AWS","url":"https://aws.amazon.com/blogs/machine-learning/transforming-credit-decisions-using-generative-ai-with-rich-data-co-and-aws/","date":1739217934,"author":"Daniel Wirjo","guid":121,"unread":true,"content":"<p><em>This post is co-written with Gordon Campbell, Charles Guan, and Hendra Suryanto from RDC.&nbsp;</em></p><p>The mission of <a href=\"https://www.richdataco.com/\" target=\"_blank\" rel=\"noopener\">Rich Data Co (RDC)</a> is to broaden access to sustainable credit globally. Its software-as-a-service (SaaS) solution empowers leading banks and lenders with deep customer insights and AI-driven decision-making capabilities.</p><p>Making credit decisions using AI can be challenging, requiring data science and portfolio teams to synthesize complex subject matter information and collaborate productively. To solve this challenge, RDC used <a href=\"https://aws.amazon.com/ai/generative-ai/\" target=\"_blank\" rel=\"noopener\">generative AI</a>, enabling teams to use its solution more effectively:</p><ul><li> – Designed for data science teams, this agent assists teams in developing, building, and deploying AI models within a regulated environment. It aims to boost team efficiency by answering complex technical queries across the machine learning operations (MLOps) lifecycle, drawing from a comprehensive knowledge base that includes environment documentation, AI and data science expertise, and Python code generation.</li><li> – Designed for portfolio managers and analysts, this agent facilitates natural language inquiries about loan portfolios. It provides critical insights on performance, risk exposures, and credit policy alignment, enabling informed commercial decisions without requiring in-depth analysis skills. The assistant is adept at high-level questions (such as identifying high-risk segments or potential growth opportunities) and one-time queries, allowing the portfolio to be diversified.</li></ul><p>In this post, we discuss how RDC uses generative AI on <a href=\"https://aws.amazon.com/bedrock/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock</a> to build these assistants and accelerate its overall mission of democratizing access to sustainable credit.</p><h2>Solution overview: Building a multi-agent generative AI solution</h2><p>We began with a carefully crafted evaluation set of over 200 prompts, anticipating common user questions. Our initial approach combined prompt engineering and traditional <a href=\"https://aws.amazon.com/what-is/retrieval-augmented-generation/\" target=\"_blank\" rel=\"noopener\">Retrieval Augmented Generation (RAG)</a>. However, we encountered a challenge: accuracy fell below 90%, especially for more complex questions.</p><p>To overcome the challenge, we adopted an agentic approach, breaking down the problem into specialized use cases. This strategy equipped us to align each task with the most suitable <a href=\"https://aws.amazon.com/what-is/foundation-models/\" target=\"_blank\" rel=\"noopener\">foundation model (FM)</a> and tools. Our multi-agent framework is orchestrated using <a href=\"https://langchain-ai.github.io/langgraph/\" target=\"_blank\" rel=\"noopener\">LangGraph</a>, and it consisted of:</p><ol><li> – The orchestrator is responsible for routing user questions to the appropriate agent. In this example, we start with the data science or portfolio agent. However, we envision many more agents in the future. The orchestrator can also use user context, such as the user’s role, to determine routing to the appropriate agent.</li><li> – The agent is designed for a specialized task. It’s equipped with the appropriate FM for the task and the necessary tools to perform actions and access knowledge. It can also handle multiturn conversations and orchestrate multiple calls to the FM to reach a solution.</li><li> – Tools extend agent capabilities beyond the FM. They provide access to external data and APIs or enable specific actions and computation. To efficiently use the model’s context window, we construct a tool selector that retrieves only the relevant tools based on the information in the agent state. This helps simplify debugging in the case of errors, ultimately making the agent more effective and cost-efficient.</li></ol><p>This approach gives us the right tool for the right job. It enhances our ability to handle complex queries efficiently and accurately while providing flexibility for future improvements and agents.</p><p>The following image is a high-level architecture diagram of the solution.</p><h2>Data science agent: RAG and code generation</h2><p>To boost productivity of data science teams, we focused on rapid comprehension of advanced knowledge, including industry-specific models from a curated knowledge base. Here, RDC provides an integrated development environment (IDE) for Python coding, catering to various team roles. One role is model validator, who rigorously assesses whether a model aligns with bank or lender policies. To support the assessment process, we designed an agent with two tools:</p><ol><li> – <a href=\"https://aws.amazon.com/bedrock/knowledge-bases/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock Knowledge Bases</a> powers our intelligent content retrieval through a streamlined RAG implementation. The service automatically converts text documents to their vector representation using <a href=\"https://aws.amazon.com/bedrock/amazon-models/titan/\" target=\"_blank\" rel=\"noopener\">Amazon Titan Text Embeddings</a> and stores them in <a href=\"https://aws.amazon.com/opensearch-service/features/serverless/\" target=\"_blank\" rel=\"noopener\">Amazon OpenSearch Serverless</a>. Because the knowledge is vast, it performs <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/kb-chunking.html\" target=\"_blank\" rel=\"noopener\">semantic chunking</a>, making sure that the knowledge is organized by topic and can fit within the FM’s context window. When users interact with the agent, <a href=\"https://aws.amazon.com/bedrock/knowledge-bases/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock Knowledge Bases</a> using OpenSearch Serverless provides fast, in-memory semantic search, enabling the agent to retrieve the most relevant chunks of knowledge for relevant and contextual responses to users.</li><li> – With code generation, we selected <a href=\"https://aws.amazon.com/bedrock/claude/\" target=\"_blank\" rel=\"noopener\">Anthropic’s Claude model on Amazon Bedrock</a> due to its inherent ability to understand and generate code. This tool is grounded to answer queries related to data science and can generate Python code for quick implementation. It’s also adept at troubleshooting coding errors.</li></ol><h2>Portfolio agent: Text-to-SQL and self-correction</h2><p>To boost the productivity of credit portfolio teams, we focused on two key areas. For portfolio managers, we prioritized high-level commercial insights. For analysts, we enabled deep-dive data exploration. This approach empowered both roles with rapid understanding and actionable insights, streamlining decision-making processes across teams.</p><p>Our solution required natural language understanding of structured portfolio data stored in <a href=\"https://aws.amazon.com/rds/aurora/\" target=\"_blank\" rel=\"noopener\">Amazon Aurora</a>. This led us to base our solution on a text-to-SQL model to efficiently bridge the gap between natural language and SQL.</p><p>To reduce errors and tackle complex queries beyond the model’s capabilities, we developed three tools using Anthropic’s Claude model on Amazon Bedrock for self-correction:</p><ol><li> – Verifies and corrects SQL queries, addressing common issues such as data type mismatches or incorrect function usage</li><li> – Validates query results, providing relevance and prompting retries or user clarification when needed</li><li> – Engages users for additional information when queries are too broad or lack detail, guiding the interaction based on database information and user input</li></ol><p>These tools operate in an agentic system, enabling accurate database interactions and improved query results through iterative refinement and user engagement.</p><p>To improve accuracy, we tested model fine-tuning, training the model on common queries and context (such as database schemas and their definitions). This approach reduces inference costs and improves response times compared to prompting at each call. Using <a href=\"https://aws.amazon.com/sagemaker-ai/jumpstart/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker JumpStart</a>, we <a href=\"https://aws.amazon.com/blogs/machine-learning/fine-tune-llama-3-for-text-generation-on-amazon-sagemaker-jumpstart/\" target=\"_blank\" rel=\"noopener\">fine-tuned Meta’s Llama model </a>by providing a set of anticipated prompts, intended answers, and associated context. Amazon SageMaker Jumpstart offers a cost-effective alternative to third-party models, providing a viable pathway for future applications. However, we didn’t end up deploying the fine-tuned model because we experimentally observed that prompting with Anthropic’s Claude model provided better generalization, especially for complex questions. To reduce operational overhead, we will also evaluate <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html\" target=\"_blank\" rel=\"noopener\">structured data retrieval on Amazon Bedrock Knowledge Bases</a>.</p><h2>Conclusion and next steps with RDC</h2><p>To expedite development, RDC collaborated with <a href=\"https://aws.amazon.com/startups\" target=\"_blank\" rel=\"noopener\">AWS Startups</a> and the <a href=\"https://aws.amazon.com/ai/generative-ai/innovation-center/\" target=\"_blank\" rel=\"noopener\">AWS Generative AI Innovation Center</a>. Through an iterative approach, RDC rapidly enhanced its generative AI capabilities, deploying the initial version to production in just 3 months. The solution successfully met the stringent security standards required in regulated banking environments, providing both innovation and compliance.</p><blockquote><p>“The integration of generative AI into our solution marks a pivotal moment in our mission to revolutionize credit decision-making. By empowering both data scientists and portfolio managers with AI assistants, we’re not just improving efficiency—we’re transforming how financial institutions approach lending.”</p><p><em>–Gordon Campbell, Co-Founder &amp; Chief Customer Officer at RDC</em></p></blockquote><p>RDC envisions generative AI playing a significant role in boosting the productivity of the banking and credit industry. By using this technology, RDC can provide key insights to customers, improve solution adoption, accelerate the model lifecycle, and reduce the customer support burden. Looking ahead, RDC plans to further refine and expand its AI capabilities, exploring new use cases and integrations as the industry evolves.</p><p>For more information about how to work with RDC and AWS and to understand how we’re supporting banking customers around the world to use AI in credit decisions, contact your AWS Account Manager or visit <a href=\"https://www.richdataco.com/\" target=\"_blank\" rel=\"noopener\">Rich Data Co</a>.</p><p>For more information about generative AI on AWS, refer to the following resources:</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/wirjo.jpeg\" alt=\"\" width=\"100\" height=\"133\"> is a Solutions Architect at AWS, focused on FinTech and SaaS startups. As a former startup CTO, he enjoys collaborating with founders and engineering leaders to drive growth and innovation on AWS. Outside of work, Daniel enjoys taking walks with a coffee in hand, appreciating nature, and learning new ideas.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/liuxuefeng.jpg\" alt=\"\" width=\"100\" height=\"133\"> leads a science team at the AWS Generative AI Innovation Center in the Asia Pacific regions. His team partners with AWS customers on generative AI projects, with the goal of accelerating customers’ adoption of generative AI.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/iman.png\" alt=\"\" width=\"100\" height=\"133\"> is a computer scientist at the Generative AI Innovation Center at Amazon Web Services (AWS) working on Generative AI and complex multi-agents systems.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/rdc-gordon-campbell.png\" alt=\"\" width=\"100\" height=\"133\"> is the Chief Customer Officer and Co-Founder of RDC, where he leverages over 30 years in enterprise software to drive RDC’s leading AI Decisioning platform for business and commercial lenders. With a proven track record in product strategy and development across three global software firms, Gordon is committed to customer success, advocacy, and advancing financial inclusion through data and AI.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/rdc-charles-guan.png\" alt=\"\" width=\"100\" height=\"133\"> is the Chief Technology Officer and Co-founder of RDC. With more than 20 years of experience in data analytics and enterprise applications, he has driven technological innovation across both the public and private sectors. At RDC, Charles leads research, development, and product advancement—collaborating with universities to leverage advanced analytics and AI. He is dedicated to promoting financial inclusion and delivering positive community impact worldwide.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/rdc-hendra-suryanto.png\" alt=\"\" width=\"100\" height=\"133\"> is the Chief Data Scientist at RDC with more than 20 years of experience in data science, big data, and business intelligence. Before joining RDC, he served as a Lead Data Scientist at KPMG, advising clients globally. At RDC, Hendra designs end-to-end analytics solutions within an Agile DevOps framework. He holds a PhD in Artificial Intelligence and has completed postdoctoral research in machine learning.</p>","contentLength":10851,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build agentic AI solutions with DeepSeek-R1, CrewAI, and Amazon SageMaker AI","url":"https://aws.amazon.com/blogs/machine-learning/build-agentic-ai-solutions-with-deepseek-r1-crewai-and-amazon-sagemaker-ai/","date":1739215990,"author":"Surya Kari","guid":120,"unread":true,"content":"<p>AI agents are rapidly becoming the next frontier in enterprise transformation, with 82% of organizations planning adoption within the next 3 years. According to a <a href=\"https://www.capgemini.com/wp-content/uploads/2024/11/Generative-AI-in-Organizations-Refresh_25112024.pdf\" target=\"_blank\" rel=\"noopener\">Capgemini survey</a> of 1,100 executives at large enterprises, 10% of organizations already use AI agents, and more than half plan to use them in the next year. The recent release of the DeepSeek-R1 models brings state-of-the-art reasoning capabilities to the open source community. Organizations can build agentic applications using these reasoning models to execute complex tasks with advanced decision-making capabilities, enhancing efficiency and adaptability.</p><p>In this post, we dive into how organizations can use <a href=\"https://aws.amazon.com/sagemaker-ai/?gclid=CjwKCAiAtYy9BhBcEiwANWQQL-kwoCy7ZdAghF_qTtqKZCdOoS419cBEv70K_pLlN0NeCVYS8bV-JRoCPMQQAvD_BwE&amp;trk=8987dd52-6f33-407a-b89b-a7ba025c913c&amp;sc_channel=ps&amp;ef_id=CjwKCAiAtYy9BhBcEiwANWQQL-kwoCy7ZdAghF_qTtqKZCdOoS419cBEv70K_pLlN0NeCVYS8bV-JRoCPMQQAvD_BwE:G:s&amp;s_kwcid=AL!4422!3!724218586004!e!!g!!amazon%20sagemaker%20ai!11206038603!174643422154\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker AI</a>, a fully managed service that allows you to build, train, and deploy ML models at scale, and can build AI agents using CrewAI, a popular agentic framework and open source models like DeepSeek-R1.</p><h2>Agentic design vs. traditional software design</h2><p>Agentic systems offer a fundamentally different approach compared to traditional software, particularly in their ability to handle complex, dynamic, and domain-specific challenges. Unlike traditional systems, which rely on rule-based automation and structured data, agentic systems, powered by large language models (LLMs), can operate autonomously, learn from their environment, and make nuanced, context-aware decisions. This is achieved through modular components including reasoning, memory, cognitive skills, and tools, which enable them to perform intricate tasks and adapt to changing scenarios.</p><p>Traditional software platforms, though effective for routine tasks and horizontal scaling, often lack the domain-specific intelligence and flexibility that agentic systems provide. For example, in a manufacturing setting, traditional systems might track inventory but lack the ability to anticipate supply chain disruptions or optimize procurement using real-time market insights. In contrast, an agentic system can process live data such as inventory fluctuations, customer preferences, and environmental factors to proactively adjust strategies and reroute supply chains during disruptions.</p><p>Enterprises should strategically consider deploying agentic systems in scenarios where adaptability and domain-specific expertise are critical. For instance, consider customer service. Traditional chatbots are limited to preprogrammed responses to expected customer queries, but AI agents can engage with customers using natural language, offer personalized assistance, and resolve queries more efficiently. AI agents can significantly improve productivity by automating repetitive tasks, such as generating reports, emails, and software code. The deployment of agentic systems should focus on well-defined processes with clear success metrics and where there is potential for greater flexibility and less brittleness in process management.</p><h3>Generative AI on SageMaker AI</h3><p>SageMaker AI, a fully managed service, provides a comprehensive suite of tools designed to deliver high-performance, cost-efficient machine learning (ML) and generative AI solutions for diverse use cases. SageMaker AI empowers you to build, train, deploy, monitor, and govern ML and generative AI models through an extensive range of services, including notebooks, jobs, hosting, experiment tracking, a curated model hub, and MLOps features, all within a unified integrated development environment (IDE).</p><p>SageMaker AI simplifies the process for generative AI model builders of all skill levels to work with foundation models (FMs):</p><ul><li><a href=\"https://aws.amazon.com/sagemaker-ai/canvas/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker Canvas</a> enables data scientists to seamlessly use their own datasets alongside FMs to create applications and architectural patterns, such as chatbots and Retrieval Augmented Generation (RAG), in a low-code or no-code environment.</li><li><a href=\"https://aws.amazon.com/sagemaker-ai/jumpstart/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker JumpStart</a> offers a diverse selection of open and proprietary FMs from providers like Hugging Face, Meta, and Stability AI. You can deploy or fine-tune models through an intuitive UI or APIs, providing flexibility for all skill levels.</li></ul><p>With SageMaker AI, you can build generative AI-powered agentic workflows using a framework of your choice. Some of the key benefits of using SageMaker AI for fine-tuning and hosting LLMs or FMs include:</p><ul><li> – SageMaker AI offers access to SageMaker JumpStart, a curated model hub where models with open weights are made available for seamless deployment through a few clicks or API calls. Additionally, for Hugging Face Hub models, SageMaker AI provides pre-optimized containers built on popular open source hosting frameworks such as <a href=\"https://github.com/vllm-project/vllm\" target=\"_blank\" rel=\"noopener\">vLLM</a>, <a href=\"https://github.com/triton-inference-server/server\" target=\"_blank\" rel=\"noopener\">NVIDIA Triton</a>, and H<a href=\"https://huggingface.co/docs/text-generation-inference/en/index\" target=\"_blank\" rel=\"noopener\">ugging Face Text Generation Inference (TGI).</a> You simply need to specify the model ID, and the model can be deployed quickly.</li><li><strong>Instance-based deterministic pricing</strong> – SageMaker AI hosted models are billed based on instance-hours rather than token usage. This pricing model enables you to more accurately predict and manage generative AI inference costs while scaling resources to accommodate incoming request loads.</li><li><strong>Deployments with quantization</strong> – SageMaker AI enables you to optimize models prior to deployment using advanced strategies such as quantized deployments (such as AWQ, GPTQ, float16, int8, or int4). This flexibility allows you to efficiently deploy large models, such as a 32-billion parameter model, onto smaller instance types like ml.g5.2xlarge with 24 GB of GPU memory, significantly reducing resource requirements while maintaining performance.</li><li><strong>Inference load balancing and optimized routing</strong> – SageMaker endpoints support load balancing and optimized routing with various strategies, providing users with enhanced flexibility and adaptability to accommodate diverse use cases effectively.</li><li><strong>SageMaker fine-tuning recipes</strong> – SageMaker offers <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-hyperpod-recipes.html\" target=\"_blank\" rel=\"noopener\">ready-to-use recipes</a> for quickly training and fine-tuning publicly available FMs such as Meta’s Llama 3, Mistral, and Mixtral. These recipes use <a href=\"https://aws.amazon.com/sagemaker-ai/hyperpod/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker HyperPod</a> (a SageMaker AI service that provides resilient, self-healing clusters optimized for large-scale ML workloads), enabling efficient and resilient training on a GPU cluster for scalable and robust performance.</li></ul><p>CrewAI provides a robust framework for developing multi-agent systems that integrate with AWS services, particularly SageMaker AI. CrewAI’s role-based agent architecture and comprehensive performance monitoring capabilities work in tandem with <a href=\"http://aws.amazon.com/cloudwatch\" target=\"_blank\" rel=\"noopener\">Amazon CloudWatch</a>.</p><p>The framework excels in workflow orchestration and maintains enterprise-grade security standards aligned with AWS best practices, making it an effective solution for organizations implementing sophisticated agent-based systems within their AWS infrastructure.</p><p>In this post, we demonstrate how to use CrewAI to create a multi-agent research workflow. This workflow creates two agents: one that researches on a topic on the internet, and a writer agent takes this research and acts like an editor by formatting it in a readable format. Additionally, we guide you through deploying and integrating one or multiple LLMs into structured workflows, using tools for automated actions, and deploying these workflows on SageMaker AI for a production-ready deployment.</p><p>The following diagram illustrates the solution architecture.</p><p>To follow along with the code examples in the rest of this post, make sure the following prerequisites are met:</p><ul><li><strong>Integrated development environment</strong> – This includes the following: \n  <ul><li><strong>(Optional) Access to Amazon SageMaker Studio and the JupyterLab IDE</strong> – We will use a Python runtime environment to build agentic workflows and deploy LLMs. Having access to a JupyterLab IDE with Python 3.9, 3.10, or 3.11 runtimes is recommended. You can also set up <a href=\"https://aws.amazon.com/sagemaker/studio/\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker Studio</a> for single users. For more details, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/onboard-quick-start.html\" target=\"_blank\" rel=\"noopener\">Use quick setup for Amazon SageMaker AI</a>. Create a new SageMaker JupyterLab Space for a quick JupyterLab notebook for experimentation. To learn more, refer to Boost productivity on Amazon SageMaker Studio: Introducing JupyterLab Spaces and generative AI tools.</li><li> – You can also follow along in your local IDE (such as PyCharm or VSCode), provided that Python runtimes have been configured for site to AWS VPC connectivity (to deploy models on SageMaker AI).</li></ul></li><li><strong>Permission to deploy models</strong> – Make sure that your user execution role has the necessary permissions to deploy models to a SageMaker real-time endpoint for inference. For more information, refer to <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/deploy-model.html\" target=\"_blank\" rel=\"noopener\">Deploy models for inference</a>.</li><li> – The code used in this post is available in the following GitHub repo.</li></ul><h2>Simplified LLM hosting on SageMaker AI</h2><p>Before orchestrating agentic workflows with CrewAI powered by an LLM, the first step is to host and query an LLM using <a href=\"https://docs.aws.amazon.com/prescriptive-guidance/latest/image-classification/sagemaker.html\" target=\"_blank\" rel=\"noopener\">SageMaker real-time inference endpoints</a>. There are two primary methods to host LLMs on SageMaker AI:</p><ul><li>Deploy from SageMaker JumpStart</li><li>Deploy from Hugging Face Hub</li></ul><h2>Deploy DeepSeek from SageMaker JumpStart</h2><p>SageMaker JumpStart offers access to a diverse array of state-of-the-art FMs for a wide range of tasks, including content writing, code generation, question answering, copywriting, summarization, classification, information retrieval, and more. It simplifies the onboarding and maintenance of publicly available FMs, allowing you to access, customize, and seamlessly integrate them into your ML workflows. Additionally, SageMaker JumpStart provides solution templates that configure infrastructure for common use cases, along with executable example notebooks to streamline ML development with SageMaker AI.</p><p>The following screenshot shows an example of available models on SageMaker JumpStart.</p><p>To get started, complete the following steps:</p><ol><li>Run the following command in a Jupyter cell or the SageMaker Studio terminal:</li></ol><ol start=\"3\"><li>List all available LLMs under the Hugging Face or Meta JumpStart hub. The following code is an example of how to do this programmatically using the SageMaker Python SDK:</li></ol><div><pre><code>from sagemaker.jumpstart.filters import (And, Or)\nfrom sagemaker.jumpstart.notebook_utils import list_jumpstart_models\n\n# generate a conditional filter to only select LLMs from HF or Meta\nfilter_value = Or(\n    And(\"task == llm\", \"framework == huggingface\"), \n    \"framework == meta\", \"framework == deekseek\"\n)\n\n# Retrieve all available JumpStart models\nall_models = list_jumpstart_models(filter=filter_value)</code></pre></div><p>For example, deploying the  model directly from SageMaker JumpStart requires only a few lines of code:</p><div><pre><code>from sagemaker.jumpstart.model import JumpStartModel\n\nmodel_id = \" deepseek-llm-r1\" \nmodel_version = \"*\"\n\n# instantiate a new JS meta model\nmodel = JumpStartModel(\n    model_id=model_id, \n    model_version=model_version\n)\n\n# deploy model on a 1 x p5e instance \npredictor = model.deploy(\n    accept_eula=True, \n    initial_instance_count=1, \n    # endpoint_name=\"deepseek-r1-endpoint\" # optional endpoint name\n)</code></pre></div><p>We recommend deploying your SageMaker endpoints within a VPC and a private subnet with no egress, making sure that the models remain accessible only within your VPC for enhanced security.</p><h2>Deploy DeepSeek from Hugging Face Hub</h2><p>Alternatively, you can deploy your preferred model directly from the <a href=\"https://huggingface.co/models\" target=\"_blank\" rel=\"noopener\">Hugging Face Hub</a> or the <a href=\"https://huggingface.co/spaces/open-llm-leaderboard/open_llm_leaderboard#/\" target=\"_blank\" rel=\"noopener\">Hugging Face Open LLM Leaderboard</a> to a SageMaker endpoint. Hugging Face LLMs can be hosted on SageMaker using a variety of supported frameworks, such as NVIDIA Triton, vLLM, and Hugging Face TGI. For a comprehensive list of supported deep learning container images, refer to the available <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/pre-built-containers-frameworks-deep-learning.html\" target=\"_blank\" rel=\"noopener\">Amazon SageMaker Deep Learning Containers</a>. In this post, we use a <strong><em>DeepSeek-R1-Distill-Llama-70B</em></strong> SageMaker endpoint using the TGI container for agentic AI inference. We deploy the model from Hugging Face Hub using <a href=\"https://huggingface.co/blog/sagemaker-huggingface-llm\" target=\"_blank\" rel=\"noopener\">Amazon’s optimized TGI container</a>, which provides enhanced performance for LLMs. This container is specifically optimized for text generation tasks and automatically selects the most performant parameters for the given hardware configuration. To deploy from Hugging Face Hub, refer to the  or the following code snippet:</p><div><pre><code>import json\nimport sagemaker\nimport boto3\nfrom sagemaker.huggingface import HuggingFaceModel, get_huggingface_llm_image_uri\nimport os\nfrom datetime import datetime\n\n# Model configuration\nhub = {'HF_MODEL_ID':'deepseek-ai/DeepSeek-R1-Distill-Llama-70B', #Llama-3.3-70B-Instruct\n       'SM_NUM_GPUS': json.dumps(number_of_gpu),\n       'HF_TOKEN': HUGGING_FACE_HUB_TOKEN,\n       'SAGEMAKER_CONTAINER_LOG_LEVEL': '20',  # Set to INFO level\n       'PYTORCH_CUDA_ALLOC_CONF': 'expandable_segments:True'  # configure CUDA memory to use expandable memory segments\n}\n# Create and deploy model\nhuggingface_model =   HuggingFaceModel(image_uri=get_huggingface_llm_image_uri(\"huggingface\", \nversion=\"2.3.1\"),\nenv=hub,\nrole=role,sagemaker_session=sagemaker_session)\npredictor = huggingface_model.deploy(\n               initial_instance_count=1,\n               instance_type=\"ml.p4d.24xlarge\"\n               endpoint_name=custom_endpoint_name,\n               container_startup_health_check_timeout=900)</code></pre></div><p>A new <em><strong>DeepSeek-R1-Distill-Llama-70B</strong></em>endpoint should be  in under 10 minutes. If you want to change the model from DeepSeek to another model from the hub, simply replace the following parameter or refer to the DeepSeek deploy example in the following <a href=\"https://github.com/huggingface/text-generation-inference/blob/main/docs/source/reference/launcher.md\" target=\"_blank\" rel=\"noopener\">GitHub repo</a>. To learn more about deployment parameters that can be reconfigured inside TGI containers at runtime, refer to the following <a href=\"https://github.com/aws-samples/sagemaker-genai-hosting-examples/blob/main/Deepseek/DeepSeek-R1-Llama8B-LMI-TGI-Deploy.ipynb\" target=\"_blank\" rel=\"noopener\">GitHub repo</a>&nbsp;on TGI arguments.</p><div><pre><code>...\n\"HF_MODEL_ID\": \"deepseek-ai/...\", # replace with any HF hub models\n# \"HF_TOKEN\": \"hf_...\" # add your token id for gated models\n...</code></pre></div><p>For open-weight models deployed directly from hubs, we strongly recommend placing your SageMaker endpoints within a VPC and a private subnet with no egress, making sure that the models remain accessible only within your VPC for a secure deployment.</p><h2>Build a simple agent with CrewAI</h2><p>CrewAI offers the ability to create multi-agent and very complex agentic orchestrations using LLMs from several LLM providers, including SageMaker AI and Amazon Bedrock. In the following steps, we create a simple blocks counting agent to serve as an example.</p><p><strong>Create a blocks counting agent</strong></p><p>The following code sets up a simple blocks counter workflow using CrewAI with two main components:</p><ul><li><strong>Agent creation (blocks_counter_agent)</strong> – The agent is configured with a specific role, goal, and capabilities. This agent is equipped with a tool called .</li><li><strong>Task definition (count_task)</strong> – This is a task that we want this agent to execute. The task includes a template for counting how many of each color of blocks are present, where  will be replaced with actual color of the block. The task is assigned to .</li></ul><div><pre><code>from crewai import Agent, Task\nfrom pydantic import BaseModel, Field\n\n# 1. Configure agent\nblocks_counter_agent = Agent(\n    role=\"Blocks Inventory Manager\",\n    goal=\"Maintain accurate block counts\",\n    tools=[BlocksCounterTool],\n    verbose=True\n)\n\n# 2. Create counting task\ncount_task = Task(\n    description=\"Count {color} play blocks in storage\",\n    expected_output=\"Exact inventory count for specified color\",\n    agent=blocks_counter_agent\n)</code></pre></div><p>As you can see in the preceding code, each agent begins with two essential components: an agent definition that establishes the agent’s core characteristics (including its role, goal, backstory, available tools, LLM model endpoint, and so on), and a task definition that specifies what the agent needs to accomplish, including the detailed description of work, expected outputs, and the tools it can use during execution.</p><p>This structured approach makes sure that agents have both a clear identity and purpose (through the agent definition) and a well-defined scope of work (through the task definition), enabling them to operate effectively within their designated responsibilities.</p><p>Tools are special functions that give AI agents the ability to perform specific actions, like searching the internet or analyzing data. Think of them as apps on a smartphone—each tool serves a specific purpose and extends what the agent can do. In our example,  helps the agent count the number of blocks organized by color.</p><p>Tools are essential because they let agents do real-world tasks instead of just thinking about them. Without tools, agents would be like smart speakers that can only talk—they could process information but couldn’t take actual actions. By adding tools, we transform agents from simple chat programs into practical assistants that can accomplish real tasks.</p><p><strong>Out-of-the-box tools with CrewAI</strong>Crew AI offers a range of tools out of the box for you to use along with your agents and tasks. The following table lists some of the available tools.</p><table border=\"1px\" width=\"781\" cellpadding=\"10px\"><tbody><tr><td>For reading various file formats</td></tr><tr><td>For web content extraction</td></tr><tr><td>For searching YouTube channels</td></tr><tr><td>For searching PDF documents</td></tr><tr><td>For Python code interpretation</td></tr><tr></tr></tbody></table><p><strong>Build custom tools with CrewAI</strong>You can build custom tools in CrewAI in two ways: by subclassing BaseTool or using the @tool decorator. Let’s look at the following BaseTool subclassing option to create the BlocksCounterTool we used earlier:</p><div><pre><code>from crewai.tools import BaseTool\n\nclass BlocksCounterTool(BaseTool):\n    name = \"blocks_counter\" \n    description = \"Simple tool to count play blocks\"\n\n    def _run(self, color: str) -&gt; str:\n        return f\"There are 10 {color} play blocks available\"</code></pre></div><h2><strong>Build a multi-agent workflow with CrewAI, DeepSeek-R1, and SageMaker AI</strong></h2><p>Multi-agent AI systems represent a powerful approach to complex problem-solving, where specialized AI agents work together under coordinated supervision. By combining CrewAI’s workflow orchestration capabilities with SageMaker AI based LLMs, developers can create sophisticated systems where multiple agents collaborate efficiently toward a specific goal. The code used in this post is available in the following <a href=\"https://github.com/aws-samples/amazon-sagemaker-generativeai/tree/main/agents-with-sagemaker/deepseek_crewai_based_agent\" target=\"_blank\" rel=\"noopener\">GitHub repo</a>.</p><p>Let’s build a research agent and writer agent that work together to create a PDF about a topic. We will use a DeepSeek-R1 Distilled Llama 3.3 70B model as a SageMaker endpoint for the LLM inference.</p><p><strong>Define your own DeepSeek SageMaker LLM (using LLM base class)</strong> The following code integrates SageMaker hosted LLMs with CrewAI by creating a custom inference tool that formats prompts with system instructions for factual responses, uses Boto3, an AWS core library, to call SageMaker endpoints, and processes responses by separating reasoning (before &lt;/think&gt;) from final answers. This enables CrewAI agents to use deployed models while maintaining structured output patterns.</p><div><pre><code># Calls SageMaker endpoint for DeepSeek inference\ndef deepseek_llama_inference(prompt: dict, endpoint_name: str, region: str = \"us-east-2\") -&gt; dict:\n    try:\n        # ... Response parsing Code...\n\n    except Exception as e:\n        raise RuntimeError(f\"Error while calling SageMaker endpoint: {e}\")\n\n# CrewAI-compatible LLM implementation for DeepSeek models on SageMaker.\nclass DeepSeekSageMakerLLM(LLM):\n    def __init__(self, endpoint: str):\n        # &lt;... Initialize LLM with SageMaker endpoint ...&gt;\n\n    def call(self, prompt: Union[List[Dict[str, str]], str], **kwargs) -&gt; str:\n        # &lt;... Format and return the final response ...&gt;</code></pre></div><p><strong>Name the DeepSeek-R1 Distilled endpoint</strong> Set the endpoint name as defined earlier when you deployed DeepSeek from the Hugging Face Hub:</p><div><pre><code>deepseek_endpoint = \"deepseek-r1-dist-v3-llama70b-2025-01-22\"</code></pre></div><p><strong>Create a DeepSeek inference tool</strong> Just like how we created the BlocksCounterTool earlier, let’s create a tool that uses the DeepSeek endpoint for our agents to use. We use the same BaseTool subclass here, but we hide it in the CustomTool class implementation in sage_tools.py in the tools folder. For more information, refer to the <a href=\"https://github.com/aws-samples/amazon-sagemaker-generativeai/tree/main/agents-with-sagemaker/deepseek_crewai_based_agent\" target=\"_blank\" rel=\"noopener\">GitHub repo</a>.</p><div><pre><code>from crewai import Crew, Agent, Task, Process \n\n# Create the Tool for LLaMA inference\ndeepseek_tool = CustomTool(\n    name=\"deepseek_llama_3.3_70B\",\n    func=lambda inputs: deepseek_llama_inference(\n        prompt=inputs,\n        endpoint_name=deepseek_endpoint\n    ),\n    description=\"A tool to generate text using the DeepSeek LLaMA model deployed on SageMaker.\"\n)\n</code></pre></div><p> Just like the simple blocks agent we defined earlier, we follow the same template here to define the research agent. The difference here is that we give more capabilities to this agent. We attach a SageMaker AI based DeepSeek-R1 model as an endpoint for the LLM.</p><p>This helps the research agent think critically about information processing by combining the scalable infrastructure of SageMaker with DeepSeek-R1’s advanced reasoning capabilities.</p><p>The agent uses the SageMaker hosted LLM to analyze patterns in research data, evaluate source credibility, and synthesize insights from multiple inputs. By using the deepseek_tool, the agent can dynamically adjust its research strategy based on intermediate findings, validate hypotheses through iterative questioning, and maintain context awareness across complex information it gathers.</p><div><pre><code># Research Agent\n\nresearch_agent = Agent(\n    role=\"Research Bot\",\n    goal=\"Scan sources, extract relevant information, and compile a research summary.\",\n    backstory=\"An AI agent skilled in finding relevant information from a variety of sources.\",\n    tools=[deepseek_tool],\n    allow_delegation=True,\n    llm=DeepSeekSageMakerLLM(endpoint=deepseek_endpoint),\n    verbose=False\n)\n</code></pre></div><p> The writer agent is configured as a specialized content editor that takes research data and transforms it into polished content. This agent works as part of a workflow where it takes research from a research agent and acts like an editor by formatting the content into a readable format. The agent is used for writing and formatting, and unlike the research agent, it doesn’t delegate tasks to other agents.</p><div><pre><code>writer_agent = Agent(\n    role=\"Writer Bot\",\n    goal=\"Receive research summaries and transform them into structured content.\",\n    backstory=\"A talented writer bot capable of producing high-quality, structured content based on research.\",\n    tools=[deepseek_tool],\n    allow_delegation=False,\n    llm=DeepSeekSageMakerLLM(endpoint=deepseek_endpoint),\n    verbose=False\n)</code></pre></div><p><strong>Define tasks for the agents</strong> Tasks in CrewAI define specific operations that agents need to perform. In this example, we have two tasks: a research task that processes queries and gathers information, and a writing task that transforms research data into polished content.</p><p>Each task includes a clear description of what needs to be done, the expected output format, and specifies which agent will perform the work. This structured approach makes sure that agents have well-defined responsibilities and clear deliverables.</p><p>Together, these tasks create a workflow where one agent researches a topic on the internet, and another agent takes this research and formats it into readable content. The tasks are integrated with the DeepSeek tool for advanced language processing capabilities, enabling a production-ready deployment on SageMaker AI.</p><div><pre><code>research_task = Task(\n    description=(\n        \"Your task is to conduct research based on the following query: {prompt}.\\n\"\n    ),\n    expected_output=\"A comprehensive research summary based on the provided query.\",\n    agent=research_agent,\n    tools=[deepseek_tool]\n)\n\nwriting_task = Task(\n    description=(\n              \"Your task is to create structured content based on the research provided.\\n\"\"),\n    expected_output=\"A well-structured article based on the research summary.\",\n    agent=research_agent,\n    tools=[deepseek_tool]\n)\n</code></pre></div><p> A crew in CrewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow. In this specific example, the sequential process makes sure tasks are executed one after the other, following a linear progression. There are other more complex orchestrations of agents working together, which we will discuss in future blog posts.</p><p>This approach is ideal for projects requiring tasks to be completed in a specific order. The workflow creates two agents: a research agent and a writer agent. The research agent researches a topic on the internet, then the writer agent takes this research and acts like an editor by formatting it into a readable format.</p><p>Let’s call the crew scribble_bots:</p><div><pre><code># Define the Crew for Sequential Workflow # \n\nscribble_bots = Crew( agents=[research_agent, writer_agent], \n       tasks=[research_task, writing_task], \n       process=Process.sequential # Ensure tasks execute in sequence)\n</code></pre></div><p><strong>Use the crew to run a task</strong> We have our endpoint deployed, agents created, and crew defined. Now we’re ready to use the crew to get some work done. Let’s use the following prompt:</p><div><pre><code>result = scribble_bots.kickoff(inputs={\"prompt\": \"What is DeepSeek?\"})</code></pre></div><p>Our result is as follows:</p><div><pre><code>**DeepSeek: Pioneering AI Solutions for a Smarter Tomorrow**\n\nIn the rapidly evolving landscape of artificial intelligence, \nDeepSeek stands out as a beacon of innovation and practical application. \nAs an AI company, DeepSeek is dedicated to advancing the field through cutting-edge research and real-world applications, \nmaking AI accessible and beneficial across various industries.\n\n**Focus on AI Research and Development**\n\n………………….. ………………….. ………………….. …………………..\n</code></pre></div><p>Complete the following steps to clean up your resources:</p><ol><li>Delete your GPU DeekSeek-R1 endpoint:</li></ol><div><pre><code>import boto3\n\n# Create a low-level SageMaker service client.\nsagemaker_client = boto3.client('sagemaker', region_name=&lt;region&gt;)\n\n# Delete endpoint\nsagemaker_client.delete_endpoint(EndpointName=endpoint_name)\n</code></pre></div><ol start=\"2\"><li>If you’re using a SageMaker Studio JupyterLab notebook, shut down the JupyterLab notebook instance.</li></ol><p>In this post, we demonstrated how you can deploy an LLM such as DeepSeek-R1—or another FM of your choice—from popular model hubs like SageMaker JumpStart or Hugging Face Hub to SageMaker AI for <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deploy-models.html\" target=\"_blank\" rel=\"noopener\">real-time inference</a>. We explored inference frameworks like Hugging Face TGI which helps streamline deployment while integrating built-in performance optimizations to minimize latency and maximize throughput. Additionally, we showcased how the SageMaker developer-friendly Python SDK simplifies endpoint orchestration, allowing seamless experimentation and scaling of LLM-powered applications.</p><p>Beyond deployment, this post provided an in-depth exploration of agentic AI, guiding you through its conceptual foundations, practical design principles using CrewAI, and the seamless integration of state-of-the-art LLMs like DeepSeek-R1 as the intelligent backbone of an autonomous agentic workflow. We outlined a sequential CrewAI workflow design, illustrating how to equip LLM-powered agents with specialized tools that enable autonomous data retrieval, real-time processing, and interaction with complex external systems.</p><p>Now, it’s your turn to experiment! Dive into our publicly available code on <a href=\"https://github.com/aws-samples/amazon-sagemaker-generativeai/tree/main/agents-with-sagemaker/deepseek_crewai_based_agent\" target=\"_blank\" rel=\"noopener\">GitHub</a>, and start building your own DeepSeek-R1-powered agentic AI system on SageMaker. Unlock the next frontier of AI-driven automation—seamlessly scalable, intelligent, and production-ready.</p><p>Special thanks to Giuseppe Zappia, Poli Rao, and Siamak Nariman for their support with this blog post.</p><p> is a Senior Generative AI Data Scientist at AWS, specializing in developing solutions leveraging state-of-the-art foundation models. He has extensive experience working with advanced language models including DeepSeek-R1, the LLama family, and Qwen, focusing on their fine-tuning and optimization for specific scientific applications. His expertise extends to implementing efficient training pipelines and deployment strategies using AWS SageMaker, enabling the scaling of foundation models from development to production. He collaborates with customers to design and implement generative AI solutions, helping them navigate model selection, fine-tuning approaches, and deployment strategies to achieve optimal performance for their specific use cases.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/06/26/Bobby-LIndsey.jpg\" alt=\"\" width=\"100\" height=\"141\">&nbsp;is a Machine Learning Specialist at Amazon Web Services. He’s been in technology for over a decade, spanning various technologies and multiple roles. He is currently focused on combining his background in software engineering, DevOps, and machine learning to help customers deliver machine learning workflows at scale. In his spare time, he enjoys reading, research, hiking, biking, and trail running.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/11/25/DSC03728_cleanup-PhotoRoom-1.jpeg\" alt=\"\" width=\"100\" height=\"140\"> is a Generative AI Specialist for third-party models at AWS, where he works with top-tier third-party foundation model (FM) providers to develop and execute joint Go-To-Market strategies, enabling customers to effectively train, deploy, and scale FMs to solve industry specific challenges. Karan holds a Bachelor of Science in Electrical and Instrumentation Engineering from Manipal University, a master’s in science in Electrical Engineering from Northwestern University and is currently an MBA Candidate at the Haas School of Business at University of California, Berkeley.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/08/29/Pranav-Profile-100.jpeg\" alt=\"\" width=\"100\" height=\"100\">&nbsp;is an AI/ML Specialist Solutions Architect at AWS. He focuses on helping customers build, train, deploy and migrate machine learning (ML) workloads to SageMaker. He previously worked in the semiconductor industry developing large computer vision (CV) and natural language processing (NLP) models to improve semiconductor processes using state of the art ML techniques. In his free time, he enjoys playing chess and traveling. You can find Pranav on&nbsp;<a href=\"https://www.linkedin.com/in/pranav-murthy-6bbb5773/\" target=\"_blank\" rel=\"noopener noreferrer\" data-stringify-link=\"https://www.linkedin.com/in/pranav-murthy-6bbb5773/\" data-sk=\"tooltip_parent\">LinkedIn</a>.</p>","contentLength":29139,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How Transformer LLMs Work [Free Course]","url":"https://newsletter.languagemodels.co/p/how-transformer-llms-work-free-course","date":1739214020,"author":"Jay Alammar","guid":390,"unread":true,"content":"<p>Enroll for free now: https://bit.ly/4aRnn7Z Github Repo: https://github.com/HandsOnLLM/Hands-On-Large-Language-Models </p><p>We're ecstatic to bring you \"How Transformer LLMs Work\" -- a free course with ~90 minutes of video, code, and crisp visuals and animations that explain the modern Transformer architecture, tokenizers, embeddings, and mixture-of-expert models.</p><p> and I have developed a lot of the visual language over the last several years (tens of thousands of iterations for hundreds of figures) for the book. This was informed by many incredible colleagues at Cohere, C4AI, and the open source and open science ML community. But to have an opportunity to collaborate with the legendary Andrew Ng and the team at DeepLearning.ai we took them to the next level with animations and a concise narrative meant to enable technical learners to pick up an ML paper and understand the architecture description. </p><p>In this course, you'll learn how a transformer network architecture that powers LLMs works. You'll build the intuition of how LLMs process text and work with code examples that illustrate the key components of the transformer architecture. </p><p>Key topics covered in this course include: </p><ul><li><p>The evolution of how language has been represented numerically, from the Bag-of-Words model through Word2Vec embeddings to the transformer architecture that captures word meanings in full context. </p></li><li><p>How LLM inputs are broken down into tokens, which represent words or pieces before they are sent to the language model. </p></li><li><p>The details of a transformer and the three main stages, consisting of tokenization and embedding, the stack of transformer blocks, and the language model head. </p></li><li><p>The details of the transformer block, including attention, which calculates relevance scores followed by the feedforward layer, which incorporates stored information learned in training. </p></li><li><p>How cached calculations make transformers faster, how the transformer block has evolved over the years since the original paper was released, and how they continue to be widely used. </p></li><li><p>Explore an implementation of recent models in the Hugging Face transformer library. </p></li></ul><p>By the end of this course, you’ll have a deep understanding of how LLMs process language and you'll be able to read through papers describing models and understand the details that are used to describe these architectures. This intuition will help improve your approach to building LLM applications.</p>","contentLength":2419,"flags":null,"enclosureUrl":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8995a108-11cc-4edf-b69d-73006c087981_3050x1922.png","enclosureMime":"","commentsUrl":null},{"title":"Automate bulk image editing with Crop.photo and Amazon Rekognition","url":"https://aws.amazon.com/blogs/machine-learning/automate-bulk-image-editing-with-crop-photo-and-amazon-rekognition/","date":1739213429,"author":"Rahul Bhargava","guid":119,"unread":true,"content":"<p><a href=\"https://evolphin.com/creatives-collaborative-video-editing/\" target=\"_blank\" rel=\"noopener\">Evolphin Software</a>, Inc. is a leading provider of digital and media asset management solutions based in Silicon Valley, California. <a href=\"https://www.crop.photo/\" target=\"_blank\" rel=\"noopener\">Crop.photo</a> from Evolphin Software is a cloud-based service that offers powerful bulk processing tools for automating image cropping, content resizing, background removal, and listing image analysis.</p><p>Crop.photo is tailored for high-end retailers, ecommerce platforms, and sports organizations. The solution has created a unique offering for bulk image editing through its advanced AI-driven solutions. In this post, we explore how Crop.photo uses <a href=\"https://aws.amazon.com/rekognition/\" target=\"_blank\" rel=\"noopener\">Amazon Rekognition</a> to provide sophisticated image analysis, enabling automated and precise editing of large volumes of images. This integration streamlines the image editing process for clients, providing speed and accuracy, which is crucial in the fast-paced environments of ecommerce and sports.</p><h2>Automation: The way out of bulk image editing challenges</h2><p>Bulk image editing isn’t just about handling a high volume of images, it’s about delivering flawless results with speed at scale. Large retail brands, marketplaces, and sports industries process thousands of images weekly. Each image must be catalog-ready or broadcast-worthy in minutes, not hours.</p><p>The challenge lies not just in the quantity but in maintaining high-quality images and brand integrity. Speed and accuracy are non-negotiable. Retailers and sports organizations expect rapid turnaround without compromising image integrity.</p><p>This is where Crop.photo’s smart automations come in with an innovative solution for high-volume image processing needs. The platform’s advanced AI algorithms can automatically detect subjects of interest, crop the images, and optimize thousands of images simultaneously while providing consistent quality and brand compliance. By automating repetitive editing tasks, Crop.photo enables enterprises to reduce image processing time from hours to minutes, allowing creative teams to focus on higher-value activities.</p><h2>Challenges in the ecommerce industry</h2><p>The ecommerce industry often encounters the following challenges:</p><ul><li><strong>Inefficiencies and delays in manual image editing </strong>– Ecommerce companies rely on manual editing for tasks like resizing, alignment, and background removal. This process can be time-consuming and prone to delays and inconsistencies. A more efficient solution is needed to streamline the editing process, especially during platform migrations or large updates.</li><li><strong>Maintaining uniformity across diverse image types </strong>– Companies work with a variety of image types, from lifestyle shots to product close-ups, across different categories. Maintaining uniformity and professionalism in all image types is essential to meet the diverse needs of marketing, product cataloging, and overall brand presentation.</li><li><strong>Large-scale migration and platform transition </strong>– Transitioning to a new ecommerce platform involves migrating thousands of images, which presents significant logistical challenges. Providing consistency and quality across a diverse range of images during such a large-scale migration is crucial for maintaining brand standards and a seamless user experience.</li></ul><p>For a US top retailer, wholesale distribution channels posed a unique challenge. Thousands of fashion images need to be made for the marketplace with less than a day’s notice for flash sales. Their director of creative operations said,</p><blockquote><p><em>“Crop.photo is an essential part of our ecommerce fashion marketplace workflow. With over 3,000 on-model product images to bulk crop each month, we rely on Crop.photo to enable our wholesale team to quickly publish new products on popular online marketplaces such as Macy’s, Nordstrom, and Bloomingdales. By increasing our retouching team’s productivity by over 70%, Crop.photo has been a game changer for us. Bulk crop images used to take days can now be done in a matter of seconds!”</em></p></blockquote><h2>Challenges in the sports industry</h2><p>The sports industry often contends with the following challenges:</p><ul><li><strong>Bulk player headshot volume and consistency </strong>– Sports organizations face the challenge of bulk cropping and resizing hundreds of player headshots for numerous teams, frequently on short notice. Maintaining consistency and quality across a large volume of images can be difficult without AI.</li><li><strong>Diverse player facial features </strong>– Players have varying facial features, such as different hair lengths, forehead sizes, and face dimensions. Adapting cropping processes to accommodate these differences traditionally requires manual adjustments for each image, which leads to inconsistencies and significant time investment.</li><li><strong>Editorial time constraints </strong>– Tight editorial schedules and resource limitations are common in sports organizations. The time-consuming nature of manual cropping tasks strains editorial teams, particularly during high-volume periods like tournaments, where delays and rushed work can impact quality and timing.</li></ul><p>An Imaging Manager at Europe’s Premier Football Organization expressed,</p><blockquote><p><em>“We recently found ourselves with 40 images from a top flight English premier league club needing to be edited just 2 hours before kick-off. Using the <a href=\"https://www.crop.photo/blog/bulk-headshots-for-sports\" target=\"_blank\" rel=\"noopener\">Bulk AI headshot cropping for sports</a> feature from Crop.photo, we had perfectly cropped headshots of the squad in just 5 minutes, making them ready for publishing in our website CMS just in time. We would never have met this deadline using manual processes. This level of speed was unthinkable before, and it’s why we’re actively recommending Crop.photo to other sports leagues.”</em></p></blockquote><p>Crop.photo uses Amazon Rekognition to power a robust solution for bulk image editing. Amazon Rekognition offers features like object and scene detection, facial analysis, and image labeling, which they use to generate markers that drive a fully automated image editing workflow.</p><p>The following diagram presents a high-level architectural data flow highlighting several of the AWS services used in building the solution.</p><p>The solution consists of the following key components:</p><ul><li> – <a href=\"https://aws.amazon.com/cognito/\" target=\"_blank\" rel=\"noopener\">Amazon Cognito</a> is used for user authentication and user management.</li><li><strong>Infrastructure deployment</strong> – Frontend and backend servers are used on <a href=\"https://aws.amazon.com/ecs/\" target=\"_blank\" rel=\"noopener\">Amazon Elastic Container Service</a> (Amazon ECS) for container deployment, orchestration, and scaling.</li><li><strong>Content delivery and caching</strong> – <a href=\"https://aws.amazon.com/cloudfront/\" target=\"_blank\" rel=\"noopener\">Amazon CloudFront</a> is used to cache content, improving performance and routing traffic efficiently.</li><li> – Information about uploaded files and job execution is stored in <a href=\"https://aws.amazon.com/rds/aurora/\" target=\"_blank\" rel=\"noopener\">Amazon Aurora</a>.</li><li> – <a href=\"https://aws.amazon.com/batch/\" target=\"_blank\" rel=\"noopener\">AWS Batch</a> processes thousands of images in bulk.</li><li> – <a href=\"https://aws.amazon.com/sqs/\" target=\"_blank\" rel=\"noopener\">Amazon Simple Queue Service</a> (Amazon SQS) manages and queues jobs for processing, making sure they’re run in the correct order by AWS Batch.</li><li> – Amazon Rekognition services analyze media files, including: \n  <ul><li>Face Analysis to generate headless crops.</li><li>Moderation to detect and flag profanity and explicit content.</li><li>Label Detection to provide context for image processing and focus on relevant objects.</li><li>Custom Labels to identify and verify brand logos and adhere to brand guidelines.</li></ul></li></ul><p>Amazon Rekognition is an AWS computer vision service that powers Crop.photo’s automated image analysis. It enables object detection, facial recognition, and content moderation capabilities:</p><ul><li><a href=\"https://docs.aws.amazon.com/rekognition/latest/dg/faces.html\" target=\"_blank\" rel=\"noopener\">Face detection</a> – The Amazon Rekognition face detection feature automatically identifies and analyzes faces in product images. You can use this feature for face-based cropping and optimization through adjustable bounding boxes in the interface.</li><li><a href=\"https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DetectLabelsImageProperties.html\" target=\"_blank\" rel=\"noopener\">Image color analysis</a> – The color analysis feature examines image composition, identifying dominant colors and balance. This integrates with Crop.photo’s brand guidelines checker to provide consistency across product images.</li><li><a href=\"https://docs.aws.amazon.com/rekognition/latest/dg/labels.html\" target=\"_blank\" rel=\"noopener\">Object detection</a> – Object detection automatically identifies key elements in images, enabling smart cropping suggestions. The interface highlights detected objects, allowing you to prioritize specific elements during cropping.</li><li><a href=\"https://docs.aws.amazon.com/rekognition/latest/customlabels-dg/what-is.html\" target=\"_blank\" rel=\"noopener\">Custom label detection</a> – Custom label detection recognizes brand-specific items and assets. Companies can train models for their unique needs, automatically applying brand-specific cropping rules to maintain consistency.</li><li><a href=\"https://docs.aws.amazon.com/rekognition/latest/dg/text-detection.html\" target=\"_blank\" rel=\"noopener\">Text detection (OCR)</a> – The OCR capabilities of Amazon Recognition detect and preserve text within images during editing. The system highlights text areas to make sure critical product information remains legible after cropping.</li></ul><p>Within the Crop.photo interface, users can upload videos through the standard interface, and the speech-to-text functionality will automatically transcribe any audio content. This transcribed text can then be used to enrich the metadata and descriptions associated with the product images or videos, improving searchability and accessibility for customers. Additionally, the brand guidelines check feature can be applied to the transcribed text, making sure that the written content aligns with the company’s branding and communication style.</p><p>The Crop.photo service follows a transparent <a href=\"https://help.crop.photo/en/articles/9752452-understanding-your-subscription-plan\" target=\"_blank\" rel=\"noopener\">pricing model</a> that combines unlimited automations with a flexible image credit system. Users have unrestricted access to create and run as many automation workflows as needed, without any additional charges. The service includes a range of features at no extra cost, such as basic image operations, storage, and behind-the-scenes processing.</p><p>For advanced AI-powered image processing tasks, like smart cropping or background removal, users consume image credits. The number of credits required for each operation is clearly specified, allowing users to understand the costs upfront. Crop.photo offers several subscription plans with varying image credit allowances, enabling users to choose the plan that best fits their needs.</p><h2>Results: Improved speed and precision</h2><p>The automated image editing capabilities of Crop.photo with the integration of Amazon Rekognition has increased speed in editing, with 70% faster image retouching for ecommerce. With a 75% reduction in manual work, the turnaround time for new product images is reduced from 2–3 days to just 1 hour. Similarly, the bulk image editing process has been streamlined, allowing over 100,000 image collections to be processed per day using <a href=\"https://aws.amazon.com/fargate\" target=\"_blank\" rel=\"noopener\">AWS Fargate</a>. Advanced AI-powered image analysis and editing features provide consistent, high-quality images at scale, eliminating the need for manual review and approval of thousands of product images.</p><p>For instance, in the ecommerce industry, this integration facilitates automatic product detection and precise cropping, making sure every image meets specific marketplace and brand standards. In sports, it enables quick identification and cropping of player facial features, including head, eyes, and mouth, adapting to varying backgrounds and maintaining brand consistency.</p><p>The following images are before and after pictures for an ecommerce use case.</p><p>For a <a href=\"https://www.crop.photo/case-studies/bulk-content-resize-beverage\" target=\"_blank\" rel=\"noopener\">famous wine</a> retailer in the United Kingdom, the integration of Amazon Rekognition with Crop.photo streamlined the processing of over 1,700 product images, achieving a 95% reduction in bulk image editing time, a confirmation to the efficiency of AI-powered enhancement.</p><p>Similarly, a top 10 <a href=\"https://www.crop.photo/blog/bulk-on-model-product-images-face-crop\" target=\"_blank\" rel=\"noopener\">global specialty retailer</a> experienced a transformative impact on their ecommerce fashion marketplace workflow. By automating the cropping of over 3,000 on-model product images monthly, they boosted their retouching team’s productivity by over 70%, maintaining compliance with the varied image standards of multiple online marketplaces.</p><p>These case studies illustrate the tangible benefits of integrating Crop.photo with Amazon Rekognition, demonstrating how automation and AI can revolutionize the bulk image editing landscape for ecommerce and sports industries.</p><p>Crop.photo, from AWS Partner Evolphin Software, offers powerful bulk processing tools for automating image cropping, content resizing, and listing image analysis, using advanced AI-driven solutions. Crop.photo is tailored for high-end retailers, ecommerce platforms, and sports organizations. Its integration with Amazon Rekognition aims to streamline the image editing process for clients, providing speed and accuracy in the high-stakes environment of ecommerce and sports. Crop.photo plans additional AI capabilities with <a href=\"https://aws.amazon.com/bedrock/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock</a> generative AI frameworks to adapt to emerging digital imaging trends, so it remains an indispensable tool for its clients.</p><p>To learn more about Evolphin Software and Crop.photo, visit their <a href=\"https://www.crop.photo/\" target=\"_blank\" rel=\"noopener\">website</a>.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/01/28/Rahul-copy.png\" alt=\"\" width=\"100\" height=\"100\"> founder &amp; CTO of Evolphin Software and Crop.photo, is reshaping how brands produce and manage visual content at scale. Through Crop.photo’s AI-powered tools, global names like Lacoste and Urban Outfitters, as well as ambitious Shopify retailers, are rethinking their creative production workflows. By leveraging cutting-edge Generative AI, he’s enabling brands of all sizes to scale their content creation efficiently while maintaining brand consistency.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/01/28/vaishnavi-100-1.png\" alt=\"\" width=\"100\" height=\"127\"> is a Solutions Architect specializing in Cloud Security at AWS based in the San Francisco Bay Area. As a trusted technical advisor, Vaishnavi helps customers to design secure, scalable and innovative cloud solutions that drive both business value and technical excellence. Outside of work, Vaishnavi enjoys traveling and exploring different artisan coffee roasters.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/01/16/image-7-1.png\" alt=\"\" width=\"100\" height=\"100\"> is an Account Manager at AWS, who provides guidance to Evolphin Software and other organizations to help accelerate business outcomes leveraging AWS Technologies. John has a degree in Business Administration and Management with a concentration in Finance from Gonzaga University, and enjoys snowboarding in the Sierras in his free time.</p>","contentLength":13507,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Revolutionizing business processes with Amazon Bedrock and Appian’s generative AI skills","url":"https://aws.amazon.com/blogs/machine-learning/revolutionizing-business-processes-with-amazon-bedrock-and-appians-generative-ai-skills/","date":1739212621,"author":"Sunil Bemarkar","guid":118,"unread":true,"content":"<p><em>This blog post is co-written with Louis Prensky and Philip Kang from Appian.&nbsp;</em></p><p>The digital transformation wave has compelled enterprises to seek innovative solutions to streamline operations, enhance efficiency, and maintain a competitive edge. Recognizing the growing complexity of business processes and the increasing demand for automation, the integration of <a href=\"https://aws.amazon.com/generative-ai/\" target=\"_blank\" rel=\"noopener\">generative AI</a> skills into environments has become essential. This strategic move addresses key challenges such as managing vast amounts of unstructured data, adhering to regulatory compliance, and automating repetitive tasks to boost productivity. Using robust infrastructure and advanced language models, these AI-driven tools enhance decision-making by providing valuable insights, improving operational efficiency by automating routine tasks, and helping with data privacy through built-in detection and management of sensitive information. For enterprises, this means achieving higher levels of operational excellence, significant cost savings, and scalable solutions that adapt to business growth. For customers, it translates to improved service quality, enhanced data protection, and a more dynamic, responsive service, ultimately driving better experiences and satisfaction.</p><p>Appian has led the charge by offering generative AI skills powered by a collaboration with <a href=\"https://aws.amazon.com/bedrock/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock</a> and <a href=\"https://aws.amazon.com/bedrock/claude/\" target=\"_blank\" rel=\"noopener\">Anthropic’s Claude</a> large language models (LLMs). This partnership allows organizations to:</p><ul><li>Enhance decision making with valuable insights</li><li>Improve operational efficiency by automating tasks</li><li>Help protect data privacy through built-in detection and management of sensitive information</li><li>Maintain compliance with HIPAA and FedRAMP compliant AI skills</li></ul><p>Critically, by placing AI in the context of a wider environment, organizations can operationalize AI in processes that seamlessly integrate with existing software, pass work between digital workers and humans, and help achieve strong security and compliance.</p><p><a href=\"https://www.appian.com/\" target=\"_blank\" rel=\"noopener\">Appian</a>, an&nbsp;<a href=\"https://partners.amazonaws.com/partners/001E000000Rl0w0IAB/Appian\" target=\"_blank\" rel=\"noopener\">AWS Partner</a>&nbsp;with competencies in financial services, healthcare, and life sciences, is a leading provider of&nbsp;<a href=\"https://www.appian.com/low-code-basics/\" target=\"_blank\" rel=\"noopener\">low-code automation software</a> to streamline and optimize complex business processes for enterprises. The Appian AI Process Platform includes everything you need to design, automate, and optimize even the most complex processes, from start to finish. The world’s most innovative organizations trust Appian to improve their workflows, unify data, and optimize operations—resulting in accelerated growth and superior customer experiences.</p><p><a href=\"https://aws.amazon.com/bedrock/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock</a> is a fully managed service that offers a choice of high-performing foundation models (FMs) from leading AI companies such as AI21 Labs, Anthropic, Cohere, Meta, Mistral AI, Stability AI, and Amazon through a single API, along with a broad set of capabilities you need to build generative AI applications with security, privacy, and responsible AI.</p><p>Appian uses the robust infrastructure of Amazon Bedrock and Anthropic’s Claude LLMs to offer fully integrated, pre-built generative AI skills that help developers enhance and automate business processes using low-code development. These use case-driven tools automate common tasks in business processes, making AI-powered applications faster and easier to develop.</p><p>This blog post will cover how Appian AI skills build automation into organizations’ mission-critical processes to improve operational excellence, reduce costs, and build scalable solutions. Additionally, we’ll cover real-world examples of processes such as:</p><ul><li>A mortgage lender that used AI-driven data extraction to reduce mortgage processing times from 16 weeks to 10 weeks.</li><li>A financial services company that achieved a four-fold reduction in data extraction time from trade-related emails.</li><li>A legal institution that used AI to reduce attorney time spent on contract review, enabling them to focus on other, high-value work.</li></ul><h2>Current challenges faced by enterprises</h2><p>Modern enterprises face numerous challenges, including:</p><ul><li><strong>Managing vast amounts of unstructured data: </strong>Enterprises deal with immense volumes of data generated from various sources such as emails, documents, and customer interactions. Organizing, analyzing, and extracting valuable insights from unstructured data can be overwhelming without advanced AI capabilities.</li><li><strong>Help protect data privacy and compliance: </strong>With increasing regulatory requirements around data privacy and protection, organizations must safeguard sensitive information, such as personally identifiable information (PII). Manual processes for data redaction and compliance checks are often error-prone and resource-intensive.</li><li><strong>Streamlining repetitive and time-consuming tasks: </strong>Routine tasks such as data entry, document processing, and content classification consume significant time and effort. Automating these tasks can lead to substantial productivity gains and allow employees to focus on more strategic activities.</li><li><strong>Adapting to rapidly changing market conditions: </strong>In a fast-paced business environment, organizations need to be agile and responsive. This requires real-time data analysis and decision-making capabilities that traditional systems might not provide. AI helps businesses quickly adapt to industry changes and customer demands.</li><li><strong>Enhancing decision-making with accurate data insights: </strong>Making informed decisions requires access to accurate and timely data. However, extracting meaningful insights from large datasets can be challenging without advanced analytical tools. AI-powered solutions can process and analyze data at scale, providing valuable insights that drive better decision-making.</li></ul><h2>Appian AI service architecture</h2><p>The architecture of the generative AI skills integrates both the Amazon Bedrock and <a href=\"https://aws.amazon.com/textract/\" target=\"_blank\" rel=\"noopener\">Amazon Textract</a> scalable infrastructure with Appian’s process management capabilities. This generative AI architecture is designed with&nbsp;<a href=\"https://docs.appian.com/suite/help/24.3/private-ai.html\" target=\"_blank\" rel=\"noopener\">private AI</a>&nbsp;as the foundation and upholds those principles.</p><p>The key components of this architecture include:</p><ol><li><strong>Appian AI Process Platform instances</strong>: The frontend serves as the primary application environment where users interact with the system application to upload documents, initiate workflows, and view processed results.</li><li>: This service functions as an intermediary layer between the Appian instances and AWS AI services (Amazon Textract and Amazon Bedrock). This layer encapsulates the logic required to interact with the AWS AI services to manage API calls, data formatting, and error handling.</li><li>: This AWS service is used to automate the extraction of text and structured data from scanned documents and images and provide the extracted data in a structured format.</li><li>: This AWS service provides advanced AI capabilities using FMs for tasks such as text summarization, sentiment analysis, and natural language understanding. This helps enhance the extracted data with deeper insights and contextual understanding.</li></ol><p>Appian generative AI skills, powered by Amazon Bedrock with Anthropic’s Claude family of LLMs, are designed to jump-start the use of generative AI in your processes. The following figure showcases the diverse capabilities of Appian’s generative AI skills, demonstrating how they enable enterprises to seamlessly automate complex tasks.</p><p>Each new skill provides a pre-populated prompt template tailored to specific tasks, alleviating the need to start from scratch. Businesses can select the desired action and customize the prompt for a perfect fit, enabling the automation of tasks such as:</p><ul><li><strong>Content analysis and processing</strong>: With Appian’s generative AI skills, businesses can automatically generate, summarize, and classify content across various formats. This capability is particularly useful for managing large volumes of customer feedback, generating reports, and creating content summaries, significantly reducing the time and effort required for manual content processing.</li><li>: Organizations generate mountains of data and documents. Extracting this information manually can be both burdensome and error-prone. Appian’s AI skills can perform highly accurate text extraction from PDF files and scanned images and pull relevant data from both structured and unstructured data sources such as invoices, forms, and emails. This speeds up data processing and promotes higher accuracy and consistency.</li><li><strong>PII extraction and redaction</strong>: Identifying and managing PII within large datasets is crucial for data governance and compliance. Appian’s AI skills can automatically identify and extract sensitive information from documents and communication channels. Additionally, Appian supports plugins that can redact this content for further privacy. This assists your compliance efforts without extensive manual intervention.</li><li>: Appian’s AI skills can summarize documents to give users an overview before digging into the details. Whether it’s summarizing research papers, legal documents, or internal reports, AI can generate concise summaries, saving time and making sure that critical information is highlighted for quick review.</li></ul><p>The following figure shows an example of a prompt-builder skill used to extract unstructured data from a bond certificate.</p><p>Each AI skill offers pre-populated prompt templates, allowing you to deploy AI without starting from scratch. Each template caters to specific business needs, making implementation straightforward and efficient. Plus, users can customize these prompts to fit their unique requirements and operational needs.</p><p>In this solution, Appian Cloud seamlessly integrates and customizes Amazon Bedrock and Claude LLMs behind the scenes, abstracting complexity to deliver enterprise-grade AI capabilities tailored to its cloud environment. It provides pre-built, use case specific prompt templates for tasks like text summarization and data extractions, dynamically customized based on user inputs and business context. Using the scalability of the Amazon Bedrock infrastructure, Appian Cloud provides optimal performance and efficient handling of enterprise-scale workflows, all within a fully managed cloud service.</p><p>By addressing these complexities, Appian Cloud empowers businesses to focus solely on using AI to achieve operational excellence and business outcomes without the burdens of technical setup, integration challenges, or ongoing maintenance efforts.</p><p>Appian’s AI skills have proven effective across multiple industries. Here are a few real-world examples:</p><ul><li>: This organization automated the extraction of over 60 data fields from inconsistent document formats, reducing the process timeline from 16 weeks to 10 weeks and achieving 98.33% accuracy. The implementation of Appian’s generative AI skills allowed the mortgage processor to streamline their workflow, significantly cutting down on processing time and improving data accuracy, which led to faster loan approvals and increased customer satisfaction.</li><li>: A financial service company received over 1,000 loosely structured emails about trades. Manually annotating these emails led to significant human errors. With an Appian generative AI skill, the customer revamped the entity tagging process by automatically extracting approximately 40 data fields from unstructured emails. This resulted in a four-fold reduction in extraction time and achieved over 95% accuracy, improving the user experience compared to traditional ML extraction tools. The automated process not only reduced errors but also enhanced the speed and reliability of data extraction, leading to more accurate and timely trading decisions.</li><li>: A legal institution had to review negotiated contracts against the original contracts to determine whether the outlined risks had been resolved. This manual process was error prone and labor intensive. By deploying a generative AI skill, they automated the extraction of changes between contracts to find the differences and whether risks had been resolved. This streamlined the attorney review process and provided insights and reasoning into the differences found. The automated solution significantly reduced the time attorneys spent on contract review, allowing them to focus on more strategic tasks and improving the overall efficiency of the legal department.</li></ul><p>AWS and Appian’s collaboration marks a significant advancement in business process automation. By using the power of Amazon Bedrock and Anthropic’s Claude models, Appian empowers enterprises to optimize and automate processes for greater efficiency and effectiveness. This partnership sets a new standard for AI-driven business solutions, leading to greater growth and enhanced customer experiences. The ability to quickly deploy and customize AI skills allows businesses to stay agile and responsive in a dynamic environment.</p><p><a href=\"https://aws.amazon.com/marketplace/seller-profile?id=94a5a278-5f8c-4a9e-82e4-d3f0dd2ecbfe\" target=\"_blank\" rel=\"noopener\">Appian</a> solutions&nbsp;are available as software as a service (SaaS) offerings in&nbsp;<a href=\"https://aws.amazon.com/marketplace\" target=\"_blank\" rel=\"noopener\">AWS Marketplace</a>. Check out the <a href=\"https://docs.appian.com/suite/help/24.3/ai-skills-intro.html\" target=\"_blank\" rel=\"noopener\">Appian</a> website to learn more about how to use the AI skills.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/03/07/hsSunil.png\" alt=\"Sunil Bemarkar\" width=\"100\" height=\"125\">is a Senior Partner Solutions Architect at Amazon Web Services. He works with various Independent Software Vendors (ISVs) and Strategic customers across industries to accelerate their digital transformation journey and cloud adoption.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2024/01/28/John-Klacynski-100.jpeg\" alt=\"\" width=\"100\" height=\"100\">is a Principal Customer Solution Manager within the AWS Independent Software Vendor (ISV) team. In this role, he programmatically helps ISV customers adopt AWS technologies and services to reach their business goals more quickly.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/05/louis.jpg\" alt=\"\" width=\"100\" height=\"100\">is a Senior Product Manager at Appian. He is responsible for driving product strategy and feature design for AI Skills within Appian’s Cognitive Automation Group.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/01/Appian-Philip-Kang-100x100.jpeg\" alt=\"Philip Kang\" width=\"100\" height=\"100\">is a Principal Solutions Consultant in Partner Technology &amp; Innovation centers with Appian. In this role, he spearheads technical innovation with a focus on AI/ML and cloud solutions.</p>","contentLength":13619,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: I made a tiny book using a pen-plotter and AI","url":"https://muffinman.io/blog/the-tiny-book-of-great-joys/","date":1739209951,"author":"stankot","guid":441,"unread":true,"content":"<p>If you are interested in how I over-engineered the process of making a tiny book for my wife, using AI, a pen plotter, a 3D printer, and a lot of time, you are in the right place. The book is titled  , and here is how it turned out:</p><p>My wife is delighted with it, so it was worth all the effort.</p><p>This post will take you through the process. It will be a long one, but please stick around - I promise there will be a lot of pretty pictures.</p><p>Here is the outline of the post:</p><p>I had this idea for a while after seeing something similar somewhere on the internet.. Since then, I always wanted to make one for my wife - a physically small book with a bunch of small drawings of our memories together, inside jokes, and little things she likes.</p><p>I wanted the illustrations to be hand-drawn, and I had a plan to ask my friend to do them. But I knew he would refuse any kind of payment, so I felt bad adding more work to his plate. So I shelved the idea, but every now and then, it would pop up in my head.</p><p>Fast forward a few years - we got a kid, and our routine completely changed. We are enjoying it a lot, but it can be very exhausting, and every day seems identical to the last. That's why I decided I needed to do something for her to break the routine. The book idea seemed perfect - personal and handcrafted - so I gave it a try.</p><p>To be able to do everything myself, I went to create digital drawings and then draw them on paper using my trusty pen plotter.</p><p>With the idea in place, I moved on to creating the drawings - which turned out to be a challenge of its own.</p><p>For pen plotting, one needs vector files, so I started drawing in Figma. Unfortunately, I quickly realized that my drawing skills would not get me the result I had envisioned. Determined to do it this time, I decided to try using AI to generate images.</p><p>I got myself a Midjourney subscription and started playing with it. It took a lot of failed attempts to figure out how to get drawings that were simple and had a strong hand-drawn feel to them. Even then, I ended up editing every one of them, but more on that later.</p><p>One of the first images I was satisfied with (it didn't end up in the book, though):</p><p>It took a lot of time, but it was fun. Failed attempts were often quirky and funny, and I was learning how to use the tool. And it made me feel like a secret agent, doing it next to my wife, who had no idea what I was up to.</p><p>I may be wrong, but I think Midjourney wasn't built for the kind of illustrations I had in mind. I was after simple, hand-drawn illustrations that felt personal. Luckily, I found a style reference () that worked well for my case. I used it to generate almost all of the drawings that ended up in the book. For those who haven't used Midjourney - you can use images as style references to influence the style of images you want to generate.</p><p>Most of my images were generated using that  code and a  between 150 and 400 (it can go from 0 to 1000).</p><p>As for the prompts, these are the key terms I combined with the description and the style reference:</p><ul><li>isolated on white background</li></ul><p>It took me a lot of tries - between 10 and 30 attempts for each image you see in the book.</p><p>Once I solved the image generation part, I had to figure out how to turn them into vector files for plotting. The first thing I tried was something similar to halftone. As you can see below, in this process, the images completely lost the hand-drawn feel.</p><p>Then I remembered <a href=\"https://www.instagram.com/p/CNJ_ZBOHZKj/\">this plot</a> of Marble Machine X I did a while ago, for which I used AutoTrace to convert the original image to a vector file. The great thing about AutoTrace is that it supports \"centerline tracing\". And this time, I learned that Inkscape has a great AutoTrace plugin, which made it even easier to convert.</p><h3>What makes centerline tracing different</h3><p>Most of the tools that convert raster to vector images do it by outlining shapes. This is not suitable for plotting, as each line in the original image becomes a sausage-like shape. Centerline tracing, on the other hand, tries to draw a single line following the middle path through shapes. Don't worry if it sounds confusing; the example below should make things clearer.</p><p>Here is the image of Link from  generated by Midjourney:</p><p>After applying a common vectorization technique, we get this. As you can see, each line in the original drawing is now outlined, creating this messy-looking image.</p><p>But if we use centerline tracing, it suddenly looks a lot more like a drawing. It is not perfect, but don't worry - we are going to clean it up in the next step.</p><p>In the points where lines touch or cross, AutoTrace is not sure which line to follow and creates these funky-looking joints. Here is an exaggerated example to show you what I'm talking about. Input is the raster image at the top and the vectorized result is at the bottom:</p><p>But I found out that if I roughly separate these lines, I get a much better result.</p><p>Let's now apply this technique to the image of Link we've seen above. After separating lines (and some cleaning up) this is the image I ended up with. It is rough, but it is only used as an input for the tracing process, so it doesn't really matter. This was manual and somewhat tedious process, but I enjoyed it overall. It was a sort of meditation for me.</p><p>And finally, when we trace this image, we get a really nice and clean vector file perfect for plotting. <img alt=\"Very clean vectorized image of Link\" src=\"https://muffinman.io/img/tiny-book/link-05-after.png\"></p><p>Here is another example. We start with the image I generated using Midjourney:</p><p>After editing, removing details and separating lines, we get this one:</p><p>And the traced vector result:</p><p>You'll notice that in both examples I did  . I did that for pretty much all of the images, to fix things I wasn't able to polish using prompts. I also removed a lot of details to make sure images are crisp and readable at the small size.</p><p>All of this took a lot of experimentation, but it gave me a pretty solid workflow which I used to generate all of the images. The complete flow looks like this:</p><ul><li>Generate images using Midjourney.</li><li>Upscale them two times, because upscaled images were easier to edit and tracing was more precise.</li><li>Clean up, redraw and separate lines by hand using Gimp.</li><li>Use Inkscape plugin to run AutoTrace centerline tracing.</li></ul><p>It took me a while to generate all the images, and the fact that I was trying to keep it a secret from my wife didn't help. I think I did it over the span of two weeks, mostly in the evening after she would go to bed.</p><h3> never stood a chance!</h3><p>Before we continue I just want to show you two funky images of Link that really made me laugh:</p><p>With the drawings ready, I turned to the next crucial part - the text. I first wanted to write everything by hand, photograph it and then vectorize it in the same way I did with the images. But it was a hassle - I had to do a lot of editing for text to look as my handwriting.</p><p>Evil Mad Scientist, the maker of my pen plotter, has a fantastic tool called <a href=\"https://wiki.evilmadscientist.com/Hershey_Text\">Hershey Text</a>. It contains a bunch of single-line fonts ideal for plotting. I chose the EMS Elfin font as it looked playful and hand-drawn. I used it to write all of the text in the book and I think it turned out great.</p><p>The tricky part with bookbinding is that pages are not printed in order, but in a way that when you fold the sheets in half, you get the right order. I used Figma to design the layout, with a great care to make sure pages are in order after double-sided plotting.</p><p>Here is the layout laid out on A4 sized paper. Sorry for blurring the text, but a lot of it is very personal and I want to keep it for our eyes only.</p><p>Plotting is the part that went the smoothest, but not without hiccups. I usually use Pigma Micron blackliner markers. They use archival quality ink and they are literally indestructible. But this time, even the thinnest one I had was too thick for the book this small.</p><p>Here you can see the first  using markers of 0.2mm and 0.1mm thickness respectively. Lines got a bit smudged and looked much thicker than I expected. This was also the moment I realized I need to remove  from the images to make them readable at this size.</p><p>I needed to find a thinner pen.</p><h3>Technical pen to the rescue</h3><p>Blackliner markers were made as a more practical replacement for technical pens. But from what I've read, an old-school technical pen was the only thing capable of achieving super-fine lines I wanted. I went online and ordered Rotring Isograph 0.2mm. As soon as it arrived I sneaked out to my study and did another test plot using it. Oh boy, was I happy when I saw the result:</p><p>Lines were thin and crisp and at this point I was convinced the project will be a success!</p><p>All of the first plots were done on 120gsm printer paper. It is somewhat thick paper and drawings looked fantastic. Unfortunately, when I bound the pages together, the drawings and letters would get transferred on the opposite pages. I could probably get away with it, considering the whole hand made feel of the book. But I wanted it to be perfect.</p><p>A friend advised me to leave ink to dry for a few hours. I left each side to dry for 24 hours, but it smudged again. Next time I tried putting the plot (before cutting the pages) between two sheets of papers and pressing it with heavy books. I did that for more than 24 hours, but still after cutting and bounding the pages, they got smudged again. At this point I was becoming somewhat desperate. As the last resort I ordered different, 100gsm paper and to my relief it worked! Crisis averted!</p><p>In the final version you can still see tiny traces on a few pages, but these are barely visible and don't really bother me.</p><p>After plotting and cutting I was left with a stack of somewhat delicate pages. Now, it was finally time to turn them into a book.</p><p>As you can imagine, I had zero bookbinding experience. There are a lot of resources online, but two of them were crucial for my project as they were on how to bind tiny books:</p><p>After reading and watching these and a few generic articles on bookbinding, I gathered enough info to try doing it myself. I thought I was super clever because I 3D printed sides and spine of the book. I designed sewing holes in the spine so I can connect the pages directly to it without using glue. It was a decent idea, but it left a gap between two  . Still, I went with it for the first try.</p><p>I laid everything down on the canvas that the book would be wrapped in and started assembling it. But I made a crucial mistake - I used super glue. It dries quickly, it is stiff, and doesn't glue 3D printed plastic well and it dissolved the paper I used. Long story short, I made a mess. But I didn't stress too much, I just proclaimed that version is a prototype and used it as a learning experience.</p><p>I ordered proper bookbinding glue (PVA). While I was waiting for it, I focused on properly sewing the pages together.</p><p>The first time I sewed the pages together, I poked the holes by hand and they were somewhat uneven. Again, it was nothing major, but I didn't like it. So I designed and 3D printed a simple tool to help me drill the holes evenly.</p><p>The tool has two parts, and the pages fit snugly between them. Both top and bottom parts have holes, so I was able to put the needle through and poke perfectly even holes in the pages. I'm very proud of this silly contraption.</p><p>Here you can see all of the eight sheets with sewing holes.</p><p>Fun fact, I designed all 3D parts using JavaScript and <a href=\"https://replicad.xyz/\">Replicad</a> library. Here is <a href=\"https://studio.replicad.xyz/workbench?from-url=https://muffinman.io/img/tiny-book/model.js\">a link</a> if you want to play with the model in your browser.</p><p>But I ditched the 3D printed spine and used the technique called , which works great when you have only two signatures. It made signatures way more tight than when I connected them separately to the 3D printed spine.</p><p>When the glue arrived, I plotted everything again and took it from the top. I swapped 3D printed sides for cardboard. Using proper glue was a game changer. I had enough time to apply it before it hardened, and when it dried it stayed flexible. And when it got onto my fingers, it was easy to remove. Everything was much cleaner, and I finally managed to put it all together.</p><p>Unfortunately, I was rushing to finish the book, so I didn't take any photos of the process. But here are a few I do have:</p><p>If you are an experienced bookbinder and reading this, I'm sorry for the bookbinding crimes I probably committed. I promise I won't use super glue again.</p><p>It looked great! It was not perfect (more on that below), but I was super happy with how it turned out. It had a distinct handcrafted feel to it, the images turned out fantastic, and I think I really managed to bring out a personal touch with it.</p><p>On the day I finished the book and gave it to my wife, we were both exhausted (our kid was teething, and we had a very rough night), so I thought she would appreciate a little pick-me-up.</p><p>When I gave it to her, the first thing she asked was, \"Will I cry?\". She was brave, but it definitely got her all mushy and made her day. After reading, she carefully put it on the shelf, out of the reach of the little one.</p><p>Then I asked her if she ever suspected I was preparing a surprise for her, and she said that she had no idea. But she also said that she thought it was weird that I would often plot something and not brag about it to her afterwards. It was true, I love showing her my work, but luckily she didn't give it too much thought, and I was able to finish my secret project.</p><h3>One thing I would like to fix</h3><p>Like I mentioned, the book isn't perfect. The sides are a bit too large, so the pages seem too deep inside when the book is closed. For the same reason, the end pages turned out to be a bit short, which gives it a weird, uneven look. It is purely aesthetic, but I think it is the only thing keeping it from being perfect.</p><p>Lesson learned if I ever end up doing something similar.</p><p>It took way longer than it should have—it took me a month and a half to finish it. It took so long because I did it in secrecy, which meant working late in the evenings when my wife and kid were asleep. A bunch of little failures... ehm, I mean  also prolonged the project. And finally, I had to order multiple things, so I was blocked a few times while I was waiting for four different deliveries.</p><p>But the final assembly took me around two and a half hours from start to finish - plotting, cutting, sewing, and bookbinding. Mostly because I had already practiced all of them and defined the exact process.</p><p>It was so much fun. I love projects that span across multiple disciplines. This one touched AI, drawing, plotting, modeling, 3D printing, sewing, and bookbinding. I encountered a lot of little hiccups, but I also learned about all of them. Some of the errors I made could have been avoided if I had been more patient. But I hope you'll cut me some slack - I was super excited and eager to see how it would turn out, and I had limited time windows when I could do it in secrecy. Still, I need to take it as a lesson - being patient will help me save time when doing projects like this one.</p><p>The highlight for me was that I could do it without an illustrator. Love it or hate it, AI ended up being a fantastic tool that filled the gap in my skill set, which was crucial for making the book.</p><p>I hope you enjoyed this write-up as much as I enjoyed making the book and writing the post. And I do hope I inspired you to try making something of your own. If I did, please reach out on GitHub, I would love to see it.</p>","contentLength":15245,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43003052"},{"title":"Beginner’s Guide to Subqueries in SQL","url":"https://www.kdnuggets.com/beginners-guide-subqueries-sql","date":1739206838,"author":"Nate Rosidi","guid":245,"unread":true,"content":"<article>Subqueries are popular tools for more complex data manipulation in SQL. If you’re a beginner on a quest to understand subqueries, this is the article for you.</article>","contentLength":160,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/Rosidi_Beginners_Guide_to_Subqueries_in_SQL_5.png.png","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Global 3D topography explorer","url":"https://topography.jessekv.com/","date":1739202885,"author":"jessekv","guid":440,"unread":true,"content":"<div>\n                Click catchements or regions on the map to render them in 3D.\n                <a href=\"https://jessekv.com/post/watersheds/\" target=\"_blank\">Learn more</a></div>","contentLength":105,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43001688"},{"title":"Python Morsels: Newlines and escape sequences in Python","url":"https://www.pythonmorsels.com/newlines-and-escape-sequences/","date":1739200649,"author":"","guid":149,"unread":true,"content":"<p>This string contains a newline character:</p><div><pre><code></code></pre></div><p>That's what  represents: a newline character.</p><p>If we print this string, we'll see that  becomes an  newline:</p><p>Why does Python represent a newline as ?</p><h2>Escape sequences in Python</h2><p>Every character in a Python …</p>","contentLength":244,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Micro Frontends with Angular and Native Federation","url":"https://blog.angular.dev/micro-frontends-with-angular-and-native-federation-7623cfc5f413?source=rss----447683c3d9a3---4","date":1739199751,"author":"Manfred Steyer","guid":420,"unread":true,"content":"<p>Enterprise-scale software systems are often implemented by several cross-functional teams. To enable such teams to provide new features efficiently, it is desirable to minimize the need for coordination between them. This calls for a modularization that verticalizes the system into low-coupled areas individual teams can take care&nbsp;of.</p><p>There are several possibilities for implementing such high-level modules (also called verticals). For instance, they can be implemented using a respective folder structure or in the form of several libraries in a Monorepo. Micro Frontends go one step further and designate a separate application for each vertical. This architectural style promises several advantages, such as a high amount of team autonomy, but it also comes with numerous challenges.</p><p>The first part of this article provides a critical overview of the benefits and drawbacks of Micro Frontends in the space of single-page applications. The second part discusses how such an architecture can be implemented with Native Federation, a community project built upon web standards that provide close integration with the Angular&nbsp;CLI.</p><h3>Motivation Behind Micro Frontends</h3><p>Like Micro Services, Micro Frontends promise several advantages, both technically and with respect to the organization. As applying Micro Frontend architectures results in several smaller applications, testing, performance tuning, and isolating faults in one part of the overarching system becomes more effortless, according to several&nbsp;sources.</p><p>However, the increased team autonomy was the main reason for applying this architectural style in the numerous cases I was involved in as a consultant. Individual teams are not blocked by waiting for other teams and can deploy separately anytime. This might not be a significant concern in a vast number of projects. Still, as soon as we talk about multi-team projects in a corporate environment with long communication paths and decision times, this aspect quickly becomes vital for the project’s success.</p><p>Teams can also make their own decisions that best fit their goals — architecturally and technology-wise. Mixing multiple client-side frameworks in the same application is considered an anti-pattern and should be avoided. However, it can help to create a migration path over to a new stack in the long run. The concern in corporate environments is that we find software solutions that usually outlive the average technology stack</p><p>Since Micro Frontends result in separate build processes, combining them with incremental builds, where only changed applications need to be rebuilt, has a massive potential for build-time improvements. For instance, the well-known <a href=\"https://nx.dev/\">Nx build system</a> provides this option. Interestingly, this feature can also be used without applying other aspects such as aligning teams with individual applications or separate deployments. There is debate about whether leveraging this tempting option automatically leads to micro frontend architectures.</p><p>A system consisting of several smaller applications can provide further organizational advantages: It’s easier to onboard new members and scale the development by adding further micro frontends. Team autonomy also leads to faster release&nbsp;cycles.</p><h3>Challenges to keep in&nbsp;mind</h3><p>Every architectural decision has consequences that need to be evaluated, and Micro Frontends are no exception. Besides the positive consequences outlined above, there are also several negative ones to consider.</p><p>For instance, individually developed Micro Frontends can diverge in UI/UX, leading to an inconsistent appearance. Also, loading several applications increases the number of bundles that need to be downloaded, adversely affecting loading times and increasing the memory pressure.</p><p>Splitting an application into low-coupled parts might be a best practice in general. However, it is often hard to define the boundaries between verticals clearly enough to implement them as individual applications. Also, while having several small applications at first glance simplifies the implementation, integrating them into an overarching solution brings additional complexity.</p><p>This leads to one of the biggest challenges I have seen in practice: we are moving away from a compile-time integration towards a runtime integration. This has severe consequences because we cannot easily foresee problems that might arise when individually developed and deployed applications start interacting at runtime. Besides the chance of technical conflicts, we also have to see that the current generation of SPA frameworks has not been built with such an operation mode in&nbsp;mind.</p><p>Instead, modern SPA frameworks, especially Angular, have been developed to focus on compile time optimizations. A powerful compiler leverages type checks to identify technical conflicts and emits efficient source code optimized for tree-shaking. Furthermore, the CLI in the Angular space provides a highly optimized build process. An off-label usage necessary for implementing Micro Frontends undermines some of these achievements.</p><h3>Angular Does Not Officially Support Micro Frontends</h3><p>For all the outlined reasons, the Angular team recommends checking if alternatives, like implementing the individual verticals in Monorepos, which can be compiled together, are suitable. For instance, Google adopted this approach years ago and manages all its products and libraries in a <a href=\"https://dl.acm.org/doi/10.1145/2854146\">single Monorepo</a>.</p><p>Of course, there are also ways to compensate for the disadvantages outlined here, and some of them, like establishing a design system to help with a consistent UI/UX or lazy loading individual system parts, might be needed in general. More details on such compensation strategies can be found in this <a href=\"https://www.angulararchitects.io/blog/consequences-of-micro-frontends-survey-results\">survey</a> of more than 150 Micro Frontend practitioners.</p><p>All architectural decisions have benefits and drawbacks and should be evaluated with those considerations if you are going to implement a solution. If such an evaluation reveals that Micro Frontends provide more advantages than alternatives for achieving your very goals, the following sections provide you a well-lit path for implementing this architectural pattern with&nbsp;Angular.</p><h3>Micro Frontends with Federation</h3><p><a href=\"https://module-federation.io/\">Module Federation</a> is a popular technology for implementing Micro Frontends and sharing dependencies. Shipped initially with webpack 5, it comes with a tooling-agnostic runtime and provides compile-time integration into  and . Besides the usage of the vite dev server, these technologies are currently not supported by the Angular CLI. However, promising community solutions like <a href=\"https://angular-rspack.dev/\"></a>and <a href=\"https://analogjs.org/\">AnalogJS</a> allow them to be used with Angular. <a href=\"https://nx.dev/\">Nx</a> and my <a href=\"https://www.npmjs.com/package/@angular-architects/module-federation\">CLI-plugin</a> provide an effortless integration.</p><p>Module Federation enables an application to load parts of other separately built and deployed applications lazily. The loading application is referred to as the host; the integrated ones are called&nbsp;remotes:</p><p>Federation, if permitted by the library version, can share dependencies like Angular or RxJS between the host and remotes. There are several configuration options for <a href=\"https://www.angulararchitects.io/blog/getting-out-of-version-mismatch-hell-with-module-federation/\">preventing version mismatches.</a> Since MF can only decide which dependencies to share at runtime, tree-shaking for shared parts is not possible.</p><p>To inform the host about the remotes and their shared dependencies, Module Federation creates a metadata file, the so-called remote entry, during the build. This file needs to be loaded into the&nbsp;host.</p><p>To fully decouple the idea of Federation from specific bundlers, I started the project <a href=\"https://www.npmjs.com/package/@angular-architects/native-federation\">Native Federation</a> several years ago. Its API surface is very similar to that of Module Federation. The focus is on portability and standards like ECMAScript modules and Import Maps. Its compile time acts as a wrapper around existing bundlers. For the communication with the bundler, it uses an exchangeable adapter:</p><p>The integration into the Angular CLI directly delegates to Angular’s  that leverages the fast bundler esbuild, and is the foundation for several current features like partial hydration. Because of its architecture, Native Federation can also be ported to further builders or other innovations the CLI might provide in the long&nbsp;run.</p><p>For integrating Micro Frontends built with Angular’s webpack-based builder, there is a <a href=\"https://www.angulararchitects.io/blog/combining-native-federation-and-module-federation/\">bridging solution</a> allowing the loading of such remotes into a Native Federation host. This solution enables the gradual adoption of the CLI’s new  and permits the sharing of dependencies between the two kinds of Federation. One of the features added recently is support for <a href=\"https://www.angulararchitects.io/blog/ssr-and-hydration-with-native-federation-for-angular/\">SSR and Hydration</a>, which is vital for performance-critical applications like public portals and web&nbsp;shops.</p><p>Native Federation for Angular is close to the CLI’s , but its compilation mode is for shared dependencies differs. While it works well for packages that align with <a href=\"https://angular.dev/tools/libraries/angular-package-format\">Angular’s Package Format</a>, which is the case for all libraries built with the CLI, other libraries might provide some challenges, especially older ones that still use CommonJS or older conventions for providing metadata.</p><h3>Using Native Federation in&nbsp;Angular</h3><p>For the setup Native Federation provides a schematic:</p><pre>ng add @angular-architects/native-federation --project mfe1 --port 4201 --type remote</pre><p>The switch  defines the kind of the application. Possible options are , , and . The latter is a host configured with a configuration file (federation manifest) during application start. This manifest informs the application of the locations of the remotes and can be switched out by another manifest during deployment:</p><pre>{    \"mfe1\" : \"http://localhost:4201/remoteEntry.json\"</pre><p>The key, in this case, is a short name the host uses to refer to the Micro Frontend. The value is the location of the remote entry with the metadata mentioned above. Alternatively, the manifest can be replaced by a service that informs the host of the current location of all deployed remotes and acts as a Micro Frontend registry.</p><p>The schematic configures the Native Federation builder delegation to the  and creates a configuration file :</p><pre>const { withNativeFederation, shareAll }     = require('@angular-architects/native-federation/config');<p>module.exports = withNativeFederation({</p>    './Component': './projects/mfe1/src/app/app.component.ts',    ...shareAll({}),    'rxjs/ajax',    'rxjs/testing',    // Add further packages you don't need at runtime</pre><p>The configuration assigns a unique name to the remote or host and defines which dependencies to share. Instead of providing an exhaustive list of all the dependencies to share, the configuration uses the helper function , which adds all dependencies found in the project’s . The skip list is used to opt out of sharing some of them or their secondary entry&nbsp;points.</p><p>Remotes also define exposed EcmaScript modules that can be loaded into the shell. For this, the  node maps the paths of the modules to short names such as&nbsp; in the example&nbsp;shown.</p><p>The schematic also adds code to initialize Native Federation to the . For the host, this code points to the federation manifest:</p><pre>import { initFederation } from '@angular-architects/native-federation';<p>initFederation('federation.manifest.json')</p>  .catch(err =&gt; console.error(err))<p>  .then(_ =&gt; import('./bootstrap'))</p>  .catch(err =&gt; console.error(err));</pre><p>After initializing federation, the file , also created by the schematic, is loaded. It contains the usual code for bootstrapping Angular, e.g., via  when the application uses Standalone Components.</p><p>To load a component or routing configuration exposed by a remote, traditional lazy loading is combined with Native Federation’s  function:</p><pre>import { loadRemoteModule } from '@angular-architects/native-federation';<p>export const APP_ROUTES: Routes = [</p>  [...]    path: 'flights',      loadRemoteModule('mfe1', './Component').then((m) =&gt; m.AppComponent),];</pre><p>Here,  is the key defined in the manifest, and&nbsp; points to the respective exposed module in the remote’s federation configuration.</p><p>More information on Native Federation can be found in this <a href=\"https://www.angulararchitects.io/blog/micro-frontends-with-modern-angular-part-1-standalone-and-esbuild/\">blog article</a> and in the project’s <a href=\"https://www.npmjs.com/package/@angular-architects/native-federation\">readme</a>, which also links to a tutorial.</p><p>Micro Frontends promise significant advantages for enterprise-scale applications, such as enhanced team autonomy and independent deployment. These benefits make this architectural style particularly appealing in multi-team corporate environments where streamlined communication and rapid development cycles are critical. Additionally, they support gradual migration to new technologies and optimize build times by leveraging incremental builds.</p><p>However, these advantages come with trade-offs. Micro Frontends can lead to inconsistent UI/UX, increased load times, and complex runtime integrations. Defining clear vertical boundaries and managing inter-application communication add to the challenge. Furthermore, frameworks like Angular, designed for compile-time optimization, face limitations in runtime integration scenarios. The Angular team, therefore, recommends alternatives such as splitting an application into libraries managed within a Monorepo, which aligns better with Angular’s strengths in type safety and efficient compilation.</p><p>Module Federation has emerged as a popular solution to address some challenges by enabling lazy loading and dependency sharing. Native Federation builds on these concepts with a focus on standards and portability. It provides a seamless integration into the Angular CLI and its performant esbuild-based , which is also the foundation for advanced features like SSR and hydration.</p><p><em>Together with this team at </em><a href=\"http://www.angulararchitects.io\"></a>,<em> Manfred Steyer helps companies around the globe establish maintainable Angular-based Architectures. He is a trainer, consultant, and Google Developer Expert (GDE) and writes for O’Reilly, the German Java Magazin, windows.developer, and Heise Developer. Furthermore, he regularly speaks at conferences.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7623cfc5f413\" width=\"1\" height=\"1\" alt=\"\">","contentLength":13726,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Data Science Showdown: Which Tools Will Gain Ground in 2025","url":"https://www.kdnuggets.com/data-science-showdown-tools-gain-ground-2025","date":1739199602,"author":"Iván Palomares Carrascosa","guid":244,"unread":true,"content":"<article>An analysis and discussion of the data science tools expected to gain prominence throughout the present year, and why.</article>","contentLength":118,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/kdn-tools-battle-2025.png","enclosureMime":"","commentsUrl":null},{"title":"Show HN: A unique generated maze to share with your valentine","url":"https://love.berk.es/","date":1739198155,"author":"berkes","guid":439,"unread":true,"content":"<dd><p> is an art project. It is so called <a href=\"https://en.wikipedia.org/wiki/Generative_art\">generative art</a>: I write the software, and the software creates art autonomously. \n            A nice introduction into generative art is <a href=\"https://www.youtube.com/watch?v=4Se0_w0ISYk\">this talk by Tim Holman</a>.\n          </p></dd><dd><p>\n          In a gallery in London, I came across gorgeaus screenprints by <a href=\"https://rbyrneart.com/\">Ricky Byrne</a>. I loved their use of color and hand-produced feel. Attention for color, layout, tension.\n          So I started experimenting with maze generation algorithms in Rust, with Nannou.<p>\n          In the process, I decided to make it a web app, for valentine, so everyone can create their own maze. And ported the Rust code to TypeScript in a tiny web app. </p><a href=\"https://www.youtube.com/watch?v=HyK_Q5rrcr4\">The Coding Train has a great tutorial set on maze generation</a>. I used the same common recursive backtracking algorithm, because the aesthetics are what I was looking for. </p></dd><dd><p>\n          The names you provide are used to generate <a href=\"https://en.wikipedia.org/wiki/Random_seed \">unique randomnes</a>. \n          This is used in a <a href=\"https://en.wikipedia.org/wiki/Maze_generation_algorithm\">maze generation algorithm</a> to create a maze. \n          I deliberately chose to animate the maze generation, to show the process. It is a slow process, but I think it is interesting to watch it carve out your maze. </p></dd><dd><p>\n          Saving, copying and sharing the maze is disabled until the maze is generated. Once the maze is generated, you can save, copy and share the maze. \n          Sharing, copying won't work on all browsers and is affected by some browser plugins or settings. The best result is on Chrome on Android. \n          </p></dd><dd><p>, the only parameter you can provide is the names. The maze is generated based on these names, and the algorithm is fixed. This is by design. Only the two names determine the artwork. \n            However, you can change the source code, see below.\n          </p></dd><dd><p>\n            The code is available on <a href=\"https://github.com/berkes/art/tree/main/lost-in-love\">GitHub</a>. Feel free to fork, change and improve it, or just have fun with it. </p></dd><dd><ul><li><a href=\"https://nannou.cc/\">Nannou</a> for the original maze generation</li><li><a href=\"https://vitejs.dev/\">Vite</a> for the build and web stuff</li></ul></dd>","contentLength":1890,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43000764"},{"title":"How to Join Strings in Python","url":"https://realpython.com/python-join-string/","date":1739196000,"author":"Real Python","guid":93,"unread":true,"content":"<p>Python’s built-in string method  lets you combine string elements from an iterable into a single string, using a separator that you specify. You call  on the separator, passing the iterable of strings to join.</p><p><strong>By the end of this tutorial, you’ll understand that:</strong></p><ul><li>You use  in Python to  with a .</li><li>A  is the piece of text you want <strong>inserted between each substring</strong>.</li><li>To join list elements, you <strong>call  on a separator string</strong>, passing the list as the argument.</li><li><strong>inserts the separator between each list element</strong> to form a single string.</li><li>The  method  that is the concatenation of the elements in the iterable, separated by the specified string.</li><li>For smaller string concatenation tasks, you can use the <strong>concatenation operator ()</strong> or  instead of .</li></ul><p>Python’s built-in <a href=\"https://docs.python.org/3/library/stdtypes.html#str.join\"></a> method gives you a quick and reliable way to combine multiple strings into a single string. Whether you need to format output or assemble data for storage,  provides a clean and efficient approach for joining strings from an <a href=\"https://realpython.com/python-iterators-iterables/\">iterable</a>.</p><p>In the upcoming sections, you’ll learn the basic usage of  to concatenate strings effectively. You’ll then apply that knowledge to real-world scenarios, from building CSV files to constructing custom log outputs. You’ll also discover some surprising pitfalls and learn how to avoid them.</p><div><p> Test your knowledge with our interactive “How to Join Strings in Python” quiz. You’ll receive a score upon completion to help you track your learning progress:</p><div><div><a href=\"https://realpython.com/quizzes/python-join-string/\"></a><p>Test your understanding of Python's .join() string method for combining strings, handling edge cases, and optimizing performance.</p></div></div></div><h2>How to Join Strings in Python Using </h2><p>To use the string method , you call  on a separator string and pass an <a href=\"https://realpython.com/ref/glossary/iterable/\">iterable</a> of other strings as the argument. The method returns a single string, where it has inserted the separator string between each element of the iterable:</p><p>In this example, you joined a list of words into one sentence, separated by spaces.</p><p>At first glance, this usage might look a little backward. In many other <a href=\"https://realpython.com/python-strings/\">string operations</a>, you call the method on the main string that you want to manipulate. However, with , you call the method on the separator string, then pass the iterable of strings that you want to combine:</p><p>This example achieves the same result as the earlier one but splits the process into two steps. Defining  separately makes the code more readable and avoids the potentially odd-looking syntax of calling  directly on a short string literal.</p><div role=\"alert\"><p> Remember that  is a  method, which means that you’ll need to call it on a  string object. Keeping that in mind may help you remember why you need to call it on the separator string.</p></div><p>You rarely see code that’s written in multiple steps where you assign the separator string to a variable, like you did in the example above.</p><p>In typical usage, you call  directly on the separator string, all in one line. This approach is more concise and highlights that any valid string can be your separator, whether it’s whitespace, a dash, or a multicharacter substring.</p><h3>Join With an Empty String</h3><p>What if you don’t want any separator at all, but just want to <a href=\"https://realpython.com/python-string-concatenation/\">concatenate</a> the items? One valid approach is to use an empty string () as the separator:</p><p>This code snippet concatenates the letters in the list, forming a single string . Using an empty string as the separator is a great way to assemble strings without a delimiter between them.</p><p>Since  can take any iterable of strings—not just lists—you can even pass a string as an argument. Because strings are iterable, Python iterates over each character in that string, considering each character as a separate element:</p><p>By calling  on  and passing the string , you effectively place a comma between every single character in . This might not always be what you intend, but it’s a neat trick to keep in mind if you ever need to treat each character as a separate element.</p>","contentLength":3847,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: HTML visualization of a PDF file's internal structure","url":"https://github.com/desgeeko/pdfsyntax/blob/main/docs/browse.md","date":1739195573,"author":"desgeeko","guid":438,"unread":true,"content":"<p>Hi,\nI've just finished a rebuild of this function and added a lot of new features: info, page index, minimap, inverted index,... \nI think it may be useful for inspection, debugging or just as a learning resource showcasing the PDF file format.\nThis is a pet project and I would be happy to receive some feedback!\nRegards</p>","contentLength":320,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43000303"},{"title":"Using Gemini 2.0 Pro Locally","url":"https://www.kdnuggets.com/using-gemini-2-pro-locally","date":1739192434,"author":"Abid Ali Awan","guid":243,"unread":true,"content":"<article>Learn the easiest way to use a state-of-the-art Google experimental model locally.</article>","contentLength":82,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/awan_gemini_20_pro_locally_7.png","enclosureMime":"","commentsUrl":null},{"title":"Transformational Power of Marginal Propensity to Reuse Undermined by Siren of One-off AI Projects","url":"https://www.datasciencecentral.com/transformational-power-of-marginal-propensity-to-reuse-undermined-by-siren-of-one-off-ai-projects/","date":1739192355,"author":"Bill Schmarzo","guid":59,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Infinite horizontal arrays of text editors","url":"https://zeminary.com/arrays/app.html","date":1739150705,"author":"tsydenzhap","guid":437,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42995991"},{"title":"TypeScript: extracting parts of composite types via infer","url":"https://2ality.com/2025/02/typescript-infer-operator.html","date":1739145600,"author":"Dr. Axel Rauschmayer","guid":173,"unread":true,"content":"<p>In this blog post, we explore how we can extract parts of composite types via the  operator.</p><p>It helps if you are loosely familiar with conditional types. You can check out section <a href=\"https://exploringjs.com/tackling-ts/ch_computing-with-types-overview.html#conditional-types\">“Conditional types”</a> in “Tackling TypeScript”&nbsp;to read up on them.</p>","contentLength":252,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A Blog, If You Can Keep It","url":"https://fly.io/blog/a-blog-if-kept/","date":1739145600,"author":"Fly","guid":405,"unread":true,"content":"<div><p>A boldfaced lede like this was a sure sign you were reading a carefully choreographed EffortPost from our team at Fly.io. We’re going to do less of those. Or the same amount but more of a different kind of post. Either way: launch an app on Fly.io today!</p></div><p>Over the last 5 years, we’ve done pretty well for ourselves writing content for Hacker News. And that’s <a href=\"https://news.ycombinator.com/item?id=39373476\" title=\"\">mostly</a> been good for us. We don’t do conventional marketing, we don’t have a sales team, the rest of social media is atomized over 5 different sites. Writing pieces that HN takes seriously has been our primary outreach tool.</p><p>There’s a recipe (probably several, but I know this one works) for charting a post on HN:</p><ol><li>Write an EffortPost, which is to say a dense technical piece over 2000 words long; within that rubric there’s a bunch of things that are catnip to HN, including runnable code, research surveys, and explainers. (There are also cat-repellants you learn to steer clear of.)\n</li><li>Assiduously avoid promotion. You have to write for the audience. We get away with sporadically including a call-to-action block in our posts, but otherwise: the post should make sense even if an unrelated company posted it after you went out of business.\n</li><li>Pick topics HN is interested in (it helps if all your topics are au courant for HN, and we’ve been <a href=\"https://news.ycombinator.com/item?id=32250426\" title=\"\">very</a><a href=\"https://news.ycombinator.com/item?id=32018066\" title=\"\">lucky</a> in that regard). \n</li><li>Like 5-6 more style-guide things that help incrementally. Probably 3 different teams writing for HN will have 3 different style guides with only like ½ overlap. Ours, for instances, instructs writers to swear.\n</li></ol><p>I like this kind of writing. It’s not even a chore. But it’s become an impediment for us, for a couple reasons: the team serializes behind an “editorial” function here, which keeps us from publishing everything we want; worse, caring so much about our track record leaves us noodling on posts interminably (the poor <a href=\"https://www.tigrisdata.com/\" title=\"\">Tigrises</a> have been waiting for months for me to publish the piece I wrote about them and FoundationDB; take heart, this post today means that one is coming soon). </p><p>But worst of all, I worried incessantly about us <a href=\"https://gist.github.com/tqbf/e853764b562a2d72a91a6986ca3b77c0\" title=\"\">wearing out our welcome</a>. To my mind, we’d have 1, maybe 2 bites at the HN apple in a given month, and we needed to make them count.</p><p>That was dumb. I am dumb about a lot of things! I came around to understanding this after Kurt demanded I publish my blog post about BFAAS (Bash Functions As A Service), 500 lines of Go code that had generated 4500 words in my draft. It was only after I made the decision to stop gatekeeping this blog that I realized <a href=\"https://simonwillison.net/\" title=\"\">Simon Willison</a> has been disproving my “wearing out the welcome” theory, day in and day out, for years. He just writes stuff about LLMs when it interests him. I mean, it helps that he’s a better writer than we are. But he’s not wasting time choreographing things.</p><p>Back in like 2009, <a href=\"https://web.archive.org/web/20110806040300/http://chargen.matasano.com/chargen/2009/7/22/if-youre-typing-the-letters-a-e-s-into-your-code-youre-doing.html\" title=\"\">we had a blog</a> at another company I was at. That blog drove a lot of business for us (and, on three occasions, almost killed me). It was not in the least bit optimized for HN. I like pretending to be a magazine feature writer, but I miss writing dashed-off pieces every day and clearing space for other people on the team to write as well.</p><p>So this is all just a heads up: we’re trying something new. This is a very long and self-indulgent way to say “we’re going to write a normal blog like it’s 2008”, but that’s how broken my brain is after years of having my primary dopaminergic rewards come from how long Fly.io blog posts stay on the front page: I have to disclaim blogging before we start doing it, lest I fail to meet expectations. </p><p>Like I said. I’m real dumb. But: looking forward to getting a lot more stuff out on the web for people to read this year!</p>","contentLength":3700,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Did Semgrep Just Get A Lot More Interesting?","url":"https://fly.io/blog/semgrep-but-for-real-now/","date":1739145600,"author":"Fly","guid":406,"unread":true,"content":"<p><a href=\"https://ghuntley.com/stdlib/\" title=\"\">This bit by Geoffrey Huntley</a> is super interesting to me and, despite calling out that LLM-driven development agents like Cursor have something like a 40% success rate at actually building anything that passes acceptance criteria, makes me think that more of the future of our field belongs to people who figure out how to use this weird bags of model weights than any of us are comfortable with. </p><p>I’ve been dinking around with Cursor for a week now (if you haven’t, I think it’s something close to malpractice not to at least take it — or something like it — for a spin) and am just now from this post learning that Cursor has this <a href=\"https://docs.cursor.com/context/rules-for-ai\" title=\"\">rules feature</a>. </p><p>The important thing for me is not how Cursor rules work, but rather how Huntley uses them. He turns them back on themselves, writing rules to tell Cursor how to organize the rules, and then teach Cursor how to write (under human supervision) its own rules.</p><p>Cursor kept trying to get Huntley to use Bazel as a build system. So he had cursor write a rule for itself: “no bazel”. And there was no more Bazel. If I’d known I could do this, I probably wouldn’t have bounced from the Elixir project I had Cursor doing, where trying to get it to write simple unit tests got it all tangled up trying to make <a href=\"https://hexdocs.pm/mox/Mox.html\" title=\"\">Mox</a> work. </p><p>But I’m burying the lead. </p><p>Security people have been for several years now somewhat in love with a tool called <a href=\"https://github.com/semgrep/semgrep\" title=\"\">Semgrep</a>. Semgrep is a semantics-aware code search tool; using symbolic variable placeholders and otherwise ordinary code, you can write rules to match pretty much arbitary expressions and control flow. </p><p>If you’re an appsec person, where you obviously go with this is: you build a library of Semgrep searches for well-known vulnerability patterns (or, if you’re like us at Fly.io, you work out how to get Semgrep to catch the Rust concurrency footgun of RWLocks inside if-lets).</p><p>The reality for most teams though is “ain’t nobody got time for that”. </p><p>But I just checked and, unsurprisingly, 4o <a href=\"https://chatgpt.com/share/67aa94a7-ea3c-8012-845c-6c9491b33fe4\" title=\"\">seems to do reasonably well</a> at generating Semgrep rules? Like: I have no idea if this rule is actually any good. But it looks like a Semgrep rule?</p><p>What interests me is this: it seems obvious that we’re going to do more and more “closed-loop” LLM agent code generation stuff. By “closed loop”, I mean that the thingy that generates code is going to get to run the code and watch what happens when it’s interacted with. You’re just a small bit of glue code and a lot of system prompting away from building something like that right now: <a href=\"https://x.com/chris_mccord/status/1882839014845374683\" title=\"\">Chris McCord is building</a> a thingy that generates whole Elixir/Phoenix apps and runs them as Fly Machines. When you deploy these kinds of things, the LLM gets to see the errors when the code is run, and it can just go fix them. It also gets to see errors and exceptions in the logs when you hit a page on the app, and it can just go fix them.</p><p>With a bit more system prompting, you can get an LLM to try to generalize out from exceptions it fixes and generate unit test coverage for them. </p><p>With a little bit more system prompting, you can probably get an LLM to (1) generate a Semgrep rule for the generalized bug it caught, (2) test the Semgrep rule with a positive/negative control, (3) save the rule, (4) test the whole codebase with Semgrep for that rule, and (5) fix anything it finds that way. </p><p>That is a lot more interesting to me than tediously (and probably badly) trying to predict everything that will go wrong in my codebase a priori and Semgrepping for them. Which is to say: Semgrep — which I have always liked — is maybe a lot more interesting now? And tools like it?</p>","contentLength":3614,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Searchable library of free audiobooks","url":"https://booksearch.party/","date":1739137953,"author":"libridev","guid":436,"unread":true,"content":"<p>\n                If you're seeking free audiobooks and an efficient book finder, booksearch.party is an excellent resource. This platform aggregates a vast collection of audiobooks for free from various sources, including LibriVox, Project Gutenberg, and Lit2Go, into a user-friendly, searchable database.</p><p>LibriVox offers a wide range of public domain audiobooks, read by volunteers worldwide. Their catalog includes thousands of titles across various genres, all available for free.</p><p>Project Gutenberg provides over 60,000 free eBooks, many of which have been converted into audiobooks. This extensive collection includes classic literature and historical texts, all accessible without cost.</p><p>Lit2Go is a free online collection of public domain fiction, poetry, and nonfiction audiobooks. It offers a user-friendly interface where users can browse texts and listen to individual chapters.</p><p>By compiling these resources, booksearch.party serves as a comprehensive book finder, allowing users to easily search and access a wide array of free audiobooks. Whether you're interested in classic literature, historical documents, or educational materials, this platform simplifies the process of discovering and enjoying audiobooks at no cost.</p>","contentLength":1230,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42994440"},{"title":"This Was CS50: Crying Poor, Yale To Stop Offering Harvard's Famed CS50 Course","url":"https://developers.slashdot.org/story/25/02/09/1922236/this-was-cs50-crying-poor-yale-to-stop-offering-harvards-famed-cs50-course?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1739133240,"author":"EditorDavid","guid":195,"unread":true,"content":"Slashdot has been covering Harvard's legendary introductory programming course \"CS50\" since it began setting attendance records in 2014. \n\nBut now long-time Slashdot reader theodp brings some news about the course's fate over at Yale. From Yale's student newspaper:\n\n\nAfter a decade of partnership with Harvard, Yale's CS50 course will no longer be offered starting in fall 2025.... One of Yale's largest computer science courses, jointly taught with Harvard University, was canceled during a monthly faculty meeting after facing budgetary challenges. [Yale's endowment is $40+ billion]... Since Yale started offering the course in 2015, CS50 has consistently seen enrollment numbers in the hundreds and was often the department's largest class.... According to [Yale instructor Ozan] Erat, the original [anonymous] donation that made CS50 possible ended in June 2024, and the cost of employing so many undergraduate learning assistants for the course had become unsustainable. \n\ntheodp reminds us that CS50 and its progeny \"will continue to live on in all their glory in-person and online at Harvard and edX.\"","contentLength":1110,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"What Do Linux Kernel Developers Think of Rust?","url":"https://developers.slashdot.org/story/25/02/08/0455231/what-do-linux-kernel-developers-think-of-rust?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1739122440,"author":"EditorDavid","guid":191,"unread":true,"content":"Keynotes at this year's FOSDEM included free AI models and systemd, reports Heise.de — and also a progress report from Miguel Ojeda, supervisor of the Rust integration in the Linux kernel.\n\nOnly eight people remain in the core team around Rust for Linux... Miguel Ojeda therefore launched a survey among kernel developers, including those outside the Rust community, and presented some of the more important voices in his FOSDEM talk. The overall mood towards Rust remains favorable, especially as Linus Torvalds and Greg Kroah-Hartman are convinced of the necessity of Rust integration. This is less about rapid progress and more about finding new talent for kernel development in the future. \nThe reaction was mostly positive, judging by Ojeda's slides: \n\n- \"2025 will be the year of Rust GPU drivers...\" — Daniel Almedia \n\n- \"I think the introduction of Rust in the kernel is one of the most exciting development experiments we've seen in a long time.\" — Andrea Righi\n\n - \"[T]he project faces unique challenges. Rust's biggest weakness, as a language, is that relatively few people speak it. Indeed, Rust is not a language for beginners, and systems-level development complicates things even more. That said, the Linux kernel project has historically attracted developers who love challenging software — if there's an open source group willing to put the extra effort for a better OS, it's the kernel devs.\" — Carlos Bilbao \n\n- \"I played a little with [Rust] in user space, and I just absolutely hate the cargo concept... I hate having to pull down other code that I do not trust. At least with shared libraries, I can trust a third party to have done the build and all that... [While Rust should continue to grow in the kernel], if a subset of C becomes as safe as Rust, it may make Rust obsolete...\" Steven Rostedt \n\nRostedt wasn't sure if Rust would attract more kernel contributors, but did venture this opinion. \"I feel Rust is more of a language that younger developers want to learn, and C is their dad's language.\" \n\nBut still \"contention exists within the kernel development community between those pro-Rust and -C camps,\" argues The New Stack, citing the latest remarks from kernel maintainer Christoph Hellwig (who had earlier likened the mixing of Rust and C to cancer). Three days later Hellwig reiterated his position again on the Linux kernel mailing list:\n\n\"Every additional bit that another language creeps in drastically reduces the maintainability of the kernel as an integrated project. The only reason Linux managed to survive so long is by not having internal boundaries, and adding another language completely breaks this. You might not like my answer, but I will do everything I can do to stop this. This is NOT because I hate Rust. While not my favourite language it's definitively one of the best new ones and I encourage people to use it for new projects where it fits. I do not want it anywhere near a huge C code base that I need to maintain.\" \n\nBut the article also notes that Google \"has been a staunch supporter of adding Rust to the kernel for Linux running in its Android phones.\"\nThe use of Rust in the kernel is seen as a way to avoid memory vulnerabilities associated with C and C++ code and to add more stability to the Android OS. \"Google's wanting to replace C code with Rust represents a small piece of the kernel but it would have a huge impact since we are talking about billions of phones,\" Ojeda told me after his talk. \n\nIn addition to Google, Rust adoption and enthusiasm for it is increasing as Rust gets more architectural support and as \"maintainers become more comfortable with it,\" Ojeda told me. \"Maintainers have already told me that if they could, then they would start writing Rust now,\" Ojeda said. \"If they could drop C, they would do it....\" \n\nAmid the controversy, there has been a steady stream of vocal support for Ojeda. Much of his discussion also covered statements given by advocates for Rust in the kernel, ranging from lead developers of the kernel and including Linux creator Linus Torvalds himself to technology leads from Red Hat, Samsung, Google, Microsoft and others.","contentLength":4153,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev"]}