{"id":"2hUc62","title":"Blog","displayTitle":"Blog","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":43,"items":[{"title":"Conditional types in TypeScript","url":"https://2ality.com/2025/02/conditional-types-typescript.html","date":1739577600,"author":"Dr. Axel Rauschmayer","guid":229,"unread":true,"content":"<p>In TypeScript, conditional types let us make decisions (think if-then-else expressions) – which is especially useful in generic types. They are also an essential tool for working with union types because they let use “loop” over them. Read on if you want to know how all of that works.</p>","contentLength":291,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Django Weblog: DjangoCongress JP 2025 Announcement and Live Streaming!","url":"https://www.djangoproject.com/weblog/2025/feb/14/djangocongress-jp-2025-announcement-and-livestream/","date":1739571130,"author":"","guid":156,"unread":true,"content":"<p>It will be streamed on the following YouTube Live channels:</p><p>This year there will be talks not only about Django, but also about FastAPI and other asynchronous web topics. There will also be talks on Django core development, Django Software Foundation (DSF) governance, and other topics from around the world. Simultaneous translation will be provided in both English and Japanese.</p><ul><li>The Async Django ORM: Where Is it?</li><li>Speed at Scale for Django Web Applications</li><li>Implementing Agentic AI Solutions in Django from scratch</li><li>Diving into DSF governance: past, present and future</li></ul><ul><li>Getting Knowledge from Django Hits: Using Grafana and Prometheus</li><li>Culture Eats Strategy for Breakfast: Why Psychological Safety Matters in Open Source</li><li>µDjango. The next step in the evolution of asynchronous microservices technology.</li></ul><p>A public viewing of the event will also be held in Tokyo. A reception will also be held, so please check the following connpass page if you plan to attend.</p>","contentLength":948,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Eli Bendersky: Decorator JITs - Python as a DSL","url":"https://eli.thegreenplace.net/2025/decorator-jits-python-as-a-dsl/","date":1739569771,"author":"","guid":155,"unread":true,"content":"<p>Spend enough time looking at Python programs and packages for machine learning,\nand you'll notice that the \"JIT decorator\" pattern is pretty popular. For\nexample, this JAX snippet:</p><div><pre></pre></div><div><pre></pre></div><p>In both cases, the function decorated with  doesn't get executed by the\nPython interpreter in the normal sense. Instead, the code inside is more like\na DSL (Domain Specific Language) processed by a special purpose compiler built\ninto the library (JAX or Triton). Another way to think about it is that Python\nis used as a  to describe computations.</p><p>In this post I will describe some implementation strategies used by libraries to\nmake this possible.</p><div><h2>Preface - where we're going</h2><p>The goal is to explain how different kinds of  decorators work by using\na simplified, educational example that implements several approaches from\nscratch. All the approaches featured in this post will be using this flow:</p> Expr IR --&gt; LLVM IR --&gt; Execution\" /&gt; Expr IR --&gt; LLVM IR --&gt; Execution\" class=\"align-center\" src=\"https://eli.thegreenplace.net/images/2025/decjit-python.png\" /&gt;\n<p>These are the steps that happen when a Python function wrapped with\nour educational  decorator is called:</p><ol><li>The function is translated to an \"expression IR\" - .</li><li>This expression IR is converted to LLVM IR.</li><li>Finally, the LLVM IR is JIT-executed.</li></ol><p>First, let's look at the  IR. Here we'll make a big simplification -\nonly supporting functions that define a single expression, e.g.:</p><div><pre></pre></div><p>Naturally, this can be easily generalized - after all, LLVM IR can be used to\nexpress fully general computations.</p><p>Here are the  data structures:</p><div><pre></pre></div><p>To convert an  into LLVM IR and JIT-execute it, we'll use this function:</p><div><pre></pre></div><p>It uses the  class to actually generate LLVM IR from .\nThis process is straightforward and covered extensively in the resources I\nlinked to earlier; take a look at <a href=\"https://github.com/eliben/code-for-blog/blob/main/2025/decjit/exprcode.py\">the full code here</a>.</p><p>My goal with this architecture is to make things simple, but .\nOn one hand - there are several simplifications: only single expressions are\nsupported, very limited set of operators, etc. It's very easy to extend this!\nOn the other hand, we could have just trivially evaluated the \nwithout resorting to LLVM IR; I do want to show a more complete compilation\npipeline, though, to demonstrate that an arbitrary amount of complexity can\nbe hidden behind these simple interfaces.</p><p>With these building blocks in hand, we can review the strategies used by\n decorators to convert Python functions into s.</p></div><div><p>Python comes with powerful code reflection and introspection capabilities out\nof the box. Here's the  decorator:</p><div><pre></pre></div><p>This is a standard Python decorator. It takes a function and returns another\nfunction that will be used in its place ( ensures that\nfunction attributes like the name and docstring of the wrapper match the\nwrapped function).</p><div><pre></pre></div><p>After  is applied to , what  holds is the\nwrapper. When  is called, the wrapper is invoked with\n.</p><p>The wrapper obtains the AST of the wrapped function, and then uses\n to convert this AST into an :</p><div><pre></pre></div><p>When  finishes visiting the AST it's given, its\n field will contain the  representing the function's\nreturn value. The wrapper then invokes  with this .</p><p>Note how our decorator interjects into the regular Python execution process.\nWhen  is called, instead of the standard Python compilation and\nexecution process (code is compiled into bytecode, which is then executed\nby the VM), we translate its code to our own representation and emit LLVM from\nit, and then JIT execute the LLVM IR. While it seems kinda pointless in this\nartificial example, in reality this means we can execute the function's code\nin any way we like.</p><div><h3>AST JIT case study: Triton</h3><p>This approach is almost exactly how the Triton language works. The body of a\nfunction decorated with  gets parsed to a Python AST, which then\n- through a series of internal IRs - ends up in LLVM IR; this in turn is lowered\nto <a href=\"https://docs.nvidia.com/cuda/parallel-thread-execution/\">PTX</a> by the\n<a href=\"https://llvm.org/docs/NVPTXUsage.html\">NVPTX LLVM backend</a>.\nThen, the code runs on a GPU using a standard CUDA pipeline.</p><p>Naturally, the subset of Python that can be compiled down to a GPU is limited;\nbut it's sufficient to run performant kernels, in a language that's much\nfriendlier than CUDA and - more importantly - lives in the same file with the\n\"host\" part written in regular Python. For example, if you want testing and\ndebugging, you can run Triton in \"interpreter mode\" which will just run the\nsame kernels locally on a CPU.</p><p>Note that Triton lets us import names from the  package\nand use them inside kernels; these serve as the  for the language\n- special calls the compiler handles directly.</p></div></div><div><p>Python is a fairly complicated language with  of features. Therefore,\nif our JIT has to support some large portion of Python semantics, it may make\nsense to leverage more of Python's own compiler. Concretely, we can have it\ncompile the wrapped function all the way <a href=\"https://github.com/python/cpython/blob/main/InternalDocs/interpreter.md\">to bytecode</a>,\nand start our translation from there.</p><p>Here's the  decorator that does just this :</p><div><pre></pre></div><p>The Python VM is a stack machine; so we emulate a stack to convert the\nfunction's bytecode to  IR (a bit like an <a href=\"https://en.wikipedia.org/wiki/Reverse_Polish_notation\">RPN evaluator</a>).\nAs before, we then use our  utility function to lower\n to LLVM IR and JIT execute it.</p><p>Using this JIT is as simple as the previous one - just swap \nfor :</p><div><pre></pre></div><div><h3>Bytecode JIT case study: Numba</h3><p><a href=\"https://numba.pydata.org/\">Numba</a> is a compiler for Python itself. The idea\nis that you can speed up specific functions in your code by slapping a\n decorator on them. What happens next is similar in spirit to\nour simple , but of course much more complicated because it\nsupports a very large portion of Python semantics.</p><p>Numba uses the Python compiler to emit bytecode, just as we did; it then\nconverts it into its own IR, and then to LLVM using .</p><p>By starting with the bytecode, Numba makes its life easier (no need to rewrite\nthe entire Python compiler). On the other hand, it also makes some analyses\n, because by the time we're in bytecode, a lot of semantic information\nexisting in higher-level representations is lost. For example, Numba has to\nsweat a bit to recover control flow information from the bytecode (by\nrunning it through a special interpreter first).</p></div></div><div><p>The two approaches we've seen so far are similar in many ways - both rely on\nPython's introspection capabilities to compile the source code of the JIT-ed\nfunction to some extent (one to AST, the other all the way to bytecode), and\nthen work on this lowered representation.</p><p>The tracing strategy is very different. It doesn't analyze the source code of\nthe wrapped function at all - instead, it  its execution by means of\nspecially-boxed arguments, leveraging overloaded operators and functions, and\nthen works on the generated trace.</p><p>The code implementing this for our smile demo is surprisingly compact:</p><div><pre></pre></div><p>Each runtime argument of the wrapped function is assigned a , and\nthat is placed in a , a placeholder class which lets us\ndo operator overloading:</p><div><pre></pre></div><p>The remaining key function is :</p><div><pre></pre></div><p>To understand how this works, consider this trivial example:</p><div><pre></pre></div><p>After the decorated function is defined,  holds the wrapper function\ndefined inside . When  is called, the wrapper runs:</p><ol><li>For each argument of  itself (that is  and ), it creates\na new  holding a . This denotes a named variable in\nthe  IR.</li><li>It then calls the wrapped function, passing it the boxes as runtime\nparameters.</li><li>When (the wrapped)  runs, it invokes . This is caught by the overloaded\n operator of , and it creates a new  with\nthe s representing  and  as children. This\n is then returned .</li><li>The wrapper unboxes the returned  and passes it to\n to emit LLVM IR from it and JIT execute it with the\nactual runtime arguments of the call: .</li></ol><p>This might be a little mind-bending at first, because there are two different\nexecutions that happen:</p><ul><li>The first is calling the wrapped  function itself, letting the Python\ninterpreter run it as usual, but with special arguments that build up the IR\ninstead of doing any computations. This is the .</li><li>The second is lowering this IR our tracing step built into LLVM IR and then\nJIT executing it with the actual runtime argument values ; this is\nthe .</li></ul><p>This tracing approach has some interesting characteristics. Since we don't\nhave to analyze the source of the wrapped functions but only trace through\nthe execution, we can \"magically\" support a much richer set of programs, e.g.:</p><div><pre></pre></div><p>This  with our basic . Since Python variables are\nplaceholders (references) for values, our tracing step is oblivious to them - it\nfollows the flow of values. Another example:</p><div><pre></pre></div><p>This also just works! The created  will be a long chain of \nadditions of 's runtime values through the loop, added to the \nfor .</p><p>This last example also leads us to a limitation of the tracing approach; the\nloop cannot be  - it cannot depend on the function's arguments,\nbecause the tracing step has no concept of runtime values and wouldn't know\nhow many iterations to run through; or at least, it doesn't know this unless\nwe want to perform the tracing run for every runtime execution .</p><div><h3>Tracing JIT case study: JAX</h3><p>The <a href=\"https://jax.readthedocs.io/en/latest/\">JAX ML framework</a> uses a tracing\napproach very similar to the one described here. The first code sample in this\npost shows the JAX notation. JAX cleverly wraps Numpy with its own version which\nis traced (similar to our , but JAX calls these boxes \"tracers\"),\nletting you write regular-feeling Numpy code that can be JIT optimized and\nexecuted on accelerators like GPUs and TPUs via <a href=\"https://github.com/openxla\">XLA</a>. JAX's tracer builds up an underlying IR (called\n<a href=\"https://jax.readthedocs.io/en/latest/jaxpr.html\">jaxpr</a>) which can then be\nemitted to XLA ops and passed to XLA for further lowering and execution.</p><p>For a fairly deep overview of how JAX works, I recommend reading the\n<a href=\"https://jax.readthedocs.io/en/latest/autodidax.html\">autodidax doc</a>.</p><p>As mentioned earlier, JAX has <a href=\"https://jax.readthedocs.io/en/latest/jit-compilation.html\">some limitations</a>\nwith things like data-dependent control flow in native Python. This won't work,\nbecause there's control flow\nthat depends on a runtime value ():</p><div><pre></pre></div><p>When  is executed, JAX will throw an exception, saying something\nlike:</p><blockquote>\nThis concrete value was not available in Python because it depends on the\nvalue of the argument count.</blockquote><p>As a remedy, JAX has its\nown built-in intrinsics from the <a href=\"https://jax.readthedocs.io/en/latest/jax.lax.html\">jax.lax package</a>.\nHere's the example rewritten in a way that actually works:</p><div><pre></pre></div><p> (and many other built-ins in the  package) is something JAX\ncan trace through, generating a corresponding XLA operation (XLA has support for\n<a href=\"https://openxla.org/xla/operation_semantics\">While loops</a>, to which this\n can be lowered).</p><p>The tracing approach has clear benefits for JAX as well; because it only cares\nabout the flow of values, it can handle arbitrarily complicated Python code,\nas long as the flow of values can be traced. Just like the local variables and\ndata-independent loops shown earlier, but also things like closures. This makes\nmeta-programming and templating easy .</p></div></div><div><p>The full code for this post is available <a href=\"https://github.com/eliben/code-for-blog/tree/main/2025/decjit\">on GitHub</a>.</p></div>","contentLength":10514,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Friday Squid Blogging: Squid the Care Dog","url":"https://www.schneier.com/blog/archives/2025/02/friday-squid-blogging-squid-the-care-dog.html","date":1739552738,"author":"Bruce Schneier","guid":166,"unread":true,"content":"<p>The Vanderbilt University Medical Center has a pediatric care dog named “<a href=\"https://news.vumc.org/2025/02/03/pediatric-nursing-grand-rounds-on-impact-of-squid-the-facility-dog-is-feb-12/\">Squid</a>.”</p>","contentLength":84,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Upcoming Speaking Engagements","url":"https://www.schneier.com/blog/archives/2025/02/upcoming-speaking-engagements-43.html","date":1739552481,"author":"Bruce Schneier","guid":165,"unread":true,"content":"<p>This is a current list of where and when I am scheduled to speak:</p><ul><li>I’m speaking at <a href=\"https://boskone.org/\">Boskone 62</a> in Boston, Massachusetts, USA, which runs from February 14-16, 2025. My talk is at 4:00 PM ET on the 15th.</li></ul>","contentLength":200,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hugo van Kemenade: Improving licence metadata","url":"https://hugovk.dev/blog/2025/improving-licence-metadata/","date":1739545860,"author":"","guid":154,"unread":true,"content":"<p><a href=\"https://peps.python.org/pep-0639/\" target=\"_blank\" rel=\"noreferrer\">PEP 639</a> defines a spec on how to document licences\nused in Python projects.</p><p>Change  as follows.</p><p>I usually use Hatchling as a build backend, and support was added in 1.27:</p><div><pre tabindex=\"0\"><code></code></pre></div><p>Replace the freeform  field with a valid SPDX license expression, and add\n which points to the licence files in the repo. There’s often only one,\nbut if you have more than one, list them all:</p><div><pre tabindex=\"0\"><code></code></pre></div><p>Optionally delete the deprecated licence classifier:</p><div><pre tabindex=\"0\"><code></code></pre></div><p>Then make sure to use a PyPI uploader that supports this.</p><p>pip can also show you the metadata:</p><div><pre tabindex=\"0\"><code></code></pre></div><p>A lot of work went into this. Thank you to PEP authors\n<a href=\"https://github.com/pombredanne\" target=\"_blank\" rel=\"noreferrer\">Philippe Ombredanne</a> for creating the first draft in\n2019, to <a href=\"https://github.com/cam-gerlach\" target=\"_blank\" rel=\"noreferrer\">C.A.M. Gerlach</a> for the second draft in 2021,\nand especially to <a href=\"https://karolinasurma.eu/\" target=\"_blank\" rel=\"noreferrer\">Karolina Surma</a> for getting the third\ndraft finish line and helping with the implementation.</p><p>And many projects were updated to support this, thanks to the maintainers and\ncontributors of at least:</p>","contentLength":878,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"AI and Civil Service Purges","url":"https://www.schneier.com/blog/archives/2025/02/ai-and-civil-service-purges.html","date":1739538202,"author":"Bruce Schneier","guid":164,"unread":true,"content":"<p>Donald Trump and Elon Musk’s chaotic approach to reform is upending government operations. Critical functions have been <a href=\"https://www.theguardian.com/us-news/2025/feb/05/musk-doge-takeover-usaid\">halted</a>, tens of thousands of federal staffers are being encouraged to <a href=\"https://www.wsj.com/lifestyle/careers/federal-workers-accept-buyout-offers-be1c00fb\">resign</a>, and congressional mandates are being <a href=\"https://thehill.com/business/5124133-democrats-bill-treasury-system-musk/\">disregarded</a>. The next phase: The Department of Government Efficiency <a href=\"https://www.nytimes.com/2025/02/03/technology/musk-allies-ai-government.html\">reportedly</a> wants to use AI to cut costs. According to , Musk’s group has started to <a href=\"https://www.washingtonpost.com/nation/2025/02/06/elon-musk-doge-ai-department-education/\">run sensitive data</a> from government systems through AI programs to analyze spending and determine what could be pruned. This may lead to the elimination of human jobs in favor of automation. As one government official who has been tracking Musk’s DOGE team told the, the ultimate aim is to use AI to replace “<a href=\"https://www.washingtonpost.com/business/2025/02/08/doge-musk-goals/\">the human workforce with machines</a>.” (Spokespeople for the White House and DOGE did not respond to requests for comment.)</p><p>Using AI to make government more efficient is a worthy pursuit, and this is not a new idea. The Biden administration disclosed more than 2,000 <a href=\"https://github.com/ombegov/2024-Federal-AI-Use-Case-Inventory\">AI applications</a> in development across the federal government. For example, <a href=\"https://www.dhs.gov/ai/use-case-inventory/fema\">FEMA</a> has started using AI to help perform damage assessment in disaster areas. The <a href=\"https://ai.cms.gov/assets/CMS_AI_Playbook.pdf\">Centers for Medicare and Medicaid Services</a> has started using AI to look for fraudulent billing. The idea of replacing dedicated and principled civil servants with AI agents, however, new—and complicated.</p><p>The civil service—the massive cadre of employees who operate government agencies—plays a vital role in translating laws and policy into the operation of society. New presidents can issue sweeping executive orders, but they often have no real effect until they actually change the behavior of public servants. Whether you think of these people as essential and <a href=\"https://www.washingtonpost.com/opinions/interactive/2024/michael-lewis-conclusion-who-is-government/\">inspiring</a> do-gooders, boring bureaucratic functionaries, or as agents of a “<a href=\"https://www.theatlantic.com/health/archive/2024/11/deep-state-public-health-trump-kennedy/680621/\">deep state</a>,” their sheer number and continuity act as ballast that resists institutional change.</p><p>This is why Trump and Musk’s actions are so significant. The more AI decision making is integrated into government, the easier change will be. If human workers are widely replaced with AI, executives will have unilateral authority to instantaneously alter the behavior of the government, profoundly raising the stakes for transitions of power in democracy. Trump’s unprecedented purge of the civil service might be the last time a president needs to replace the human beings in government in order to dictate its new functions. Future leaders may do so at the press of a button.</p><p>To be clear, the use of AI by the executive branch doesn’t have to be disastrous. In theory, it could allow new leadership to swiftly implement the wishes of its electorate. But this could go very badly in the hands of an authoritarian leader. AI systems concentrate power at the top, so they could allow an executive to effectuate change over sprawling bureaucracies instantaneously. Firing and replacing tens of thousands of human bureaucrats is a huge undertaking. Swapping one AI out for another, or modifying the rules that those AIs operate by, would be much simpler.</p><p>Social-welfare programs, if automated with AI, could be redirected to systematically benefit one group and disadvantage another with a single prompt change. Immigration-enforcement agencies could prioritize people for investigation and detainment with one instruction. Regulatory-enforcement agencies that monitor corporate behavior for malfeasance could turn their attention to, or away from, any given company on a whim.</p><p>Even if Congress were motivated to fight back against Trump and Musk, or against a future president seeking to bulldoze the will of the legislature, the absolute power to command AI agents would make it easier to subvert legislative intent. AI <a href=\"https://www.techpolicy.press/anatomy-of-an-ai-coup/\">has the power to diminish</a> representative politics. Written law is never fully determinative of the actions of government—there is always wiggle room for presidents, appointed leaders, and civil servants to exercise their own judgment. Whether intentional or not, whether charitably or not, each of these actors uses discretion. In human systems, that discretion is widely distributed across many individuals—people who, in the case of career civil servants, usually outlast presidencies.</p><p>Today, the AI ecosystem is dominated by a small number of corporations that decide how the most widely used AI models are designed, which data they are trained on, and which instructions they follow. Because their work is <a href=\"https://crfm.stanford.edu/fmti/paper.pdf\">largely secretive and unaccountable</a> to public interest, these tech companies are capable of making changes to the bias of AI systems—either generally or with aim at specific governmental use cases—that are invisible to the rest of us. And these private actors are both vulnerable to coercion by political leaders and self-interested in appealing to their favor. Musk himself created and funded xAI, now one of the world’s largest AI labs, with an <a href=\"https://www.zdnet.com/article/i-tried-xs-anti-woke-grok-ai-chatbot-the-results-were-the-opposite-of-what-i-expected/\">explicitly ideological</a> mandate to generate anti-“woke” AI and <a href=\"https://www.wired.com/llm-political-bias/\">steer</a> the wider AI industry in a similar direction.</p><p>But there’s a second way that AI’s transformation of government could go. AI development could happen inside of transparent and accountable public institutions, alongside its continued development by Big Tech. Applications of AI in democratic governments could be focused on benefitting public servants and the communities they serve by, for example, making it easier for non-English speakers to access government services, making ministerial tasks such as processing routine applications more efficient and reducing backlogs, or helping constituents weigh in on the policies deliberated by their representatives. Such AI integrations should be done gradually and carefully, with public oversight for their design and implementation and monitoring and guardrails to avoid unacceptable bias and harm.</p><p>Governments around the world are demonstrating how this could be done, though it’s early days. <a href=\"https://talktothecity.org\">Taiwan</a> has pioneered the use of AI models to facilitate deliberative democracy at an unprecedented scale. Singapore has been a leader in the development of <a href=\"https://www.brookings.edu/articles/how-public-ai-can-strengthen-democracy/\">public AI</a> models, built <a href=\"https://sea-lion.ai\">transparently</a> and with <a href=\"https://www.undp.org/policy-centre/singapore/blog/pairing-ai-public-sector-impact-singapore\">public-service use cases</a> in mind. <a href=\"https://www.canada.ca/en/government/system/digital-government/digital-government-innovations/responsible-use-ai/algorithmic-impact-assessment.html\">Canada</a> has illustrated the role of disclosure and public input on the consideration of AI use cases in government. Even if you do not trust the current White House to follow any of these examples, U.S. states—which have much greater contact and influence over the daily lives of Americans than the federal government—could lead the way on this kind of responsible development and deployment of AI.</p><p>As the political theorist <a href=\"https://wwnorton.com/books/9781631496943\">David Runciman</a> has written, AI is just another in a long line of artificial “machines” used to govern how people live and act, not unlike corporations and states before it. AI doesn’t replace those older institutions, but it changes how they function. As the Trump administration forges stronger ties to Big Tech and AI developers, we need to recognize the potential of that partnership to steer the future of democratic governance—and act to make sure that it does not enable future authoritarians.</p><p><em>This essay was written with Nathan E. Sanders, and originally appeared in <a href=\"https://www.theatlantic.com/technology/archive/2025/02/doge-ai-plans/681635/\">The Atlantic</a>.</em></p>","contentLength":7136,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: The Real Python Podcast – Episode #239: Behavior-Driven vs Test-Driven Development &amp; Using Regex in Python","url":"https://realpython.com/podcasts/rpp/239/","date":1739534400,"author":"","guid":99,"unread":true,"content":"<p>What is behavior-driven development, and how does it work alongside test-driven development? How do you communicate requirements between teams in an organization? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>","contentLength":279,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Daniel Roy Greenfeld: Building a playing card deck","url":"https://daniel.feldroy.com/posts/2025-02-deck-of-cards","date":1739526604,"author":"","guid":153,"unread":true,"content":"<article>Today is Valentine's Day. That makes it the perfect day to write a blog post about showing how to not just build a deck of cards, but show off cards from the heart suite.</article>","contentLength":170,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Risky Biz Soap Box: Run your own open source IDP with Authentik","url":"https://risky.biz/soapbox93/","date":1739492664,"author":"","guid":459,"unread":true,"content":"<article></article>","contentLength":0,"flags":null,"enclosureUrl":"https://dts.podtrac.com/redirect.mp3/media3.risky.biz/soapbox93.mp3","enclosureMime":"","commentsUrl":null},{"title":"Mapped types in TypeScript","url":"https://2ality.com/2025/02/mapped-types-typescript.html","date":1739491200,"author":"Dr. Axel Rauschmayer","guid":228,"unread":true,"content":"<p>A mapped type is a loop over keys that produces an object or tuple type and looks as follows:</p><pre><code>{[]: }\n</code></pre><p>In this blog post, we examine how mapped types work and see examples of using them. Their most importing use cases are transforming objects and mapping tuples.</p>","contentLength":259,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Bojan Mihelac: Prefixed Parameters for Django querystring tag","url":"http://code.informatikamihelac.com/en/query-string-with-prefixed-parameters/","date":1739482638,"author":"","guid":152,"unread":true,"content":"<article>An overview of Django 5.1's new querystring tag and how to add support for prefixed parameters.</article>","contentLength":95,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Coding Interviews were HARD Until I Learned These 20 Tips","url":"https://blog.algomaster.io/p/20-coding-interviews-tips","date":1739467827,"author":"Ashish Pratap Singh","guid":434,"unread":true,"content":"<p>I gave my first  in 2016—and failed. I failed the next five interviews as well before finally landing my first job at .</p><p>Since then, I’ve interviewed with many companies and faced my fair share of rejections. However, over the years, my failure rate in coding interviews dropped significantly.</p><p>By 2022, with just 1.5 months of focused preparation, I successfully cleared interviews at  and .</p><p>Surprisingly, my success wasn’t due to a dramatic improvement in problem-solving skills. The real game-changer was my approach— and  during the interview.</p><p>In this article, I’ll share  that made coding interviews significantly easier for me.</p><p>These tips cover everything you need to know, including:</p><ul><li><p>How to systematically approach coding interview problems</p></li><li><p>Key concepts and patterns you should know</p></li><li><p>The type of problems you should practice</p></li><li><p>How to choose the right algorithm for a given problem</p></li><li><p>Techniques to optimize your solution</p></li><li><p>How to communicate your thought process effectively</p></li></ul><p>By applying these strategies, you’ll be able to tackle coding interviews with confidence and massively increase your chances of success.</p><p>In a coding interview, interviewers want to see how well you , , and  under pressure.</p><p>Here's a breakdown of what they look for:</p><ol><li><p><strong>Understanding the problem</strong>: Do you ask clarifying questions instead of making assumptions to ensure you fully understand the problem?</p></li><li><p>: Can you decompose the problem into smaller, manageable parts?</p></li><li><p>: Can you design an optimal solution in terms of time and space complexity?</p></li><li><p>: Do you handle edge cases like empty inputs, duplicates, large values, or special conditions?</p></li><li><p>: Can you explain why one approach is better than another?</p></li><li><p>: Do you have a strong grasp of data structures and algorithms, and can you choose the right one for the problem?</p></li><li><p>Can you quickly compute the time and space complexity of your solution?</p></li><li><p><strong>Explaining your thought process</strong>: Can you clearly articulate your approach and why it works?</p></li><li><p>: Are you receptive to hints and able to adjust your approach accordingly?</p></li><li><p>: Do you follow good coding practices (meaningful variable names, proper indentation, modular functions etc..)?</p></li><li><p><strong>Improving the initial solution</strong>: Can you optimize and refine your first solution when prompted?</p></li><li><p>Are you able to tackle variations of the original problem?</p></li><li><p>Can you manually walk through your code with sample inputs to verify correctness?</p></li></ol><p>Most coding interviews last </p><p>Depending on the company and interviewer, you may be asked to solve 2-3easy/medium problems or 1 hard problem with follow-ups.</p><p>Lets assume you are given one problem, with a follow up in a 45-minute interview. Here’s how you can optimally allocate your time:</p><ol><li><p>The interviewer may ask you to introduce yourself. Prepare a concise 1-2 minute introduction that highlights your background, experience, and key strengths. Practice it beforehand so that you can deliver it smoothly.</p></li><li><p><strong>Understand the Problem (5-10 mins):  </strong>Carefully read the problem statement, ask clarifying questions, and walk through sample inputs and expected outputs.</p></li><li><p><strong>Plan the Approach (10-20 mins): </strong>Brainstorm possible solutions, evaluate trade-offs, and discuss time and space complexity.</p></li><li><p><strong>Implement the Code (20-30 mins): </strong>Write a clean, modular and readable code.</p></li><li><p>Dry-run your code with sample inputs, debug any issues, and ensure edge cases are handled.</p></li><li><p><strong>Follow-ups and Wrap Up (35-45 mins): </strong>Answer follow up questions, and ask thoughtful questions to the interviewer about the company, role, or team.</p></li></ol><p>One of the biggest mistakes candidates make in coding interviews is jumping into coding too soon.</p><p>If you don't fully understand the question, you might end up solving the </p><p>Here’s how to ensure you grasp the problem before coding:</p><h4><strong>Read the Problem Carefully</strong></h4><p>Take a moment to absorb the problem statement. Rephrase it in your own words to confirm your understanding. </p><p>Identify the expected input/output format and any hidden constraints.</p><p>If anything is unclear, ask questions before diving into the solution. Interviewers appreciate when you seek clarity. Never assume details that aren’t explicitly mentioned in the problem statement.</p><p>Common clarifications include:</p><ul><li><p>Are there duplicate values?</p></li><li><p>Can the input be empty? If so, what should the output be?</p></li><li><p>Should the solution handle negative numbers?</p></li><li><p>Should the output maintain the original order of elements?</p></li><li><p>Is the graph directed or undirected?</p></li><li><p>Does the input contain only lowercase English letters, or can it have uppercase, digits, or special characters?</p></li><li><p>What should happen if multiple solutions exist? Should I return any valid solution, or does the problem have specific requirements?</p></li></ul><h4><strong>Walk Through Input/Output Examples</strong></h4><p>Once you understand the problem statement and constraints, go over a few input and output examples to make sure you get it.</p><p>Draw them out if it helps, especially for visual data structures like trees or graphs.</p><p>Try to take examples that cover different scenarios of the problem. Think about any  that might come up.</p>","contentLength":4908,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/61c3f6c0-4027-4d37-b4a7-a30fc183fa12_1602x1032.png","enclosureMime":"","commentsUrl":null},{"title":"Peter Bengtsson: get in JavaScript is the same as property in Python","url":"http://www.peterbe.com/plog/get-in-javascript-is-the-same-as-property-in-python","date":1739450516,"author":"","guid":151,"unread":true,"content":"<article>Prefix a function, in an object or class, with `get` and then that acts as a function call without brackets. Just like Python's `property` decorator.</article>","contentLength":149,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to add a directory to your PATH","url":"https://jvns.ca/blog/2025/02/13/how-to-add-a-directory-to-your-path/","date":1739449676,"author":"Julia Evans","guid":1,"unread":true,"content":"<p>I was talking to a friend about how to add a directory to your PATH today. It’s\nsomething that feels “obvious” to me since I’ve been using the terminal for a\nlong time, but when I searched for instructions for how to do it, I actually\ncouldn’t find something that explained all of the steps – a lot of them just\nsaid “add this to ”, but what if you’re not using bash? What if your\nbash config is actually in a different file? And how are you supposed to figure\nout which directory to add anyway?</p><p>So I wanted to try to write down some more complete directions and mention some\nof the gotchas I’ve run into over the years.</p><p>Here’s a table of contents:</p><h3>step 1: what shell are you using?</h3><p>If you’re not sure what shell you’re using, here’s a way to find out. Run this:</p><ul><li>if you’re using , it’ll print out </li><li>if you’re using , it’ll print out </li><li>if you’re using , it’ll print out an error like “In fish, please use\n$fish_pid” ( isn’t valid syntax in fish, but in any case the error\nmessage tells you that you’re using fish, which you probably already knew)</li></ul><p>Also bash is the default on Linux and zsh is the default on Mac OS (as of\n2024). I’ll only cover bash, zsh, and fish in these directions.</p><h3>step 2: find your shell’s config file</h3><ul><li>in zsh, it’s probably </li><li>in bash, it might be , but it’s complicated, see the note in the next section</li><li>in fish, it’s probably <code>~/.config/fish/config.fish</code> (you can run  if you want to be 100% sure)</li></ul><h3>a note on bash’s config file</h3><p>Bash has three possible config files: , , and .</p><p>If you’re not sure which one your system is set up to use, I’d recommend\ntesting this way:</p><ol><li>add  to your </li><li>If you see “hi there”, that means  is being used! Hooray!</li><li>Otherwise remove it and try the same thing with </li><li>You can also try  if the first two options don’t work.</li></ol><p>(there are a lot of elaborate flow charts out there that explain how bash\ndecides which config file to use but IMO it’s not worth it and just testing is\nthe fastest way to be sure)</p><h3>step 3: figure out which directory to add</h3><p>Let’s say that you’re trying to install and run a program called \nand it doesn’t work, like this:</p><pre><code>$ npm install -g http-server\n$ http-server\nbash: http-server: command not found\n</code></pre><p>How do you find what directory  is in? Honestly in general this is\nnot that easy – often the answer is something like “it depends on how npm is\nconfigured”. A few ideas:</p><ul><li>Often when setting up a new installer (like , , , etc),\nwhen you first set it up it’ll print out some directions about how to update\nyour PATH. So if you’re paying attention you can get the directions then.</li><li>Sometimes installers will automatically update your shell’s config file\nto update your  for you</li><li>Sometimes just Googling “where does npm install things?” will turn up the\nanswer</li><li>Some tools have a subcommand that tells you where they’re configured to\ninstall things, like:\n<ul><li>Node/npm:  (then append )</li><li>Go:  (then append )</li><li>asdf: <code>asdf info | grep ASDF_DIR</code> (then append  and )</li></ul></li></ul><h3>step 3.1: double check it’s the right directory</h3><p>Once you’ve found a directory you think might be the right one, make sure it’s\nactually correct! For example, I found out that on my machine,  is\nin . I can make sure that it’s the right directory by trying to\nrun the program  in that directory like this:</p><pre><code>$ ~/.npm-global/bin/http-server\nStarting up http-server, serving ./public\n</code></pre><p>It worked! Now that you know what directory you need to add to your ,\nlet’s move to the next step!</p><h3>step 4: edit your shell config</h3><p>Now we have the 2 critical pieces of information we need:</p><ol><li>Which directory you’re trying to add to your PATH (like  )</li><li>Where your shell’s config is (like , , or <code>~/.config/fish/config.fish</code>)</li></ol><p>Now what you need to add depends on your shell:</p><p>Open your shell’s config file, and add a line like this:</p><pre><code>export PATH=$PATH:~/.npm-global/bin/\n</code></pre><p>(obviously replace  with the actual directory you’re trying to add)</p><p>You can do the same thing as in bash, but zsh also has some slightly fancier\nsyntax you can use if you prefer:</p><pre><code>path=(\n  $path\n  ~/.npm-global/bin\n)\n</code></pre><p>In fish, the syntax is different:</p><pre><code>set PATH $PATH ~/.npm-global/bin\n</code></pre><p>(in fish you can also use , some notes on that <a href=\"https://jvns.ca/blog/2025/02/13/how-to-add-a-directory-to-your-path/#a-note-on-fish-add-path\">further down</a>)</p><h3>step 5: restart your shell</h3><p>Now, an extremely important step: updating your shell’s config won’t take\neffect if you don’t restart it!</p><ol><li>open a new terminal (or terminal tab), and maybe close the old one so you don’t get confused</li><li>Run  to start a new shell (or  if you’re using zsh, or  if you’re using fish)</li></ol><p>I’ve found that both of these usually work fine.</p><p>And you should be done! Try running the program you were trying to run and\nhopefully it works now.</p><p>If not, here are a couple of problems that you might run into:</p><h3>problem 1: it ran the wrong program</h3><p>If the wrong  of a is program running, you might need to add the\ndirectory to the  of your PATH instead of the end.</p><p>For example, on my system I have two versions of  installed, which I\ncan see by running :</p><pre><code>$ which -a python3\n/usr/bin/python3\n/opt/homebrew/bin/python3\n</code></pre><p>The one your shell will use is the .</p><p>If you want to use the Homebrew version, you need to add that directory\n() to the  of your PATH instead, by putting this in\nyour shell’s config file (it’s  instead of the usual )</p><pre><code>export PATH=/opt/homebrew/bin/:$PATH\n</code></pre><pre><code>set PATH ~/.cargo/bin $PATH\n</code></pre><h3>problem 2: the program isn’t being run from your shell</h3><p>All of these directions only work if you’re running the program . If you’re running the program from an IDE, from a GUI, in a cron job,\nor some other way, you’ll need to add the directory to your PATH in a different\nway, and the exact details might depend on the situation.</p><ul><li>use the full path to the program you’re running, like <code>/home/bork/bin/my-program</code></li><li>put the full PATH you want as the first line of your crontab (something like\nPATH=/bin:/usr/bin:/usr/local/bin:….). You can get the full PATH you’re\nusing in your shell by running .</li></ul><p>I’m honestly not sure how to handle it in an IDE/GUI because I haven’t run into\nthat in a long time, will add directions here if someone points me in the right\ndirection.</p><h3>problem 3: duplicate  entries making it harder to debug</h3><p>If you edit your path and start a new shell by running  (or , or\n), you’ll often end up with duplicate  entries, because the shell\nkeeps adding new things to your  every time you start your shell.</p><p>Personally I don’t think I’ve run into a situation where this kind of\nduplication breaks anything, but the duplicates can make it harder to debug\nwhat’s going on with your  if you’re trying to understand its contents.</p><p>Some ways you could deal with this:</p><ol><li>If you’re debugging your , open a new terminal to do it in so you get\na “fresh” state. This should avoid the duplication.</li><li>Deduplicate your  at the end of your shell’s config  (for example in\nzsh apparently you can do this with )</li><li>Check that the directory isn’t already in your  when adding it (for\nexample in fish I believe you can do this with <code>fish_add_path --path /some/directory</code>)</li></ol><p>How to deduplicate your  is shell-specific and there isn’t always a\nbuilt in way to do it so you’ll need to look up how to accomplish it in your\nshell.</p><h3>problem 4: losing your history after updating your </h3><p>Here’s a situation that’s easy to get into in bash or zsh:</p><ol><li>Run  to reload your config</li><li>Press the up arrow a couple of times to rerun the failed command (or open a new terminal)</li><li>The failed command isn’t in your history! Why not?</li></ol><p>This happens because in bash, by default, history is not saved until you exit\nthe shell.</p><p>Some options for fixing this:</p><ul><li>Instead of running  to reload your config, run  (or\n in zsh). This will reload the config inside your current\nsession.</li><li>Configure your shell to continuously save your history instead of only saving\nthe history when the shell exits. (How to do this depends on whether you’re\nusing bash or zsh, the history options in zsh are a bit complicated and I’m\nnot exactly sure what the best way is)</li></ul><p>When you install  (Rust’s installer) for the first time, it gives you\nthese instructions for how to set up your PATH, which don’t mention a specific\ndirectory at all.</p><pre><code>This is usually done by running one of the following (note the leading DOT):\n\n. \"$HOME/.cargo/env\"        \t# For sh/bash/zsh/ash/dash/pdksh\nsource \"$HOME/.cargo/env.fish\"  # For fish\n</code></pre><p>The idea is that you add that line to your shell’s config, and their script\nautomatically sets up your  (and potentially other things) for you.</p><p>This is pretty common (for example <a href=\"https://github.com/Homebrew/install/blob/deacfa6a6e62e5f4002baf9e1fac7a96e9aa5d41/install.sh#L1072-L1087\">Homebrew</a> suggests you eval ), and there are\ntwo ways to approach this:</p><ol><li>Just do what the tool suggests (like adding  to your shell’s config)</li><li>Figure out which directories the script they’re telling you to run would add\nto your PATH, and then add those manually. Here’s how I’d do that:\n<ul><li>Run  in my shell (or the fish version if using fish)</li><li>Run <code>echo \"$PATH\" | tr ':' '\\n' | grep cargo</code> to figure out which directories it added</li><li>See that it says  and shorten that to </li><li>Add the directory  to PATH (with the directions in this post)</li></ul></li></ol><p>I don’t think there’s anything wrong with doing what the tool suggests (it\nmight be the “best way”!), but personally I usually use the second approach\nbecause I prefer knowing exactly what configuration I’m changing.</p><p>fish has a handy function called  that you can run to add a directory to your  like this:</p><pre><code>fish_add_path /some/directory\n</code></pre><p>This is cool (it’s such a simple command!) but I’ve stopped using it for a couple of reasons:</p><ol><li>Sometimes  will update the  for every session in the\nfuture (with a “universal variable”) and sometimes it will update the \njust for the current session and it’s hard for me to tell which one it will\ndo. In theory the docs explain this but I could not understand them.</li></ol><p>Hopefully this will help some people. Let me know (on Mastodon or Bluesky) if\nyou there are other major gotchas that have tripped you up when adding a\ndirectory to your PATH, or if you have questions about this post!</p>","contentLength":9872,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"DOGE as a National Cyberattack","url":"https://www.schneier.com/blog/archives/2025/02/doge-as-a-national.html","date":1739448206,"author":"Bruce Schneier","guid":163,"unread":true,"content":"<p>In the span of just weeks, the US government has experienced what may be the most consequential security breach in its history—not through a sophisticated cyberattack or an act of foreign espionage, but through official orders by a billionaire with a poorly defined government role. And the implications for national security are profound.</p><p>First, it was reported that people associated with the newly created Department of Government Efficiency (DOGE) had <a href=\"https://bsky.app/profile/wyden.senate.gov/post/3lh5ejpwncc23\">accessed</a><a href=\"https://www.nytimes.com/2025/02/01/us/politics/elon-musk-doge-federal-payments-system.html\">the</a><a href=\"https://nymag.com/intelligencer/article/elon-musk-doge-treasury-access-federal-payments.html\">US</a><a href=\"https://therecord.media/union-groups-sue-treasury-over-giving-doge-access-to-data\">Treasury</a> computer system, giving them the ability to collect data on and potentially control the department’s roughly <a href=\"https://fiscal.treasury.gov/fds/\">$5.45 trillion</a> in annual federal payments.</p><p>Then, we learned that uncleared DOGE personnel had gained access to <a href=\"https://www.nbcnews.com/politics/national-security/usaid-security-leaders-removed-refusing-elon-musks-doge-employees-acce-rcna190357\">classified</a> data from the US Agency for International Development, possibly copying it onto their own systems. Next, the Office of Personnel Management—which holds detailed personal data on millions of federal employees, including those with security clearances—<a href=\"https://fedscoop.com/opm-email-federal-workforce-lawsuit-server-privacy-security/\">was</a><a href=\"https://www.yahoo.com/tech/elon-musk-seizes-computer-system-171738117.html\">compromised</a>. After that, <a href=\"https://www.reuters.com/world/us/doge-aides-search-medicare-agency-payment-systems-fraud-wsj-reports-2025-02-05/\">Medicaid and Medicare records</a> were compromised.</p><p>Meanwhile, only partially redacted names of CIA employees <a href=\"https://thehill.com/policy/national-security/5129170-cia-email-employee-identities/\">were sent</a> over an unclassified email account. DOGE personnel are also reported to be <a href=\"https://www.washingtonpost.com/nation/2025/02/06/elon-musk-doge-ai-department-education/\">feeding</a> Education Department data into artificial intelligence software, and they have also <a href=\"https://www.reuters.com/world/us/three-doge-members-raise-access-concerns-us-energy-department-sources-say-2025-02-07/\">started working</a> at the Department of Energy.</p><p>This story is moving very fast. On Feb. 8, a federal judge <a href=\"https://www.reuters.com/legal/us-judge-temporarily-blocks-musks-doge-accessing-payment-systems-2025-02-08/\">blocked</a> the DOGE team from accessing the Treasury Department systems any further. But given that DOGE workers have already copied data and possibly installed and modified software, it’s unclear how this fixes anything.</p><p>In any case, breaches of other critical government systems are likely to follow unless federal employees stand firm on the protocols protecting national security.</p><p>The systems that DOGE is accessing are not esoteric pieces of our nation’s infrastructure—they are the <a href=\"https://www.lawfaremedia.org/article/elon-musk-weaponizes-the-government\">sinews of government</a>.</p><p>For example, the Treasury Department systems contain the technical blueprints for how the federal government moves money, while the Office of Personnel Management (OPM) network contains information on who and what organizations the government employs and contracts with.</p><p>What makes this situation unprecedented isn’t just the scope, but also the method of attack. Foreign adversaries typically spend years attempting to penetrate government systems such as these, using stealth to avoid being seen and carefully hiding any tells or tracks. The Chinese government’s 2015 breach of <a href=\"https://www.washingtonpost.com/world/national-security/chinese-hackers-breach-federal-governments-personnel-office/2015/06/04/889c0e52-0af7-11e5-95fd-d580f1c5d44e_story.html\">OPM</a> was a significant US security failure, and it illustrated how personnel data could be used to identify intelligence officers and compromise national security.</p><p>In this case, external operators with <a href=\"https://www.wired.com/story/elon-musk-government-young-engineers/\">limited experience</a> and minimal oversight are doing their work in plain sight and under massive public scrutiny: gaining the highest levels of <a href=\"https://talkingpointsmemo.com/edblog/musk-cronies-dive-into-treasury-dept-payments-code-base\">administrative access</a> and making changes to the United States’ most sensitive networks, potentially introducing new security vulnerabilities in the process.</p><p>But the most alarming aspect isn’t just the access being granted. It’s the systematic dismantling of security measures that would detect and prevent misuse—including standard incident response protocols, auditing, and change-tracking mechanisms—<a href=\"https://www.theguardian.com/us-news/2025/feb/02/usaid-officials-put-on-leave-musk-doge\">by</a> removing the career officials in charge of those security measures and replacing them with inexperienced operators.</p><p>The Treasury’s computer systems have such an impact on national security that they were designed with the same principle that guides nuclear launch protocols: No single person should have unlimited power. Just as launching a nuclear missile requires two separate officers turning their keys simultaneously, making changes to critical financial systems traditionally requires multiple authorized personnel working in concert.</p><p>This approach, known as “separation of duties,” isn’t just bureaucratic red tape; it’s a fundamental security principle as old as banking itself. When your local bank processes a large transfer, it requires two different employees to verify the transaction. When a company issues a major financial report, separate teams must review and approve it. These aren’t just formalities—they’re essential safeguards against corruption and error. These measures have been <a href=\"https://www.wired.com/story/elon-musk-government-young-engineers/\">bypassed or ignored</a>. It’s as if someone found a way to rob Fort Knox by simply declaring that the new official policy is to fire all the guards and allow unescorted visits to the vault.</p><p>The implications for national security are <a href=\"https://techcrunch.com/2025/02/05/the-biggest-breach-of-u-s-government-data-is-under-way/\">staggering</a>. Sen. Ron Wyden said his office had learned that the attackers gained <a href=\"https://securityaffairs.com/173776/security/elon-musk-s-doge-granted-full-access-to-sensitive-treasury-systems.html\">privileges</a> that allow them to modify core programs in Treasury Department computers that verify federal payments, access encrypted keys that secure financial transactions, and alter audit logs that record system changes. Over at OPM, reports indicate that individuals associated with DOGE <a href=\"https://www.rawstory.com/elon-musk-doge-lawsuit/\">connected</a> an unauthorized server into the network. They are also reportedly <a href=\"https://gizmodo.com/elon-musks-doge-running-highly-sensitive-government-data-through-ai-report-2000560381\">training</a><a href=\"https://www.washingtonpost.com/nation/2025/02/06/elon-musk-doge-ai-department-education/\">AI</a> software on all of this sensitive data.</p><p>This is much more critical than the initial unauthorized access. These new servers have unknown capabilities and configurations, and there’s no evidence that this new code has gone through any rigorous security testing protocols. The AIs being trained are certainly not secure enough for this kind of data. All are ideal targets for any adversary, foreign or domestic, also seeking access to federal data.</p><p>There’s a reason why every modification—hardware or software—to these systems goes through a complex planning process and includes sophisticated access-control mechanisms. The national security crisis is that these systems are now much more vulnerable to dangerous attacks at the same time that the legitimate system administrators trained to protect them have been <a href=\"https://www.reuters.com/world/us/musk-aides-lock-government-workers-out-computer-systems-us-agency-sources-say-2025-01-31/\">locked out</a>.</p><p>By modifying core systems, the attackers have not only compromised current operations, but have also left behind vulnerabilities that could be exploited in future attacks—giving adversaries such as Russia and China an <a href=\"https://therecord.media/doge-opm-treasury-cybersecurity\">unprecedented</a><a href=\"https://cyberscoop.com/musk-doge-opm-treasury-breach/\">opportunity</a>. These countries have long targeted these systems. And they don’t just want to gather intelligence—they also want to understand how to disrupt these systems in a crisis.</p><p>Now, the technical details of how these systems operate, their security protocols, and their vulnerabilities are now potentially exposed to unknown parties without any of the usual safeguards. Instead of having to breach heavily fortified digital walls, these parties &nbsp;can simply walk through doors that are being propped open—and then erase evidence of their actions.</p><p>The security implications span three critical areas.</p><p>First, system manipulation: External operators can now modify operations while also altering audit trails that would track their changes. Second, data exposure: Beyond accessing personal information and transaction records, these operators can copy entire system architectures and security configurations—in one case, the technical blueprint of the country’s federal payment infrastructure. Third, and most critically, is the issue of system control: These operators can alter core systems and authentication mechanisms while disabling the very tools designed to detect such changes. This is more than modifying operations; it is modifying the infrastructure that those operations use.</p><p>To address these vulnerabilities, three immediate steps are essential. First, unauthorized access must be revoked and proper authentication protocols restored. Next, comprehensive system monitoring and change management must be reinstated—which, given the difficulty of cleaning a compromised system, will likely require a complete system reset. Finally, thorough audits must be conducted of all system changes made during this period.</p><p>This is beyond politics—this is a matter of national security. Foreign national intelligence organizations will be quick to take advantage of both the chaos and the new insecurities to steal US data and install backdoors to allow for future access.</p><p>Each day of continued unrestricted access makes the eventual recovery more difficult and increases the risk of irreversible damage to these critical systems. While the full impact may take time to assess, these steps represent the minimum necessary actions to begin restoring system integrity and security protocols.</p><p>Assuming that anyone in the government still cares.</p><p><em>This essay was written with Davi Ottenheimer, and originally appeared in <a href=\"https://foreignpolicy.com/2025/02/11/doge-cyberattack-united-states-treasury/\">Foreign Policy</a>.</em></p>","contentLength":8433,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"GenAI Patterns: Reranker","url":"https://martinfowler.com/articles/gen-ai-patterns/#reranker","date":1739441760,"author":"Martin Fowler","guid":207,"unread":true,"content":"<p>LLMs struggle with large amounts of context. <b>Bharani\n      Subramaniam</b> and I explain how to mitigate this common RAG\n      problem with a <a href=\"https://martinfowler.com/articles/gen-ai-patterns/#reranker\">Reranker</a> which takes the document\n      fragments from the retriever, and ranks them according to their usefulness.</p>","contentLength":253,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"EuroPython: EuroPython February 2025 Newsletter","url":"https://blog.europython.eu/europython-february-2025-newsletter/","date":1739435771,"author":"","guid":150,"unread":true,"content":"<p>Hope you&amp;aposre all having a fantastic February. We sure have been busy and got some exciting updates for you as we gear up for EuroPython 2025, which is taking place once again in the beautiful city of Prague. So let&amp;aposs dive right in!</p><p>EuroPython 2025 is right around the corner and our programme team is hard at work putting together an amazing lineup. But we need your help to shape the conference! We received over 572 fantastic proposals, and now it’s time for Community Voting! 🎉 If you&amp;aposve attended EuroPython before or submitted a proposal this year, you’re eligible to vote.</p><p>📢 More votes = a stronger, more diverse programme! Spread the word and get your EuroPython friends to cast their votes too.</p><p>🏃The deadline is , so don’t miss your chance!</p><p>Want to play a key role in building an incredible conference? Join our review team and help select the best talks for EuroPython 2025! Whether you&amp;aposre a Python expert or an enthusiastic community member, your insights matter.</p><p>We’d like to also thank the over 100 people who have already signed up to review! For those who haven’t done so yet, please remember to accept your Pretalx link and get your reviews in by </p><p>You can already start reviewing proposals, and each review takes as little as 5 minutes. We encourage reviewers to go through at least 20-30 proposals, but if you can do more, even better! With almost 600 submissions to pick from, your help ensures we curate a diverse and engaging programme.</p><p>🏃The deadline is Monday next week, so don’t delay!</p><p>EuroPython isn’t just present at other Python events—we actively support them too! As a community sponsor, we love helping local PyCons grow and thrive. We love giving back to the community and strengthening Python events across Europe! 🐍💙</p><p>The EuroPython team had a fantastic time at PyCon + Web in Berlin, meeting fellow Pythonistas, exchanging ideas, and spreading the word about EuroPython 2025. It was great to connect with speakers, organizers, and attendees.&nbsp;</p><p>Ever wondered how long it takes to walk from Berlin to Prague? A huge thank you to our co-organizers, Cheuk, Artur, and Cristián, for answering that in their fantastic lightning talk about EuroPython!</p><img src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeeVCMBckwBAVXDAhKyHXq8LJVHJysbWS61RNAeilg_qHzHZgzbC1SALu5u3qS-YjyjSQoUE3zIzVCcSHNj26mzPf43RP4PgcV3iUJPzcu_gAEXO25atB6gn7ZQ8O4Pu6vGttw_MQ?key=7MRGElcwE05wjMSe8jkdrI9g\" alt=\"alt\" width=\"512\" height=\"344\"><p>We had some members of the EuroPython team at FOSDEM 2025, connecting with the open-source community and spreading the Python love! 🎉 We enjoyed meeting fellow enthusiasts, sharing insights about the EuroPython Society, and giving away the first EuroPython 2025 stickers. If you stopped by—thank you and we hope to see you in Prague this July.</p><img src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXd6Dp3RdSY2Wm04WwjDJE6NP1fW_NRCUEVZws-cdneLjGf0gvbq7WWphC8AHEwS0qJsAT6ao4Nm36N3e2QhN15S-w1Xmv1AJxEo0480IWXXwLAVhXZ_TcR5qDW31Hf40hYeDKJzyw?key=7MRGElcwE05wjMSe8jkdrI9g\" alt=\"alt\" width=\"517\" height=\"388\"><h2>🦒 Speaker Mentorship Programme</h2><p>The signups for The Speaker Mentorship Programme closed on 22nd January 2025. We’re excited to have matched 43 mentees with 24 mentors from our community. We had an increase in the number of mentees who signed up and that’s amazing! We’re glad to be contributing to the journey of new speakers in the Python community. A massive thank you to our mentors for supporting the mentees and to our mentees; we’re proud of you for taking this step in your journey as a speaker.&nbsp;</p><p>26 mentees submitted at least 1 proposal. Out of this number, 13 mentees submitted 1 proposal, 9 mentees submitted 2 proposals, 2 mentees submitted 3 proposals, 1 mentee submitted 4 proposals and lastly, 1 mentee submitted 5 proposals. We wish our mentees the best of luck. We look forward to the acceptance of their proposals.</p><p>In a few weeks, we will host an online panel session with 2–3 experienced community members who will share their advice with first-time speakers. At the end of the panel, there will be a Q&amp;A session to answer all the participants’ questions.</p><p>You can watch the recording of the previous year’s workshop here:</p><p>EuroPython is one of the largest Python conferences in Europe, and it wouldn’t be possible without our sponsors. We are so grateful for the companies who have already expressed interest. If you’re interested in sponsoring EuroPython 2025 as well, please reach out to us at <a href=\"mailto:sponsoring@europython.eu\">sponsoring@europython.eu</a>.</p><h2>🎤 EuroPython Speakers Share Their Experiences</h2><p>We asked our past speakers to share their experiences speaking at EuroPython. These videos have been published on YouTube as shorts, and we&amp;aposve compiled them into brief clips for you to watch.</p><p>A big thanks goes to Sebastian Witowski, Jan Smitka, Yuliia Barabash, Jodie Burchell, Max Kahan, and Cheuk Ting Ho for sharing their experiences.</p><p>Why You Should Submit a Proposal for EuroPython? Part 2</p><p>Why You Should Submit a Proposal for EuroPython? Part 3</p><h2>📊 EuroPython Society Board Report&nbsp;</h2><p>The EuroPython conference wouldn’t be what it is without the incredible volunteers who make it all happen. 💞 Behind the scenes, there’s also the EuroPython Society—a volunteer-led non-profit that manages the fiscal and legal aspects of running the conference, oversees its organization, and works on a few smaller projects like the grants programme. To keep everyone in the loop and promote transparency, the Board is sharing regular updates on what we’re working on.</p><p>That&amp;aposs all for now! Keep an eye on your inbox and our website for more news and announcements. We&amp;aposre counting down the days until we can come together in Prague to celebrate our shared love for Python. 🐍❤️</p><p>Cheers,The EuroPython Team</p>","contentLength":5275,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Giampaolo Rodola: psutil: drop Python 2.7 support","url":"https://gmpy.dev/blog/2025/psutil-drop-python-27-support","date":1739401200,"author":"","guid":148,"unread":true,"content":"<p>About dropping Python 2.7 support in psutil, 3 years ago\n<a href=\"https://github.com/giampaolo/psutil/issues/2014#issuecomment-969263432\">I stated</a>:</p><blockquote><p>Not a chance, for many years to come. [Python 2.7] currently represents 7-10%\nof total downloads, meaning around 70k / 100k downloads per day.</p></blockquote><p>Only 3 years later, and to my surprise, <strong>downloads for Python 2.7 dropped to\n0.36%</strong>! As such, as of psutil 7.0.0, I finally decided to drop support for\nPython 2.7!</p><p>These are downloads per month:</p><div><pre><code></code></pre></div><p>According to <a href=\"https://archive.is/wip/knzql\">pypistats.org</a> Python 2.7 downloads\nrepresents the 0.28% of the total, around 15.000 downloads per day.</p><p>Maintaining 2.7 support in psutil had become increasingly difficult, but still\npossible. E.g. I could still run tests by using <a href=\"https://github.com/giampaolo/psutil/blob/fbb6d9ce98f930d3d101b7df5a4f4d0f1d2b35a3/setup.py#L76-L85\">old PYPI\nbackports</a>.\nGitHub Actions could still be\n<a href=\"https://github.com/giampaolo/psutil/blob/fbb6d9ce98f930d3d101b7df5a4f4d0f1d2b35a3/.github/workflows/build.yml#L77-L112\">tweaked</a>\nto run tests and produce 2.7 wheels on Linux and macOS. Not on Windows though,\nfor which I had to use a separate service (Appveyor). Still, the amount of\nhacks in psutil source code necessary to support Python 2.7 piled up over the\nyears, and became quite big. Some disadvantages that come to mind:</p><ul><li>Having to maintain a Python compatibility layers like\n  <a href=\"https://github.com/giampaolo/psutil/blob/fbb6d9ce98f930d3d101b7df5a4f4d0f1d2b35a3/psutil/_compat.py\">psutil/_compat.py</a>.\n  This translated in extra extra code and extra imports.</li><li>The C compatibility layer to differentiate between Python 2 and 3 (<code>#if\n  PY_MAJOR_VERSION &lt;= 3</code>, etc.).</li><li>Dealing with the string vs. unicode differences, both in Python and in C.</li><li>Inability to use modern language features, especially f-strings.</li><li>Inability to freely use s, which created a difference on how CONSTANTS\n  were exposed in terms of API.</li><li>Having to install a specific version of  and other (outdated)\n  <a href=\"https://github.com/giampaolo/psutil/blob/fbb6d9ce98f930d3d101b7df5a4f4d0f1d2b35a3/setup.py#L76-L85\">deps</a>.</li><li>Relying on the third-party Appveyor CI service to run tests and produce 2.7\n  wheels.</li><li>Running 4 extra CI jobs on every commit (Linux, macOS, Windows 32-bit,\n  Windows 64-bit) making the CI slower and more subject to failures (we have\n  quite a bit of flaky tests).</li><li>The distribution of 7 wheels specific for Python 2.7. E.g. in the previous\n  release I had to upload:</li></ul><div><pre><code>psutil-6.1.1-cp27-cp27m-macosx_10_9_x86_64.whl\npsutil-6.1.1-cp27-none-win32.whl\npsutil-6.1.1-cp27-none-win_amd64.whl\npsutil-6.1.1-cp27-cp27m-manylinux2010_i686.whl\npsutil-6.1.1-cp27-cp27m-manylinux2010_x86_64.whl\npsutil-6.1.1-cp27-cp27mu-manylinux2010_i686.whl\npsutil-6.1.1-cp27-cp27mu-manylinux2010_x86_64.whl\n</code></pre></div><p>The removal was done in\n<a href=\"https://github.com/giampaolo/psutil/pull/2481\">PR-2841</a>, which removed around\n1500 lines of code (nice!). . In doing so, in the doc I\nstill made the promise that the 6.1.* serie will keep supporting Python 2.7\nand will receive  (no new features). It will be\nmaintained in a specific <a href=\"https://github.com/giampaolo/psutil/tree/python2\">python2\nbranch</a>. I explicitly kept\nthe\n<a href=\"https://github.com/giampaolo/psutil/blob/fbb6d9ce98f930d3d101b7df5a4f4d0f1d2b35a3/setup.py\">setup.py</a>\nscript compatible with Python 2.7 in terms of syntax, so that, when the tarball\nis fetched from PYPI, it will emit an informative error message on . The user trying to install psutil on Python 2.7 will see:</p><div><pre><code>$pip2installpsutil\nAsofversion.0.0psutilnolongersupportsPython.7.\nLatestversionsupportingPython.7ispsutil.1.X.\nInstallitwith:.\n</code></pre></div><p>As the informative message states, users that are still on Python 2.7 can still\nuse psutil with:</p><div><pre><code>pip2 install psutil==6.1.*\n</code></pre></div>","contentLength":2975,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Kay Hayen: Nuitka Release 2.6","url":"https://nuitka.net/posts/nuitka-release-26.html","date":1739401200,"author":"","guid":149,"unread":true,"content":"<li><p> Path normalization to native Windows format was required\nin more places for the  variant of .</p><p>The  function doesn’t normalize to native Win32\npaths with MSYS2, instead using forward slashes. This required manual\nnormalization in additional areas. (Fixed in 2.5.1)</p></li><li><p> Fix, give a proper error when extension modules asked to\ninclude failed to be located. instead of a proper error message.\n(Fixed in 2.5.1)</p></li><li><p>Fix, files with illegal module names (containing ) in their\nbasename were incorrectly considered as potential sub-modules for\n. These are now skipped. (Fixed in 2.5.1)</p></li><li><p> Improved stability by preventing crashes when stubgen\nencounters code it cannot handle. Exceptions from it are now ignored.\n(Fixed in 2.5.1)</p></li><li><p> Addressed a crash that occurred when encountering\nassignments to non-variables. (Fixed in 2.5.1)</p></li><li><p> Fixed a regression introduced in 2.5 release that could\nlead to segmentation faults in exception handling for generators.\n(Fixed in 2.5.2)</p></li><li><p> Corrected an issue where dictionary copies of large\nsplit directories could become corrupted. This primarily affected\ninstance dictionaries, which are created as copies until updated,\npotentially causing problems when adding new keys. (Fixed in 2.5.2)</p></li><li><p> Removed the assumption that module dictionaries\nalways contain only strings as keys. Some modules, like\n on macOS, use non-string keys. (Fixed in 2.5.2)</p></li><li><p> Ensured that the  option correctly\naffects the C compilation process. Previously, only individual\ndisables were applied. (Fixed in 2.5.2)</p></li><li><p> Fixed a crash that could occur during compilation\nwhen unary operations were used within binary operations. (Fixed in\n2.5.3)</p></li><li><p> Corrected the handling of\n<code></code>, which could lead to crashes. (Fixed\nin 2.5.4)</p></li><li><p> Resolved a segmentation fault occurring at runtime\nwhen calling  with only keyword arguments.\n(Fixed in 2.5.5)</p></li><li><p> Harmless warnings generated for x64 DLLs on arm64 with\nnewer macOS versions are now ignored. (Fixed in 2.5.5)</p></li><li><p> Addressed a crash in Nuitka’s dictionary code that\noccurred when copying dictionaries due to internal changes in Python\n3.13. (Fixed in 2.5.6)</p></li><li><p> Improved onefile mode signing by applying\n to the signature of binaries, not just\napp bundles. (Fixed in 2.5.6)</p></li><li><p> Corrected an issue where too many paths were added as\nextra directories from the Nuitka package configuration. This\nprimarily affected the  package, which currently relies\non the  import hack. (Fixed in 2.5.6)</p></li><li><p> Prevented crashes on macOS when creating onefile\nbundles with Python 2 by handling negative CRC32 values. This issue\nmay have affected other versions as well. (Fixed in 2.5.6)</p></li><li><p> Restored the functionality of code provided in\n, which was no longer being applied due to a\nregression. (Fixed in 2.5.6)</p></li><li><p> Suppressed the app bundle mode recommendation when it is\nalready in use. (Fixed in 2.5.6)</p></li><li><p> Corrected path normalization when the output directory\nargument includes “~”.</p></li><li><p> GitHub Actions Python is now correctly identified as a\nHomebrew Python to ensure proper DLL resolution. (Fixed in 2.5.7)</p></li><li><p> Fixed a reference leak that could occur with\nvalues sent to generator objects. Asyncgen and coroutines were not\naffected. (Fixed in 2.5.7)</p></li><li><p> The  scan now correctly handles\ncases where both a package init file and competing Python files\nexist, preventing compile-time conflicts. (Fixed in 2.5.7)</p></li><li><p> Resolved an issue where handling string constants in\nmodules created for Python 3.12 could trigger assertions, and modules\ncreated with 3.12.7 or newer failed to load on older Python 3.12\nversions when compiled with Nuitka 2.5.5-2.5.6. (Fixed in 2.5.7)</p></li><li><p> Corrected the tuple code used when calling certain\nmethod descriptors. This issue primarily affected a Python 2\nassertion, which was not impacted in practice. (Fixed in 2.5.7)</p></li><li><p> Updated resource readers to accept multiple\narguments for <code></code>, and correctly handle\n and  as keyword-only arguments.</p></li><li><p> The platform encoding is no longer used to decode\n logs. Instead,  is used, as it is sufficient for\nmatching filenames across log lines and avoids potential encoding\nerrors. (Fixed in 2.5.7)</p></li><li><p> Requests to statically link libraries for \nare now ignored, as these libraries do not exist. (Fixed in 2.5.7)</p></li><li><p> Fixed a memory leak affecting the results of\nfunctions called via specs. This primarily impacted overloaded hard\nimport operations. (Fixed in 2.5.7)</p></li><li><p> When multiple distributions for a package are found,\nthe one with the most accurate file matching is now selected. This\nimproves handling of cases where an older version of a package (e.g.,\n) is overwritten with a different variant (e.g.,\n), ensuring the correct version is used for\nNuitka package configuration and reporting. (Fixed in 2.5.8)</p></li><li><p> Prevented a potential crash during onefile\ninitialization on Python 2 by passing the directory name directly\nfrom the onefile bootstrap, avoiding the use of  which\nmay not be fully loaded at that point. (Fixed in 2.5.8)</p></li><li><p> Preserved necessary  environment variables on\nWindows for packages that require loading DLLs from those locations.\nOnly  entries not pointing inside the installation prefix are\nremoved. (Fixed in 2.5.8)</p></li><li><p> Corrected the  check to function\nproperly when distribution names and package names differ. (Fixed in\n2.5.8)</p></li><li><p> Improved package name resolution for Anaconda\ndistributions by checking conda metadata when file metadata is\nunavailable through the usual methods. (Fixed in 2.5.8)</p></li><li><p> Normalized the downloaded gcc path to use native Windows\nslashes, preventing potential compilation failures. (Fixed in 2.5.9)</p></li><li><p> Restored static libpython functionality on Linux by\nadapting to a signature change in an unexposed API. (Fixed in 2.5.9)</p></li><li><p> Prevented  from being resurrected when a\nfinalizer is attached, resolving memory leaks that could occur with\n in the presence of exceptions. (Fixed in 2.5.10)</p></li><li><p> Suppressed the gcc download prompt that could appear during\n output on Windows systems without MSVC or with an\nimproperly installed gcc.</p></li><li><p>Ensured compatibility with monkey patched  or \nfunctions, which are used in some testing scenarios.</p></li><li><p> Improved the determinism of the JSON statistics\noutput by sorting keys, enabling reliable build comparisons.</p></li><li><p> Fixed a memory leak in  with finalizers,\nwhich could lead to significant memory consumption when using\n and encountering exceptions.</p></li><li><p> Optimized empty generators (an optimization result) to\navoid generating unused context code, eliminating C compilation\nwarnings.</p></li><li><p> Fixed a reference leak affecting the  value\nin . While typically , this could lead to\nobservable reference leaks in certain cases.</p></li><li><p> Improved handling of  and \nresurrection, preventing memory leaks with  and\n, and ensuring correct execution of  code in\ncoroutines.</p></li><li><p> Corrected the handling of  objects\nresurrecting during deallocation. While not explicitly demonstrated,\nthis addresses potential issues similar to those encountered with\ncoroutines, particularly for old-style coroutines created with the\n decorator.</p></li><li><p> Fixed a potential crash during runtime trace collection by\nensuring timely initialization of the output mechanism.</p></li>","contentLength":6936,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"EuroPython Society: Board Report for January 2025","url":"https://www.europython-society.org/board-report-for-january-2025/","date":1739372917,"author":"","guid":147,"unread":true,"content":"<p>The top priority for the board in January was finishing the hiring of our event manager. We’re super excited to introduce Anežka Müller! Anežka is a freelance event manager and a longtime member of the Czech Python community. She’s a member of the Pyvec board, co-organizes PyLadies courses, PyCon CZ, Brno Pyvo, and Brno Python Pizza. She’ll be working closely with the board and OPS team, mainly managing communication with service providers. Welcome onboard! </p><p>Our second priority was onboarding teams. We’re happy that we already have the Programme team in place—they started early and launched the Call for Proposals at the beginning of January. We’ve onboarded a few more teams and are in the process of bringing in the rest.</p><p>Our third priority was improving our grant programme in order to support more events with our limited budget and to make it more clear and transparent. We went through past data, came up with a new proposal, discussed it, voted on it, and have already published it on our <a href=\"https://www.europython-society.org/changes-in-the-grants-programme-for-2025/\">blog</a>. </p><ul><li>Updating onboarding/offboarding checklists for Volunteers and Board Members</li><li>Various infrastructure updates including new website deployment and self-hosted previews for Pull Requests to the website.</li><li>Setting up EPS AWS account.</li><li>Working out the Grant Guidelines update for 2025</li><li>Attending PyConWeb and FOSDEM</li><li>Reviewing updates to the Sponsors setup and packages for 2025</li><li>More documentation, sharing know-how and reviewing new proposals.</li></ul><ul><li>Brand strategy: Analysis of social media posts from previous years and web analytics. Call with a European open-source maintainer and a call with a local events organizer about EP content.</li><li>Comms &amp; design: Call for proposal announcements, EP 2024 video promotions, speaker mentorship, and newsletter. Video production - gathering videos from speakers, video post-production, and scheduling them on YouTube shorts, and social media.</li><li>Event management coordination: Calls with the event manager and discussions about previous events.</li><li>Grants: Work on new grant guidelines and related comms.</li><li>Team onboarding: Calls with potential comms team members and coordination.</li><li>PR: Delivering a lightning talk at FOSDEM.</li></ul><ul><li>Offboarding the old board</li><li>Onboarding new team members</li><li>Administrative work on Grants</li></ul><ul><li>Worked on the Grants proposal</li><li>Follow-up with team members</li><li>Community outreach: FOSDEM</li></ul><ul><li>Working on various infrastructure updates, mostly related to the website.</li><li>Reviewing Pull Requests for the website and the internal bot</li><li>Working on the infrastructure team proposal.</li></ul><ul><li>Timeline: Discussion with the Programme Team, and planning to do the same with the other teams.</li><li>Visa Request letter: Setup and Test Visa Request Automation for the current year</li><li>Team selection discussion with past volunteers</li></ul>","contentLength":2708,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Morsels: Avoid over-commenting in Python","url":"https://www.pythonmorsels.com/avoid-comments/","date":1739372739,"author":"","guid":146,"unread":true,"content":"<h2>Documenting instead of commenting</h2><p>Here is a comment I would not write in my code:</p><div><pre><code></code></pre></div><p>That comment seems to describe what this code does... so why would I  write it?</p><p>I do like that comment, but I would prefer to write it as a <a href=\"https://www.pythonmorsels.com/docstrings/\" target=\"_blank\">docstring</a> instead:</p><div><pre><code></code></pre></div><p>Documentation strings are for conveying the purpose of function, class, or module, typically at a high level.\nUnlike comments, they can be read by Python's built-in  function:</p><div><pre><code></code></pre></div><p>Docstrings are also read by other documentation-oriented tools, like <a href=\"https://www.sphinx-doc.org\" target=\"_blank\">Sphinx</a>.</p><h2>Non-obvious variables and values</h2><p>Here's a potentially helpful comment:</p>","contentLength":557,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: Python Keywords: An Introduction","url":"https://realpython.com/python-keywords/","date":1739368800,"author":"","guid":98,"unread":true,"content":"<p>Python keywords are reserved words with specific functions and restrictions in the language. Currently, Python has thirty-five keywords and four soft keywords. These keywords are always available in Python, which means you don’t need to import them. Understanding how to use them correctly is fundamental for building Python programs.</p><p><strong>By the end of this tutorial, you’ll understand that:</strong></p><ul><li>There are  and  in Python.</li><li>You can get a list of all keywords using  from the  module.</li><li> in Python act as keywords only in specific contexts.</li><li> are keywords that have been deprecated and turned into functions in Python 3.</li></ul><p>In this article, you’ll find a basic introduction to all Python keywords and soft keywords along with other resources that will be helpful for learning more about each keyword.</p><div><p> Test your knowledge with our interactive “Python Keywords: An Introduction” quiz. You’ll receive a score upon completion to help you track your learning progress:</p><div><div><a href=\"https://realpython.com/quizzes/python-keywords/\"></a><p>In this quiz, you'll test your understanding of Python keywords and soft keywords. These reserved words have specific functions and restrictions in Python, and understanding how to use them correctly is fundamental for building Python programs.</p></div></div></div><p>Python keywords are special reserved words that have specific meanings and purposes and can’t be used for anything but those specific purposes. These keywords are always available—you’ll never have to import them into your code.</p><p>Python keywords are different from Python’s <a href=\"https://docs.python.org/3/library/functions.html\">built-in functions and types</a>. The built-in functions and types are also always available, but they aren’t as restrictive as the keywords in their usage. </p><p>An example of something you  do with Python keywords is assign something to them. If you try, then you’ll get a . You won’t get a  if you try to assign something to a built-in function or type, but it still isn’t a good idea. For a more in-depth explanation of ways keywords can be misused, check out <a href=\"https://realpython.com/invalid-syntax-python/#misspelling-missing-or-misusing-python-keywords\">Invalid Syntax in Python: Common Reasons for SyntaxError</a>.</p><p>There are <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#keywords\">thirty-five keywords</a> in Python. Here’s a list of them, each linked to its relevant section in this tutorial:</p><p>Two keywords have additional uses beyond their initial use cases. The  keyword is also <a href=\"https://realpython.com/atom.xml#the-else-keyword-used-with-loops\">used with loops</a> and <a href=\"https://realpython.com/atom.xml#the-else-keyword-used-with-try-and-except\">with  and </a> in addition to in conditional statements. The  keyword is most commonly used in  statements, but also used <a href=\"https://realpython.com/atom.xml#the-as-keyword-used-with-with\">with the  keyword</a>.</p><p>The list of Python keywords and soft keywords has changed over time. For example, the  and  keywords weren’t added until Python 3.7. Also, both  and  were keywords in Python 2.7 but were turned into built-in functions in Python 3 and no longer appear in the keywords list.</p><p>As mentioned above, you’ll get an error if you try to assign something to a Python keyword. Soft keywords, on the other hand, aren’t that strict. They syntactically act as keywords only in certain conditions.</p><p>This new capability was made possible thanks to the introduction of the <a href=\"https://realpython.com/python39-new-features/#a-more-powerful-python-parser\">PEG parser</a> in Python 3.9, which changed how the interpreter reads the source code.</p><p>Leveraging the PEG parser allowed for the introduction of <a href=\"https://realpython.com/structural-pattern-matching/\">structural pattern matching</a> in Python. In order to use intuitive syntax, the authors picked , , and  for the pattern matching statements. Notably,  and  are widely used for this purpose in many other programming languages.</p><p>To prevent conflicts with existing Python code that already used , , and  as variable or function names, Python developers decided to introduce the concept of soft keywords.</p><p>Currently, there are four  in Python:</p><p>You can use the links above to jump to the soft keywords you’d like to read about, or you can continue reading for a guided tour.</p><h2>Value Keywords: , , </h2><p>There are three Python keywords that are used as values. These values are <a href=\"https://python-patterns.guide/gang-of-four/singleton/\">singleton</a> values that can be used over and over again and always reference the exact same object. You’ll most likely see and use these values a lot.</p><p>There are a few terms used in the sections below that may be new to you. They’re defined here, and you should be aware of their meaning before proceeding:</p>","contentLength":4020,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"EuroPython Society: Changes in the Grants Programme for 2025","url":"https://www.europython-society.org/changes-in-the-grants-programme-for-2025/","date":1739366190,"author":"","guid":145,"unread":true,"content":"<ul><li>We are increasing transparency and reducing ambiguity in the guidelines.</li><li>We would like to support more events with our limited budget</li><li>We’ve introduced caps for events in order to make sure all grants are fairly given and we can support more communities.</li><li>We’ve set aside 10% of our budget for the local community. </li></ul><p>The EPS introduced a Grant Programme in 2017. Since then, we have granted almost EUR 350k through the programme, partly via EuroPython Finaid and by directly supporting other Python events and projects across Europe. In the last two years, the Grant Programme has grown to EUR 100k per year, with even more requests coming in.</p><p>With this growth come new challenges in how to distribute funds fairly so that more events can benefit. Looking at data from the past two years, we’ve often been close to or over our budget. The guidelines haven’t been updated in a while. As grant requests become more complex, we’d like to simplify and clarify the process, and better explain it on our website.</p><p>We would also like to acknowledge that EuroPython, when traveling around Europe, has an additional impact on the host country, and we’d like to set aside part of the budget for the local community.</p><p>The Grant Programme is also a primary funding source for EuroPython Finaid. To that end, we aim to allocate 30% of the total Grant Programme budget to Finaid, an increase from the previous 25%.</p><ul><li>We’ve updated the <a href=\"https://www.europython-society.org/grants\">text on our website</a>, and split it into multiple sub-pages to make it easier to navigate. The website now includes a checklist of what we would like to see in a grant application, and a checklist for the Grants Workgroup – so that when you apply for the Grant you already know the steps that it will go through later and when you can expect an answer from us.</li><li>We looked at the data from previous years, and size and timing of the grant requests. With the growing number and size of the grants, to make it more accessible to smaller conferences and conferences happening later in the year, we decided to introduce max caps per grant and split the budget equally between the first and second half of the year. We would also explicitly split the total budget into three categories – 30% goes to the EuroPython finaid, 10% is reserved for projects in the host country. The remaining 60% of the budget goes to fund other Python Conferences. This is similar to the split in previous years, but more explicit and transparent.</li></ul><p>Using 2024 data, and the budget available for Community Grants (60% of total), we’ve simulated different budget caps and found a sweet spot at 6000EUR, where we are able to support all the requests with most of the grants being below that limit. For 2025 we expect to receive a similar or bigger number of requests.</p><table><tbody><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table><img src=\"https://www.europython-society.org/content/images/2025/02/image-1.png\" alt=\"alt\" width=\"1418\" height=\"496\"><p>We are introducing a special 10% pool of money to be used on projects in the host country (in 2025 that’s again Czech Republic). This pool is set aside at the beginning of the year, with one caveat that we would like to deploy it in the first half of the year. Whatever is left unused goes back to the Community Pool to be used in second half of the year.</p><ul><li>Fairer Funding: By spreading our grants out during the year, conferences that happen later won’t miss out.</li><li>Easy to Follow: Clear rules and deadlines cut down on confusion about how much you can get and what it’s for.</li><li>Better Accountability: We ask for simple post-event reports so we can see where the money went and what impact it made.</li><li>Stronger Community: Funding more events grows our Python network across Europe, helping everyone learn, connect, and collaborate.</li></ul>","contentLength":3581,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Delivering Malware Through Abandoned Amazon S3 Buckets","url":"https://www.schneier.com/blog/archives/2025/02/delivering-malware-through-abandoned-amazon-s3-buckets.html","date":1739362164,"author":"Bruce Schneier","guid":162,"unread":true,"content":"<p>Here’s a <a href=\"https://labs.watchtowr.com/8-million-requests-later-we-made-the-solarwinds-supply-chain-attack-look-amateur/\">supply-chain attack</a> just waiting to happen. A group of researchers searched for, and then registered, abandoned Amazon S3 buckets for about $400. These buckets contained software libraries that are still used. Presumably the projects don’t realize that they have been abandoned, and still ping them for patches, updates, and etc.</p><blockquote><p>The TL;DR is that this time, we ended up discovering ~150 Amazon S3 buckets that had previously been used across commercial and open source software products, governments, and infrastructure deployment/update pipelines—and then abandoned.</p><p>Naturally, we registered them, just to see what would happen—”how many people are really trying to request software updates from S3 buckets that appear to have been abandoned months or even years ago?”, we naively thought to ourselves.</p></blockquote><p>Turns out they got eight million requests over two months.</p><p>Had this been an actual attack, they would have modified the code in those buckets to contain malware and watch as it was incorporated in different software builds around the internet. This is basically the SolarWinds attack, but much more extensive.</p><p>But there’s a second dimension to this attack. Because these update buckets are abandoned, the developers who are using them also no longer have the power to patch them automatically to protect them. The mechanism they would use to do so is now in the hands of adversaries. Moreover, often—but not always—losing the bucket that they’d use for it also removes the original vendor’s ability to identify the vulnerable software in the first place. That hampers their ability to communicate with vulnerable installations.</p><p>Software supply-chain security is an absolute mess. And it’s not going to be easy, or cheap, to fix. Which means that it won’t be. Which is an even worse mess.</p>","contentLength":1821,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: Quiz: Python Keywords: An Introduction","url":"https://realpython.com/quizzes/python-keywords/","date":1739361600,"author":"","guid":97,"unread":true,"content":"<p>Python keywords are reserved words with specific functions and restrictions in the language. These keywords are always available in Python, which means you don’t need to import them. Understanding how to use them correctly is fundamental for building Python programs.</p>","contentLength":269,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Zato Blog: Modern REST API Tutorial in Python","url":"https://zato.io/en/blog/modern-rest-api-tutorial-in-python.html","date":1739347200,"author":"","guid":144,"unread":true,"content":"<div>\n  2025-02-12, by Dariusz Suchojad\n<img src=\"https://upcdn.io/kW15bqq/raw/root/static/blog/authors/dsuch.webp\" alt=\"\" width=\"35\"></div><p>Great APIs don't win theoretical arguments - they just prefer to work reliably and to make developers' lives easier.</p><p>Here's a tutorial on what building production APIs is really about: creating interfaces that are practical in usage,\nwhile keeping your systems maintainable for years to come.</p>","contentLength":326,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Kushal Das: pass using stateless OpenPGP command line interface","url":"https://kushaldas.in/posts/pass-using-stateless-openpgp-command-line-interface.html","date":1739337973,"author":"","guid":143,"unread":true,"content":"<p><a href=\"https://kushaldas.in/posts/using-openpgp-card-tool-git-with-git.html\">Yesterday</a> I wrote about how\nI am using a different tool for  signing and verification. Next, I\nreplaced my  usage. I have a <a href=\"https://kushaldas.in/github.com/kushaldas/password-store/compare/master...card\">small\npatch</a> to use\nstateless OpenPGP command line interface (SOP). It is an implementation\nagonostic standard for handling OpenPGP messages. You can read the whole <a href=\"https://datatracker.ietf.org/doc/draft-dkg-openpgp-stateless-cli/\">SPEC\nhere</a>.</p><pre><code>cargo install rsop rsop-oct\n</code></pre><p>And copied the bash script from my repository to the path somewhere.</p><p>The  binary from  follows the same SOP standard but uses the\ncard to signing/decryption. I stored my public key in\n<code>~/.password-store/.gpg-key</code> file, which is in turn used for encryption.</p><p>Here nothing changed related my daily  usage, except the number of time I am typing my  :)</p>","contentLength":669,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Risky Business #779 -- DOGE staffer linked to The Com","url":"https://risky.biz/RB779/","date":1739330328,"author":"","guid":458,"unread":true,"content":"<article></article>","contentLength":0,"flags":null,"enclosureUrl":"https://dts.podtrac.com/redirect.mp3/media3.risky.biz/RB779.mp3","enclosureMime":"","commentsUrl":null},{"title":"GenAI Patterns: Query Rewriting","url":"https://martinfowler.com/articles/gen-ai-patterns/#query-rewrite","date":1739307480,"author":"Martin Fowler","guid":206,"unread":true,"content":"<p>Users often have difficulty writing the most effective queries.\n       and I explain <a href=\"https://martinfowler.com/articles/gen-ai-patterns/#query-rewrite\">Query Rewriting</a>:\n      getting an LLM to formulate alternative queries to send to a RAG's\n      retriever. </p>","contentLength":192,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PyCoder’s Weekly: Issue #668: NumPy, Compiling Python 1.0, BytesIO, and More (Feb. 11, 2025)","url":"https://pycoders.com/issues/668","date":1739302200,"author":"","guid":142,"unread":true,"content":"<div><p> In this video course, you’ll learn how to use NumPy by exploring several interesting examples. You’ll read data from a file into an array and analyze structured arrays to perform a reconciliation. You’ll also learn how to quickly chart an analysis &amp; turn a custom function into a vectorized function.</p></div><div><p> This tutorial will help you master Python string splitting. You’ll learn to use , , and  to effectively handle whitespace, custom delimiters, and multiline text, which will level up your data parsing skills.</p></div><div><p> Python developers use Posit Package Manager to mirror public &amp; internally developed repos within their firewalls. Get reporting on known vulnerabilities to proactively address potential threats. High-security environments can even run air-gapped.</p></div><div><p> The author was recently invited with other senior devs to give a lightning talk on their personal development philosophy. This post captures those thoughts.</p></div><img src=\"https://pycoders.com/issues/668/open/feed\" width=\"1\" height=\"1\" alt=\"alt\"><p><em>[ Subscribe to 🐍 PyCoder’s Weekly 💌 – Get the best Python news, articles, and tutorials delivered to your inbox once a week <a href=\"https://pycoders.com/?utm_source=pycoders&amp;utm_medium=feed&amp;utm_campaign=footer\">&gt;&gt; Click here to learn more</a> ]</em></p>","contentLength":1084,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Insider: Python 3.14.0 alpha 5 is out","url":"https://pythoninsider.blogspot.com/2025/02/python-3140-alpha-5-is-out.html","date":1739291158,"author":"","guid":141,"unread":true,"content":"<p>Here comes the antepenultimate alpha.</p><p><strong>This is an early developer preview of Python\n3.14</strong></p><p>Python 3.14 is still in development. This release, 3.14.0a5, is the\nfifth of seven planned alpha releases.</p><p>Alpha releases are intended to make it easier to test the current\nstate of new features and bug fixes and to test the release process.</p><p>During the alpha phase, features may be added up until the start of\nthe beta phase (2025-05-06) and, if necessary, may be modified or\ndeleted up until the release candidate phase (2025-07-22). Please keep\nin mind that this is a preview release and its use is\n recommended for production environments.</p><p>Many new features for Python 3.14 are still being planned and\nwritten. Among the new major new features and changes so far:</p><p>The next pre-release of Python 3.14 will be the penultimate alpha,\n3.14.0a6, currently scheduled for 2025-03-14.</p><p>2025-01-29 marked the start of a new lunar year, the Year of the\nSnake 🐍 (and the Year of Python?).</p><p>For centuries, π was often approximated as 3 in China. Some time\nbetween the years 1 and 5 CE, astronomer, librarian, mathematician and\npolitician Liu Xin (劉歆) calculated π as 3.154.</p><p>Around 130 CE, mathematician, astronomer, and geographer Zhang Heng\n(張衡, 78–139) compared the celestial circle with the diameter of the\nearth as 736:232 to get 3.1724. He also came up with a formula for the\nratio between a cube and inscribed sphere as 8:5, implying the ratio of\na square’s area to an inscribed circle is √8:√5. From this, he\ncalculated π as √10 (~3.162).</p><p>Third century mathematician Liu Hui (刘徽) came up with an algorithm\nfor calculating π iteratively: calculate the area of a polygon inscribed\nin a circle, then as the number of sides of the polygon is increased,\nthe area becomes closer to that of the circle, from which you can\napproximate π.</p><p>This algorithm is similar to the method used by Archimedes in the 3rd\ncentury BCE and Ludolph van Ceulen in the 16th century CE (see <a href=\"https://blog.python.org/2024/11/python-3140-alpha-2-released.html\">3.14.0a2\n  release notes</a>), but Archimedes only went up to a 96-sided polygon\n(96-gon). Liu Hui went up to a 192-gon to approximate π as 157/50 (3.14)\nand later a 3072-gon for 3.14159.</p><p>Liu Hu wrote a commentary on the book The Nine Chapters on the\nMathematical Art which included his π approximations.</p><p>In the fifth century, astronomer, inventor, mathematician,\npolitician, and writer Zu Chongzhi (祖沖之, 429–500) used Liu Hui’s\nalgorithm to inscribe a 12,288-gon to compute π between 3.1415926 and\n3.1415927, correct to seven decimal places. This was more accurate than\nHellenistic calculations and wouldn’t be improved upon for 900\nyears.</p><p>Thanks to all of the many volunteers who help make Python Development\nand these releases possible! Please consider supporting our efforts by\nvolunteering yourself or through organisation contributions to the <a href=\"https://www.python.org/psf-landing/\">Python Software\nFoundation</a>.</p><p>Regards from a remarkably snowless Helsinki,</p><p>Your release team, Hugo van KemenadeSteve Dower</p>","contentLength":2941,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: Building a Python Command-Line To-Do App With Typer","url":"https://realpython.com/courses/build-command-line-todo-app-typer/","date":1739282400,"author":"","guid":96,"unread":true,"content":"<p>Building an application to manage your  can be an interesting project when you’re learning a new programming language or trying to take your skills to the next level. In this video course, you’ll build a functional to-do application for the command line using Python and <a href=\"https://typer.tiangolo.com/\">Typer</a>, which is a relatively young library for creating powerful command-line interface (CLI) applications in almost no time.</p><p>With a project like this, you’ll apply a wide set of core programming skills while building a real-world application with real features and requirements.</p><p><strong>In this video course, you’ll learn how to:</strong></p><ul><li>Build a functional  with a  in Python</li><li>Use Typer to add , , and  to your to-do app</li><li>Test your Python to-do application with Typer’s  and </li></ul>","contentLength":734,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Trusted Execution Environments","url":"https://www.schneier.com/blog/archives/2025/02/trusted-encryption-environments.html","date":1739275716,"author":"Bruce Schneier","guid":161,"unread":true,"content":"<p>Really good—and detailed—<a href=\"https://dl.acm.org/doi/pdf/10.1145/3634737.3644993\">survey</a> of Trusted Execution Environments (TEEs.)</p>","contentLength":77,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Kushal Das: Using openpgp-card-tool-git with git","url":"https://kushaldas.in/posts/using-openpgp-card-tool-git-with-git.html","date":1739272360,"author":"","guid":140,"unread":true,"content":"<p>One of the power of Unix systems comes from the various small tools and how\nthey work together. One such new tool I am using for some time is for  &amp;  using OpenPGP and my Yubikey for the actual signing\noperation via\n<a href=\"https://crates.io/crates/openpgp-card-tool-git\">openpgp-card-tool-git</a>. I\nreplaced the standard  for this usecase with the  command from this\nproject.</p><h3>Installation &amp; configuration</h3><pre><code>cargo install openpgp-card-tool-git\n</code></pre><p>Then you will have to configuration your (in my case the global configuration) git configuration.</p><pre><code>git config --global gpg.program &lt;path to oct-git&gt;\n</code></pre><p>I am assuming that you already had it configured before for signing, otherwise\nyou have to run the following two commands too.</p><pre><code>git config --global commit.gpgsign true\ngit config --global tag.gpgsign true\n</code></pre><p>Before you start using it, you want to save the pin in your system keyring.</p><p>Use the following command.</p><p>That is it, now your  will sign the commits using  tool.</p><p>In the next blog post I will show how to use the other tools from the \n<a href=\"https://crates.io/users/hko-s\">author</a> for various different OpenPGP oeprations.</p>","contentLength":1007,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Stateful vs. Stateless Architecture","url":"https://blog.algomaster.io/p/stateful-vs-stateless-architecture","date":1739263586,"author":"Ashish Pratap Singh","guid":433,"unread":true,"content":"<p>When a client interacts with a server, there are two ways to handle it:</p><ul><li><p> The client includes all necessary data in each request, so the server doesn’t store any prior information.</p></li><li><p> The server retains some data from previous requests, making future interactions dependent on past state.</p></li></ul><blockquote><p>In software systems,  refers to any data that persists across requests, such as user sessions, shopping carts, or authentication details.</p></blockquote><p>The choice between stateless and stateful architecture can affect scalability, performance, complexity, and cost.</p><p>In this article, we’ll break down both the approaches, their advantages and trade-offs, and when to use each—with real-world examples.</p><p>If you’re finding this newsletter valuable and want to deepen your learning, consider becoming a .</p><p>As a paid subscriber, you'll receive an <strong>exclusive deep-dive article</strong> every week, access to a structured100+topics and interview questions, and other .</p><p>In a , the system remembers client or process data () across multiple requests.</p><p>Once a client connects, the server holds on to certain details—like user preferences, shopping cart contents, or authentication sessions—so the client doesn’t need to resend everything with each request.</p><p>Stateful systems typically store the state data in a database or in-memory storage.</p><blockquote><p> During online shopping, when you add items to your cart, the website remembers your selections. If you navigate away to browse more items and then return to your cart, your items are still there, waiting for you to check out.</p></blockquote><h2>Common Patterns in Stateful Architecture</h2><p>If you use  session storage (i.e., each app server keeps its own sessions locally), you can configure your load balancer for “sticky sessions.” </p><p>This means: Once a client is assigned to , all subsequent requests from that client are routed to .</p><blockquote><p>: If Server A fails, the user’s session data is lost or the user is forced to re-log in. Sticky sessions are also less flexible when scaling because you can’t seamlessly redistribute user traffic to other servers.</p></blockquote><h3>2. Centralized Session Store</h3><p>A more robust approach is to store session data in a  or  store (e.g., Redis). </p><ul><li><p>: All servers can access and update session data for any user. Any server can handle any request, because the session data is not tied to a specific server’s memory.</p></li></ul><blockquote><p>: You introduce network overhead and rely on an external storage. If the centralized storage fails, you lose session data unless you have a fallback strategy.</p></blockquote><ul><li><p><strong>Personalized Experiences:</strong> Stateful systems can deliver highly tailored interactions, as they remember user preferences and past actions.</p></li><li><p> Users can seamlessly resume activities where they left off, even if they disconnect and reconnect.</p></li><li><p> Certain operations can be faster because the server already possesses necessary data.</p></li></ul><ul><li><p> Maintaining state for a large number of users can become resource-intensive and complex, as each server needs to keep track of specific sessions.</p></li><li><p> Managing and synchronizing state across multiple servers (if needed) introduces additional challenges.</p></li><li><p> If a server holding a user's state fails, their session data might be lost.</p></li></ul><ul><li><p><strong>E-commerce Shopping Carts</strong> – Stores cart contents and user preferences across multiple interactions, even if the user navigates away and returns.</p></li><li><p><strong>Video Streaming Services (Netflix, YouTube)</strong> – Remembers user watch progress, recommendations, and session data for a seamless experience.</p></li><li><p><strong>Messaging Apps (WhatsApp, Slack)</strong> – Maintains active user sessions and message history for real-time communication.</p></li></ul><p>In a  architecture, the server does  preserve client-specific data between individual requests.</p><ul><li><p>Each request is treated as , with no memory of previous interactions.</p></li><li><p>Every request must include <strong>all necessary information</strong> for processing.</p></li><li><p>Once the server responds, it <strong>discards any temporary data</strong> used for that request.</p></li></ul><blockquote><p>: Most  follow a stateless design. For instance, when you request weather data from a public API, you must provide all required details (e.g., location) in each request. The server processes it, sends a response, and forgets the interaction.</p></blockquote><h2>Common Patterns in Stateless Architecture</h2><h3>1. Token-Based Authentication (JWT)</h3><p>A very popular way to implement statelessness is through tokens, particularly  (JSON Web Tokens):</p><ol><li><p><strong>Client Authenticates Once</strong>: The user logs in using credentials (username/password) for the first time, and the server issues a signed .</p></li><li><p>: The client includes JWT token in each request (e.g., <code>Authorization: Bearer &lt;token&gt;</code> header).</p></li><li><p>: The server validates the token’s signature and any embedded claims (e.g., user ID, expiry time).</p></li><li><p>: The server does  need to store session data; it just verifies the token on each request.</p></li></ol><blockquote><p>Many APIs, including OAuth-based authentication systems, use JWTs to enable stateless, scalable authentication.</p></blockquote><p>Stateless architectures benefit from , ensuring that repeated requests produce the same result. This prevents inconsistencies due to network retries or client errors.</p><p> A  request with the same payload  updates the user’s data but doesn’t create duplicates.</p><blockquote><p>Idempotent APIsensures consistency and reliability, especially in distributed systems where requests might be retried automatically.</p></blockquote><ul><li><p> Stateless systems are inherently easier to scale horizontally. New servers can be added effortlessly, as they don't need to maintain any specific user sessions.</p></li><li><p> Since servers don't track state, the architecture is generally simpler and easier to manage.</p></li><li><p> The failure of a single server won't disrupt user sessions, as data isn't tied to specific servers.</p></li><li><p>With no session data stored on the server, you free up memory that would otherwise be reserved for session management.</p></li><li><p><strong>Easier to Cache Responses: </strong>Since requests are self-contained, caching layers (like CDNs) can more easily store and serve responses.</p></li></ul><ul><li><p> Stateless systems can't provide the same level of personalization or context awareness as stateful systems without additional effort (like using cookies or tokens).</p></li><li><p>The client must keep track of the authentication token or relevant data. If it loses the token, it must re-authenticate.</p></li><li><p> Every request needs to carry all the required information, potentially leading to larger payloads.</p></li></ul><ol><li><p><strong>Microservices Architecture: </strong>Each service handles requests independently, relying on external databases or caches instead of maintaining session data.</p></li><li><p><strong>Public APIs (REST, GraphQL): </strong>Clients send tokens with each request, eliminating the need for server-side sessions.</p></li><li><p>Tokens are securely stored on the device and sent with every request to authenticate users.</p></li><li><p>Stateless endpoints make caching easier since responses depend only on request parameters, not stored session data. A CDNcan cache and serve repeated requests, improving performance and reducing backend load.</p></li></ol><p>There's no one-size-fits-all answer when choosing between stateful and stateless architectures.</p><p>The best choice depends on your application’s needs, scalability goals, and user experience expectations.</p><h3><strong>When to Choose Stateful Architecture</strong></h3><p>Stateful systems are ideal when <strong>user context and continuity</strong> are critical. </p><p>Consider a stateful approach if your application:</p><ul><li><p>Requires personalization (e.g., user preferences, session history)</p></li><li><p>Needs real-time interactions (e.g., chat applications, multiplayer gaming)</p></li><li><p>Manages multi-step workflows (e.g., online banking transactions, checkout processes)</p></li><li><p>Must retain authentication sessions for security and convenience</p></li></ul><blockquote><p> A shopping cart in an e-commerce app should persist, so users don’t have to re-add items after refreshing the page.</p></blockquote><h3><strong>When to Choose Stateless Architecture</strong></h3><p>Stateless systems work best when <strong>scalability, simplicity, and resilience</strong> are top priorities. </p><p>Use a stateless approach if your application:</p><ul><li><p>Handles a high volume of requests and needs to scale efficiently</p></li><li><p>Doesn’t require storing client-specific data between requests</p></li><li><p>Needs fast, distributed processing without server dependencies</p></li><li><p>Must ensure reliability and failover readiness</p></li></ul><blockquote><p> A weather API doesn’t need to remember previous requests. Each query includes the location, and the response is processed independently.</p></blockquote><h3><strong>Hybrid Approaches: The Best of Both Worlds</strong></h3><p>Many modern applications  stateful and stateless components for flexibility.</p><p>This hybrid approach allows:</p><ul><li><p>Stateless APIs for core functionality, ensuring high scalability</p></li><li><p>Stateful sessions for personalization, improving user experience</p></li><li><p>External session stores (e.g., Redis) to manage state while keeping app servers stateless</p></li></ul><blockquote><p> A video streaming platform (e.g., Netflix) uses a stateless backend for streaming but retains stateful user sessions to track watch history and recommendations.</p></blockquote><p>If you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.</p><p>If you have any questions or suggestions, leave a comment.</p><div data-attrs=\"{&quot;url&quot;:&quot;https://blog.algomaster.io/p/how-i-mastered-data-structures-and-algorithms?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjo4MzYwMjc0MywicG9zdF9pZCI6MTQ1NjU1MjUyLCJpYXQiOjE3MjE1MjE3MzEsImV4cCI6MTcyNDExMzczMSwiaXNzIjoicHViLTIyMDIyNjgiLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.2cNY811YEugd5iH9XJQhakBzyahGqF7PcATBlFj5J2w&quot;,&quot;text&quot;:&quot;Share&quot;}\" data-component-name=\"CaptionedButtonToDOM\"><div><p>This post is public so feel free to share it.</p></div></div><p> If you’re enjoying this newsletter and want to get even more value, consider becoming a .</p><p>I hope you have a lovely day!</p>","contentLength":8861,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/7e4801c3-e3aa-4ab6-8fe6-759af4a1f91a_1684x1196.png","enclosureMime":"","commentsUrl":null},{"title":"Django Weblog: DSF member of the month - Lily Foote","url":"https://www.djangoproject.com/weblog/2025/feb/10/dsf-member-of-the-month-lily-foote/","date":1739249491,"author":"","guid":139,"unread":true,"content":"<p>For February 2025, we welcome Lily Foote (<a href=\"https://fosstodon.org/@lilyf\">@lilyf</a>) as our DSF member of the month! ⭐</p><p>Lily Foote is a contributor to Django core for many years, especially on the ORM. She is currently a member of the Django 6.x <a href=\"https://docs.djangoproject.com/en/dev/internals/organization/#steering-council\">Steering Council</a> and she has been a DSF member since March 2021. \nYou can learn more about Lily by visiting <a href=\"https://github.com/LilyFoote\">her GitHub profile</a>.</p><p>Let’s spend some time getting to know Lily better!</p><h4>Can you tell us a little about yourself (hobbies, education, etc)</h4><p>My name is Lily Foote and I’ve been contributing to Django for most of my career. I’ve also recently got into Rust and I’m excited about using Rust in Python projects. When I’m not programming, I love hiking, climbing and dancing (Ceilidh)! I also really enjoying playing board games and role playing games (e.g. Dungeons and Dragons).</p><h4>How did you start using Django?</h4><p>I’d taught myself Python in my final year at university by doing <a href=\"https://projecteuler.net/\">Project Euler</a> problems and then decided I wanted to learn how to make a website. Django was the first Python web framework I looked at and it worked really well for me.</p><h4>What other framework do you know and if there is anything you would like to have in Django if you had magical powers?</h4><p>I’ve done a small amount with Flask and FastAPI. More than any new features, I think the thing that I’d most like to see is more long-term contributors to spread the work of keeping Django awesome.</p><h4>What projects are you working on now?</h4><p>The side project I’m most excited about is <a href=\"https://github.com/LilyFoote/django-rusty-templates\">Django Rusty Templates</a>, which is a re-implementation of Django’s templating language in Rust.</p><h4>Which Django libraries are your favorite (core or 3rd party)?</h4><h4>What are the top three things in Django that you like?</h4><p>Django Conferences, the mentorship program Djangonaut Space and the whole community!</p><h4>You have been a mentor multiple times with GSoC and Djangonaut Space program, what is required according to you to be a good mentor?</h4><p>I think being willing to invest time is really important. Checking in with your mentees frequently and being an early reviewer of their work. I think this helps keep their motivation up and allows for small corrections early on.</p><h4>Any advice for future contributors?</h4><p>Start small and as you get more familiar with Django and the process of contributing you can take on bigger issues. Also be patient with reviewers – Django has high standards, but is mostly maintained by volunteers with limited time.</p><p>Yes! It’s a huge honour! Since January, we’ve been meeting weekly and it feels like we’ve hardly scratched the surface of what we want to achieve. The biggest thing we’re trying to tackle is how to improve the contribution experience – especially evaluating new feature ideas – without draining everyone’s time and energy.</p><h4>You have a lot of knowledge in the Django ORM, how did you start to contribute to this part?</h4><p>I added the Greatest and Least expressions in Django 1.9, with the support of one of the core team at the time. After that, I kept showing up (especially at conference sprints) and finding a new thing to tackle.</p><h4>Is there anything else you’d like to say?</h4><p><strong>Thank you for doing the interview, Lily!</strong></p>","contentLength":3110,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Quansight Labs Blog: PEP 517 build system popularity","url":"https://labs.quansight.org/blog/pep-517-build-system-popularity","date":1739232000,"author":"","guid":137,"unread":true,"content":"<article>Analysis of PEP 517 build backends used in 8000 top PyPI packages</article>","contentLength":65,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Seth Michael Larson: Building software for connection (#2: Consensus)","url":"https://sethmlarson.dev/building-software-for-connection-consensus?utm_campaign=rss","date":1739232000,"author":"","guid":138,"unread":true,"content":"<p>In the <a href=\"http://sethmlarson.dev/building-software-for-connection-local-first\">previous article</a> we concluded that a persistent always-on internet\nconnection isn't required for software to elicit feelings of connection between humans.</p><div><div><p>Building on this conclusion: let's explore how Animal Crossing software was able to intercommunicate without requiring\na centralized server and infrastructure and the trade-offs for these design decisions.</p></div></div><h2>Distributing digital goods without the internet</h2><p>Animal Crossing has over 1,000 unique items that need to be collected\nfor a complete <a href=\"https://nookipedia.com/wiki/Catalog\">catalog</a>, including furniture, wallpapers, clothing, parasols, and carpets.\nMany of these items are quite rare or were only programmed to be accessible\nthrough an official Nintendo-affiliated distribution such as a magazine or online contest.</p><p>Beyond official distributions, it's clear Animal Crossings' designer, Katsuya Eguchi,\nwanted players to  to complete their catalogs.\nThe game incentivized trading items between towns by assigning\none “<a href=\"https://nookipedia.com/wiki/Fruit\">native fruit</a>” (Apple, Orange, Cherry, Peach, or Pear) and\nrandomly making a subset of items harder to find than others depending\non a <a href=\"https://nookipedia.com/wiki/Group\">hidden “item group” variable</a> (either A, B, or C).</p><p>Items could be exchanged between players when one player visits another town,\nbut this required physically bringing your memory card to another\nplayers' GameCube. The GameCube might have come with a handle, but the 'cube wasn't exactly a . Sharing a physical space isn't something you can do with everyone or on a regular basis.</p><div><div><p>So what did Katsuya Eguchi design for Animal Crossing? To allow for item distributions from magazines and contests and to make player-to-player item sharing easier Animal Crossing included a feature called “<a href=\"https://nookipedia.com/wiki/Secret_code\">secret codes</a>”.</p><p>This feature worked by allowing players to exchange 28-character codes with Tom Nook for items. Players could also generate codes for their friends to “send” an item from their own game to a different town. Codes could be shared by writing them on a paper note, instant message, or text message.</p></div></div><h2>The forgotten durability of offline software</h2><div><div><p>\nThis <a href=\"https://www.reddit.com/r/Gamecube/comments/1gqfbae\">Reddit comment thread</a> from the GameCube subreddit was the initial inspiration for this entire series.\nThe post is about someone's niece who just started playing Animal Crossing for the first time.\nThe Redditor asked folks to send items to their nieces' town using the secret code system.\n</p><p>This ended up surprising many folks that this system \n in a game that was over 23 years old!\nFor reference, Nintendo Wi-Fi Connection and Nintendo Network were only available for 8 and 13 years respectively.\nBelow are a handful of the comments from the thread:</p><blockquote><ul><li>“For real does this still work lol?”</li></ul></blockquote></div></div><p>It's hard not to take these comments as indicators that something is\n with internet-connected software today. What had to go wrong for a \nsystem continuing to work to ? Many consumers' \nexperience with \nsoftware products\ntoday is that they become useless e-waste after some far-away service is \ndiscontinued a few years after purchase.</p><p>My intuition from this is that software that <em>requires centralized servers and infrastructure to function</em>\nwill have shorter lifetimes than software which is offline or only\nopportunistically uses online functionality.</p><p>I don't think this is particularly insightful,\nmore dependencies always means less resilience. But if we're building software for human connection then the software\nshould optimally only be limited by the <em>availability of humans to connect</em>.</p><h2>What is centralization good for?</h2><div><div><p>Animal Crossings' secret code system is far from perfect. The system is easily abusable, as the same secret codes can be\nreused over-and-over by the same user to duplicate items without ever expiring. The only limit was that 3 codes could be used per day.</p></div></div><p>Not long after Animal Crossing's release\nthe secret code algorithm was <a href=\"https://togenyanweb.appspot.com/Yokai/eplus/eplus.html\">reverse-engineered</a> so secret codes \nfor any item could be created for any town and recipient name as if they came from an official Nintendo distribution.\nThis was possible because the secret code system relied on \"<a href=\"https://en.wikipedia.org/wiki/Security_through_obscurity\">security through obscurity</a>\".</p><p>Could  be the answer to preventing these abuses?</p><p>The most interesting property that a centralized authority approach\nprovides is : forcing everyone to play by the same rules. By storing\nthe “single source-of-truth” a central authority is able to prevent abuses\nlike the ones mentioned above.</p><p>For example, a centralized “secret code issuing server” could generate\nnew unique codes per-use and check each code's validity\nagainst a database to prevent users from generating their\nown illegitimate codes or codes being re-used multiple times.</p><p>The problem with\ncentralized consensus is it tends to be  to cover the entire software state.\nA centralized server can generate codes perfectly, but how can that same server\n that the items you're exchanging for codes were obtained legitimately? To know this\nthe server would <em>also need to track item legitimacy</em>, leading to software which requires\nan internet connection to operate.</p><p>This is optimal from a correctness perspective, but as was noted earlier,\nI suspect that if such a server was a mandatory part of the secret code system\nin Animal Crossing that the system <em>would likely not be usable today</em>.</p><p>This seems like a trade-off, <em>which future would you rather have?</em></p><h2>Redesigning Animal Crossing secret codes</h2><p>If I were designing Animal Crossings' secret code system with modern hardware, what would it look like?\nHow can we keep the offline fall-back while providing consensus and being less\nabusable, especially for official distributions.</p><p>I would likely use a <a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography\">public-key cryptographic</a> system for official distributions,\nembedding a certificate that could be used to “verify” that specific secret codes\noriginated from the expected centralized entity. Codes that are accepted would be\nrecorded to prevent reusing the same code multiple times in the same town.\nUsing public-key cryptography prevents the\nsystem from being reverse-engineered to distribute arbitrary items until the certificate\nprivate key was cracked.</p><p>For sharing items between players I would implement a system where each town\ngenerated a public and private key and the public key was shared to other towns\nwhenever the software was able to, such as when a player visited the other town.\nPlayers would only be able to send items to players that they have visited\n(which for Animal Crossing <em>required physical presence</em>, more on this later!)</p><p>Each sender could store a <a href=\"https://en.wikipedia.org/wiki/Cryptographic_nonce\">nonce</a> value for\neach potential recipient. Embedding that nonce into the secret code would allow\nthe recipients' software to verify that the specific code hadn't been used yet.\nThe nonce wouldn't have to be long to avoid simple reusing of codes.</p><p>Both above systems would require much more data to be embedded into each “secret\ncode” compared to the 28-character codes from the GameCube. For this I would\nuse QR codes to embed over 2KB of data into a single QR code. Funnily enough,\nAnimal Crossing New Leaf and onwards <a href=\"https://nookipedia.com/wiki/QR_code\">use QR code technology</a> for players to share design patterns.</p><p>This design is still abusable if users can modify their software or hardware\nbut doesn't suffer from the trivial-to-exploit flaws of Animal Crossing's secret code system.</p><h2>Decentralized global consensus?</h2><div><div><p>What if we could have the best of both worlds: we want consensus\nthat is both  and . At least today, we are out of luck.</p><p>Decentralized global consensus is <a href=\"https://bitcoin.org/bitcoin.pdf\">technologically feasible</a>, but the existing solutions\n(mostly blockchains)\nare expensive (both in energy and capital) and can't handle throughput on any sort of \nmeaningful scale.</p></div></div><p>There are many other decentralized consensus systems that \nare able to form “pockets” of <em>useful peer-to-peer consensus</em> using a fraction of\nthe resources, such as email, <a href=\"https://en.wikipedia.org/wiki/BitTorrent\">BitTorrent</a>, <a href=\"https://activitypub.rocks/\">ActivityPub</a>, and <a href=\"https://nostr.com/\">Nostr</a>.\nThese systems are only possible by adding  or by only guaranteeing .</p><h2>When is global consensus needed?</h2><p>Obviously global consensus is important for certain classes of software like \nfinancial, civics, and infrastructure, but I wonder how the necessity\nof consensus in software changes for software with different risk\nprofiles.</p><p>For software which has fewer risks associated with misuse is there as much\nneed for global consensus?\nHow can  be designed to reduce risk and require\nless consensus to be effective? If global consensus and centralized \nservers become unnecessary, can we expect  to be usable \non much longer timescales, <em>essentially for as long as there are users?</em></p>","contentLength":8378,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Morsels: Newlines and escape sequences in Python","url":"https://www.pythonmorsels.com/newlines-and-escape-sequences/","date":1739200649,"author":"","guid":136,"unread":true,"content":"<p>This string contains a newline character:</p><div><pre><code></code></pre></div><p>That's what  represents: a newline character.</p><p>If we print this string, we'll see that  becomes an  newline:</p><p>Why does Python represent a newline as ?</p><h2>Escape sequences in Python</h2><p>Every character in a Python …</p>","contentLength":244,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pairwise Authentication of Humans","url":"https://www.schneier.com/blog/archives/2025/02/pairwise-authentication-of-humans.html","date":1739188841,"author":"Bruce Schneier","guid":160,"unread":true,"content":"<p>Here’s an <a href=\"https://ksze.github.io/PeerAuth/\">easy</a> system for two humans to remotely authenticate to each other, so they can be sure that neither are digital impersonations.</p><blockquote><p>To mitigate that risk, I have developed this simple solution where you can setup a unique time-based one-time passcode (TOTP) between any pair of persons.</p><ol><li>Two people, Person A and Person B, sit in front of the same computer and open this page;\n</li><li>They input their respective names (e.g. Alice and Bob) onto the same page, and click “Generate”;\n</li><li>The page will generate two TOTP QR codes, one for Alice and one for Bob;\n</li><li>Alice and Bob scan the respective QR code into a TOTP mobile app (such as Authy or Google Authenticator) on their respective mobile phones;\n</li><li>In the future, when Alice speaks with Bob over the phone or over video call, and wants to verify the identity of Bob, Alice asks Bob to provide the 6-digit TOTP code from the mobile app. If the code matches what Alice has on her own phone, then Alice has more confidence that she is speaking with the real Bob.</li></ol></blockquote>","contentLength":1006,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"TypeScript: extracting parts of composite types via infer","url":"https://2ality.com/2025/02/typescript-infer-operator.html","date":1739145600,"author":"Dr. Axel Rauschmayer","guid":227,"unread":true,"content":"<p>In this blog post, we explore how we can extract parts of composite types via the  operator.</p><p>It helps if you are loosely familiar with conditional types. You can check out section <a href=\"https://exploringjs.com/tackling-ts/ch_computing-with-types-overview.html#conditional-types\">“Conditional types”</a> in “Tackling TypeScript”&nbsp;to read up on them.</p>","contentLength":252,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"TypeDoc: testing code examples in doc comments","url":"https://2ality.com/2025/02/testing-typedoc-examples.html","date":1739059200,"author":"Dr. Axel Rauschmayer","guid":226,"unread":true,"content":"<p>TypeDoc now lets us refer to parts of other files via . In this blog post, I explain how that works and why it’s useful.</p>","contentLength":122,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["blog"]}