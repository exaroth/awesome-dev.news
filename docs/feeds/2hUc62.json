{"id":"2hUc62","title":"Blog","displayTitle":"Blog","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":14,"items":[{"title":"Engineering a Rust optimization quiz","url":"https://fasterthanli.me/articles/engineering-a-rust-optimization-quiz","date":1761995280,"author":"Amos Wenger","guid":324018,"unread":true,"content":"<figure data-bo=\"576\"><figcaption><div><p>The unfair rust quiz really deserves its name. It is best passed with a knowledgeable friend by your side.</p></div></figcaption></figure><a href=\"https://fasterthanli.me/articles/engineering-a-rust-optimization-quiz#coming-up-with-the-questions\"></a><a href=\"https://fasterthanli.me/articles/engineering-a-rust-optimization-quiz#nih-syndrome-ppt\"></a><a href=\"https://fasterthanli.me/articles/engineering-a-rust-optimization-quiz#server-side-shenanigans-and-room-codes\"></a><a href=\"https://fasterthanli.me/articles/engineering-a-rust-optimization-quiz#deploying-the-beast\"></a><a href=\"https://fasterthanli.me/articles/engineering-a-rust-optimization-quiz#d-2-starting-fights-at-a-paris-meetup\"></a><a href=\"https://fasterthanli.me/articles/engineering-a-rust-optimization-quiz#d-1-panic-mode-and-missing-explanations\"></a><a href=\"https://fasterthanli.me/articles/engineering-a-rust-optimization-quiz#day-of-github-oauth-and-swipe-gestures\"></a><a href=\"https://fasterthanli.me/articles/engineering-a-rust-optimization-quiz#showtime\"></a>","contentLength":106,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Friday Squid Blogging: Giant Squid at the Smithsonian","url":"https://www.schneier.com/blog/archives/2025/10/friday-squid-blogging-giant-squid-at-the-smithsonian.html","date":1761944778,"author":"Bruce Schneier","guid":323747,"unread":true,"content":"<p>I can’t believe that I haven’t yet posted <a href=\"https://naturalhistory.si.edu/explore/giant-squid\">this picture</a> of a giant squid at the Smithsonian.</p><p>As usual, you can also use this squid post to talk about the security stories in the news that I haven’t covered.</p>","contentLength":210,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Will AI Strengthen or Undermine Democracy?","url":"https://www.schneier.com/blog/archives/2025/10/will-ai-strengthen-or-undermine-democracy.html","date":1761908928,"author":"Bruce Schneier","guid":323492,"unread":true,"content":"<p>Below, co-authors Bruce Schneier and Nathan E. Sanders share five key insights from their new book, <em>Rewiring Democracy: How AI Will Transform Our Politics, Government, and Citizenship</em>.</p><p>AI can be used both for and against the public interest within democracies. It is already being used in the governing of nations around the world, and there is no escaping its continued use in the future by leaders, policy makers, and legal enforcers. How we wire AI into democracy today will determine if it becomes a tool of oppression or empowerment.</p><h3>1. AI’s global democratic impact is already profound.</h3><p>It’s been just a few years since ChatGPT stormed into view and AI’s influence has already permeated every democratic process in governments around the world:</p><ul><li>In 2022, an artist collective in Denmark founded the world’s first political party committed to an AI-generated policy platform.</li><li>Also in 2022, South Korean politicians running for the presidency were the first to use AI avatars to communicate with voters en masse.</li><li>In 2023, a Brazilian municipal legislator passed the first enacted law written by AI.</li><li>In 2024, a U.S. federal court judge started using AI to interpret the plain meaning of words in U.S. law.</li><li>Also in 2024, the Biden administration disclosed more than two thousand discrete use cases for AI across the agencies of the U.S. federal government.</li></ul><p>The examples illustrate the diverse uses of AI across citizenship, politics, legislation, the judiciary, and executive administration.</p><p>Not all of these uses will create lasting change. Some of these will be one-offs. Some are inherently small in scale. Some were publicity stunts. But each use case speaks to a shifting balance of supply and demand that AI will increasingly mediate.</p><p>Legislators need assistance drafting bills and have limited staff resources, especially at the local and state level. Historically, they have looked to lobbyists and interest groups for help. Increasingly, it’s just as easy for them to use an AI tool.</p><h3>2. The first places AI will be used are where there is the least public oversight.</h3><p>Many of the use cases for AI in governance and politics have vocal objectors. Some make us uncomfortable, especially in the hands of authoritarians or ideological extremists.</p><p>In some cases, politics will be a regulating force to prevent dangerous uses of AI. Massachusetts has banned the use of AI face recognition in law enforcement because of real concerns voiced by the public about their tendency to encode systems of racial bias.</p><p>Some of the uses we think might be most impactful are unlikely to be adopted fast because of legitimate concern about their potential to make mistakes, introduce bias, or subvert human agency. AIs could be assistive tools for citizens, acting as their voting proxies to help us weigh in on larger numbers of more complex ballot initiatives, but we know that many will object to anything that verges on AIs being given a vote.</p><p>But AI will continue to be rapidly adopted in some aspects of democracy, regardless of how the public feels. People within democracies, even those in government jobs, often have great independence. They don’t have to ask anyone if it’s ok to use AI, and they will use it if they see that it benefits them. The Brazilian city councilor who used AI to draft a bill did not ask for anyone’s permission. The U.S. federal judge who used AI to help him interpret law did not have to check with anyone first. And the Trump administration seems to be using AI for everything from drafting tariff policies to writing public health reports—with some obvious drawbacks.</p><p>It’s likely that even the thousands of disclosed AI uses in government are only the tip of the iceberg. These are just the applications that governments have seen fit to share; the ones they think are the best vetted, most likely to persist, or maybe the least controversial to disclose.</p><h3>3. Elites and authoritarians will use AI to concentrate power.</h3><p>Many Westerners point to China as a cautionary tale of how AI could empower autocracy, but the reality is that AI provides structural advantages to entrenched power in democratic governments, too. The nature of automation is that it gives those at the top of a power structure more control over the actions taken at its lower levels.</p><p>It’s famously hard for newly elected leaders to exert their will over the many layers of human bureaucracies. The civil service is large, unwieldy, and messy. But it’s trivial for an executive to change the parameters and instructions of an AI model being used to automate the systems of government.</p><p>The dynamic of AI effectuating concentration of power extends beyond government agencies. Over the past five years, Ohio has undertaken a project to do a wholesale revision of its administrative code using AI. The leaders of that project framed it in terms of efficiency and good governance: deleting millions of words of outdated, unnecessary, or redundant language. The same technology could be applied to advance more ideological ends, like purging all statutory language that places burdens on business, neglects to hold businesses accountable, protects some class of people, or fails to protect others.</p><p>Whether you like or despise automating the enactment of those policies will depend on whether you stand with or are opposed to those in power, and that’s the point. AI gives any faction with power the potential to exert more control over the levers of government.</p><h3>4. Organizers will find ways to use AI to distribute power instead.</h3><p>We don’t have to resign ourselves to a world where AI makes the rich richer and the elite more powerful. This is a technology that can also be wielded by outsiders to help level the playing field.</p><p>In politics, AI gives upstart and local candidates access to skills and the ability to do work on a scale that used to only be available to well-funded campaigns. In the 2024 cycle, Congressional candidates running against incumbents like Glenn Cook in Georgia and Shamaine Daniels in Pennsylvania used AI to help themselves be everywhere all at once. They used AI to make personalized robocalls to voters, write frequent blog posts, and even generate podcasts in the candidate’s voice. In Japan, a candidate for Governor of Tokyo used an AI avatar to respond to more than eight thousand online questions from voters.</p><p>Outside of public politics, labor organizers are also leveraging AI to build power. The Worker’s Lab is a U.S. nonprofit developing assistive technologies for labor unions, like AI-enabled apps that help service workers report workplace safety violations. The 2023 Writers’ Guild of America strike serves as a blueprint for organizers. They won concessions from Hollywood studios that protect their members against being displaced by AI while also winning them guarantees for being able to use AI as assistive tools to their own benefit.</p><h3>5. The ultimate democratic impact of AI depends on us.</h3><p>If you are excited about AI and see the potential for it to make life, and maybe even democracy, better around the world, recognize that there are a lot of people who don’t feel the same way.</p><p>If you are disturbed about the ways you see AI being used and worried about the future that leads to, recognize that the trajectory we’re on now is not the only one available.</p><p>The technology of AI itself does not pose an inherent threat to citizens, workers, and the public interest. Like other democratic technologies—voting processes, legislative districts, judicial review—its impacts will depend on how it’s developed, who controls it, and how it’s used.</p><p>Constituents of democracies should do four things:</p><ul><li> the technology ecosystem to be more trustworthy, so that AI is developed with more transparency, more guardrails around exploitative use of data, and public oversight.</li><li> inappropriate uses of AI in government and politics, like facial recognition technologies that automate surveillance and encode inequity.</li><li> AI in government where it can help improve outcomes, like making government more accessible to people through translation and speeding up administrative decision processes.</li><li> the systems of government vulnerable to the disruptive potential of AI’s superhuman capabilities, like political advertising rules that never anticipated deepfakes.</li></ul><p>These four Rs are how we can rewire our democracy in a way that applies AI to truly benefit the public interest.</p>","contentLength":8404,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The AI-Designed Bioweapon Arms Race","url":"https://www.schneier.com/blog/archives/2025/10/the-ai-designed-bioweapon-arms-race.html","date":1761822316,"author":"Bruce Schneier","guid":322087,"unread":true,"content":"<p>Interesting <a href=\"https://arstechnica.com/science/2025/10/do-ai-designed-proteins-create-a-biosecurity-vulnerability/\">article</a> about the arms race between AI systems that invent/design new biological pathogens, and AI systems that detect them before they’re created:</p><blockquote><p>The team started with a basic test: use AI tools to design variants of the toxin ricin, then test them against the software that is used to screen DNA orders. The results of the test suggested there was a risk of dangerous protein variants slipping past existing screening software, so the situation was treated like the equivalent of a zero-day vulnerability.</p><p>Details of that original test are <a href=\"https://www.science.org/doi/10.1126/science.adu8578\">being made available today</a> as part of a much larger analysis that extends the approach to a large range of toxic proteins. Starting with 72 toxins, the researchers used three open source AI packages to generate a total of about 75,000 potential protein variants.</p><p>And this is where things get a little complicated. Many of the AI-designed protein variants are going to end up being non-functional, either subtly or catastrophically failing to fold up into the correct configuration to create an active toxin.</p><p>In any case, DNA sequences encoding all 75,000 designs were fed into the software that screens DNA orders for potential threats. One thing that was very clear is that there were huge variations in the ability of the four screening programs to flag these variant designs as threatening. Two of them seemed to do a pretty good job, one was mixed, and another let most of them through. Three of the software packages were updated in response to this performance, which significantly improved their ability to pick out variants.</p><p>There was also a clear trend in all four screening packages: The closer the variant was to the original structurally, the more likely the package (both before and after the patches) was to be able to flag it as a threat. In all cases, there was also a cluster of variant designs that were unlikely to fold into a similar structure, and these generally weren’t flagged as threats.</p></blockquote><p>The research is all preliminary, and there are a lot of ways in which the experiment diverges from reality. But I am not optimistic about this particular arms race. I think that the ability of AI systems to create something deadly will advance faster than the ability of AI systems to detect its components.</p>","contentLength":2273,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build your first AI Agent with Gemini, n8n and Google Cloud Run","url":"https://www.philschmid.de/n8n-cloud-run-gemini","date":1761782400,"author":"","guid":322134,"unread":true,"content":"<article>Learn how to deploy n8n on Google Cloud Run with PostgreSQL and create an AI Agent using Google Gemini 2.5.</article>","contentLength":107,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Signal’s Post-Quantum Cryptographic Implementation","url":"https://www.schneier.com/blog/archives/2025/10/signals-post-quantum-cryptographic-implementation.html","date":1761736197,"author":"Bruce Schneier","guid":320662,"unread":true,"content":"<p>Ultimately, the architects settled on a creative solution. Rather than bolt KEM onto the existing double ratchet, they allowed it to remain more or less the same as it had been. Then they used the new quantum-safe ratchet to implement a parallel secure messaging system.</p><p>Now, when the protocol encrypts a message, it sources encryption keys from both the classic Double Ratchet and the new ratchet. It then mixes the two keys together (using a cryptographic key derivation function) to get a new encryption key that has all of the security of the classical Double Ratchet but now has quantum security, too.</p><p> The Signal engineers have given this third ratchet the formal name: Sparse Post Quantum Ratchet, or SPQR for short. The third ratchet was designed in collaboration with <a href=\"https://pqshield.com\">PQShield</a>, <a href=\"https://www.aist.go.jp/index_en.html\">AIST</a>, and New York University. The developers <a href=\"https://eprint.iacr.org/2025/078\">presented</a> the erasure-code-based chunking and the high-level Triple Ratchet design at the Eurocrypt 2025 conference. At the Usenix 25 conference, they <a href=\"https://www.usenix.org/system/files/usenixsecurity25-auerbach.pdf\">discussed</a> the six options they considered for adding quantum-safe forward secrecy and post-compromise security and why SPQR and one other stood out. Presentations at the <a href=\"https://csrc.nist.gov/Presentations/2025/post-quantum-ratcheting-for-signal\">NIST PQC Standardization Conference</a> and the <a href=\"https://youtu.be/WhTLjKzkK9c\">Cryptographic Applications Workshop</a> explain the details of chunking, the design challenges, and how the protocol had to be adapted to use the standardized ML-KEM.</p><p>Jacomme further observed: </p><blockquote><p>The final thing interesting for the triple ratchet is that it nicely combines the best of both worlds. Between two users, you have a classical DH-based ratchet going on one side, and fully independently, a KEM-based ratchet is going on. Then, whenever you need to encrypt something, you get a key from both, and mix it up to get the actual encryption key. So, even if one ratchet is fully broken, be it because there is now a quantum computer, or because somebody manages to break either elliptic curves or ML-KEM, or because the implementation of one is flawed, or…, the Signal message will still be protected by the second ratchet. In a sense, this update can be seen, of course simplifying, as doubling the security of the ratchet part of Signal, and is a cool thing even for people that don’t care about quantum computers.</p></blockquote>","contentLength":2214,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Agentic AI and Security","url":"https://martinfowler.com/articles/agentic-ai-security.html","date":1761657600,"author":"Martin Fowler","guid":319169,"unread":true,"content":"<p>Agentic AI systems are amazing, but introduce equally\n      amazing security risks.  explains that their\n      core architecture opens up <a href=\"https://martinfowler.com/articles/agentic-ai-security.html\">security issues</a> through what Simon Willison\n      named the “Lethal Trifecta”. Korny goes on to talk about how to\n      mitigate this through removing legs of the trifecta and splitting complex\n      tasks.</p>","contentLength":348,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Social Engineering People’s Credit Card Details","url":"https://www.schneier.com/blog/archives/2025/10/social-engineering-peoples-credit-card-details.html","date":1761649280,"author":"Bruce Schneier","guid":319089,"unread":true,"content":"<p>Your highway toll payment is now past due, one text warns. You have U.S. Postal Service fees to pay, another threatens. You owe the New York City Department of Finance for unpaid traffic violations.</p><p>The texts are ploys to get unsuspecting victims to fork over their credit-card details. The gangs behind the scams take advantage of this information to buy iPhones, gift cards, clothing and cosmetics.</p><p>Criminal organizations operating out of China, which investigators blame for the toll and postage messages, have used them to make more than $1 billion over the last three years, according to the Department of Homeland Security.</p><p>Making the fraud possible: an ingenious trick allowing criminals to install stolen card numbers in Google and Apple Wallets in Asia, then share the cards with the people in the U.S. making purchases half a world away.</p>","contentLength":844,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"High Agency Matters","url":"https://addyosmani.com/blog/high-agency-matters/","date":1761609600,"author":"","guid":319340,"unread":true,"content":"<article>High agency is the habit of seeing it, owning it, and moving it forward. In the long run initiative beats intellect. This essay explains what agency is, why it is scarce, and how to develop and hire for it.</article>","contentLength":206,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Louvre Jewel Heist","url":"https://www.schneier.com/blog/archives/2025/10/louvre-jewel-heist.html","date":1761577395,"author":"Bruce Schneier","guid":316811,"unread":true,"content":"<p>I assume I don’t have to explain last week’s <a href=\"https://www.nytimes.com/2025/10/19/world/europe/louvre-paris-robbery.html\">Louvre jewel heist</a>. I love a good caper, and have (like <a href=\"https://www.nytimes.com/2025/10/23/opinion/louvre-heist-internet-thrill.html\">many others</a>) eagerly followed the <a href=\"https://www.theguardian.com/world/2025/oct/20/louvre-museum-robbery-thieves-stolen-jewellery\">details</a>. An electric ladder to a second-floor window, an angle grinder to get into the room and the display cases, security guards there more to protect patrons than valuables—seven minutes, in and out.</p><blockquote><p>The Louvre, it turns out—at least certain nooks of the ancient former palace—is something like an anopticon: a place where no one is observed. The world now knows what the four thieves (two burglars and two accomplices) realized as recently as last week: The museum’s Apollo Gallery, which housed the stolen items, was monitored by a single outdoor camera angled away from its only exterior point of entry, a balcony. In other words, a free-roaming Roomba could have provided the world’s most famous museum with more information about the interior of this space. There is no surveillance footage of the break-in.</p></blockquote><p>Professional jewelry thieves were not impressed with the four. Here’s <a href=\"https://www.nytimes.com/2025/10/25/world/europe/louvre-heist-jewelry-thieves.html\">Larry Lawton</a>:</p><blockquote><p>“I robbed 25, 30 jewelry stores—20 million, 18 million, something like that,” Mr. Lawton said. “Did you know that I never dropped a ring or an earring, no less, a crown worth 20 million?”</p></blockquote><p>He thinks that they had a compatriot on the inside.</p><p>Museums, especially smaller ones, are good targets for theft because they rarely secure what they hold to its true value. They can’t; it would be prohibitively expensive. This makes them an attractive target.</p><p>We might find out soon. It looks like some people have been <a href=\"https://www.nytimes.com/2025/10/26/world/europe/louvre-heist-arrests.html\">arrested</a></p><p>Not being out of the country—out of the EU—by now was sloppy. Leaving DNA evidence was sloppy. I can hope the criminals were sloppy enough not to have disassembled the jewelry by now, but I doubt it. They were probably taken apart within hours of the theft.</p><p>The whole thing is sad, really. Unlike stolen paintings, those jewels have no value in their original form. They need to be <a href=\"https://www.cbsnews.com/news/louvre-robbery-stolen-jewels-jeweler-paris-france/\">taken apart</a> and sold in pieces. But then their value drops considerably—so the end result is that most of the worth of those items disappears. It would have been much better to pay the thieves not to rob the Louvre.</p>","contentLength":2176,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A hard rain's a-gonna fall: decoding JSON in Rust","url":"https://bitfieldconsulting.com/posts/hard-rain-json-rust","date":1761570900,"author":"John Arundel","guid":316834,"unread":true,"content":"<p>JSON is the worst data format, apart from all the others, but here we\nare. This is the life we chose, and if we’re writing Rust programs to\ntalk to remote APIs such as Weatherstack, as we did in <a href=\"https://bitfieldconsulting.com/posts/here-comes-sun\">Here comes the sun</a>, we’ll have to be\nable to cope with them sending us JSON data.</p><p>We’ll also need a way to turn that JSON into good honest Rust data,\nso we can compute stuff about it. Let’s see how to do that, as we\ncontinue to hack on our embarrassingly basic weather client program.</p><p>In <a href=\"https://bitfieldconsulting.com/posts/elephants-for-breakfast\">Elephants for\nbreakfast</a> we pondered how to test a function such as\n when we can’t know in advance \nweather conditions it’ll return. The correct response is literally up in\nthe air.</p><p>So we deftly flipped the problem——and decided\ninstead to write two functions that  testable:\n, which constructs the HTTP request to be sent to\nWeatherstack, and , which unpacks the\nanswer.</p><p>We’ve already written , or rather you did—great\njob on that, by the way! Let’s turn to  now.\nHere’s how we plan to call it as part of the \nfunction:</p><pre><code></code></pre><p>At this point we’ve already made the API request, and now\n contains the response, consisting of weather data in a\nspecific JSON format.</p><p>We’re saying here that if we pass the body of that response as a\n to , we should get back a\n struct representing the weather conditions that\nwere encoded in the JSON.</p><p>That sounds like something we can test, so it’s over to you again to\nfigure out how.</p><p> Write a test for \nalong these lines.</p><p> We have the real JSON data we saved earlier\nwhen making our <a href=\"https://bitfieldconsulting.com/posts/here-comes-sun\">exploratory request</a>\nto Weatherstack (if not, make it again). That’ll be perfect test data\nfor : we already know exactly what weather\nconditions it encodes, so all we need to do is check the result against\nthe corresponding  struct.</p><p> Here’s my attempt:</p><pre><code></code></pre><p>There’s no need to test extracting any of the other stuff in the\nJSON; we don’t use it, so extracting it would be a waste of time, and\ntesting that extraction even more so.</p><p>That was easy, I think you’ll agree, so let’s turn to the actual\nextraction. How are we going to turn a  into a\n?</p><p>You know if you’ve read my moderately bestselling book <a href=\"https://bitfieldconsulting.com/books/rust-tools\">The Secrets of Rust: Tools</a> that we can use\nthe  library to serialize and deserialize Rust structs\nto JSON by using the  attribute. For example:</p><pre><code></code></pre><p>By deriving the  trait, we asked\n to autogenerate code for turning a \nstruct into, effectively, a , and\n, naturally enough, does the reverse.</p><p>So could we do the same kind of thing here? Could we define some Rust\nstruct that mirrors the schema of the JSON data returned by\nWeatherstack, and derive  on it?</p><p>Yes, we could do it that way, but it turns out to be rather\nlaborious, because the API’s schema consists of \nstructures. We’d have to define structs for each level of the JSON we’re\ninterested in. For example, at the top level, we only want\n:</p><p>So we have to start by defining a struct that represents the entire\nresponse, with a single field for  (we can ignore\nall the others):</p><pre><code></code></pre><p>And, of course, we now need another struct definition to represent\nwhat’s inside :</p><pre><code></code></pre><p>It’s already getting annoying, and you can imagine there would be\nmany more of these structs if we had to deal with further levels of\nnesting in the API data. The worst part is that we don’t even\n these structs! There’s no function in our program that\nneeds to take or return a , for example: we\nalready have our own struct  that contains exactly\nand only the data we want.</p><p>Surely this isn’t the right way to use Rust’s type system. What we’d\nprefer is a way to look up the data we want directly in the JSON, and\nthen transfer it to our  struct, without going via a\nbunch of useless paperwork.</p><p>Luckily,  provides a way to do this, using a\nsyntax called “JSON Pointer”. First, we deserialize the data to the\nall-purpose type :</p><pre><code></code></pre><p>Assuming that we successfully get , then its contents\nrepresent the whole JSON object contained in the response. We can reach\nin and grab some specific part of it using a path-like notation:</p><pre><code></code></pre><p>Much more direct than using a bunch of intermediate structs. Of\ncourse, there might not  a value at that path, so it makes\nsense that  returns an , doesn’t\nit? (Read more about this in my tutorial on <a href=\"https://bitfieldconsulting.com/posts/rust-errors-option-result\">Results and Options in\nRust</a>.)</p><p>If this path didn’t exist in the JSON, the result would be\n, straightforwardly. But we can be pretty confident\nthat the server’s response  include this data, so the\nresult will be , and it will contain another\n representing whatever was found at the given\npath.</p><p>So let’s try to write  now using this\n“pointer” approach:</p><pre><code></code></pre><p>We’ve added a little extra paperwork here in case the lookups fail,\nusing  to return a suitable error message along\nwith the problematic JSON data.</p><p>Assuming the lookups succeed, though, we need to turn the resulting\ns into real Rust types:</p><p> is a useful little tool whenever we’re dealing\nwith s like this. If the option is ,\nit just does nothing. But if it’s , then it extracts\nthe value and applies the given function to it. In this case, that’s\n for the temperature, which parses the value as a\nfloating-point number, and  for the summary.</p><p>Having extracted, checked, and converted our \nand  values, then, we write them into our\n struct using the field init shorthand, and return\nit.</p><h3>Taking it for a trial run</h3><p>This passes the test, which is encouraging, so we now have the two <a href=\"https://bitfieldconsulting.com/posts/magic-function\">magic functions</a> we need to write\n.</p><pre><code></code></pre><p>I mean, if you cross off the parts we’ve already tested\n( and ), there’s not much\nleft, is there? The only substantive thing we don’t test is\n, and that’s not our code—we can assume\n itself works, or someone would have noticed by\nnow.</p><p>Let’s run the updated program for real and see what happens.</p><pre><code>Error: bad response: {\"error\":{\"code\":601,\"info\":\"Please specify a\nvalid location identifier using the query parameter.\",\"type\":\n\"missing_query\"},\"success\":false}</code></pre><p>Oops. That’s on me; I didn’t give a location on the command line to\nquery the weather for. But that’s exactly the sort of mistake that any\nuser might make, so we’d better catch it and provide a slightly nicer\nerror message:</p><pre><code></code></pre><p>Let’s try again, this time with a location:</p><pre><code>Weather { temperature: 12.0, summary: \"Partly cloudy\" }</code></pre><p>Fine. All our magic is working perfectly. That’s reassuring, so let’s\ntake this opportunity to tighten up a few bolts and caulk a few seams.\nWe’ll define a real implementation of , so that the\noutput doesn’t look so nerdy:</p><pre><code></code></pre><p>Nothing new here except this format parameter for the\ntemperature:</p><p>The  means “print to one decimal place”, rounding if\nnecessary. Without this, a temperature of 12.0 would print as just “12”,\nwhich seems a shame. We worked to get that extra decimal place: let’s\nhang on to it!</p><p>Here’s what it looks like with this change:</p><h3>Mixing arguments and\nenvironment variables</h3><p>And, since we’re going to the trouble of validating our arguments,\nlet’s hand that over to  and derive a suitable\n parser:</p><pre><code></code></pre><p>You might well think that if we’re deploying the awesome power of\n now, couldn’t we also use it to take the API key as a\ncommand-line option? That would be a nice enhancement, but currently\nwe’re looking for it in an environment variable:</p><pre><code></code></pre><p>Ideally, we’d have  get this from a flag if it’s\nprovided that way, and if not, look for it in the environment variable.\nAnd it turns out we can do exactly that, if we opt in to the\n feature:</p><p><strong><code>cargo add clap -F derive,env</code></strong></p><pre><code></code></pre><p>What we’re saying is, if the user provides the \nflag, use that value, and if they don’t, fall back to looking for it in\nthe environment variable. If it’s not there either, report an error,\nbecause this is a required flag.</p><p>By the way, while it’s conventional for Rust field names to be styled\nin so-called “snake case” (), it’s \nconventional for command-line arguments to be styled in so-called “kebab\ncase” (), so  makes this\ntransformation for us automatically. That’s the wonderful thing about\nconventions, of course: there are so many of them.</p><p>Very well, then. We’ve built a decent library crate that actually\ngets weather, and it has some tests. We can be pretty confident that\nboth  and  are implemented\nproperly. Since we can’t test the way they’re glued together in\n, I guess we’ll just have to hope it’s correct,\nright?</p><p>If you don’t think “hope” is a strategy, tune in next time to see\nwhether we can’t do a little better.</p>","contentLength":8289,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"First Wap: A Surveillance Computer You’ve Never Heard Of","url":"https://www.schneier.com/blog/archives/2025/10/first-wap-a-surveillance-computer-youve-never-heard-of.html","date":1761563291,"author":"Bruce Schneier","guid":316728,"unread":true,"content":"<p> has a <a href=\"https://www.motherjones.com/politics/2025/10/firstwap-altamides-phone-tracking-surveillance-secrets-assad-erik-prince-jared-leto-anne-wojcicki/\">long article</a> on surveillance arms manufacturers, their wares, and how they avoid export control laws:</p><blockquote><p>Operating from their base in Jakarta, where permissive export laws have allowed their surveillance business to flourish, First Wap’s European founders and executives have quietly built a phone-tracking empire, with a footprint extending from the Vatican to the Middle East to Silicon Valley.</p><p>It calls its proprietary system Altamides, which it describes in promotional materials as “a unified platform to covertly locate the whereabouts of single or multiple suspects in real-time, to detect movement patterns, and to detect whether suspects are in close vicinity with each other.”</p><p>Altamides leaves no trace on the phones it targets, unlike spyware such as Pegasus. Nor does it require a target to click on a malicious link or show any of the telltale signs (such as overheating or a short battery life) of remote monitoring.</p><p>Its secret is shrewd use of the antiquated telecom language Signaling System No. 7, known as SS7, that phone carriers use to route calls and text messages. Any entity with SS7 access can send queries requesting information about which cell tower a phone subscriber is nearest to, an essential first step to sending a text message or making a call to that subscriber. But First Wap’s technology uses SS7 to zero in on phone numbers and trace the location of their users.</p></blockquote><p>Much more in this Lighthouse Reports <a href=\"https://www.lighthousereports.com/investigation/surveillance-secrets/\">analysis</a>.</p>","contentLength":1454,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Web dev for beginners] Node.js","url":"https://2ality.com/2025/10/nodejs.html","date":1761523200,"author":"Dr. Axel Rauschmayer","guid":319369,"unread":true,"content":"<p> is a program that lets us run JavaScript code outside browsers – which we can use for a variety of things.</p>","contentLength":109,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Web dev for beginners] Shells","url":"https://2ality.com/2025/10/shells.html","date":1761436800,"author":"Dr. Axel Rauschmayer","guid":319368,"unread":true,"content":"<p>A  provides a text-based way of interacting with the operating system. In this chapter, we explore how shells work and why we need them for web development.</p>","contentLength":156,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["blog"]}