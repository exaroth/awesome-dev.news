{"id":"37FSEo","title":"Rust","displayTitle":"Rust","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":26,"items":[{"title":"Which approach to rust is more idiomatic (Helix vs Zed)?","url":"https://www.reddit.com/r/rust/comments/1iqnats/which_approach_to_rust_is_more_idiomatic_helix_vs/","date":1739692206,"author":"/u/No_Penalty2781","guid":529,"unread":true,"content":"<p>Hi! I am curious what is the current \"meta\" (by \"meta\" I mean the current rust's community  and  way of doing things) of rust programming. I am studying source code of 2 editors I am using: <a href=\"https://github.com/helix-editor/helix/\">Helix</a> and <a href=\"https://github.com/zed-industries/zed/\">Zed</a>. And I can see that while they are doing a lot of similar things (like using LSP and parsing it outputs for example) the code is kinda different.</p><p>It starts from the file structure: in Helix there are not that many folders to look at (like you have <a href=\"https://github.com/helix-editor/helix/tree/master/helix-core\">helix-core</a> which contains features like \"diagnostic\", \"diff\", \"history\", etc but in Zed every single one of them is a different crate , which approach is more \"idiomatic\"? To divide every feature as a separate crate or to use more \"packed\" crates like \"core\".</p><p>Then the code itself is kinda different, for example I am currently looking at LSP implementation in both of them and in Helix's case I can follow along and understand the code much more easily (here is the <a href=\"https://github.com/helix-editor/helix/blob/master/helix-lsp/src/lib.rs\">file</a> I am referring to. But in Zed's case it is kinda hard to understand the code because of \"type level programming\" stuff like <a href=\"https://github.com/zed-industries/zed/blob/main/crates/lsp/src/lsp.rs#L397\">this one</a> for example. It also doesn't help that files have a lot of SLOC in them (over 1500 in normal in Zed's repository, is it also how you do rust?) Maybe I am just used to lean functions from other languages (I mainly did TypeScript and Elixir in my career).</p><p>Other thing I see is that Helix has more comments about \"why the thing is doing that in the first place\" which I find very helpful (on the other hand in seems that Zed's is abusing a lot of \"type level\" programming to have a self-documented code but it is harder to reason about at least for me) which approach here you prefer?</p>","contentLength":1635,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Fluvio: A Rust-powered streaming platform using WebAssembly for programmable data processing","url":"https://www.reddit.com/r/rust/comments/1iqgg02/fluvio_a_rustpowered_streaming_platform_using/","date":1739667635,"author":"/u/drc1728","guid":528,"unread":true,"content":"<div><p>I am in the process of writing an essay on composable streaming first architecture for data intensive applications. I am thinking of it as a follow up on this article.</p><p>Quick question for the Rust community:</p><ul><li>What information would help the Rust community know and experience Fluvio?</li><li>What would you like to see covered in the essay?</li></ul></div>   submitted by   <a href=\"https://www.reddit.com/user/drc1728\"> /u/drc1728 </a>","contentLength":357,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Safe elimination of unnecessary bound checks.","url":"https://www.reddit.com/r/rust/comments/1iqev5s/safe_elimination_of_unnecessary_bound_checks/","date":1739663006,"author":"/u/tjientavara","guid":499,"unread":true,"content":"<p>Hi, I am working on a Unicode database that is pretty fast, it is a 2 step associated lookup.</p><p>Here is the code for getting the east-asian-width value of a Unicode code-point. Pay specific attention to the function. This function is a  function and the byte tables that it references are  as well. This will allow you to eventually run the unicode algorithms at both compile and run-time.</p><p>Since the tables are fixed at compile time, I can proof that all values from the table will result in values that will never break any bounds, so technically the bound checks are unnecessary.</p><p>There are two bound checks in the assembly output for this function.</p><ul><li>The check before accessing the EAST_ASIAN_WIDTH_COLUMN table (I use an assert! to do this, otherwise there will be double bound check).</li><li>And the check on the conversion to the enum.</li></ul><p>The two bound checks are the two compare + conditional-jump instructions in this code.</p><p>I could increase the size of the column table to remove one of the bound checks, but I want to keep the table small if possible.</p><p>Is there a way to safely (I don't want to use the unsafe code) proof to the compiler that those two checks are unnecessary?</p><p>P.S. technically there is a bound check before the index table a CMOV instruction, but it doubles as a way to also decompress the index table (last entry is repeated), so I feel this is not really a bound check.</p><p>I was able to concat the two tables, and use a byte offset. So now there is no way to get an out of bound access, and the bound checks are no longer emitted by the compiler.</p><p>I also added a manual check for out of bound on the enum and return zero instead, this becomes a CMOV and it eliminated all the panic code from the function.</p>","contentLength":1702,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Newly Curated 40+ Developer Fixes || Try it now :)","url":"https://dev.to/0x2e_tech/newly-curated-40-developer-fixes-try-it-now--14fe","date":1739649805,"author":"0x2e Tech","guid":555,"unread":true,"content":"<h3>\n  \n  \n  1. Go Testing: Force Retests &amp; Disable Caching\n</h3><p>Go Testing: Forcing Retests and Disabling Test Caching  This guide tackles the common issue of stale test results in Go, focusing on how to reliably force retests and disable caching mechanisms.  We'll explore several practical, plug-and-play solutio... <a href=\"https://0x2e.tech/item/go-testing-force-retests-disable-caching\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  2. Flutter Map Key Typing: A Practical Guide for Developers\n</h3><p>Flutter Map Key Typing: A Practical Guide for Developers  Let's face it: dealing with map key typing in Flutter can be a real headache if you don't have a clear strategy.  This guide provides a no-nonsense, plug-and-play approach to mastering this as... <a href=\"https://0x2e.tech/item/flutter-map-key-typing-a-practical-guide-for-developers\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Flutter Development </li></ul><h3>\n  \n  \n  3. Multi-task Learning in TensorFlow: A Practical Guide\n</h3><p>Multi-task Learning in TensorFlow: A Practical Guide  This guide provides a plug-and-play solution for implementing multi-task learning in TensorFlow.  We'll tackle a common scenario: predicting both the sentiment (positive, negative, neutral) and th... <a href=\"https://0x2e.tech/item/multi-task-learning-in-tensorflow-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  4. Tracking Weight Variance During Neural Network Training\n</h3><p>Let's dive into how the variance of weights changes during neural network training.  This is crucial for understanding your model's learning process and diagnosing potential problems.  We'll cover practical methods for tracking this variance and inte... <a href=\"https://0x2e.tech/item/tracking-weight-variance-during-neural-network-training\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  5. Ruby Rescue Best Practices: Why Avoid ?\n</h3><p>Hey there, fellow Rubyist! Let's tackle this common pitfall: why rescuing Exception =&gt; e is a bad idea and how to do it right.  We'll go beyond the basics and explore practical, plug-and-play solutions.  This is for folks who know some Ruby but want ... <a href=\"https://0x2e.tech/item/ruby-rescue-best-practices-why-avoid-rescue-exception-e\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  6. Expo iOS App Store Transfer Error: \"A required agreement is missing\"\n</h3><p>Decoding the \"A required agreement is missing or has expired\" Enigma After Expo App Store Transfer (SDK 51.0.0 and beyond)  Let's face it:  That error message is about as helpful as a chocolate teapot.  You've wrestled with your Expo app, successfull... <a href=\"https://0x2e.tech/item/expo-ios-app-store-transfer-error-a-required-agreement-is-missing\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> iOS App Development </li></ul><h3>\n  \n  \n  7. Android Ktor Job Cancellation: A Practical Guide\n</h3><p>Android Ktor Job Cancellation: A Practical Guide  Let's tackle that pesky \"Job Cancelled\" error when using Ktor on Android. This issue often pops up when a long-running Ktor request gets interrupted, perhaps by a configuration problem, user action, o... <a href=\"https://0x2e.tech/item/android-ktor-job-cancellation-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Android Development </li></ul><h3>\n  \n  \n  8. Mobile-Unfriendly Laravel Site? Fix it Now!\n</h3><p>Alright coder, let's tackle this mobile responsiveness issue head-on.  Your Laravel site's looking great on desktop, but those tiny screens are giving you a headache?  Don't worry, we'll fix it.  This guide is your plug-and-play solution, assuming yo... <a href=\"https://0x2e.tech/item/mobile-unfriendly-laravel-site-fix-it-now\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  9. Angular 18 APP_INITIALIZER: Fixing Dependency Injection Issues\n</h3><p>Angular 18 APP_INITIALIZER Dependency Injection woes? Let's fix it!  So, you're wrestling with Angular 18's APP_INITIALIZER and its frustrating dependency injection quirks?  Don't worry, you're not alone. This seemingly simple mechanism can turn into... <a href=\"https://0x2e.tech/item/angular-18-app-initializer-fixing-dependency-injection-issues\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  10. Jenkins Token Generation for DevOps: A Practical Guide\n</h3><p>Alright, friend! Let's get you a Jenkins API token.  This is crucial for automating tasks and integrating Jenkins with other tools.  Forget the confusing docs – we're going straight to the action.  Understanding the Why:  Before diving in, let's clar... <a href=\"https://0x2e.tech/item/jenkins-token-generation-for-devops-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  11. Fixing Python's  Error: A Quick Guide\n</h3><p>Conquering the AttributeError: module 'pkgutil' has no attribute 'ImpImporter' Beast  Let's face it: that error message is a real mood killer.  It screams, \"Your Python environment is a bit of a mess!\" But fear not, fellow coder! This isn't some insu... <a href=\"https://0x2e.tech/item/fixing-python-s-pkgutil-impimporter-error-a-quick-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  12. Securely Wiping AES XTS Cipher Keys in Go: A Practical Guide\n</h3><p>Securely Wiping AES XTS Cipher Key Material in Go: A Practical Guide  This guide provides a clear, actionable solution for securely wiping AES XTS cipher key material in Go.  We'll tackle this problem head-on, avoiding unnecessary jargon and focusing... <a href=\"https://0x2e.tech/item/securely-wiping-aes-xts-cipher-keys-in-go-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  13. Xamarin Forms: Null Values in IValueConverter? Fix it!\n</h3><p>Hey there, fellow Xaml warrior! Let's tackle this pesky null value problem in your Xamarin Forms IValueConverter.  It's a common hiccup, but once you understand the why and the how, you'll be converting values like a pro.   The Usual Suspects: Why Nu... <a href=\"https://0x2e.tech/item/xamarin-forms-null-values-in-ivalueconverter-fix-it\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  14. Postgres Timestamps: Storing with Time Zone Without UTC Conversion\n</h3><p>Storing Timestamps with Time Zone in Postgres Without UTC Conversion: A Practical Guide  This guide provides a clear, actionable solution for storing timestamps with time zones in PostgreSQL without the automatic conversion to UTC.  We'll tackle this... <a href=\"https://0x2e.tech/item/postgres-timestamps-storing-with-time-zone-without-utc-conversion\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  15. Fix \"cannot load such file -- utils/popen\" on macOS\n</h3><p>Alright, friend! Let's tackle this pesky \"cannot load such file -- utils/popen\" error you're encountering with Homebrew on your macOS system. This usually pops up when Ruby can't find the popen utility, which is crucial for some processes.  We'll wal... <a href=\"https://0x2e.tech/item/fix-cannot-load-such-file-utils-popen-on-macos\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  16. Flutter Web Self-Signed SSL: A Practical Guide\n</h3><p>Flutter Web Self-Signed Certificate Requests: A Straightforward Guide  Let's tackle that pesky self-signed certificate issue in Flutter web development.  You've built your awesome app, connected to your server... but BAM!  That self-signed certificat... <a href=\"https://0x2e.tech/item/flutter-web-self-signed-ssl-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Flutter Web Development </li></ul><h3>\n  \n  \n  17. Docker XRDP Resolution Fix: A Practical Guide\n</h3><p>Docker XRDP Resolution Fix: A Practical Guide  Let's face it: wrestling with Docker and XRDP resolution can feel like a black hole of frustration.  You've got your awesome Docker setup, your XRDP server humming, but the display is all wonky.  Fear no... <a href=\"https://0x2e.tech/item/docker-xrdp-resolution-fix-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  18. Angular Drag-and-Drop: Fixing Nested List Issues\n</h3><p>Angular Drag-and-Drop with Deeply Nested Lists: A Practical Guide  Let's face it: drag-and-drop in Angular with deeply nested lists can be a real headache.  The basic functionality often works fine for simple lists, but the moment you add nesting, th... <a href=\"https://0x2e.tech/item/angular-drag-and-drop-fixing-nested-list-issues\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  19. MySQL Error 1698: iRedMail Root Access Fix\n</h3><p>Alright, friend! Let's tackle this \"ERROR 1698 (28000): Access denied for user 'root'@'localhost'\" issue head-on.  This is a common problem in MySQL, especially when working with iRedMail.  It basically means your root user, the king of your MySQL ki... <a href=\"https://0x2e.tech/item/mysql-error-1698-iredmail-root-access-fix\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  20. Docker to Host File Transfer: A Practical Guide\n</h3><p>Copying Files from Docker Container to Host: A Practical Guide  This guide provides a no-nonsense, step-by-step approach to copying files from your Docker container to your host machine.  We'll cover various methods, ensuring you have the tools to ta... <a href=\"https://0x2e.tech/item/docker-to-host-file-transfer-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  21. Securely Wiping AES XTS Cipher Keys in Go: A Practical Guide\n</h3><p>Securely Wiping AES XTS Cipher Key Material in Go: A Practical Guide  This guide provides a practical, step-by-step solution for securely wiping AES XTS cipher key material in Go.  We'll focus on eliminating sensitive data from memory to prevent pote... <a href=\"https://0x2e.tech/item/securely-wiping-aes-xts-cipher-keys-in-go-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  22. Doubly-Ended Array Priority Queue: Mastering Node Partnerships\n</h3><p>Mastering Node Partnerships in a Doubly-Ended Array-Based Priority Queue (DEAP)  Let's tackle the challenge of correctly managing node partnerships within a Doubly-Ended Array-Based Priority Queue (DEAP).  This isn't your grandma's priority queue; we... <a href=\"https://0x2e.tech/item/doubly-ended-array-priority-queue-mastering-node-partnerships\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Data Structures and Algorithms </li></ul><h3>\n  \n  \n  23. Node ESM + Log4js: A Practical Guide\n</h3><p>Conquering Log4js in Your Node.js ESM Project: A Plug-and-Play Guide  Let's be honest, wrestling with Log4js in an ES module Node.js project can feel like a wrestling match with a greased pig.  But fear not, fellow developer! This guide will walk you... <a href=\"https://0x2e.tech/item/node-esm-log4js-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  24. Fixing SwiftUI Font Twitching: A Practical Guide\n</h3><p>SwiftUI Font Twitching:  A Practical Guide for iOS Developers  Let's be honest, that twitching font in your SwiftUI animation is annoying.  It's like a tiny, digital mosquito buzzing around your otherwise perfect UI. But fear not, fellow developer! W... <a href=\"https://0x2e.tech/item/fixing-swiftui-font-twitching-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  25. Resize SVG Responsively with D3.js: A Practical Guide\n</h3><p>SVG Dimensions on Window Resize: A D3.js Plug-and-Play Solution  This guide provides a straightforward, actionable solution for dynamically resizing SVG elements within a D3.js visualization to match window changes.  We'll ditch the fluff and get str... <a href=\"https://0x2e.tech/item/resize-svg-responsively-with-d3-js-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  26. Demystifying Logits &amp; Softmax in TensorFlow: A Practical Guide\n</h3><p>Demystifying Logits and Softmax in TensorFlow: A Practical Guide  This guide provides a clear, practical explanation of logits and the difference between softmax and softmax_cross_entropy_with_logits in TensorFlow, focusing on direct application and ... <a href=\"https://0x2e.tech/item/demystifying-logits-softmax-in-tensorflow-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  27. JS DevTools: \"Function was resolved from bound function\" Fix\n</h3><p>Alright, detective! Let's crack this 'Function was resolved from bound function' mystery in your JavaScript DevTools.  This cryptic message usually pops up when you're dealing with functions and their context (where they're called from) isn't what yo... <a href=\"https://0x2e.tech/item/js-devtools-function-was-resolved-from-bound-function-fix\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  28. VueDatePicker + v-mask: A Practical Guide\n</h3><p>Mastering the Mashup: VueDatePicker and v-mask  Let's face it:  combining VueDatePicker and v-mask can feel like wrestling a greased pig.  But fear not, fellow developer! This guide will walk you through a smooth, streamlined integration, turning tha... <a href=\"https://0x2e.tech/item/vuedatepicker-v-mask-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  29. Is My Image Gamma Encoded? A NumPy Guide for Image Pros\n</h3><p>Hey there, fellow image processing enthusiast!  Let's tackle this gamma encoding mystery. You've loaded your image into NumPy, and now you're wondering: Is it gamma-encoded or not?  Fear not! We'll unravel this with a practical, plug-and-play approac... <a href=\"https://0x2e.tech/item/is-my-image-gamma-encoded-a-numpy-guide-for-image-pros\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Image Processing </li></ul><h3>\n  \n  \n  30. MySQL Functions: Returning Multiple Rows\n</h3><p>Returning multiple rows from a MySQL function can be tricky, but it's definitely doable. The key is understanding that MySQL functions, unlike stored procedures, are designed to return a single value.  To get around this limitation, we'll leverage a ... <a href=\"https://0x2e.tech/item/mysql-functions-returning-multiple-rows\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  31. Flutter Web Theme Meta Tags: Why Mobile Browsers Ignore Them?\n</h3><p>Flutter Web Theme Meta Tags: Why Mobile Browsers Ignore Them?  Let's tackle this head-on.  You've diligently crafted your Flutter web app, meticulously set your theme meta tags, and yet, mobile browsers are ignoring them.  Frustrating, right? This is... <a href=\"https://0x2e.tech/item/flutter-web-theme-meta-tags-why-mobile-browsers-ignore-them\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Flutter Web Development </li></ul><h3>\n  \n  \n  32. ASP.NET Pragma Header Won't Go Away?  A Quick Fix\n</h3><p>Alright, friend!  Let's tackle this pesky Pragma header that's sticking around in your ASP.NET application even after you've seemingly banished it from your code.  This is a common issue, and it usually boils down to a few sneaky culprits.  We'll go ... <a href=\"https://0x2e.tech/item/asp-net-pragma-header-won-t-go-away-a-quick-fix\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  33. AWS EC2 Uptime: Node.js &amp; TypeScript Solution\n</h3><p>Calculating AWS EC2 Instance Uptime: A Node.js and TypeScript Guide  This guide provides a practical, plug-and-play solution for calculating the uptime of an AWS EC2 instance from the moment it enters the \"running\" state. We'll leverage the AWS SDK f... <a href=\"https://0x2e.tech/item/aws-ec2-uptime-node-js-typescript-solution\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  34. JS Radio Group Arrow Key Control: A Plug-and-Play Guide\n</h3><p>JavaScript Radio Group Navigation: A Plug-and-Play Guide  This guide provides a practical, step-by-step solution to enhance the user experience of multiple radio groups by enabling navigation using the Enter, Up, and Down arrow keys. We'll ditch the ... <a href=\"https://0x2e.tech/item/js-radio-group-arrow-key-control-a-plug-and-play-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  35. Stop Clicks Under CSS Popovers: A Quick Guide\n</h3><p>Stop Clicks Under CSS Popovers: A Quick Guide  This guide provides a straightforward solution to prevent clicks from reaching elements beneath a CSS popover's backdrop.  We'll use JavaScript to handle the event and stop propagation.  This is crucial ... <a href=\"https://0x2e.tech/item/stop-clicks-under-css-popovers-a-quick-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  36. Flutter: Align Dynamic Row Element\n</h3><p>Flutter: Aligning a Single Element in a Dynamic Height Row  Let's tackle this common Flutter layout challenge: aligning a single element within a row where the row's height changes dynamically.  This often pops up when you have elements of varying si... <a href=\"https://0x2e.tech/item/flutter-align-dynamic-row-element\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  37. Dark Theme CSS Fix: A Web Developer's Guide\n</h3><p>Dark Theme CSS Mayhem? Let's Fix It!   So, your website looks fabulous in light mode, but the second someone flips the switch to dark mode, it's a CSS catastrophe?  Don't worry, you're not alone.  Many developers hit this snag.  This guide will walk ... <a href=\"https://0x2e.tech/item/dark-theme-css-fix-a-web-developer-s-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  38. AWS SDK Port Forwarding: Troubleshooting Short-Lived Sessions (C#)\n</h3><p>AWS SDK Port Forwarding: Why Your Sessions Die in 30 Seconds (and How to Fix It)  Let's be honest, debugging flaky network connections is nobody's favorite pastime.  But when your AWS SDK port forwarding sessions keep crapping out after less than 30 ... <a href=\"https://0x2e.tech/item/aws-sdk-port-forwarding-troubleshooting-short-lived-sessions-c\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  39. Fixing Keras' pad_sequences Import Error: A Quick Guide\n</h3><p>Conquering the 'cannot import name 'pad_sequences'' Error in Keras  Let's be honest, import errors are the bane of every programmer's existence.  That frustrating red squiggly line underlining your perfectly crafted code?  Yeah, we've all been there.... <a href=\"https://0x2e.tech/item/fixing-keras-pad-sequences-import-error-a-quick-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  40. PHP's ?? Operator: A Practical Guide for Beginners\n</h3><p>Hey there, fellow coder! Let's dive into PHP's null coalescing operator, ??.  This little guy is a lifesaver when dealing with potentially null values and will save you from writing tons of tedious if statements.  Think of it as a supercharged way to... <a href=\"https://0x2e.tech/item/php-s-operator-a-practical-guide-for-beginners\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  41. Spring WebSockets: User-Specific Subscriptions\n</h3><p>Alright, let's tackle this Spring WebSocket user subscription puzzle.  The goal?  Get messages to the right user, securely. Forget the fluff, let's get practical.  This solution uses Spring Security for authentication and authorization, ensuring only... <a href=\"https://0x2e.tech/item/spring-websockets-user-specific-subscriptions\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Spring WebSockets </li></ul><h3>\n  \n  \n  42. Angular SSR: Mastering server.ts and main.server.ts\n</h3><p>Angular SSR: Demystifying server.ts and main.server.ts  Let's get this straight:  Server-Side Rendering (SSR) in Angular can feel like navigating a labyrinth.  But fear not! We'll cut through the confusion and give you a practical, plug-and-play guid... <a href=\"https://0x2e.tech/item/angular-ssr-mastering-server-ts-and-main-server-ts\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  43. SageMaker Training Stuck? Deep Learning Fixes\n</h3><p>Decoding the SageMaker Training Job Enigma: A Practical Guide  So, your SageMaker training job is chilling in a state of suspended animation?  The code compiles, the setup looks good, but nothing's happening in the training phase. Let's troubleshoot ... <a href=\"https://0x2e.tech/item/sagemaker-training-stuck-deep-learning-fixes\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Amazon SageMaker </li></ul><h3>\n  \n  \n  44. Braze Connected Content GraphQL: A Practical Guide\n</h3><p>Braze \"Connected Content\" GraphQL Request: A Practical Guide  This guide provides a step-by-step solution for making GraphQL requests to Braze's Connected Content API. We'll cover everything from setting up authentication to handling responses, focus... <a href=\"https://0x2e.tech/item/braze-connected-content-graphql-a-practical-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  45. PHP Progress Bar: A Step-by-Step Guide\n</h3><p>PHP Progress Bar: A Step-by-Step Guide  This guide provides a practical, plug-and-play solution for creating a dynamic progress bar in PHP, updating in real-time over a period.  We'll cover the PHP backend, HTML frontend, and CSS styling using SASS f... <a href=\"https://0x2e.tech/item/php-progress-bar-a-step-by-step-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  46. Resize Egui Tables by Column: A Rust Guide\n</h3><p>Resize Egui Tables by Column: A Rust Guide  This guide provides a practical, plug-and-play solution for creating resizable tables in egui using Rust. We'll build a robust and efficient solution, avoiding unnecessary complexity.  Understanding the Cha... <a href=\"https://0x2e.tech/item/resize-egui-tables-by-column-a-rust-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  47. C#/.NET: Why avoid inheriting from List? Practical solutions\n</h3><p>C#/.NET: Why Avoid Inheriting from List? Practical Solutions  Let's cut to the chase.  You're a C# developer, you've encountered List, and you're thinking, \"Hey, I need a specialized list!  Inheriting seems efficient.\"  Hold your horses, partne... <a href=\"https://0x2e.tech/item/c-net-why-avoid-inheriting-from-list-t-practical-solutions\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  48. Next.js, Antd, Sass/Less: The Ultimate Guide\n</h3><p>Next.js, Ant Design, Sass/Less: A Plug-and-Play Guide  This guide provides a no-nonsense, step-by-step approach to integrating Ant Design with Next.js, using either Less, Sass, or CSS Modules.  We'll focus on practicality, offering ready-to-use code ... <a href=\"https://0x2e.tech/item/next-js-antd-sass-less-the-ultimate-guide\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  49. Rust Vector Concatenation: The Ultimate Guide for Programmers\n</h3><p>Rust Vector Concatenation: The Ultimate Guide for Programmers  This guide provides a no-nonsense, practical approach to concatenating vectors in Rust.  We'll cover various methods, highlighting their strengths and weaknesses, so you can choose the be... <a href=\"https://0x2e.tech/item/rust-vector-concatenation-the-ultimate-guide-for-programmers\" rel=\"noopener noreferrer\">Read More</a></p><ul><li> Rust Programming </li></ul><h3>\n  \n  \n  50. Webpack 5 Breaking Change: Fixing Node.js Module Polyfills\n</h3><p>Webpack 5 Breaking Change: Banishing the Node.js Polyfill Gremlins  Let's be honest, that \"Webpack 5 breaking change\" error message is a real mood killer.  You're cruising along, building your awesome React app, and suddenly BAM!  Webpack throws a ta... <a href=\"https://0x2e.tech/item/webpack-5-breaking-change-fixing-node-js-module-polyfills\" rel=\"noopener noreferrer\">Read More</a></p><h3>\n  \n  \n  💰 <strong>Want to Earn 40% Commission?</strong></h3><p>Join our affiliate program and start making money by promoting ! Earn 40% on every sale you refer.  </p><p>You'll on average around 5$ per sell and for bundled products it will be around 40$ per sale. (So just share it and make money with worrying about product creation and maintanence)</p>","contentLength":16908,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Incoming Rust intern need advice?","url":"https://www.reddit.com/r/rust/comments/1iq9oph/incoming_rust_intern_need_advice/","date":1739649133,"author":"/u/Helpful_Ad_9930","guid":471,"unread":true,"content":"<p>Hey everyone, I'm a 19-year-old college student who just landed a SWE internship at NVIDIA! My manager has me learning Rust and exploring one of its libraries, and I’m also reading up on operating systems and computer networking. I'm almost done with the OS book and plan to start the networking one next week.</p><p>I do have a bit of experience with embedded systems I completed two internships during my freshman year. However, so far I’m really enjoying Rust. I am quite a rookie compared to you experienced folks haha! But so far I love how Rust's compiler enforces safety, how Cargo makes dependency management a breeze compared to CMake, and the whole concept of ownership and borrowing is just super cool.</p><p>At the moment, I’m nearly finished with the Rust book. I am on the concurrency chapter. Guess I am just wondering what next? I really want this return offer and I just want to blow this opportunity out the park. I go too a state school and my manager told me he has high expectations for me after my interviews. I just do not want to let him down you know also plus kind of getting impostor syndrome a bit seeing all the other interns coming from schools such as MIT, Harvard, Standford, etc. Sorry for the vent I guess I just want to prove my worth? and show my manager they made the right choice?</p><ul><li>What fun, Rust projects have helped you learn a lot?</li><li>Are there any books you’d recommend that could help me out for the summer?</li></ul><p><strong>Books I want to read before I start summer:</strong></p><ul><li>Operating Systems (Three easy pieces)</li><li>Beej's Guide to Network Programming</li><li>C++ Concurrency in Action</li></ul>","contentLength":1578,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pushing autovectorization to the limit: utf-8 validator","url":"https://www.reddit.com/r/rust/comments/1iq7yn2/pushing_autovectorization_to_the_limit_utf8/","date":1739644600,"author":"/u/Laiho3","guid":483,"unread":true,"content":"   submitted by   <a href=\"https://www.reddit.com/user/Laiho3\"> /u/Laiho3 </a>","contentLength":29,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Introducing encode: Encoders/serializers made easy.","url":"https://www.reddit.com/r/rust/comments/1iq6pz7/introducing_encode_encodersserializers_made_easy/","date":1739641353,"author":"/u/Compux72","guid":282,"unread":true,"content":"<p> is a toolbox for building encoders and serializers in Rust. It is heavily inspired by the <a href=\"https://docs.rs/winnow/latest/winnow/\"></a> and <a href=\"https://docs.rs/nom/latest/nom/\"></a> crates, which are used for building parsers. It is meant to be a companion to these crates, providing a similar level of flexibility and ease of use for reversing the parsing process.</p><p>The main idea behind  is to provide a set of combinators for building serializers. These combinators can be used to build complex encoders from simple building blocks. This makes it easy to build encoders for different types of data, without having to write a lot of boilerplate code.</p><p>Another key feature of  is its support for  environments. This makes it suitable for use in embedded systems, where the standard library (and particularly the [] module) is not available.</p><p>See the <a href=\"https://github.com/Altair-Bueno/encode/tree/master/examples\"></a> folder for some examples of how to use . Also, check the <a href=\"https://docs.rs/encode/0.1.0/encode/combinators/index.html\"></a> module for a list of all the combinators provided by the crate.</p><ul><li>Ready to use combinators for minimizing boilerplate.</li></ul><ul><li>: Enables the  feature.</li><li>: Enables the use of the standard library.</li><li>: Enables the use of the  crate.</li><li>: Implements [] for [].</li></ul><h3>Why the  trait instead of ?</h3><blockquote><p>A buffer stores bytes in memory such that write operations are . The underlying storage may or may not be in contiguous memory. A BufMut value is a cursor into the buffer. Writing to BufMut advances the cursor position.</p></blockquote><p>The bytes crate was never designed with falible writes nor  targets in mind. This means that targets with little memory are forced to crash when memory is low, instead of gracefully handling errors.</p><h3>Why the  trait instead of ?</h3><ul><li>Because there is no alternative, at least that i know of, that supports  properly</li><li>Because it's easier to work with than  and </li><li>Because using  with binary data often leads to a lot of boilerplate</li></ul>","contentLength":1715,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust and the Null Paradigm: Exploring Safety and Alternatives","url":"https://dev.to/dedsecrattle/rust-and-the-null-paradigm-exploring-safety-and-alternatives-47b","date":1739641004,"author":"Prabhat Kumar","guid":554,"unread":true,"content":"<p>Rust is a systems programming language known for its focus on memory safety, concurrency, and performance. One of the key decisions made by the Rust team is the choice to <strong>not support the null paradigm</strong>. While this design choice leads to safer, more reliable code, it raises an important question for developers: <strong>How do we handle the absence of a value?</strong></p><p>In many programming languages, the concept of  or  (depending on the language) is used to represent the absence of a value. This approach, however, introduces a number of issues:</p><ul><li><strong>Null Pointer Dereferencing:</strong> Accessing a  pointer can lead to runtime errors that are often hard to debug.</li><li> values can lead to subtle bugs when programmers forget to check for them, causing unexpected behaviors in applications.</li></ul><p>Rust decided to leave behind this problematic paradigm in favor of alternatives that promote safety at compile-time.</p><h2>\n  \n  \n  Rust's Approach: </h2><p>Rust takes a unique approach to handling the absence of a value: it uses the  enum. This powerful construct allows developers to explicitly handle the presence or absence of a value.</p><p>The  type is defined as:</p><div><pre><code></code></pre></div><ul><li> represents the presence of a value.</li><li> represents the absence of a value.</li></ul><p>This makes  a much safer alternative to . The compiler forces you to explicitly handle both cases ( and ), reducing the risk of null pointer exceptions.</p><p>Here's a simple example of how you might use  to handle optional values:</p><div><pre><code></code></pre></div><p>In this example, instead of returning  when the user isn't found, we return , and the caller must handle the potential absence of a value.</p><h2>\n  \n  \n  Why  Is Better Than </h2><ul><li> With , Rust ensures that you never have to deal with null values unless you explicitly decide to. This eliminates the common pitfalls of null pointer dereferencing.</li><li> Rust’s borrow checker ensures that you handle all  cases correctly, even when dealing with complex ownership and lifetime semantics.</li><li> Rust’s pattern matching syntax makes it easy to express the logic of handling  and  values, leading to clean and readable code.</li></ul><h2>\n  \n  \n  Other Alternatives:  for Error Handling\n</h2><p>In addition to , Rust also offers the  enum for handling operations that might fail. The  type is especially useful when a function might produce either a valid result or an error, combining both success and failure cases into a single, explicit structure.</p><div><pre><code></code></pre></div><p>Just like , the  type forces developers to handle both cases explicitly, improving robustness and error recovery in your programs.</p><h2>\n  \n  \n  Conclusion: Embracing Safety and Clarity\n</h2><p>Rust’s rejection of the  paradigm and adoption of types like  is a conscious choice to create safer, more reliable code. By forcing developers to handle the possibility of missing or invalid data explicitly, Rust eliminates the risks and headaches often associated with .</p><p>While this approach might feel unfamiliar to developers coming from languages with , it quickly becomes a strength of the language. Embracing  (and ) in your code not only prevents bugs but also promotes a more clear, understandable way of thinking about data and operations in your applications.</p>","contentLength":3048,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust - Ownership Model","url":"https://dev.to/dedsecrattle/rust-ownership-model-1l6j","date":1739640889,"author":"Prabhat Kumar","guid":553,"unread":true,"content":"<p>Rust’s ownership model is one of its most powerful and defining features. It provides memory safety without needing a garbage collector, making Rust highly efficient and reliable. If you're coming from languages like C++, Java, or Python, understanding Rust’s ownership system might feel daunting at first. In this post, we'll break it down step by step.</p><p><strong>What is Ownership in Rust?</strong></p><p>Ownership is Rust’s unique way of managing memory. Instead of using garbage collection or manual memory management, Rust enforces strict ownership rules at compile time. These rules ensure memory safety and prevent data races in concurrent programs.</p><p>The three key ownership rules are:</p><ol><li><strong>Each value in Rust has a single owner.</strong></li><li><strong>When the owner goes out of scope, Rust automatically deallocates the value.</strong></li><li><strong>Ownership can be transferred (moved) or borrowed (immutably or mutably).</strong></li></ol><h2>\n  \n  \n  Moving, Copying, and Cloning\n</h2><p>When assigning a value from one variable to another, ownership is transferred. Consider this example:</p><div><pre><code></code></pre></div><p>Since  is allocated on the heap, Rust prevents double-free errors by invalidating  when ownership moves to .</p><p>Certain types implement the  trait, meaning they are duplicated instead of moved. Examples include:</p><div><pre><code></code></pre></div><p>Primitive types (integers, floats, booleans, etc.) implement , so they don’t follow move semantics.</p><p>If you need to duplicate heap-allocated data, use :</p><div><pre><code></code></pre></div><p>Cloning explicitly creates a separate copy in memory, avoiding move-related issues.</p><p>Rust allows borrowing instead of transferring ownership. Borrowing enables passing data without giving up ownership.</p><p>A reference () allows read-only access to data without taking ownership:</p><div><pre><code></code></pre></div><p>You can have multiple immutable borrows at the same time, but not if there’s a mutable borrow.</p><p>A mutable reference () allows modification but enforces exclusivity:</p><div><pre><code></code></pre></div><p>Rust ensures at compile time that you cannot have multiple mutable references or a mix of mutable and immutable references at the same time.</p><h2>\n  \n  \n  Lifetimes: Ensuring Valid References\n</h2><p>Rust’s  prevent dangling references. Consider this example:</p><div><pre><code></code></pre></div><p>The  lifetime annotation ensures that the returned reference is valid as long as both input references are valid.</p><h2>\n  \n  \n  Why Rust’s Ownership Model Matters\n</h2><ol><li>: No need for garbage collection, yet Rust prevents use-after-free and memory leaks.</li><li>: Enforces thread safety at compile time.</li><li>: Eliminates runtime overhead associated with memory management.</li><li>: Code is predictable and free from subtle memory bugs.</li></ol><p>Rust’s ownership model might take some getting used to, but once you grasp it, you gain the power to write efficient and safe code without worrying about memory leaks. By understanding moves, copies, borrowing, and lifetimes, you can write highly performant Rust applications while maintaining safety guarantees.</p><p>Are you currently learning Rust? Let me know what aspects of ownership you find the most challenging in the comments below!</p>","contentLength":2874,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Transition from C++ to Rust","url":"https://www.reddit.com/r/rust/comments/1iq67vq/transition_from_c_to_rust/","date":1739640014,"author":"/u/Dvorakovsky","guid":281,"unread":true,"content":"<p>Guys, are here any people who were learning/coding in C++ and switched to Rust. How do you feel? I mean I could easily implement linked lists: singly, doubly in c++, but when I saw how it is implemented in Rust I'd say I got lost completely. I'm only learning rust... So yeah, I really like ownership model even tho it puts some difficulties into learning, but I think it's a benefit rather than a downside. Even tho compared to C++ syntax is a bit messy for me</p>","contentLength":461,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust - Ownership Model","url":"https://dev.to/dedsecrattle/rust-ownership-model-2bak","date":1739631914,"author":"Prabhat Kumar","guid":552,"unread":true,"content":"<p>Rust’s ownership model is one of its most powerful and defining features. It provides memory safety without needing a garbage collector, making Rust highly efficient and reliable. If you're coming from languages like C++, Java, or Python, understanding Rust’s ownership system might feel daunting at first. In this post, we'll break it down step by step.</p><p><strong>What is Ownership in Rust?</strong></p><p>Ownership is Rust’s unique way of managing memory. Instead of using garbage collection or manual memory management, Rust enforces strict ownership rules at compile time. These rules ensure memory safety and prevent data races in concurrent programs.</p><p>The three key ownership rules are:</p><ol><li><strong>Each value in Rust has a single owner.</strong></li><li><strong>When the owner goes out of scope, Rust automatically deallocates the value.</strong></li><li><strong>Ownership can be transferred (moved) or borrowed (immutably or mutably).</strong></li></ol><h2>\n  \n  \n  Moving, Copying, and Cloning\n</h2><p>When assigning a value from one variable to another, ownership is transferred. Consider this example:</p><div><pre><code></code></pre></div><p>Since  is allocated on the heap, Rust prevents double-free errors by invalidating  when ownership moves to .</p><p>Certain types implement the  trait, meaning they are duplicated instead of moved. Examples include:</p><div><pre><code></code></pre></div><p>Primitive types (integers, floats, booleans, etc.) implement , so they don’t follow move semantics.</p><p>If you need to duplicate heap-allocated data, use :</p><div><pre><code></code></pre></div><p>Cloning explicitly creates a separate copy in memory, avoiding move-related issues.</p><p>Rust allows borrowing instead of transferring ownership. Borrowing enables passing data without giving up ownership.</p><p>A reference () allows read-only access to data without taking ownership:</p><div><pre><code></code></pre></div><p>You can have multiple immutable borrows at the same time, but not if there’s a mutable borrow.</p><p>A mutable reference () allows modification but enforces exclusivity:</p><div><pre><code></code></pre></div><p>Rust ensures at compile time that you cannot have multiple mutable references or a mix of mutable and immutable references at the same time.</p><h2>\n  \n  \n  Lifetimes: Ensuring Valid References\n</h2><p>Rust’s  prevent dangling references. Consider this example:</p><div><pre><code></code></pre></div><p>The  lifetime annotation ensures that the returned reference is valid as long as both input references are valid.</p><h2>\n  \n  \n  Why Rust’s Ownership Model Matters\n</h2><ol><li>: No need for garbage collection, yet Rust prevents use-after-free and memory leaks.</li><li>: Enforces thread safety at compile time.</li><li>: Eliminates runtime overhead associated with memory management.</li><li>: Code is predictable and free from subtle memory bugs.</li></ol><p>Rust’s ownership model might take some getting used to, but once you grasp it, you gain the power to write efficient and safe code without worrying about memory leaks. By understanding moves, copies, borrowing, and lifetimes, you can write highly performant Rust applications while maintaining safety guarantees.</p><p>Are you currently learning Rust? Let me know what aspects of ownership you find the most challenging in the comments below!</p>","contentLength":2874,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building the MagicMirror in Rust with iced GUI Library 🦀","url":"https://www.reddit.com/r/rust/comments/1ipzubj/building_the_magicmirror_in_rust_with_iced_gui/","date":1739620595,"author":"/u/amindiro","guid":283,"unread":true,"content":"<p>I recently embarked on a journey to build a custom MagicMirror using the Rust programming language, and I’d like to share my experiences. I wrost a blog post titled <a href=\"https://aminediro.com/posts/mirrors/#mirrors\">\"software you can love: miroir Ô mon beau miroir\"</a> this project was my attempt to create a stable, resource-efficient application for the Raspberry Pi 3A.</p><p>Here's what I loved about using Rust and the iced GUI library:</p><ul><li><p><strong>Elm Architecture + Rust is a match made in heaven:</strong> iced was perfect for my needs with its Model, View, and Update paradigms. It helped keep my state management concise and leverage Rust type system</p></li><li><p> Opting for this lightweight rendering library reduced the size of the binary significantly, ending with a 9MB binary.</p></li><li><p> Although troublesome at first, I used ‘cross’ to cross compile Rust for armv7.</p></li></ul><p>If anyone is keen, I’m thinking of open-sourcing this project and sharing it with the community. Insights on enhancing the project's functionality or any feedback would be much appreciated!</p><p>Feel free to reach out if you're interested in the technical nitty-gritty or my experience with Rust GUI libraries in general.</p>","contentLength":1098,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"async-arp: library for probing hosts and sending advanced ARP (Address Resolution Protocol) requests.","url":"https://www.reddit.com/r/rust/comments/1ipywbp/asyncarp_library_for_probing_hosts_and_sending/","date":1739616505,"author":"/u/arcycar","guid":280,"unread":true,"content":"<p>After a few months of exploring and working with Rust, I am happy to share my first small Rust crate, <a href=\"https://crates.io/crates/async-arp\"></a> and I’d love to hear your thoughts! 🚀</p><p>This library provides an  way to send and receive , making it useful for network discovery, debugging, and custom networking applications.</p><ul><li>🏎  Built on Tokio for non-blocking network operations</li><li>🔍  Easily detect active devices in a subnet</li><li>⚙️  Craft and send ARP packets dynamically</li></ul><p>You can find usage examples and API documentation here: 📖 <a href=\"https://docs.rs/async-arp/latest/async_arp/\"></a></p><p>Since this is my first crate, I’d really appreciate any feedback on:</p><ul><li>📌  – Is the interface intuitive and ergonomic?</li><li>🚀  – Does it fit well into async Rust workflows?</li><li>🔍  – Any improvements or best practices I may have missed?</li><li>🦀  – Suggestions to make it more \"Rustacean\"?</li></ul><p>If you have further ideas, issues, or want to contribute, check it out on GitHub:</p><p>Thanks for checking it out—let me know what you think! 🦀</p>","contentLength":921,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Macro-Less, Highly Integrated OpenAPI Document Generation in Rust with Ohkami","url":"https://dev.to/kanarus/macro-less-highly-integrated-openapi-document-generation-in-rust-with-ohkami-9b2","date":1739609369,"author":"kanarus","guid":551,"unread":true,"content":"<p><em>This is a cross post from <a href=\"https://medium.com/@kanarus786/macro-less-highly-integrated-openapi-document-generation-in-rust-with-ohkami-912de388adc1\" rel=\"noopener noreferrer\">Medium</a>.</em></p><p>In Rust web dev, <a href=\"https://github.com/juhaku/utoipa\" rel=\"noopener noreferrer\">utoipa</a> is the most popular crate for generating OpenAPI document from server code. While it’s a great tool, it can be frustrating due to excessive macro use.</p><p>A new web framework Ohkami offers a <em><strong>macro-less, highly integrated</strong></em> way to generate OpenAPI document with its  feature.</p><p>Let’s take following code as an example. It’s the same sample from the “openapi” section of the README, but with openapi-related parts removed:</p><div><pre><code></code></pre></div><p>While this compiles and works as a pseudo user management server, activating  feature causes a compile error, telling that  and  don’t implement .</p><p>As indicated by this, Ohkami with  feature effectively handles type information and intelligently collects its endpoints’ metadata. It allows code like:</p><div><pre><code></code></pre></div><p>to assemble metadata into an OpenAPI document and output it to a file .</p><p>Then, how we implement ? Actually we can easily  by hand, or just  is available! In this case, derive is enough:</p><div><pre><code></code></pre></div><p>That’s it! Just adding these derives allows  to output following file:</p><div><pre><code></code></pre></div><p>Additionally, it’s easy to define the  schema as a component instead of duplicating inline schemas.\nIn derive, just add  helper attribute:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>And  attribute is available to set , , and override  and each response’s :</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Let’s take a look at how this document generation works!</p><p>First, the s are expanded as following:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>The organized DSL enables to easily impl manually.</p><p> trait links the struct to an item of type called .</p><h3>\n  \n  \n  2.  hooks of , , </h3><p>They're Ohkami’s core traits appeared in the handler bound:</p><div><pre><code></code></pre></div><p>When  feature is activated, they additionally have following methods:</p><div><pre><code></code></pre></div><p>Ohkami leverages these methods in  to generate consistent , reflecting the actual handler signature like <a href=\"https://github.com/ohkami-rs/ohkami/blob/6e243ac823e21f286aca2660f9d38f7bde381c5a/ohkami/src/fang/handler/into_handler.rs#L328-L335\" rel=\"noopener noreferrer\">this</a>.</p><p>Moreover, Ohkami properly propagates schema information in common cases like <a href=\"https://github.com/ohkami-rs/ohkami/blob/6e243ac823e21f286aca2660f9d38f7bde381c5a/ohkami/src/response/into_response.rs#L114-L128\" rel=\"noopener noreferrer\">this</a>, allowing users to focus only on the types and schemas of their app.</p><h3>\n  \n  \n  3.  metadata of Router\n</h3><p>In Ohkami, what’s called  has  property that stores all the routes belonging to an Ohkami instance. This is returned alongside  from  step, and is used to assemble metadata of all endpoints.</p><p>What  itself does is just to serialize an item of type <code>openapi::document::Document</code> and write it to a file.</p><p>The <code>openapi::document::Document</code> item is created by  of , summarized as follows:</p><div><pre><code></code></pre></div><p>That’s how Ohkami generates OpenAPI document!</p><h2>\n  \n  \n  Appendix: Cloudflare Workers\n</h2><p>There is, however, a problem in , Cloudflare Workers: where Ohkami is loaded to Miniflare or Cloudflare Workers as WASM, so it can only generate OpenAPI document as data and cannot write it to the user’s local file system.</p><div><pre><code></code></pre></div><p>generates OpenAPI document!</p><p>Thank you for reading. If you’re interested in Ohkami, check out the <a href=\"https://github.com/ohkami-rs/ohkami\" rel=\"noopener noreferrer\">GitHub repo</a> and start coding!</p>","contentLength":2709,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Bringing Nest.js to Rust: Meet Toni.rs, the Framework You’ve Been Waiting For! 🚀","url":"https://www.reddit.com/r/rust/comments/1iprsmo/bringing_nestjs_to_rust_meet_tonirs_the_framework/","date":1739587338,"author":"/u/Mysterious-Rust","guid":284,"unread":true,"content":"<p>As a Rust developer coming from TypeScript, I’ve been missing a Nest.js-like framework — its modularity, dependency injection, and CLI superpowers. But since the Rust ecosystem doesn’t have a direct counterpart (yet!), I decided to build one myself! 🛠️</p><p>Introducing… <a href=\"https://crates.io/crates/toni\">Toni.rs</a> — a Rust framework inspired by the Nest.js architecture, designed to bring the same developer joy to our favorite language. And it’s live in beta! 🎉</p><p>Here’s what makes this project interesting:</p><p>Scalable maintainability 🧩:</p><p>A modular architecture keeps your business logic decoupled and organized. Say goodbye to spaghetti code — each module lives in its own context, clean and focused.</p><p>Need a complete CRUD setup? Just run a single CLI command. And I have lots of ideas for CLI ease. Who needs copy and paste?</p><p>Automatic Dependency Injection 🤖:</p><p>Stop wasting time wiring dependencies. Declare your providers, add them to your structure, and let the framework magically inject them. Less boilerplate, more coding.</p><p>Leave your thoughts below — suggestions, questions, or even just enthusiasm! 🚀 </p>","contentLength":1089,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tabiew 0.8.4 Released","url":"https://www.reddit.com/r/rust/comments/1ipp72r/tabiew_084_released/","date":1739578902,"author":"/u/shshemi","guid":285,"unread":true,"content":"<p>Tabiew is a lightweight TUI application that allows users to view and query tabular data files, such as CSV, Parquet, Arrow, Sqlite, and ...</p><ul><li>📊 Support for CSV, Parquet, JSON, JSONL, Arrow, FWF, and Sqlite</li><li>🗂️ Multi-table functionality</li></ul><ul><li>UI is updated to be more modern and responsive</li><li>Horizontally scrollable tables</li><li>Visible data frame can be referenced with name \"_\"</li><li>Compatibility with older versions of glibc</li><li>Two new themes (Tokyo Night and Catppuccin)</li></ul>","contentLength":450,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Generate a Momento Disposable Token with Rust and Lambda","url":"https://dev.to/aws-builders/generate-a-momento-disposable-token-with-rust-and-lambda-1a58","date":1739552249,"author":"Benjamen Pyle","guid":550,"unread":true,"content":"<p>Working with browser hosted code (UI) requires a developer to be cautious about exposing secrets and tokens.  A less than trustworthy person could take these secrets and do things that the user doesn't intend.  And while we are all responsible for our internet usage, token and secrets security from an application standpoint falls squarely on a developer's shoulders.  This is why when using <a href=\"https://www.gomomento.com/\" rel=\"noopener noreferrer\">Momento</a>, I like to take advantage of the Authorization API.  What the Authorization API allows me to do is create a disposable token from a secure location, so that my UI clients can just refresh them as needed to work with Topics or Caches.  Thus, not having the credential leak up into the \"easy to see\" JavaScript code.  Let's dive into a Lambda Function coded in Rust that implements this Token Vending Machine concept with Momento.</p><p>I usually like to work backwards to forwards, meaning I establish what I want in the end and then build from there.  When looking at a sample implementation, that means starting from the diagram and walking through what I'm building.</p><p>A user's session will need to establish an authenticated and authorized connection to Momento by way of the JavaScript client SDK.  Every call to Momento is over an HTTP API request so it's going to get authenticated and authorized.  Which is a good thing!  However, doing this, requires a token which is what I'll be fetching from the Rust Lambda Function that will be demonstrated throughout the article.  The flow goes like this:</p><p>1) User requires a token to connect to Momento\n2) Browser makes a request to an endpoint backed by a Lambda Function<p>\n3) Rust Lambda Function uses a long-lived and secure API Token that has permissions to create short-lived disposable tokens</p>\n4) Rust Function uses the Momento SDK to request a token with the supplied Topic and Cache names with scopes to publish and subscribe<p>\n5) A token is returned from the Lambda Function where the client code can use to subscribe to a Momento topic.</p>\n6) The token has an expiration timestamp represented as a Unix Epoch so that the client can refresh before the token has a chance to expire</p><p>So let's walk through those steps above and explore the implementation.</p><h3>\n  \n  \n  Implementing a Momento Token Vending Machine with Rust\n</h3><p>I know I'm focusing on Lambda, Momento, and Rust, but there are many other components that go into what I'd consider a quality Lambda Function build.  To address those, let's have a look at the CDK code and what all gets shipped to AWS.</p><p>TypeScript has become my goto when it comes to creating AWS infrastructure.  I like the CDK, and I especially like having the ability to use the Cargo Lambda CDK Construct.  If you haven't used it before, check out the <a href=\"https://github.com/cargo-lambda/cargo-lambda-cdk\" rel=\"noopener noreferrer\">repository</a> and jump into the documentation.  It's straightforward and the classes inherit from AWS bases.  In addition to Cargo Lambda, I like to include the <a href=\"https://www.instagram.com/reel/DFsdRBvAcyQ/?utm_source=ig_web_copy_link\" rel=\"noopener noreferrer\">Datadog Lambda Extension</a>.  This piece of goodness allows me to collect my <a href=\"https://binaryheap.com/rust-and-opentelemetry-with-lambda-datadog/\" rel=\"noopener noreferrer\">OpenTelemetry</a> traces into the Datadog UI for easy assessment of performance and any latency or error issues.  I'll highlight further as the article evolves.</p><p>Here we go! The below is the CDK code that brings the above together.</p><h5>\n  \n  \n  Adding the Datadog Extension\n</h5><p>Pay special attention to the following when adding the Datadog extension.</p><ul><li>Region: I'm using the region my Lambda function is hosted in</li><li>ARM/x64: I'm picking the chip architecture that my Lambda Function is compiled for.\n</li><li>Version: 68 in this case, but  can also be used.\n</li></ul><div><pre><code></code></pre></div><p>I'm going to use a long-lived API key with Momento so that this Lambda Function can make requests without worrying about expiration.  This is completely acceptable solution.  Think of it like a scoped API key essentially.  To set that up, I'm using AWS SecretsManager.</p><div><pre><code></code></pre></div><h5>\n  \n  \n  Cargo Lambda Rust Function\n</h5><p>Wrapping up the infrastructure components is the definition of the Rust Lambda Function and granting its ability to read from the secret defined above in SecretsManager.  Additionally, I'm exposing the function over a FunctionURL.  This of course could be internal behind an Application Load Balancer or exposed behind a variety of API Gateway setups.  The FunctionURL just makes this example simple to pull together.</p><p>Key things to point out in the  are:</p><ul><li>Architecture: set to ARM because I prefer to run on the AWS Graviton chips</li><li>Environment: \n\n<ul><li>Setting RUST_LOG allows me to control crate log levels (this is a convention)\n</li></ul></li></ul><div><pre><code></code></pre></div><p>At this point, using CDK, I can easily run a  and my code will be live in AWS in just a couple of minutes.  However, I'd like to dive in further on the Rust and Lambda code, specifically addressing the Momento Auth pieces</p><p>All Rust code (unless it's a lib) starts out with a  function.  Even Lambda Functions must have a .  In my  below, I'm setting up Momento, Datadog, OpenTelemetry, and other reusable components.  Since my handler is what is called over and over, I want to have things warm and in memory, ready to use as events come in.</p><p>To initialize the OpenTelemetry, I'm establishing a telemetry layer which I'm registering.</p><div><pre><code></code></pre></div><p>The next pieces of  are about fetching the Momento API key from the AWS secret I defined in the infrastructure.  And with that secret, I'll construct an instance of the Momento Auth client so that I can communicate with the Auth API and create the disposable tokens.</p><div><pre><code></code></pre></div><p>With all Lambda Functions, I need to define a function that will be called when the Lambda Function is supplied events.  For web APIs, that event is a request from an external client.   My  establishes this connection by the following code.</p><div><pre><code></code></pre></div><p>As exposed, I need to send a Momento client, the expiration in minutes I want to let the token be valid for, and the event which is the web request.</p><div><pre><code></code></pre></div><p>The Lambda Function handler does the following.</p><ul><li>Parse the body of the request \n\n<ul><li>Body in the correct format then generate the token</li><li>If not, return a 400 BAD REQUEST</li></ul></li></ul><p>For the request body, I'm expecting it to look like this.</p><div><pre><code></code></pre></div><p>The Rust structure that this serializes into has the following definition.</p><div><pre><code></code></pre></div><p>Now with a struct populated with my request data, I can look at how to generate the disposable token.  It's much easier than I thought it might be.</p><h5>\n  \n  \n  Generating the Disposable Token\n</h5><p>This disposable token logic is the heart of this Lambda Function's existence.  Remember, Client code or the UI is going to request a token that I want to scope down to the cache and topic supplied in the payload.  This will guarantee that the client has access to what's needed for the duration defined the environment variable discussed above.</p><div><pre><code></code></pre></div><p>Let's break the above down just a little.  First up is the  and .</p><p>The  plugs into OpenTelemetry that allows me to time the Momento operations by way of the Rust Instrument trait.  I highly recommend any Rust code you write take advantage of these opportunities.  Tracing in the spirit of observability will make finding errors and poor user experiences so much easier when you start to get some volume.</p><div><pre><code></code></pre></div><p>The next piece of this function is to create the Disposable token.   are a required parameter to the <code>generate_disposable_token</code> function.  For my example, I'm giving the token access to Publish and Subscribe to the Cache/Topic combination.  And notice that the  parameter is finally being used to round out the function call.</p><div><pre><code></code></pre></div><p>The last piece of the function is to create the .  The values returned from the Momento function call are used to populate the struct.</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Measuring Performance with Datadog and OpenTelemetry\n</h3><p>So I can't end an article just demonstrating how to fetch disposable tokens written in Rust and deployed in a Lambda Function without talking about performance.  I am always blown away at the speed of Momento's services.  I hadn't done much work with the Auth API so I wanted to see if the timings that I've been accustomed to with Cache and Topics also held true with Auth.  </p><p>With the observability code using OpenTelemetry that I've shown above, I'm able to not only track the Lambda Function's execution timings, but also the Momento specific API calls via the  trait that I showed above.  I bring this metrics and traces together via Datadog because there isn't a better tool on the market to help me observe my Lambda Functions as well as other cloud resources.</p><h5>\n  \n  \n  High Level Function Latency\n</h5><p>First up is looking at the high level Lambda Function latency. I'm graphing the 50th, 75th, 90th, and 95th percentiles with this Datadog line graph.</p><p>I've <a href=\"https://binaryheap.com/rust-and-lambda-performance/\" rel=\"noopener noreferrer\">written about Rust and Lambda performance</a> quite a bit over the past 18 months, but I'm always amazed at how quickly and consistently my function code performs with Rust. I can also make the <a href=\"https://binaryheap.com/caching-with-momento-and-rust/\" rel=\"noopener noreferrer\">same statements</a> when it comes to pairing Rust with Momento.  Time and time again, their platform performs consistently, regardless of the load and requests I throw at it.  The same can be said about the Auth API that I'm exercising here.  Consistent p95 latency at the 3ms is just fantastic and not going to be noticeable by an end user.</p><p>High level tracing is great and something that I love about using Datadog, but since I took advantage of the  trait further up, let's have a look at exactly how the Momento Auth operations play into the overall function latency.</p><p>This table shows the two spans that are included in the overall latency of the Lambda Functions execution.  If you remember from the code well above, I called the Momento Auth span .  I'm happy all day long with an average latency of 1.25ms and a tail p99 latency of 2.19ms.  I can't recommend their <a href=\"https://docs.momentohq.com/platform/sdks/rust\" rel=\"noopener noreferrer\">Rust SDK</a> enough.  It is my first and preferred way to work with Momento.</p><p>Working with client code that is insecure by nature that also needs to authenticate with the Momento API for things like Topic subscriptions can be a challenge.  However, by implementing a token vending machine with Rust, deployed with Lambda, and monitored with Datadog produces a solution that is fast, reliable, and observable.  </p><p>I've been saying this for a while, but I truly believe that building Lambda Functions with Rust is the way to go.  And I love seeing companies like Momento invest in Rust specific SDKs.  This feature to build disposable tokens was just added in 2025 and will unlock developers to implement this vending machine pattern in Rust like I've shown the article.  </p><p>Thanks for reading and happy building!</p>","contentLength":10231,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Upskilling to Rust from Python","url":"https://dev.to/rustds/upskilling-to-rust-from-python-mok","date":1739550595,"author":"Michael Gonzalez","guid":549,"unread":true,"content":"<p>I’m a long-time data analyst with some data engineering experience. My overall stack time is about:</p><ul><li>Tableau Desktop – 10 years</li></ul><p>A few years ago, I embarked on a mission to be full stack. I picked up Python and learned how to do ETL operations on my own. I’ve heard great things about the speed and efficiency benefits of Rust over Python, so I wanted to put it to the test.</p><p>The basic question I have is: what is the absolute furthest that I can take Rust in the direction of data science (to include AI applications) and data engineering? The library environment for data science is extremely robust for Python and I know it’s substantially smaller for Rust, but I’m still interested in taking it as far as I can. Over the next few months, I’m going to be upskilling in Rust and seeing where Rust for DS goes.</p><p>I’m very aware of structural differences of Rust compared to Python. Memory management and static typing are elements that I’ve never had to care about, but it’s going to need to be a consideration moving forward. Ultimately, I think giving Rust a try will make me a more consciencious developer in that there are a lot of things I just took for granted with Python and SQL.</p><p>I know absolutely no Rust right now, so I’m leaning on Duke University’s Rust Fundamentals course through Coursera to get me up to speed on the basics.</p><p>The first week of the course revolved around setting up the VS Code environment for Rust, deploying GitHub Copilot, setting up the dev container, and dockerizing it.</p><p>I’m very familiar with VS Code for local development, but actually using Docker and working in a containerized environment is new. I’ve been wanting to containerize my org’s Python development environment for at least a year (it’s further down the to-do list), so spending some time on this is gonna pay off later on.</p><p>No actual Rust development work yet. Looking ahead, it appears that week 2 of the course jumps right into for and while loops. Ech, not a favorite topic of mine, but essential nonetheless.</p><p>Anyone else using Rust for data operations?</p>","contentLength":2073,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"1BRC in PHP FFI + Rust","url":"https://dev.to/gfabrizi/1brc-in-php-ffi-rust-5ed9","date":1739524380,"author":"Gianluca Fabrizi","guid":548,"unread":true,"content":"<p>We have tried multi-threading in PHP to speed up execution time; the results are good, but far from perfect. Is there another way we can improve PHP's performance?</p><p>In the previous post, we gave an overview of 1BRC, tried to push the limits of PHP when discussing performance optimization, and ran our best PHP script on an EC2 instance.</p><p>The results were not bad, but not noteworthy either: 17.0636 seconds (the fastest Java code took 1.535 seconds).</p><p>So what are we supposed to do? Call it a day and get on with our lives? No, obviously not!\nWe could \"cheat\" our way to a better score, by abusing one of Python's winning strategies: letting external libraries do the heavy lifting job!</p><h2>\n  \n  \n  Foreign Function Interface\n</h2><p>One of the ways to optimize an interpreted language is by moving the slow operations in an external module, usually written in a low-level language.\nIn PHP you can write system-wide modules and enable them in ; this is useful for generic functions or for code that is not specific to one application.\nSince version 7.4 PHP introduced a new feature: Foreign Function Interface (FFI).<p>\nFFI is a method for calling external libraries in your PHP coding, without changing global PHP configuration.</p>\nThis method is more flexible than dealing with modules, but configuring it could be a bit daunting at first.</p><p>Let's try to wrap a Rust solution of 1BRC in a PHP script (yes, ok, we are definitely cheating).</p><p>To keep things simple we need a Rust solution that:</p><ol><li>it's written in a clear way</li><li>it's composed of a few files</li></ol><p>There's no need to explain point ; points  and  are needed because we are going to modify the code to make it work as a module.\nI love Rust, but I'm not a Rust programmer, so the simpler the code the better.  </p><p>First of all, we clone the repository, then we edit the  file to add some options:</p><div><pre><code></code></pre></div><p>In the  section, we enabled additional performance optimizations (, , ); we added the  section, where we specify that we want to compile the source as a  library (shared libraries that can be linked into external programs).  </p><p> file is used just to call ; we remove this file and add a  method in :</p><div><pre><code></code></pre></div><p> disables the mangle (in short: it keeps the function's name in the exported library) and marks this function as \"to export\".  </p><p>We are cheating, but in a responsible way 😅: from PHP code, we pass the weather data filename to the Rust module. Then the Rust module returns the station's aggregated data to be displayed.\nPHP is a loosely-typed language, while Rust is a strongly-typed language, so moving data between the two can be a bit of a challenge-in-the-challenge. We need  crate and  from .  </p><p>The code needed to convert from PHP String to Rust string slice has been taken from ; using it's words:</p><blockquote><p>Getting a Rust string slice (&amp;str) requires a few steps:</p><ol><li><p>We need to make sure that the C pointer is not  as Rust references are not allowed to be .</p></li><li><p>Use  to wrap the pointer.  will compute the string's length based on the terminating . This requires an  block as we will be dereferencing a raw pointer, which the Rust compiler cannot verify meets all the safety guarantees so the programmer must do it instead.</p></li><li><p>Ensure the C string is valid UTF-8 and convert it to a Rust string slice.</p></li></ol></blockquote><p>In  we use this code:</p><div><pre><code></code></pre></div><p>to return a JSON string to the PHP script.  </p><p>That's it for Rust; we can compile the library with:</p><p>On the PHP side first of all we need a class to manage the input and output of th Rust module. Let's create a file called :</p><div><pre><code></code></pre></div><p>The constructor's code uses  to import the Rust function from the  file.\nHere we have to declare the extern function's signature using C code, so the Rust  parameters, become .</p><p>: it's also possible to use a  header file to specify the function(s) that PHP needs to know about; since we only need one simple function, it is easier to declare it inline in PHP code.</p><p>The  method invokes the  method of the Rust module (<code>self::$ffi-&gt;run($filename)</code>). We called both this wrapper method and the Rust function with the same name (); this is only a coincidence (...or lack of fantasy); it's not mandatory. converts the pointer to a String usable in PHP.</p><p>We also need an  file to instantiate this  class and to print the results:</p><div><pre><code></code></pre></div><p>Nothing interesting here: we call our  method, passing it the measurements filename.\nThe JSON string from Rust contains temperatures as integers, so we need to divide them by 10 and calculate the average temperature for each station.</p><p>Let's run this code on the EC2 instance. The configuration is the same as last time: an  with 32 vCPUs and 128GB of memory. For the hard disk, I opted for a 200GB io1 volume (to reach 10,000 IOPS).</p><div><pre><code>perf  1B-ffi.log  10  php app/index.php\n</code></pre></div><p>and these are the results:</p><div><pre><code> Performance counter stats for 'php app/index.php' (10 runs):\n\n          58802.93 msec task-clock                       #   29.718 CPUs utilized            ( +-  0.26% )\n              4736      context-switches                 #   80.191 /sec                     ( +-  3.80% )\n                57      cpu-migrations                   #    0.965 /sec                     ( +- 13.37% )\n             52703      page-faults                      #  892.378 /sec                     ( +-  1.33% )\n   &lt;not supported&gt;      cycles                                                      \n   &lt;not supported&gt;      instructions                                                \n   &lt;not supported&gt;      branches                                                    \n   &lt;not supported&gt;      branch-misses                                               \n   &lt;not supported&gt;      L1-dcache-loads                                             \n   &lt;not supported&gt;      L1-dcache-load-misses                                       \n   &lt;not supported&gt;      LLC-loads                                                   \n   &lt;not supported&gt;      LLC-load-misses                                             \n\n            1.9787 +- 0.0197 seconds time elapsed  ( +-  1.00% )\n</code></pre></div><p>1.9787 seconds! 🥳 🎉<p>\nThis is a surprising result, considering the overhead of calling an external module and the fact that we are still making some calculations on the PHP side of the app.</p></p><p>After this 2-parts-journey we can affirm that:</p><ol><li>PHP is slow, but the performance improves significantly when using threads</li><li>Performance tuning is a game of trade-offs: you can improve the speed of a task by saturating all the CPU cores, but your system will become unresponsive. In PHP this is a problem if your application needs to accept more than one connection at a time</li><li>For heavy tasks, you can delegate to optimized external libraries</li></ol><p>I hope you enjoyed the post!</p>","contentLength":6534,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How I Built Open Source Fastest URL Shortener Ever With Rust","url":"https://dev.to/abdibrokhim/how-i-built-open-source-fastest-url-shortener-ever-with-rust-4ggm","date":1739516029,"author":"Ibrohim Abdivokhidov","guid":547,"unread":true,"content":"<p>In this tutorial, I’ll be walking you thro building notlink - an open source, blazingly fast URL shortener ever. If you are Rust luver. You should definitely check this out. ✨</p><ul><li>Shuttle (cloud deployment)</li><li>Actix Web (backend framework)</li><li>Neon (serverless PostgreSQL)</li><li>Diesel (ORM for database magic)</li></ul><p>What we’ll be covering:\n✅ Setting up a Rust project from scratch<p>\n✅ Integrating Diesel ORM with PostgreSQL (Neon)</p>\n✅ Building API endpoints (URL shortening/redirection)<p>\n✅ Database migrations, models, and helper functions (crypto, random code generation)</p>\n✅ Shuttle deployment hacks (including fixing libpq.so.5 issues with a custom script!)<p>\n✅ Testing with curl and troubleshooting</p></p><p>Instructor:\nHi, I'm Ibrohim. I build things and make content about it. Known mostly for 70+ Hackathons, 400+ Fails, 4+ Papers, 200K+ Creators, 2+ OS Contributions and $OC, $TROC Meme Coins. 👻</p><p>Chapters:\n00:00 introduction\n01:13 getting started with backend<p>\n02:54 creating a new Rust project</p>\n04:00 Diesel ORM integration\n08:15 testing simple app\n09:48 DB migration and creating tables\n11:55 creating models\n13:25 DB operations\n15:50 encryption and decryption\n19:00 main.rs<p>\n19:45 running and testing the app</p>\n20:38 deploy to Shuttle and testing real url<p>\n22:00 looking thro Neon DB tables and data</p>\n22:30 final notes. wrap up.<p>\n27:45 outro. my message to ya'll</p></p>","contentLength":1339,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"5 Learnings from sharing Kafka vs Fluvio Benchmarks on Reddit","url":"https://dev.to/debadyuti/5-learnings-from-sharing-kafka-vs-fluvio-benchmarks-on-reddit-34","date":1739492573,"author":"Deb","guid":546,"unread":true,"content":"<p>To have a readable blog, all the links are at the bottom except the link to the Fluvio project.</p><p>Yesterday, I shared a blog on benchmarking results comparing Fluvio, our next-generation streaming engine, with Apache Kafka. </p><p>The response from the Rust community was encouraging, with over 30,000 impressions, 80+ upvotes, and 40+ comments in just 24 hours. The feedback was invaluable, and I want to share the 5 things I learned from all the developer feedback.</p><p><a href=\"https://github.com/infinyon/fluvio\" rel=\"noopener noreferrer\">Fluvio</a> is a distributed streaming engine built in Rust over the past six years. While it follows Apache Kafka's conceptual patterns, it introduces programmable design patterns through Rust and WebAssembly-based stream processing called Stateful DataFlow (SDF). This makes Fluvio a complete platform for event streaming.</p><h3>\n  \n  \n  1. Developers care a lot about the benchmark environment.\n</h3><p>The community emphasized the importance of comprehensive testing environments:</p><ul><li>Need for bare metal servers to eliminate virtualization artifacts</li><li>Production-grade setups with proper replication (factor of 3)</li><li>Large-scale validation with terabyte-scale live data</li></ul><p>The ideal benchmarks will be using real-world data from Blockchain, High-Frequency Trading, or Ad-Tech on bare metal servers and compare multiple systems like Kafka, RedPanda, Pulsar.</p><h3>\n  \n  \n  2. Intelligent developers know about the trade-offs of using different hardware.\n</h3><p>Developers highlighted several hardware-specific considerations:</p><ul><li>ARM Graviton chips' latency variations in virtualized environments</li><li>Importance of testing across different CPU architectures including x86</li><li>Thermal throttling differences between consumer laptops and server-grade hardware</li></ul><h3>\n  \n  \n  3. Seasoned developers want production-ready configuration for each solution being configured\n</h3><p>Runtime mechanics need to reflect real-world scenarios:</p><ul><li>Specific JVM and Garbage Collector configurations for Kafka benchmarking</li><li>Resource utilization patterns under various loads</li><li>Multi-node deployment testing at scale</li></ul><h3>\n  \n  \n  4. While benchmarks are great benchmarking in mature categories require mention of table-stakes features\n</h3><p>Key functionality developers look for:</p><ul><li>Consumer groups for ordered delivery per partition</li><li>Stream and batch processing capabilities</li><li>Robust delivery guarantees</li></ul><h3>\n  \n  \n  5. Benchmarks also immediately makes developers think of reliability and debugging experience\n</h3><p>Critical operational features:</p><ul><li>Dead letter queue implementations</li><li>Retry strategies for network issues</li><li>Delivery proof mechanisms beyond best-effort</li></ul><h2>\n  \n  \n  The New Streaming Paradigm\n</h2><p>Event streaming is a basic pattern in a world filled with agents.</p><p>Wise developers focus on:</p><ul><li>Practical performance over theoretical maxima</li><li>Transparent benchmarking methodology</li><li>Intuitive deployment and management</li></ul><h2>\n  \n  \n  Our Vision for Next Generation Data Intensive Applications\n</h2><p>We believe the next wave of intelligent applications will come from builders who:</p><ul><li>Challenge traditional infrastructure assumptions</li><li>Require millisecond latencies at scale</li><li>Prioritize resource efficiency</li></ul><p>We don't just need faster systems - we need smarter ones that don't drain budgets or sanity.</p><p>The future belongs to systems that balance raw performance with operational wisdom. The question isn't just about speed—it's about enabling rapid innovation delivering an intuitive developer ergonomics while maintaining efficiency and reliability.</p>","contentLength":3331,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why We Built an AI Gateway in Rust: A Performance-Centric Decision","url":"https://dev.to/langdb/why-we-built-an-ai-gateway-in-rust-a-performance-centric-decision-2nb8","date":1739472254,"author":"Mrunmay Shelar","guid":545,"unread":true,"content":"<p>When building our AI gateway, we knew performance would be a critical factor. Unlike most AI software written in Python, an AI gateway acts as the  between users and inference engines. This gateway must handle , , and  efficiently. Python, while dominant in the AI ecosystem, struggles under these demands due to its  and limitations with concurrency.</p><p>To demonstrate why we chose , we benchmarked three popular programming environments—, , and —to evaluate their performance under high-load conditions. Rust emerged as the clear winner, offering predictable and stable performance even at scale.</p><h3>\n  \n  \n  Benchmark Setup: Simulating Real-World AI Traffic\n</h3><p>We built an  and a corresponding client to mimic real-world AI workloads. Here’s how the setup worked:</p><ul><li><p>Streams <strong>tokens at a fixed inter-token latency of 25ms</strong>, similar to the tokenized output of an AI inference engine.</p></li><li><p>Uses HTTP/2 to deliver tokenized data efficiently to multiple clients.</p></li><li><p>Implements asynchronous programming to support thousands of connections concurrently.</p></li></ul><ul><li><p>Gradually establishes up to <strong>15,000 simultaneous connections</strong> to the server.</p></li><li><p>Measures the —the time between consecutive tokens received from the server. This metric reflects the server’s ability to scale under increasing load.</p></li><li><p>Ensures that connections remain stable and records latency for each connection.</p></li></ul><ol><li><p>The server was implemented in , , and  to ensure a fair comparison.</p></li><li><p>The client progressively increased the number of active connections, starting with a small number and scaling up to 15,000.</p></li><li><p>Intra-token latency measurements were collected for each implementation to evaluate performance under load.</p></li></ol><h3>\n  \n  \n  Results: Rust vs. Python vs. JavaScript (Node.js)\n</h3><p>The chart below illustrates the  (in milliseconds) as the number of concurrent connections increases:</p><ul><li><ul><li>Rust exhibited the most stable performance, maintaining a near-linear increase in latency as connections scaled.</li><li>At , Rust's intra-token latency reached approximately , only 3x the baseline inter-token latency of 25ms.</li><li>Rust’s efficiency highlights its ability to handle high concurrency without significant degradation.</li></ul></li><li><ul><li>Python's intra-token latency grew exponentially, exceeding <strong>200ms at 15,000 connections</strong>.</li><li>This exponential growth demonstrates Python's inherent limitations in managing large-scale concurrency and resource contention.</li></ul></li><li><ul><li>Node.js initially performed better than Python, maintaining lower latency up to .</li></ul><p>However, its performance began to degrade significantly beyond this point, reaching over <strong>150ms at 15,000 connections</strong>.</p><ul><li>This result underscores Node.js’s event-driven model, which works well for moderate concurrency but struggles under extreme loads.</li></ul></li></ul><h3>\n  \n  \n  Why Rust is the Best Choice for an AI Gateway\n</h3><ol><li><p><strong>Predictable, Scalable Performance:</strong></p><p>Rust’s ability to maintain <strong>75ms latency at 15,000 connections</strong> demonstrates its scalability. Its near-linear latency growth makes it ideal for high-concurrency systems.</p></li><li><p><strong>Concurrency Without Compromise:</strong></p><p>Rust’s async programming model (e.g., Tokio) efficiently manages thousands of simultaneous connections. Unlike Python, Rust avoids the bottlenecks of the <strong>Global Interpreter Lock (GIL)</strong> and utilizes system resources optimally.</p></li><li><p>Rust compiles directly to machine code, ensuring minimal runtime overhead. Its memory safety and zero-cost abstractions allow for predictable and efficient resource management.</p></li><li><p>Rust provides fine-grained control over threading and memory, making it the best choice for performance-critical applications like AI gateways.</p></li></ol><h3>\n  \n  \n  Why Python and JavaScript Fall Short\n</h3><ol><li><p>: The GIL prevents true multi-threading, causing severe bottlenecks under high load.</p><p>: Python's interpreted nature adds significant latency, making it unsuitable for latency-sensitive applications.</p><p>: As connections increase, Python's performance deteriorates rapidly, with latency exceeding acceptable thresholds.</p></li><li><p>: Node.js performs well under moderate concurrency but struggles as the number of simultaneous connections grows beyond 7,500.</p><p>: While Node.js handles asynchronous I/O well, it lacks the low-level control offered by Rust, leading to degraded performance at scale.</p></li></ol><h3>\n  \n  \n  Why AI Gateways Must Be Built with Performance in Mind\n</h3><p>An AI gateway is more than a simple intermediary. It plays a critical role in ensuring:</p><ul><li><p> Users expect tokenized outputs to arrive with minimal delay, making low latency essential.</p></li><li><p> AI gateways must handle thousands or tens of thousands of simultaneous connections to accommodate large-scale applications.</p></li><li><p> Inconsistent performance or connection drops can severely impact user experience and application reliability.</p></li></ul><p>Rust excels in all these areas, delivering <strong>predictable, stable performance at scale</strong>, making it the ideal language for building high-performance AI gateways.</p><h3>\n  \n  \n  The Takeaway: Rust is the Future of AI Gateways\n</h3><p>Our benchmark results clearly show that while Python and JavaScript (Node.js) have their strengths, they are ill-suited for building performance-critical AI gateways:</p><ul><li><p> struggles with concurrency and runtime overhead, leading to exponential latency growth.</p></li><li><p> performs better but falters under extreme loads, making it unreliable for high-concurrency scenarios.</p></li></ul><p>, on the other hand, delivers <strong>consistent, scalable performance</strong> with low latency, even at . By choosing Rust for our AI gateway, we’ve built an infrastructure that can handle the demands of modern AI applications with ease.</p><p>If you’re building an AI gateway or any performance-critical infrastructure, <strong>Rust isn’t just an option—it’s the solution</strong>. When every millisecond matters, Rust is the language that ensures you meet the challenge head-on.</p>","contentLength":5604,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Sprint 2 - Picking Up the Pace","url":"https://dev.to/theoforger/sprint-2-picking-up-the-pace-420a","date":1739461038,"author":"TheoForger","guid":544,"unread":true,"content":"<p>This is the end of Sprint 2. This Sprint has gotten me into a lot of joy and pain, and let me tell you all about it.</p><div><div><div><p>A proposal to add an  query</p><pre><code>GET https://foo.com\nHTTP 200\n[Asserts]\nip == \"192.168.0.1\"\n</code></pre><pre><code>GET https://foo.com\nHTTP 200\n[Asserts]\nip matches /2001:0000:130F:0000:0000:09C0:876A:\\d*/\n</code></pre><p>There is also a <a href=\"https://curl.se/libcurl/c/CURLINFO_LOCAL_IP.html\" rel=\"nofollow noopener noreferrer\"></a> but I've the impression that user expectation is more on primary ip.</p><p>Question: what's about port ? Does the query  exctract the IP address and the port (), or do we have a separate  query that we can do latter?</p><pre><code>GET https://foo.com\nHTTP 200\n[Asserts]\nip == \"192.168.0.1\"\nport == 8080\n</code></pre><p>With /as separated queries, we can also have  and  predicates:</p><pre><code>GET https://foo.com\nHTTP 200\n[Asserts]\nip isIPv6\n</code></pre></div></div></div>\nThis week I've been working to implement this feature to enable hurl users to assert on IP addresses for each request. Since there were quite a few things to do, I decided to break it into multiple PRs.\n<h3>\n  \n  \n  Add ip address to http::Response (<a href=\"https://github.com/Orange-OpenSource/hurl/pull/3695\" rel=\"noopener noreferrer\">Link</a>)\n</h3><p>This was a continuation from last week's research. To make the asserts work, first I had to capture that from libcurl and include it in Hurl's  module.</p><p>To achieve that, I used the method <a href=\"https://docs.rs/curl/latest/curl/easy/struct.Easy2.html#method.primary_ip\" rel=\"noopener noreferrer\"></a> provided by the  crate. There was some issues regarding the return type of this method and the implementation of type conversions, but we worked it out <a href=\"https://dev.to/theoforger/sprint-2-getting-stuck-a-little-4pfh\">during the previous Sprint</a>.</p><p>Other than that, nothing much happened in this PR. There was some changes regarding names and documentation, but it was merged quickly after.</p><h3>\n  \n  \n  Allow assert on ip address (<a href=\"https://github.com/Orange-OpenSource/hurl/pull/3705\" rel=\"noopener noreferrer\">Link</a>)\n</h3><p>After last week's discussion, we decided to simply use the  type to handle ip address queries in the Hurl file. At that point I didn't really understand much of the code, but I was able to find a similar query option : . Imitating the code, I was able to create a new query entry.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>To my surprise, when I tested it afterwards, everything worked! ,  or ... All the keywords was properly working. Turned out Hurl already had the code to handle all string typed queries generically, so all I had to do was creating the query and plugging it right in. Super cool!</p><h3>\n  \n  \n  Allow asserts on ip versions (<a href=\"https://github.com/Orange-OpenSource/hurl/pull/3715\" rel=\"noopener noreferrer\">Link</a>)\n</h3><p>This was technically a different feature but it was still a part of the original issue. In this PR, instead of treating the IP address as a string and query on the text content, I had to figure out way to evaluate the IP version.</p><p>The maintainer suggested to simply take the IP query strings and convert them to . Since this is an enum built-in with the  and  variants, if the conversion succeeds, I could match the pattern to get the IP version.</p><p>However, this task was not nearly as straightforward as the last PR. Since I didn't fully understand the code, I had a very difficult time locating where I even implement this conversion.</p><p>First I was determined to figure this out myself. I sat down and carefully read the code, I drafted a few diagrams to help me understand the workflow. However, in Hurl's file parser, whenever I tried to print something, or use the debugger to display something, I would get a strange-looking structure instead of actual text like so:</p><p>I was beyond confused. I had to ask the maintainer about this. Turned out they were using something called an AST (abstract syntax tree). This structure maps the relative locations of each section of the file without actually parsing them. You can <a href=\"https://github.com/Orange-OpenSource/hurl/issues/3106#issuecomment-2643250787\" rel=\"noopener noreferrer\">read more</a> in the maintainer's comment.</p><p>With that knowledge in mind and a bit more research, I finally was able to implement this feature. Now I'm still going back and forth with the maintainer regarding error handling, but I'm sure this feature will land soon!</p><h3>\n  \n  \n  Update @aws-sdk/client-route-53 (<a href=\"https://github.com/DevelopingSpace/starchart/pull/830\" rel=\"noopener noreferrer\">Link</a>)\n</h3><p>I was looking at Starchart yesterday and saw a list of pull requests opened by , one of which had a failed CI check. I decided to look in a little further. This <a href=\"https://github.com/DevelopingSpace/starchart/pull/829\" rel=\"noopener noreferrer\">pull request</a> attempted to update the package  from 3.360.0 to 3.744.0. That's quite a bit gap in version numbers.</p><p>The CI pipeline failed because of a type mismatch. I started by checking <a href=\"https://github.com/aws/aws-sdk-js-v3/blob/main/clients/client-route-53/CHANGELOG.md\" rel=\"noopener noreferrer\">the changelog</a> but I didn't notice any changes regarding types.</p><p>Fortunately, my IDE was able to help me with locate two new types introduced in the new version:</p><div><table><tbody><tr><td><pre>/**\n * <a href=\"https://dev.to/public\">@public</a>\n * @enum\n */\nexport declare const RRType: {\n    readonly A: \"A\";\n    readonly AAAA: \"AAAA\";\n    readonly CAA: \"CAA\";\n    readonly CNAME: \"CNAME\";\n    readonly DS: \"DS\";\n    readonly HTTPS: \"HTTPS\";\n    readonly MX: \"MX\";\n    readonly NAPTR: \"NAPTR\";\n    readonly NS: \"NS\";\n    readonly PTR: \"PTR\";\n    readonly SOA: \"SOA\";\n    readonly SPF: \"SPF\";\n    readonly SRV: \"SRV\";\n    readonly SSHFP: \"SSHFP\";\n    readonly SVCB: \"SVCB\";\n    readonly TLSA: \"TLSA\";\n    readonly TXT: \"TXT\";\n};\n/**\n * <a href=\"https://dev.to/public\">@public</a>\n */\nexport type RRType = (typeof RRType)[keyof typeof RRType];\n</pre></td><td><pre>\n/**\n * <a href=\"https://dev.to/public\">@public</a>\n * @enum\n */\nexport declare const ChangeAction: {\n    readonly CREATE: \"CREATE\";\n    readonly DELETE: \"DELETE\";\n    readonly UPSERT: \"UPSERT\";\n};\n/**\n * <a href=\"https://dev.to/public\">@public</a>\n */\nexport type ChangeAction = (typeof ChangeAction)[keyof typeof ChangeAction];\n\n</pre></td></tr></tbody></table></div><p>This part of the code is responsible for managing DNS records.  defines the type of DNS record and  defines the type of changes to perform on an existing record. While all these types were previously represented by .</p><p>I changed the code to the new types and filed a PR. Later the review came back, suggesting that I create a utility function to handle the type conversion. And this is where I'm at right now.</p><h2>\n  \n  \n  📝 Conclusion and What's Next\n</h2><p>This Sprint felt much more eventful than the last one. In the Hurl project, I was working on a different area of code, which means that more time were spent on search and asking questions. I also made more mistakes because of this unfamiliarity. On the Starchart's side, although I haven't taken much action yet, I suspect there to be more to come:</p><p>For the next Sprint, I might need to dial back a little on the Hurl project, since the maintainer mentioned that they have <a href=\"https://github.com/Orange-OpenSource/hurl/issues/2199#issuecomment-2646410667\" rel=\"noopener noreferrer\">stopped taking in new features</a> until the next release (). So my plan is to pick a few bugs to investigate there, while shifting my focus a little more to Starchart.</p>","contentLength":6049,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A new tool for visualizing Rust lifetimes","url":"https://www.youtube.com/watch?v=NV6Xo_el_2o","date":1739458834,"author":"Let's Get Rusty","guid":372,"unread":true,"content":"<article>See how RustOwl can help you understand lifetimes in a real Rust codebase. A brand-new tool designed to visualize Rust lifetimes and make learning Rust easier. Check it out and see how it can change the way you write Rust!\n\nFree Rust training: https://letsgetrusty.com/bootcamp\n\nRustOwl: https://github.com/cordx56/rustowl\n\nCorrections:\n- Bacon is a CLI tool, not a library. Check it out here: https://github.com/Canop/bacon</article>","contentLength":424,"flags":null,"enclosureUrl":"https://www.youtube.com/v/NV6Xo_el_2o?version=3","enclosureMime":"","commentsUrl":null},{"title":"2024 State of Rust Survey Results","url":"https://blog.rust-lang.org/2025/02/13/2024-State-Of-Rust-Survey-results.html","date":1739404800,"author":"The Rust Survey Team","guid":135,"unread":true,"content":"<p>The Rust Survey Team is excited to share the results of our <a href=\"https://blog.rust-lang.org/2024/12/05/annual-survey-2024-launch.html\">2024 survey on the Rust Programming language</a>, conducted between December 5, 2024 and December 23, 2024.\nAs in previous years, the 2024 State of Rust Survey was focused on gathering insights and feedback from Rust users, and all those who are interested in the future of Rust more generally.</p><p>This ninth edition of the survey surfaced new insights and learning opportunities straight from the global Rust language community, which we will summarize below. In addition to this blog post,  containing charts with aggregated results of all questions in the survey.</p><p><strong>Our sincerest thanks to every community member who took the time to express their opinions and experiences with Rust over the past year. Your participation will help us make Rust better for everyone.</strong></p><p>There's a lot of data to go through, so strap in and enjoy!</p><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr></tbody></table><p>As shown above, in 2024, we have received fewer survey views than in the previous year. This was likely caused simply by the fact that the survey ran only for two weeks, while in the previous year it ran for almost a month. However, the completion rate has also dropped, which seems to suggest that the survey might be a bit too long. We will take this into consideration for the next edition of the survey.</p><p>The State of Rust survey not only gives us excellent insight into how many Rust users around the world are using and experiencing the language but also gives us insight into the makeup of our global community. This information gives us a sense of where the language is being used and where access gaps might exist for us to address over time. We hope that this data and our related analysis help further important discussions about how we can continue to prioritize global access and inclusivity in the Rust community.</p><p>Same as every year, we asked our respondents in which country they live in. The top 10 countries represented were, in order: United States (22%), Germany (14%), United Kingdom (6%), France (6%), China (5%), Canada (3%), Netherlands (3%), Russia (3%), Australia (2%), and Sweden (2%). We are happy to see that Rust is enjoyed by users from all around the world! You can try to find your country in the chart below:</p><p>We also asked whether respondents consider themselves members of a marginalized community. Out of those who answered, 74.5% selected no, 15.5% selected yes, and 10% preferred not to say.</p><p>We have asked the group that selected “yes” which specific groups they identified as being a member of. The majority of those who consider themselves a member of an underrepresented or marginalized group in technology identify as lesbian, gay, bisexual, or otherwise non-heterosexual. The second most selected option was neurodivergent at 46% followed by trans at 35%.</p><p>Each year, we must acknowledge the diversity, equity, and inclusivity (DEI) related gaps in the Rust community and open source as a whole. We believe that excellent work is underway at the Rust Foundation to advance global access to Rust community gatherings and distribute grants to a diverse pool of maintainers each cycle, which you can learn more about <a href=\"https://rustfoundation.org/community\">here</a>. Even so, global inclusion and access is just one element of DEI, and the survey working group will continue to advocate for progress in this domain.</p><p>The number of respondents that self-identify as a Rust user was quite similar to last year, around 92%. This high number is not surprising, since we primarily target existing Rust developers with this survey.</p><p>Similarly as last year, around 31% of those who did not identify as Rust users cited the perception of difficulty as the primary reason for not using Rust. The most common reason for not using Rust was that the respondents simply haven’t had the chance to try it yet.</p><p>Of the former Rust users who participated in the 2024 survey, 36% cited factors outside their control as a reason why they no longer use Rust, which is a 10pp decrease from last year. This year, we also asked respondents if they would consider using Rust again if an opportunity comes up, which turns out to be true for a large fraction of the respondents (63%). That is good to hear!</p><blockquote><p>Closed answers marked with N/A were not present in the previous version(s) of the survey.</p></blockquote><p>Those not using Rust anymore told us that it is because they don't really need it (or the goals of their company changed) or because it was not the right tool for the job. A few reported being overwhelmed by the language or its ecosystem in general or that switching to or introducing Rust would have been too expensive in terms of human effort.</p><p>Of those who used Rust in 2024, 53% did so on a daily (or nearly daily) basis — an increase of 4pp from the previous year. We can observe an upward trend in the frequency of Rust usage over the past few years, which suggests that Rust is being increasingly used at work. This is also confirmed by other answers mentioned in the Rust at Work section later below.</p><p>Rust expertise is also continually increasing amongst our respondents! 20% of respondents can write (only) simple programs in Rust (a decrease of 3pp from 2023), while 53% consider themselves productive using Rust — up from 47% in 2023. While the survey is just one tool to measure the changes in Rust expertise overall, these numbers are heartening as they represent knowledge growth for many Rustaceans returning to the survey year over year.</p><p>Unsurprisingly, the most popular version of Rust is , either the most recent one or whichever comes with the users' Linux distribution. Almost a third of users also use the latest nightly release, due to various reasons (see below). However, it seems that the beta toolchain is not used much, which is a bit unfortunate. We would like to encourage Rust users to use the beta toolchain more (e.g. in CI environments) to help test soon-to-be stabilized versions of Rust.</p><p>People that use the nightly toolchain mostly do it to gain access to specific unstable language features. Several users have also mentioned that rustfmt works better for them on nightly or that they use the nightly compiler because of faster compilation times.</p><p>To use Rust, programmers first have to learn it, so we are always interested in finding out how do they approach that. Based on the survey results, it seems that most users learn from Rust documentation and also from <a href=\"https://doc.rust-lang.org/book/\">The Rust Programming Language</a> book, which has been a favourite learning resource of new Rustaceans for a long time. Many people also seem to learn by reading the source code of Rust crates. The fact that both the documentation and source code of tens of thousands of Rust crates is available on <a href=\"https://docs.rs\">docs.rs</a> and GitHub makes this easier.</p><p>In terms of answers belonging to the \"Other\" category, they can be clustered into three categories: people using LLM (large language model) assistants (Copilot, ChatGPT, Claude, etc.), reading the official Rust forums (Discord, <a href=\"https://users.rust-lang.org/\">URLO</a>) or being mentored while contributing to Rust projects. We would like to extend a big thank you to those making our spaces friendly and welcoming for newcomers, as it is important work and it pays off. Interestingly, a non-trivial number of people \"learned by doing\" and used rustc error messages and clippy as a guide, which is a good indicator of the quality of Rust diagnostics.</p><p>In terms of formal education, it seems that Rust has not yet penetrated university curriculums, as this is typically a very slowly moving area. Only a very small number of respondents (around 3%) have taken a university Rust course or used university learning materials.</p><p>In terms of operating systems used by Rustaceans, Linux was the most popular choice, and it seems that it is getting increasingly popular year after year. It is followed by macOS and Windows, which have a very similar share of usage.</p><blockquote><p>As you can see in the <a href=\"https://blog.rust-lang.org/images/2025-02-13-rust-survey-2024/which-os-do-you-use-wordcloud.png\">wordcloud</a>, there are also a few users that prefer Arch, btw.</p></blockquote><p>Rust programmers target a diverse set of platforms with their Rust programs. We saw a slight uptick in users targeting embedded and mobile platforms, but otherwise the distribution of platforms stayed mostly the same as last year. Since the WebAssembly target is quite diverse, we have split it into two separate categories this time. Based on the results it is clear that when using WebAssembly, it is mostly in the context of browsers (23%) rather than other use-cases (7%).</p><p>We cannot of course forget the favourite topic of many programmers: which IDE (developer environment) they use. Although Visual Studio Code still remains the most popular option, its share has dropped by 5pp this year. On the other hand, the Zed editor seems to have gained considerable traction recently. The small percentage of those who selected \"Other\" are using a wide range of different tools: from CursorAI to classics like Kate or Notepad++. Special mention to the 3 people using \"ed\", that's quite an achievement.</p><blockquote><p>You can also take a look at the linked <a href=\"https://blog.rust-lang.org/images/2025-02-13-rust-survey-2024/what-ide-do-you-use-wordcloud.png\">wordcloud</a> that summarizes open answers to this question (the \"Other\" category), to see what other editors are also popular.</p></blockquote><p>We were excited to see that more and more people use Rust at work for the majority of their coding, 38% vs 34% from last year. There is a clear upward trend in this metric over the past few years.</p><p>The usage of Rust within companies also seems to be rising, as 45% of respondents answered that their organisation makes non-trivial use of Rust, which is a 7pp increase from 2023.</p><p>Once again, the top reason employers of our survey respondents invested in Rust was the ability to build relatively correct and bug-free software. The second most popular reason was Rust’s performance characteristics. 21% of respondents that use Rust at work do so because they already know it, and it's thus their default choice, an uptick of 5pp from 2023. This seems to suggest that Rust is becoming one of the baseline languages of choice for more and more companies.</p><p>Similarly to the previous year, a large percentage of respondents (82%) report that Rust helped their company achieve its goals. In general, it seems that programmers and companies are quite happy with their usage of Rust, which is great!</p><p>In terms of technology domains, the situation is quite similar to the previous year. Rust seems to be especially popular for creating server backends, web and networking services and cloud technologies. It also seems to be gaining more traction for embedded use-cases.</p><blockquote><p>You can scroll the chart to the right to see more domains. Note that the Automotive domain was not offered as a closed answer in the 2023 survey (it was merely entered through open answers), which might explain the large jump.</p></blockquote><p>It is exciting to see the continued growth of professional Rust usage and the confidence so many users feel in its performance, control, security and safety, enjoyability, and more!</p><p>As always, one of the main goals of the State of Rust survey is to shed light on challenges, concerns, and priorities on Rustaceans’ minds over the past year.</p><p>We have asked our users about aspects of Rust that limit their productivity. Perhaps unsurprisingly, slow compilation was at the top of the list, as it seems to be a perennial concern of Rust users. As always, there are efforts underway to improve the speed of the compiler, such as enabling the <a href=\"https://blog.rust-lang.org/2023/11/09/parallel-rustc.html\">parallel frontend</a> or switching to a <a href=\"https://blog.rust-lang.org/2024/05/17/enabling-rust-lld-on-linux.html\">faster linker by default</a>. We invite you to test these improvements and let us know if you encounter any issues.</p><p>Other challenges included subpar support for debugging Rust and high disk usage of Rust compiler artifacts. On the other hand, most Rust users seem to be very happy with its runtime performance, the correctness and stability of the compiler and also Rust's documentation.</p><p>In terms of specific unstable (or missing) features that Rust users want to be stabilized (or implemented), the most desired ones were async closures and if/let while chains. Well, we have good news! Async closures will be stabilized in the next version of Rust (1.85), and if/let while chains will hopefully follow <a href=\"https://github.com/rust-lang/rust/pull/132833\">soon after</a>, once Edition 2024 is released (which will also happen in Rust 1.85).</p><p>Other coveted features are generators (both sync and async) and more powerful generic const expressions. You can follow the <a href=\"https://rust-lang.github.io/rust-project-goals/2025h1/goals.html\">Rust Project Goals</a> to track the progress of these (and other) features.</p><p>In the open answers to this question, people were really helpful and tried hard to describe the most notable issues limiting their productivity. We have seen mentions of struggles with async programming (an all-time favourite), debuggability of errors (which people generally love, but they are not perfect for everyone) or Rust tooling being slow or resource intensive (rust-analyzer and rustfmt). Some users also want a better IDE story and improved interoperability with other languages.</p><p>This year, we have also included a new question about the speed of Rust's evolution. While most people seem to be content with the status quo, more than a quarter of people who responded to this question would like Rust to stabilize and/or add features more quickly, and only 7% of respondents would prefer Rust to slow down or completely stop adding new features.</p><p>Interestingly, when we asked respondents about their main worries for the future of Rust, one of the top answers remained the worry that Rust will become too complex. This seems to be in contrast with the answers to the previous question. Perhaps Rust users still seem to consider the complexity of Rust to be manageable, but they worry that one day it might become too much.</p><p>We are happy to see that the amount of respondents concerned about Rust Project governance and lacking support of the Rust Foundation has dropped by about 6pp from 2023.</p><p>Each year, the results of the State of Rust survey help reveal the areas that need improvement in many areas across the Rust Project and ecosystem, as well as the aspects that are working well for our community.</p><p>If you have any suggestions for the Rust Annual survey, please <a href=\"https://github.com/rust-lang/surveys/issues\">let us know</a>!</p><p>We are immensely grateful to those who participated in the 2024 State of Rust Survey and facilitated its creation. While there are always challenges associated with developing and maintaining a programming language, this year we were pleased to see a high level of survey participation and candid feedback that will truly help us make Rust work better for everyone.</p><p>If you’d like to dig into more details, we recommend you to browse through the full <a href=\"https://raw.githubusercontent.com/rust-lang/surveys/main/surveys/2024-annual-survey/report/annual-survey-2024-report.pdf\">survey report</a>.</p>","contentLength":14399,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"This Week in Rust 586","url":"https://this-week-in-rust.org/blog/2025/02/12/this-week-in-rust-586/","date":1739336400,"author":"TWiR Contributors","guid":198,"unread":true,"content":"<p>This week's crate is <a href=\"https://github.com/virust-ai/esp32-mender-client\">esp32-mender-client</a>, a client for ESP32 to execute firmware updates and remote commands.</p><p>Thanks to <a href=\"https://users.rust-lang.org/t/crate-of-the-week/2704/1399\">Kelvin</a> for the self-suggestion!</p><p>An important step for RFC implementation is for people to experiment with the\nimplementation and give feedback, especially before stabilization.  The following\nRFCs would benefit from user testing before moving forward:</p><ul><li><em>No calls for testing were issued this week.</em></li></ul><ul><li><em>No calls for testing were issued this week.</em></li></ul><ul><li><em>No calls for testing were issued this week.</em></li></ul><p>If you are a feature implementer and would like your RFC to appear on the above list, add the new \nlabel to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature\nneed testing.</p><p>Always wanted to contribute to open-source projects but did not know where to start?\nEvery week we highlight some tasks from the Rust community for you to pick and get started!</p><p>Some of these tasks may also have mentors available, visit the task page for more information.</p><p><em>No Calls for participation were submitted this week.</em></p><p>Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.</p><p><em>No Calls for papers or presentations were submitted this week.</em></p><p>A relatively neutral week, with lots of real changes but most small in\nmagnitude. Most significant change is rustdoc's move of JS/CSS minification to\nbuild time which cut doc generation times on most benchmarks fairly\nsignificantly.</p><p>3 Regressions, 5 Improvements, 1 Mixed; 2 of them in rollups\n32 artifact comparisons made in total</p><ul><li><em>No RFCs were approved this week.</em></li></ul><p>Every week, <a href=\"https://www.rust-lang.org/team.html\">the team</a> announces the 'final comment period' for RFCs and key PRs\nwhich are reaching a decision. Express your opinions now.</p><ul><li><em>No Cargo Tracking Issues or PRs entered Final Comment Period this week.</em></li></ul><ul><li><em>No Language Team Proposals entered Final Comment Period this week.</em></li></ul><ul><li><em>No Language Reference RFCs entered Final Comment Period this week.</em></li></ul><ul><li><em>No Unsafe Code Guideline Tracking Issues or PRs entered Final Comment Period this week.</em></li></ul><p>Rusty Events between 2025-02-12 - 2025-03-12 🦀</p><p>If you are running a Rust event please add it to the <a href=\"https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com\">calendar</a> to get\nit mentioned here. Please remember to add a link to the event too.\nEmail the <a href=\"mailto:community-team@rust-lang.org\">Rust Community Team</a> for access.</p><blockquote><p>Just because things are useful doesn't mean they are magically sound.</p></blockquote>","contentLength":2396,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["rust"]}