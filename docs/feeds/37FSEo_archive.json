{"id":"37FSEo","title":"Rust","displayTitle":"Rust","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":89,"items":[{"title":"Optimizing Rust Compilation: Smaller, Faster, or Both?","url":"https://dev.to/leapcell/optimizing-rust-compilation-smaller-faster-or-both-16pe","date":1740298736,"author":"Leapcell","guid":9510,"unread":true,"content":"<p>You have completed writing a Rust project and are now working on compilation. How can you make the compiled file as small as possible? How can you make it run as fast as possible? Or how can you achieve both small size and high speed?</p><p>You may have these considerations:</p><ul><li>: Suitable for embedded development, where the project is small and not complex, and execution speed is already fast. The main goal is to reduce the file size as much as possible.</li><li><strong>Maximizing execution speed</strong>: Suitable for network services where file size is not a concern, but maximizing concurrency is the top priority.</li><li><strong>Balancing both size and speed</strong>: A middle ground that is suitable for various types of projects.</li></ul><p>You only need to add the following configuration to your  file and run:</p><h3>\n  \n  \n  Generate a Smaller Executable\n</h3><div><pre><code></code></pre></div><h3>\n  \n  \n  Generate a Faster Executable\n</h3><div><pre><code></code></pre></div><h3>\n  \n  \n  Balance Between Size and Speed\n</h3><div><pre><code></code></pre></div><h2>\n  \n  \n  Explanation of Configurations\n</h2><p>: Specifies the level of compiler optimizations.</p><ul><li>: No optimization, fastest compilation time.</li><li>: Optimize for faster compilation.</li><li>: Balance between compilation speed and runtime performance (default).</li><li>: Optimize for maximum runtime performance.</li><li>: Optimize for smaller code size.</li><li>: Further optimize for code size, more aggressively than .</li></ul><p>: Use  to generate the smallest executable; use  to generate the fastest executable.</p><p>: Enables Link Time Optimization (LTO).</p><ul><li>: Disable LTO (default).</li><li>: Enable the most aggressive LTO.</li></ul><p>: Enabling LTO reduces binary size and improves runtime performance.  is a moderate choice, while  provides the best optimization but increases compilation time.</p><p>: Controls the number of code generation units.</p><p>: Usually . Setting it to  enables the highest level of optimization.</p><p>: Reducing the number of code generation units gives the compiler more information for global optimizations, resulting in a smaller and faster executable. Setting it to  maximizes optimization but increases compilation time.</p><p>: Controls panic behavior.</p><ul><li>: Unwind the stack (default).</li><li>: Directly abort the process.</li></ul><p>: Using  reduces the executable size and improves performance in some cases since it eliminates the need for stack unwinding information.</p><p>: Controls which debug and symbol information is removed.</p><ul><li>: Keep all information (default).</li><li>: Remove debug information.</li><li>: Remove symbol tables but retain necessary debug information.</li><li>: Remove all optional information, including debug and symbol data.</li></ul><p>: Removing unnecessary debug and symbol information significantly reduces executable size.</p><p>These are the optimization techniques for compiling a Rust project. Have you mastered them?</p><p><a href=\"https://leapcell.io/?lc_t=d_rustbuildoptim\" rel=\"noopener noreferrer\">Leapcell</a> is the Next-Gen Serverless Platform for Web Hosting, Async Tasks, and Redis:</p><ul><li>Develop with Node.js, Python, Go, or Rust.</li></ul><p><strong>Deploy unlimited projects for free</strong></p><ul><li>pay only for usage — no requests, no charges.</li></ul><p><strong>Unbeatable Cost Efficiency</strong></p><ul><li>Pay-as-you-go with no idle charges.</li><li>Example: $25 supports 6.94M requests at a 60ms average response time.</li></ul><p><strong>Streamlined Developer Experience</strong></p><ul><li>Intuitive UI for effortless setup.</li><li>Fully automated CI/CD pipelines and GitOps integration.</li><li>Real-time metrics and logging for actionable insights.</li></ul><p><strong>Effortless Scalability and High Performance</strong></p><ul><li>Auto-scaling to handle high concurrency with ease.</li><li>Zero operational overhead — just focus on building.</li></ul>","contentLength":3225,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust, ROS, and dynamic typing https://open.substack.com/pub/intrepidai/p/rust-ros-and-dynamic-typing?r=7n2a9&utm_campaign=post&utm_medium=web&showWelcomeOnShare=false","url":"https://dev.to/fgadaleta/rust-ros-and-dynamic-typing-42n9","date":1740296161,"author":"frag","guid":9489,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Font for programming mathematics","url":"https://www.reddit.com/r/rust/comments/1iw2ovd/font_for_programming_mathematics/","date":1740287667,"author":"/u/okimusix","guid":9544,"unread":true,"content":"<p>So I am a physics undergrad and I've been using Rust for a few years now. It's my favorite language and I use it for everything, from personal apps using Tauri to taking advantage of its speed for computations and using it in my school assignments.</p><p>Since I often find myself writing math code, I found naming variables \"lambda_squared\", for example, looks really clunky and makes it harder to read the code. For this, I implemented a Live Templates group on RustRover that replaced lambda, for example, with its equivalent unicode character. However, Rust did complain a little.</p><p>Finally, though, I found the solution. I had been trying to do this for a while with no luck, but I found a way to make it work. I used the ligature system on the FiraCode font to implement ligatures for every greek letter and some mathematical symbols, this way you get the readability of actual math, but for the compiler, it still looks like plain text. Here's an example</p><p>The text for the sum variable, for example, is just \"SUMxu2\", and both the compiler and I are happier. I don't know if anyone has done this before, I tried to look for it but never found anything. </p><p>If you find this something that could be useful for you or others, I can share a link to a drive or something where you can download the font, as well as the guide to every symbol I included. If so, please comment and share your thoughts on this too :)</p>","contentLength":1400,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Streaming SQL in Stateful DataFlows","url":"https://dev.to/debadyuti/streaming-sql-in-stateful-dataflows-3jng","date":1740263855,"author":"Deb","guid":9372,"unread":true,"content":"<h2>\n  \n  \n  Streaming SQL Functionality\n</h2><p>SQL Streaming Queries and Stream Processing Operations is released in Stateful DataFlow Beta 7 running on Fluvio 0.15.2</p><p><strong>With SQL Streaming on Stateful DataFlow you can:</strong></p><ul><li>Run ad-hoc queries on saved state objects and materialized views based live event streams.</li><li>Use SQL queries to run stream processing operations in data flows.</li></ul><p>For those who are not aware of Fluvio or Stateful DataFlow yet:</p><p>Stateful DataFlow - Stream processing layer built on Fluvio built using the wasm component model.</p><h2>\n  \n  \n  SQL: From Static Tables to Streaming Data\n</h2><p>Remember when SQL was the only way to talk to your data? It wasn't just a query language - it was  query language. But its story goes deeper than syntax.</p><h3>\n  \n  \n  The Universal Language of Data\n</h3><p>Just as merchants in medieval Mediterranean ports needed a shared language to trade (that's where \"lingua franca\" came from), the tech world needed SQL to make data accessible across different systems and teams.</p><p>If you're in a room with a DBA, a data analyst, and a business analyst. What's the one language they all speak? Likely SQL.</p><div><pre><code></code></pre></div><p>Look familiar? Whether you're running Oracle, Postgres, or MySQL, this just works. Well sort of!</p><p>Three key factors made SQL a long-term utility that stood the test of time:</p><ol><li><p>\nInstead of telling machines HOW to get data, you just say WHAT you want. <code>SELECT * FROM users WHERE status = 'active'</code> reads almost like English.</p></li><li><p>\nFrom startups to Fortune 500s, SQL skills travel. Write once, run anywhere - from healthcare to fintech.</p></li><li><p>\nNeed to analyze sales data? Track user behavior? SQL's got you covered, backed by decades of tooling and optimization.</p></li></ol><p>In a world of Artificial Intelligence, Web3, and global markets, event streaming is no longer a luxury - it's a basic need. Ask yourself:</p><ul><li>Is your application combining data from multiple sources in real-time?</li><li>Are your customers happy with stale insights?</li><li>Do you need fresh data on demand?</li></ul><h3>\n  \n  \n  Bridging Static and Streaming\n</h3><p>What if you could use familiar SQL syntax for real-time data processing? What if your team could leverage their existing SQL skills for stream processing?</p><p>We've been exploring these questions and implementing solutions that bring SQL's simplicity to streaming data. Want to see how? Check out the full article where we dive into:</p><ul><li>Practical examples using NY Transit data</li><li>Real-world streaming SQL queries in action</li><li>How to implement stream processing without learning a new language</li></ul>","contentLength":2437,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Solving The Millionaires' Problem in Rust","url":"https://vaktibabat.github.io/posts/smpc_circuits/","date":1740255860,"author":"/u/vaktibabat","guid":9370,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1ivs4vp/solving_the_millionaires_problem_in_rust/"},{"title":"Official /r/rust \"Who's Hiring\" thread for job-seekers and job-offerers [Rust 1.85]","url":"https://www.reddit.com/r/rust/comments/1ivrkhs/official_rrust_whos_hiring_thread_for_jobseekers/","date":1740254374,"author":"/u/DroidLogician","guid":9425,"unread":true,"content":"<p>Welcome once again to the official <a href=\"https://www.reddit.com/r/rust\">r/rust</a> Who's Hiring thread!</p><p>Before we begin, job-seekers should also remember to peruse the <a href=\"https://www.reddit.com/r/rust/comments/1hynsw7/official_rrust_whos_hiring_thread_for_jobseekers/\">prior thread</a>.</p><p>This thread will be periodically stickied to the top of <a href=\"https://www.reddit.com/r/rust\">r/rust</a> for improved visibility. You can also find it again via the \"Latest Megathreads\" list, which is a dropdown at the top of the page on new Reddit, and a section in the sidebar under \"Useful Links\" on old Reddit.</p><p>The thread will be refreshed and posted anew when the next version of Rust releases in six weeks.</p><p>Please adhere to the following rules when posting:</p><ul><li><p>Don't create top-level comments; those are for employers.</p></li><li><p>Feel free to reply to top-level comments with on-topic questions.</p></li><li><p>Anyone seeking work should reply to my stickied top-level comment.</p></li><li><p>Meta-discussion should be reserved for the distinguished comment at the very bottom.</p></li></ul><ul><li><p><strong>The ordering of fields in the template has been revised to make postings easier to read. If you are reusing a previous posting, please update the ordering as shown below.</strong></p></li><li><p><strong>Remote positions: see bolded text for new requirement.</strong></p></li><li><p>To find individuals seeking work, see the replies to the stickied top-level comment; you will need to click the \"more comments\" link at the bottom of the top-level comment in order to make these replies visible.</p></li><li><p>To make a top-level comment you must be hiring directly; no third-party recruiters.</p></li><li><p>One top-level comment per employer. If you have multiple job openings, please consolidate their descriptions or mention them in replies to your own top-level comment.</p></li><li><p>Proofread your comment after posting it and edit it if necessary to correct mistakes.</p></li><li><p>To share the space fairly with other postings and keep the thread pleasant to browse, we ask that you try to limit your posting to either 50 lines or 500 words, whichever comes first.<strong>We reserve the right to remove egregiously long postings.</strong> However, this only applies to the content of this thread; you can link to a job page elsewhere with more detail if you like.</p></li><li><p>Please base your comment on the following template:</p></li></ul><p>COMPANY: <em>[Company name; optionally link to your company's website or careers page.]</em></p><p>TYPE: <em>[Full time, part time, internship, contract, etc.]</em></p><p>LOCATION: <em>[Where are your office or offices located? If your workplace language isn't English-speaking, please specify it.]</em></p><p>REMOTE: <em>[Do you offer the option of working remotely? <strong>Please state clearly if remote work is restricted to certain regions or time zones, or if availability within a certain time of day is expected or required.</strong>]</em></p><p>VISA: <em>[Does your company sponsor visas?]</em></p><p>DESCRIPTION: <em>[What does your company do, and what are you using Rust for? How much experience are you seeking and what seniority levels are you hiring for? The more details the better.]</em></p><p>ESTIMATED COMPENSATION: <em>[Be courteous to your potential future colleagues by attempting to provide at least a rough expectation of wages/salary. If you are listing several positions in the \"Description\" field above, then feel free to include this information inline above, and put \"See above\" in this field.<p> If compensation is negotiable, please attempt to provide at least a base estimate from which to begin negotiations. If compensation is highly variable, then feel free to provide a range.</p> If compensation is expected to be offset by other benefits, then please include that information here as well. If you don't have firm numbers but do have relative expectations of candidate expertise (e.g. entry-level, senior), then you may include that here.<p> If you truly have no information, then put \"Uncertain\" here.</p> Note that many jurisdictions (including several U.S. states) <strong>require salary ranges on job postings by law</strong>. If your company is based in one of these locations or you plan to hire employees who reside in any of these locations, you are likely subject to these laws.<p> Other jurisdictions may require salary information to be available upon request or be provided after the first interview.</p> To avoid issues, <strong>we recommend all postings provide salary information</strong>. You  state clearly in your posting if you are planning to compensate employees partially or fully in <strong>something other than fiat currency</strong> (e.g. cryptocurrency, stock options, equity, etc). Do  put just \"Uncertain\" in this case as the default assumption is that the compensation will be 100% fiat. Postings that fail to comply with this addendum . Thank you.]</em></p><p>CONTACT: <em>[How can someone get in touch with you?]</em></p>","contentLength":4390,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"What are the odds that Rust is going to have a real competitor?","url":"https://www.reddit.com/r/rust/comments/1ivqkj1/what_are_the_odds_that_rust_is_going_to_have_a/","date":1740251759,"author":"/u/nikitarevenco","guid":9369,"unread":true,"content":"<p>By \"Real Competitor\" I mean: A language just like Rust with similar goals, but one that people actually prefer to Rust. So it would be a fast, low-level memory safe language with great tooling, great type system and other benefits that Rust offers. But it would need to be better than Rust to actually catch on</p><p>This language needs to offer real advantages over Rust to be considered. Of course since Rust has a huge ecosystem that is growing rapidly, it may take a long time. But I am talking on a timescale of 25+ years.</p><p>Creating a new programming language to compete with Rust would be a massive undertaking and there would have to be some real reason to do it. Rust may be missing some features like higher-kinded types, named function arguments and such but to really catch on the language would need to offer some extremely important feature that Rust doesn't have, as well as offering all of Rust's benefits at the same time.</p><p>Is there any such language currently in early development? Or perhaps, what would such a language have to look like?</p>","contentLength":1045,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Gitoxide in February","url":"https://github.com/GitoxideLabs/gitoxide/discussions/1855","date":1740242874,"author":"/u/ByronBates","guid":9395,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1ivn0m4/gitoxide_in_february/"},{"title":"Rustaceans, What are your thoughts on Gleam?","url":"https://www.reddit.com/r/rust/comments/1ivjcus/rustaceans_what_are_your_thoughts_on_gleam/","date":1740232848,"author":"/u/nikitarevenco","guid":9183,"unread":true,"content":"<p>I've been writing Rust for a couple months. I absolutely love its monads like Result and Option, pattern-matching, private-by-default, the friendly compiler and its type system. I took a quick look at Gleam and it seems to have those features as well. Its syntax heavily reminds me of Rust's, the major distinction is that Gleam is much higher level (No lifetimes, for example), and also it is a purely functional language. It is still relatively new.</p><p>For those who have tried it, what do you think about it? Are there situations where you will prefer Gleam over Rust and why. </p>","contentLength":576,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Distributed system courses in Rust?","url":"https://www.reddit.com/r/rust/comments/1ivgbko/distributed_system_courses_in_rust/","date":1740222035,"author":"/u/FeelingAttempt55","guid":9163,"unread":true,"content":"<p>I am currently following the <a href=\"https://github.com/pingcap/talent-plan/tree/master\">pingcap course</a> to learn distributed systems with Rust. So far, I am really enjoying the course, but the course is 5 years old, could you guys suggest some other project-based and more up-to-date courses? </p>","contentLength":233,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Confused about \"NEW\" Rust feature in - Closures in async functions","url":"https://www.reddit.com/r/rust/comments/1ivdmek/confused_about_new_rust_feature_in_closures_in/","date":1740210338,"author":"/u/DataBora","guid":9302,"unread":true,"content":"<p>I am reading how new Rust feature is comming for using closures in Async functions. || async whaterver...</p><p>In my Elusion library implementation i have PipelineScheduler function signature:</p><pre><code> ```rust pub async fn new&lt;F, Fut&gt;(frequency: &amp;str, job: F) -&gt; ElusionResult&lt;Self&gt; where F: Fn() -&gt; Fut + Send + Sync + 'static, Fut: Future&lt;Output = ElusionResult&lt;()&gt;&gt; + Send + 'static ``` </code></pre><p>and then for Job creation:</p><pre><code>```rust let job = Job::new_async(&amp;cron, move |uuid, mut l| { let job_fn = job_fn.clone(); Box::pin(async move { let future = job_fn(); future.await.unwrap_or_else(|e| eprintln!(\"❌ Job execution failed: {}\", e)); let next_tick = l.next_tick_for_job(uuid).await; match next_tick { Ok(Some(ts)) =&gt; println!(\"Next job execution: {:?} UTC Time\", ts), _ =&gt; println!(\"Could not determine next job execution\"), } }) }).map_err(|e| ElusionError::Custom(format!(\"❌ Job creation failed: {}\", e)))?; ``` </code></pre><p>which user can use like this:</p><pre><code>let scheduler = PipelineScheduler::new(\"5min\", || async {}) </code></pre><p>How this new feature will be different?</p>","contentLength":1025,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Announcing async-local 3.0 now with async closure support","url":"https://www.reddit.com/r/rust/comments/1iv8o6v/announcing_asynclocal_30_now_with_async_closure/","date":1740192335,"author":"/u/Jester831","guid":9060,"unread":true,"content":"<p>Async-local enables thread locals to be used in an async context across await points or within blocking threads managed by the Tokio runtime without the overhead of `Arc`. The way this is accomplished is by using <a href=\"https://crates.io/crates/generativity\">generativity</a> to create unique invariant lifetimes so that borrows to TLS can't be coerced to a `&amp;'static` lifetime and by configuring the runtime with a barrier to rendezvous worker threads during shutdown. This shutdown barrier makes it such that runtime tasks never outlive TLS data owned by worker threads; this makes every invariant lifetime guaranteed to be valid until no tasks remain. Blocking threads managed by the Tokio runtime cannot outlive worker threads with this configuration, and so pointers to TLS from worker threads can be safely moved to these blocking threads with the lifetime constrained. As the lifetimes cannot be coerced into `&amp;'static`, moving onto other threads is prevented. This crate downgrades to using `Arc` whenever the `barrier-protected-runtime` feature is not enabled, making it the end users choice to opt into this optimization by using async_local to configure the runtime shutdown barrier. </p>","contentLength":1145,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Ring is unmaintained","url":"https://rustsec.org/advisories/RUSTSEC-2025-0007.html","date":1740185098,"author":"/u/technobicheiro","guid":8934,"unread":true,"content":"<p>This advisory has been withdrawn and should be ignored. It is kept only for reference.</p><p>The author has announced an indefinite hiatus in its development, noting that\nany reported security vulnerabilities may go unaddressed for prolonged periods\nof time.</p><p>After this advisory was published, the author graciously agreed to give\naccess to the rustls team. The rustls team is committed to providing\nsecurity (only) maintenance for  for the foreseeable future.</p><p>Advisory available under <a href=\"https://spdx.org/licenses/CC0-1.0.html\">CC0-1.0</a>\n    license.\n\n    \n    </p>","contentLength":508,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1iv6myf/ring_is_unmaintained/"},{"title":"Rust Rant Contest: std::io::Error, the oversized junk drawer of failure","url":"https://www.reddit.com/r/rust/comments/1iv3rb3/rust_rant_contest_stdioerror_the_oversized_junk/","date":1740177182,"author":"/u/OliveTreeFounder","guid":8957,"unread":true,"content":"<p>I've been coding in Rust for five years, and  has never been anything but a headache. The error code? Never useful. It’s impossible to handle—too big, too vague—so we all end up just passing this bloated mess back to the caller without even knowing what’s inside or what actually caused the error.</p><p>But it gets worse. Traits, instead of being parameterized over an  type, just return <code>Result&lt;..., std::io::Error&gt;</code>. Once a trait like this becomes popular—like  or —you're stuck. You can’t handle errors properly unless you rewrite every crate that depends on these traits.</p><p> is a contagious disease infecting the entire ecosystem. We need to stop this pandemic!</p>","contentLength":668,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[First crate] derive_regex: construct a type by parsing a string with regular expressions","url":"https://www.reddit.com/r/rust/comments/1iuzg1i/first_crate_derive_regex_construct_a_type_by/","date":1740166287,"author":"/u/TitaniumBrain","guid":9116,"unread":true,"content":"<p>I had an idea and decided it was simple enough to publish <a href=\"https://crates.io/crates/derive-regex\">my first crate</a> and contribute to the Rust ecosystem.</p><p>I'm still relatively new to Rust (coming from a few years of Python but I fell in love with the language), so any feedback is welcome. I'm confident my code isn't , but I want to make sure I follow best practices and learn about any Rust .</p><p>Using this crate - and the associated derive proc macro - you can derive  on an enum or struct to automatically derive the  constructor method.</p><p>Copied from the readme, here's a couple examples if you don't to click away from Reddit:</p><p>```rust use derive_regex::FromRegex;</p><pre><code>pattern = r\"^(?P&lt;timestamp&gt;\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}) \\[(?P&lt;level&gt;[A-Z]+)\\] (?P&lt;message&gt;.+)$\" </code></pre><p>)] struct LogEntry { timestamp: String, level: String, message: String, }</p><p>fn main() { let log = \"2025-02-20 15:30:00 [INFO] Server started successfully\"; let entry = LogEntry::parse(log).expect(\"Failed to parse log entry\"); println!(\"Parsed log entry: {:#?}\", entry); // Parsed log entry: LogEntry { // timestamp: \"2025-02-20 15:30:00\", // level: \"INFO\", // message: \"Server started successfully\", // } } ```</p><p>```rust use derive_regex::FromRegex;</p><p>enum CookingCommand { // Parses a command like \"chop 3 carrots\" #[regex(pattern = r\"chop (?P&lt;quantity&gt;\\d+) (?P&lt;ingredient&gt;\\w+)\")] Chop { quantity: u32, ingredient: String },</p><pre><code>// Parses a command like \"boil for 10 minutes\" #[regex(pattern = r\"boil for (?P&lt;minutes&gt;\\d+) minutes\")] Boil(u32), // Parses a command like \"bake at 375.0 degrees for 25 minutes\" #[regex(pattern = r\"bake at (?P&lt;temperature&gt;\\d+\\.\\d+) degrees for (?P&lt;minutes&gt;\\d+) minutes\")] Bake { temperature: f64, minutes: u32 }, // Parses a command like \"mix salt and pepper\" #[regex(pattern = r\"mix (?P&lt;ingredient1&gt;\\w+) and (?P&lt;ingredient2&gt;\\w+)\")] Mix { ingredient1: String, ingredient2: String, }, </code></pre><p>fn main() { let commands = [ \"First, chop 3 carrots\", \"Don't forget to boil for 10 minutes\", \"I guess I'll bake at 375.0 degrees for 25 minutes\", \"mix salt and pepper now\", ];</p><pre><code>for cmd in &amp;commands { if let Ok(command) = CookingCommand::parse(cmd) { match command { CookingCommand::Chop { quantity, ingredient, } =&gt; { println!(\"Chop {} {}(s)\", quantity, ingredient); } CookingCommand::Boil(minutes) =&gt; { println!(\"Boil for {} minutes\", minutes); } CookingCommand::Bake { temperature, minutes, } =&gt; { println!(\"Bake at {} degrees for {} minutes\", temperature, minutes); } CookingCommand::Mix { ingredient1, ingredient2, } =&gt; { println!(\"Mix {} and {}\", ingredient1, ingredient2); } } } else { eprintln!(\"Failed to parse command: {}\", cmd); } } // Chop 3 carrots(s) // Boil for 10 minutes // Bake at 375 degrees for 25 minutes // Mix salt and pepper </code></pre>","contentLength":2667,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust 🦀 DataFrame Library Elusion v3.3.0 is released 🚀 FIXED NORMALIZATION","url":"https://www.reddit.com/r/rust/comments/1iuvnrr/rust_dataframe_library_elusion_v330_is_released/","date":1740157108,"author":"/u/DataBora","guid":9115,"unread":true,"content":"<p>Elusion is a high-performance DataFrame / Data Engineering / Data Analysis library designed for in-memory data formats such as CSV, JSON, PARQUET, DELTA, as well as for ODBC Database Connections for MySQL and PostgreSQL, as well as for Azure Blob Storage Connections, as well as for creating JSON files from REST API's which can be forwarded to DataFrame.</p>","contentLength":355,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Borrow Checker Trauma","url":"https://www.reddit.com/r/rust/comments/1iuthsl/borrow_checker_trauma/","date":1740151657,"author":"/u/xwaxes","guid":8784,"unread":true,"content":"<p>I am using the term ‘borrow checker trauma’ for lack of a better word. A bit of context first; I have been using Rust for my personal web projects extensively but use Rails at work. </p><p>So the problem is, whenever I am working on work projects and want to perform two or more operations on a variable, especially if I am passing it around or returning it, I always find myself taking a step back to consider if the ownership has moved before I remember that I am on Ruby and that doesn’t apply. </p><p>Has anyone experienced this in other languages or on their daily workflow?</p>","contentLength":571,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"This month in Servo: new webview API, relative colors, canvas buffs, and more!","url":"https://servo.org/blog/2025/02/19/this-month-in-servo/","date":1740142406,"author":"/u/wuyuwei-tw","guid":8721,"unread":true,"content":"<p>Servo now supports several new web API features:</p><p>We’ve landed a bunch of  improvements:</p><p> are a lot more useful now, with  now supporting  (<a href=\"https://github.com/Taym95\">@Taym95</a>, <a href=\"https://github.com/servo/servo/pull/35040\">#35040</a>), , , and  (<a href=\"https://github.com/Taym95\">@Taym95</a>, <a href=\"https://github.com/servo/servo/pull/34958\">#34958</a>).</p><p>Servo aims to be an embeddable web engine, but so far it’s been a lot harder to embed Servo than it should be.</p><p>For one, configuring and starting Servo is complicated.\nWe found that getting Servo running at all, even without wiring up input or handling resizes correctly, took  of Rust code (<a href=\"https://github.com/delan\">@delan</a>, <a href=\"https://github.com/mrobinson\">@mrobinson</a>, <a href=\"https://github.com/servo/servo/pull/35118\">#35118</a>).\nEmbedders (apps) could only control Servo by sending and receiving a variety of “messages” and “events”, and simple questions like “what’s the current URL?” were impossible to answer without keeping track of extra state in the app.</p><p>Contrast this with <a href=\"https://webkitgtk.org/\">WebKitGTK</a>, where you can write a minimal kiosk app with a fully-functional webview in  of C.\nTo close that gap, we’ve started <strong>reworking our embedding API</strong> towards something more idiomatic and ergonomic, starting with the concept embedders care about most: the .</p><p>Our new webview API is controlled by calling methods on a  (<a href=\"https://github.com/delan\">@delan</a>, <a href=\"https://github.com/mrobinson\">@mrobinson</a>, <a href=\"https://github.com/servo/servo/pull/35119\">#35119</a>, <a href=\"https://github.com/servo/servo/pull/35183\">#35183</a>, <a href=\"https://github.com/servo/servo/pull/35192\">#35192</a>), including navigation and user input.\nHandles will eventually represent the lifecycle of the webview itself; if you have one, the webview is valid, and if you drop them, the webview is destroyed.</p><p>Servo needs to call into the embedder too, and here we’ve started replacing the old EmbedderMsg API with a  (<a href=\"https://github.com/delan\">@delan</a>, <a href=\"https://github.com/mrobinson\">@mrobinson</a>, <a href=\"https://github.com/servo/servo/pull/35211\">#35211</a>), much like the delegates in <a href=\"https://developer.apple.com/documentation/webkit/wkuidelegate?language=objc\">Apple’s WebKit API</a>.\nIn Rust, a delegate is a  that the embedder can install its own  for.\nStay tuned for more on this next month!</p><p>Other embedding improvements include:</p><p>We’ve reworked Servo’s , making all prefs optional with reasonable defaults (<a href=\"https://github.com/mrobinson\">@mrobinson</a>, <a href=\"https://github.com/servo/servo/pull/34966\">#34966</a>, <a href=\"https://github.com/servo/servo/pull/34999\">#34999</a>, <a href=\"https://github.com/servo/servo/pull/34994\">#34994</a>).\nAs a result:</p><ul><li><strong>The names of all preferences have changed</strong>; see the <a href=\"https://doc.servo.org/servo_config/prefs/struct.Preferences.html\">Prefs docs</a> for a list</li><li><strong>Embedders no longer need a </strong> resource to get Servo running</li></ul><p>Servo’s networking is more efficient now, with the ability to <strong>cancel fetches for navigation</strong> that contain redirects (<a href=\"https://github.com/mrobinson\">@mrobinson</a>, <a href=\"https://github.com/servo/servo/pull/34919\">#34919</a>) and <strong>cancel fetches for &lt;video&gt; and &lt;media&gt;</strong> when the document is unloaded (<a href=\"https://github.com/mrobinson\">@mrobinson</a>, <a href=\"https://github.com/servo/servo/pull/34883\">#34883</a>).\nThose changes also <strong>eliminate per-request IPC channels</strong> for navigation and cancellation respectively, and in the same vein, we’ve eliminated them for image loading too (<a href=\"https://github.com/mrobinson\">@mrobinson</a>, <a href=\"https://github.com/servo/servo/pull/35041\">#35041</a>).</p><p>We’ve continued <strong>splitting up our massive script crate</strong> (<a href=\"https://github.com/jdm\">@jdm</a>, <a href=\"https://github.com/servo/servo/pull/34359\">#34359</a>, <a href=\"https://github.com/servo/servo/pull/35157\">#35157</a>, <a href=\"https://github.com/servo/servo/pull/35169\">#35169</a>, <a href=\"https://github.com/servo/servo/pull/35172\">#35172</a>), which will eventually make Servo much faster to build.</p><p>We now run <strong>CI smoketests on OpenHarmony</strong> using a real device (<a href=\"https://github.com/jschwe\">@jschwe</a>, <a href=\"https://github.com/mukilan\">@mukilan</a>, <a href=\"https://github.com/servo/servo/pull/35006\">#35006</a>), increasing confidence in your changes beyond compile-time errors.</p><p>We’ve also tripled our <strong>self-hosted CI runner capacity</strong> (<a href=\"https://github.com/delan\">@delan</a>, <a href=\"https://github.com/servo/servo/pull/34983\">#34983</a>, <a href=\"https://github.com/servo/servo/pull/35002\">#35002</a>), making concurrent Windows and macOS builds possible without falling back to the much slower GitHub-hosted runners.</p><p>Servo can’t yet run WebDriver-based tests on <a href=\"https://wpt.fyi\">wpt.fyi</a>, <a href=\"https://wpt.servo.org\">wpt.servo.org</a>, or CI, because the  executor for the <a href=\"https://web-platform-tests.org\">Web Platform Tests</a> does not support testdriver.js.\n does, though, so we’ve started fixing test regressions with that executor with the goal of eventually switching to it (<a href=\"https://github.com/jdm\">@jdm</a>, <a href=\"https://github.com/servo/servo/pull/34957\">#34957</a>, <a href=\"https://github.com/servo/servo/pull/34997\">#34997</a>).</p><p>Thanks again for your generous support!\nWe are now receiving  (−11.4% over December) in recurring donations.\nWith this money, we’ve been able to expand our capacity for <a href=\"https://ci0.servo.org\">self-hosted</a><a href=\"https://ci1.servo.org\">CI</a><a href=\"https://ci2.servo.org\">runners</a> on Windows, Linux, and macOS builds, <strong>halving  build times</strong> from over an hour to under 30 minutes!</p><p>Servo is also on <a href=\"https://thanks.dev\">thanks.dev</a>, and already  (+5 over December) that depend on Servo are sponsoring us there.\nIf you use Servo libraries like <a href=\"https://crates.io/crates/url/reverse_dependencies\">url</a>, <a href=\"https://crates.io/crates/html5ever/reverse_dependencies\">html5ever</a>, <a href=\"https://crates.io/crates/selectors/reverse_dependencies\">selectors</a>, or <a href=\"https://crates.io/crates/cssparser/reverse_dependencies\">cssparser</a>, signing up for <a href=\"https://thanks.dev\">thanks.dev</a> could be a good way for you (or your employer) to give back to the community.</p><p>As always, use of these funds will be decided transparently in the Technical Steering Committee.\nFor more details, head to our <a href=\"https://servo.org/sponsorship/\">Sponsorship page</a>.</p>","contentLength":3866,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1iuq74e/this_month_in_servo_new_webview_api_relative/"},{"title":"I created A Easy to use Rust Web Framework","url":"https://www.reddit.com/r/rust/comments/1iuplg1/i_created_a_easy_to_use_rust_web_framework/","date":1740140417,"author":"/u/Rough_Shopping_6547","guid":8832,"unread":true,"content":"<p>I just published my  project!</p><p>I realized there isn’t a single easy-to-use, plug-and-play Rust web framework out there (at least to my knowledge), so I decided to create my own.</p><p>I'd love to hear your thoughts on it!</p>","contentLength":214,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"AVR microcontrollers are now officially maintained!","url":"https://www.reddit.com/r/rust/comments/1iunfgx/avr_microcontrollers_are_now_officially_maintained/","date":1740131957,"author":"/u/Patryk27","guid":8499,"unread":true,"content":"<p>AVRs are cute &amp; tiny microcontrollers from Atmel - you might've heard about ATmega328p used in Arduino Uno, for example:</p><p>Every week we're marching towards better AVR support in Rust and as of today I can proudly say: we don't need no `target.json`s anymore + we've got an official maintainer! (points finger at self)</p><p>So far AVRs remain tier 3, but at least it's waay easier to use them now - just target `avr-none` and provide `-C target-cpu` so that rustc &amp; llvm know which specific microcontroller you're building for; <a href=\"https://github.com/llvm/llvm-project/pull/118015\">a couple</a> of <a href=\"https://github.com/llvm/llvm-project/pull/121498\">important</a> codegen <a href=\"https://github.com/llvm/llvm-project/pull/106722\">fixes</a> are also coming together with rustc's upgrade to LLVM 20, hoping to wrap up on <a href=\"https://github.com/Rahix/avr-hal/pull/585\">https://github.com/Rahix/avr-hal/pull/585</a> over the coming days.</p><p>I'd like to take this moment to thank <a href=\"https://github.com/benshi001\">https://github.com/benshi001</a> for his continued support and code reviews on the LLVM's side - let AVR flourish!</p>","contentLength":845,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Sponsoring Rust Developers","url":"https://www.reddit.com/r/rust/comments/1iun7oj/sponsoring_rust_developers/","date":1740131048,"author":"/u/szabgab","guid":8855,"unread":true,"content":"<p>One of the \"findings\" of my <a href=\"https://www.reddit.com/r/rust/comments/1ital1t/why_dont_you_use_rust_at_your_company/\">previous question</a> was that some crates are missing or not mature enough to be used.</p><p>If you would like to use Rust you can hope that those gaps will be closed in time or you can do something about it. If you have the time and expertise you can get involved in the needed projects, but there is a much easier and less time-consuming way. You and/or your company can sponsor the development efforts.</p><p>Allocating 10-20 USD / month by an individual or 1000-2000 USD month by a small company does not sound like a big investment and many such sponsors can make a huge difference together.</p><p>One way to find who to sponsor is to find the developers of your dependencies. For that visit the <a href=\"https://github.com/sponsors/explore\">Explore GitHub Sponsors</a> page. On the left-hand side select the \"Cargo\" ecosystem. That will show you the individuals and the organizations that you currently rely upon that also accept sponsorship.</p><p>I've also created a page listing some of the <a href=\"https://rust.code-maven.com/sponsoring\">people and project</a> who develop Rust and could be sponsored. For some of them I've also included background information.</p>","contentLength":1066,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Linus Torvalds responds to Christoph Hellwig","url":"https://lore.kernel.org/rust-for-linux/CAHk-=wgLbz1Bm8QhmJ4dJGSmTuV5w_R0Gwvg5kHrYr4Ko9dUHQ@mail.gmail.com/","date":1740105034,"author":"/u/bik1230","guid":7580,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1iug7u9/linus_torvalds_responds_to_christoph_hellwig/"},{"title":"[Media] Rust powered flight radar","url":"https://www.reddit.com/r/rust/comments/1iubs4r/media_rust_powered_flight_radar/","date":1740091662,"author":"/u/Confident-Alarm-6911","guid":7579,"unread":true,"content":"<p>So, consider this mix: I have thing for retro-interfaces with monochromatic displays, I wanted to learn rust and do something with sdr radio, I live next to the airport. And that’s how my small radar comes to life 😎</p><p>Hardware: ESP32C3, 1.5 inch i2c oled display, some encoder. RTL-SDR V4 running on my local linux machine and small endpoint to serve ADS-B data via http.</p><p>Firmware written in rust 2021 edition. Libraries: mostly std and esp-idf-svc + rtos (not necessary, but I wanted to try it)</p><p>I’m pretty content with this small project as it is my first attempt to build something in Rust. Now I want to design 3D printable case, do some polishing on software side, and publish it as open source.</p><p>I wanted to post video but it says I can not do this in this community, so only pic</p>","contentLength":784,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why do temporaries need to explicitly borrowed?","url":"https://www.reddit.com/r/rust/comments/1iu8jsn/why_do_temporaries_need_to_explicitly_borrowed/","date":1740083498,"author":"/u/parkotron","guid":8474,"unread":true,"content":"<p>As a long time C++ dev, I feel it didn't take me very long to pick up Rust's reference semantics and borrowing rules, but there one place where I constantly find myself forgetting to include the : passing temporaries into functions taking references.</p><pre><code>fn foo(s: &amp;str) { println!(\"The str is: {s}\"); } fn bar() -&gt; String { \"temporary\".to_string() } fn main() { foo(&amp;bar()); // ^ I always forget this ampersand until reminded by the compiler. } </code></pre><p>Rust's explicit  and  operators make a lot of sense to me: given a chunk of code, it should be obvious where a value has been borrowed and what kind of borrow it is. One should never be surprised to learn a reference was taken, because it's right there in the code.</p><p>But in the case of temporary values, it really doesn't matter, does it? Whatever a function call does (or doesn't) do to a temporary value passed to it, the effect cannot be observed in the surrounding code, since the temporary is gone by the end of the statement.</p><p>Is there a subtlety I'm missing here? Does that ampersand on a temporary convey useful information to an experienced Rust dev? Or is it really just syntactic noise, as it seems to me? Are there corner cases I'm just not considering? Could a future edition of Rust be changed to implicitly borrow from temporaries (like it implicitly borrows to make method calls)? Is my mental model just wrong?</p><p>To be perfectly clear, this isn't a criticism, just curiosity. Clearly a lot of thought has been put into the language's design and syntax. This is just the only place I've encountered where Rust's explicitness doesn't feel completely justified.</p>","contentLength":1609,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"TwinSong: Jupyter notebook built from scratch in Rust","url":"https://www.reddit.com/r/rust/comments/1iu5tpa/twinsong_jupyter_notebook_built_from_scratch_in/","date":1740076846,"author":"/u/winter-moon","guid":7469,"unread":true,"content":"<p>I've spent a lot of time working with Python in Jupyter notebooks, but one thing has always bothered me: the way code and outputs are mixed together. While this is great for tutorials and interactive documentation, it's less ideal for exploratory work or data processing, where I just want to interact with Python without the constraints of a document-style interface. </p><p>To address this, I created TwinSong, a Jupyter alternative that separates code and outputs. Right now, it's primarily a UX experiment, but core features like editing and executing cells are already in place. Instead of modifying Jupyter's existing codebase, I built it from scratch with a React frontend and a Rust backend.</p><p>While performance wasn't the main focus, implementing a Python kernel driver in Rust keeps the kernel clean and avoids loading Python dependencies that might interfere with user code. Plus, as we've seen with other projects, rewriting classic Python tools in Rust can open up new possibilities.</p>","contentLength":986,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Announcing Rust 1.85.0 and Rust 2024 | Rust Blog","url":"https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html","date":1740071479,"author":"/u/slanterns","guid":7359,"unread":true,"content":"<p>The Rust team is happy to announce a new version of Rust, 1.85.0. This stabilizes the 2024 edition as well.\nRust is a programming language empowering everyone to build reliable and efficient software.</p><p>If you have a previous version of Rust installed via , you can get 1.85.0 with:</p><p>If you'd like to help us out by testing future releases, you might consider updating locally to use the beta channel () or the nightly channel (). Please <a href=\"https://github.com/rust-lang/rust/issues/new/choose\">report</a> any bugs you might come across!</p><p>We are excited to announce that the Rust 2024 Edition is now stable!\nEditions are a mechanism for opt-in changes that may otherwise pose a backwards compatibility risk. See <a href=\"https://doc.rust-lang.org/edition-guide/editions/index.html\">the edition guide</a> for details on how this is achieved, and detailed instructions on how to migrate.</p><p>This is the largest edition we have released. The <a href=\"https://doc.rust-lang.org/edition-guide/rust-2024/index.html\">edition guide</a> contains detailed information about each change, but as a summary, here are all the changes:</p><p>The guide includes migration instructions for all new features, and in general\n<a href=\"https://doc.rust-lang.org/edition-guide/editions/transitioning-an-existing-project-to-a-new-edition.html\">transitioning an existing project to a new edition</a>.\nIn many cases  can automate the necessary changes. You may even find that no changes in your code are needed at all for 2024!</p><p>Note that automatic fixes via  are very conservative to avoid ever changing the semantics of your code. In many cases you may wish to keep your code the same and use the new semantics of Rust 2024; for instance, continuing to use the  macro matcher, and ignoring the conversions of conditionals because you want the new 2024 drop order semantics. The result of  should not be considered a recommendation, just a conservative conversion that preserves behavior.</p><p> people came together to create this edition. We'd like to thank them all for their hard work!</p><p>Rust now supports asynchronous closures like  which return futures when called. This works like an  which can also capture values from the local environment, just like the difference between regular closures and functions. This also comes with 3 analogous traits in the standard library prelude: , , and .</p><p>In some cases, you could already approximate this with a regular closure and an asynchronous block, like . However, the future returned by such an inner block is not able to borrow from the closure captures, but this does work with  closures:</p><pre><code>let mut vec: Vec&lt;String&gt; = vec![];\n\nlet closure = async || {\n    vec.push(ready(String::from(\"\")).await);\n};\n</code></pre><p>It also has not been possible to properly express higher-ranked function signatures with the  traits returning a , but you can write this with the  traits:</p><pre><code>use core::future::Future;\nasync fn f&lt;Fut&gt;(_: impl for&lt;'a&gt; Fn(&amp;'a u8) -&gt; Fut)\nwhere\n    Fut: Future&lt;Output = ()&gt;,\n{ todo!() }\n\nasync fn f2(_: impl for&lt;'a&gt; AsyncFn(&amp;'a u8))\n{ todo!() }\n\nasync fn main() {\n    async fn g(_: &amp;u8) { todo!() }\n    f(g).await;\n    //~^ ERROR mismatched types\n    //~| ERROR one type is more general than the other\n\n    f2(g).await; // ok!\n}\n</code></pre><h3><a href=\"https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html#hiding-trait-implementations-from-diagnostics\" aria-hidden=\"true\"></a>Hiding trait implementations from diagnostics</h3><p>The new <code>#[diagnostic::do_not_recommend]</code> attribute is a hint to the compiler to not show the annotated trait implementation as part of a diagnostic message. For library authors, this is a way to keep the compiler from making suggestions that may be unhelpful or misleading. For example:</p><pre><code>pub trait Foo {}\npub trait Bar {}\n\nimpl&lt;T: Foo&gt; Bar for T {}\n\nstruct MyType;\n\nfn main() {\n    let _object: &amp;dyn Bar = &amp;MyType;\n}\n</code></pre><pre><code>error[E0277]: the trait bound `MyType: Bar` is not satisfied\n --&gt; src/main.rs:9:29\n  |\n9 |     let _object: &amp;dyn Bar = &amp;MyType;\n  |                             ^^^^ the trait `Foo` is not implemented for `MyType`\n  |\nnote: required for `MyType` to implement `Bar`\n --&gt; src/main.rs:4:14\n  |\n4 | impl&lt;T: Foo&gt; Bar for T {}\n  |         ---  ^^^     ^\n  |         |\n  |         unsatisfied trait bound introduced here\n  = note: required for the cast from `&amp;MyType` to `&amp;dyn Bar`\n</code></pre><p>For some APIs, it might make good sense for you to implement , and get  indirectly by that blanket implementation. For others, it might be expected that most users should implement  directly, so that  suggestion is a red herring. In that case, adding the diagnostic hint will change the error message like so:</p><pre><code>#[diagnostic::do_not_recommend]\nimpl&lt;T: Foo&gt; Bar for T {}\n</code></pre><pre><code>error[E0277]: the trait bound `MyType: Bar` is not satisfied\n  --&gt; src/main.rs:10:29\n   |\n10 |     let _object: &amp;dyn Bar = &amp;MyType;\n   |                             ^^^^ the trait `Bar` is not implemented for `MyType`\n   |\n   = note: required for the cast from `&amp;MyType` to `&amp;dyn Bar`\n</code></pre><h3><a href=\"https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html#fromiterator-and-extend-for-tuples\" aria-hidden=\"true\"></a> and  for tuples</h3><p>Earlier versions of Rust implemented convenience traits for iterators of  tuple pairs to behave like , with  in 1.56 and  in 1.79. These have now been  to more tuple lengths, from singleton  through to 12 items long, . For example, you can now use  to fanout into multiple collections at once:</p><pre><code>use std::collections::{LinkedList, VecDeque};\nfn main() {\n    let (squares, cubes, tesseracts): (Vec&lt;_&gt;, VecDeque&lt;_&gt;, LinkedList&lt;_&gt;) =\n        (0i32..10).map(|i| (i * i, i.pow(3), i.pow(4))).collect();\n    println!(\"{squares:?}\");\n    println!(\"{cubes:?}\");\n    println!(\"{tesseracts:?}\");\n}\n</code></pre><pre><code>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n[0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561]\n</code></pre><h3><a href=\"https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html#updates-to-stdenvhome_dir\" aria-hidden=\"true\"></a>Updates to </h3><p> has been deprecated for years, because it can give surprising results in some Windows configurations if the  environment variable is set (which is not the normal configuration on Windows). We had previously avoided changing its behavior, out of concern for compatibility with code depending on this non-standard configuration. Given how long this function has been deprecated, we're now updating its behavior as a bug fix, and a subsequent release will remove the deprecation for this function.</p><p>These APIs are now stable in const contexts</p><p>Many people came together to create Rust 1.85.0. We couldn't have done it without all of you. <a href=\"https://thanks.rust-lang.org/rust/1.85.0/\">Thanks!</a></p>","contentLength":5852,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1iu3l0a/announcing_rust_1850_and_rust_2024_rust_blog/"},{"title":"Rust 2024 Is Coming: baby steps","url":"https://smallcultfollowing.com/babysteps/blog/2025/02/20/rust-2024-is-coming/?utm_source=atom_feed","date":1740063180,"author":"/u/VorpalWay","guid":7288,"unread":true,"content":"<div><p>So, a little bird told me that Rust 2024 is going to become stable today, along with Rust 1.85.0. In honor of this momentous event, I have penned a little ditty that I’d like to share with you all. Unfortunately, for those of you who remember Rust 2021’s <a href=\"https://smallcultfollowing.com/babysteps/blog/2021/05/26/edition-the-song/\">“Edition: The song”</a>, in the 3 years between Rust 2021 and now, my daughter has realized that her father is deeply uncool and so I had to take this one on solo. Anyway, enjoy! Or, you know, suffer. As the case may be.</p><p>In ChordPro format, for those of you who are inspired to play along.</p><pre tabindex=\"0\"><code>{title: Rust 2024}\n{subtitle: }\n\n{key: C}\n\n[Verse 1]\n[C] When I got functions that never return\nI write an exclamation point [G]\nBut use it for an error that could never be\nthe compiler [C] will yell at me\n\n[Verse 2]\n[C] We Rust designers, we want that too\n[C7] But we had to make a [F] change\n[F] That will be [Fm]better\n[C] Oh so much [A]better\n[D] in Rust Twenty [G7]Twenty [C]Four\n\n[Bridge]\n[Am] ... [Am] But will my program [E] build?\n[Am] Yes ... oh that’s [D7] for sure\n[F] edi-tions [G] are [C] opt in\n\n[Verse 3]\n[C] Usually when I return an `impl Trait`\neverything works out fine [G]\nbut sometimes I need a tick underscore\nand I don’t really [C] know what that’s for\n\n[Verse 4]\n[C] We Rust designers we do agree\n[C7] That was con- [F] fusing \n[F] But that will be [Fm]better\n[C] Oh so much [A]better\n[D] in Rust Twenty [G7]Twenty [C]Four\n\n[Bridge 2]\n[Am] Cargo fix will make the changes\nautomatically [G] Oh that sure sounds great...\n[Am] but wait... [Am] my de-pen-denc-[E]-ies\n[Am] Don’t worry e-[D7]ditions\n[F] inter [G] oper [C] ate\n\n[Verse 5]\n[C] Whenever I match on an ampersand T\nThe borrow [G] propagates\nBut where do I put the ampersand\nwhen I want to [C] copy again?\n\n[Verse 6]\n[C] We Rust designers, we do agree\n[C7] That really had to [F] change\n[F] That will be [Fm]better\n[C] Oh so much [A]better\n[D] in Rust Twenty [G7]Twenty [C]Four\n\n[Outro]\n[F] That will be [Fm]better\n[C] Oh so much [A]better\n[D] in Rust Twenty [G7]Twenty [C]Four\n\nOne more time!\n\n[Half speed]\n[F] That will be [Fm]better\n[C] Oh so much [A]better\n[D] in Rust Twenty [G7]Twenty [C]Four\n</code></pre></div>","contentLength":2134,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1iu09jr/rust_2024_is_coming_baby_steps/"},{"title":"HN: cypher queries tips (Graph dbms)","url":"https://dev.to/falkordb/hn-cypher-queries-tips-graph-dbms-hck","date":1740062774,"author":"Dan Shalev","guid":7239,"unread":true,"content":"<p>Writing performant Cypher queries isn’t just about syntax—it’s about understanding graph structures, optimizing query paths, and leveraging advanced features. At FalkorDB, we’ve seen how poorly optimized queries can bottleneck even the most robust systems.</p><p>Most devs don’t realize inefficient Cypher queries often stem from broad MATCH patterns and missing indexes. </p>","contentLength":375,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Deep Dive into Rust Structs: A Comprehensive Guide","url":"https://dev.to/sajiram_a4704bc095/deep-dive-into-rust-structs-a-comprehensive-guide-956","date":1740052988,"author":"Sajiron","guid":7174,"unread":true,"content":"<p>Structs in Rust are essential for organizing and managing complex data structures efficiently. This guide covers regular, tuple, and unit-like structs, along with advanced features such as generics, associated functions, lifetimes, and struct update syntax. Learn how to create structured, readable, and reusable Rust code with practical examples and best practices.</p>","contentLength":366,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"`#[derive(Deserialize)]` can easily be used to break your type's invariants","url":"https://www.reddit.com/r/rust/comments/1itv4mw/derivedeserialize_can_easily_be_used_to_break/","date":1740045795,"author":"/u/hpxvzhjfgb","guid":7237,"unread":true,"content":"<p>Recently I realised that if you just put <code>#[derive(Serialize, Deserialize)]</code> on everything without thinking about it, then you are making it possible to break your type's invariants. If you are writing any unsafe code that relies on these invariants being valid, then your code is automatically unsound as soon as you derive .</p><pre><code>mod non_zero_usize { use serde::{Deserialize, Serialize}; #[derive(Serialize, Deserialize)] pub struct NonZeroUsize { value: usize, } impl NonZeroUsize { pub fn new(value: usize) -&gt; Option&lt;NonZeroUsize&gt; { if value == 0 { None } else { Some(NonZeroUsize { value }) } } pub fn subtract_one_and_index(&amp;self, bytes: &amp;[u8]) -&gt; u8 { assert!(self.value &lt;= bytes.len()); // SAFETY: `self.value` is guaranteed to be positive by `Self::new`, so // `self.value - 1` doesn't underflow and is guaranteed to be in `0..bytes.len()` by // the above assertion. *unsafe { bytes.get_unchecked(self.value - 1) } } } } use non_zero_usize::NonZeroUsize; fn main() { let bytes = vec![5; 100]; // good let value = NonZeroUsize::new(1).unwrap(); let elem = value.subtract_one_and_index(&amp;bytes); println!(\"{elem}\"); // doesn't compile, field is private // let value = NonZeroUsize(0); // panics // let value = NonZeroUsize::new(0).unwrap(); // undefined behaviour, invariant is broken let value: NonZeroUsize = serde_json::from_str(r#\"{ \"value\": 0 }\"#).unwrap(); let elem = value.subtract_one_and_index(&amp;bytes); println!(\"{elem}\"); } </code></pre><p>I'm surprised that I have never seen anyone address this issue before and never seen anyone consider it in their code. As far as I can tell, there is also no built-in way in serde to fix this (e.g. with an extra  attribute) without manually implementing the traits yourself, which is extremely verbose if you do it on dozens of types.</p><p>I found a couple of crates on crates.io that let you do validation when deserializing, but they all have almost no downloads so nobody is actually using them. There was also <a href=\"https://www.reddit.com/r/rust/comments/1f0v7zu/serdev_serde_with_validation_is_out/\">this reddit post</a> a few months ago about one such crate, but the comments are just people reading the title and screeching \"PARSE DON'T VALIDATE!!!\", apparently without understanding the issue.</p><p>Am I missing something or is nobody actually thinking about this? Is there actually no existing good solution other than something like serdev? Is everyone just writing holes into their code without knowing it?</p>","contentLength":2342,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Publishing a Crate is insanely easy","url":"https://www.reddit.com/r/rust/comments/1ittsuf/publishing_a_crate_is_insanely_easy/","date":1740040023,"author":"/u/max-t-devv","guid":7497,"unread":true,"content":"<p>Basically the title, publishing a Rust crate is way easier than I expected. I wrote a CLI tool and assumed the process would be a pain, but it was literally just:</p><p>Having dealt with the BS from other languages, this was a really nice surprise.</p><p>Are there any gotchas or best practices you wish you knew before publishing?</p>","contentLength":317,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"This Week in Rust #587","url":"https://this-week-in-rust.org/blog/2025/02/19/this-week-in-rust-587/","date":1740017823,"author":"/u/seino_chan","guid":7470,"unread":true,"content":"<p>This week's crate is <a href=\"https://crates.io/crates/httpmock\">httpmock</a>, which is quite unsurprisingly a HTTP mocking library for Rust.</p><p>An important step for RFC implementation is for people to experiment with the\nimplementation and give feedback, especially before stabilization.  The following\nRFCs would benefit from user testing before moving forward:</p><ul><li><em>No calls for testing were issued this week.</em></li></ul><ul><li><em>No calls for testing were issued this week.</em></li></ul><ul><li><em>No calls for testing were issued this week.</em></li></ul><p>If you are a feature implementer and would like your RFC to appear on the above list, add the new \nlabel to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature\nneed testing.</p><p>Always wanted to contribute to open-source projects but did not know where to start?\nEvery week we highlight some tasks from the Rust community for you to pick and get started!</p><p>Some of these tasks may also have mentors available, visit the task page for more information.</p><p>Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.</p><p>This week's results were dominated by the update to LLVM 20 (<a href=\"https://github.com/rust-lang/rust/pull/135763\">#135763</a>),\nwhich brought a large number of performance improvements, as usually. There were also two other\nsignificant improvements, caused by improving the representation of  values (<a href=\"https://github.com/rust-lang/rust/pull/136593\">#136593</a>) and doing less work when formatting in  (<a href=\"https://github.com/rust-lang/rust/pull/136828\">#136828</a>).</p><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr></tr><tr><td align=\"center\">Improvements ✅  (secondary)</td></tr><tr></tr></tbody></table><p>3 Regressions, 2 Improvements, 4 Mixed; 4 of them in rollups\n50 artifact comparisons made in total</p><p>Every week, <a href=\"https://www.rust-lang.org/team.html\">the team</a> announces the 'final comment period' for RFCs and key PRs\nwhich are reaching a decision. Express your opinions now.</p><ul><li><em>No RFCs entered Final Comment Period this week.</em></li></ul><ul><li><em>No Cargo Tracking Issues or PRs entered Final Comment Period this week.</em></li></ul><ul><li><em>No Language Team Proposals entered Final Comment Period this week.</em></li></ul><ul><li><em>No Language Reference RFCs entered Final Comment Period this week.</em></li></ul><ul><li><em>No Unsafe Code Guideline Tracking Issues or PRs entered Final Comment Period this week.</em></li></ul><p>Rusty Events between 2025-02-19 - 2025-03-19 🦀</p><p>If you are running a Rust event please add it to the <a href=\"https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com\">calendar</a> to get\nit mentioned here. Please remember to add a link to the event too.\nEmail the <a href=\"mailto:community-team@rust-lang.org\">Rust Community Team</a> for access.</p><blockquote><p>I have found that many automated code review tools, including LLMs, catch 10 out of 3 bugs.</p></blockquote><p>Despite a lamentable lack of suggestions, llogiq is properly pleased with his choice.</p>","contentLength":2447,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1itnl16/this_week_in_rust_587/"},{"title":"Announcing Rust 1.85.0 and Rust 2024","url":"https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html","date":1740009600,"author":"The Rust Release Team","guid":7312,"unread":true,"content":"<p>The Rust team is happy to announce a new version of Rust, 1.85.0. This stabilizes the 2024 edition as well.\nRust is a programming language empowering everyone to build reliable and efficient software.</p><p>If you have a previous version of Rust installed via , you can get 1.85.0 with:</p><p>If you'd like to help us out by testing future releases, you might consider updating locally to use the beta channel () or the nightly channel (). Please <a href=\"https://github.com/rust-lang/rust/issues/new/choose\">report</a> any bugs you might come across!</p><p>We are excited to announce that the Rust 2024 Edition is now stable!\nEditions are a mechanism for opt-in changes that may otherwise pose a backwards compatibility risk. See <a href=\"https://doc.rust-lang.org/edition-guide/editions/index.html\">the edition guide</a> for details on how this is achieved, and detailed instructions on how to migrate.</p><p>This is the largest edition we have released. The <a href=\"https://doc.rust-lang.org/edition-guide/rust-2024/index.html\">edition guide</a> contains detailed information about each change, but as a summary, here are all the changes:</p><p>The guide includes migration instructions for all new features, and in general\n<a href=\"https://doc.rust-lang.org/edition-guide/editions/transitioning-an-existing-project-to-a-new-edition.html\">transitioning an existing project to a new edition</a>.\nIn many cases  can automate the necessary changes. You may even find that no changes in your code are needed at all for 2024!</p><p>Note that automatic fixes via  are very conservative to avoid ever changing the semantics of your code. In many cases you may wish to keep your code the same and use the new semantics of Rust 2024; for instance, continuing to use the  macro matcher, and ignoring the conversions of conditionals because you want the new 2024 drop order semantics. The result of  should not be considered a recommendation, just a conservative conversion that preserves behavior.</p><p> people came together to create this edition. We'd like to thank them all for their hard work!</p><p>Rust now supports asynchronous closures like  which return futures when called. This works like an  which can also capture values from the local environment, just like the difference between regular closures and functions. This also comes with 3 analogous traits in the standard library prelude: , , and .</p><p>In some cases, you could already approximate this with a regular closure and an asynchronous block, like . However, the future returned by such an inner block is not able to borrow from the closure captures, but this does work with  closures:</p><pre><code>let mut vec: Vec&lt;String&gt; = vec![];\n\nlet closure = async || {\n    vec.push(ready(String::from(\"\")).await);\n};\n</code></pre><p>It also has not been possible to properly express higher-ranked function signatures with the  traits returning a , but you can write this with the  traits:</p><pre><code>use core::future::Future;\nasync fn f&lt;Fut&gt;(_: impl for&lt;'a&gt; Fn(&amp;'a u8) -&gt; Fut)\nwhere\n    Fut: Future&lt;Output = ()&gt;,\n{ todo!() }\n\nasync fn f2(_: impl for&lt;'a&gt; AsyncFn(&amp;'a u8))\n{ todo!() }\n\nasync fn main() {\n    async fn g(_: &amp;u8) { todo!() }\n    f(g).await;\n    //~^ ERROR mismatched types\n    //~| ERROR one type is more general than the other\n\n    f2(g).await; // ok!\n}\n</code></pre><h3><a href=\"https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html#hiding-trait-implementations-from-diagnostics\" aria-hidden=\"true\"></a>Hiding trait implementations from diagnostics</h3><p>The new <code>#[diagnostic::do_not_recommend]</code> attribute is a hint to the compiler to not show the annotated trait implementation as part of a diagnostic message. For library authors, this is a way to keep the compiler from making suggestions that may be unhelpful or misleading. For example:</p><pre><code>pub trait Foo {}\npub trait Bar {}\n\nimpl&lt;T: Foo&gt; Bar for T {}\n\nstruct MyType;\n\nfn main() {\n    let _object: &amp;dyn Bar = &amp;MyType;\n}\n</code></pre><pre><code>error[E0277]: the trait bound `MyType: Bar` is not satisfied\n --&gt; src/main.rs:9:29\n  |\n9 |     let _object: &amp;dyn Bar = &amp;MyType;\n  |                             ^^^^ the trait `Foo` is not implemented for `MyType`\n  |\nnote: required for `MyType` to implement `Bar`\n --&gt; src/main.rs:4:14\n  |\n4 | impl&lt;T: Foo&gt; Bar for T {}\n  |         ---  ^^^     ^\n  |         |\n  |         unsatisfied trait bound introduced here\n  = note: required for the cast from `&amp;MyType` to `&amp;dyn Bar`\n</code></pre><p>For some APIs, it might make good sense for you to implement , and get  indirectly by that blanket implementation. For others, it might be expected that most users should implement  directly, so that  suggestion is a red herring. In that case, adding the diagnostic hint will change the error message like so:</p><pre><code>#[diagnostic::do_not_recommend]\nimpl&lt;T: Foo&gt; Bar for T {}\n</code></pre><pre><code>error[E0277]: the trait bound `MyType: Bar` is not satisfied\n  --&gt; src/main.rs:10:29\n   |\n10 |     let _object: &amp;dyn Bar = &amp;MyType;\n   |                             ^^^^ the trait `Bar` is not implemented for `MyType`\n   |\n   = note: required for the cast from `&amp;MyType` to `&amp;dyn Bar`\n</code></pre><h3><a href=\"https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html#fromiterator-and-extend-for-tuples\" aria-hidden=\"true\"></a> and  for tuples</h3><p>Earlier versions of Rust implemented convenience traits for iterators of  tuple pairs to behave like , with  in 1.56 and  in 1.79. These have now been  to more tuple lengths, from singleton  through to 12 items long, . For example, you can now use  to fanout into multiple collections at once:</p><pre><code>use std::collections::{LinkedList, VecDeque};\nfn main() {\n    let (squares, cubes, tesseracts): (Vec&lt;_&gt;, VecDeque&lt;_&gt;, LinkedList&lt;_&gt;) =\n        (0i32..10).map(|i| (i * i, i.pow(3), i.pow(4))).collect();\n    println!(\"{squares:?}\");\n    println!(\"{cubes:?}\");\n    println!(\"{tesseracts:?}\");\n}\n</code></pre><pre><code>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n[0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561]\n</code></pre><h3><a href=\"https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html#updates-to-stdenvhome_dir\" aria-hidden=\"true\"></a>Updates to </h3><p> has been deprecated for years, because it can give surprising results in some Windows configurations if the  environment variable is set (which is not the normal configuration on Windows). We had previously avoided changing its behavior, out of concern for compatibility with code depending on this non-standard configuration. Given how long this function has been deprecated, we're now updating its behavior as a bug fix, and a subsequent release will remove the deprecation for this function.</p><p>These APIs are now stable in const contexts</p><p>Many people came together to create Rust 1.85.0. We couldn't have done it without all of you. <a href=\"https://thanks.rust-lang.org/rust/1.85.0/\">Thanks!</a></p>","contentLength":5852,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Simulating the evolution of tiny neural networks.","url":"https://github.com/kostareg/evolution-rs","date":1740009176,"author":"/u/Most-Ice-566","guid":7172,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1itkjk3/simulating_the_evolution_of_tiny_neural_networks/"},{"title":"Build your own SQLite in Rust, Part 5: Evaluating queries","url":"https://blog.sylver.dev/build-your-own-sqlite-part-5-evaluating-queries?showSharer=true","date":1740004041,"author":"/u/geoffreycopin","guid":7142,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1itil6k/build_your_own_sqlite_in_rust_part_5_evaluating/"},{"title":"Typst 0.13 is out now","url":"https://typst.app/blog/2025/typst-0.13/","date":1740002784,"author":"/u/Frexxia","guid":6111,"unread":true,"content":"<div><strong><p>With Typst 0.13, we wanted to improve the day-to-day experience of using Typst. We fixed some of the most long-standing bugs and made Typst even more flexible to use. And on top, we're shipping a first, experimental version of HTML export. </p></strong></div><p>It's been almost two years since Typst's open-source launch and the project has matured quite a bit since then. Typst 0.12's development cycle saw many large-scale changes to Typst's foundations. With Typst 0.13, we moved the focus to the day-to-day experience of using Typst. We made quality-of-life improvements all across and fixed some of the biggest paper cuts. But, of course, we also shipped some exciting new features!</p><p>In this blog post, I'll walk you through the highlights of the release. If you prefer a more visual take on the topic, also check out the <a href=\"https://youtu.be/3OrrMzOCXfY\">release video</a>.</p><p>For a comprehensive overview of all changes in the release, visit the <a href=\"https://typst.app/docs/changelog/0.13.0/\">changelog</a>. If you're looking to upgrade your document to Typst 0.13, you can also skip ahead to the <a href=\"https://typst.app/blog/2025/typst-0.13/#migrating\">Migration section</a>.</p><h2>Paragraphs and first-line indent</h2><p>The work on  is what I'm most proud of in this release, but at the same time it's among the things that are least visible for users. What do I even mean with \"semantic paragraphs?\"</p><p>Let me explain. Up until now, Typst considered  piece of text you wrote as a paragraph — be it a single word in a page header, a figure caption, or a page number. Just like paragraphs, these things can have spacing, break across lines, etc. Layout-wise they are not all that different from paragraphs.</p><p>However, there  semantical differences. Only proper paragraphs should be counted when paragraphs are numbered (such as in legal texts). Only proper paragraphs should be announced by a screen reader as such. And even layout-wise there are differences; for instance, that only proper paragraphs should have first-line indent. While the layout routines for \"just text\" and a paragraph may be very similar, the second order effects of something being a proper paragraph are far-reaching.</p><p>In version 0.13, Typst finally gains a better understanding of this distinction. Whether something is a paragraph or just text is decided based on a few simple rules about which you can read in the <a href=\"https://typst.app/docs/reference/model/par/#what-becomes-a-paragraph\">updated paragraph documentation</a>.</p><p>The most visible immediate effect of this work is that <a href=\"https://typst.app/docs/reference/model/par/#parameters-first-line-indent\"></a> can now be applied to all paragraphs instead of just consecutive ones, closing the most upvoted Typst bug. Semantic paragraphs are also crucial for the in-development HTML export and for planned future work on PDF accessibility.</p><p>If you've created a table of contents with Typst's <a href=\"https://typst.app/docs/reference/model/outline/\" title=\"outline\">outline</a> functionality before, you might remember that it always looked a bit bland. The default style had no indentation and rather tightly dotted leaders (leaders are the filler dots between a title and its page number).</p><p>In Typst 0.13, the outline gets a full facelift while also becoming easier to customize. The new automatic indentation nicely aligns all titles and numberings across the whole outline, long titles have better-looking wrapping behavior, and we fixed a number of bugs.</p><p>Since Typst 0.2, you could draw <a href=\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve\">Bézier paths</a> with the  function. However, the input format of this function was rather arcane. Rather than specifying pen movements as in an SVG, you had to specify directly points with their two control points. Moreover, the path function had a fatal flaw: You could not close a path and then keep on drawing. This is necessary to draw a shape with cutouts, as depicated below.</p><p>The new <a href=\"https://typst.app/docs/reference/visualize/curve/\" title=\"`curve`\"></a> function fixes these flaws. It provides an easier-to-understand and more expressive interface. We also used this opportunity to change the name from  to  as we plan to repurpose the name  for a file path type in an upcoming release.</p><p>Various functions in Typst load files, be it <a href=\"https://typst.app/docs/reference/visualize/image/\">images</a>, <a href=\"https://typst.app/docs/reference/data-loading/\">data loading functions</a>, or <a href=\"https://typst.app/docs/reference/foundations/plugin/\">plugins</a>. Sometimes though, a little extra flexibility is needed, for example, to preprocess, generate, or inline data into a Typst document.</p><p>For this reason, there are also  variants on various of the functions, e.g.  or . However, that approach didn't work so well when a path is expected in a set rule, as in <code>theme</code>. It also introduced duplication: All the properties of an image are also spelled out again in .</p><p>Typst 0.13 revamps file handling to improve this unsatisfactory situation. All places where a path is expected now also support raw <a href=\"https://typst.app/docs/reference/foundations/bytes/\" title=\"bytes\">bytes</a> instead. Typst will always interpret a string as a path and raw bytes as data. When trying to decode an image from a string, thus make sure to first convert it to bytes. Converting to bytes is cheap as Typst will internally reuse the memory from the string. It will even remember that the bytes came from a string to make conversions back to a string cheap as well!</p><p>The existing  functions are now deprecated as they are not needed anymore. The  variants of data loading functions remain unchanged.</p><p>With the new byte-taking  function (and previously ), you can generate images at runtime. However, the image function expects images in an encoded image exchange format like PNG or JPEG. Producing valid bytes for such a format in pure Typst code is prohibitively complicated. Meanwhile, plugins are unnecessarily bloated and slowed down if they have to include an image encoder.</p><p>To streamline image generation workflows, Typst 0.13 thus brings support for loading images from uncompressed raw pixel data. To that end, the <a href=\"https://typst.app/docs/reference/visualize/image/#parameters-format\"></a> parameter of the image function supports a new form, where the channel encoding and pixel width/height of the image can be specified. This feature is crucial for better scientific visualizations — think things like heatmaps.</p><p>In version 0.8, Typst gained support for WebAssembly plugins — one of the features that would very likely still be a little blue \"feature request\" label if not for our fabulous open source community. Since then, plugins have become the backbone of various community packages. They're great because they bring the power and package ecosystem of all the languages that compile to WebAssembly right into Typst.</p><p>They are also faster to execute than Typst code. Still, with heavy usage the time spent executing plugin code can make up a significant chunk of compile time. A simple way to improve this would've been to switch to a faster WebAssembly runtime (specifically, from  to ). However, taking on a dependency on a WebAssembly runtime with just-in-time compilation wasn't a spot we wanted to put Typst into. It would have reduced portability and security and increased the amount of third-party code Typst depends on by a lot.</p><p>There was another way to speed up plugins: Since 0.12, Typst's layout engine is multi-threaded. Plugins didn't profit from this though as they couldn't be easily replicated across threads. This is a limitation we're lifting with 0.13. Typst will now automatically run plugins in multiple threads without any changes from plugin authors. This is possible because we require (and also already required in the past) plugin functions to be  This means that we can execute plugin functions out of order without a visible effect. For cases where purity is too limiting, Typst 0.13 introduces the new <a href=\"https://typst.app/docs/reference/foundations/plugin/#definitions-transition\"> API</a>, which lets plugin authors deal with stateful operations in a sound way.</p><p>The work on speeding up plugins was prioritized through a Typst open-source support contract. If you're using Typst in production at your company and are hitting any road blocks, <a href=\"https://typst.app/pricing/?oss-support#oss\">please reach out to us!</a></p><h2>Single-letter strings in math</h2><p>Since Typst's initial release,  would generate the letters \"h\" and \"i\" in upright style while  would result in an italic \"h\". It's one of the <a href=\"https://github.com/typst/typst/issues/274\">longest-standing bugs</a>, which is curious because it  so easy to fix. Unfortunately, it was not. To see why, we need to take a look behind the scenes and understand how Typst views your equations.</p><p>In Typst 0.12 and lower, the  in  is a <a href=\"https://typst.app/docs/reference/text/text/\" title=\"text\">text</a> element like any other text in your document. A string like  is converted to content by becoming such a text element, too. While different syntactically,  and  thus used to yield identical content. Since  becomes italic by default,  did, too.</p><p>Changing that by itself wouldn't have been too hard, but there is a third guest to the party: Symbols. The  in  is a <a href=\"https://typst.app/docs/reference/foundations/symbol/\">symbol value</a>. Like strings, symbols were up until now converted to content by becoming text elements. This means they work both in math and normal text (as ).</p><p>For a long time, the issue was thus blocked on finding a general solution to the text element ambiguity — <a href=\"https://github.com/typst/typst/issues/1125\">perhaps introducing a new  element for math-y text</a>. That story isn't fully written yet, but for 0.13 we really wanted to fix the issue at hand. For this reason, we attempted to find a minimal solution that fixes the issue while leaving our options for further improvements open.</p><p>The solution we came up with: Bare letters and symbols are now converted into an internal  which has auto-italics in math, but is transparently converted to normal text outside of math. Meanwhile, strings still generate text elements. With the <a href=\"https://laurmaedje.github.io/posts/types-and-context/\">planned unification of types and elements</a>, this symbol element and the existing symbol type will naturally merge into one.</p><p>Thanks to <a href=\"https://github.com/wrzian\">@wrzian</a> for working on this!</p><p>When text in different writing scripts is mixed, it's often important to have precise control over which text is typeset with which font. For example, Latin and Chinese text are almost always typeset with different fonts.</p><p>This is quite problematic for CJK (Chinese, Japanese, Korean) Typst users which often have text that mix their native language and English. Typst 0.13 takes a first step to improve this situation. With the new <a href=\"https://typst.app/docs/reference/text/text/#parameters-font\"></a> functionality, users can specify precisely for which character ranges a font should be used. This can, for example, be used to define in which font punctuation (which is present in both Latin and CJK fonts) is rendered.</p><p>The  feature supports specifying a character set, either as a <a href=\"https://typst.app/docs/reference/foundations/regex/\">regular expression</a> or one of the built-in ones. Currently, the only built-in set is , which should be specified for a Latin font that is  a CJK font in the fallback list. In the example below, we can put  first in the fallback chain while still having quotes render with </p><p>With Typst 0.13's new  function, you can attach arbitrary text or binary files to your PDF. These embedded files can then be browsed in PDF viewers or extracted programmatically by third-party tools.</p><p>When is this useful? One example, electronic invoicing, is ever more important as new EU legislation just came into force. While electronic invoices are typically in XML-based formats, it's often useful to still have a human-readable and printable invoice.</p><p>With PDF file embedding, the XML invoice data can be inserted into the PDF itself, forming a hybrid invoice. Currently, there is still one missing piece in Typst's support for this: The PDF metadata must identify the document as an E-Invoice to other applications. We plan to add support for embedding arbitrary metadata like this in a future Typst release.</p><h2>A first look at HTML export</h2><p>Saved for last is a particularly exciting topic: We've been starting work on <a href=\"https://typst.app/docs/reference/html/\">HTML export</a>! The feature is still very incomplete and only available for experimentation behind a feature flag, but there's already some stuff to see.</p><p>Most of the markup and some of the other built-in functions like  and  already produce the appropriate HTML. Our focus is on producing semantically rich HTML that retains the structure of the input document. The HTML output should be accessible, human-readable, and editable by hand.</p><pre><code>\nA  with some  A list\n with elements\n\nA bit of text\n  captionMy caption</code></pre><p>will produce the following HTML output:</p><pre></pre><p>Typst cannot always produce the perfect HTML automatically. Instead, it gives you full control by letting you generate raw HTML elements:</p><pre><code>\n  attrsstyle\n  A div with  inside!\n</code></pre><pre></pre><p>To make your document portable across PDF and HTML, we're also introducing a <a href=\"https://typst.app/docs/reference/foundations/target/\" title=\"`target`\"></a> function that returns the current export format (either  or ). It is mainly intended for use in show rules, like below:</p><pre></pre><p>The  function is contextual because the export target can vary within one compilation. How? With the <a href=\"https://typst.app/docs/reference/html/frame/\" title=\"`html.frame`\"></a> function, you can lay out part of your HTML document as an inline SVG, using Typst's normal layout engine. Within such a frame, the compilation target is  again, so that show rules produce the appropriate layout elements instead of HTML elements.</p><p>A lot! For instance, currently, Typst will always output a single HTML file. Support for outputting directories with multiple HTML documents and assets, as well as support for outputting fragments that can be integrated into other HTML documents is planned.</p><p>Typst currently also doesn't output any CSS, instead focusing fully on emitting semantic markup. You can of course write your own CSS styles and still benefit from sharing your content between PDF and HTML.</p><p>In the future, we plan to give you the option of automatically emitting CSS, taking more of your existing set rules into account. More generally, we have a lot of plans for HTML export! Visit the <a href=\"https://github.com/typst/typst/issues/5512\">tracking issue</a> to learn more about them.</p><p>In the CLI, you can experiment with HTML export by passing  or setting the  environment variable to . In the web app, HTML export is not yet available. It will become available once we think it's ready for general use.</p><p>You can also use HTML export with . Typst will then automatically spin up a live-reloading HTTP server that serves your document.</p><pre></pre><p>Work on Typst's HTML export is sponsored by <a href=\"https://nlnet.nl/project/Typst-HTML/\">NLNet</a>. We are very grateful for their support! We also want to thank external contributor <a href=\"https://github.com/01mf02\">@01mf02</a> with whom we've thus far collaborated on HTML export through the NLNet grant. Unfortunately, we and him have since parted ways over technical differences. Nonetheless, we plan to increase the time and resources we put into HTML export, and we are very happy to have NLNet's continued support in this endeavor.</p><p>Typst 0.13 ships with a number of deprecations and breaking changes. The <a href=\"https://typst.app/docs/changelog/0.13.0/\">changelog</a> has a full account of all changes, but in this section you'll learn how to deal with the most common kinds of breakage.</p><p>In Typst 0.8, <a href=\"https://typst.app/docs/reference/foundations/type/\">types</a> were promoted to proper values. As a result,  directly returns a type instead of a string since then. To make this change less disruptive, we also introduced a temporary compatibility behavior where types could be used like strings in some contexts (e.g.,  would be true). For implementation reasons, we did not add a warning for this at the time. We're rectifying this now and adding a warning to shake out remaining reliance on this behavior. With Typst 0.14, the compatibility behavior will be fully removed.</p><pre><code> int </code></pre><p>The  function and the  variants of data loading functions are now deprecated. You can instead directly pass bytes to the respective top-level functions instead. Read the <a href=\"https://typst.app/blog/2025/typst-0.13/#files-and-bytes\">section on files and bytes</a> to learn more.</p><pre><code></code></pre><p>The changes to the built-in <a href=\"https://typst.app/docs/reference/model/outline/\" title=\"outline\">outline</a> (table of contents) improve the out-of-the-box style and customizability. Unfortunately, they also break some existing outline customizations.</p><p>First of all, the  argument moved from  to <a href=\"https://typst.app/docs/reference/model/outline/#definitions-entry\" title=\"`outline.entry`\"></a>. If you get the error \"unexpected argument: fill\", adjust your code as shown below:</p><pre><code> outlinefillfill</code></pre><p>Because the  property is now on the entry, it can also be configured for individual outline levels, like this:</p><pre><code> outlineentrylevel outlinefill</code></pre><p>In light of the changes to paragraphs, outline entries now show themselves as <a href=\"https://typst.app/docs/reference/layout/block/\">blocks</a> instead of lines of text. This means spacing is now configured via normal show-set rules for <a href=\"https://typst.app/docs/reference/layout/block/#parameters-spacing\" title=\"`block.spacing`\"></a>.</p><pre><code> outlineentrylevelbelow outline it \n  it\n   weak</code></pre><p>In Typst 0.12 and below, outline entries expose a few fields like  and  that are useful for writing an outline entry show rule. These fields were derived from other fields for your convenience. Typst 0.13 makes this more explicit and idiomatic by turning them into methods. Read the <a href=\"https://typst.app/docs/reference/model/outline/#building-an-entry\">documentation on outline customization</a> for more details on how to use these methods.</p><pre><code> outline it \n  ...\n  it outline it \n  ...\n  itpage\n</code></pre><p>The  function is superseded by the new  function. The  function has an easier-to-understand interface that's closer to how SVG and the HTML canvas work. Read the <a href=\"https://typst.app/docs/reference/visualize/curve/\"> function's documentation</a> to learn how to express existing paths with the new function.</p><p>The  type was renamed to <a href=\"https://typst.app/docs/reference/visualize/tiling/\" title=\"`tiling`\"></a>. To migrate, simply replace  with . No further changes are necessary. The name  remains as a deprecated alias in Typst 0.13, but will be removed in an upcoming release.</p><p>Why the rename? For once, the name  was very generic. The name  is more closely associated with what it expresses. Secondly, we're considering to repurpose the name  for what today are <a href=\"https://typst.app/docs/reference/foundations/selector/\">selectors</a> once elements and types are unified.</p><pre><code>fillfill</code></pre><p>We also removed a number of things that were already deprecated and warned for in Typst 0.12. This includes the</p><p>That's it for Typst 0.13. We hope you're just as excited about the release as we are!</p>","contentLength":16690,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1iti2zx/typst_013_is_out_now/"},{"title":"Languages in the Linux kernel","url":"https://dev.to/cies/languages-in-the-linux-kernel-43bf","date":1740002782,"author":"Cies Breijs","guid":6085,"unread":true,"content":"<p>The Linux kernel it written in many languages, but at the time of writing (2025) the main language of the project is C, clocking in at 98% (from <a href=\"https://github.com/torvalds/linux\" rel=\"noopener noreferrer\">github.com/torvalds/linux</a> on 2025-02-19):</p><p>I believe the only language —or more correct \"language family\"— in the Linux kernel that will always be there is Assembly. At some point you need to write code, without any abstraction, directly for the hardware. Assembly is just that.</p><h2>\n  \n  \n  Allowing C++ in the kernel\n</h2><p>I believe Linus was right to reject C++ for the following reaons:</p><ol><li>C++ is a gigantic language, allowing it would create an endless discussion on which of its features would be allowed/forbidden,</li><li>being a loose superset of C it has the same archaic syntax, thus little improvement to the developer experience, and</li><li>no matter how many features would be allowed C++ does not improve enough on C to offset the cost of porting it.</li></ol><p>In recent year one thing became clear: C is no longer the best tool for the job. It's still the best understood tool, especially by the current team. It's what 98% of the Linux kernel is written in today. But the \"unchallenged best\" status it used to have for so many years in pragmatic kernel development is shaky.</p><p>Better languages have come up, specifically <a href=\"https://en.wikipedia.org/wiki/Zig_(programming_language)\" rel=\"noopener noreferrer\">Zig</a> and <a href=\"https://en.wikipedia.org/wiki/Rust_(programming_language)\" rel=\"noopener noreferrer\">Rust</a>.</p><p>There has been a lot of discussion on allowing Rust in the kernel. But since the main honchos, Linus and Greg Kroah-Hartman, have put their weight behind it, it is clear that Rust will find it's way into the project. We still have to wait and see how much of the project will be written in Rust.</p><p>Unlike C++, Rust has lots of features that are very useful in kernel development, and very few features that would need to be forbidden. Especially features related to memory safety, which constitute a <a href=\"https://lore.kernel.org/rust-for-linux/2025021954-flaccid-pucker-f7d9@gregkh\" rel=\"noopener noreferrer\">large part of the bugs in Linux</a>. Compared to C, Rust provides much a improved developer experience, which is not weird considering Rust is 40 younger.</p><p>Rust's main downside is: slower compile times. Compile times matter very much, but so does safety. While this is a hard trade-off, the decision seems to be final: Rust is to stay in the Linux kernel.</p><p>I expect Zig will come from another angle. The Zig compiler compiles C as well as Zig code. It's just a matter of time before the Zig compiler will be able to compile the Linux kernel. Once this is achieved, C-files can be ported to Zig one-by-one. I expect LLMs will help a great deal with the initial port of the Linux kernel's C code to Zig. Once in Zig, the code can be optimized by humans.</p><p>Zig is very similar to C. This makes the initial port rather straight forward. LLMs will perform much better on C-to-Zig than on C-to-Rust. </p><p>Compared to C, Zig brings serious improvements in the developer experience at similar-to-C compile times. Features like  are really cool and may allow the kernel project to do away with lots of crufty old C preprocessor macros on the one side, while allowing for interesting optimizations on the other.</p><p>I expect we will have a Linux kernel in Zig, Rust and Assembly in 10 years. It may be a fork. It may be the Linux mainline: it all depends on the open-mindedness of the main devs.</p><p>So far they seem up for it!</p>","contentLength":3140,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust Integration in Linux Kernel Faces Challenges but Shows Progress","url":"https://thenewstack.io/rust-integration-in-linux-kernel-faces-challenges-but-shows-progress/","date":1739986010,"author":"/u/CrankyBear","guid":6023,"unread":true,"content":"<p>When Miguel Ojeda, overseer of the <a href=\"https://rust-for-linux.com/\" rel=\"external \" onclick=\"this.target='_blank';\">Rust for Linux</a> project, asked Hellwig to suggest an alternative, he replied that Rust developers should “<a href=\"https://lwn.net/ml/all/20250108151858.GB24499@lst.de/\" rel=\"external \" onclick=\"this.target='_blank';\">Keep the wrappers in your code</a> instead of making life painful for others.” Getting to the heart of the matter, in another Linux Kernel Mailing List (LKML) note, Hellwig wrote, “<a href=\"https://lwn.net/ml/all/20250110083955.GA5395@lst.de/\" rel=\"external \" onclick=\"this.target='_blank';\">Maintaining multi-language projects is a pain</a> I have no interest in dealing with. If you want to use something that’s not C, be that assembly or Rust, you write to C interfaces and deal with the impedance mismatch yourself.”</p><h2>Is Rust Harder for Maintainers?</h2><p>That doesn’t work for Hellwig, either. He replied, “I also do not want another maintainer.&nbsp; If you want to make Linux impossible to maintain due to a cross-language codebase, do that in your driver so that you have to do it instead of spreading this cancer to core subsystems.”</p><p><a href=\"https://www.theregister.com/2001/06/02/ballmer_linux_is_a_cancer/\" rel=\"external \" onclick=\"this.target='_blank';\">“Cancer</a>,” thanks to Steve Ballmer’s criticism of Linux, has always been a red-letter term in <a href=\"https://thenewstack.io/learning-linux-start-here/\">Linux circles</a>. A lot of heated words followed. I think senior Linux kernel developer Ted T’so, though, hit the nail on the head when he said that, Ultimately, <a href=\"https://lore.kernel.org/lkml/20250208204416.GL1130956@mit.edu/\" rel=\"external \" onclick=\"this.target='_blank';\">Cristoph’s concern is that Rust is going to make life harder for maintainers </a>because of particular build breaks getting in the way of the very limited bandwidth that Maintainers have. In short, it’s not so much that kernel maintainers think Rust is awful; they don’t have enough hours in the day to maintain their projects.</p><h2>‘Rust Device Driver Mess’</h2><p>Be that as it may, one maintainer, <a href=\"https://asahilinux.org/\" rel=\"external \" onclick=\"this.target='_blank';\">Asahi Linux</a> lead developer Hector Martin, called on Torvalds to “pipe up with an authoritative answer” to resolve the Rust device driver mess. “If he doesn’t, Miguel and the other Rust folks should just merge this series once it is reviewed and ready, ignoring Christoph’s overt attempt at sabotaging the project.” When that didn’t work, Martin took to&nbsp; “shaming on social media” to carry his point. Torvalds was not amused.</p><p>Torvalds replied, “How about you accept the fact that maybe the problem is you? You think you know better. But the current process works. It has problems, but problems are a fact of life.&nbsp; There is no perfect.” That said, Torvalds continued, “If we have issues in the kernel development model, then <a href=\"https://lkml.org/lkml/2025/2/6/1292\" rel=\"external \" onclick=\"this.target='_blank';\">social media sure as hell isn’t the solution</a>. The same way, it sure as hell wasn’t the solution to politics.”</p><h2>Lessons From Real-Time Linux</h2><p>So, what can be done moving forward with Rust and Linux? Senior real-time Linux developer Steven Rostedt suggested the Rust developers might follow in the footsteps of <a href=\"https://www.zdnet.com/article/20-years-later-real-time-linux-makes-it-to-the-kernel-really/\" rel=\"external \" onclick=\"this.target='_blank';\">real-time Linux, which took twenty years to join the mainline Linux kernel</a>; that was to “<a href=\"https://lkml.org/lkml/2025/2/7/1955\" rel=\"external \" onclick=\"this.target='_blank';\">keep [Rust as]&nbsp; an out of tree patch</a>. … Yes, being out of tree is very difficult because you have to constantly rebase … But it also gives you full flexibility to try new approaches. Just because something is out of tree doesn’t mean it can’t be published and used. Red Hat and SUSE, as well as many others, shipped PREEMPT_RT while it was out of tree.”</p><p>Since then, Ojeda published a “<a href=\"https://rust-for-linux.com/rust-kernel-policy\" rel=\"external \" onclick=\"this.target='_blank';\">Rust kernel policy</a>” document to clarify the status of Rust integration efforts. This move came in response to growing confusion and debate within the Linux community regarding the role of Rust in kernel development.</p><p>This document addresses several crucial points, including kernel maintainers’ expected level of support. Ojeda noted that it continues to be up to each maintainer to decide how to deal with Rust. “Some subsystems may decide they do not want to have Rust code for the time being, typically for bandwidth reasons. This is fine and expected.” So, while some developers want Rust to move much more quickly into the kernel, Hellwig’s position is perfectly defendable.</p><p>Indeed, Ojeda continued, “For Rust, a subsystem may allow to temporarily break Rust code. The intention is to facilitate the friendly adoption of Rust in a subsystem without introducing a burden to existing maintainers who may be working on urgent fixes for the C side. The breakage should nevertheless be fixed as soon as possible, ideally before the breakage reaches Linus.”</p><h2>Rust Integration With Linux</h2><p>When it comes to Rust’s integration with Linux, unlike the tech mantra of “move fast and break things,” the rule is to “move slow and stabilize things.” After all, despite all the harsh words, Rust’s integration into Linux continued to move forward.</p><p>Next merge window, hopefully, we will have PCI and platform drivers working, which will fully enable almost all driver subsystems to start accepting (or at least getting) rust drivers.&nbsp; This is the end result of a lot of work from a lot of people, congrats to all of them for getting this far, you’ve proved many of us wrong in the best way possible, working code.”</p><p>In short, for all the war of words, Rust’s movement into Linux continues to be slow, steady, and productive, as we can see in 6.13. Rust will find its place in Linux.</p><div><svg width=\"68px\" height=\"31px\" viewBox=\"0 0 68 31\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"></svg></div>","contentLength":4960,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1itb34w/rust_integration_in_linux_kernel_faces_challenges/"},{"title":"Why don't you use Rust at your company?","url":"https://www.reddit.com/r/rust/comments/1ital1t/why_dont_you_use_rust_at_your_company/","date":1739984859,"author":"/u/szabgab","guid":6083,"unread":true,"content":"<p>There are plenty of readers here who us Rust at their company, but I am sure there are also many who would like to use Rust in a professional setting, but can't. I would like to collect the excuses you get from your boss and the valid concerns and reasons you and your boss might have about Rust.</p><p>I hope that knowing the issues will give us a better chance addressing them. </p>","contentLength":373,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How I Built a Local LLM-Powered File Reorganizer in Rust","url":"https://dev.to/__87e2e207/how-i-built-a-local-llm-powered-file-reorganizer-in-rust-1bip","date":1739978429,"author":"Евгений Перминов","guid":5881,"unread":true,"content":"<p>Some time ago, I decided to dive into Rust —this must be my  attempt. I’d tried learning it before, but each time I either got swamped by the borrow checker or got sidetracked by other projects. This time, I wanted a small,  project to force myself to stick with Rust. The result is <a href=\"https://github.com/PerminovEugene/messy-folder-reorganizer-ai/tree/main\" rel=\"noopener noreferrer\">messy-folder-reorganizer-ai</a>, a command-line tool for file organization powered by a local LLM.</p><h2>\n  \n  \n  The Inspiration: A Bloated Downloads Folder\n</h2><p>The main motivation was my messy  folder, which often ballooned to hundreds of files—images, documents, installers—essentially chaos. Instead of manually sorting through them, I thought, “Why not let an AI propose a structure?”</p><p>While brainstorming, I stumbled upon the possibility of running LLMs , like Ollama or other self-hosted frameworks. I loved the idea of  my data to some cloud service. So I decided to build a Rust-based CLI that  a local LLM server for suggestions on how to reorganize my folders.</p><h2>\n  \n  \n  Challenges: LLM &amp; Large Folders\n</h2><ul><li> I started using , but the responses didn’t follow prompt instructions well, so I switched to , which performed much better.\n</li><li> When testing on folders with many files, the model began forgetting the beginning of the prompt and stopped following instructions properly. Increasing  (which defines the model’s context size) helped partially, but the model still struggles with .\n</li><li><ul><li> Split the file list into smaller chunks and send multiple prompts.\n</li><li> If you’re an LLM expert—especially with local models like Ollama—I’d love advice on how to handle larger sets without hitting memory or context limits.</li></ul></li></ul><ul><li> Specify the local LLM endpoint, model name, or other model options.\n</li><li> Tweak the AI prompt to fine-tune how the model interprets your folder’s contents.\n</li><li> The tool shows you the proposed structure and asks for confirmation before reorganizing any files.</li></ul><ul><li> I’d love code feedback — best practices, performance tips, or suggestions on how to structure the CLI.\n</li><li> Any advice on optimizing local model inference for large file sets or advanced chunking strategies would be invaluable.</li></ul><p>This project has been a great way to re-learn some Rust features and experiment with local AI solutions. While it works decently for medium-sized folders, there’s plenty of room to grow. If this concept resonates with you—maybe your Downloads folder is as messy as mine—give it a try, open an issue, or contribute a pull request.</p><p><p>\nFeel free to reach out on the </p><a href=\"https://github.com/PerminovEugene/messy-folder-reorganizer-ai/issues\" rel=\"noopener noreferrer\">GitHub issues page</a>, or drop me a note if you have any thoughts, suggestions, or just want to talk about Rust and AI!</p>","contentLength":2560,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How I Built a Local LLM-Powered File Reorganizer with Rust","url":"https://dev.to/evgeniiperminov/how-i-built-a-local-llm-powered-file-reorganizer-in-rust-1bip","date":1739978429,"author":"Evgenii Perminov","guid":5914,"unread":true,"content":"<p>Some time ago, I decided to dive into Rust —this must be my  attempt. I’d tried learning it before, but each time I either got swamped by the borrow checker or got sidetracked by other projects. This time, I wanted a small,  project to force myself to stick with Rust. The result is <a href=\"https://github.com/PerminovEugene/messy-folder-reorganizer-ai/tree/main\" rel=\"noopener noreferrer\">messy-folder-reorganizer-ai</a>, a command-line tool for file organization powered by a local LLM.</p><h2>\n  \n  \n  The Inspiration: A Bloated Downloads Folder\n</h2><p>The main motivation was my messy  folder, which often ballooned to hundreds of files—images, documents, installers—essentially chaos. Instead of manually sorting through them, I thought, “Why not let an AI propose a structure?”</p><p>While brainstorming, I stumbled upon the possibility of running LLMs , like Ollama or other self-hosted frameworks. I loved the idea of  my data to some cloud service. So I decided to build a Rust-based CLI that  a local LLM server for suggestions on how to reorganize my folders.</p><h2>\n  \n  \n  Challenges: LLM &amp; Large Folders\n</h2><ul><li> I started using , but the responses didn’t follow prompt instructions well, so I switched to , which performed much better.\n</li><li> When testing on folders with many files, the model began forgetting the beginning of the prompt and stopped following instructions properly. Increasing  (which defines the model’s context size) helped partially, but the model still struggles with .\n</li><li><ul><li> Split the file list into smaller chunks and send multiple prompts.\n</li><li> If you’re an LLM expert—especially with local models like Ollama—I’d love advice on how to handle larger sets without hitting memory or context limits.</li></ul></li></ul><ul><li> Specify the local LLM endpoint, model name, or other model options.\n</li><li> Tweak the AI prompt to fine-tune how the model interprets your folder’s contents.\n</li><li> The tool shows you the proposed structure and asks for confirmation before reorganizing any files.</li></ul><ul><li> I’d love code feedback — best practices, performance tips, or suggestions on how to structure the CLI.\n</li><li> Any advice on optimizing local model inference for large file sets or advanced chunking strategies would be invaluable.</li></ul><p>This project has been a great way to re-learn some Rust features and experiment with local AI solutions. While it works decently for medium-sized folders, there’s plenty of room to grow. If this concept resonates with you—maybe your Downloads folder is as messy as mine—give it a try, open an issue, or contribute a pull request.</p><p><p>\nFeel free to reach out on the </p><a href=\"https://github.com/PerminovEugene/messy-folder-reorganizer-ai/issues\" rel=\"noopener noreferrer\">GitHub issues page</a>, or drop me a note if you have any thoughts, suggestions, or just want to talk about Rust and AI!</p>","contentLength":2560,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building CSV RAG with Rig and Rust 🔥🔥🔥","url":"https://dev.to/josh_mo_91f294fcef0333006/building-csv-rag-with-rig-and-rust-2bpi","date":1739974434,"author":"Josh Mo","guid":5853,"unread":true,"content":"<p>In this article, we're going to look at how you can use the <a href=\"https://github.com/0xplaygrounds/rig\" rel=\"noopener noreferrer\"></a> Rust AI framework to create an application that is able to load a CSV file, embed it into a vector store and have an LLM answer questions based on provided context from our vector store. We'll serve the application in the form of a command-line tool.</p><p>Retrieval-Augmented Generation (RAG) is a technique that combines the power of information retrieval with the generative capabilities of large language models (LLMs). The process typically involves two main components: retrieving relevant knowledge from a pre-existing database or knowledge base and generating contextually accurate answers based on that information. When a question or query is posed, the model first retrieves relevant snippets or pieces of information from the knowledge base. It then augments its generative model with this newly acquired knowledge, enabling it to provide a more accurate, informed response.</p><p>In contrast to traditional LLMs that rely purely on their trained parameters, RAG systems dynamically incorporate external data, ensuring that responses are grounded in factual and up-to-date knowledge. When a question is asked, the relevant knowledge from a pre-existing dataset is retrieved and fed into the model. The LLM then generates an answer that combines the retrieved information and its generative abilities, aiming to offer a detailed and accurate response. This hybrid approach allows RAG models to provide answers that are not only linguistically fluent but also well-supported by factual data.</p><p>Next, you'll need to create a new project using :</p><div><pre><code></code></pre></div><p>Before we start, let's add the relevant dependencies which we need:</p><div><pre><code>cargo add serde rig-core tokio csv \nserde/derive,tokio/macros,tokio/rt-multi-thread\n</code></pre></div><p>This adds the following dependencies:</p><ul><li> - The rig library.</li><li> - an asynchronous Rust runtime. We additionally add the  and  feature as we want to use the macro.</li><li> - The Rust crate for using CSVs.</li></ul><p>Before we do anything else, we'll need to declare our struct type as well as derive the correct macros for it. Note that the embedding trait for Rig also depends on  (which also depends on ), hence the derivation.</p><div><pre><code></code></pre></div><p>Next to be able to use Rig's embeddings API, we need to implement the  trait. This trait simply defines a method for what to embed. Because we don't have a singular field we want to embed and will need the whole record, we can simply just implement  for the struct then format the whole struct into a string (which we can then embed).</p><div><pre><code></code></pre></div><p>Thankfully, embedding our CSV is actually quite easy now that we've done the hard part. We can create an OpenAI client and get the embedding model, then iterate through each record and build an embedding from it and store it in Rig's in-memory vector store.</p><p>You can see below the code to generate an OpenAI client is fairly simple:</p><div><pre><code></code></pre></div><p>We'll also keep the code for loading the CSV in as a separate function as it's relatively long.</p><div><pre><code></code></pre></div><p>The next step will be to actually take input from the user and prompt the LLM using not only the prompt, but additional (relevant!) snippets from the vector store. </p><p>We'll start by taking some input from standard input (i.e., you load up the application in the terminal, then you type in something and press Enter). We then check if the prompt is equal to  - if it is then immediately break the loop and close the application, if not, carry on and retrieve a response from the LLM.</p><div><pre><code></code></pre></div><p>In terms of storing your conversation history, it is actually quite simple to do so. All you need to do is to create a  and then feed it into the agent, using the  function instead of . You then add a user message and assistant message (in that order) at the end of the loop iteration. This allows you to build up a conversation with the LLM.</p><p>Additionally, we'll also add a  command which allows the entire conversation to be wiped should the user want to ask the LLM about something else.</p><div><pre><code></code></pre></div><p>Now that we've set up a base for your command-line tool, here are a few ways you can extend this demo to do much more than just simple ragging:</p><ul><li>What about semantic routing to make sure your LLM stays on track?</li><li>Try incorporating CSV RAG into a new, bigger pipeline!</li></ul><p>Thanks for reading! Hopefully you will have a good example of how to improve how you work with data by creating a RAG pipeline from your CSV.</p>","contentLength":4278,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[media] My first project on rust after learning basics.","url":"https://www.reddit.com/r/rust/comments/1it5kwi/media_my_first_project_on_rust_after_learning/","date":1739972036,"author":"/u/Independent_Row_6529","guid":5967,"unread":true,"content":"<p>Hi. Have been learning Rust, for the last one month. Wrote this program for a digital clock in terminal with ANSI block character.</p><p>Made an array to store the numbers written using the ansi codes - It was hard to align the block character for the output. Could this have been done differently?</p><p>Are there any dependencies specifically for making terminal UIs?</p><p>I'm also intending to add more features - to learn rust more. Please give some advice on that. Thanks in advance</p>","contentLength":467,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Greg KH: Rust isn't a \"silver bullet\" that will solve all of our problems, but it sure will help in a huge number of places, so for new stuff going forward, why wouldn't we want that?","url":"https://lore.kernel.org/rust-for-linux/2025021954-flaccid-pucker-f7d9@gregkh/","date":1739967255,"author":"/u/SupermarketAntique32","guid":5780,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1it42sw/greg_kh_rust_isnt_a_silver_bullet_that_will_solve/"},{"title":"Master Rust’s Ownership & Borrowing System 🚀","url":"https://dev.to/sajiram_a4704bc095/master-rusts-ownership-borrowing-system-cp2","date":1739967118,"author":"Sajiron","guid":5782,"unread":true,"content":"<p>Rust’s Ownership &amp; Borrowing system is one of its most powerful features, ensuring memory safety without a garbage collector. In this guide, we break down:</p><p>✅ How ownership works and why it matters\n✅ The difference between mutable &amp; immutable references<p>\n✅ How lifetimes prevent dangling references</p></p>","contentLength":303,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rewrite Kafka in Rust? I've developed a faster message queue, StoneMQ.","url":"https://www.reddit.com/r/rust/comments/1it3d53/rewrite_kafka_in_rust_ive_developed_a_faster/","date":1739964657,"author":"/u/jonefeewang","guid":5966,"unread":true,"content":"<div><ol><li><strong>Current Features (v0.1.0)</strong>:<ul><li>Supports single-node message sending and receiving.</li><li>Implements group consumption functionality.</li></ul></li><li>:<ul><li>Aims to replace Kafka's server-side functionality in massive-scale queue cluster.</li><li>Focused on reducing operational costs while improving efficiency.</li><li>Fully compatible with Kafka's client-server communication protocol, enabling seamless client-side migration without requiring modifications.</li></ul></li><li>:<ul><li>Entirely developed in .</li><li>Utilizes  and  to achieve high performance, concurrency, and scalability.</li></ul></li></ol></div>   submitted by   <a href=\"https://www.reddit.com/user/jonefeewang\"> /u/jonefeewang </a>","contentLength":538,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"First official beta of the Azure SDK for Rust released","url":"https://bsky.app/profile/heaths.dev/post/3liirjbux4s27","date":1739951661,"author":"/u/thekdude","guid":5732,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1it0985/first_official_beta_of_the_azure_sdk_for_rust/"},{"title":"This Week in Rust 587","url":"https://this-week-in-rust.org/blog/2025/02/19/this-week-in-rust-587/","date":1739941200,"author":"TWiR Contributors","guid":6156,"unread":true,"content":"<p>This week's crate is <a href=\"https://crates.io/crates/httpmock\">httpmock</a>, which is quite unsurprisingly a HTTP mocking library for Rust.</p><p>An important step for RFC implementation is for people to experiment with the\nimplementation and give feedback, especially before stabilization.  The following\nRFCs would benefit from user testing before moving forward:</p><ul><li><em>No calls for testing were issued this week.</em></li></ul><ul><li><em>No calls for testing were issued this week.</em></li></ul><ul><li><em>No calls for testing were issued this week.</em></li></ul><p>If you are a feature implementer and would like your RFC to appear on the above list, add the new \nlabel to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature\nneed testing.</p><p>Always wanted to contribute to open-source projects but did not know where to start?\nEvery week we highlight some tasks from the Rust community for you to pick and get started!</p><p>Some of these tasks may also have mentors available, visit the task page for more information.</p><p>Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.</p><p>This week's results were dominated by the update to LLVM 20 (<a href=\"https://github.com/rust-lang/rust/pull/135763\">#135763</a>),\nwhich brought a large number of performance improvements, as usually. There were also two other\nsignificant improvements, caused by improving the representation of  values (<a href=\"https://github.com/rust-lang/rust/pull/136593\">#136593</a>) and doing less work when formatting in  (<a href=\"https://github.com/rust-lang/rust/pull/136828\">#136828</a>).</p><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr></tr><tr><td align=\"center\">Improvements ✅  (secondary)</td></tr><tr></tr></tbody></table><p>3 Regressions, 2 Improvements, 4 Mixed; 4 of them in rollups\n50 artifact comparisons made in total</p><p>Every week, <a href=\"https://www.rust-lang.org/team.html\">the team</a> announces the 'final comment period' for RFCs and key PRs\nwhich are reaching a decision. Express your opinions now.</p><ul><li><em>No RFCs entered Final Comment Period this week.</em></li></ul><ul><li><em>No Cargo Tracking Issues or PRs entered Final Comment Period this week.</em></li></ul><ul><li><em>No Language Team Proposals entered Final Comment Period this week.</em></li></ul><ul><li><em>No Language Reference RFCs entered Final Comment Period this week.</em></li></ul><ul><li><em>No Unsafe Code Guideline Tracking Issues or PRs entered Final Comment Period this week.</em></li></ul><p>Rusty Events between 2025-02-19 - 2025-03-19 🦀</p><p>If you are running a Rust event please add it to the <a href=\"https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com\">calendar</a> to get\nit mentioned here. Please remember to add a link to the event too.\nEmail the <a href=\"mailto:community-team@rust-lang.org\">Rust Community Team</a> for access.</p><blockquote><p>I have found that many automated code review tools, including LLMs, catch 10 out of 3 bugs.</p></blockquote><p>Despite a lamentable lack of suggestions, llogiq is properly pleased with his choice.</p>","contentLength":2447,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Non-blockchain Internships are real, just landed one!","url":"https://www.reddit.com/r/rust/comments/1isw9pa/nonblockchain_internships_are_real_just_landed_one/","date":1739937099,"author":"/u/cornell_cubes","guid":5579,"unread":true,"content":"<p>Rust has been my (CS Undergrad, Junior year, no prior internships) language of choice for a while now, but going into this last job hunt season I initially didn't even try looking for Rust opportunities as I've been told for a while that there are just no entry-level opportunities right now.</p><p>After sending out tons of SWE application and getting NOWHERE I got a little curious and started scanning for rust internships on Indeed. To my surprise, this year there were a good handful of listings! Several were looking to rewrite existing C libraries in Rust, others were using it to build a new piece of their tech stack. I found that, due to my portfolio being pretty rust heavy, I got way more responses for positions seeking talent in that language.</p><p>But yeah, I think we're finally entering an era where you can land entry level rust jobs without working for some odd blockchain company! Especially in the embedded scene, saw a lot for aerospace and for my job I'll be porting some RISC-V microcontroller firmware to Rust.</p><p>Curious if anyone else has noticed more opportunities this season, or if things have always just been not as bad as I was lead to believe they were?</p><p>Cool things I saw on my search: - NASA was looking for an intern to help them rewrite their core Flight System library to Rust - Woven by Toyota wanted interns they could relocate to Japan where they would write some Rusty vehicle software/firmware - Intel wanted an intern to help them port some graphics firmware to Rust - I guess Neuralink has Rust in their tech stack? - Lots of startups embracing Rust</p>","contentLength":1576,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I created a CLI-Music Player in Rust!","url":"https://dev.to/paradoxy/i-created-a-cli-music-player-in-rust-5a3f","date":1739919121,"author":"Ojalla","guid":4455,"unread":true,"content":"<p>I built a  that allows users to play, pause, stop, and manage their music files directly from the terminal. It supports basic playback controls, volume adjustment, and song listing.</p><p>This walkthrough will cover:</p><ul><li>How the music player was implemented</li><li>How to run the application</li><li>A guide on available commands</li></ul><p>I used the following Rust crates:</p><ol><li> – For command-line argument parsing.</li><li> – For colored terminal output.</li><li> – For audio playback.</li><li> – To handle  for graceful exit.</li></ol><div><pre><code>cargo add clap colored rodio ctrlc\n</code></pre></div><h2><strong>How the CLI Music Player Works</strong></h2><p>The music player follows a command-line workflow where users can:</p><ul><li>Load songs from a specified directory.</li><li>Play, pause, resume, stop playback.</li></ul><h3><strong>1. Command-Line Interface (CLI) Configuration</strong></h3><p>The application uses  to handle command-line arguments. Users must specify a music directory:</p><div><pre><code></code></pre></div><p>This ensures that users provide a valid music directory or request help using .</p><p>The player reads user commands in a loop:</p><div><pre><code></code></pre></div><p>This function displays a colored prompt and waits for user input.</p><h3><strong>3. Implementing the Music Player</strong></h3><p>I created a  struct to store the player’s state:</p><div><pre><code></code></pre></div><ul><li>The audio sink and output stream ().</li><li>The directory containing music files.</li><li>The current playing song and status.</li></ul><h3><strong>4. Loading Songs from a Directory</strong></h3><p>When the application starts, it loads music files from the given directory:</p><div><pre><code></code></pre></div><p>This function reads all files in the specified directory and maps them to numbers for easy selection.</p><p>To play a song, the application reads the file, decodes it, and plays it using :</p><div><pre><code></code></pre></div><ul><li>Stops any currently playing track.</li><li>Loads and decodes the selected song.</li></ul><h3><strong>6. Implementing Playback Controls</strong></h3><p>The player handles commands like play, pause, resume, stop, and volume adjustment:</p><div><pre><code></code></pre></div><p>These functions control playback using  methods like , , , and .</p><h3><strong>7. Displaying Available Songs</strong></h3><p>Users can list all available songs:</p><div><pre><code></code></pre></div><div><pre><code>git clone https://github.com/Parado-xy/rust-cli-music-player\nrust-cli-music-player\n</code></pre></div><ol><li>Run the application with a music directory:\n</li></ol><div><pre><code>cargo run  /path/to/music\n</code></pre></div><ol><li>Use the available commands:\n</li></ol><div><pre><code>play &lt;number&gt;    \npause            \nresume           \nstop             \nvolume &lt;0.0-1.0&gt; \nlist             \nstatus           </code></pre></div><p>This Rust CLI Music Player is a simple but powerful terminal-based music player. It utilizes  for audio playback,  for argument parsing, and  for improved UI. Future improvements could include playlist support and file format filtering.</p>","contentLength":2324,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I'm I too ambitious?","url":"https://www.reddit.com/r/rust/comments/1ispq6n/im_i_too_ambitious/","date":1739919113,"author":"/u/Sonder-Otis","guid":5598,"unread":true,"content":"<p>for my operating systems class I personally want to work on a project, creating a boot loader. I want to use rust for this. But I have never written rust before. And for my dsa classes I am learning python(which is simple I think). Is it too ambitious to think I can learn rust within the month or two and build the project.</p><p>I have previously written JS,Java and C++.</p><p>edit: my grades do not depend on it. I want to do it because I want to learn rust and have a better undrstanding of operating systems</p>","contentLength":499,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Automating Data Classification with Stof","url":"https://dev.to/amelia_wampler_e7aa93dab9/automating-data-classification-with-stof-afo","date":1739909058,"author":"Amelia Wampler","guid":4414,"unread":true,"content":"<p>Data classification is a crucial step in organizing and utilizing information effectively, especially in AI-driven applications. With Stof, developers can seamlessly classify and structure incoming data using built-in schema functions. In this example, we’ll walk through how Stof can automatically assign color classifications to t-shirt records based on hex values or color names.</p><h2>\n  \n  \n  The Problem: Identifying T-Shirt Colors\n</h2><p>Imagine you're processing product data, and a t-shirt record comes in with only a single color field. This value could be a color name or a hex code, but to make it useful for AI models or analytics, you need a standardized classification.</p><h2>\n  \n  \n  The Stof Solution: Schema-Based Classification\n</h2><p>Using Stof’s schema and schemify functions, we can dynamically classify colors as data flows in. Here’s how it works:</p><ul><li><strong>Preloading a Color Dataset</strong> – A comprehensive list of color names and their corresponding hex values is stored efficiently in a compiled binary format.</li><li> – A function converts hex codes into RGB values to find the closest matching color in our dataset.</li><li><strong>Applying Meta-Code for Classification</strong> – As each t-shirt record is processed, Stof automatically assigns a standardized color name based on the closest RGB match. If a name is provided instead of a hex value, it appends the corresponding hex code instead.</li></ul><p>Running this through Stof’s CLI (or embedding it in an application) demonstrates its efficiency. Given a hex code, Stof finds the closest color match and updates the record. For example:</p><ul><li> Hex Code for Light Blue → Output: \"Aquamarine\"</li><li> \"Lime\" → Output: Hex Code for Lime Green</li></ul><p>This logic runs efficiently via WebAssembly, making it highly performant across different environments.</p><p>With Stof, data classification happens in real-time, reducing the need for extra processing logic in applications. This approach enhances AI readiness, improves data consistency, and simplifies the developer experience—all while ensuring data remains structured and searchable.</p><p>This is just one example of how Stof can automate data structuring and classification. Whether you’re handling product data, AI training sets, or dynamic records, Stof streamlines data governance and accessibility. Read more in our Docs and visit our Github to start contributing. </p>","contentLength":2303,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Online events: Rust in English (Feb 18-Feb 28)","url":"https://dev.to/szabgab/online-events-rust-in-english-feb-18-feb-28-454i","date":1739902721,"author":"Gabor Szabo","guid":4346,"unread":true,"content":"<p>I found the following Rust in English-related online events for the next 10 days.</p><p>Online events remove the physical limitation of who can participate. What remain are the time-zone differences and the language barrier. In order to make it easier for you to find events that match those constraints I started to collect the <a href=\"https://events.code-maven.com/\" rel=\"noopener noreferrer\">online events</a> where you can filter by topic and time. Above I took the events and included the starting time in a few selected time-zones. I hope it makes it easier to find an event that is relevant to you. The data and the code generating the pages are all on <a href=\"https://github.com/szabgab/events/\" rel=\"noopener noreferrer\">GitHub</a>. Share your ideas on how to improve the listings to help you more.</p>","contentLength":656,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"\"How Rust & Embassy Shine on Embedded Devices (Part 1)\"","url":"https://www.reddit.com/r/rust/comments/1ishpbd/how_rust_embassy_shine_on_embedded_devices_part_1/","date":1739898567,"author":"/u/carlk22","guid":4614,"unread":true,"content":"<p>For over a year, off-and-on, the Seattle Rust User's Group has been exploring embedded programming with Rust and Embassy. Using Rust on embedded systems is both frustrating and fun. Frustrating because support for Rust lags behind both C/C++ and Python. Fun because of the Embassy Framework. </p><p><strong>Embassy gives us many benefits of an (Real Time) Operating System (RTOS) without the overhead</strong>. It provides bare-metal, cooperative multitasking with async/await, enabling non-blocking operations and efficient task management. (However, it does not provide hard real-time guarantees like traditional RTOS.) </p><p>I find it astounding that with Rust, we get async on a single processor without even needing memory allocation.</p><p><strong>If You Decide to Use Rust for Embedded, We Have Advice:</strong></p><ol><li>Use Embassy to model hardware with ownership.</li><li>Minimize the use of static lifetimes, global variables, and lazy initialization.</li><li>Adopt async programming to eliminate busy waiting.</li><li>Replace panics with Result enums for robust error handling.</li><li>Make system behavior explicit with state machines and enum-based dispatch.</li><li>Simplify hardware interaction with virtual devices.</li><li>Use Embassy tasks to give virtual devices state, method-based interaction, and automated behavior.</li><li>Layer virtual devices to extend functionality and modularity.</li><li>Embrace no_std and avoid alloc where possible.</li></ol>","contentLength":1328,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"eserde: Don't stop at the first deserialization error","url":"https://mainmatter.com/blog/2025/02/13/eserde/","date":1739897285,"author":"/u/LukeMathWalker","guid":4374,"unread":true,"content":"<p><a href=\"https://github.com/mainmatter/eserde\" target=\"_blank\" rel=\"nofollow noopener\" aria-describedby=\"external-new-window-message\"></a> is a new Rust crate by <a href=\"https://mainmatter.com/rust-consulting/\">Mainmatter</a>, built on top of , to provide better error reporting capabilities when deserializing user-facing payloads—e.g. API request bodies, configuration files.</p><p><a href=\"https://serde.rs\" target=\"_blank\" rel=\"nofollow noopener\" aria-describedby=\"external-new-window-message\"></a> is  Rust library for (de)serialization.There's a catch, though:  is designed to abort deserialization as soon as an error occurs. This becomes an issue when relying on  for deserializing user-provided payloads—e.g. a request body for a REST API.There may be  errors in the submitted payload, but <a href=\"https://crates.io/crates/serde_json\" target=\"_blank\" rel=\"nofollow noopener\" aria-describedby=\"external-new-window-message\"></a> will only report the first one it encounters before stopping deserialization. The API consumer is then forced into a slow and frustrating feedback loop:</p><ol><li>Receive a single error back</li><li>Back to 1., until there are no more errors to be fixed</li></ol><p>That's a poor developer experience. We should do better!We should report  errors at once, thus reducing the number of API interactions required to converge to a well-formed payload.</p><p>That's the problem  was born to solve.</p><h2><a href=\"https://mainmatter.com/blog/2025/02/13/eserde/#case-study:-an-invalid-json-payload\" aria-describedby=\"case-study:-an-invalid-json-payload\"></a>Case study: an invalid JSON payload</h2><p>Let's consider this schema as our reference example:</p><pre><code>\n    version\n    source\n    major\n    minor\n    patch</code></pre><p>We'll try to deserialize an invalid JSON payload into it via :</p><pre><code> payload  error payload\n    error</code></pre><p>Only the first error is returned, as expected. But we know there's more than that!We're missing the  field in the  struct and the  field can't be null.Let's switch to :</p><pre><code>\n    version\n    source\n    major\n    minor\n    patch payload  errors payload\n    errors</code></pre><p>Much better, isn't it?We can now inform the users  that they have to fix three different schema violations.</p><p>To use  in your projects, add the following dependencies to your :</p><pre><code></code></pre><ul><li>Replace all instances of <code>#[derive(serde::Deserialize)]</code> with <code>#[derive(eserde::Deserialize)]</code></li><li>Switch to an -based deserialization function</li></ul><p> provides first-class support for JSON deserialization, gated behind the  Cargo feature.</p><pre><code></code></pre><p>If you're working with JSON:</p><p> doesn't support deserializing from a reader, i.e. there is no equivalent to .</p><p>There is also an  integration, <a href=\"https://docs.rs/eserde_axum\" target=\"_blank\" rel=\"nofollow noopener\" aria-describedby=\"external-new-window-message\"></a>. It provides an -powered JSON extractor as a drop-in replacement for 's built-in one.</p><p>The approach used by  is compatible, in principle, with all existing -based deserializers.Refer to <a href=\"https://github.com/mainmatter/eserde/blob/main/eserde/src/json.rs\" target=\"_blank\" rel=\"nofollow noopener\" aria-describedby=\"external-new-window-message\">the source code of </a> as a blueprint to follow for building an -powered deserialization function for another format.</p><p> is designed to be maximally compatible with .</p><p><a href=\"https://docs.rs/eserde/latest/eserde/derive.Deserialize.html\" target=\"_blank\" rel=\"nofollow noopener\" aria-describedby=\"external-new-window-message\"><code>derive(eserde::Deserialize)</code></a> will implement both  and , honoring the behaviour of all the  attributes it supports.</p><p>If one of your fields doesn't implement , you can annotate it with  to fall back to 's default deserialization logic for that portion of the input.</p><pre><code>\n    x</code></pre><p>But how does  actually work? Let's keep using JSON as an example—the same applies to other data formats.We try to deserialize the input via . If deserialization succeeds, we return the deserialized value to the caller.</p><pre><code>s de s error  devve e</code></pre><p>Nothing new on the happy path—it's the very same thing you're doing today in your own applications with vanilla . We diverge on the unhappy path.Instead of returning to the caller the error reported by , we do another pass over the input using <code>eserde::EDeserialize::deserialize_for_errors</code>:</p><pre><code>s _guard  de s de  de errors de__ errors  errors\n            path\n            details error\n        errors\n    errors</code></pre><p><code>EDeserialize::deserialize_for_errors</code> accumulates deserialization errors in a thread-local buffer, initialized by <code>ErrorReporter::start_deserialization</code> and retrieved later on by <code>ErrorReporter::take_errors</code>.</p><p>This underlying complexity is encapsulated into 's functions, but it's beneficial to have a mental model of what's happening under the hood if you're planning to adopt .</p><h2><a href=\"https://mainmatter.com/blog/2025/02/13/eserde/#limitations-and-downsides\" aria-describedby=\"limitations-and-downsides\"></a>Limitations and downsides</h2><p> is a new library—there may be issues and bugs that haven't been uncovered yet. Test it thoroughly before using it in production. If you encounter any problems, please open an issue on our <a href=\"https://github.com/mainmatter/eserde\" target=\"_blank\" rel=\"nofollow noopener\" aria-describedby=\"external-new-window-message\">GitHub repository</a>.</p><p>Apart from defects, there are some downsides inherent in 's design:</p><ul><li>It can't deserialize from a non-replayable reader, since it needs to visit the input again on the unhappy path.</li><li>On the unhappy path it's going to be  than , since it visits the input again.</li><li>It'll have a bigger impact than vanilla  on your compilation times, since <code>#[derive(eserde::Deserialize)]</code> generates more code than  (roughly twice as much), so</li></ul><p>We believe the trade-off is worthwhile for user-facing payloads, but you should walk in with your eyes wide open.</p><p>We plan to add first-class support for more data formats, in particular YAML and TOML. They are frequently used for configuration files, another scenario where batch error reporting would significantly improve our developer experience.</p><p>We plan to incrementally support more and more  attributes, thus minimising the friction to adopting  in your codebase.</p><p>We plan to add first-class support for validation, with a syntax similar to <a href=\"https://docs.rs/garde/latest/garde/\" target=\"_blank\" rel=\"nofollow noopener\" aria-describedby=\"external-new-window-message\"></a> and <a href=\"https://docs.rs/validator/latest/validator/\" target=\"_blank\" rel=\"nofollow noopener\" aria-describedby=\"external-new-window-message\"></a>. The key difference: validation would be performed  the deserialization process. No need to remember to call  afterwards.</p>","contentLength":4912,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1ish5vd/eserde_dont_stop_at_the_first_deserialization/"},{"title":"To Deref or not to Deref?","url":"https://www.reddit.com/r/rust/comments/1ise16r/to_deref_or_not_to_deref/","date":1739889277,"author":"/u/awesomealchemy","guid":4431,"unread":true,"content":"<p>Do you impl Deref for your \"newtypes\" or do you stick with the  syntax?</p><pre><code>struct Frequency(f32); impl Deref for Frequency { type Target = f32; fn deref(&amp;self) -&gt; &amp;Self::Target { &amp;self.0 } } </code></pre><p>I'm torn. The .0 syntax gives me C++ std::pair PTSD and hurts my eyes. BUT the deref adds boilerplate and we still need to deref it... </p>","contentLength":322,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Welcome, Cot: the Rust web framework for lazy developers","url":"https://www.reddit.com/r/rust/comments/1isd428/welcome_cot_the_rust_web_framework_for_lazy/","date":1739886672,"author":"/u/m4tx","guid":4210,"unread":true,"content":"<p><strong>Ever wanted a Django-like experience in Rust? Meet</strong><a href=\"https://cot.rs/\">Cot</a><strong>, a batteries-included web framework designed for developers who just want to get things done.</strong></p><p>It has been built from a frustration that there is no easy-to-use, fully features web framework for Rust, even though the web development ecosystem has existed for quite a long time in the community. It builds upon projects such as axum, sea-query, tower, serde, and more, combining them in a package that allows you to start quickly, adding a lot of features in the process.</p><p>Cot comes with built-in authentication, sessions, an admin panel, templates, and even its own ORM with automatically generated migrations – something that even the most established ORMs in the wild (such as SeaORM and Diesel) do not provide. It is still in early development and hence it's still missing many features and <strong>is by no means production-ready yet</strong>, but we're planning to make frequent updates to close the gap to other mature tools as quickly as possible!</p>","contentLength":989,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Meilisearch 1.13","url":"https://www.meilisearch.com/blog/meilisearch-1-13","date":1739873145,"author":"/u/ggStrift","guid":4148,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1is9dml/meilisearch_113/"},{"title":"My first Aya program","url":"https://dev.to/littlejo/my-first-aya-program-2j0p","date":1739870243,"author":"Joseph Ligier","guid":4056,"unread":true,"content":"<p>I'm getting started with eBPF programming with Aya. The idea behind this series of articles is to get you started too.</p><p>In this section, we'll create our first Aya program. We'll also see that there are different types of eBPF programs.</p><h2>\n  \n  \n  Example of Hello world Program\n</h2><p>I assume you have an operating environment as defined in <a href=\"https://dev.to/littlejo/lets-introduce-ebpf-and-aya-40ji\">Part 1</a>. You can also follow this step-by-step lab on creating an Aya program:</p><p>To generate an Aya program, we'll use cargo generate :</p><div><pre><code>cargo generate https://github.com/aya-rs/aya-template\n</code></pre></div><p>We're going to answer a few questions:</p><ul><li>: the name of the project (I put )</li><li>The second question is more interesting:</li></ul><p>In fact, there are different types of eBPF programs. As we saw in <a href=\"https://dev.to/littlejo/lets-introduce-ebpf-and-aya-40ji\">Part 1</a>, I wrote that there are 3 types of eBPF software:</p><ul><li>Observability and Tracing</li></ul><p>The choices presented to generate the eBPF program are, in fact, parts of the Linux kernel that can be modified or supervised by eBPF. So you need to think carefully about this before jumping headlong into programming.</p><p>As I wrote in Part 1, Aya is not yet fully mature compared with other solutions. Here's one reason why: although it may seem as if there are already a lot of program types available, there are still quite a few missing:</p><p>What's more, as the Linux kernel continues to evolve, there will certainly be other types of eBPF programs available in the near future.</p><p>I tested a few types of eBPF program with Aya before writing this article. To study each type, you can quickly spend days: \"I don't understand, it doesn't work\" is certainly the phrase I'm uttering the most at the moment. There aren't many similarities between eBPF program types. If you've already played with  programs, you'll have other problems with  programs, for example. For this article, we'll be looking at  eBPF programs.</p><p>Tracepoints are, as the name suggests, places in the Linux code that have been marked (see <a href=\"https://docs.kernel.org/trace/tracepoints.html\" rel=\"noopener noreferrer\">recommendations</a>). They are mainly used for tracing and debugging the Linux kernel.</p><p>All these points are accessible in the <code>/sys/kernel/debug/tracing/available_events</code> file:</p><p>Just in time, this is the supplementary question we ask:</p><p>We're going to choose  because everyone knows what a syscall is. Does everyone?</p><p>When a program is run, it asks the kernel to perform primary functions called syscalls (system calls).</p><p>To view the syscalls performed when a command is run, you can use the strace program. For example, you can use:</p><p>To find available tracepoint names, simply issue this command:</p><div><pre><code>grep syscalls: /sys/kernel/debug/tracing/available_events\n</code></pre></div><p>We can see that they are of the : <code>sys_(enter|exit)_$name_of_syscall</code></p><ul><li>&nbsp;: starting of syscall</li></ul><p>We'll arbitrarily choose , which is the syscall that executes a program and the one that starts the . So we have .</p><p>Now we're going to test the generated program directly:</p><div><pre><code>cd test-aya\nRUST_LOG=info cargo run\n</code></pre></div><p>This will take a little while: the time it takes to download and compile all the dependencies. Now you can go and have <a href=\"https://a-cup-of.coffee/\" rel=\"noopener noreferrer\">a cup of coffee</a>!</p><p>Once your program has been demarched, run commands on another terminal, e.g.: \nOn the  terminal, you'll see the following message every time you type a command:</p><div><pre><code>[INFO test_aya] tracepoint sys_enter_execve called\n</code></pre></div><p>So every time the syscall  is called, this message will be displayed. We've just created the \"Hello World\" of the Tracepoint eBPF program (). So, for an eBPF program to start up, it needs an event () that tells it to run: this is what we call a .</p><h2>\n  \n  \n  Anatomy of a Hello world Aya program\n</h2><p>Let's take a look at what the  command has generated. As we saw in part 1, there are two parts to an eBPF program: kernel space and user space.</p><p>The eBPF program source code can be found here: <code>test-aya-ebpf/src/main.rs</code>. It is compiled first.\nHere are its contents:</p><div><pre><code></code></pre></div><p>If you've been following part 1, there's one thing that should already shock you about Rust code: there is no  function. This is a prerequisite for writing an eBPF program. To overcome this problem, we use the notation: </p><p>Another more disturbing prerequisite is that the standard library (std) is forbidden. Only the core library and all libraries that use it are allowed. This means you can't use the  macro. To tell Rust not to use the standard: </p><p>But then how are we going to display anything if  isn't possible? That's where Aya comes to the rescue: \nThis library can be used to display messages if the  environment variable is set. It also includes , ,  and  (see <a href=\"https://docs.rs/aya-log/latest/aya_log/\" rel=\"noopener noreferrer\">documentation</a>).\nThanks to this library, you can display :<code>info!(&amp;ctx, \"tracepoint sys_enter_execve called\");</code></p><p>We're going to discard this part of the program:</p><div><pre><code></code></pre></div><p>Don't panic! We'll never change it. It's the code that makes the program work.\nAll that's left is to explain :</p><div><pre><code></code></pre></div><p>Two  libraries are used, including one for the tracepoint macro:</p><div><pre><code></code></pre></div><p>In other words, we're going to create an eBPF tracepoint program with the function .</p><p>The  keyword is to say that the function is public; it's not really “important”, it's just to make the Aya framework work. If we remove these unwanted elements:</p><div><pre><code></code></pre></div><p>We're back to a few things we've already seen in part 1.\nThings to remember:</p><ul><li>the  function is attached to the  program.</li><li>All the work will be done in the  function.</li><li>: this is the context variable that will enable us to go beyond a  program.</li></ul><p>As you can see, there's no mention of  for the moment. I want this Tracepoint program to be attached to an  syscall. Good timing: let's take a look at the user-space code now.</p><p>In this article, we won't be modifying the user space code. It can be found in this file: .\nI'll simplify its code for a better understanding:</p><div><pre><code></code></pre></div><p>This Rust code is a little more traditional: you can use the standard library, as evidenced by the  and the  function.\nI've commented out the important parts of the code with numbers:</p><ul><li>1: We'll load the previously compiled eBPF code into an ebpf variable</li><li>2: We'll start displaying the eBPF logs (for example, the  from the previous code) in the user space</li><li>3: Convert the main function of the eBPF code into  code</li><li>4: Load the main program function (the  function)</li><li>5: Attach it to the tracepoint <em>syscalls:sys_enter_execve</em></li></ul><p>The rest of the code is for program operation, such as not quitting the program before the logs start.</p><p>If you're new to Rust, there are certainly some parts of the code that may seem obscure to you. That's a good thing! The next section is dedicated to Rust.</p><h2>\n  \n  \n  Rust, it's getting complicated!\n</h2><p>Before modifying the code, I think it's worth reviewing the Rust language a little more theoretically. I didn't want to scare you too much in part 1 😃</p><p>In Part 1, we looked at variable declaration and modification. But we didn't talk much about types. This is important because, for example, all functions must be filled in with the various types.\nThere are two types:</p><ul></ul><p>Let's take a look at scalar types: for integers, for example, we can define very precisely how many bits they are encoded in:</p><p>It's often optional to declare the variable with its type, but to remove any ambiguity, we do it this way:</p><p>With , you can display the contents in a different way, for example, you can convert to hexadecimal:</p><div><pre><code></code></pre></div><p>That's the magic of the macro! There's also this kind of possibility with  in Aya. For example, you can convert a number into an  or  address: very useful for eBPF networking.</p><p>Let's finish with scalar types and talk about , i.e. modifying the type. Let's take a look at this example:</p><div><pre><code></code></pre></div><p>This program won't work because the arguments require u32 and not u16. It is of course possible to change the function directly, but you don't always have access to the function as you would in a library. How do I change the code? Use the keyword :</p><div><pre><code></code></pre></div><p>Now let's talk about compound types, for example how to represent integer arrays:</p><div><pre><code></code></pre></div><p>An array has a fixed number of entries: you can't add a number after the fact. There are also dynamic arrays in Rust, such as . However, eBPF programs (on the kernel side) cannot use them: they require arrays with a number of entries already defined before compilation. The strategy is therefore to evaluate the maximum number an array can have by filling it with 0.</p><div><pre><code></code></pre></div><p>The default string in Rust is an array (a slice, to be precise - I'll get a slap on the wrist if I don't) with a fixed number of  entries (and therefore ). It is not, as in other programming languages, an array of characters (). The notation is .</p><p>Thus, it's not possible to concatenate in this way:</p><div><pre><code></code></pre></div><p>However, if we convert  to , it works:</p><div><pre><code></code></pre></div><p> is the equivalent of . This makes it possible to have arrays of  dynamically.</p><p> are a mixture of different types. The keyword is . For example, to create a simple role-playing game :</p><div><pre><code></code></pre></div><p>If you find initialization a little complicated, you can create methods with the  keyword:</p><div><pre><code></code></pre></div><p>As you can see, thanks to the structures, the programming language reads almost naturally. In a way, it's like an object language.\nTo give you a more realistic example, take a look at the code generated in the user area above:</p><div><pre><code></code></pre></div><p>What can be deduced from the doc, the approximate code:</p><div><pre><code></code></pre></div><p>Previously, we had to cast to have the same type:</p><div><pre><code></code></pre></div><p>Using generic function, we don't need to cast:</p><div><pre><code></code></pre></div><p>This way, you won't have to think about which type you need to use the addition function.\nThe function is inevitably a little more complicated to write. We won't be writing any in this section. But for use via a library, it's pure bliss (I'm exaggerating a little bit).</p><p>Soon, we'll see a generic function:<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fjj7ml0k9y5nzzr8kj23v.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fjj7ml0k9y5nzzr8kj23v.png\" alt=\"Example of generic function\" width=\"800\" height=\"288\"></a></p><p>We've been seeing  a lot since part 1. Let's talk about it in a little more detail. is an . We haven't seen what it is, but to put it simply:  lets you create functions that can result in a success or an error. This is elegant when used with  or  as we saw in Part 1.</p><p>As with ,  and  can be of any type (within certain constraints).\nAs a reminder, here's a simple example of a function that returns  :</p><div><pre><code></code></pre></div><p>In this example, only integers greater than 10 are displayed.</p><p> is another  quite similar to Result: the function returns either  or . It's an  value.</p><p>To retrieve the  value, there's no equivalent to the question mark with . However, a trick is to convert the Option type with  to  and then add the .\nHere's an equivalent of the previous code with a function that returns  :</p><div><pre><code></code></pre></div><p>Another solution to retrieve this value is to use  method:</p><div><pre><code></code></pre></div><p>But there's a big : it's not possible to use  in kernel space code. Why not? To cut a long story short:  can panic, and an eBPF program can't afford that:</p><p>The piece of code that we discarded in the kernel space above :</p><div><pre><code></code></pre></div><p>It can be used to manage the case of , for example.</p><p>When a variable is created in a program, the compiler must take care of finding where in RAM to add the variable, as well as deleting it to avoid so-called memory leaks. For fixed variables such as integers or non-dynamic arrays, variables are stored in , so there are no problems with releasing them. Thus, because of the restrictions in kernel space programs, there are no clean-up problems in eBPF. Dynamic variables, on the other hand, are stored in , and that's where the problems come in.</p><p>In , we let the developer do this with  and . If he forgets to free memory, it often goes unnoticed, but is a potential source of bugs.</p><p>In other languages (such as  or ), the garbage collector takes care of cleaning up automatically, without developer intervention. However, this is done at the expense of performance.</p><p>In Rust, we use the notion of ownership to solve the problem.</p><div><pre><code></code></pre></div><ul><li> has the  type, which is dynamic</li></ul><p>This program cannot compile. Why?</p><ul><li> will reserve memory space in the heap:<code>let s1 = String::from(\"Hello\");</code></li><li> will retrieve the ownership of this memory space: \nThus  has lost ownership of this memory space:</li></ul><p>This means that no two (or more) variables can have the same memory space. Rust will automatically release a variable once it has left the scope.</p><p>The most elegant solution is to use a  (Keyword: ). These references are also known as safe pointers:</p><div><pre><code></code></pre></div><p>This will display  twice.\nWe say that 's value, but  retains its property.\nLet's take one last example to show you that this isn't always obvious:</p><div><pre><code></code></pre></div><p>This code doesn't compile either. Why? will reserve a memory space in the heap:<code>let s = String::from(\"Hello\");</code>\nThe  function will take the property of this memory space:\nAt the end of this processing, Rust will delete this memory space:</p><div><pre><code></code></pre></div><p>So the display of  crashes.</p><p>To solve this problem simply use this borrowing system:</p><div><pre><code></code></pre></div><p>When you're not used to it, you often make the mistake. But the error messages are self-explanatory and therefore easy to correct.</p><p>The  keyword is very useful when working at low level. It's the sysadmin equivalent of . By default, Rust has protections, notably for reading memory. The unsafe keyword lets you tell Rust: \"Don't worry, I know what I'm doing! If you set  anywhere, Rust will remind you with a warning, or if you don't set unsafe anywhere, Rust will tell you to set it if that's what you really want to do.</p><p>Let's finish this busy section with raw pointers. The notion is similar to the C pointer. It lets you know the address of the variable. There are two types of raw pointers:</p><ul><li>If data of type  cannot change : </li><li>If data of type  can change: </li></ul><p>To convert to a raw pointer, use the  function:</p><div><pre><code></code></pre></div><p>That's all for this Rust part. I hope it wasn't too complicated and dense to understand. If it was, don't worry: let us guide you through the rest, and we'll review each point for a concrete case.</p><p>We've already created a program that every time a binary is executed, it displays a few things in the logs. It would be nice to be able to see which binary is being executed. So we're going to create a little program that will log all the binaries that are executed on the machine. It might be handy to see this for security reasons.</p><p>To do this, you'll need to modify the aya code in kernel space <code>test-aya-ebpf/src/main.rs</code>\nThis is the main part you'll need to modify:</p><div><pre><code></code></pre></div><p>This is based on the  variable, which is a  structure.\nTo do this, we'll take a look at <a href=\"https://docs.rs/aya-ebpf/latest/aya_ebpf/\" rel=\"noopener noreferrer\">the documentation</a>:</p><p>The library is located at the program level:<code>use aya_ebpf::programs::TracePointContext;</code>\nThis shows all the documentation for each type of eBPF program:</p><p>This shows the functions that can be used with :</p><p>We're not interested in the first function, which is used to create a . It's probably used in the macro. That leaves us with the second function: . This function reads the tracepoint at a certain offset. How do we find this offset?</p><p>You need to look in the syscall tracepoint file. To find it, go to: <code>/sys/kernel/debug/tracing/events/[category]/[name]</code>. And the file name is .\nSo the file is here: <code>/sys/kernel/debug/tracing/events/syscalls/sys_enter_execve/format</code>.</p><p>We'll try to retrieve the filename with offset :</p><div><pre><code></code></pre></div><p>I wasn't sure what to put in place of , so I arbitrarily set the type to .\nIf you try to compile :</p><p>It works better now with :</p><div><pre><code></code></pre></div><p>Now let's try using this variable. The result of the read_at function is . The aim is to retrieve . Just use the question mark ().\nSo we'll get :</p><div><pre><code></code></pre></div><p>Nevertheless, compilation won't work because if it makes an error, the  function returns an  and my final function returns a .</p><div><pre><code></code></pre></div><p>Similarly, the  function must always return a . We must therefore cast the type to  :</p><div><pre><code></code></pre></div><p>With these type-matching modifications, it should compile. Let's have a look at the contents of filename. Here's the whole file now if you're lost :</p><div><pre><code></code></pre></div><p>If we run a cargo run again, here's what we see:</p><div><pre><code>[INFO  test_aya] tracepoint sys_enter_execve called 94803283704040\n[INFO  test_aya] tracepoint sys_enter_execve called 94803283704112\n[INFO  test_aya] tracepoint sys_enter_execve called 94173001563176\n[INFO  test_aya] tracepoint sys_enter_execve called 824637710416\n[INFO  test_aya] tracepoint sys_enter_execve called 94865232898256\n[INFO  test_aya] tracepoint sys_enter_execve called 824638316624\n[INFO  test_aya] tracepoint sys_enter_execve called 94865232898256\n</code></pre></div><p>These numbers are not file names. This was to be expected, given that the type is . What I notice is that when I run a command: I'm always number  if it's the server it's the other numbers, if I change user I get a different number.\nWell... that's not much help. Shall we give up? The documentation isn't complete, it doesn't say what it's really for.<p>\nI look at the source code of the </p> function:</p><div><pre><code></code></pre></div><p>And what does  do?</p><p>In this way, an address in memory is accessed. Now we need to think about how to successfully read this address.\nI'll take a look at the helper functions:</p><p>I have the feeling that this is this function that i need:</p><p>Let's add these lines and see what happens:</p><div><pre><code></code></pre></div><p>So all we have to do is change the  type to  (a raw pointer) and we'll change the variable names to be consistent with the documentation:</p><div><pre><code></code></pre></div><p>The compilation works! Now we have a byte-coded file name. Now we need to figure out how to convert it to .</p><p>That's what I want, but as I said earlier, eBPF doesn't accept the standard library ().\nMiracle! It also exists in the  library :</p><p>So we add:<code>let _filename = core::str::from_utf8(_filename_bytes);</code>\nLet's see if it compiles:</p><p>So it compiled fine. But the eBPF verifier is not happy at all. The verifier is a kernel protection system that prevents an eBPF program from being launched if it considers it dangerous for the kernel. What we see in the screenshot is JIT code (Just In Time code).</p><p>The explanation is at the end:<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F418g93byz58zwp9yw592.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F418g93byz58zwp9yw592.png\" alt=\"Permission denied\" width=\"787\" height=\"149\"></a></p><p>In the documentation, there's another function that might suit us. Perhaps  makes too many checks that are not compatible with the eBPF verifier?</p><p>Let's add  and :</p><div><pre><code></code></pre></div><p>It compiles!\nBy modifying the log line:</p><div><pre><code></code></pre></div><p>I connect with  on the server where the program is installed, I see all the binaries that are executed :</p><p>The code works, and if you clean it up afterwards, you'll get a code similar to this one</p><p>You can find the program in <a href=\"https://github.com/littlejo/aya-examples/blob/main/tracepoint-binary/tracepoint-binary-ebpf/src/main.rs\" rel=\"noopener noreferrer\">GitHub</a>.</p><p>That's all for this part. I hope you enjoyed it. It was much more technical than the first part. In the next part, we'll be looking at a few things we've already mentioned: the eBPF map. This will, for example, solve the problem we have with the program: file names are truncated. With an eBPF map, we can solve the problem!</p>","contentLength":17774,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust Control Flow & Functions: A Beginner’s Guide 🚀","url":"https://dev.to/sajiram_a4704bc095/rust-control-flow-functions-a-beginners-guide-fp5","date":1739868439,"author":"Sajiron","guid":4026,"unread":true,"content":"<p>Control flow is the backbone of programming, dictating how code executes based on conditions and loops. In Rust, we have if statements, match expressions, and loop constructs like for, while, and loop. But that’s not all—Rust’s functions play a crucial role in keeping our code modular and reusable.</p><p>In this guide, you’ll learn:\n✅ How to use if and match for decision-making<p>\n✅ When to use for, while, and loop in Rust</p>\n✅ How to define and call functions with parameters and return values<p>\n✅ The power of generics, closures, and associated functions</p></p><p>Mastering these concepts will give you a solid foundation for writing efficient and idiomatic Rust code.</p>","contentLength":665,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"What does Rust development look like on Windows?","url":"https://www.reddit.com/r/rust/comments/1is6d2u/what_does_rust_development_look_like_on_windows/","date":1739860222,"author":"/u/crankykernel","guid":4273,"unread":true,"content":"<p>I'm a 25-year developer of C, and for the last decade Rust on Linux and only Linux systems living in the terminal and Emacs. However, I want to provide a better first class experience for our app on Windows.. Its a background service, fortunately. We already do build on Windows with MSYS2/mingw32 or whatever. My experience with Windows is installing that toolset when our Windows CI break.</p><p>However, to make Windows more first class, I want to setup a proper Windows development environment for Rust. I've got as far as installing Rust w/Rustup in Powershell terminal and getting VSCode to work. But still jumping back to my msys2 environment for git etc.</p><p>Anyone care to tell me what their development environment for mainly Rust apps looks like on Windows?</p>","contentLength":756,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Sin/Cosine SIMD functions?","url":"https://www.reddit.com/r/rust/comments/1is66j5/sincosine_simd_functions/","date":1739859511,"author":"/u/West-Implement-5993","guid":4447,"unread":true,"content":"<div><p>To my surprise I discovered that  isn't implemented in Rust yet (see <a href=\"https://github.com/rust-lang/stdarch/issues/310\">https://github.com/rust-lang/stdarch/issues/310</a>). Is there an alternative way to run really wide sin/cosine functions (ideally AVX512 but I'll settle for 256)? I'm writing a program to solve Kepler's equation via Newton–Raphson for many bodies simultaneously.</p></div>   submitted by   <a href=\"https://www.reddit.com/user/West-Implement-5993\"> /u/West-Implement-5993 </a>","contentLength":372,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Experience WebForms Core Technology in Rust; File Deletion Example","url":"https://dev.to/elanatframework/experience-webforms-core-technology-in-rust-file-deletion-example-14an","date":1739833819,"author":"Elanat Framework","guid":2092,"unread":true,"content":"<p>For Rust developers, we have good news: From now on, you can also experience <a href=\"https://elanat.net/page_content/web_forms_core\" rel=\"noopener noreferrer\">WebForms Core</a> technology in Rust. At <a href=\"https://elanat.net\" rel=\"noopener noreferrer\">Elanat</a>, we have updated the <a href=\"https://github.com/elanatframework/Web_forms_classes\" rel=\"noopener noreferrer\">WebForms class</a> of the Rust programming language to the latest version of the <a href=\"https://github.com/elanatframework/Web_forms\" rel=\"noopener noreferrer\">WebFormsJS</a> library, version 1.6.</p><p>WebForms Core is an automated and advanced technology for simple management of HTML tags on the server. In this technology, data is sent to the server completely faithfully to HTML (and is done via WebFormsJS), but the state of the page remains static. The server also sends INI data via the WebForms class to the WebFormsJS library on the client. WebForms Core technology allows you to manipulate tags offline in serverless scenarios. To use this technology, you need to add the WebFormsJS library and the WebForms class associated with your desired programming language to your system.</p><p>You can download the WebForms class for the Rust programming language from the link below.</p><p>To download the latest version of WebFormsJS, visit the following link.</p><h2>\n  \n  \n  Example: Using WebForms Core in Actix Web\n</h2><p>The code below the page is the view and the lower code you see is the server code related to the Rust programming language created under the  framework. This is an example to display a list of image files and the ability to delete them via a web page. In this example, the user views the images on the web page and has the ability to delete them. In this example, when the user clicks on the red button, the image file is deleted from the server and subsequently, on the web page, the tag containing the image, the image name, and the delete button are deleted and a deletion message is shown to the user for 3 seconds.</p><p>This file is an HTML template that displays a list of files and a form to delete them. It uses Tera templating engine for rendering dynamic content.</p><div><pre><code>{{ title }}WebForms Core Technology in Rust\n            {% for file in files %}\n            {{ file }}\n            {% endfor %}\n        </code></pre></div><p>In the code below, the \"main\" method is for setting the initial configuration. The \"index\" method is also created to call the \"index.html\" page and create a list of image files.\nThe \"handle_post\" method has been added to delete the image file and use WebForms Core technology.</p><div><pre><code></code></pre></div><p>The GIF image below shows how the above code works.</p><div><pre><code></code></pre></div><p>Since we want to use the WebForms core technology in the Rust programming language, we need to call this class as follows.</p><p>If you look at the view page, you will notice that the data is sent via the POST method. The \"handle_post\" method is also called to respond to the data sent via the POST method.\nIn the \"handle_post\" method, the data value of the input tag, which is of the submit type, is first read. Here, there are two data values, one is the index and the other is the file name. These values ​​are separated and placed in an array called \"parts\".<p>\nNote: Sending multiple values ​​via HTML is a common practice. The submit tag is initialized as follows after rendering:</p></p><div><pre><code></code></pre></div><p>Following the codes of the \"handle_post\" method, the file is physically deleted. A new instance of the WebForms class is created and using the WebForms class, an h3 tag is added to the beginning of the single form and its color is changed to orange. Then the text \"File removed successfully.\" is placed inside the h3 tag and then the command to remove the h3 tag after 3 seconds is added. Finally, the command to remove the parent tag for the img tag is added via its id value.</p><div><pre><code></code></pre></div><p>At the end of the method, the response is sent via the  method.</p><p><strong>What is sent from the client to the server?</strong></p><p>As we mentioned earlier, in WebForms Core technology, data is sent as if it were an HTML page form submission.</p><p><strong>What does the server respond to the client?</strong></p><p>The server response is also based on the INI pattern.</p><div><pre><code>[web-forms]\nut&lt;form&gt;=h3\nbc&lt;h3&gt;=orange\nst&lt;h3&gt;=File removed successfully.\n:3)de&lt;h3&gt;=1\nde/file_1=1\n</code></pre></div><p>WebForms Core Technology in Rust opens up exciting possibilities for Rust developers by integrating an automated and advanced way to manage HTML tags on the server. Leveraging the latest version of the WebFormsJS library, version 1.6, WebForms Core offers a seamless and efficient way to manipulate tags offline in serverless scenarios.</p><p>The provided example demonstrates a practical implementation using Actix Web to display and delete image files via a web page. The user-friendly interface, combined with the robust capabilities of WebForms Core, showcases the power and flexibility of this technology.</p><p>By incorporating WebForms Core into your Rust projects, you can enhance your web development experience with automated tag management, making it easier to build dynamic and interactive web applications. Download the WebForms class for Rust and the WebFormsJS library to get started and explore the full potential of this innovative technology.</p>","contentLength":4795,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Understanding Data Interfaces: Simplifying Data Exchange with Stof","url":"https://dev.to/amelia_wampler_e7aa93dab9/understanding-data-interfaces-simplifying-data-exchange-with-stof-8hm","date":1739833049,"author":"Amelia Wampler","guid":2091,"unread":true,"content":"<p>In today's complex digital landscape, seamless data exchange between systems is critical. Data interfaces serve as the backbone of this exchange, enabling applications, services, and devices to communicate effectively. In this post, we'll explore what a data interface is, why it’s important, how it ties into the innovative approach of Stof, and why you should join our community.</p><h2>\n  \n  \n  What Is a Data Interface?\n</h2><p>A data interface acts as a conduit for information between different systems, applications, or devices. Think of it as a communication layer that translates data formats and protocols so that each system can understand and use the information correctly. Traditionally, setting up these interfaces required custom APIs, SDKs, and parsers—each designed to handle the intricacies of data parsing, structuring, and transformation. This complexity often leads to increased development time and potential integration challenges.</p><h2>\n  \n  \n  Why Is a Data Interface Important?\n</h2><p>Data interfaces are crucial for several reasons:\nStreamlined Communication: They ensure that disparate systems can exchange information smoothly without getting bogged down by incompatible data formats.</p><ul><li><p> By managing the translation of data formats centrally, data interfaces reduce the need for extensive, application-specific code.</p></li><li><p><strong>Enhanced Maintainability:</strong> A unified approach to data exchange leads to systems that are easier to scale, update, and maintain over time.</p></li><li><p> Centralizing the logic in the data layer helps avoid common pitfalls associated with manual data handling, thus reducing errors.</p></li></ul><p>In essence, a robust data interface simplifies the architectural framework, enabling developers to focus on building innovative solutions rather than wrestling with data compatibility issues.</p><h2>\n  \n  \n  How Does Stof Transform Data Interfaces?\n</h2><p>Stof reimagines the concept of a data interface by consolidating its elements into a single, cohesive format. Here’s how Stof makes a difference:</p><ul><li><p> Stof allows developers to embed additional types, functions, and schemas directly within a single document. This enriched interface means that multiple applications can leverage the same structured data without needing extra layers of custom code.</p></li><li><p> By shifting the heavy lifting into the data layer, Stof reduces the need for external parsers and APIs. This approach not only simplifies implementation but also enhances portability across different systems.</p></li><li><p> With a unified format, Stof minimizes the challenges associated with traditional data interface integration. Developers can achieve more robust and scalable applications with fewer hurdles to overcome.</p></li></ul><p>By addressing the common challenges of traditional data interfaces, Stof paves the way for more efficient, maintainable, and innovative system architectures.</p><p>Are you ready to revolutionize the way your applications handle data exchange? We invite you to join the Stof community and be a part of this exciting journey to enhance the way we work with data. Connect with us on <a href=\"https://github.com/dev-formata-io/stof\" rel=\"noopener noreferrer\">GitHub</a> to explore the code, contribute to discussions, and stay updated on the latest developments. Also, follow us on <a href=\"https://www.linkedin.com/company/formataio\" rel=\"noopener noreferrer\">Linkedin</a> and join our <a href=\"https://discord.gg/Up5kxdeXZt\" rel=\"noopener noreferrer\">Discord</a> to engage with a community that’s passionate about shaping the future of data interfaces.</p><p>Embrace the power of simplified data exchange with <a href=\"https://www.stof.dev/\" rel=\"noopener noreferrer\">Stof</a>, and transform the way your systems communicate. Join us today and help drive innovation for our community!</p>","contentLength":3405,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"My Rust-based project hit 20k stars on GitHub — dropping some cool merch to celebrate","url":"https://www.reddit.com/r/rust/comments/1iruuaf/my_rustbased_project_hit_20k_stars_on_github/","date":1739826333,"author":"/u/GyulyVGC","guid":2113,"unread":true,"content":"<p><a href=\"https://github.com/GyulyVGC/sniffnet\">Sniffnet</a> is an open source network monitoring tool developed in Rust, which got much love and appreciation since the beginning of this journey.</p><p>If it accomplished so much is also thanks to the support of the Reddit community, and today I just wanted to share with you all that we're dropping some brand new apparel — I believe this is a great way to sustain the project development as an alternative to direct donations.</p>","contentLength":421,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why is it important for Syn to produce a concrete tree?","url":"https://www.reddit.com/r/rust/comments/1irug1h/why_is_it_important_for_syn_to_produce_a_concrete/","date":1739825395,"author":"/u/EthanAlexE","guid":4121,"unread":true,"content":"<p>First of all, I dabble in Rust, but I am not very knowledgable in it. I've once written a proc macro from a tutorial, but I don't have a great intuitive understanding of them.</p><p>I was listening to an episode of Self Directed Research (<a href=\"https://www.youtube.com/watch?v=8CrmJV2NT9I\">Compile Time Crimes</a>) and Amos breifly mentions (~7:57) that the reason why proc macros dont just use the rustc parser, or rustc doesn't just use syn is that rustc is better at error recovery and syn produces a tree with everything lexically significant still there (newlines, leading/traailing characters) rather than just what they mean symantically.</p><p>The first one makes sense to me, rustc needs to deal with a lot more possibly incorrect code than syn does. But why does syn need to preserve info that isn't necessarily symantically important?</p><p>I guess this question also extends into parsers for tooling in general. I know Treesitter also produces a concrete parse tree and maybe parsers written specifically for language servers as well?</p><p>Edit: my bad if syn doesn't actually produce a CST, I'm mostly just working off of what Amos said in the video</p>","contentLength":1080,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why I’m Writing a Scheme Implementation in 2025 (The Answer is Async Rust)","url":"https://maplant.com/2025-02-17-Why-I","date":1739824408,"author":"/u/maplant","guid":3976,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1iru1eo/why_im_writing_a_scheme_implementation_in_2025/"},{"title":"Finally, a guide to Atomic::Ordering that won’t make my brain segfault. If you’ve ever stared at Rust’s memory model like it personally wronged you, this one's for you","url":"https://dev.to/aryan_getsrusty/finally-a-guide-to-atomicordering-that-wont-make-my-brain-segfault-if-youve-ever-stared-at-4ojd","date":1739819373,"author":"Aryan Anand","guid":1999,"unread":true,"content":"<h2>The Missing Guide to Rust's Atomic::Ordering</h2>","contentLength":44,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Missing Guide to Rust's Atomic::Ordering","url":"https://dev.to/aryan_getsrusty/the-missing-guide-to-rusts-atomicordering-1g9p","date":1739819283,"author":"Aryan Anand","guid":1998,"unread":true,"content":"<p>When working with concurrent programming in Rust, atomic operations provide a powerful way to manage shared state safely. However, one aspect that often confuses developers—especially those new to low-level concurrency—is . The  variants in Rust's  module control how operations on atomics are perceived across threads, ensuring correctness while balancing performance.</p><p>In this article, we'll break down <strong>what  really means, why it matters, and how to choose the right ordering for your use case</strong>. We'll be implementing a Mutex from scratch and build up to different  (, , , , and ) orderings, examine their trade-offs, and use practical examples with real world analogies to understand the concept </p><p>The word atomic comes from the Greek word , meaning indivisible, something that cannot be cut into smaller pieces. In computer science, it is used to describe an operation that is indivisible: it is either fully completed, or it didn’t happen yet.</p><p> in Rust are used to perform small operations (add, substract, compare, etc) on a shared memory. Unlike a normal  statement which has to go through the <strong>Fetch, Decode, Execute, WriteBack</strong> cycle, atomics on the other hand gets executed in a single  CPU Cycle. Hence preventing a  condition among threads. This makes it perfect for implementing </p><div><pre><code></code></pre></div><p>For simplicity's sake, just ignore the  and let's use  cause we're all  in general. </p><p>CPU and Modern Compilers often re-order the instructions to improve performance and CPU utilisation, However, this is'nt very useful when multiple independent entities  .This could cause  and , stalling the threads for a long time.</p><p>Now our poorly implemented Mutex falls prey to this, the instructions could get shuffled and all our  implementation goes to waste. Since it could reorder into something like:</p><div><pre><code></code></pre></div><p>Which would interefere with another thread who currently has the lock.  something like</p><div><pre><code></code></pre></div><p>This could lead to the mutex locking its own access to the data and being in the state of Deadlock forever, leading to freezing the program.</p><h2>\n  \n  \n  How does  save us from this ?\n</h2><p>It gives special instructions to the compiler, i.e when should it reorder and when it should'nt.</p><h2><code>Ordering::Acquire/Release</code>(together) – Ensures Seeing Previous Writes and Future Reads\n</h2><ul><li>Ensures that <strong>all writes done before another thread released the data are visible</strong>. </li><li>Prevents <strong>previous reads/writes from moving after the acquire operation</strong>. </li></ul><h3>: Imagine  is preparing a , and  is the delivery person.\n</h3><div><pre><code></code></pre></div><p>Now as compiler gets the instructions:- </p><ul><li><strong>T1 (cook) sets  and then flips  to true.</strong></li><li><strong>T2 (delivery) waits until  and only then picks up .</strong></li><li><strong>No chance of reading old data!</strong></li></ul><h3>\n  \n  \n  Example 2 : Think of  as a warehouse preparing a package, and  as a delivery worker picking it up.\n</h3><div><pre><code></code></pre></div><ul><li><strong>T1 (warehouse) packs the order (), then sets  to true.</strong></li><li><strong>T2 (delivery) will NOT pick up  until  is fully written.</strong></li><li><strong>T2 always gets the correct value.</strong></li></ul><p>Key Point:  ensures that all previous writes (like )  are visible before setting .</p><h2> - Ensures previous writes are seen\n</h2><h3>\n  \n  \n  Example : Imagine  is the Chef cooking and  is the Waiter\n</h3><ul><li>The waiter () checks if the dish is  ().</li><li>Once the ticket (flag) is marked \"Ready,\" the waiter  the dish is complete.</li><li>But , they might do unrelated tasks in any order.\n</li></ul><div><pre><code></code></pre></div><ul><li> ensures that once the waiter sees , they will also see the completed dish () and pick it up.</li><li>However,  tasks(like setting up plates) i.e previous instructions might have happened before checking.</li></ul><p>Using  ordering for a store ensures all prior changes are visible after the store. A  will see the stored value and enforce order for subsequent operations. However, in load-store operations, the store part becomes \"Relaxed,\" losing strong ordering guarantees.</p><p><strong>ENSURES WE SEE ALL MEMORY CHANGES MADE BY THE PREVIOUS LOCK OWNERS</strong></p><h2> – Ensures future accesses see the change made\n</h2><h3>\n  \n  \n  Example : Imagine  is the Chef cooking and  is the Waiter\n</h3><p><em>Before the waiter picks the dish...</em></p><ul><li>The chef ()  finish preparing the dish  marking the order as ready ().</li><li>Or else, customers could receive a half-cooked meal.</li></ul><div><pre><code></code></pre></div><ul><li> makes sure <strong>everything before it happens first</strong> (the dish is ready before the flag is flipped).</li></ul><p>An Acquire load ensures all operations before a prior store are visible, preventing outdated or inconsistent data. It acts as a barrier, enforcing memory consistency across threads.</p><p><strong>ENSURES THAT FUTURE READS WILL SEE THIS UPDATED VALUE</strong></p><h3><strong> – Ensures a globally consistent order of operations</strong></h3><h3>\n  \n  \n  Example: Imagine  is the Customer A and  is the Customer B\n</h3><p><em>Before transferring money...</em></p><ul><li>Customer A () must  from their account  depositing it into Customer B's account.</li><li>Customer B () will  once Customer A's withdrawal is complete.</li><li>Both actions must happen in a globally consistent order, ensuring that no thread (i.e., no customer) will observe the operations out of order, even if both threads are executed on different processors.</li></ul><div><pre><code></code></pre></div><ul><li> ensures that all threads observe the operations in a globally consistent order. This means  is seen . No other thread will see the operations in a different order, thus preventing race conditions and ensuring the bank's accounting is correct.</li></ul><h2> – Atomic Counters (No Synchronization Guaranteed)\n</h2><ul><li>Make modification to the shared variable without reading it.</li></ul><div><pre><code></code></pre></div><ul><li>We  care when a thread sees the updated count.</li><li>As long as the , we’re good.</li></ul><ul><li>Each update would enforce , slowing down performance.\n## Using everything we know now to fix our Mutex implementation</li></ul><p><strong>When unlocking and locking a mutex</strong>: When a mutex is unlocked, a happens-before relationship is created between the unlock operation and the next lock operation on the same mutex. This ensures that:</p><p><strong>The next thread that locks the mutex will see all of the changes that were made by the thread that unlocked the mutex.</strong></p><div><pre><code></code></pre></div><div><table><thead><tr></tr></thead><tbody><tr><td>Ensures this read sees  before a  store. store is done, then it may/may not see based on where the CPU has re-ordered the instruction</td></tr><tr><td>Ensures <strong>all previous  writes</strong> are visible before unlocking. for the same reason that it may be reordered ahead of the write.</td></tr></tbody></table></div>","contentLength":5936,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Transparent Benchmarking with Apache Iggy","url":"https://blog.iggy.rs/posts/transparent-benchmarks/","date":1739812203,"author":"/u/spetz0","guid":2155,"unread":true,"content":"<h2>Benchmarks should be the first-class citizen</h2><p>In the world of software development, <strong>benchmarks are often treated as a second-class citizen</strong>. They're more of an addition to the codebase, rather than a crucial part of it, which should be the other way around, especially when it comes to the performance-critical systems or infrastructure tools.</p><p>Sometimes, the benchmarking results are nothing more than just a <strong>cherry-picking of the best-case scenarios</strong>, which are not representative of real-world usage. In such a case, they simply serve a sole purpose of either making the project look better than it is or how well it does outperform the competition, under the extremely optimized conditions when comparing with its counterparts.</p><p><strong>Trying to reproduce the benchmarks is often a nightmare</strong>, as the environment setup is not documented, the code is unavailable, or the instructions are not clear enough. This makes it close to impossible to verify the results, which are then taken for granted.</p><p>Or even worse, the <strong>benchmarking tool might be so complex, that it's hard to understand how it works</strong>, and what are the assumptions behind it. ALl of these, does result in hard to extend or modify the existing benchmarks, which are not covering the particular use case you're interested in. It's just here to tell everyone that we do have benchmarks, but how we do it, and what they measure, is a mystery.</p><p><strong>Which is why at <a href=\"https://github.com/iggy-rs/iggy/\">Iggy</a>, we've decided to make the benchmarks a first-class citizen</strong>.</p><p>Our  tool, which is used to run the benchmarks and is part of the core open source repository (can be found under the  directory), has come a long way and has been serving us well.</p><p>We use it to do quick performance checks, regression testing, and to see how the changes we introduce affect the performance. <strong>We run it on our localhost, as well as on the Virtual Machines in the cloud, to see how it behaves under a variety of environments.</strong></p><h2>Iggy benchmarking dashboard</h2><p> - a benchmarking dashboard, which is available to everyone. It's a website where you can see how Iggy performs under the different conditions, and how it scales with the number of clients, messages, and topics.</p><p>This is our community-driven effort, where everyone can contribute, and add their own benchmarks. For all the information on how to run the benchmarks, render them on the dashboard, upload your results or contribute to the project, please check the <a href=\"https://github.com/iggy-rs/iggy-bench-dashboard\">iggy-bench-dashboard</a> repository. In general, it's as simple as:</p><ul><li>Building the <a href=\"https://github.com/iggy-rs/iggy\">Iggy</a> in the release mode with </li><li>Starting your Iggy server with <code>cargo r --bin iggy-server -r</code> (feel free to adjust the configuration in  or via environment variables)</li><li>Running the  tool with the desired parameters, e.g. <code>cargo r --bin iggy-bench -r pinned-producer tcp</code></li><li>Extending your benchmark with the output (HTML charts, JSON sampling etc.) <code>cargo r --bin iggy-bench -r pinned-producer tcp output -o performance_results --identifier spetz</code></li><li>Navigating to the specific benchmark directory to browse the charts and/or uploading them to the dashboard.</li><li>And there's always  command e.g.  to make your life easier :)</li></ul><p><strong>And this is just the beginning</strong>, as we plan to extend the dashboard, and add more benchmarks, which are covering the different use cases.</p><p>Our main goal is to make the benchmarking process (and its results) <strong>transparent, reproducible, and easy to understand</strong>. We want to make them a first-class citizen, and a crucial part of the Iggy project. We want to make them a tool, which will help us to improve the performance, and to make Iggy the best streaming server out there. We're looking forward to your feedback, and we hope you'll enjoy the benchmarks.</p><h2>Towards the microsecond latency</h2><p><strong>And as a cherry on top, we've recently managed to achieve the sub-millisecond write latency</strong>. This is a huge milestone for us, as it's a proof that Iggy can be used in low-latency applications, where speed is crucial. Lately, we've been experimenting a lot with <a href=\"https://github.com/rkyv/rkyv\">rkyv</a> - zero-copy deserialization framework, which has yielded some great results. Keep in mind that streaming the data within the range of microseconds latency depends on the several factors, such as message size, network conditions, or the hardware you're running on.</p><p>And the best part is that we're just getting started. We're looking forward to pushing the limits even further, and to see how far we can go. There's still tons of optimizations coming, including switching the runtime to the <a href=\"https://github.com/bytedance/monoio\">monoio</a> which does support , and we've experienced superb results with this one on our experimental branch. Then, there's the whole concept of shared-nothing &amp; thread-per-core design, and many more. Stay tuned!</p>","contentLength":4610,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1irouxk/transparent_benchmarking_with_apache_iggy/"},{"title":"kartoffels, a game where you implement firmware for a potato, v0.7 released! 🥔","url":"https://www.reddit.com/r/rust/comments/1irodha/kartoffels_a_game_where_you_implement_firmware/","date":1739811046,"author":"/u/Patryk27","guid":1945,"unread":true,"content":"<p><a href=\"https://kartoffels.pwy.io/\">kartoffels</a> is a game where you're given a potato and your job is to implement a <a href=\"https://github.com/Patryk27/kartoffel/\">firmware</a> for it:</p><p>Today I've released v0.7 which brings cellular automata-based worldgen (caves, caves, caves!), statistics and a migration to 32-bit RISC-V:</p>","contentLength":235,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Latency based container scaling with Orbit","url":"https://dev.to/airpipe/latency-based-container-scaling-with-orbit-1c3i","date":1739804513,"author":"Kav Pather","guid":4005,"unread":true,"content":"<p>In our previous article, we introduced Orbit, our lightweight container orchestrator built in Rust. Since then, we've made significant improvements driven by both community feedback and production requirements. Let's dive into the technical evolution that's making Orbit even more powerful and efficient.</p><h2>\n  \n  \n  Community-Driven Development\n</h2><p>One of the most exciting aspects of Orbit's development has been the community engagement. A perfect example is our implementation of <a href=\"https://en.wikipedia.org/wiki/CoDel\" rel=\"noopener noreferrer\">CoDel (Controlled Delay)</a> for scaling decisions, which came directly from a community member's suggestion on Medium. We're also grateful to community members like <a href=\"https://github.com/josselinchevalay\" rel=\"noopener noreferrer\">Josselin Chevalay</a> who contributed the  feature in our latest release, allowing control over container image pulling behavior. This collaborative approach will continue to help shape Orbit's feature set and technical direction.</p><h2>\n  \n  \n  Technical Evolution: Key Improvements\n</h2><h3>\n  \n  \n  1. CoDel (Controlled Delay) - Inspired Scaling: Latency-Driven Container Orchestration\n</h3><p>Unlike traditional orchestrators that rely solely on CPU and memory metrics, we've implemented <a href=\"https://en.wikipedia.org/wiki/CoDel\" rel=\"noopener noreferrer\">CoDel-based/inspired scaling</a> - a feature not natively available in Kubernetes or other major orchestrators. Here's how it works:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>The CoDel inspired implementation monitors request latency and makes intelligent scaling decisions based on both immediate and historical performance data. Benefits include:</p><ul><li><p>More responsive scaling based on actual service performance</p></li><li><p>Better handling of latency spikes</p></li><li><p>Prevention of unnecessary scale-ups during temporary load increases</p></li></ul><p> that this is just our initial implementation, and we will continue to improve where possible and perhaps rename when appropriate.</p><p>Key Differences from Traditional CoDel:</p><ul><li><p><strong>Service-Level Application</strong> :</p><ul><li>Our implementation applies CoDel principles at the service level rather than packet level</li><li>Uses request latency instead of packet sojourn time</li><li>Focuses on scaling rather than packet dropping</li></ul></li><li><ul><li>This is simpler than traditional CoDel's state machine.\n</li></ul></li></ul><div><pre><code></code></pre></div><p>We've added the usual health monitoring with TCP health checks:</p><div><pre><code></code></pre></div><ul><li><p>Configurable health check parameters</p></li><li><p>TCP-level connectivity verification</p></li><li><p>Granular control over failure thresholds</p></li><li><p>Separate startup and liveness checks</p></li></ul><h3>\n  \n  \n  3. Performance Optimizations\n</h3><p>We've made several low-level optimizations to improve performance:</p><h4>\n  \n  \n  Switching to FxHashMap/FxHashSet\n</h4><div><pre><code></code></pre></div><p>By replacing standard HashMap with FxHashMap:</p><ul><li><p>Better performance for string keys</p></li><li><p>Lower collision rates in our specific use cases</p></li></ul><h3>\n  \n  \n  4. Improved Resource Management\n</h3><p>We've implemented a more sophisticated resource management system:</p><div><pre><code></code></pre></div><ul><li><p>Fine-grained control over resource utilization</p></li><li><p>Better handling of CPU quota management</p></li><li><p>More accurate memory tracking</p></li><li><p>Customizable metrics aggregation strategies</p></li></ul><p>These improvements have had significant real-world impact:</p><ul><li><p>30% reduction in unnecessary scaling operations</p></li><li><p>More stable performance under varying load conditions</p></li><li><p>Reduced resource usage in the orchestrator itself</p></li><li><p>Better handling of microservices with varying performance characteristics</p></li><li><p>Still managed to retain a &lt;5MB binary size footprint</p></li></ul><h2>\n  \n  \n  What's Next: Decentralized Clustering!?\n</h2><p>We're excited to explore our next major development focus: a decentralized clustering solution. This will allow Orbit to:</p><ul><li><p>Operate without a central control plane</p></li><li><p>Provide better resilience in edge deployments</p></li><li><p>Enable peer-to-peer node coordination</p></li><li><p>Support dynamic cluster topology changes</p></li></ul><p>We have some initial ideas on how to design the solution, so please follow for our next update to see how we hope to make this happen!</p><h2>\n  \n  \n  Building at Scale with Air Pipe\n</h2><p>While Orbit handles container orchestration, it's just one piece of the puzzle. At <a href=\"https://airpipe.io\" rel=\"noopener noreferrer\">Air Pipe</a>, we're building a comprehensive platform for creating scalable, resilient APIs, integrations, and workflows. Our platform enables you to:</p><ul><li><p>Build and deploy scalable APIs with minimal boilerplate</p></li><li><p>Create robust integration workflows</p></li><li><p>Implement resilient data processing pipelines</p></li><li><p>Leverage edge computing capabilities</p></li></ul><p>If you're building distributed systems or scalable applications, visit <a href=\"https://airpipe.io\" rel=\"noopener noreferrer\">airpipe.io</a> to learn how our platform can accelerate your development.</p><p>We're building Orbit in the open and value community input. Whether you're interested in the technical details or want to contribute to our upcoming clustering features:</p><p>Stay tuned for our next technical deep-dive where we'll explore the architecture of our decentralized clustering approach!</p>","contentLength":4415,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ExpressVPN Rewrites Lightway VPN Protocol in Rust for Security","url":"https://www.reddit.com/r/rust/comments/1irlr8s/expressvpn_rewrites_lightway_vpn_protocol_in_rust/","date":1739804450,"author":"/u/flacao9","guid":1946,"unread":true,"content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/flacao9\"> /u/flacao9 </a> <br/> <span><a href=\"https://cyberinsider.com/expressvpn-rewrites-lightway-vpn-protocol-in-rust-for-security/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1irlr8s/expressvpn_rewrites_lightway_vpn_protocol_in_rust/\">[comments]</a></span>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"notl.ink - open source blazingly fast url shortener ever. Live on ProductHunt.","url":"https://dev.to/abdibrokhim/notlink-open-source-blazingly-fast-url-shortener-ever-live-on-producthunt-41mk","date":1739798316,"author":"Ibrohim Abdivokhidov","guid":1836,"unread":true,"content":"<p>Launching on ProductHunt February 18th, 2025 12:01 AM PST.&nbsp;</p>","contentLength":60,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build a software career with meaning: a playbook","url":"https://dev.to/jonesbeach/build-a-software-career-with-meaning-a-playbook-d3b","date":1739795400,"author":"Jones Beach","guid":1811,"unread":true,"content":"<p>Even with 20 fingers and toes, I barely have enough digits to count how many times during my 9-5 career I thought, “Wow, I feel frustrated/stuck/alone/hungry, maybe I should look for a new job.” A new job holds the allure of allowing you to let go of all your negative emotions (especially hunger) and start over.</p><p>There are plenty of reasons to switch jobs, particularly when advocating for fairer compensation or a less-toxic environment. But if you're like me and looking to build a meaningful software career, where you can use your brain to its fullest and maybe do a bit of good, job hopping is more like a salve on a wound than a complete fix.</p><p>With this in mind, I’m excited to announce my new email course: <a href=\"https://fromscratchcode.com/courses/meaningful-career/\" rel=\"noopener noreferrer\">Build a Software Career with Meaning</a>. While under development, I called this “How I went from ‘Hello World!’ to ‘How can I help?’ in just 19 years,” which is clearly a cheeky title but captures the work-in-progress feel of my career.</p><p>Did I mention it’s free? Over the course of 5 (business) days, you’ll receive a brief email with a piece of wisdom, along with an actionable thought experiment you can test on your career.</p><p>I also want to be transparent: in email marketing speak, this is called a “lead magnet.” I learned this term from reading (does YouTube still exist?), so I can only assume this is referring to the element from the periodic table with the symbol  (you know, the one pronounced ‘led’). And here I thought lead wasn't magnetic!</p><p>I'm offering the course for free because I want to share how I think about things. At the end of 5 (business) days, perhaps you’ll feel like you know a bit more about my values and want to work with me. If you don’t, that’s more than okay! You are welcome to stay on the list indefinitely, and the option to unsubscribe will always be at the bottom. There are no tricks here, just a marketing playbook I’ve been learning in between <a href=\"https://fromscratchcode.com/blog/building-a-markdown-blog-with-links-optimized-for-gatsby/\" rel=\"noopener noreferrer\">implementing my Markdown blog</a> and <a href=\"https://fromscratchcode.com/blog/how-i-added-support-for-nested-functions-in-python-bytecode/\" rel=\"noopener noreferrer\">nested functions in Python bytecode</a>.</p><p>If you’ve ever felt stuck or disillusioned in your software career, I hope this course gives you a new perspective. If nothing else, it’ll be five (business) days of me popping into your email client with career advice just a tad more nuanced than “Quit your job!”</p><p>P.S. If you’re interested in reading the story about how my 9-5 career crashed-and-burned—and how I built something better from the wreckage—I have the complete account over on <a href=\"https://fromscratchdotorg.substack.com/p/why-i-left-my-9-5-for-good\" rel=\"noopener noreferrer\">From Scratch dot org</a>. I’d love to hear if any of my experiences and catatonic thought loops (the kind where you forget to eat) mirror your own!</p><p>I mentor software engineers to navigate technical challenges and career growth in a supportive, sometimes silly environment. If you’re interested, you can <a href=\"https://fromscratchcode.com/mentorship/\" rel=\"noopener noreferrer\">explore my mentorship programs</a>.</p><p>In addition to mentoring, I also write about neurodivergence and self-employment. Less code and the same number of jokes.</p>","contentLength":2906,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust Basics: Syntax, Data Types, and Naming Conventions","url":"https://dev.to/sajiram_a4704bc095/rust-basics-syntax-data-types-and-naming-conventions-4kpm","date":1739790461,"author":"Sajiron","guid":1778,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Announcing the Scientific Computing in Rust virtual workshop 2025","url":"https://www.reddit.com/r/rust/comments/1irglbs/announcing_the_scientific_computing_in_rust/","date":1739786754,"author":"/u/mscroggs","guid":1808,"unread":true,"content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/mscroggs\"> /u/mscroggs </a> <br/> <span><a href=\"https://scientificcomputing.rs/2025/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1irglbs/announcing_the_scientific_computing_in_rust/\">[comments]</a></span>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust Atomic Operations Guide: High-Performance Lock-Free Programming Techniques [Tutorial]","url":"https://dev.to/aaravjoshi/rust-atomic-operations-guide-high-performance-lock-free-programming-techniques-tutorial-2nf2","date":1739783680,"author":"Aarav Joshi","guid":1714,"unread":true,"content":"<blockquote><p>As a best-selling author, I invite you to explore my books on <a href=\"https://www.amazon.com/stores/Aarav-Joshi/author/B0DQYNVXZ7?ref=ap_rdr&amp;isDramIntegrated=true&amp;shoppingPortalEnabled=true&amp;ccs_id=738636bd-0ca1-4d7b-8efa-481bfc222571\" rel=\"noopener noreferrer\">Amazon</a>. Don't forget to follow me on <a href=\"https://medium.com/@aarav-joshi\" rel=\"noopener noreferrer\">Medium</a> and show your support. Thank you! Your support means the world! </p></blockquote><p>Atomic operations and lock-free programming in Rust represent a sophisticated approach to concurrent programming. These concepts form essential building blocks for developing high-performance concurrent systems that minimize synchronization overhead.</p><p>The foundation of atomic operations in Rust centers on the std::sync::atomic module. This module provides atomic versions of primitive types that guarantee thread-safe operations without traditional locks. Let's explore the core atomic types:</p><div><pre><code></code></pre></div><p>Memory ordering plays a crucial role in atomic operations. Rust provides several ordering levels that determine the synchronization guarantees between threads:</p><div><pre><code></code></pre></div><p>I've implemented numerous lock-free data structures using atomics. A simple atomic counter demonstrates the basic principles:</p><div><pre><code></code></pre></div><p>Compare-and-swap (CAS) operations form the foundation of many lock-free algorithms. Here's an implementation of a lock-free stack:</p><div><pre><code></code></pre></div><p>Memory fences provide explicit synchronization points when needed. They ensure visibility of changes across threads:</p><div><pre><code></code></pre></div><p>Atomic operations excel in scenarios requiring high performance and minimal contention. I've successfully used them in system-level programming, game engines, and high-frequency trading systems.</p><p>A practical example of atomics in action is a multi-producer, single-consumer channel:</p><div><pre><code></code></pre></div><p>Performance considerations play a vital role when working with atomics. While they avoid the overhead of traditional locks, incorrect usage can lead to contention and reduced performance. I recommend careful benchmarking and profiling to ensure optimal results.</p><p>The ABA problem represents a common challenge in lock-free programming. It occurs when a value changes from A to B and back to A, potentially causing incorrect behavior. Here's a solution using generation counters:</p><div><pre><code></code></pre></div><p>Testing atomic code requires specific strategies. I've developed techniques to verify correctness under concurrent access:</p><div><pre><code></code></pre></div><p>The future of atomic operations in Rust continues to evolve. The language team actively works on improving the atomic API and adding new features. These improvements will further enhance Rust's position as a leading language for systems programming and concurrent applications.</p><p>Remember that atomic operations provide powerful tools for concurrent programming, but they require careful consideration of memory ordering and synchronization requirements. Start with simpler synchronization mechanisms unless performance requirements specifically demand atomic operations.</p><p> is an AI-driven publishing company co-founded by author . By leveraging advanced AI technology, we keep our publishing costs incredibly low—some books are priced as low as —making quality knowledge accessible to everyone.</p><p>Stay tuned for updates and exciting news. When shopping for books, search for  to find more of our titles. Use the provided link to enjoy !</p><p>Be sure to check out our creations:</p>","contentLength":3037,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"rust-analyzer changelog #273","url":"https://www.reddit.com/r/rust/comments/1irdwlh/rustanalyzer_changelog_273/","date":1739775149,"author":"/u/WellMakeItSomehow","guid":1750,"unread":true,"content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/WellMakeItSomehow\"> /u/WellMakeItSomehow </a> <br/> <span><a href=\"https://rust-analyzer.github.io/thisweek/2025/02/17/changelog-273.html\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1irdwlh/rustanalyzer_changelog_273/\">[comments]</a></span>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Is GPL and BSD typically looked down upon in the Rust community?","url":"https://www.reddit.com/r/rust/comments/1iraze0/is_gpl_and_bsd_typically_looked_down_upon_in_the/","date":1739764518,"author":"/u/I_will_delete_myself","guid":1749,"unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p>Thinking of open sourcing a proprietary tool built in Rust. But I am kinda paranoid about AWS going along and then sell it as a service while my rear end gets broke. Is it looked down upon with to use a GPL license or BSD in the Rust community? Most of the repos appear to be MIT or apache 2.0.</p> <p>Edit:</p> <p>You may need a lawyer for this, but you may want to trademark if you are concerned about commercial abuse but still keep the code free and open to use. Tauri does this to keep their stuff open but prevent abuse without permission. </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/I_will_delete_myself\"> /u/I_will_delete_myself </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1iraze0/is_gpl_and_bsd_typically_looked_down_upon_in_the/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1iraze0/is_gpl_and_bsd_typically_looked_down_upon_in_the/\">[comments]</a></span>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How arch-delta works and saves bandwidth for Arch Linux upgrades","url":"https://www.reddit.com/r/rust/comments/1ir7hhp/how_archdelta_works_and_saves_bandwidth_for_arch/","date":1739753393,"author":"/u/djugei","guid":1656,"unread":true,"content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/djugei\"> /u/djugei </a> <br/> <span><a href=\"https://djugei.github.io/how-arch-delta-works/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1ir7hhp/how_archdelta_works_and_saves_bandwidth_for_arch/\">[comments]</a></span>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The open source fastest URL shortener ever.","url":"https://dev.to/abdibrokhim/the-open-source-fastest-url-shortener-ever-5af3","date":1739746041,"author":"Ibrohim Abdivokhidov","guid":798,"unread":true,"content":"<p>The open source fastest URL shortener ever.</p><p>Built with awesome open source tools x.com/rustlang x.com/shuttle_dev x.com/neondatabase x.com/actix_rs</p><p>x.com/ThePracticalDev x.com/aimlapi x.com/vercel</p>","contentLength":194,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Should People Just Use Goreleaser Instead of `actions-rust-release`?","url":"https://www.reddit.com/r/rust/comments/1ir4l9f/should_people_just_use_goreleaser_instead_of/","date":1739745155,"author":"/u/autarch","guid":845,"unread":true,"content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/autarch\"> /u/autarch </a> <br/> <span><a href=\"https://blog.urth.org/2025/02/16/should-people-just-use-goreleaser-instead-of-actions-rust-release/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1ir4l9f/should_people_just_use_goreleaser_instead_of/\">[comments]</a></span>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"RustyNum Follow-Up: Fresh Insights and Ongoing Development","url":"https://dev.to/igorsusmelj/rustynum-follow-up-fresh-insights-and-ongoing-development-18f9","date":1739738297,"author":"IgorSusmelj","guid":766,"unread":true,"content":"<p>As a follow-up to my previous introduction to <a href=\"https://github.com/IgorSusmelj/rustynum\" rel=\"noopener noreferrer\">RustyNum</a>, I want to share a developer-focused update about what I’ve been working on these last few weeks. RustyNum, as you might recall, is my lightweight, Rust-powered alternative to NumPy published on GitHub under MIT license. It uses Rust’s portable SIMD features for faster numerical computations, while staying small (around ~300kB for the Python wheel). In this post, I’ll explore a few insights gained during development, point out where it really helps, and highlight recent additions to the documentation and tutorials.</p><p>If you missed the initial announcement, RustyNum focuses on:</p><ul><li>High performance using Rust’s SIMD</li><li>Memory safety in Rust, without GC overhead</li><li>Small distribution size (much smaller than NumPy wheels)</li><li>NumPy-like interface to reduce friction for Python users</li></ul><h2>\n  \n  \n  Developer’s Perspective: What’s New?\n</h2><p><strong>1. Working with Matrix Operations</strong></p><p>I’ve spent a good chunk of time ensuring matrix operations feel familiar. Being able to do something like matrix-vector or matrix-matrix multiplication with minimal code changes from NumPy was a primary goal. A highlight is the  function and the  operator, which both support these operations.</p><div><pre><code></code></pre></div><p>It’s neat to see how close this is to NumPy’s workflow. Benchmarks suggest RustyNum can often handle these tasks at speeds comparable to, and sometimes faster than, NumPy on smaller or medium-sized datasets. For very large matrices, I’m still optimizing the approach.</p><p><strong>2. Speeding Up Common Analytics Tasks</strong></p><div><pre><code></code></pre></div><p>The Python overhead can sometimes offset the raw Rust speed, but in many cases, RustyNum still shows advantages.</p><h2>\n  \n  \n  New Tutorials: Real-World Examples\n</h2><p>One of the best ways to see RustyNum in action is through practical examples. I’ve added several new tutorials with real-world coding scenarios:</p><ol><li> – Focus on dot products, matrix-vector, and matrix-matrix tasks.</li><li><strong>Replacing Core NumPy Calls</strong> – Demonstrates how to switch from NumPy’s mean, min, dot to RustyNum.</li><li><strong>Streamlining ML Preprocessing</strong> – Explores scaling, normalization, and feature engineering for machine learning.</li></ol><p>Check out a snippet of scaling code from that guide:</p><div><pre><code></code></pre></div><p>It’s a small snippet, but it shows how RustyNum can do row/column manipulations quite effectively. After scaling, you can still feed the data into your favorite machine learning frameworks. The overhead of converting RustyNum arrays back into NumPy or direct arrays is minimal compared to the cost of big model training steps.</p><p><strong>1. Large Matrix Optimizations</strong></p><p>I’ve noticed that for very large matrices (like 10k×10k), RustyNum’s current code paths aren’t yet fully optimized compared to NumPy. This area remains an active project. RustyNum is still young, and I’m hoping to introduce further parallelization or block-based multiplication techniques for better large-scale performance.</p><p>RustyNum supports float32 and float64 well, plus some integer types. I’m considering adding stronger integer support for data science tasks like certain indexing or small transformations. Meanwhile, advanced data types (e.g., complex numbers) might appear further down the line if the community needs them.</p><p><strong>3. Documentation and API Enhancements</strong></p><p>The docs site at <a href=\"https://rustynum.com/\" rel=\"noopener noreferrer\">rustynum.com</a> has an API reference and a roadmap. I’m continuously adding to it. If you spot anything missing or if you have a specific use case in mind, feel free to open a GitHub issue or submit a pull request.</p><p><strong>4. The big goal of Rustynum</strong></p><p>RustyNum is simply a learning exercise for me to combine Rust and Python. Since I spend every day around machine learning I would love to have RustyNum replace part of my daily Numpy routines. And we're slowly getting there. I started adding more and more methods around the topic of how to integrate RustyNum in ML pipelines.</p><h2>\n  \n  \n  Quick Code Example: ML Integration\n</h2><p>To demonstrate how RustyNum fits into a data pipeline, here’s a condensed example:</p><div><pre><code></code></pre></div><p>This script highlights that RustyNum can handle data transformations with a Pythonic feel, after which you can pass the arrays into other libraries.</p><p>It’s been fun to expand RustyNum’s features and see how well Rust can integrate with Python for high-performance tasks. The recent tutorials are a window into how RustyNum might replace parts of NumPy in data science or ML tasks, especially when smaller array sizes or mid-range tasks are involved.</p><ul><li>Check out the tutorials at rustynum.com</li><li>Contribute or report issues on GitHub</li><li>Share feedback if there’s a feature you’d love to see</li></ul><p>Thanks for tuning in to this developer-focused update, and I look forward to hearing how RustyNum helps you in your own projects!</p>","contentLength":4610,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pulumi Gestalt devlog #8","url":"https://dev.to/andrzejressel/pulumi-gestalt-devlog-8-1d1m","date":1739734216,"author":"​Andrzej Ressel","guid":753,"unread":true,"content":"<p>Welcome to the eighth devlog for . This week, the focus was on preparing native Rust support and moving toward an initial release.</p><p>Previously, Rust support in Pulumi Gestalt was essentially Wasm/Rust support, which required a complex setup and runtime environment. This week, I implemented proper native Rust support, which simplifies the process significantly. Now you can get started without external runners - only  and <a href=\"https://github.com/casey/just\" rel=\"noopener noreferrer\"></a> required.</p><p>After several weeks of development and refinement, I believe Pulumi Gestalt has reached a state where it’s ready for an initial release. Over the next few days, I’ll be focusing on finalizing documentation and ensuring consistent naming conventions across the SDKs to provide a smoother experience for users.</p><p>That’s all for this week’s updates! As always, I welcome your feedback. If you have any thoughts, suggestions, or run into issues, feel free to share them on either the <a href=\"https://github.com/andrzejressel/pulumi-gestalt\" rel=\"noopener noreferrer\">main repository</a> or the <a href=\"https://github.com/andrzejressel/pulumi-gestalt-example\" rel=\"noopener noreferrer\">example repository</a>.</p>","contentLength":959,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I wrote a desktop overlay for reading manga with egui","url":"https://www.reddit.com/r/rust/comments/1iqxfd0/i_wrote_a_desktop_overlay_for_reading_manga_with/","date":1739727052,"author":"/u/Takader","guid":744,"unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p>Today i am open sourcing my manga overlay i have been working on. It enables continues detection of japanese text in a selected region on the desktop. My goal was making it easy to find the meaning of kanji in order to learn japanese. </p> <p>You can find the source code on <a href=\"https://github.com/Icekey/manga-overlay\">github Manga Overlay</a>. Currently only Windows is supported.</p> <p>This is the first time i am open sourcing a project so feedback is welcome.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Takader\"> /u/Takader </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1iqxfd0/i_wrote_a_desktop_overlay_for_reading_manga_with/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1iqxfd0/i_wrote_a_desktop_overlay_for_reading_manga_with/\">[comments]</a></span>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Announcing: pixelvim, vim inspired pixel editor","url":"https://www.reddit.com/r/rust/comments/1iqviie/announcing_pixelvim_vim_inspired_pixel_editor/","date":1739722214,"author":"/u/avatar_10101","guid":781,"unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><blockquote> <p><code>pixelvim</code> is a pixel editor inspired by the <code>vim</code> text editor, with an emphasis on keyboard interaction. It also aims to be feature-rich, customizable, and extendable via user scripts.</p> </blockquote> <p>This is my personal project of making a vim-like pixel art editor (not very creative with the name, I know), written in Rust using <a href=\"https://github.com/not-fl3/miniquad\">miniquad</a>.</p> <p>Repo: <a href=\"https://github.com/bolphen/pixelvim\">https://github.com/bolphen/pixelvim</a></p> <p>Try it in the browser: <a href=\"https://bolphen.github.io/pixelvim/\">https://bolphen.github.io/pixelvim/</a> (you can drag-and-drop png, gif, and aseprite files, and save to png and gif; use <code>:set scale/ui=2</code> to increase the UI if you find them too small)</p> <p>Notable features</p> <ul> <li>vi-style remappable keyboard interaction and a command system, including modifiers (<code>5j</code> for moving 5 pixels down) and chain-able commands (<code>:select/all THEN cut THEN :layer/new/above THEN paste</code>)</li> <li>elaborated &quot;visual&quot; mode for pixel selection (that is undo/redoable)</li> <li>animation &quot;live draw&quot; (see the screencast below: very useful for quickly creating particle effects)</li> <li>rudimentary support for lua user scripts (not available in the browser version)</li> <li>data recovery from swap file in case of crashes</li> </ul> <p>The code is not pretty (a lot of places held up with glue) and there are quite a lot I want to improve as well as new features to add, but I feel that the end product could already be useful for some so I&#39;m releasing it. Overall I wish to translate more vim features that could be useful into pixelvim (for example, insert mode for drawing purely with the keyboard; registers and macros; better documentation), also better UI.</p> <p>There used to be a similar project <a href=\"https://github.com/cloudhead/rx\">rx</a>. This is not a fork, though I did borrow a few things here and there. I&#39;d say right now pixelvim is much more feature complete than rx.</p> <p>Cheers!</p> <p><a href=\"https://i.redd.it/4qigb6m84ije1.gif\">https://i.redd.it/4qigb6m84ije1.gif</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/avatar_10101\"> /u/avatar_10101 </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1iqviie/announcing_pixelvim_vim_inspired_pixel_editor/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1iqviie/announcing_pixelvim_vim_inspired_pixel_editor/\">[comments]</a></span>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Making a Streaming JOIN 50% faster","url":"https://www.reddit.com/r/rust/comments/1iqum3o/making_a_streaming_join_50_faster/","date":1739719765,"author":"/u/bobbymk10","guid":721,"unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p><a href=\"https://www.epsio.io/blog/optimizing-streaming-joins-leveraging-asymmetry-for-better-performance\">https://www.epsio.io/blog/optimizing-streaming-joins-leveraging-asymmetry-for-better-performance</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/bobbymk10\"> /u/bobbymk10 </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1iqum3o/making_a_streaming_join_50_faster/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1iqum3o/making_a_streaming_join_50_faster/\">[comments]</a></span>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🎸🔥 Introducing ChordFlow – A Rust-Powered TUI for Guitar Practice!","url":"https://www.reddit.com/r/rust/comments/1iqsx67/introducing_chordflow_a_rustpowered_tui_for/","date":1739714844,"author":"/u/timvancann","guid":697,"unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p>Hey fellow Rustaceans and guitarists! 👋</p> <p>I’ve been working on <strong>ChordFlow</strong>, a terminal-based tool built in Rust to help with <strong>chord practice and improvisation</strong>. The idea came from my own struggles with guitar neck mastery and melodic improvisation. I wanted something lightweight, fast, and distraction free to help me follow chord while keeping time with a metronome.<br/> It also gave me a good opportunity to dive into ratatui and learn more about Rust!</p> <p><strong>Features:</strong></p> <p>🎵 Generates random <strong>chord progressions</strong> for improvisation<br/> 🎛️ Built-in <strong>metronome</strong> to stay in time<br/> 🖥️ <strong>TUI interface</strong> for an easy and minimal setup<br/> 🛠️ <strong>Customizable</strong>—bring your own chord sets or use the defaults<br/> 🚀 Written in <strong>Rust</strong> for speed and efficiency</p> <p>It’s open-source, and I’d love feedback, contributions, or just thoughts from fellow Rustaceans and musicians! If you’re into <strong>music theory, Rust, or just want a minimal practice tool</strong>, give it a try!</p> <p>👉 Check it out: <a href=\"https://github.com/timvancann/chordflow\">https://github.com/timvancann/chordflow</a><br/> 👉 Video demo: <a href=\"https://youtu.be/Oc7po6uNBfQ\">https://youtu.be/Oc7po6uNBfQ</a></p> <p>Would love to hear what you think! What features would you like to see? 🤘</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/timvancann\"> /u/timvancann </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1iqsx67/introducing_chordflow_a_rustpowered_tui_for/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1iqsx67/introducing_chordflow_a_rustpowered_tui_for/\">[comments]</a></span>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["rust"]}