{"id":"KRywisgR8sLBktB","title":"JS/Frontend","displayTitle":"JS/Frontend","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":6,"items":[{"title":"The Angular Custom Profiling Track is now available","url":"https://blog.angular.dev/the-angular-custom-profiling-track-is-now-available-0f9d8d36218a?source=rss----447683c3d9a3---4","date":1751485086,"author":"Angular","guid":181151,"unread":true,"content":"<p>Profiling web applications can be a complex task, often requiring developers to juggle between different tools that present data in disconnected ways. Traditionally, Chrome‚Äôs performance panel is excellent for detailed function call analysis, while Angular DevTools offers a higher-level view based on framework concepts like components, lifecycle hooks, bindings etc. Unfortunately, having two separate tools leads to a fragmented understanding of performance.</p><p>This fragmentation presented a significant opportunity to improve the developer experience when profiling Angular applications. As a result, the Angular and Chrome teams have partnered to bring Angular-specific data and insights directly into the Chrome DevTools performance panel, creating a unified profiling experience. <strong>We‚Äôre excited to introduce the new custom track for Angular in Chrome DevTools.</strong></p><p>This integration allows developers to combine the benefits of both tools, offering a more synchronized and comprehensive view of their application‚Äôs performance.</p><h3>Getting to Know the New Custom&nbsp;Track</h3><p>With this new integration, you‚Äôll find performance data using Angular concepts, such as application bootstrap, components, UI synchronization, and lifecycle hooks:</p><p>The custom track‚Äôs flame charts group function invocations together under corresponding components and other Angular concepts. You can drill down to individual functions for a more granular view when needed and still glean meaning from the groupings in other scenarios</p><p>One of the most significant benefits is the ability to distinguish between your application‚Äôs code, other scripts, or browser activities like layout and&nbsp;paint.</p><h3>Decoding the Colors: What Your Code is&nbsp;Doing</h3><p>The flame chart entries are color coded to help you quickly identify what‚Äôs happening in your application.</p><ul><li>: These represent Dependency Injection (DI) services instantiated during the application bootstrap process. In general, green signifies the execution of code written by application developers.</li></ul><ul><li>: This color is reserved for templates compiled by Angular. Even though it‚Äôs still your code, it has been transformed by Angular before execution in the browser. This allows you to clearly see which templates are creating or updating the DOM and how long these operations take.</li></ul><ul><li>: These mark the entry points. At the very top, you‚Äôll see the trigger‚Ää‚Äî‚Ääwhy Angular decided to run application code. Subsequent blue bars represent all the components that need to perform work, which is particularly useful for understanding how user interactions impact DOM updates. Below component names, you‚Äôll find the familiar purple (templates) and green (your component code).</li></ul><p>Since the custom track is interactive, clicking on an entry in the flame chart reveals more detailed information about a given entry. This data empowers developers to dive deeper into specific function calls and understand their impact on the application‚Äôs performance.</p><p>Enabling this powerful new feature is straightforward. Complete the following steps:</p><ol><li>Ensure you are using the latest version of Angular (v20 at the time of this post) and an up-to-date version of the Google Chrome&nbsp;browser.</li><li>Run your Angular application in developer mode.</li><li>With your application running, open Chrome DevTools and enable the custom track by typing ng.enableProfiling() in the&nbsp;console.</li><li>Once enabled, start recording a performance profile. The dedicated ‚ÄúAngular‚Äù track in the flame chart will be available.</li></ol><h3>More Performant Apps are on the&nbsp;Way</h3><p>This new integration with Chrome DevTools demonstrates our ongoing commitment to improving the developer experience within the Angular ecosystem. By providing tools that offer more focused and actionable insights, the Angular and Chrome teams are empowering developers to build faster, more efficient applications. Please try out this new integration and let us know what you&nbsp;think.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=0f9d8d36218a\" width=\"1\" height=\"1\" alt=\"\">","contentLength":3891,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"This Week In React #241: Remix, Next.js, Turbopack, Radix DOM templating, Ultracite, Stack, StyleX, MUI | Nitro Week, Skia, App Generator, Swift, Kotlin | ES2025, Rspack, Babel, TypeScript, Effect, Deno, Three.js","url":"https://thisweekinreact.com/newsletter/241","date":1751414400,"author":"","guid":180905,"unread":true,"content":"<p>It's been a hot C¬∞ week here, but pretty calm in terms of React news. We still got various little releases, interesting blog posts and weak signals that show us what the future might look like.</p><p>On the React Native side, the community is adopting Nitro Modules in various libraries, and Skia got built-in support for Lottie animations.</p><p>ES2025 has been approved, and TS 5.9 beta should come anytime soon.</p><p>As always, thanks for supporting us on your favorite platform:</p><p>Embrace connects technical performance to real user impact across mobile, web, and backend so that engineering teams can deliver fast, reliable, and exceptional digital experiences.</p><ul><li>üìä Track Core Web Vitals, crashes, network requests, and custom events‚Äîall tied to full user sessions.&nbsp;</li><li>üë§ Get deep insights into users with session stitching and play-by-plays of every user experience.&nbsp;</li><li>üîç Discover the root cause faster with high-fidelity data, including session timelines, performance traces, and user journeys.&nbsp;</li><li>üî≠ Embrace is built on OpenTelemetry. Own your data, integrate it anywhere, and avoid the rigid pricing and limitations of all-in-one platforms.</li></ul><p>Try Embrace today and get your first 1 million sessions free. Learn more at <a href=\"https://embrace.io/?utm_source=newsletter&amp;utm_medium=paid&amp;utm_campaign=twir-7-2-2025\" target=\"_blank\" rel=\"noopener noreferrer\">embrace.io</a>.</p><p>Interesting feedback from Shopify migrating their flagship Admin app to Remix, dogfooding the framework on a massive codebase with strong needs in terms of scalability. It looks to me many recent React Router features were things Shopify actually needed.</p><p>15x faster TypeScript and JavaScript debugging than with breakpoints and , while upgrading your AI agent ü§ñ into an expert debugger with real-time context.</p><p>Wallaby.js runs your tests as you type, feeding your AI assistant real-time runtime values, code coverage, error details, and execution paths ‚Äî all right next to your code.</p><p>Designed specifically for testing, Wallaby features include a , the ability to run only opened test files, full-context AI integration, smart test runs, and more. <strong>Better context. Smarter debugging.</strong></p><p><a href=\"https://nitro.margelo.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Nitro Modules</a> are trending among React Native lib developers, with 3 new releases this week:</p>","contentLength":2091,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Gap Strikes Back: Now Stylable","url":"https://css-tricks.com/the-gap-strikes-back-now-stylable/","date":1751373758,"author":"Patrick Brosset","guid":178896,"unread":true,"content":"<p>Four years ago, I wrote an article titled <a href=\"https://css-tricks.com/minding-the-gap/\">Minding the ‚Äúgap‚Äù</a>, where I talked about the CSS  property, where it applied, and how it worked with various CSS layouts.</p><p>At the time, I described how easy it was to evenly space items out in a flex, grid, or multi-column layout, by using the  property. But, I also said that  the gap areas was much harder, and I shared a workaround.</p><p>However, workarounds like using extra HTML elements, pseudo-elements, or borders to draw separator lines tend to come with drawbacks, especially those that impact your layout size, interfere with assistive technologies, or pollute your markup with style-only elements.</p><p>Today, I‚Äôm writing again about layout gaps, but this time, to tell you all about a new and exciting CSS feature that‚Äôs going to change it all. <strong>What you previously had to use workarounds for, you‚Äôll soon be able to do with just a few simple CSS properties that make it easy, yet also flexible, to display styled separators between your layout items.</strong></p><p>There‚Äôs already a <a href=\"https://www.w3.org/TR/css-gaps-1/\" rel=\"noopener\">specification draft for the feature</a> you can peruse. At the time I‚Äôm writing this, it is available in Chrome and Edge 139 behind a flag. But I believe it won‚Äôt be long before we turn that flag on. I believe other browsers are also very receptive and engaged.</p><p>Displaying decorative lines between items of a layout can make a big difference. When used well, these lines can bring more structure to your layout, and give your users more of a sense of how the different regions of a page are organized.</p><h3>Introducing CSS gap decorations</h3><p>If you‚Äôve ever used a multi-column layout, such as by using the  property, then you might already be familiar with gap decorations. You can draw vertical lines between the columns of a multi-column layout by using the  property:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">article {\n  column-width: 20rem;\n  column-rule: 1px solid black;\n}</code></pre><p>The CSS gap decorations feature builds on this to provide a more comprehensive system that makes it easy for you to draw separator lines in other layout types.</p><p>For example, the draft specification says that the  property also works in flexbox and grid layouts:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.my-grid-container {\n  display: grid;\n  gap: 2px;\n  column-rule: 2px solid pink;\n}</code></pre><p>No need for extra elements or borders! The key benefit here is that the decoration happens in CSS only, where it belongs, with no impacts to your semantic markup.</p><p>The CSS gap decorations feature also introduces a new  property for drawing lines between rows:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.my-flex-container {\n  display: flex;\n  gap: 10px;\n  row-rule: 10px dotted limegreen;\n  column-rule: 5px dashed coral;\n}</code></pre><p>But that‚Äôs not all, because the above syntax also allows you to define multiple, comma-separated, line style values, and use the same  function that CSS grid already uses for row and column templates. This makes it possible to define different styles of line decorations in a single layout, and adapt to an unknown number of gaps:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.my-container {\n  display: grid;\n  gap: 2px;\n  row-rule:\n    repeat(2, 1px dashed red),\n    2px solid black,\n    repeat(auto, 1px dotted green);\n}</code></pre><p>Finally, the CSS gap decorations feature comes with additional CSS properties such as , , , , and , which make it possible to precisely customize the way the separators are drawn, whether they overlap, or where they start and end.</p><p>Currently, the CSS gap decorations feature is only available in Chromium-based browsers.</p><p>The feature is still early in the making, and there‚Äôs time for you all to try it and to provide feedback that could help make the feature better and more adapted to your needs.</p><p>If you want to try the feature today, make sure to use Edge or Chrome, starting with version 139 (or another Chromium-based browser that matches those versions), and enable the flag by following these steps:</p><ol><li>In Chrome or Edge, go to .</li><li>In the search field, search for <strong>Enable Experimental Web Platform Features</strong>.</li></ol><h3>Using CSS gap decorations</h3><p>Let‚Äôs build a simple web page to learn how to use the feature. Here is what we‚Äôll be building:</p><p>The above layout contains a header section with a title, a navigation menu with a few links, a main section with a series of short paragraphs of text and photos, and a footer.</p><p>We‚Äôll use the following markup:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;body&gt;\n&lt;header&gt;\n  &lt;h1&gt;My personal site&lt;/h1&gt;\n&lt;/header&gt;\n&lt;nav&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;Blog&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;About&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;Links&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n&lt;main&gt;\n  &lt;article&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/article&gt;\n  &lt;article&gt;\n    &lt;img src=\"cat.jpg\" alt=\"A sleeping cat.\"&gt;\n  &lt;/article&gt;\n  &lt;article&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/article&gt;\n  &lt;article&gt;\n    &lt;img src=\"tree.jpg\" alt=\"An old olive tree trunk.\"&gt;\n  &lt;/article&gt;\n  &lt;article&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/article&gt;\n  &lt;article&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/article&gt;\n  &lt;article&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/article&gt;\n  &lt;article&gt;\n    &lt;img src=\"strings.jpg\" alt=\"Snow flakes falling in a motion blur effect.\"&gt;\n  &lt;/article&gt;\n&lt;/main&gt;\n&lt;footer&gt;\n  &lt;p&gt;¬© 2025 Patrick Brosset&lt;/p&gt;\n&lt;/footer&gt;\n&lt;/body&gt;</code></pre><p>We‚Äôll start by making the  element be a grid container. This way, we can space out the , , , and  elements apart in one go by using the  property:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">body {\n  display: grid;\n  gap: 4rem;\n  margin: 2rem;\n}</code></pre><p>Let‚Äôs now use the CSS gap decorations feature to display horizontal separator lines within the gaps we just defined:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">body {\n  display: grid;\n  gap: 4rem;\n  margin: 2rem;\n \n  row-rule: 1rem solid #efefef;\n}</code></pre><p>This gives us the following result:</p><p>We can do a bit better by making the first horizontal line look different than the other two lines, and simplify the  value by using the  syntax:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">body {\n  display: grid;\n  gap: 4rem;\n  margin: 2rem;\n \n  row-rule:\n    1rem solid #efefef,\n    repeat(2, 2px solid #efefef);\n}</code></pre><p>With this new  property value, we‚Äôre telling the browser to draw the first horizontal separator as a  thick line, and the next two separators as  thick lines, which gives the following result:</p><p>Now, let‚Äôs turn our attention to the navigation element and its list of links. We‚Äôll use flexbox to display the links in a single row, where each link is separated from the other links by a gap and a vertical line:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">nav ul {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 2rem;\n  column-rule: 2px dashed #666;\n}</code></pre><p>Very similarly to how we used the  property before, we‚Äôre now using the  property to display a dashed  thick separator between the links.</p><p>Our example web page now looks like this:</p><p>The last thing we need to change is the  element and its paragraphs and pictures. We‚Äôll use flexbox again and display the various children in a wrapping row of varying width items:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">main {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4rem;\n}\n\n\nmain &gt; * {\n  flex: 1 1 200px;\n}\n\n\nmain article:has(p) {\n  flex-basis: 400px;\n}</code></pre><p>In the above code snippet, we‚Äôre setting the  element to be a wrapping flex container with a  gap between items and flex lines. We‚Äôre also making the items have a flex basis size of  for pictures and  for text, and allowing them to grow and shrink as needed. This gives us the following result:</p><p>Let‚Äôs use CSS gap decorations to bring a little more structure to our layout by drawing  thick separator lines between the rows and columns of the layout:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">main {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4rem;\n  row-rule: 2px solid #999;\n  column-rule: 2px solid #999;\n}</code></pre><p>This gives us the following result, which is very close to our expected design:</p><p>The last detail we want to change is related to the vertical lines. We don‚Äôt want them to span across the entire height of the flex lines but instead start and stop where the content starts and stops.</p><p>With CSS gap decorations, we can easily achieve this by using the  property to fine-tune exactly where the decorations start and end, relative to the gap area:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">main {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4rem;\n  row-rule: 2px solid #999;\n  column-rule: 2px solid #999;\n  column-rule-outset: 0;\n}</code></pre><p>The  property above makes the vertical column separators span the height of each row, excluding the gap area, which is what we want:</p><p>There‚Äôs more to the feature and I mentioned a couple more CSS properties earlier</p><ul><li>, which lets you control which of the decorations, rows or columns, appear above the other ones.</li><li> / , which sets the behavior of the decoration lines at intersections. In particular, whether they are made of multiple segments, which start and end at intersections, or single, continuous lines.</li></ul><p>Because the feature is new, there isn‚Äôt MDN documentation about it yet. So to learn more, check out:</p><p>The Edge team has also created an <a href=\"https://microsoftedge.github.io/Demos/css-gap-decorations/playground.html\" rel=\"noopener\">interactive playground</a> where you can use visual controls to configure gap decorations.</p><p>And, of course, the reason this is all implemented behind a flag is to elicit feedback from developers like you! If you have any feedback, questions, or bugs about this feature, I definitely encourage you to open a new ticket on the <a href=\"https://issues.chromium.org/issues/new?template_issue=422768750&amp;component=1456721\" rel=\"noopener\">Chromium issue tracker</a>.</p>","contentLength":8779,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Using CSS Cascade Layers With Tailwind Utilities","url":"https://css-tricks.com/using-css-cascade-layers-with-tailwind-utilities/","date":1751289403,"author":"Zell Liew","guid":176652,"unread":true,"content":"<p>Adam Wathan has (very cleverly) built Tailwind with <a href=\"https://css-tricks.com/css-cascade-layers/\">CSS Cascade Layers</a>, making it extremely powerful for organizing styles by priority.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@layer theme, base, components, utilities;\n@import 'tailwindcss/theme.css' layer(theme);\n@import 'tailwindcss/utilities.css' layer(utilities);</code></pre><p>The core of Tailwind are its utilities. This means you have two choices:</p><ol></ol><p>The default choice is to follow Tailwind‚Äôs recommended layer order: place components first, and Tailwind utilities last.</p><p>So, if you‚Äôre building components, you need to manually wrap your components with a  directive. Then, overwrite your component styles with Tailwind, putting Tailwind as the ‚Äúmost important layer‚Äù.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Write your components */\n@layer components {\n  .component {\n    /* Your CSS here */\n  }\n}</code></pre><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;!-- Override with Tailwind utilities --&gt; \n&lt;div class=\"component p-4\"&gt; ... &lt;/div&gt;</code></pre><p>That‚Äôs a decent way of doing things.</p><p>But, being the bad boy I am, I don‚Äôt take the default approach as the ‚Äúbest‚Äù one. Over a year of (major) experimentation with Tailwind and vanilla CSS, I‚Äôve come across what I believe is a better solution.</p><p>Before we go on, I have to tell you that I‚Äôm writing a course called <a href=\"https://magicaldevschool.com/courses/unorthodox-tailwind/\" rel=\"noopener\">Unorthodox Tailwind</a> ‚Äî this shows you everything I know about using Tailwind and CSS in synergistic ways, leveraging the strengths of each.</p><p>Shameless plug aside, let‚Äôs dive into the Unorthodox Choice now.</p><p>In this case, the Unorthodox Choice is to write your styles in an unnamed layer ‚Äî or any layer after utilities, really ‚Äî so that your CSS naturally overwrites Tailwind utilities.</p><p>Of these two, I prefer the unnamed layer option:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Unnamed layer option */\n@layer theme, base, components, utilities; \n\n/* Write your CSS normally here */ \n.component { /* ... */ }</code></pre><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Named layer option */\n/* Use whatever layer name you come up with. I simply used css here because it made most sense for explaining things */\n@layer theme, base, components, utilities, css; \n\n@layer css {\n  .component { /* ... */ }\n}</code></pre><p>I have many reasons why I do this:</p><ol><li>I don‚Äôt like to add unnecessary CSS layers because it makes code harder to write ‚Äî more keystrokes, having to remember the specific layer I used it in, etc.</li><li>I‚Äôm pretty skilled with <a href=\"https://itcss.io\" rel=\"noopener\">ITCSS</a>, selector specificity, and all the good-old-stuff you‚Äôd expect from a seasoned front-end developer, so writing CSS in a single layer doesn‚Äôt scare me at all.</li><li>I can do complex stuff that are hard or impossible to do in Tailwind (like theming and animations) in CSS.</li></ol><p>Your mileage may vary, of course.</p><p>Now, if you have followed my reasoning so far, you would have noticed that I use Tailwind  differently:</p><ul><li>Tailwind utilities are not the ‚Äúmost important‚Äù layer.</li><li>My unnamed CSS layer is the most important one.</li></ul><ul><li><strong>Build prototypes with Tailwind</strong> (quickly, easily, especially with the <a href=\"https://splendidlabz/docs/layouts/\">tools</a> I‚Äôve created).</li><li><strong>Shift these properties to CSS</strong> when they get more complex ‚Äî so I don‚Äôt have to read messy utility-littered HTML that makes my heart sink. Not because utility HTML is bad, but because it takes lots of brain processing power to figure out what‚Äôs happening.</li></ul><p>Finally, here‚Äôs the nice thing about Tailwind being in a utility layer: I can always  a utility to give it strength.</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;!-- !important the padding utility --&gt;\n&lt;div class=\"component !p-4\"&gt; ... &lt;/div&gt;</code></pre><p>Whoa, hold on, wait a minute! Isn‚Äôt this wrong, you might ask?</p><p>Nope. The  keyword has traditionally been used to override classes. In this case, we‚Äôre leveraging on the <a href=\"https://css-tricks.com/css-cascade-layers/#important-origins-context-and-layers-are-reversed\"> feature in CSS Layers</a> to say the Tailwind utility is more important than any CSS in the unnamed layer.</p><p>This is perfectly valid and is a built-in feature for CSS Layers.</p><p>Besides, the  is so explicit (and used so little) that it makes sense for one-off quick-and-dirty adjustments (without creating a brand new selector for it).</p><h3>Tailwind utilities are more powerful than they seem</h3><p>Tailwind utilities are not a 1:1 map between a class and a CSS property. Built-in Tailwind utilities mostly look like this so it can give people a wrong impression.</p><p>Tailwind utilities are more like <a href=\"https://css-tricks.com/tailwinds-apply-feature-is-better-than-it-sounds/\">convenient Sass mixins</a>, which means we can build effective tools for <a href=\"https://splendidlabz/docs/layouts/\">layouts</a>, theming, typography, and more, through them.</p><p>Thanks for reading and I hope you‚Äôre enjoying a new way of looking at (or using) Tailwind!</p>","contentLength":4212,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"CSS Blob Recipes","url":"https://css-tricks.com/css-blob-recipes/","date":1751032121,"author":"Juan Diego Rodr√≠guez","guid":183115,"unread":true,"content":"<p>. You hate them. You love them. Personally, as a design illiterate, I like to overuse them‚Ä¶ a lot. And when you repeat the same process over and over again, it‚Äôs only a question of how much you can optimize it, or in this case, what‚Äôs the easiest way to create blobs in CSS? Turns out, as always, there are many approaches.</p><p>To know if our following blobs are worth using, we‚Äôll need them to pass three tests:</p><ol><li>They can be with just a single element (and preferably without pseudos).</li><li>They can be easily designed (ideally through an online tool).</li><li>We can use gradient backgrounds, borders, shadows, and other CSS effects on them.</li></ol><p>Without further ado, let‚Äôs&nbsp;&nbsp;right in.</p><h3>Just generate them online</h3><p>I know it‚Äôs disenchanting to click on an article about making blobs in CSS just for me to say you can generate them outside CSS. Still, it‚Äôs probably the most common way to create blobs on the web, so to be thorough, these are some online tools I‚Äôve used before to create  blobs.</p><ul><li> Probably the one I have used the most since, besides blobs, it can also generate lots of SVG backgrounds.</li><li> A dedicated tool for making blobs. It‚Äôs apparently part of Haikei now, so you can use both.</li><li>Lastly, almost all graphic programs let you hand-draw blobs and export them as SVGs.</li></ul><p>For example, this is one I generated just now. Keep it around, as it will come in handy later.</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;svg viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n  &lt;path\n    fill=\"#FA4D56\"\n    d=\"M65.4,-37.9C79.2,-13.9,81,17,68.1,38C55.2,59.1,27.6,70.5,1.5,69.6C-24.6,68.8,-49.3,55.7,-56,38.2C-62.6,20.7,-51.3,-1.2,-39,-24.4C-26.7,-47.6,-13.3,-72,6.2,-75.6C25.8,-79.2,51.6,-62,65.4,-37.9Z\"\n    transform=\"translate(100 100)\"\n  /&gt;\n&lt;/svg&gt;</code></pre><p>While counterintuitive, we can use the&nbsp;&nbsp;property to create blobs. This technique isn‚Äôt new by any means; it was&nbsp;<a href=\"https://9elements.com/blog/css-border-radius-can-do-that/\" rel=\"noopener\">first described by Nils Binder</a>&nbsp;in 2018, but it is still fairly unknown. Even for those who use it, the inner workings are not entirely clear.</p><p>To start, you may know the&nbsp;&nbsp;is a shorthand to each individual corner‚Äôs radius, going from the top left corner clockwise. For example, we can set each corner‚Äôs&nbsp;&nbsp;to get a bubbly square shape:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.blob {\n  border-radius: 25% 50% 75% 100%;\n}</code></pre><p>However, what&nbsp;&nbsp;does ‚Äî and also why it‚Äôs called ‚Äúradius‚Äù ‚Äî is to shape each corner following a circle of the given radius. For example, if we set the top left corner to&nbsp;, it will follow a circle with a radius&nbsp;&nbsp;the size of the shape.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.blob {\n  border-top-left-radius: 25%;\n}</code></pre><p>What‚Äôs less known is that each corner property is still a&nbsp;&nbsp;towards its horizontal and vertical radii. Normally, you set both radii to the same value, getting a circle, but you can set them individually to create an ellipse. For example, the following sets the horizontal radius to&nbsp;&nbsp;of the element‚Äôs width and the vertical to&nbsp;&nbsp;of its height:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.blob {\n  border-top-left-radius: 25% 50%;\n}</code></pre><p>We can now shape each corner like an ellipse, and it is the combination of all four ellipses that creates the illusion of a blob! Just take into consideration that to use the horizontal and vertical radii syntax through the&nbsp;&nbsp;property, we‚Äôll need to separate the horizontal from the vertical radii using a forward slash ().</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.blob {\n  border-radius:\n    /* horizontal */\n    100% 30% 60% 70% /\n    /* vertical */\n    50% 40% 70% 70%;\n}</code></pre><p>The syntax isn‚Äôt too intuitive, so designing a blob from scratch will likely be a headache. Luckily,&nbsp;<a href=\"https://9elements.github.io/fancy-border-radius/\" rel=\"noopener\">Nils Binder made a tool</a>&nbsp;exactly for that!</p><p>This hack is awesome. We aren‚Äôt supposed to use&nbsp;&nbsp;like that, but we still do. Admittedly, we are limited to boring blobs. Due to the nature of&nbsp;, no matter how hard we try, we will only get convex shapes.</p><p>Just going off&nbsp;, we can try to minimize it a little by sticking more than one blob together:</p><p>However, I don‚Äôt want to spend too much time on this technique since it is too impractical to be worth it. To name a few drawbacks:</p><ol><li>We are using more than one element or, at the very least, an extra pseudo-element. Ideally, we want to keep it to one element.</li><li>We don‚Äôt have a tool to prototype our blobby amalgamations, so making one is a process of trial and error.</li><li>We can‚Äôt use borders, gradients, or box shadows since they would reveal the element‚Äôs outlines.</li></ol><h3>Multiple backgrounds and SVG filters</h3><p>This one is an improvement in the Gooey Effect,&nbsp;<a href=\"https://css-tricks.com/gooey-effect/\">described here by Lucas Bebber</a>, although I don‚Äôt know who first came up with it. In the original effect, several elements can be morphed together like drops of liquid sticking to and flowing out of each other:</p><p>It works by first blurring shapes nearby, creating some connected shadows. Then we crank up the contrast, forcing the blur out and smoothly connecting them in the process. Take, for example, this demo by Chris Coyer (It‚Äôs from 2014, so more than 10 years ago!):</p><p>If you look at the code, you‚Äôll notice Chris uses the&nbsp;<a href=\"https://css-tricks.com/almanac/properties/f/filter/\"></a>&nbsp;property along the&nbsp;&nbsp;and&nbsp;&nbsp;functions, which I‚Äôve also seen in other blob demos. To be specific, it applies&nbsp;&nbsp;on each individual circle and then&nbsp;&nbsp;on the parent element. So, if we have the following HTML:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"blob\"&gt;\n  &lt;div class=\"subblob\"&gt;&lt;/div&gt;\n  &lt;div class=\"subblob\"&gt;&lt;/div&gt;\n  &lt;div class=\"subblob\"&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre><p>‚Ä¶we would need to apply filters and background colors as such:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.blob {\n  filter: contrast(50);\n  background: white; /* Solid colors are necessary */\n}\n\n.subblob {\n  filter: blur(15px);\n  background: black; /* Solid colors are necessary */\n}</code></pre><p>However, there is a good reason why those demos stick to white shapes and black backgrounds (or vice versa) since things get unpredictable once colors aren‚Äôt contrast-y enough. See it for yourself in the following demo by changing the color. Just be wary:&nbsp;.</p><p>To solve this, we will use an SVG filter instead. I don‚Äôt want to get too technical on SVG (if you want to, read Luca‚Äôs post!). In a nutshell, we can apply blurring and contrast filters using SVGs, but now, we can also pick which color channel we apply the contrast to, unlike normal&nbsp;, which modifies all colors. </p><p>Since we want to leave color channels (,&nbsp;&nbsp;and&nbsp;) untouched, we will only crank the contrast up for the alpha channel. That translates to the next SVG filter, which can be embedded in the HTML:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" style=\"position: absolute;\"&gt;\n  &lt;defs&gt;\n    &lt;filter id=\"blob\"&gt;\n      &lt;feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"12\" result=\"blur\" /&gt;\n      &lt;feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -6\" result=\"goo\" /&gt;\n      &lt;feBlend in=\"SourceGraphic\" in2=\"blob\" /&gt;\n    &lt;/filter&gt;\n  &lt;/defs&gt;\n&lt;/svg&gt;</code></pre><p>To apply it, we will use again&nbsp;, but this time we‚Äôll set it to&nbsp;, so that it pulls the SVG from the HTML.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.blob {\n  filter: url(\"#blob\");\n}</code></pre><p>And now we can even use it with gradient backgrounds!</p><p>That being said, this approach comes with two small, but important, changes to common CSS filters:</p><ol><li>The filter is applied to the parent element, not the individual shapes.</li><li>The parent element must be transparent (which is a huge advantage). To change the background color, we can instead change the body or other ancestors‚Äô background, and it will work with no issues.</li></ol><p>What‚Äôs left is to place the&nbsp;&nbsp;elements together such that they make a blobby enough shape, then apply the SVG filters to morph them:</p><p>This works well, but it has a similar issue to the blob we made by morphing several&nbsp; instances: too many elements for a simple blob. Luckily, we can take advantage of the&nbsp;<a href=\"https://css-tricks.com/almanac/properties/b/background/\"></a>&nbsp;property to create multiple shapes and morph them together using SVG filters, all in a single element. Since we are keeping it to one element, we will go back to just one&nbsp;empty  div:</p><p>First, we will use&nbsp;&nbsp;along with&nbsp;&nbsp;to create a circle inside the element:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">body {\n  background: radial-gradient(farthest-side, var(--blob-color) 100%, #0000);\n  background-repeat: no-repeat; /* Important! */\n}</code></pre><p>Here is what each parameter does:</p><ul><li> Confines the shape to the element‚Äôs box farthest from its center. This way, it is kept as a circle.</li><li> Fills the background shape from 0 to 100% with the same color, so it ends up as a solid color.</li><li> After the shape is done, it makes a full stop to transparency, so the color ends.</li></ul><p>The next part is moving and resizing the circle using the&nbsp;&nbsp;and&nbsp;&nbsp;properties. Luckily, both can be set on&nbsp;&nbsp;after the gradient, separated from each other by a forward slash ().</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">body {\n  background: radial-gradient(...) 20% 30% / 30% 40%;\n  background-repeat: no-repeat; /* Important! */\n}</code></pre><p>The first pair of percentages sets the shape‚Äôs horizontal and vertical position (taking as a reference the top-left corner), while the second pair sets the shape‚Äôs width and height (taking as a reference the element‚Äôs size).</p><p>As I mentioned, we can stack up different backgrounds together, which means we can create as many circles/ellipses as we want! For example, we can create three ellipses on the same element:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.blob {\n  background:\n    radial-gradient(farthest-side, var(--blob-color) 100%, #0000) 20% 30% / 30% 40%, \n    radial-gradient(farthest-side, var(--blob-color) 100%, #0000) 80% 50% / 40% 60%, \n    radial-gradient(farthest-side, var(--blob-color) 100%, #0000) 50% 70% / 50% 50%;\n  background-repeat: no-repeat;\n}</code></pre><p>What‚Äôs even better is that SVG filters don‚Äôt care whether shapes are made of elements or backgrounds, so we can also morph them together using the last&nbsp;&nbsp;filter!</p><p>While this method may be a little too much for blobs, it unlocks squishing, stretching, dividing, and merging blobs <a href=\"https://css-tricks.com/gooey-effect/#aa-making-things-stick\">in seamless animations</a>.</p><p>Again, all these tricks are awesome, but not enough for what we want! We accomplished reducing the blob to a single element, but we still can‚Äôt use gradients, borders, or shadows on them, and also, they are tedious to design and model. Then, that brings us to the ultimate blob approach‚Ä¶</p><p>Fortunately, there is a new way to make blobs that just dropped to CSS: the&nbsp;&nbsp;function!</p><p>First off, the CSS&nbsp;&nbsp;function is used alongside the&nbsp;<a href=\"https://css-tricks.com/almanac/properties/c/clip-path/\"></a>&nbsp;property to cut elements into any shape we want. More specifically, it uses a verbal version of SVG‚Äôs&nbsp;&nbsp;syntax. The syntax has lots of commands for lots of types of lines, but when blobbing with&nbsp;, we‚Äôll define curves using the&nbsp;&nbsp;command:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.blob {\n  clip-path: shape(\n    from X0 Y0, \n    curve to X1 Y1 with Xc1 Yc1, \n    curve to X2 Y2 with Xc21 Yc21 / Xc22 Yc22\n    /* ... */\n  );\n}</code></pre><p>Let‚Äôs break down each parameter:</p><ul><li>&nbsp;defines the starting point of the shape.</li><li>&nbsp;starts the curve where&nbsp;&nbsp;is the next point of the shape, while&nbsp;&nbsp;defines a control point used in B√©zier curves.</li><li>The next parameter is similar, but we used&nbsp;&nbsp;instead to define two control points on the B√©zier curve.</li></ul><p>I honestly don‚Äôt understand B√©zier curves and control points completely, but luckily, we don‚Äôt need them to use&nbsp;&nbsp;and blobs! Again,&nbsp;&nbsp;uses a verbal version of SVG‚Äôs&nbsp;&nbsp;syntax, so it can draw any shape an SVG can, which means that we can translate the SVG blobs we generated earlier‚Ä¶ and CSS-ify them. To do so, we‚Äôll grab the&nbsp;&nbsp;attribute (which defines the&nbsp;) from our SVG and paste it into Temani‚Äôs&nbsp;<a href=\"https://css-generators.com/svg-to-css/\" rel=\"noopener\">SVG to&nbsp;&nbsp;generator</a>.</p><p>This is the exact code the tool generated for me:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.blob {\n  aspect-ratio: 0.925; /* Generated too! */\n\n  clip-path: shape(\n    from 91.52% 26.2%,\n    curve to 93.52% 78.28% with 101.76% 42.67%/103.09% 63.87%,\n    curve to 44.11% 99.97% with 83.95% 92.76%/63.47% 100.58%,\n    curve to 1.45% 78.42% with 24.74% 99.42%/6.42% 90.43%,\n    curve to 14.06% 35.46% with -3.45% 66.41%/4.93% 51.38%,\n    curve to 47.59% 0.33% with 23.18% 19.54%/33.13% 2.8%,\n    curve to 91.52% 26.2% with 62.14% -2.14%/81.28% 9.66%\n  );\n}</code></pre><p>As you might have guessed, it returns our beautiful blob:</p><p>Let‚Äôs check if it passes our requirements:</p><ol><li>Yes, they can be made of a single element.</li><li>Yes, they can also be created in a generator and then translated into CSS.</li><li>Yes, we can use gradient backgrounds, but due to the nature of&nbsp;,&nbsp;borders and shadows get cut out.</li></ol><p>Two out of three? Maybe two and a half of three? That‚Äôs a big improvement over the other approaches, even if it‚Äôs not perfect.</p><p>So, alas, we failed to find what I believe is the perfect CSS approach to blobs. I am, however, amazed how something so trivial designing blobs can teach us about so many tricks and new CSS features, many of which I didn‚Äôt know myself.</p>","contentLength":12212,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"KelpUI","url":"https://css-tricks.com/kelpui/","date":1750956152,"author":"Geoff Graham","guid":183114,"unread":true,"content":"<p><a href=\"https://kelpui.com\" rel=\"noopener\">KelpUI</a> is new library that <a href=\"https://gomakethings.com\" rel=\"noopener\">Chris Ferdinandi</a> is developing, designed to leverage newer CSS features and Web Components. I‚Äôve enjoyed following Chris as he‚Äôs published an ongoing series of articles detailing his thought process behind the library, getting deep into his approach. You really get a clear picture of his strategy and I love it.</p><p>He outlined his principles up front in a post back in April:</p><blockquote><p>I‚Äôm imagining a system that includes‚Ä¶</p><ul><li>Base styles for all of the common HTML elements.</li><li>Loads of utility classes for nudging and tweaking things.</li><li>Group classes for styling more complex UI elements&nbsp;&nbsp;a million little classes.</li><li>Easy customization with CSS variables.</li><li>Web Components to progressively add interactivity to functional HTML.</li><li>All of the Web Component HTML lives in the light DOM, so its easy to style and reason about.</li></ul><p>I‚Äôm imagining something that can be loaded directly from a CDN, downloaded locally, or imported if you want to roll your own build.</p></blockquote><p>KelpUI is still evolving, and that‚Äôs part of the beauty of looking at it now and following Chris‚Äôs blog as he openly chronicles his approach. There‚Äôs always going to be some opinionated directions in a library like this, but I love that the guiding philosophy is so clear and is being used as a yardstick to drive decisions. As I write this, Chris is <a href=\"https://gomakethings.com/modular-css-redux/\" rel=\"noopener\">openly questioning the way he optimizes the library</a>, demonstrating the tensions between things like performance and a good developer experience.</p><p>Looks like it‚Äôll be a good system, but even more than that, it‚Äôs a wonderful learning journey that‚Äôs worth following.</p>","contentLength":1584,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["frontend"]}