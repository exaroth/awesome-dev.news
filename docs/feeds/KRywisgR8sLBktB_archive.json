{"id":"KRywisgR8sLBktB","title":"JS/Frontend","displayTitle":"JS/Frontend","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":36,"items":[{"title":"Conditional types in TypeScript","url":"https://2ality.com/2025/02/conditional-types-typescript.html","date":1739577600,"author":"Dr. Axel Rauschmayer","guid":353,"unread":true,"content":"<p>In TypeScript, conditional types let us make decisions (think if-then-else expressions) ‚Äì which is especially useful in generic types. They are also an essential tool for working with union types because they let use ‚Äúloop‚Äù over them. Read on if you want to know how all of that works.</p>","contentLength":291,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Handwriting an SVG Heart, With Our Hearts","url":"https://css-tricks.com/handwriting-an-svg-heart-with-our-hearts/","date":1739539512,"author":"Ryan Trimble","guid":570,"unread":true,"content":"<p>According to local grocery stores, it‚Äôs the Valentine‚Äôs Day season again, and what better way to express our love than with the symbol of love: . A while back on CSS-Tricks, <a href=\"https://css-tricks.com/hearts-in-html-and-css/\">we shared several ways to draw hearts</a>, and the response was dreamy. Check out all these amazing, heart-filled submissions in this <a href=\"http://codepen.io/collection/AOybyj/\" rel=\"noopener\">collection on CodePen</a>:</p><p>Temani Afif‚Äôs <a href=\"https://css-shape.com/heart/\" rel=\"noopener\">CSS Shapes</a> site offers a super modern heart using only CSS:</p><p>Now, to show  love, I wanted to do something personal, something crafty, something with a mild amount of effort.</p><p>Handwriting a love note is a classic romantic gesture, but have you considered handwriting an SVG? We won‚Äôt need some fancy vector drawing tool to express our love. Instead, we can open a blank HTML document and add an  tag:</p><p>We‚Äôll need a way to see what we are doing inside the ‚ÄúSVG realm‚Äù (as I like to call it), which is what the  attribute provides. The 2D plane upon which vector graphics render is as infinite as our love, quite literally, complete with an x- and y-axis and all (like from math class).</p><p>We‚Äôll set the start coordinates as  and end coordinates as  to make a handsome, square . Oh, and by the way, we don‚Äôt concern ourselves over pixels,  values, or any other unit types; this is , and we play by our own rules.</p><p>We add in these coordinates to the  as a string of values:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;svg viewBox=\"0 0 10 10\"&gt;\n\n&lt;/svg&gt;</code></pre><p>Now we can begin drawing our heart,  our heart. Let‚Äôs make a line. To do that, we‚Äôll need to know a lot more about coordinates, and where to stick ‚Äôem. We‚Äôre able to draw a line with many points using the  element, which defines paths using the  attribute. <a href=\"https://css-tricks.com/how-to-simplify-svg-code-using-basic-shapes/\">SVG path commands are difficult to memorize</a>, but the effort means you care. The path commands are:</p><ul><li>, , , </li><li>, , , </li></ul><p>We‚Äôre only interested in drawing line segments for now, so together we‚Äôll explore the first two:  and . MDN romantically describes MoveTo as picking up a drawing instrument, such as a pen or pencil: we aren‚Äôt yet drawing anything, just moving our pen to the point where we want to begin our confession of love.</p><p>We‚Äôll  the coordinates of  represented in the  attribute as :</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;svg viewBox=\"0 0 10 10\"&gt;\n  &lt;path d=\"M2,2\" /&gt;\n&lt;/svg&gt;</code></pre><p>Not surprising then to find that  is akin to putting pen to paper and  from one point to another. Let‚Äôs draw the first segment of our heart by drawing a  with coordinates , represented as  next in the  attribute:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;svg viewBox=\"0 0 10 10\"&gt;\n  &lt;path d=\"M2,2 L4,4\" /&gt;\n&lt;/svg&gt;</code></pre><p>We‚Äôll add a final line segment as another LineTo  with coordinates , again appended to the  attribute as :</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;svg viewBox=\"0 0 10 10\"&gt;\n  &lt;path d=\"M2,2 L4,4 L6,2\" /&gt;\n&lt;/svg&gt;</code></pre><p>If you stop to preview what we‚Äôve accomplished so far, you may be confused as it renders an upside-down triangle; that‚Äôs not quite a heart yet, Let‚Äôs fix that.</p><p>SVG shapes apply a  by default, which we can remove with :</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;svg viewBox=\"0 0 10 10\"&gt;\n  &lt;path d=\"M2,2 L4,4 L6,2\" fill=\"none\" /&gt;\n&lt;/svg&gt;</code></pre><p>Rather than filling in the shape, instead, let‚Äôs display our line path by adding a , adding color to our heart.</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;svg viewBox=\"0 0 10 10\"&gt;\n  &lt;path \n    d=\"M2,2 L4,4 L6,2\" \n    fill=\"none\" \n    stroke=\"rebeccapurple\" /&gt;\n&lt;/svg&gt;</code></pre><p>Next, add some weight to the stroke by increasing the :</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;svg viewBox=\"0 0 10 10\"&gt;\n  &lt;path \n    d=\"M2,2 L4,4 L6,2\" \n    fill=\"none\" \n    stroke=\"rebeccapurple\" \n    stroke-width=\"4\" /&gt;\n&lt;/svg&gt;</code></pre><p>Finally, apply a  of  (sorry, no time for  jokes) to round off the start and end points of our line path, giving us that classic symbol of love:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;svg viewBox=\"0 0 10 10\"&gt;\n  &lt;path \n    d=\"M2,2 L4,4 L6,2\" \n    fill=\"none\"\n    stroke=\"rebeccapurple\"\n    stroke-width=\"4\"\n    stroke-linecap=\"round\" /&gt;\n&lt;/svg&gt;</code></pre><p>. Now all that‚Äôs left to do is send it to that special someone. </p>","contentLength":3675,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"It's time to go ESM-only","url":"https://javascriptweekly.com/issues/723","date":1739491200,"author":"","guid":601,"unread":true,"content":"<p>ü§Ø Pfft, vehicle data is a joke without <a href=\"https://javascriptweekly.com/link/165818/rss\">CarsXE</a>. API goes brrrrr. VIN decoding, plate lookup, market value reports. <a href=\"https://javascriptweekly.com/link/165818/rss\">Get&nbsp;Serious!</a></p>","contentLength":130,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Mapped types in TypeScript","url":"https://2ality.com/2025/02/mapped-types-typescript.html","date":1739491200,"author":"Dr. Axel Rauschmayer","guid":352,"unread":true,"content":"<p>A mapped type is a loop over keys that produces an object or tuple type and looks as follows:</p><pre><code>{[]: }\n</code></pre><p>In this blog post, we examine how mapped types work and see examples of using them. Their most importing use cases are transforming objects and mapping tuples.</p>","contentLength":259,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Scroll Driven Animations Notebook","url":"https://css-tricks.com/scroll-driven-animations-notebook/","date":1739453069,"author":"Geoff Graham","guid":569,"unread":true,"content":"<p>One of his latest is a <a href=\"https://nerdy.dev/notebook/scroll-driven-animations.html\" rel=\"noopener\">notebook of scroll-driven animations</a>. They‚Äôre all impressive as heck, as you‚Äôd expect from Adam. But it‚Äôs the simplicity of the first few examples that I love most. Here I am recreating two of the effects in a CodePen, which you‚Äôll want to view in the latest version of Chrome for support.</p><p>This is a perfect example of how a scroll-driven animation is simply a normal CSS animation, just tied to scrolling instead of the document‚Äôs default timeline, which starts on render. We‚Äôre talking about the same set of keyframes:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@keyframes slide-in-from-left {\n  from {\n    transform: translateX(-100%);\n  }\n}</code></pre><p>All we have to do to trigger scrolling is call the animation and assign it to the timeline:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">li {\n  animation: var(--animation) linear both;\n  animation-timeline: view();\n}</code></pre><p>Notice how there‚Äôs no duration set on the animation. There‚Äôs no need to since we‚Äôre dealing with a scroll-based timeline instead of the document‚Äôs timeline. We‚Äôre using the  function instead of the  function, which acts sort of like JavsScript‚Äôs Intersection Observer where scrolling is based on where the element comes into view and intersects the scrollable area.</p><p>It‚Äôs easy to drop your jaw and ooo and ahh all over Adam‚Äôs demos, especially as they get more advanced. But just remember that we‚Äôre still working with plain ol‚Äô CSS animations. The difference is the timeline they‚Äôre on.</p>","contentLength":1411,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Typecasting and Viewport Transitions in CSS With tan(atan2())","url":"https://css-tricks.com/typecasting-and-viewport-transitions-in-css-with-tanatan2/","date":1739369728,"author":"Juan Diego Rodr√≠guez","guid":568,"unread":true,"content":"<p>We‚Äôve been able to <a href=\"https://css-tricks.com/snippets/css/calculate-viewport-size-in-css/\">get the length of the viewport in CSS</a> since‚Ä¶&nbsp;‚Ä¶&nbsp;2013! Surprisingly, that was more than a decade ago. Getting the viewport width is as easy these days as easy as writing&nbsp;, but what does that translate to, say, in ? What about the other properties, like those that take a percentage, an angle, or an integer?</p><p>Think about changing an element‚Äôs opacity, rotating it, or setting an animation progress based on the screen size. We would first need the&nbsp; ‚Äî which isn‚Äôt currently possible in CSS, right?</p><p>What I am about to say isn‚Äôt a groundbreaking discovery, it was first&nbsp;<a href=\"https://dev.to/janeori/css-type-casting-to-numeric-tanatan2-scalars-582j\" rel=\"noopener\">described amazingly by Jane Ori</a>&nbsp;in 2023. In short, we can use a weird hack (or feature) involving the&nbsp;&nbsp;and&nbsp;&nbsp;trigonometric functions to typecast a length (such as the viewport) to an integer. This opens&nbsp;&nbsp;new layout possibilities, but my first experience was while writing an Almanac entry in which I just wanted to make an image‚Äôs opacity responsive.</p><p>Resize the CodePen and the image will get more transparent as the screen size gets smaller, of course with some boundaries, so it doesn‚Äôt become invisible:</p><p>This is the simplest we can do, but there is a lot more. Take, for example, this demo I did trying to combine many viewport-related effects. Resize the demo and the page feels alive: objects move, the background changes and the text smoothly wraps in place.</p><p>I think it‚Äôs really cool, but I am no designer, so that‚Äôs the best my brain could come up with. Still, it may be too much for an introduction to this typecasting hack, so as a middle-ground, I‚Äôll focus only on the title transition to showcase how all of it works:</p><p>The idea behind this is to convert &nbsp;to radians (a way to write angles) using&nbsp;, and then back to its original value using&nbsp;, with the perk of coming out as an integer. It should be achieved like this:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">:root {\n  --int-width: tan(atan2(100vw, 1px));\n}</code></pre><p>But! Browsers aren‚Äôt too keep on this method, so a lot more wrapping is needed to make it work across all browsers. The following may seem like magic (or nonsense), so I recommend&nbsp;<a href=\"https://dev.to/janeori/css-type-casting-to-numeric-tanatan2-scalars-582j\" rel=\"noopener\">reading Jane‚Äôs post</a>&nbsp;to better understand it, but this way it will work in all browsers:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@property --100vw {\n  syntax: \"&lt;length&gt;\";\n  initial-value: 0px;\n  inherits: false;\n}\n\n:root {\n  --100vw: 100vw;\n  --int-width: calc(10000 * tan(atan2(var(--100vw), 10000px)));\n}</code></pre><p>Don‚Äôt worry too much about it. What‚Äôs important is our precious&nbsp;&nbsp;variable, which holds the viewport size as an integer!</p><h3>Wideness: One number to rule them all</h3><p>Right now we have the viewport as an integer, but that‚Äôs just the first step. That integer isn‚Äôt super useful by itself. We oughta convert it to something else next since:</p><ul><li>different properties have different units, and</li><li>we want each property to go from a start value to an end value.</li></ul><p>Think about an image‚Äôs  going from&nbsp;&nbsp;to&nbsp;, an object rotating from&nbsp;&nbsp;to&nbsp;,&nbsp;or an element‚Äôs&nbsp;&nbsp;going from&nbsp;&nbsp;to&nbsp;. We want to interpolate between these values as&nbsp;&nbsp;gets bigger, but right now it‚Äôs just an integer that usually ranges between&nbsp;&nbsp;to&nbsp;, which is inflexible and can‚Äôt be easily converted to any of the end values.</p><p>The best solution is to turn&nbsp;&nbsp;into a number that goes from&nbsp;&nbsp;to&nbsp;.&nbsp;So, as the screen gets bigger, we can multiply it by the desired end value. Lacking a better name, I call this ‚Äú0-to-1‚Äù value&nbsp;. If we have , all the last examples become possible:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* If `--wideness is 0.5 */\n\n.element {\n  opacity: var(--wideness); /* is 0.5 */\n  translate: rotate(calc(wideness(400px, 1200px) * 360deg)); /* is 180deg */\n  offset-distance: calc(var(--wideness) * 100%); /* is 50% */\n}</code></pre><p>So&nbsp;&nbsp;is a value between  to  that represents how wide the screen is:  represents when the screen is narrow, and  represents when it‚Äôs wide. But we still have to set what those values mean in the viewport. For example, we may want  to be  and  to be , our viewport transitions will run between these values. Anything below and above is clamped to  and , respectively.</p><p>In CSS, we can write that as follows:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">:root {\n  /* Both bounds are unitless */\n  --lower-bound: 400; \n  --upper-bound: 1200;\n\n  --wideness: calc(\n    (clamp(var(--lower-bound), var(--int-width), var(--upper-bound)) - var(--lower-bound)) / (var(--upper-bound) - var(--lower-bound))\n  );\n}</code></pre><p>Besides easy conversions, the&nbsp;&nbsp;variable lets us define the lower and upper limits in which the transition should run. And what‚Äôs even better, we can set the transition zone at a middle spot so that the user can see it in its full glory. Otherwise, the screen would need to be&nbsp;&nbsp;so that&nbsp;&nbsp;reaches  and who knows how wide to reach .</p><h3>We got the . What‚Äôs next?</h3><p>For starters, the title‚Äôs markup is divided into spans since there is no CSS-way to select specific words in a sentence:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;h1&gt;&lt;span&gt;Resize&lt;/span&gt; and &lt;span&gt;enjoy!&lt;/span&gt;&lt;/h1&gt;</code></pre><p>And since we will be doing the line wrapping ourselves, it‚Äôs important to unset some defaults:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">h1 {\n  position: absolute; /* Keeps the text at the center */\n  white-space: nowrap; /* Disables line wrapping */\n}</code></pre><p>The transition should work without the base styling, but it‚Äôs just too plain-looking. They are below if you want to copy them onto your stylesheet:</p><p>And just as a recap, our current hack looks like this:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@property --100vw {\n  syntax: \"&lt;length&gt;\";\n  initial-value: 0px;\n  inherits: false;\n}\n\n:root {\n  --100vw: 100vw;\n  --int-width: calc(10000 * tan(atan2(var(--100vw), 10000px)));\n  --lower-bound: 400;\n  --upper-bound: 1200;\n\n  --wideness: calc(\n    (clamp(var(--lower-bound), var(--int-width), var(--upper-bound)) - var(--lower-bound)) / (var(--upper-bound) - var(--lower-bound))\n  );\n}</code></pre><p>OK, enough with the set-up. It‚Äôs time to use our new values and make the viewport transition. We first gotta identify&nbsp;&nbsp;the title should be rearranged for smaller screens: as you saw in the initial demo, the first&nbsp;&nbsp;goes up and right, while the second&nbsp;&nbsp;does the opposite and goes down and left. So, the end position for both spans translates to the following values:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">h1 {\n  span:nth-child(1) {\n    display: inline-block; /* So transformations work */\n    position: relative;\n    bottom: 1.2lh;\n    left: 50%;\n    transform: translate(-50%);\n  }\n\n  span:nth-child(2) {\n    display: inline-block; /* So transformations work */\n    position: relative;\n    bottom: -1.2lh;\n    left: -50%;\n    transform: translate(50%);\n  }\n}</code></pre><p>Before going forward, both formulas are basically the same, but with different signs. We can rewrite them at once bringing one new variable:&nbsp;. It will be either&nbsp;&nbsp;or&nbsp;&nbsp;and define which direction to run the transition:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">h1 {\n  span {\n    display: inline-block;\n    position: relative;\n    bottom: calc(1.2lh * var(--direction));\n    left: calc(50% * var(--direction));\n    transform: translate(calc(-50% * var(--direction)));\n    }\n\n  span:nth-child(1) {\n    --direction: 1;\n  }\n\n  span:nth-child(2) {\n    --direction: -1;\n  }\n}\n</code></pre><p>The next step would be bringing&nbsp;&nbsp;into the formula so that the values change as the screen resizes. However, we can‚Äôt just multiply everything by&nbsp;. Why? Let‚Äôs see what happens if we do:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">span {\n  display: inline-block;\n  position: relative;\n  bottom: calc(var(--wideness) * 1.2lh * var(--direction));\n  left: calc(var(--wideness) * 50% * var(--direction));\n  transform: translate(calc(var(--wideness) * -50% * var(--direction)));\n}</code></pre><p>As you‚Äôll see, everything is backwards! The words wrap when the screen is too wide, and unwrap when the screen is too narrow:</p><p>Unlike our first examples, in which the transition ends as&nbsp;&nbsp;increases from  to , we want to complete the transition as&nbsp;&nbsp;decreases from  to , i.e. while the screen gets smaller the properties need to reach their end value. This isn‚Äôt a big deal, as we can rewrite our formula as a subtraction, in which the subtracting number gets bigger as&nbsp;&nbsp;increases:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">span {\n  display: inline-block;\n  position: relative;\n  bottom: calc((1.2lh - var(--wideness) * 1.2lh) * var(--direction));\n  left: calc((50% - var(--wideness) * 50%) * var(--direction));\n  transform: translate(calc((-50% - var(--wideness) * -50%) * var(--direction)));\n}</code></pre><p>And now everything moves in the right direction while resizing the screen!</p><p>However, you will notice how words move in a straight line and some words overlap while resizing. We can‚Äôt allow this since a user with a specific screen size may get stuck at that point in the transition. Viewport transitions are cool, but not at the expense of ruining the experience for certain screen sizes.</p><p>Instead of moving in a straight line, words should move in a curve such that they pass around the central word. Don‚Äôt worry, making a curve here is easier than it looks: just move the spans twice as fast in the x-axis as they do in the y-axis. This can be achieved by multiplying&nbsp;&nbsp;by , although we have to cap it at  so it doesn‚Äôt overshoot past the final value.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">span {\n display: inline-block;\n position: relative;\n bottom: calc((1.2lh - var(--wideness) * 1.2lh) * var(--direction));\n left: calc((50% - min(var(--wideness) * 2, 1) * 50%) * var(--direction));\n transform: translate(calc((-50% - min(var(--wideness) * 2, 1) * -50%) * var(--direction)));\n}</code></pre><p>Look at that beautiful curve, just avoiding the central text:</p><h3>This is just the beginning!</h3><p>It‚Äôs surprising how powerful having the viewport as an integer can be, and what‚Äôs even crazier, the last example is one of the most basic transitions you could make with this typecasting hack. Once you do the initial setup, I can imagine a lot more possible transitions, and  is so useful, it‚Äôs like having a new CSS feature right now.</p><p>I expect to see more about ‚ÄúViewport Transitions‚Äù in the future because they do make websites feel more ‚Äúalive‚Äù than adaptive.</p>","contentLength":9641,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"This Week In React #221: State of React, React Router, Rsbuild, ProseMirror, Redux, React Hook Form, Base UI, RSC, React Admin | AI & RN, Expo, Strict DOM, Polygen, Ignite, New Arch, Radon, macOS, Universal RSC, Gesture Handler | TypeScript, Prettier, esbuild...","url":"https://thisweekinreact.com/newsletter/221","date":1739318400,"author":"","guid":605,"unread":true,"content":"<p>Cyril and Matthieu from <a href=\"https://apps.theodo.com/en?utm_source=thisweekinreact\" target=\"_blank\" rel=\"noopener noreferrer\">Theodo Apps</a> here üëã, standing in for Seb to bring you the latest news from React and React Native!</p><p>This week we‚Äôve been carefully reading the <a href=\"https://2024.stateofreact.com/\" target=\"_blank\" rel=\"noopener noreferrer\">State of React 2024</a> survey results, and also found quite a few interesting articles. Things have been quieter when it comes to new releases.</p><p>Check our partner conf <a href=\"https://appjs.co/?utm_source=thisweekinreact\" target=\"_blank\" rel=\"noopener noreferrer\">App.js</a>, happening May 28-30 in üáµüá± Krak√≥w! The biggest React Native and Expo-focused conference gives us a 15% discount with code \"TWIR\". Want to <a href=\"https://docs.google.com/forms/u/1/d/e/1FAIpQLSeKSqxwrTdJJavOFgK-UA25K-hJPmZ5wnZDY7UUo9ULDuckkA/viewform?usp=send_form\" target=\"_blank\" rel=\"noopener noreferrer\">submit a talk</a>? Hurry‚ÄîCFP is closing soon!</p><p>As always, thanks for supporting us on your favorite platform:</p><p>When you wake up in the morning how many different yaml files do you want to manage? With EAS Workflows, you have .</p><p>‚Ä¢ Automate builds‚Ä¢ Run e2e tests‚Ä¢ Submit to stores<p>‚Ä¢ GitHub triggers, lint checks, slack notifications...so much more</p></p><p>With EAS Workflows you can  all your builds/updates/submissions. Package up all the commands in a workflow and go drink a coffee. You deserve it.</p><p>The results of State of React 2024 are out. It is a gold mine of information and we can‚Äôt possibly talk about everything here but here are a few highlights:</p><ul><li>Of the ‚Äúnew‚Äù React features, Server Components are the most popular with 40% of the ~7000 respondents having ‚Äúused it‚Äù, probably thanks to Next.js‚Ä¶</li><li> is the most disliked React API, and is going away!</li><li>Have you heard about React‚Äôs Taint API? It looks like 80% of React devs have not, which is understandable since it‚Äôs experimental.</li><li>There‚Äôs not that much movement in the #1 spot: Next.js, TanStack Query, Axios, Jest, and Zod are still the most frequently used.</li><li>A few rising stars: Zustand and Vitest got more users, TanStack Start is #1 in interest even though almost no one has used it yet.</li></ul><p>Deploying Next.js apps on Vercel is easy, but optimizing hosting costs? That‚Äôs a different story.</p><p>Join Chris Lojniewski and Jakub Dakowicz of Pagepro on  for a deep analysis of Vercel cost optimization strategies. Learn how to identify what drives your costs and reduce them with  like adjusting prefetching to avoid excessive function calls, choosing proper rendering methods, and trimming unnecessary data transfers.</p><p>They‚Äôll also show you how to <strong>minimize reliance on Vercel‚Äôs premium features</strong> with feature externalization - offloading analytics, image optimization, and password protection. Plus, they‚Äôll break down when enterprise pricing is worth considering and when you‚Äôre better off with alternatives. .</p><p>We don't talk too much about LLMs in this newsletter (we guess you already hear about it more than enough üòÖ) but with all the announcements this week we thought it was a good time to give you an update.</p><p>The big news:  to add (React-)Native mobile apps support to Bolt. Right now you can preview your AI-generated apps on the web, but you need to download the code to go further. They plan to add an integration with EAS to deploy to production in the future.</p><p>Some competitors also had things to announce:</p>","contentLength":2956,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Micro Frontends with Angular and Native Federation","url":"https://blog.angular.dev/micro-frontends-with-angular-and-native-federation-7623cfc5f413?source=rss----447683c3d9a3---4","date":1739199751,"author":"Manfred Steyer","guid":770,"unread":true,"content":"<p>Enterprise-scale software systems are often implemented by several cross-functional teams. To enable such teams to provide new features efficiently, it is desirable to minimize the need for coordination between them. This calls for a modularization that verticalizes the system into low-coupled areas individual teams can take care&nbsp;of.</p><p>There are several possibilities for implementing such high-level modules (also called verticals). For instance, they can be implemented using a respective folder structure or in the form of several libraries in a Monorepo. Micro Frontends go one step further and designate a separate application for each vertical. This architectural style promises several advantages, such as a high amount of team autonomy, but it also comes with numerous challenges.</p><p>The first part of this article provides a critical overview of the benefits and drawbacks of Micro Frontends in the space of single-page applications. The second part discusses how such an architecture can be implemented with Native Federation, a community project built upon web standards that provide close integration with the Angular&nbsp;CLI.</p><h3>Motivation Behind Micro Frontends</h3><p>Like Micro Services, Micro Frontends promise several advantages, both technically and with respect to the organization. As applying Micro Frontend architectures results in several smaller applications, testing, performance tuning, and isolating faults in one part of the overarching system becomes more effortless, according to several&nbsp;sources.</p><p>However, the increased team autonomy was the main reason for applying this architectural style in the numerous cases I was involved in as a consultant. Individual teams are not blocked by waiting for other teams and can deploy separately anytime. This might not be a significant concern in a vast number of projects. Still, as soon as we talk about multi-team projects in a corporate environment with long communication paths and decision times, this aspect quickly becomes vital for the project‚Äôs success.</p><p>Teams can also make their own decisions that best fit their goals‚Ää‚Äî‚Ääarchitecturally and technology-wise. Mixing multiple client-side frameworks in the same application is considered an anti-pattern and should be avoided. However, it can help to create a migration path over to a new stack in the long run. The concern in corporate environments is that we find software solutions that usually outlive the average technology stack</p><p>Since Micro Frontends result in separate build processes, combining them with incremental builds, where only changed applications need to be rebuilt, has a massive potential for build-time improvements. For instance, the well-known <a href=\"https://nx.dev/\">Nx build system</a> provides this option. Interestingly, this feature can also be used without applying other aspects such as aligning teams with individual applications or separate deployments. There is debate about whether leveraging this tempting option automatically leads to micro frontend architectures.</p><p>A system consisting of several smaller applications can provide further organizational advantages: It‚Äôs easier to onboard new members and scale the development by adding further micro frontends. Team autonomy also leads to faster release&nbsp;cycles.</p><h3>Challenges to keep in&nbsp;mind</h3><p>Every architectural decision has consequences that need to be evaluated, and Micro Frontends are no exception. Besides the positive consequences outlined above, there are also several negative ones to consider.</p><p>For instance, individually developed Micro Frontends can diverge in UI/UX, leading to an inconsistent appearance. Also, loading several applications increases the number of bundles that need to be downloaded, adversely affecting loading times and increasing the memory pressure.</p><p>Splitting an application into low-coupled parts might be a best practice in general. However, it is often hard to define the boundaries between verticals clearly enough to implement them as individual applications. Also, while having several small applications at first glance simplifies the implementation, integrating them into an overarching solution brings additional complexity.</p><p>This leads to one of the biggest challenges I have seen in practice: we are moving away from a compile-time integration towards a runtime integration. This has severe consequences because we cannot easily foresee problems that might arise when individually developed and deployed applications start interacting at runtime. Besides the chance of technical conflicts, we also have to see that the current generation of SPA frameworks has not been built with such an operation mode in&nbsp;mind.</p><p>Instead, modern SPA frameworks, especially Angular, have been developed to focus on compile time optimizations. A powerful compiler leverages type checks to identify technical conflicts and emits efficient source code optimized for tree-shaking. Furthermore, the CLI in the Angular space provides a highly optimized build process. An off-label usage necessary for implementing Micro Frontends undermines some of these achievements.</p><h3>Angular Does Not Officially Support Micro Frontends</h3><p>For all the outlined reasons, the Angular team recommends checking if alternatives, like implementing the individual verticals in Monorepos, which can be compiled together, are suitable. For instance, Google adopted this approach years ago and manages all its products and libraries in a <a href=\"https://dl.acm.org/doi/10.1145/2854146\">single Monorepo</a>.</p><p>Of course, there are also ways to compensate for the disadvantages outlined here, and some of them, like establishing a design system to help with a consistent UI/UX or lazy loading individual system parts, might be needed in general. More details on such compensation strategies can be found in this <a href=\"https://www.angulararchitects.io/blog/consequences-of-micro-frontends-survey-results\">survey</a> of more than 150 Micro Frontend practitioners.</p><p>All architectural decisions have benefits and drawbacks and should be evaluated with those considerations if you are going to implement a solution. If such an evaluation reveals that Micro Frontends provide more advantages than alternatives for achieving your very goals, the following sections provide you a well-lit path for implementing this architectural pattern with&nbsp;Angular.</p><h3>Micro Frontends with Federation</h3><p><a href=\"https://module-federation.io/\">Module Federation</a> is a popular technology for implementing Micro Frontends and sharing dependencies. Shipped initially with webpack 5, it comes with a tooling-agnostic runtime and provides compile-time integration into  and . Besides the usage of the vite dev server, these technologies are currently not supported by the Angular CLI. However, promising community solutions like <a href=\"https://angular-rspack.dev/\"></a>and <a href=\"https://analogjs.org/\">AnalogJS</a> allow them to be used with Angular. <a href=\"https://nx.dev/\">Nx</a> and my <a href=\"https://www.npmjs.com/package/@angular-architects/module-federation\">CLI-plugin</a> provide an effortless integration.</p><p>Module Federation enables an application to load parts of other separately built and deployed applications lazily. The loading application is referred to as the host; the integrated ones are called&nbsp;remotes:</p><p>Federation, if permitted by the library version, can share dependencies like Angular or RxJS between the host and remotes. There are several configuration options for <a href=\"https://www.angulararchitects.io/blog/getting-out-of-version-mismatch-hell-with-module-federation/\">preventing version mismatches.</a> Since MF can only decide which dependencies to share at runtime, tree-shaking for shared parts is not possible.</p><p>To inform the host about the remotes and their shared dependencies, Module Federation creates a metadata file, the so-called remote entry, during the build. This file needs to be loaded into the&nbsp;host.</p><p>To fully decouple the idea of Federation from specific bundlers, I started the project <a href=\"https://www.npmjs.com/package/@angular-architects/native-federation\">Native Federation</a> several years ago. Its API surface is very similar to that of Module Federation. The focus is on portability and standards like ECMAScript modules and Import Maps. Its compile time acts as a wrapper around existing bundlers. For the communication with the bundler, it uses an exchangeable adapter:</p><p>The integration into the Angular CLI directly delegates to Angular‚Äôs  that leverages the fast bundler esbuild, and is the foundation for several current features like partial hydration. Because of its architecture, Native Federation can also be ported to further builders or other innovations the CLI might provide in the long&nbsp;run.</p><p>For integrating Micro Frontends built with Angular‚Äôs webpack-based builder, there is a <a href=\"https://www.angulararchitects.io/blog/combining-native-federation-and-module-federation/\">bridging solution</a> allowing the loading of such remotes into a Native Federation host. This solution enables the gradual adoption of the CLI‚Äôs new  and permits the sharing of dependencies between the two kinds of Federation. One of the features added recently is support for <a href=\"https://www.angulararchitects.io/blog/ssr-and-hydration-with-native-federation-for-angular/\">SSR and Hydration</a>, which is vital for performance-critical applications like public portals and web&nbsp;shops.</p><p>Native Federation for Angular is close to the CLI‚Äôs , but its compilation mode is for shared dependencies differs. While it works well for packages that align with <a href=\"https://angular.dev/tools/libraries/angular-package-format\">Angular‚Äôs Package Format</a>, which is the case for all libraries built with the CLI, other libraries might provide some challenges, especially older ones that still use CommonJS or older conventions for providing metadata.</p><h3>Using Native Federation in&nbsp;Angular</h3><p>For the setup Native Federation provides a schematic:</p><pre>ng add @angular-architects/native-federation --project mfe1 --port 4201 --type remote</pre><p>The switch  defines the kind of the application. Possible options are , , and . The latter is a host configured with a configuration file (federation manifest) during application start. This manifest informs the application of the locations of the remotes and can be switched out by another manifest during deployment:</p><pre>{    \"mfe1\" : \"http://localhost:4201/remoteEntry.json\"</pre><p>The key, in this case, is a short name the host uses to refer to the Micro Frontend. The value is the location of the remote entry with the metadata mentioned above. Alternatively, the manifest can be replaced by a service that informs the host of the current location of all deployed remotes and acts as a Micro Frontend registry.</p><p>The schematic configures the Native Federation builder delegation to the  and creates a configuration file :</p><pre>const { withNativeFederation, shareAll }     = require('@angular-architects/native-federation/config');<p>module.exports = withNativeFederation({</p>    './Component': './projects/mfe1/src/app/app.component.ts',    ...shareAll({}),    'rxjs/ajax',    'rxjs/testing',    // Add further packages you don't need at runtime</pre><p>The configuration assigns a unique name to the remote or host and defines which dependencies to share. Instead of providing an exhaustive list of all the dependencies to share, the configuration uses the helper function , which adds all dependencies found in the project‚Äôs . The skip list is used to opt out of sharing some of them or their secondary entry&nbsp;points.</p><p>Remotes also define exposed EcmaScript modules that can be loaded into the shell. For this, the  node maps the paths of the modules to short names such as&nbsp; in the example&nbsp;shown.</p><p>The schematic also adds code to initialize Native Federation to the . For the host, this code points to the federation manifest:</p><pre>import { initFederation } from '@angular-architects/native-federation';<p>initFederation('federation.manifest.json')</p>  .catch(err =&gt; console.error(err))<p>  .then(_ =&gt; import('./bootstrap'))</p>  .catch(err =&gt; console.error(err));</pre><p>After initializing federation, the file , also created by the schematic, is loaded. It contains the usual code for bootstrapping Angular, e.g., via  when the application uses Standalone Components.</p><p>To load a component or routing configuration exposed by a remote, traditional lazy loading is combined with Native Federation‚Äôs  function:</p><pre>import { loadRemoteModule } from '@angular-architects/native-federation';<p>export const APP_ROUTES: Routes = [</p>  [...]    path: 'flights',      loadRemoteModule('mfe1', './Component').then((m) =&gt; m.AppComponent),];</pre><p>Here,  is the key defined in the manifest, and&nbsp; points to the respective exposed module in the remote‚Äôs federation configuration.</p><p>More information on Native Federation can be found in this <a href=\"https://www.angulararchitects.io/blog/micro-frontends-with-modern-angular-part-1-standalone-and-esbuild/\">blog article</a> and in the project‚Äôs <a href=\"https://www.npmjs.com/package/@angular-architects/native-federation\">readme</a>, which also links to a tutorial.</p><p>Micro Frontends promise significant advantages for enterprise-scale applications, such as enhanced team autonomy and independent deployment. These benefits make this architectural style particularly appealing in multi-team corporate environments where streamlined communication and rapid development cycles are critical. Additionally, they support gradual migration to new technologies and optimize build times by leveraging incremental builds.</p><p>However, these advantages come with trade-offs. Micro Frontends can lead to inconsistent UI/UX, increased load times, and complex runtime integrations. Defining clear vertical boundaries and managing inter-application communication add to the challenge. Furthermore, frameworks like Angular, designed for compile-time optimization, face limitations in runtime integration scenarios. The Angular team, therefore, recommends alternatives such as splitting an application into libraries managed within a Monorepo, which aligns better with Angular‚Äôs strengths in type safety and efficient compilation.</p><p>Module Federation has emerged as a popular solution to address some challenges by enabling lazy loading and dependency sharing. Native Federation builds on these concepts with a focus on standards and portability. It provides a seamless integration into the Angular CLI and its performant esbuild-based , which is also the foundation for advanced features like SSR and hydration.</p><p><em>Together with this team at </em><a href=\"http://www.angulararchitects.io\"></a>,<em> Manfred Steyer helps companies around the globe establish maintainable Angular-based Architectures. He is a trainer, consultant, and Google Developer Expert (GDE) and writes for O‚ÄôReilly, the German Java Magazin, windows.developer, and Heise Developer. Furthermore, he regularly speaks at conferences.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7623cfc5f413\" width=\"1\" height=\"1\" alt=\"\">","contentLength":13726,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Organizing Design System Component Patterns With CSS Cascade Layers","url":"https://css-tricks.com/organizing-design-system-component-patterns-with-css-cascade-layers/","date":1739196412,"author":"Ryan Trimble","guid":567,"unread":true,"content":"<p>I‚Äôm trying to come up with ways to make components more customizable, more efficient, and easier to use and understand, and I want to describe a pattern I‚Äôve been leaning into using <a href=\"https://css-tricks.com/css-cascade-layers/\">CSS Cascade Layers</a>.</p><p>I enjoy organizing code and find cascade layers a fantastic way to organize code explicitly as the cascade looks at it. The neat part is, that as much as it helps with ‚Äútop-level‚Äù organization, cascade layers can be nested, which allows us to author more precise styles based on the cascade.</p><p>The only downside here is your imagination, nothing stops us from over-engineering CSS. And to be clear, you may very well consider what I‚Äôm about to show you as a form of over-engineering. I think I‚Äôve found a balance though, keeping things simple yet organized, and I‚Äôd like to share my findings.</p><p>Let‚Äôs explore a pattern for writing components in CSS using a button as an example. Buttons are one of the more popular components found in just about every component library. There‚Äôs good reason for that popularity because buttons can be used for a variety of use cases, including:</p><ul><li>performing actions, like opening a drawer,</li><li>navigating to different sections of the UI, and</li><li>holding some form of state, such as  or .</li></ul><p>And buttons come in several different flavors of markup, like , , and . There are even more ways to make buttons than that, if you can believe it.</p><p>On top of that, different buttons perform different functions and are often styled accordingly so that a button for one type of action is distinguished from another. Buttons also respond to state changes, such as when they are hovered, active, and focused. If you have ever written CSS with the <a href=\"https://css-tricks.com/bem-101/\">BEM syntax</a>, we can sort of think  within the context of cascade layers.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.button {}\n.button-primary {}\n.button-secondary {}\n.button-warning {}\n/* etc. */</code></pre><p>Okay, now, let‚Äôs write some code. Specifically, let‚Äôs create a few different types of buttons. We‚Äôll start with a  class that we can set on any element that we want to be styled as, well, a button! We already know that buttons come in different flavors of markup, so a generic  class is the most reusable and extensible way to select one or all of them.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.button {\n  /* Styles common to all buttons */\n}</code></pre><p>This is where we can insert our very first cascade layer! Remember, the reason we want a cascade layer in the first place is that it allows us to set the CSS Cascade‚Äôs reading order when evaluating our styles. We can tell CSS to evaluate one layer first, followed by another layer, then another ‚Äî all according to the order we want. This is an incredible feature that grants us superpower control over which styles ‚Äúwin‚Äù when applied by the browser.</p><p>We‚Äôll call this layer  because, well, buttons are a type of component. What I like about this naming is that it is generic enough to support other components in the future as we decide to expand our design system. It scales with us while maintaining a nice separation of concerns with other styles we write down the road that maybe aren‚Äôt specific to components.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Components top-level layer */\n@layer components {\n  .button {\n    /* Styles common to all buttons */\n  }\n}</code></pre><p>Here is where things get a little weird. Did you know you can  cascade layers  classes? That‚Äôs totally a thing. So, check this out, we can introduce a new layer <em>inside the  class that‚Äôs already inside its own layer</em>. Here‚Äôs what I mean:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Components top-level layer */\n@layer components {\n\n  .button {\n    /* Component elements layer */\n    @layer elements {\n      /* Styles */\n    }\n  }\n}</code></pre><p>This is how the browser interprets that layer within a layer at the end of the day:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@layer components {\n  @layer elements {\n    .button {\n      /* button styles... */\n    }\n  }\n}</code></pre><p>So far, we‚Äôve established a  class inside of a cascade layer that‚Äôs designed to hold any type of  in our design system. Inside that  is another cascade layer, this one for selecting the different types of buttons we might encounter in the markup. We talked earlier about buttons being , , or  and this is how we can individually select style each type.</p><p>We can use the  pseudo-selector function as that is akin to saying, ‚ÄúIf this  an  element, then apply these styles.‚Äù</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Components top-level layer */\n@layer components {\n  .button {\n    /* Component elements layer */\n    @layer elements {\n      /* styles common to all buttons */\n\n      &amp;:is(a) {\n        /* &lt;a&gt; specific styles */\n      }\n\n      &amp;:is(button) {\n        /* &lt;button&gt; specific styles */\n      }\n\n      /* etc. */\n    }\n  }\n}</code></pre><h3>Defining default button styles</h3><p>I‚Äôm going to fill in our code with the common styles that apply to all buttons. These styles sit at the top of the  layer so that they are applied to any and all buttons, regardless of the markup. Consider them default button styles, so to speak.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Components top-level layer */\n@layer components {\n  .button {\n    /* Component elements layer */\n    @layer elements {\n      background-color: darkslateblue;\n      border: 0;\n      color: white;\n      cursor: pointer;\n      display: grid;\n      font-size: 1rem;\n      font-family: inherit;\n      line-height: 1;\n      margin: 0;\n      padding-block: 0.65rem;\n      padding-inline: 1rem;\n      place-content: center;\n      width: fit-content;\n    }\n  }\n}</code></pre><h3>Defining button state styles</h3><p>What should our default buttons do when they are hovered, clicked, or in focus? These are the different  that the button might take when the user interacts with them, and we need to style those accordingly.</p><p>I‚Äôm going to create a new cascade sub-layer directly under the  sub-layer called, creatively, :</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Components top-level layer */\n@layer components {\n  .button {\n    /* Component elements layer */\n    @layer elements {\n      /* Styles common to all buttons */\n    }\n\n    /* Component states layer */\n    @layer states {\n      /* Styles for specific button states */\n    }\n  }\n}</code></pre><p>Pause and reflect here. What states should we target? What do we want to change for each of these states?</p><p>Some states may share similar property changes, such as  and  having the same background color. Luckily, CSS gives us the tools we need to tackle such problems, using the  function to group property changes based on the state. Why  instead of ? <strong> comes with zero specificity</strong>, meaning it‚Äôs a lot easier to override than , which takes the specificity of the element with the highest specificity score in its arguments. Maintaining low specificity is a virtue when it comes to writing scalable, maintainable CSS.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Component states layer */\n@layer states {\n  &amp;:where(:hover, :focus-visible) {\n    /* button hover and focus state styles */\n  }\n}</code></pre><p>But how do we update the button‚Äôs styles in a  way? What I mean by that is how do we make sure that the button  like it‚Äôs hovered or in focus? We could just slap a new background color on it, but ideally, the color should be related to the  set in the  layer.</p><p>So, let‚Äôs refactor things a bit. Earlier, I set the  element‚Äôs  to . I want to reuse that color, so it behooves us to make that into a CSS variable so we can update it once and have it apply everywhere. Relying on variables is yet another virtue of writing scalable and maintainable CSS.</p><p>I‚Äôll create a new variable called <code>--button-background-color</code> that is initially set to  and then set it on the default button styles:</p><pre rel=\"CSS\" data-line=\"3,5\"><code markup=\"tt\">/* Component elements layer */\n@layer elements {\n  --button-background-color: darkslateblue;\n\n  background-color: var(--button-background-color);\n  border: 0;\n  color: white;\n  cursor: pointer;\n  display: grid;\n  font-size: 1rem;\n  font-family: inherit;\n  line-height: 1;\n  margin: 0;\n  padding-block: 0.65rem;\n  padding-inline: 1rem;\n  place-content: center;\n  width: fit-content;\n}</code></pre><p>Now that we have a color stored in a variable, we can set that same variable on the button‚Äôs hovered and focused states in our other layer, using the relatively new <a href=\"https://css-tricks.com/color-mixing-with-animation-composition/\"> function</a> to convert  to a lighter color when the button is hovered or in focus.</p><p>Back to our  layer! We‚Äôll first mix the color in a new CSS variable called :</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Component states layer */\n@layer states {\n  &amp;:where(:hover, :focus-visible) {\n    /* custom property only used in state */\n    --state-background-color: color-mix(\n      in srgb, \n      var(--button-background-color), \n      white 10%\n    );\n  }\n}</code></pre><p>We can then apply that color as the background color by updating the  property.</p><pre rel=\"CSS\" data-line=\"12\"><code markup=\"tt\">/* Component states layer */\n@layer states {\n  &amp;:where(:hover, :focus-visible) {\n    /* custom property only used in state */\n    --state-background-color: color-mix(\n      in srgb, \n      var(--button-background-color), \n      white 10%\n    );\n\n    /* applying the state background-color */\n    background-color: var(--state-background-color);\n  }\n}</code></pre><h3>Defining modified button styles</h3><p>Along with  and  layers, you may be looking for some sort of variation in your components, such as . That‚Äôs because not all buttons are going to look like your default button. You might want one with a green background color for the user to confirm a decision. Or perhaps you want a red one to indicate danger when clicked. So, we can take our existing default button styles and modify them for those specific use cases </p><p>If we think about the order of the cascade ‚Äî always flowing from top to bottom ‚Äî we don‚Äôt want the modified styles to affect the styles in the states layer we just made. So, let‚Äôs add a new  layer in between  and :</p><pre rel=\"CSS\" data-line=\"10,11,12,13\"><code markup=\"tt\">/* Components top-level layer */\n@layer components {\n\n  .button {\n  /* Component elements layer */\n  @layer elements {\n    /* etc. */\n  }\n\n  /* Component modifiers layer */\n  @layer modifiers {\n    /* new layer! */\n  }\n\n  /* Component states layer */\n  @layer states {\n    /* etc. */\n  }\n}</code></pre><p>Similar to how we handled , we can now update the <code>--button-background-color</code> variable for each button modifier. We could modify the styles further, of course, but we‚Äôre keeping things fairly straightforward to demonstrate how this system works.</p><p>We‚Äôll create a new class that modifies the  of the default button from  to . Again, we can rely on the  selector because we want the added specificity in this case. That way, we override the default button style with the modifier class. We‚Äôll call this class  (green is a ‚Äúsuccessful‚Äù color) and feed it to :</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Component modifiers layer */\n@layer modifiers {\n  &amp;:is(.success) {\n    --button-background-color: darkgreen;\n  }\n}</code></pre><p>If we add the  class to one of our buttons, it becomes  instead  which is exactly what we want. And since we already do some -ing in the  layer, we‚Äôll automatically inherit those hover and focus styles, meaning  is lightened in those states.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Components top-level layer */\n@layer components {\n  .button {\n    /* Component elements layer */\n    @layer elements {\n      --button-background-color: darkslateblue;\n\n      background-color: var(--button-background-color);\n      /* etc. */\n\n    /* Component modifiers layer */\n    @layer modifiers {\n      &amp;:is(.success) {\n        --button-background-color: darkgreen;\n      }\n    }\n\n    /* Component states layer */\n    @layer states {\n      &amp;:where(:hover, :focus) {\n        --state-background-color: color-mix(\n          in srgb,\n          var(--button-background-color),\n          white 10%\n        );\n\n        background-color: var(--state-background-color);\n      }\n    }\n  }\n}</code></pre><p>We can refactor any CSS property we need to modify into a CSS custom property, which gives us a lot of room for customization.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Components top-level layer */\n@layer components {\n  .button {\n    /* Component elements layer */\n    @layer elements {\n      --button-background-color: darkslateblue;\n\n      --button-border-width: 1px;\n      --button-border-style: solid;\n      --button-border-color: transparent;\n      --button-border-radius: 0.65rem;\n\n      --button-text-color: white;\n\n      --button-padding-inline: 1rem;\n      --button-padding-block: 0.65rem;\n\n      background-color: var(--button-background-color);\n      border: \n        var(--button-border-width) \n        var(--button-border-style) \n        var(--button-border-color);\n      border-radius: var(--button-border-radius);\n      color: var(--button-text-color);\n      cursor: pointer;\n      display: grid;\n      font-size: 1rem;\n      font-family: inherit;\n      line-height: 1;\n      margin: 0;\n      padding-block: var(--button-padding-block);\n      padding-inline: var(--button-padding-inline);\n      place-content: center;\n      width: fit-content;\n    }\n\n    /* Component modifiers layer */\n    @layer modifiers {\n      &amp;:is(.success) {\n        --button-background-color: darkgreen;\n      }\n\n      &amp;:is(.ghost) {\n        --button-background-color: transparent;\n        --button-text-color: black;\n        --button-border-color: darkslategray;\n        --button-border-width: 3px;\n      }\n    }\n\n    /* Component states layer */\n    @layer states {\n      &amp;:where(:hover, :focus) {\n        --state-background-color: color-mix(\n          in srgb,\n          var(--button-background-color),\n          white 10%\n        );\n\n        background-color: var(--state-background-color);\n      }\n    }\n  }\n}</code></pre><p>P.S. Look closer at that demo and check out how I‚Äôm adjusting the button‚Äôs background using  ‚Äî then go read Sara Joy‚Äôs <a href=\"https://css-tricks.com/come-to-the-light-dark-side/\">‚ÄúCome to the  Side‚Äù</a> for a thorough rundown of how that works!</p><p>What do you think? Is this something you would use to organize your styles? I can see how creating a system of cascade layers could be overkill for a small project with few components. But even a little toe-dipping into things like we just did illustrates how much power we have when it comes to managing ‚Äî and even taming ‚Äî the CSS Cascade. Buttons are deceptively complex but we saw how few styles it takes to handle everything from the default styles to writing the styles for their states and modified versions.</p>","contentLength":13732,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Make Any File a Template Using This Hidden macOS Tool","url":"https://css-tricks.com/make-any-file-a-template-using-this-hidden-macos-tool/","date":1739195640,"author":"Geoff Graham","guid":566,"unread":true,"content":"<blockquote><p>Stationery Pad is a handy way to nix a step in your workflow if you regularly use document templates on your Mac. The long-standing Finder feature essentially tells a file‚Äôs parent application to open a copy of it by default, ensuring that the original file remains unedited.</p></blockquote><p>This works for any kind of file, including HTML, CSS, JavaScriprt, or what have you. You can get there with + or right-click and select ‚ÄúGet info.‚Äù</p>","contentLength":428,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"TypeScript: extracting parts of composite types via infer","url":"https://2ality.com/2025/02/typescript-infer-operator.html","date":1739145600,"author":"Dr. Axel Rauschmayer","guid":351,"unread":true,"content":"<p>In this blog post, we explore how we can extract parts of composite types via the  operator.</p><p>It helps if you are loosely familiar with conditional types. You can check out section <a href=\"https://exploringjs.com/tackling-ts/ch_computing-with-types-overview.html#conditional-types\">‚ÄúConditional types‚Äù</a> in ‚ÄúTackling TypeScript‚Äù&nbsp;to read up on them.</p>","contentLength":252,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"TypeDoc: testing code examples in doc comments","url":"https://2ality.com/2025/02/testing-typedoc-examples.html","date":1739059200,"author":"Dr. Axel Rauschmayer","guid":350,"unread":true,"content":"<p>TypeDoc now lets us refer to parts of other files via . In this blog post, I explain how that works and why it‚Äôs useful.</p>","contentLength":122,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"TypeScript: the satisfies operator","url":"https://2ality.com/2025/02/satisfies-operator.html","date":1738972800,"author":"Dr. Axel Rauschmayer","guid":349,"unread":true,"content":"<p>TypeScript‚Äôs  operator lets us check the type of a value (mostly) without influencing it. In this blog post, we examine how exactly it works and where it‚Äôs useful.</p>","contentLength":167,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Oracle dabbles in some JavaScript comedy","url":"https://javascriptweekly.com/issues/722","date":1738886400,"author":"","guid":600,"unread":true,"content":"<li><p>üç™ <a href=\"https://javascriptweekly.com/link/165495/rss\">CookieConsent 3.1</a> ‚Äì A lightweight, pure JS, GDPR-compliant cookie consent mechanism with which to  meet regulatory&nbsp;requirements.</p></li><li><p><a href=\"https://javascriptweekly.com/link/165496/rss\">Happy DOM 17.0</a> ‚Äì Cross-runtime JS implementation of a web browser &nbsp;UI. Now supports ES&nbsp;modules.</p></li><li><p><a href=\"https://javascriptweekly.com/link/165498/rss\">get-value 4.0</a> ‚Äì Use property paths () get a nested value from an object.</p></li><li><p><a href=\"https://javascriptweekly.com/link/165499/rss\">mp4-muxer 5.2</a> ‚Äì MP4 multiplexer in pure TypeScript with support for the WebCodecs API, video and&nbsp;audio.</p></li><li><p><a href=\"https://javascriptweekly.com/link/165503/rss\">Wasp 0.16</a> ‚Äì <a href=\"https://javascriptweekly.com/link/165504/rss\">Wasp</a> is a Rails-like framework using Node, React &amp;&nbsp;Prisma.</p></li><li><p><a href=\"https://javascriptweekly.com/link/165507/rss\">RxDB 16.5</a> ‚Äì Offline-first, reactive database for JS&nbsp;apps.</p></li>","contentLength":548,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Container query units: cqi and cqb","url":"https://css-tricks.com/container-query-units-cqi-and-cqb/","date":1738855775,"author":"Geoff Graham","guid":565,"unread":true,"content":"<p>A little <a href=\"https://html-css-tip-of-the-week.netlify.app/tip/cqi-and-cqb/\" rel=\"noopener\">gem</a> from Kevin Powell‚Äôs <a href=\"https://html-css-tip-of-the-week.netlify.app\" rel=\"noopener\">‚ÄúHTML &amp; CSS Tip of the Week‚Äù</a> website, reminding us that using container queries opens up container query units for sizing things based on the size of the queried container.</p><blockquote><p>&nbsp;and&nbsp;&nbsp;are similar to&nbsp;&nbsp;and&nbsp;, but instead of caring about the viewport, they care about their containers size.</p><p>&nbsp;is your inline-size unit (usually width in horizontal writing modes), while&nbsp;handles block-size (usually height).</p></blockquote><p>So,  is equivalent to 1% of the container‚Äôs  size, and  is equal to 1% of the container‚Äôs  size. I‚Äôd be remiss not to mention the  and  units, which evaluate either the container‚Äôs inline  block size. So, we could say  and that equals 50% of the container‚Äôs size, but it will look at both the container‚Äôs inline and block size, determine which is greater, and use that to calculate the final computed value.</p><p>That‚Äôs a nice dash of conditional logic. It can help maintain proportions if you think the writing mode might change on you, such as moving from horizontal to vertical.</p>","contentLength":1029,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Read-only accessibility in TypeScript","url":"https://2ality.com/2025/02/typescript-readonly.html","date":1738800000,"author":"Dr. Axel Rauschmayer","guid":348,"unread":true,"content":"<p>In this blog post, we look at how can make things ‚Äúread-only‚Äù in TypeScript ‚Äì mainly via the keyword .</p>","contentLength":108,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Baseline Status in a WordPress Block","url":"https://css-tricks.com/baseline-status-in-a-wordpress-block/","date":1738767498,"author":"Geoff Graham","guid":564,"unread":true,"content":"<p>Of course, we could simply drop the HTML component into the page. But I never know where we‚Äôre going to use something like this. The Almanac, obs. But I‚Äôm sure there are times where embedded it in other pages and posts makes sense.</p><p><strong>That‚Äôs exactly what WordPress blocks are good for.</strong> We can take an already reusable component and make it repeatable when working in the WordPress editor. So that‚Äôs what I did! That component you see up there is the <a href=\"https://github.com/web-platform-dx/baseline-status/tree/main\" rel=\"noopener\"> web component</a> formatted as a WordPress block. Let‚Äôs drop another one in just for kicks.</p><p>Pretty neat! I saw that <a href=\"https://pawelgrzybek.com/baseline-status-of-a-web-platform-feature-on-a-hugo-website/\" rel=\"noopener\">Pawel Grzybek made an equivalent for Hugo</a>. There‚Äôs an <a href=\"https://astro-embed.netlify.app/components/baseline-status/\" rel=\"noopener\">Astro equivalent</a>, too. Because I‚Äôm fairly green with WordPress block development I thought I‚Äôd write a bit up on how it‚Äôs put together. There are still rough edges that I‚Äôd like to smooth out later, but this is a good enough point to share the basic idea.</p><p>I used the  package to bootstrap and initialize the project. All that means is I ‚Äòd into the  directory from the command line and ran the install command to plop it all in there.</p><pre rel=\"Terminal\" data-line=\"\"><code markup=\"tt\">npm install @wordpress/create-block</code></pre><p>The  file is where the plugin is registered. And yes, it‚Äôs looks completely the same as it‚Äôs been for years, just not in a  file like it is for themes. The difference is that the  package does some lifting to register the widget so I don‚Äôt have to:</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">&lt;?php\n/**\n * Plugin Name:       Baseline Status\n * Plugin URI:        https://css-tricks.com\n * Description:       Displays current Baseline availability for web platform features.\n * Requires at least: 6.6\n * Requires PHP:      7.2\n * Version:           0.1.0\n * Author:            geoffgraham\n * License:           GPL-2.0-or-later\n * License URI:       https://www.gnu.org/licenses/gpl-2.0.html\n * Text Domain:       baseline-status\n *\n * @package CssTricks\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n  exit; // Exit if accessed directly.\n}\n\nfunction csstricks_baseline_status_block_init() {\n  register_block_type( __DIR__ . '/build' );\n}\nadd_action( 'init', 'csstricks_baseline_status_block_init' );\n\n?&gt;</code></pre><p>The real meat is in  directory.</p><p>The  package also did some filling of the blanks in the  file based on the onboarding process:</p><pre rel=\"JavaScript\" data-line=\"\"><code markup=\"tt\">{\n  \"$schema\": \"https://schemas.wp.org/trunk/block.json\",\n  \"apiVersion\": 2,\n  \"name\": \"css-tricks/baseline-status\",\n  \"version\": \"0.1.0\",\n  \"title\": \"Baseline Status\",\n  \"category\": \"widgets\",\n  \"icon\": \"chart-pie\",\n  \"description\": \"Displays current Baseline availability for web platform features.\",\n  \"example\": {},\n  \"supports\": {\n    \"html\": false\n  },\n  \"textdomain\": \"baseline-status\",\n  \"editorScript\": \"file:./index.js\",\n  \"editorStyle\": \"file:./index.css\",\n  \"style\": \"file:./style-index.css\",\n  \"render\": \"file:./render.php\",\n  \"viewScript\": \"file:./view.js\"\n}</code></pre><p>Going off some tutorials published right here on CSS-Tricks, I knew that WordPress blocks render twice ‚Äî once on the front end and once on the back end ‚Äî and there‚Äôs a file for each one in the  folder:</p><ul><li> Handles the front-end view</li><li> Handles the back-end view</li></ul><h3>The front-end and back-end markup</h3><p>Cool. I started with the  web component‚Äôs <a href=\"https://github.com/web-platform-dx/baseline-status/tree/main?tab=readme-ov-file#usage\" rel=\"noopener\">markup</a>:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;script src=\"https://cdn.jsdelivr.net/npm/baseline-status@1.0.8/baseline-status.min.js\" type=\"module\"&gt;&lt;/script&gt;\n&lt;baseline-status featureId=\"anchor-positioning\"&gt;&lt;/baseline-status&gt;</code></pre><p>I‚Äôd hate to inject that  every time the block pops up, so I decided to enqueue the file conditionally based on the block being displayed on the page. This is happening in the main  file which I treated sorta the same way as a theme‚Äôs  file. It‚Äôs just where helper functions go.</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">// ... same code as before\n\n// Enqueue the minified script\nfunction csstricks_enqueue_block_assets() {\n  wp_enqueue_script(\n    'baseline-status-widget-script',\n    'https://cdn.jsdelivr.net/npm/baseline-status@1.0.4/baseline-status.min.js',\n    array(),\n    '1.0.4',\n    true\n  );\n}\nadd_action( 'enqueue_block_assets', 'csstricks_enqueue_block_assets' );\n\n// Adds the 'type=\"module\"' attribute to the script\nfunction csstricks_add_type_attribute($tag, $handle, $src) {\n  if ( 'baseline-status-widget-script' === $handle ) {\n    $tag = '&lt;script type=\"module\" src=\"' . esc_url( $src ) . '\"&gt;&lt;/script&gt;';\n  }\n  return $tag;\n}\nadd_filter( 'script_loader_tag', 'csstricks_add_type_attribute', 10, 3 );\n\n// Enqueues the scripts and styles for the back end\nfunction csstricks_enqueue_block_editor_assets() {\n  // Enqueues the scripts\n  wp_enqueue_script(\n    'baseline-status-widget-block',\n    plugins_url( 'block.js', __FILE__ ),\n    array( 'wp-blocks', 'wp-element', 'wp-editor' ),\n    false,\n  );\n\n  // Enqueues the styles\n  wp_enqueue_style(\n    'baseline-status-widget-block-editor',\n    plugins_url( 'style.css', __FILE__ ),\n    array( 'wp-edit-blocks' ),\n    false,\n  );\n}\nadd_action( 'enqueue_block_editor_assets', 'csstricks_enqueue_block_editor_assets' );</code></pre><p>The final result bakes the script directly into the plugin so that it adheres to the <a href=\"https://developer.wordpress.org/plugins/wordpress-org/detailed-plugin-guidelines/#8-plugins-may-not-send-executable-code-via-third-party-systems\" rel=\"noopener\">WordPress Plugin Directory guidelines</a>. If that wasn‚Äôt the case, I‚Äôd probably keep the hosted script intact because I‚Äôm completely uninterested in maintaining it. Oh, and that <code>csstricks_add_type_attribute()</code> function is to help import the file as an ES module. There‚Äôs a  action available to hook into that should handle that, but I couldn‚Äôt get it to do the trick.</p><p>With that in hand, I can put the component‚Äôs markup into a template. The  file is where all the front-end goodness resides, so that‚Äôs where I dropped the markup:</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">&lt;baseline-status\n  &lt;?php echo get_block_wrapper_attributes(); ?&gt; \n  featureId=\"[FEATURE]\"&gt;\n&lt;/baseline-status&gt;</code></pre><p>That  thing is recommended by the WordPress docs as a way to output all of a block‚Äôs information for debugging things, such as which features it ought to support.</p><p>is a placeholder that will eventually tell the component which web platform to render information about. We may as well work on that now. I can register attributes for the component in :</p><pre rel=\"JavaScript\" data-line=\"\"><code markup=\"tt\">\"attributes\": { \"showBaselineStatus\": {\n  \"featureID\": {\n  \"type\": \"string\"\n  }\n},</code></pre><p>Now we can update the markup in  to echo the  when it‚Äôs been established.</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">&lt;baseline-status\n  &lt;?php echo get_block_wrapper_attributes(); ?&gt; \n  featureId=\"&lt;?php echo esc_html( $featureID ); ?&gt;\"&gt;\n&lt;/baseline-status&gt;</code></pre><p>There will be more edits to that markup a little later. But first, I need to put the markup in the  file so that the component renders in the WordPress editor when adding it to the page.</p><pre rel=\"JavaScript\" data-line=\"\"><code markup=\"tt\">&lt;baseline-status { ...useBlockProps() } featureId={ featureID }&gt;&lt;/baseline-status&gt;</code></pre><p> is the JavaScript equivalent of <code>get_block_wrapper_attibutes()</code> and can be good for debugging on the back end.</p><p>At this point, the block is fully rendered on the page when dropped in! The problems are:</p><ul><li>It‚Äôs not passing in the feature I want to display.</li></ul><p>I‚Äôll work on the latter first. That way, I can simply plug the right variable in there once everything‚Äôs been hooked up.</p><p>One of the nicer aspects of WordPress <a href=\"https://css-tricks.com/what-is-developer-experience-dx/\">DX</a> is that we have direct access to the same controls that WordPress uses for its own blocks. We import them and extend them where needed.</p><p>I started by importing the stuff in :</p><pre rel=\"JavaScript\" data-line=\"\"><code markup=\"tt\">import { InspectorControls, useBlockProps } from '@wordpress/block-editor';\nimport { PanelBody, TextControl } from '@wordpress/components';\nimport './editor.scss';</code></pre><p>This gives me a few handy things:</p><ul><li> are good for debugging.</li><li> are what can be debugged.</li><li> is the main wrapper for the block settings.</li><li> is the field I want to pass into the markup where  currently is.</li><li> provides styles for the controls.</li></ul><p>Before I get to the controls, there‚Äôs an  function needed to use as a wrapper for all the work:</p><pre rel=\"JavaScript\" data-line=\"\"><code markup=\"tt\">export default function Edit( { attributes, setAttributes } ) {\n  // Controls\n}</code></pre><p>First is  and the :</p><pre rel=\"JavaScript\" data-line=\"\"><code markup=\"tt\">export default function Edit( { attributes, setAttributes } ) {\n  // React components need a parent element\n  &lt;&gt;\n    &lt;InspectorControls&gt;\n      &lt;PanelBody title={ __( 'Settings', 'baseline-status' ) }&gt;\n      // Controls\n      &lt;/PanelBody&gt;\n    &lt;/InspectorControls&gt;\n  &lt;/&gt;\n}</code></pre><pre rel=\"JavaScript\" data-line=\"\"><code markup=\"tt\">export default function Edit( { attributes, setAttributes } ) {\n  &lt;&gt;\n    &lt;InspectorControls&gt;\n      &lt;PanelBody title={ __( 'Settings', 'baseline-status' ) }&gt;\n        // Controls\n        &lt;TextControl\n          label={ __(\n            'Feature', // Input label\n            'baseline-status'\n          ) }\n          value={ featureID || '' }\n          onChange={ ( value ) =&gt;\n            setAttributes( { featureID: value } )\n          }\n        /&gt;\n     &lt;/PanelBody&gt;\n    &lt;/InspectorControls&gt;\n  &lt;/&gt;\n}</code></pre><ul><li>Block settings with a text input</li><li>All the logic for handling state</li></ul><p>Oh yeah! Can‚Äôt forget to define the  variable because that‚Äôs what populates in the component‚Äôs markup. Back in :</p><pre rel=\"JavaScript\" data-line=\"\"><code markup=\"tt\">const { featureID } = attributes;</code></pre><p>In short: The feature‚Äôs ID is what constitutes the block‚Äôs attributes. Now I need to register that attribute so the block recognizes it. Back in  in a new section:</p><pre rel=\"JavaScript\" data-line=\"\"><code markup=\"tt\">\"attributes\": {\n  \"featureID\": {\n    \"type\": \"string\"\n  }\n},</code></pre><p>Pretty straightforward, I think. Just a single text field that‚Äôs a string. It‚Äôs at this time that I can  wire it up to the front-end markup in :</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">&lt;baseline-status\n  &lt;?php echo get_block_wrapper_attributes(); ?&gt;\n  featureId=\"&lt;?php echo esc_html( $featureID ); ?&gt;\"&gt;\n&lt;/baseline-status&gt;</code></pre><p>I struggled with this more than I care to admit. I‚Äôve dabbled with styling the Shadow DOM but only academically, so to speak. This is the first time I‚Äôve attempted to style a web component with Shadow DOM parts on something being used in production.</p><p>If you‚Äôre new to Shadow DOM, the basic idea is that it prevents styles and scripts from ‚Äúleaking‚Äù in or out of the component. This is a big selling point of web components because it‚Äôs so darn easy to drop them into any project and have them ‚Äújust‚Äù work.</p><p>A few other more articles I used:</p><p>First off, I knew I could select the  element directly without any classes, IDs, or other attributes:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">baseline-status {\n  /* Styles! */\n}</code></pre><p>I peeked at the script‚Äôs <a href=\"https://github.com/web-platform-dx/baseline-status/blob/main/baseline-status.js\" rel=\"noopener\">source code</a> to see what I was working with. I had a few light styles I could use right away on the type selector:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">baseline-status {\n  background: #000;\n  border: solid 5px #f8a100;\n  border-radius: 8px;\n  color: #fff;\n  display: block;\n  margin-block-end: 1.5em;\n  padding: .5em;\n}</code></pre><p>I noticed a CSS color variable in the source code that I could use in place of hard-coded values, so I redefined them and set them where needed:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">baseline-status {\n  --color-text: #fff;\n  --color-outline: var(--orange);\n\n  border: solid 5px var(--color-outline);\n  border-radius: 8px;\n  color: var(--color-text);\n  display: block;\n  margin-block-end: var(--gap);\n  padding: calc(var(--gap) / 4);\n}</code></pre><p>Now for a tricky part. The component‚Äôs markup looks close to this in the DOM when fully rendered:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;baseline-status class=\"wp-block-css-tricks-baseline-status\" featureid=\"anchor-positioning\"&gt;&lt;/baseline-status&gt;\n&lt;h1&gt;Anchor positioning&lt;/h1&gt;\n&lt;details&gt;\n  &lt;summary aria-label=\"Baseline: Limited availability. Supported in Chrome: yes. Supported in Edge: yes. Supported in Firefox: no. Supported in Safari: no.\"&gt;\n    &lt;baseline-icon aria-hidden=\"true\" support=\"limited\"&gt;&lt;/baseline-icon&gt;\n    &lt;div class=\"baseline-status-title\" aria-hidden=\"true\"&gt;\n      &lt;div&gt;Limited availability&lt;/div&gt;\n        &lt;div class=\"baseline-status-browsers\"&gt;\n        &lt;!-- Browser icons --&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/summary&gt;&lt;p&gt;This feature is not Baseline because it does not work in some of the most widely-used browsers.&lt;/p&gt;&lt;p&gt;&lt;a href=\"https://github.com/web-platform-dx/web-features/blob/main/features/anchor-positioning.yml\"&gt;Learn more&lt;/a&gt;&lt;/p&gt;&lt;/details&gt;\n&lt;baseline-status class=\"wp-block-css-tricks-baseline-status\" featureid=\"anchor-positioning\"&gt;&lt;/baseline-status&gt;</code></pre><p>I wanted to play with the idea of hiding the  element in some contexts but thought twice about it because  displaying the title only really works for Almanac content when you‚Äôre on the page for the same feature as what‚Äôs rendered in the component. Any other context and the heading is a ‚Äúneed‚Äù for providing context as far as what feature we‚Äôre looking at. Maybe that can be a future enhancement where the heading can be toggled on and off.</p><p>This is freely available in the WordPress Plugin Directory as of today! This is my very first plugin I‚Äôve submitted to WordPress on my own behalf, so this is really exciting for me!</p><p>This is far from fully baked but definitely gets the job done for now. In the future it‚Äôd be nice if this thing could do a few more things:</p><ul><li> The widget does not update on the back end until the page refreshes. I‚Äôd love to see the final rendering before hitting Publish on something. I got it where typing into the text input is instantly reflected on the back end. It‚Äôs just that the component doesn‚Äôt re-render to show the update.</li><li> As in ‚Äúlarge‚Äù and ‚Äúsmall‚Äù. </li><li> Toggle to hide or show, depending on where the block is used.</li></ul>","contentLength":12718,"flags":null,"enclosureUrl":"https://css-tricks.com/wp-content/uploads/2024/11/Screen-Recording-2024-11-05-at-2.56.06‚ÄØPM.mp4","enclosureMime":"","commentsUrl":null},{"title":"This Week In React #220: Next.js, Astro, Nuqs, CRA, React Scan, Fumadocs, Fusion, Radix, Inertia | Sortables, Contributors Summit, Windows, Deep linking, Oklab, Audio, BottomTabs, Metro, OTA | TypeScript, Angular, Node.js, Vite","url":"https://thisweekinreact.com/newsletter/220","date":1738713600,"author":"","guid":604,"unread":true,"content":"<p>This week we have a good variety of React articles and Next.js is finally adding support for Node.js runtime middleware!</p><p>Mobile developers will also discover future plans for React Native, including desktop support from Microsoft. A new sortables drag &amp; drop library should unlock new interactions in your app, considering it's quite hard to build all this yourself.</p><p>TypeScript continues to progress with a new beta including a flag to support the newly added native Node.js support, and the upcoming browser support. A polyfill for native browser support is already available!</p><p>I'm trying something new this week, splitting the newsletter title keywords with a , following the pattern <code>React keywords | React Native keywords | Other keywords</code>. Do you think this is useful?</p><p>As always, thanks for supporting us on your favorite platform:</p><p>If your authentication isn't , it's .</p><p>With <a href=\"https://www.propelauth.com/?utm_source=newsletter&amp;utm_campaign=twinrjan222024\" target=\"_blank\" rel=\"noopener noreferrer\">PropelAuth</a>, you get everything you need to launch and scale your B2B product:</p><ul><li><strong>UIs that cover all your use cases</strong> - signup, login, MFA, organization management and more.</li><li> so you can provide top-notch support to your users.</li><li> and <strong>advanced security features</strong> so you can be upmarket-ready.</li><li> to help you strategize and expand.</li></ul><p>A much-awaited feature for the Next.js community. The latest v15.2 canary has a new <code>experimental.nodeMiddleware</code> flag letting you opt-in for , enabling you to use Node.js APIs in middleware, and remove the constraints of being limited to APIs compatible with the edge runtime.</p><p>Sentry's new bi-weekly live demos will show you how to catch, fix and prevent issues fast. Join one of their engineers Thursdays at 1 PM ET for 25 minute tour‚Äîno slides, no fluff, just code-level visibility from pre-release to production. <a href=\"https://sentry.io/resources/find-fix-test/?utm_source=bytes&amp;utm_medium=paid-community&amp;utm_campaign=general-fy25q4-evergreen&amp;utm_content=newsletter-biweeklydemo-register\" target=\"_blank\" rel=\"noopener noreferrer\">RSVP</a></p><p>A new powerful React Native library for re-ordering items with drag &amp; drop gestures, including features such as:</p><ul><li>Support for Grid and Flex layouts</li><li>Support for different item sizes, spacing, and arrangements</li><li>Auto-scrolling when dragging outside screen</li><li>Seamless layout animations</li><li>Simple API, full TypeScript support</li><li>Compatible with Expo and both architectures</li></ul>","contentLength":2056,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tutorial: publishing ESM-based npm packages with TypeScript","url":"https://2ality.com/2025/02/typescript-esm-packages.html","date":1738627200,"author":"Dr. Axel Rauschmayer","guid":347,"unread":true,"content":"<p>During the last two years, ESM support in TypeScript, Node.js and browsers has made a lot of progress. In this blog post, I explain my modern setup that is relatively simple ‚Äì compared to what we had to do in the past:</p>","contentLength":220,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Compiling CSS With Vite and Lightning CSS","url":"https://css-tricks.com/compiling-css-with-vite-and-lightning-css/","date":1738596217,"author":"Ryan Trimble","guid":563,"unread":true,"content":"<p>Suppose you follow CSS feature development as closely as we do here at CSS-Tricks. In that case, you may be like me and eager to use many of these amazing tools but find browser support sometimes lagging behind what might be considered ‚Äúmodern‚Äù CSS (<a href=\"https://geoffgraham.me/what-exactly-is-modern-css/\" rel=\"noopener\">whatever that means</a>).</p><p>Even if browser vendors all have a certain feature released, users might not have the latest versions!</p><p>We can certainly plan for this a number of ways:</p><ul><li>feature detection with </li><li> designs</li></ul><p>For even extra help, we turn to build tools. Chances are, you‚Äôre already using some sort of build tool in your projects today. CSS developers are  familiar with CSS pre-processors (such as <a href=\"https://sass-lang.com/\" rel=\"noopener\">Sass</a> or <a href=\"https://lesscss.org/\" rel=\"noopener\">Less</a>), but if you don‚Äôt know, these are tools capable of compiling many CSS files into one stylesheet. CSS pre-processors help make organizing CSS a lot easier, as you can move parts of CSS into related folders and import things as needed.</p><p>Pre-processors do not  provide organizational superpowers, though. Sass gave us a crazy list of features to work with, including:</p><ul></ul><p>For a while, this big feature set provided a means of filling gaps missing from CSS, making Sass (or whatever preprocessor you fancy) feel like a necessity when starting a new project. CSS has evolved a lot since the release of Sass ‚Äî we have so many of those features in CSS today ‚Äî so it doesn‚Äôt quite feel that way anymore, especially now that we have native <a href=\"https://css-tricks.com/css-selectors/#aa-nesting-selectors\">CSS nesting</a> and <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">custom properties</a>.</p><p>Along with CSS pre-processors, there‚Äôs also the concept of -processing. This type of tool usually helps transform compiled CSS in different ways, like auto-prefixing properties for different browser vendors, code minification, and more. <a href=\"https://postcss.org/\" rel=\"noopener\">PostCSS</a> is the big one here, giving you tons of ways to manipulate and optimize your code, another step in the build pipeline.</p><p>In many implementations I‚Äôve seen, the build pipeline typically runs roughly like this:</p><ol></ol><p>CSS is usually handled in that first part, which includes running CSS pre- and post-processors (though post-processing might also happen after Step 2). As mentioned, the continued evolution of CSS makes it less necessary for a tool such as Sass, so we might have an opportunity to save some time.</p><p>Awarded ‚Äú‚Äù and ‚Äú‚Äù from the <a href=\"https://2024.stateofjs.com/en-US/awards/\" rel=\"noopener\">State of JavaScript 2024</a> survey, <a href=\"https://vite.dev/\" rel=\"noopener\">Vite</a> certainly seems to be one of the more popular build tools available. Vite is mainly used to build reactive JavaScript front-end frameworks, such as Angular, React, Svelte, and Vue (made by the same developer, of course). As the name implies, Vite is crazy fast and can be as simple or complex as you need it, and has become one of my favorite tools to work with.</p><p>Vite is mostly thought of as a  tool for  projects, but you can use it without writing any JavaScript at all. Vite works with Sass, though you still need to install Sass as a dependency to include it in the build pipeline. On the other hand, Vite also automatically supports compiling CSS with no extra steps. We can organize our CSS code how we see fit, with no or very minimal configuration necessary. Let‚Äôs check that out.</p><p>We will be using Node and npm to install Node packages, like Vite, as well as commands to run and build the project. If you do not have  or  installed, please check out <a href=\"https://nodejs.org/en/download\" rel=\"noopener\">the download page on their website</a>.</p><p>Navigate a terminal to a safe place to create a new project, then run:</p><p>The command line interface will ask a few questions, you can keep it as simple as possible by choosing  and  which will provide you with a starter template including some no-frameworks-attached HTML, CSS, and JavaScript files to help get you started.</p><p>Before running other commands, open the folder in your IDE (integrated development environment, such as <a href=\"https://code.visualstudio.com/\" rel=\"noopener\">VSCode</a>) of choice so that we can inspect the project files and folders.</p><p>If you would like to follow along with me,  the following files that are unnecessary for demonstration:</p><ul></ul><p>We should only have the following files left in out project folder:</p><p>Let‚Äôs also replace the contents of  with an empty HTML template:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html&gt;\n\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n\t\n    &lt;title&gt;CSS Only Vite Project&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- empty for now --&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>One last piece to set up is Vite‚Äôs dependencies, so let‚Äôs run the npm installation command:</p><p>A short sequence will occur in the terminal. Then we‚Äôll see a new folder called  and a  file added in our file viewer.</p><ul><li> is used to house all package files installed through node package manager, and allows us to import and use installed packages throughout our applications.</li><li> is a file usually used to make sure a development team is all using the same versions of packages and dependencies.</li></ul><p>We most likely won‚Äôt need to touch these things, but they are necessary for Node and Vite to process our code during the build. Inside the project‚Äôs root folder, we can create a  folder to contain the CSS we will write. Let‚Äôs create one file to begin with, , which we can use to test out Vite.</p><pre rel=\"\" data-line=\"\"><code markup=\"tt\">‚îú‚îÄ‚îÄ public/\n‚îú‚îÄ‚îÄ styles/\n|   ‚îî‚îÄ‚îÄ main.css\n‚îî‚îÄ‚îÄindex.html</code></pre><p>In our  file, inside the  section, we can include a  tag pointing to the CSS file:</p><pre rel=\"HTML\" data-line=\"9\"><code markup=\"tt\">&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n\t\n  &lt;title&gt;CSS Only Vite Project&lt;/title&gt;\n\n  &lt;!-- Main CSS --&gt;\n  &lt;link rel=\"stylesheet\" href=\"styles/main.css\"&gt;\n&lt;/head&gt;</code></pre><p>Let‚Äôs add a bit of CSS to :</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">body {\n  background: green;\n}</code></pre><p>It‚Äôs not much, but it‚Äôs all we‚Äôll need at the moment! In our terminal, we can now run the Vite build command using :</p><p>With everything linked up properly, Vite will build things based on what is available within the  file, including our linked CSS files. The build will be  fast, and you‚Äôll be returned to your terminal prompt.</p><p>The newly generated  folder is Vite‚Äôs default output directory, which we can open and see our processed files. Checking out  (the filename will include a unique hash for <a href=\"https://www.keycdn.com/support/what-is-cache-busting\" rel=\"noopener\">cache busting</a>), and you‚Äôll see the code we wrote, minified here.</p><p>Now that we know how to make Vite aware of our CSS, we will probably want to start writing more CSS for it to compile.</p><p>As quick as Vite is with our code, constantly re-running the build command would still get very tedious. Luckily, Vite provides its own development server, which includes a live environment with hot module reloading, making changes appear instantly in the browser. We can start the Vite development server by running the following terminal command:</p><p>Vite uses the default network port  for the development server. Opening the  address in your browser will display a blank screen with a green background.</p><p>Adding any HTML to the  or CSS to , Vite will reload the page to display changes. To stop the development server, use the keyboard shortcut + or close the terminal to kill the process.</p><p>At this point, you pretty much know all you need to know about how to compile CSS files with Vite. Any CSS file you link up will be included in the built file.</p><h3>Organizing CSS into Cascade Layers</h3><p>One of the items on my <a href=\"https://css-tricks.com/a-css-wishlist-for-2025/\">2025 CSS Wishlist</a> is the ability to&nbsp;<a href=\"https://css-tricks.com/a-css-wishlist-for-2025/#aa-7-adding-a-layer-attribute-to-link-tags\">apply a cascade layer</a>&nbsp;to a&nbsp;&nbsp;tag. To me, this might be helpful to organize CSS in a meaningful ways, as well as fine control over the cascade, with the benefits cascade layers provide. Unfortunately, this is a rather difficult ask when considering the way browsers paint styles in the viewport. This type of functionality is being discussed between the <a href=\"https://github.com/w3c/csswg-drafts/issues/5853\" rel=\"noopener\">CSS Working Group</a> and <a href=\"https://github.com/w3ctag/design-reviews/issues/970\" rel=\"noopener\">TAG</a>, but it‚Äôs unclear if it‚Äôll move forward.</p><p>With Vite as our build tool, we can replicate the concept as a way to organize our built CSS. Inside the  file, let‚Äôs add the @layer at-rule to set the cascade order of our layers. I‚Äôll use a couple of layers here for this demo, but feel free to customize this setup to your needs.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* styles/main.css */\n@layer reset, layouts;</code></pre><p>This is all we‚Äôll need inside our , let‚Äôs create another file for our reset. I‚Äôm a fan of my friend <a href=\"https://mayank.co/\" rel=\"noopener\">Mayank</a>‚Äòs modern CSS reset, which is available as a <a href=\"https://www.npmjs.com/package/@acab/reset.css\" rel=\"noopener\">Node package</a>. We can install the reset by running the following terminal command:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">npm install @acab/reset.css</code></pre><p>Now, we can import Mayank‚Äôs reset into our newly created  file, as a cascade layer:</p><pre rel=\"CSS\" data-line=\"3\"><code markup=\"tt\">/* styles/reset.css */\n@import '@acab/reset.css' layer(reset);</code></pre><p>If there are any other reset layer stylings we want to include, we can open up another  block inside this file as well.</p><pre rel=\"CSS\" data-line=\"5-7\"><code markup=\"tt\">/* styles/reset.css */\n@import '@acab/reset.css' layer(reset);\n\n@layer reset {\n  /* custom reset styles */\n}</code></pre><p>This  statement is used to pull packages from the  folder. This folder is not  available in the built, public version of a website or application, so referencing this might cause problems if not handled properly.</p><p>Now that we have two files ( and ), let‚Äôs link them up in our  file. Inside the  tag, let‚Äôs add them after :</p><pre rel=\"HTML\" data-line=\"8,9\"><code markup=\"tt\">&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n\t\n  &lt;title&gt;CSS Only Vite Project&lt;/title&gt;\n\t\n  &lt;link rel=\"stylesheet\" href=\"styles/main.css\"&gt;\n  &lt;link rel=\"stylesheet\" href=\"styles/reset.css\"&gt;\n&lt;/head&gt;</code></pre><p>The idea here is we can add each CSS file, in the order we need them parsed. In this case, I‚Äôm planning to pull in each file named after the cascade layers setup in the main.css file. This may not work for every setup, but it is a helpful way to keep in mind the precedence of how cascade layers affect computed styles when rendered in a browser, as well as grouping similarly relevant files.</p><p>Since we‚Äôre in the  file, we‚Äôll add a third CSS  for .</p><pre rel=\"HTML\" data-line=\"10\"><code markup=\"tt\">&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n\t\n  &lt;title&gt;CSS Only Vite Project&lt;/title&gt;\n\t\n  &lt;link rel=\"stylesheet\" href=\"styles/main.css\"&gt;\n  &lt;link rel=\"stylesheet\" href=\"styles/reset.css\"&gt;\n  &lt;link rel=\"stylesheet\" href=\"styles/layouts.css\"&gt;\n&lt;/head&gt;</code></pre><p>Create the  file with the new  declaration block, where we can add layout-specific stylings.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* styles/layouts.css */\n@layer layouts {\n  /* layouts styles */\n}</code></pre><p>For some quick, easy, and awesome CSS snippets, I tend to refer to <a href=\"https://thinkdobecreate.com/\" rel=\"noopener\">Stephanie Eckles</a>‚Äò <a href=\"https://smolcss.dev/\" rel=\"noopener\">SmolCSS</a> project. Let‚Äôs grab the ‚ÄúSmol intrinsic container‚Äù code and include it within the  cascade layer:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* styles/layouts.css */\n@layer layouts {\n  .smol-container {\n    width: min(100% - 3rem, var(--container-max, 60ch));\n    margin-inline: auto;\n  }\n}</code></pre><p>This powerful little, two-line container uses the CSS  function to provide a responsive width, with  set to horizontally center itself and contain its child elements. We can also dynamically adjust the width using the  custom property.</p><p>Now if we re-run the build command  and check the  folder, our compiled CSS file should contain:</p><ul><li>Our cascade layer declarations from </li><li>Mayank‚Äôs CSS reset fully imported from </li><li>The  class added from </li></ul><p>As you can see, we can get quite far with Vite as our build tool without writing any JavaScript. However, if we choose to, we can extend our build‚Äôs capabilities even further by writing just a  of JavaScript.</p><h3>Post-processing with LightningCSS</h3><p><a href=\"https://lightningcss.dev/\" rel=\"noopener\">Lightning CSS</a> is a CSS parser and post-processing tool that has a lot of nice features baked into it to help with cross-compatibility among browsers and browser versions. Lightning CSS can transform a lot of modern CSS into backward-compatible styles  you.</p><p>We can install Lightning CSS in our project with :</p><pre rel=\"Terminal\" data-line=\"\"><code markup=\"tt\">npm install --save-dev lightningcss</code></pre><p>The  flag means the package will be installed as a development dependency, as it won‚Äôt be included with our built project. We can include it within our Vite build process, but first, we will need to write a tiny bit of JavaScript, a configuration file for Vite. Create a new file called:  and inside add the following code:</p><pre rel=\"JavaScript\" data-line=\"\"><code markup=\"tt\">// vite.config.mjs\nexport default {\n  css: {\n    transformer: 'lightningcss'\n  },\n  build: {\n    cssMinify: 'lightningcss'\n  }\n};</code></pre><p>Vite will now use LightningCSS to transform and minify CSS files. Now, let‚Äôs give it a test run using an  color. Inside  let‚Äôs add the following code:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* main.css */\nbody {\n  background-color: oklch(51.98% 0.1768 142.5);\n}</code></pre><p>Then re-running the Vite build command, we can see the  property added in the compiled CSS:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* dist/index.css */\nbody {\n  background-color: green;\n  background-color: color(display-p3 0.216141 0.494224 0.131781);\n  background-color: lab(46.2829% -47.5413 48.5542);\n}</code></pre><p>Browserslist will give us a way to specify browsers by matching certain conditions (<a href=\"https://lightningcss.dev/transpilation.html#browser-targets\" rel=\"noopener\">try it out online</a>!)</p><pre rel=\"Terminal\" data-line=\"\"><code markup=\"tt\">npm install -D browserslist</code></pre><p>Inside our  file, we can configure Lightning CSS further. Let‚Äôs import the  package into the Vite configuration, as well as a module from the Lightning CSS package to help us use  in our config:</p><pre rel=\"JavaScript\" data-line=\"\"><code markup=\"tt\">// vite.config.mjs\nimport browserslist from 'browserslist';\nimport { browserslistToTargets } from 'lightningcss';</code></pre><p>We can add configuration settings for , containing the browser targets based on specified browser versions to Vite‚Äôs  configuration:</p><pre rel=\"JavaScript\" data-line=\"\"><code markup=\"tt\">// vite.config.mjs\nimport browserslist from 'browserslist';\nimport { browserslistToTargets } from 'lightningcss';\n\nexport default {\n  css: {\n    transformer: 'lightningcss',\n    lightningcss: {\n      targets: browserslistToTargets(browserslist('&gt;= 0.25%')),\n    }\n  },\n  build: {\n    cssMinify: 'lightningcss'\n  }\n};</code></pre><p>There are lots of ways to extend Lightning CSS with Vite, such as enabling specific features, excluding features we won‚Äôt need, or writing our own custom transforms.</p><pre rel=\"JavaScript\" data-line=\"12-13\"><code markup=\"tt\">// vite.config.mjs\nimport browserslist from 'browserslist';\nimport { browserslistToTargets, Features } from 'lightningcss';\n\nexport default {\n  css: {\n    transformer: 'lightningcss',\n    lightningcss: {\n      targets: browserslistToTargets(browserslist('&gt;= 0.25%')),\n      // Including `light-dark()` and `colors()` functions\n      include: Features.LightDark | Features.Colors,\n    }\n  },\n  build: {\n    cssMinify: 'lightningcss'\n  }\n};</code></pre><h2>Is any of this necessary?</h2><p>Reading through all this, you may be asking yourself if all of this is really necessary. The answer:  But I think you can see the benefits of having access to partialized files that we can compile into unified stylesheets.</p><p>I doubt I‚Äôd go to these lengths for smaller projects, however, if building something with more complexity, such as a design system, I might reach for these tools for organizing code, cross-browser compatibility, and thoroughly optimizing compiled CSS.</p>","contentLength":14461,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Chrome 133 Goodies","url":"https://css-tricks.com/chrome-133-goodies/","date":1738337270,"author":"Geoff Graham","guid":562,"unread":true,"content":"<p>I often wonder what it‚Äôs like working for the Chrome team. You must get issued some sort of government-level security clearance for the latest browser builds that grants you permission to bash on them ahead of everyone else and come up with these rad demos showing off the latest features. No, I‚Äôm, not jealous, why are you asking?</p><p>Totally unrelated, did you see the <a href=\"https://developer.chrome.com/blog/chrome-133-beta\" rel=\"noopener\">release notes for Chrome 133</a>? It‚Äôs currently in beta, but the Chrome team has been publishing a slew of new articles with pretty incredible demos that are tough to ignore. I figured I‚Äôd round those up in one place.</p><p>We‚Äôve been able to use HTML attributes in CSS for some time now, but it‚Äôs been relegated to the  property and only parsed strings.</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;h1 data-color=\"orange\"&gt;Some text&lt;/h1&gt;</code></pre><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">h1::before {\n  content: ' (Color: ' attr(data-color) ') ';\n}</code></pre><p>Bramus demonstrates how we can now use it on any CSS property, including custom properties, in Chrome 133. So, for example, we can take the attribute‚Äôs value and put it to use on the element‚Äôs  property:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">h1 {\n  color: attr(data-color type(&lt;color&gt;), #fff)\n}</code></pre><p>This is a trite example, of course. But it helps illustrate that there are three moving pieces here:</p><ol><li>the attribute ()</li><li>the fallback value ()</li></ol><p>We make up the attribute. It‚Äôs nice to have a wildcard we can insert into the markup and hook into for styling. The  is a new deal that helps CSS know what sort of value it‚Äôs working with. If we had been working with a numeric value instead, we could ditch that in favor of something less verbose. For example, let‚Äôs say we‚Äôre using an attribute for the element‚Äôs font size:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;div data-size=\"20\"&gt;Some text&lt;/div&gt;</code></pre><p>Now we can hook into the  attribute and use the assigned value to set the element‚Äôs  property, based in  units:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">h1 {\n  color: attr(data-size px, 16);\n}</code></pre><p>The fallback value is optional and might not be necessary depending on your use case.</p><p>This is a mind-blowing one. If you‚Äôve ever wanted a way to style a sticky element when it‚Äôs in a ‚Äústuck‚Äù state, then you already know how cool it is to have something like this. Adam Argyle takes the classic pattern of an alphabetical list and applies styles to the letter heading when it sticks to the top of the viewport. The same is true of elements with scroll snapping and elements that are scrolling containers.</p><p>In other words, we can style elements when they are ‚Äústuck‚Äù, when they are ‚Äúsnapped‚Äù, and when they are ‚Äúscrollable‚Äù.</p><p>Quick little example that you‚Äôll want to open in a Chromium browser:</p><p>The general idea (and that‚Äôs all I know for now) is that we register a container‚Ä¶ you know, <a href=\"https://css-tricks.com/css-container-queries/\">a container that we can query</a>. We give that container a  that is set to the type of scrolling we‚Äôre working with. In this case, we‚Äôre working with sticky positioning where the element ‚Äústicks‚Äù to the top of the page.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.sticky-nav {\n  container-type: scroll-state;\n}</code></pre><p>A container can‚Äôt query itself, so that basically has to be a wrapper around the element we want to stick. Menus are a little funny because we have the  element and usually stuff it with an unordered list of links. So, our  can be the container we query since we‚Äôre effectively sticking an unordered list to the top of the page.</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;nav class=\"sticky-nav\"&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;About&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;Blog&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;</code></pre><p>We can put the sticky logic directly on the  since it‚Äôs technically holding what gets stuck:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.sticky-nav {\n  container-type: scroll-state; /* set a scroll container query */\n  position: sticky; /* set sticky positioning */\n  top: 0; /* stick to the top of the page */\n}</code></pre><p>I supposed we could use the  shorthand if we were working with multiple containers and needed to distinguish one from another with a . Either way, now that we‚Äôve defined a container, we can query it using ! In this case, we declare the type of container we‚Äôre querying:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@container scroll-state() { }</code></pre><p>And we tell it the state we‚Äôre looking for:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@container scroll-state(stuck: top) {</code></pre><p>If we were working with a sticky footer instead of a menu, then we could say  instead. But the kicker is that once the  element sticks to the top, we get to apply styles to it in the  block, like so:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.sticky-nav {\n  border-radius: 12px;\n  container-type: scroll-state;\n  position: sticky;\n  top: 0;\n\n  /* When the nav is in a \"stuck\" state */\n  @container scroll-state(stuck: top) {\n    border-radius: 0;\n    box-shadow: 0 3px 10px hsl(0 0 0 / .25);\n    width: 100%;\n  }\n}</code></pre><p>It seems to work when nesting other selectors in there. So, for example, we can change the links in the menu when the navigation is in its stuck state:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.sticky-nav {\n  /* Same as before */\n\n  a {\n    color: #000;\n    font-size: 1rem;\n  }\n\n  /* When the nav is in a \"stuck\" state */\n  @container scroll-state(stuck: top) {\n    /* Same as before */\n\n    a {\n      color: orangered;\n      font-size: 1.5rem;\n    }\n  }\n}</code></pre><p>So, yeah. As I was saying, it must be pretty cool to be on the Chrome developer team and get ahead of stuff like this, as it‚Äôs released. Big ol‚Äô thanks to Bramus and Adam for consistently cluing us in on what‚Äôs new and doing the great work it takes to come up with such amazing demos to show things off.</p>","contentLength":5193,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Keeping the page interactive while a View Transition is running","url":"https://css-tricks.com/keeping-the-page-interactive-while-a-view-transition-is-running/","date":1738332660,"author":"Geoff Graham","guid":561,"unread":true,"content":"<blockquote><p>When using View Transitions you‚Äôll notice the page becomes unresponsive to clicks while a View Transition is running. [‚Ä¶] This happens because of the&nbsp;&nbsp;pseudo element ‚Äì the one that contains all animated snapshots ‚Äì gets overlayed on top of the document and captures all the clicks.</p></blockquote><pre rel=\"\" data-line=\"\"><code markup=\"tt\">::view-transition /* üëà Captures all the clicks! */\n‚îî‚îÄ ::view-transition-group(root)\n   ‚îî‚îÄ ::view-transition-image-pair(root)\n      ‚îú‚îÄ ::view-transition-old(root)\n      ‚îî‚îÄ ::view-transition-new(root)</code></pre><p>The trick? It‚Äôs that sneaky little  property! Slapping it directly on the  allows us to click ‚Äúunder‚Äù the pseudo-element, meaning the full page is interactive even while the view transition is running.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">::view-transition {\n  pointer-events: none;\n}</code></pre><p>I always, always,  forget about , so thanks to Bramus for posting this little snippet. I also appreciate the additional note about removing the  element from participating in the view transition:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">:root {\n  view-transition-name: none;\n}</code></pre><p>He quotes <a href=\"https://drafts.csswg.org/css-view-transitions-1/#view-transition-stacking-layer\" rel=\"noopener\">the spec</a> noting the reason why snapshots do not respond to hit-testing:</p><blockquote><p>Elements participating in a transition need to skip painting in their DOM location because their image is painted in the corresponding  pseudo-element instead. Similarly, hit-testing is skipped because the element‚Äôs DOM location does not correspond to where its contents are rendered.</p></blockquote>","contentLength":1361,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A WebAssembly compiler in 192 bytes","url":"https://javascriptweekly.com/issues/721","date":1738281600,"author":"","guid":599,"unread":true,"content":"<a href=\"https://javascriptweekly.com/link/165114/rss\"><img src=\"https://res.cloudinary.com/cpress/image/upload/c_limit,w_480,h_480,q_auto/copm/7de26641.png\" width=\"140\" height=\"140\"></a><p> ‚Äî Take your knowledge to the next level with the most loved JavaScript course in the industry. Deepen your understanding of the most important aspects of JavaScript. This highly rated video course goes under the hood, looking at callbacks, higher-order functions, object-oriented JS, and&nbsp;more.</p>","contentLength":297,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Mistakes of CSS","url":"https://css-tricks.com/the-mistakes-of-css/","date":1738247468,"author":"Juan Diego Rodr√≠guez","guid":560,"unread":true,"content":"<p>Surely you have seen a CSS property and thought ‚ÄúWhy?‚Äù For example:</p><blockquote><p>Why doesn‚Äôt  work on all elements, and why is it ‚Äú-‚Äù anyways?</p></blockquote><blockquote><p>Why do we need  to animate to ?</p></blockquote><p>You are not alone. CSS was born in 1996 (it can legally order a beer, you know!) and was initially considered a way to style documents; I don‚Äôt think anyone imagined everything CSS would be expected to do nearly 30 years later. If we had a time machine, many things would be done differently to match conventions or to make more sense. Heck, even the CSS Working Group admits to wanting a time-traveling contraption‚Ä¶ in the specifications!</p><blockquote><p>&nbsp;If we had a time machine, this property wouldn‚Äôt need to exist.</p></blockquote><p>If by some stroke of opportunity, I was given free rein to rename some things in CSS, a couple of ideas come to mind, but if you want more, you can find an ongoing list of mistakes made in CSS‚Ä¶ by the CSS Working Group! Take, for example, :</p><blockquote><p>Not quite a mistake, because it was a reasonable default for the 90s, but it would be more helpful since then if  defaulted to .</p></blockquote><p>Why not fix them? Sadly, it isn‚Äôt as easy as  something. People already built their websites with these quirks in mind, and changing them would break those sites. Consider it <a href=\"https://css-tricks.com/defining-and-dealing-with-technical-debt/\">technical debt</a>.</p><p>This is why I think the CSS Working Group deserves an onslaught of praise. Designing new features that are immutable once shipped has to be a nerve-wracking experience that involves inexact science. It‚Äôs not that we haven‚Äôt seen the specifications change or evolve in the past ‚Äî they most certainly have ‚Äî but the value of getting things right the first time is a beast of burden.</p>","contentLength":1629,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"What on Earth is the `types` Descriptor in View Transitions?","url":"https://css-tricks.com/what-on-earth-is-the-types-descriptor-in-view-transitions/","date":1738160033,"author":"Juan Diego Rodr√≠guez","guid":559,"unread":true,"content":"<p>Have you ever stumbled upon something new and went to research it just to find that there is little-to-no information about it? It‚Äôs a mixed feeling: confusing and discouraging because there is no apparent direction, but also exciting because it‚Äôs probably new to lots of people, not just you. Something like that happened to me while writing an Almanac‚Äôs entry for the&nbsp;&nbsp;at-rule and its&nbsp;&nbsp;descriptor.</p><p>You may already know about Cross-Document View Transitions: With a few lines of CSS, they allow for transitions between two pages, something that in the past required a single-app framework with a side of animation library. In other words, <a href=\"https://css-tricks.com/page-transitions-for-everyone/\">lots of JavaScript</a>.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@view-transition {\n  navigation: auto;\n}</code></pre><p>That‚Äôs it! And&nbsp;&nbsp;is the only descriptor we need. In fact, it‚Äôs the only descriptor available for the&nbsp;&nbsp;at-rule, right? Well, turns out there is&nbsp;&nbsp;descriptor, a lesser-known brother, and one that probably envies how much attention&nbsp;&nbsp;gets: the&nbsp;.</p><h3>What do people say about ?</h3><p>Cross-Documents View Transitions are still fresh from the oven, so it‚Äôs normal that people haven‚Äôt fully dissected every aspect of them, especially since they introduce a  of new stuff: a new at-rule, a couple of new properties and tons of pseudo-elements and pseudo-classes. However, it still surprises me the little mention of&nbsp;. Some documentation fails to even name it among the valid &nbsp; descriptors. Luckily, though, the CSS specification does offer a little clarification about it:</p><blockquote><p>The&nbsp;&nbsp;descriptor sets the active types for the transition when capturing or performing the transition.</p></blockquote><p>To be more precise,&nbsp;&nbsp;can take a space-separated list with the names of the active types (as ), or&nbsp;&nbsp;if there aren‚Äôt valid active types for that page.</p><ul><li>Value:&nbsp;</li></ul><p>So the following values would work inside&nbsp;:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@view-transition {\n  navigation: auto;\n  types: bounce;\n}\n\n/* or a list */\n\n@view-transition {\n  navigation: auto;\n  types: bounce fade rotate;\n}</code></pre><p>Yes, but what exactly are ‚Äúactive‚Äù types? That word ‚Äúactive‚Äù seems to be doing a lot of heavy lifting in the CSS specification‚Äôs definition and I want to unpack that to better understand what it means.</p><h3>Active types in view transitions</h3><p>&nbsp;A cross-fade animation for every page is good, but a common thing we need to do is change the transition depending on the pages we are navigating between. For example, on paginated content, we could slide the content to the right when navigating forward and to the left when navigating backward. In a social media app, clicking a user‚Äôs profile picture could persist the picture throughout the transition. All this would mean defining several transitions in our CSS, but doing so would make them conflict with each other in one big slop. What we need is a way to define several transitions, but only pick one depending on how the user navigates the page.</p><p>&nbsp;Active types define which transition gets used and which elements should be included in it. In CSS, they are used through&nbsp;<code>:active-view-transition-type()</code>, a pseudo-class that matches an element if it has a specific active type. Going back to our last example, we defined the document‚Äôs active type as&nbsp;. We could enclose that&nbsp;&nbsp;animation behind an&nbsp;<code>:active-view-transition-type(bounce)</code>, such that it only triggers on that page.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* This one will be used! */\nhtml:active-view-transition-type(bounce) {\n  &amp;::view-transition-old(page) {\n    /* Custom Animation */\n  }\n\n  &amp;::view-transition-new(page) {\n    /* Custom Animation */\n  }\n}</code></pre><p>This prevents other view transitions from running if they don‚Äôt match any active type:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* This one won't be used! */\nhtml:active-view-transition-type(slide) {\n  &amp;::view-transition-old(page) {\n    /* Custom Animation */\n  }\n\n  &amp;::view-transition-new(page) {\n    /* Custom Animation */\n  }\n}\n</code></pre><p>I asked myself whether this triggers the transition when going to the page, when out of the page, or in both instances. Turns out it only limits the transition when , so the last&nbsp;bounce&nbsp;animation is only triggered when navigating toward a page with a&nbsp;&nbsp;value on its&nbsp;&nbsp;descriptor, but not when leaving that page. This allows for custom transitions depending on which page we are going to.</p><p>The following demo has two pages that share a stylesheet with the&nbsp;&nbsp;and&nbsp;&nbsp;view transitions, both respectively enclosed behind an&nbsp;<code>:active-view-transition-type(bounce)</code>&nbsp;and&nbsp;<code>:active-view-transition-type(slide)</code>&nbsp;like the last example. We can control which page uses which view transition through the&nbsp;&nbsp;descriptor.</p><p>The first page uses the&nbsp;&nbsp;animation:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@view-transition {\n  navigation: auto;\n  types: bounce;\n}</code></pre><p>The second page uses the&nbsp;&nbsp;animation:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@view-transition {\n  navigation: auto;\n  types: slide;\n}</code></pre><h3>The&nbsp;&nbsp;descriptor is used more in JavaScript</h3><p>The main problem is that we can only control the transition depending on the page we‚Äôre navigating to, which puts a major cap on how much we can customize our transitions. For instance, the pagination and social media examples we looked at aren‚Äôt possible just using CSS, since we need to know where&nbsp;the user is coming from. Luckily, using the&nbsp;&nbsp;descriptor is just one of three ways that active types can be populated. Per spec, they can be:</p><ol><li>Passed as part of the arguments to&nbsp;<code>startViewTransition(callbackOptions)</code></li><li>Mutated at any time, using the transition‚Äôs types</li><li>Declared for a cross-document view transition, using the&nbsp;&nbsp;descriptor.</li></ol><p>The first option is when starting a view transition from JavaScript, but we want to trigger them when the user navigates to the page by themselves (like when clicking a link). The third option is using the&nbsp;&nbsp;descriptor which we already covered. The second option is the right one for this case! Why? It lets us set the active transition type on demand, and we can perform that change just before the transition happens using the&nbsp; event. That means we can get the user‚Äôs start and end page from JavaScript and then set the correct active type for that case.</p><p>I must admit, I am not the most experienced guy to talk about this option, so once I demo the heck out of different transitions with active types I‚Äôll come back with my findings! In the meantime, I encourage you to read about active types here if you are like me and want  on view transitions:</p>","contentLength":6190,"flags":null,"enclosureUrl":"https://css-tricks.com/wp-content/uploads/2025/01/custom-view-transition.mp4","enclosureMime":"","commentsUrl":null},{"title":"Computing with tuple types in TypeScript","url":"https://2ality.com/2025/01/typescript-tuples.html","date":1738108800,"author":"Dr. Axel Rauschmayer","guid":346,"unread":true,"content":"<p>JavaScript‚Äôs Arrays are so flexible that TypeScript provides two different kinds of types for handling them:</p><ul><li>Array types for arbitrary-length sequences of values that all have the same type ‚Äì e.g.: </li><li>Tuple types for fixed-length sequences of values where each one may have a different type ‚Äì e.g.: <code>[number, string, boolean]</code></li></ul><p>In this blog post, we look at the latter ‚Äì especially how to compute with tuples at the type level.</p>","contentLength":427,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"This Week In React #219: CRA, Next.js, Remix, Tremor, SaaS-Starter, Local-First, JSDom, 2n8, RN-Windows, OTA, Polygen, Audio API, Debugging, Shopify, Bottom Tabs, Reanimated, Tailwind, Standard Schema, TypeScript...","url":"https://thisweekinreact.com/newsletter/219","date":1738108800,"author":"","guid":603,"unread":true,"content":"<p>It's been a fairly quiet week compared with the previous one, and I couldn't pick any headliner!</p><p>The most important news for our ecosystem is probably the official deprecation of Create React App. There's also Tailwind v4 and Standard Schema v1.</p><p>I'm quite excited by the upcoming TypeScript 5.8  flag that forbids usage of features such as enums. This is the path toward making your app compatible Node.js built-in support, and maybe browsers too in the future.</p><p>Check our partner conf <a href=\"https://www.dotjs.io/?utm_source=thisweekinreact\" target=\"_blank\" rel=\"noopener noreferrer\">dotJS 2025</a> - üá´üá∑ Paris - 03 April - Speakers announced! Ryan Dahl, creator of Node.js, Sarah Drasner,&nbsp;Director of Engineering at Google and Wes Bos, co-host of Syntax.fm podcast. Get 15% off tickets with code \"TWIR‚Äù.</p><p>As always, thanks for supporting us on your favorite platform:</p><p>Convex is the all-in-one platform that gives you everything you need to build, launch, and scale a production-ready backend.</p><p>And that‚Äôs just the beginning. With Convex, you can:</p><ul><li>Easily schedule functions and write cron jobs</li><li>Write efficient server functions</li><li>Generate your backend with your favorite AI coding tool</li></ul><p>Reactile is an UI/UX turnkey framework which features an out-of-the-box, intuitive tiling display with workspaces. It encourages parallel workloads for large web solutions within a single browser tab. Implement your own view containers, widgets and logic using React and let Reactile handle the display for you.</p><p>On top of that, Reactile also offers:</p><ul><li>A promise-based persistence mechanism which permits a uniform workflow across time and on multiple devices.</li><li>The possibility to use nested tabs for your tiles.</li><li>A simplified global search mechanism.</li><li>CSS @container based responsiveness.</li></ul><p>Version 2 coming out soon. Get started with your unique 30-day free trial. Learn more about it on reactile.net.</p>","contentLength":1767,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Revisiting CSS Multi-Column Layout","url":"https://css-tricks.com/revisiting-css-multi-column-layout/","date":1737992144,"author":"Andy Clarke","guid":558,"unread":true,"content":"<p>Honestly, it‚Äôs difficult for me to come to terms with, but almost 20 years have passed since I wrote my first book, . In it, I explained how and why to use what was the then-emerging <a href=\"https://www.w3.org/TR/css-multicol-1/\" rel=\"noopener\">Multi-Column Layout</a><a href=\"https://www.w3.org/TR/css-multicol-1/\" rel=\"noopener\">module</a>.</p><p>Perhaps because, before the web, I‚Äôd worked in print, I was over-excited at the prospect of dividing content into columns without needing extra markup purely there for presentation. I‚Äôve used Multi-Column Layout regularly ever since. Yet, CSS Columns remains one of the most underused CSS layout tools. I wonder why that is?</p><h3>Holes in the specification</h3><p>For a long time, there were, and still are, plenty of holes in Multi-Column Layout. As Rachel Andrew ‚Äî now a specification editor ‚Äî <a href=\"https://www.smashingmagazine.com/2019/01/css-multiple-column-layout-multicol/\" rel=\"noopener\">noted in her article</a> five years ago:</p><blockquote><p>‚ÄúThe column boxes created when you use one of the column properties can‚Äôt be targeted. You can‚Äôt address them with JavaScript, nor can you style an individual box to give it a background colour or adjust the padding and margins. All of the column boxes will be the same size. The only thing you can do is add a rule between columns.‚Äù</p></blockquote><p>She‚Äôs right. And that‚Äôs  true. You can‚Äôt style columns, for example, by alternating background colours using some sort of  pseudo-class selector. You can add a <a href=\"https://css-tricks.com/almanac/properties/c/column-rule/\"></a> between columns using <a href=\"https://css-tricks.com/almanac/properties/b/border/\"></a> values like , , and , and who can forget those evergreen  and  styles? But you can‚Äôt apply <a href=\"https://css-tricks.com/almanac/properties/b/border-image/\"></a> values to a , which seems odd as they were introduced at roughly the same time. The Multi-Column Layout is imperfect, and there‚Äôs plenty I wish it could do in the future, but that doesn‚Äôt explain why most people ignore what it can do today.</p><h3>Patchy browser implementation for a long time</h3><p>Legacy browsers simply ignored the column properties they couldn‚Äôt process. But, when Multi-Column Layout was first launched, most designers and developers had yet to accept that websites needn‚Äôt look the same in every browser.</p><p>Early on, support for Multi-Column Layout was patchy. However, browsers caught up over time, and although there are still discrepancies ‚Äî especially in controlling content breaks ‚Äî Multi-Column Layout has now been implemented widely. Yet, for some reason, many designers and developers I speak to feel that CSS Columns remain broken. Yes, there‚Äôs plenty that browser makers should do to improve their implementations, but that shouldn‚Äôt prevent people from using the solid parts today.</p><p>Maybe the main reason designers and developers haven‚Äôt embraced Multi-Column Layout as they have CSS Grid and Flexbox isn‚Äôt in the specification or its implementation but in its usability. Rachel pointed this out in <a href=\"https://www.smashingmagazine.com/2019/01/css-multiple-column-layout-multicol\" rel=\"noopener\">her article</a>:</p><blockquote><p>‚ÄúOne reason we don‚Äôt see multicol used much on the web is that it would be very easy to end up with a reading experience which made the reader scroll in the block dimension. That would mean scrolling up and down vertically for those of us using English or another vertical writing mode. This is not a good reading experience!‚Äù</p></blockquote><p>That‚Äôs true. No one would enjoy repeatedly scrolling up and down to read a long passage of content set in columns. She <a href=\"https://www.smashingmagazine.com/2019/01/css-multiple-column-layout-multicol\" rel=\"noopener\">went on</a>:</p><blockquote><p>‚ÄúNeither of these things is ideal, and using multicol on the web is something we need to think about very carefully in terms of the amount of content we might be aiming to flow into our columns.‚Äù</p></blockquote><p>But, let‚Äôs face it, thinking very carefully is what designers and developers should always be doing.</p><p>Sure, if you‚Äôre dumb enough to dump a large amount of content into columns without thinking about its design, you‚Äôll end up serving readers a poor experience. But why would you do that when headlines, images, and quotes can span columns and reset the column flow, instantly improving readability? Add to that container queries and newer unit values for text sizing, and there really isn‚Äôt a reason to avoid using Multi-Column Layout any longer.</p><h3>A brief refresher on properties and values</h3><p>Let‚Äôs run through a refresher. There are two ways to flow content into multiple columns; first, by defining the number of columns you need using the <a href=\"https://css-tricks.com/almanac/properties/c/column-count/\"></a> property:</p><p>Second, and often best, is specifying the column width, leaving a browser to decide how many columns will fit along the inline axis. For example, I‚Äôm using <a href=\"https://css-tricks.com/almanac/properties/c/column-width/\"></a> to specify that my columns are over . A browser creates as many  columns as possible to fit and then shares any remaining space between them.</p><p>Then, there is the gutter (or <a href=\"https://css-tricks.com/almanac/properties/c/column-gap/\"></a>) between columns, which you can specify using any length unit. I prefer using rem units to maintain the gutters‚Äô relationship to the text size, but if your gutters need to be , you can leave this out, as that‚Äôs a browser‚Äôs default gap.</p><p>The final column property is that divider (or <a href=\"https://css-tricks.com/almanac/properties/c/column-rule/\"></a>) to the gutters, which adds visual separation between columns. Again, you can set a thickness and use  values like , , and .</p><p>These examples will be seen whenever you encounter a Multi-Column Layout tutorial, <a href=\"https://css-tricks.com/almanac/properties/c/columns/\">including CSS-Tricks‚Äô own Almanac</a>. The Multi-Column Layout syntax is one of the simplest in the suite of CSS layout tools, which is another reason why there are few reasons not to use it.</p><h3>Multi-Column Layout is even more relevant today</h3><p>When I wrote  and first explained the emerging Multi-Column Layout, there were no rem or viewport units, no <a href=\"https://css-tricks.com/almanac/pseudo-selectors/h/has/\"></a> or other advanced selectors, no <a href=\"https://css-tricks.com/css-container-queries/\">container queries,</a> and no routine use of <a href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\">media queries</a> because responsive design hadn‚Äôt been invented.</p><p>We didn‚Äôt have  or  for adjusting text sizes, and there was no CSS Grid or Flexible Box Layout for precise control over a layout. Now we do, and all these properties help to make Multi-Column Layout even more relevant today.</p><p>Now, you can use rem or viewport units combined with  and  to adapt the text size inside CSS Columns. You can use  to specify when columns are created, depending on the type of content they contain. Or you might use container queries to implement several columns only when a container is large enough to display them. Of course, you can also combine a Multi-Column Layout with CSS Grid or Flexible Box Layout for even more imaginative layout designs.</p><h3>Using Multi-Column Layout today</h3><p>My challenge was to implement a flexible article layout without media queries which adapts not only to screen size but also whether or not a  is present. To improve the readability of running text in what would potentially be too-long lines, it should be set in columns to narrow the measure. And, as a final touch, the text size should adapt to the width of the container, not the viewport.</p><p>The HTML for this layout is rudimentary. One , one , and one  (or not:)</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;section&gt;\n  &lt;main&gt;\n    &lt;h1&gt;About Patty&lt;/h1&gt;\n    &lt;p&gt;‚Ä¶&lt;/p&gt;\n  &lt;/main&gt;\n\n  &lt;figure&gt;\n    &lt;img&gt;\n  &lt;/figure&gt;\n&lt;/section&gt;</code></pre><p>I started by adding Multi-Column Layout styles to the  element using the  property to set the width of each column to  (characters). The  and automatic inline margins reduce the content width and center it in the viewport:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">main {\n  margin-inline: auto;\n  max-width: 100ch;\n  column-width: 40ch;\n  column-gap: 3rem;\n  column-rule: .5px solid #98838F;\n}</code></pre><p>Next, I applied a flexible box layout to the  only if it  a direct descendant which is a :</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">section:has(&gt; figure) {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0 3rem;\n}</code></pre><p>This next <code>min-width: min(100%, 30rem)</code> ‚Äî applied to both the  and  ‚Äî is a combination of the  property and the  CSS function. The  function allows you to specify two or more values, and a browser will choose the smallest value from them. This is incredibly useful for responsive layouts where you want to control the size of an element based on different conditions:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">section:has(&gt; figure) main {\n  flex: 1;\n  margin-inline: 0;\n  min-width: min(100%, 30rem);\n}\n\nsection:has(&gt; figure) figure {\n  flex: 4;\n  min-width: min(100%, 30rem);\n}</code></pre><p>What‚Äôs efficient about this implementation is that Multi-Column Layout styles are applied throughout, with no need for media queries to switch them on or off.</p><p>Adjusting text size in relation to column width helps improve readability. This has only recently become easy to implement with the introduction of container queries, their associated values including , , , and . And the  function. Fortunately, you don‚Äôt have to work out these text sizes manually as ClearLeft‚Äôs <a href=\"https://utopia.fyi/type/\" rel=\"noopener\">Utopia</a> will do the job for you.</p><p>My headlines and paragraph sizes are clamped to their minimum and maximum rem sizes and between them text is fluid depending on their container‚Äôs inline size:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">h1 { font-size: clamp(5.6526rem, 5.4068rem + 1.2288cqi, 6.3592rem); }\n\nh2 { font-size: clamp(1.9994rem, 1.9125rem + 0.4347cqi, 2.2493rem); }\n\np { font-size: clamp(1rem, 0.9565rem + 0.2174cqi, 1.125rem); }</code></pre><p>So, to specify the  as the container on which those text sizes are based, I applied a container query for its inline size:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">main {\n  container-type: inline-size;\n}</code></pre><p>Open the final result in a desktop browser, when you‚Äôre in front of one. It‚Äôs a flexible article layout without media queries which adapts to screen size and the presence of a . Multi-Column Layout sets text in columns to narrow the measure and the text size adapts to the width of its container, not the viewport.</p><h3>Modern CSS is solving many prior problems</h3><p>Almost every article I‚Äôve ever read about Multi-Column Layout focuses on its flaws, especially usability. CSS-Tricks‚Äô own Geoff Graham even mentioned the scrolling up and down issue when he asked, <a href=\"https://css-tricks.com/when-do-you-use-css-columns/\">‚ÄúWhen Do You Use CSS Columns?‚Äù</a></p><blockquote><p>‚ÄúBut an entire long-form article split into columns? I love it in newspapers but am hesitant to scroll down a webpage to read one column, only to scroll back up to do it again.‚Äù</p></blockquote><p>Fortunately, the  property ‚Äî which enables headlines, images, and quotes to span columns, resets the column flow, and instantly improves readability ‚Äî now has solid support in browsers:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">h1, h2, blockquote {\n  column-span: all; \n}</code></pre><p>But the solution to the scrolling up and down issue isn‚Äôt purely technical. It also requires content design. This means that content creators and designers must think carefully about the frequency and type of spanning elements, dividing a Multi-Column Layout into shallower sections, reducing the need to scroll and improving someone‚Äôs reading experience.</p><p>Another prior problem was preventing headlines from becoming detached from their content and figures, dividing their images and captions between columns. Thankfully, the  property now also has widespread support, so orphaned images and captions are now a thing of the past:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">figure {\n  break-after: column;\n}</code></pre><p>Open this final example in a desktop browser:</p><h3>You should take a fresh look at Multi-Column Layout</h3><p>Multi-Column Layout isn‚Äôt a shiny new tool. In fact, it remains one of the most underused layout tools in CSS. It‚Äôs had, and still has, plenty of problems, but they haven‚Äôt reduced its usefulness or its ability to add an extra level of refinement to a product or website‚Äôs design. Whether you haven‚Äôt used Multi-Column Layout in a while or maybe have never tried it, now‚Äôs the time to take a fresh look at Multi-Column Layout.</p>","contentLength":10903,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Positioning Text Around Elements With CSS Offset","url":"https://css-tricks.com/positioning-text-around-elements-with-css-offset/","date":1737730765,"author":"Preethi","guid":557,"unread":true,"content":"<p>When it comes to positioning elements on a page, including text, there are many ways to go about it in CSS ‚Äî the literal  property with corresponding  properties, , ,  (limited browser support at the moment), and so forth. The  property is another one that belongs in that list.</p><p>The  property is typically used for animating an element along a predetermined path. For instance, the square in the following example traverses a circular path:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"circle\"&gt;\n  &lt;div class=\"square\"&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@property --p {\n  syntax: '&lt;percentage&gt;';\n  inherits: false;\n  initial-value: 0%;\n}\n.square {\n  offset: top 50% right 50% circle(50%) var(--p);\n  transition: --p 1s linear;\n\n  /* Equivalent to:\n    offset-position: top 50% right 50%;\n    offset-path: circle(50%);\n    offset-distance: var(--p); */\n\n  /* etc. */\n}\n\n.circle:hover .square{ --p: 100%; }</code></pre><p>A registered CSS custom property () is used to set and animate the offset distance of the square element. The animation is possible because <strong>an element can be positioned at any point in a given path using </strong>. and maybe you didn‚Äôt know this, but  is a shorthand property comprised of the following constituent properties:</p><ul><li> The path‚Äôs starting point</li><li> The shape along which the element can be moved</li><li> A distance along the path on which the element is moved</li><li> The rotation angle of an element relative to its anchor point and offset path</li><li> A position within the element that‚Äôs aligned to the path</li></ul><p>The  property is the one that‚Äôs important to what we‚Äôre trying to achieve. It accepts a shape value ‚Äî including SVG shapes or CSS shape functions ‚Äî as well as reference boxes of the containing element to create the path.</p><p>Reference boxes? Those are an element‚Äôs dimensions according to the CSS Box Model, including , , , as well as SVG contexts, such as the , , and . <strong>These simplify how we position elements along the edges of their containing elements.</strong> Here‚Äôs an example: all the small squares below are placed in the default top-left corner of their containing elements‚Äô . In contrast, the small circles are positioned along the top-right corner ( into their containing elements‚Äô square perimeter) of the , , and , respectively.</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"big\"&gt;\n  &lt;div class=\"small circle\"&gt;&lt;/div&gt;\n  &lt;div class=\"small square\"&gt;&lt;/div&gt;\n  &lt;p&gt;She sells sea shells by the seashore&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;div class=\"big\"&gt;\n  &lt;div class=\"small circle\"&gt;&lt;/div&gt;\n  &lt;div class=\"small square\"&gt;&lt;/div&gt;\n  &lt;p&gt;She sells sea shells by the seashore&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;div class=\"big\"&gt;\n  &lt;div class=\"small circle\"&gt;&lt;/div&gt;\n  &lt;div class=\"small square\"&gt;&lt;/div&gt;\n  &lt;p&gt;She sells sea shells by the seashore&lt;/p&gt;\n&lt;/div&gt;</code></pre><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.small {\n  /* etc. */\n  position: absolute;\n\n  &amp;.square {\n    offset: content-box;\n    border-radius: 4px;\n  }\n\n  &amp;.circle { border-radius: 50%; }\n}\n\n.big {\n  /* etc. */\n  contain: layout; /* (or position: relative) */\n\n  &amp;:nth-of-type(1) {\n    .circle { offset: content-box 25%; }\n  }\n\n  &amp;:nth-of-type(2) {\n    border: 20px solid rgb(170 232 251);\n    .circle { offset: border-box 25%; }\n  }\n\n  &amp;:nth-of-type(3) {\n    padding: 20px;\n    .circle { offset: padding-box 25%; }\n  }\n}</code></pre><p> You can separate the element‚Äôs offset-positioned layout context if you don‚Äôt want to allocated space for it inside its containing parent element. That‚Äôs how I‚Äôve approached it in the example above so that the paragraph text inside can sit flush against the edges. As a result, the offset positioned elements (small squares and circles) are given their own contexts using , which removes them from the normal document flow.</p><p>This method, positioning relative to reference boxes, makes it easy to place elements like notification dots and ornamental ribbon tips along the periphery of some UI module. It further <strong>simplifies the placement of texts along a containing block‚Äôs edges</strong>, as  can also rotate elements along the path, thanks to . A simple example shows the date of an article placed at a block‚Äôs right edge:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;article&gt;\n  &lt;h1&gt;The Irreplaceable Value of Human Decision-Making in the Age of AI&lt;/h1&gt;\n  &lt;!-- paragraphs --&gt;\n  &lt;div class=\"date\"&gt;Published on 11&lt;sup&gt;th&lt;/sup&gt; Dec&lt;/div&gt;\n  &lt;cite&gt;An excerpt from the HBR article&lt;/cite&gt;\n&lt;/article&gt;</code></pre><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">article {\n  container-type: inline-size;\n  /* etc. */\n}\n\n.date {\n  offset: padding-box 100cqw 90deg / left 0 bottom -10px;\n  \n  /*\n    Equivalent to:\n    offset-path: padding-box;\n    offset-distance: 100cqw; (100% of the container element's width)\n    offset-rotate: 90deg;\n    offset-anchor: left 0 bottom -10px;\n  */\n}</code></pre><p>As we just saw, <strong>using the  property with a reference box path  container units is even more efficient</strong> ‚Äî you can easily set the offset distance based on the containing element‚Äôs width or height. I‚Äôll include a reference for learning more about container queries and container query units in the <a href=\"https://css-tricks.com/positioning-text-around-elements-with-css-offset/#aa-further-reading\">‚ÄúFurther Reading‚Äù</a> section at the end of this article.</p><p>There‚Äôs also the  property that‚Äôs used in that last example. It provides the anchor for the element‚Äôs displacement and rotation ‚Äî for instance, the 90 degree rotation in the example happens from the element‚Äôs bottom-left corner. The  property can also be used to move the element either inward or outward from the reference box by adjusting  values ‚Äî for instance, the  arguments pull the element‚Äôs bottom edge outwards from its containing element‚Äôs . This enhances the precision of placements, also demonstrated below.</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;figure&gt;\n  &lt;div class=\"big\"&gt;4&lt;/div&gt;\n  &lt;div class=\"small\"&gt;number four&lt;/div&gt;\n&lt;/figure&gt;</code></pre><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.small {\n  width: max-content;\n  offset: content-box 90% -54deg / center -3rem;\n\n  /*\n    Equivalent to:\n    offset-path: content-box;\n    offset-distance: 90%;\n    offset-rotate: -54deg;\n    offset-anchor: center -3rem;\n  */\n\n  font-size: 1.5rem;\n  color: navy;\n}</code></pre><p>As shown at the beginning of the article, offset positioning is animateable, which allows for dynamic design effects, like this:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;article&gt;\n  &lt;figure&gt;\n    &lt;div class=\"small one\"&gt;17&lt;sup&gt;th&lt;/sup&gt; Jan. 2025&lt;/div&gt;\n    &lt;span class=\"big\"&gt;Seminar&lt;br&gt;on&lt;br&gt;Literature&lt;/span&gt;\n    &lt;div class=\"small two\"&gt;Tickets Available&lt;/div&gt;\n  &lt;/figure&gt;\n&lt;/article&gt;</code></pre><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@property --d {\n  syntax: \"&lt;percentage&gt;\";\n  inherits: false;\n  initial-value: 0%;\n}\n\n.small {\n  /* other style rules */\n  offset: content-box var(--d) 0deg / left center;\n\n  /*\n    Equivalent to:\n    offset-path: content-box;\n    offset-distance: var(--d);\n    offset-rotate: 0deg;\n    offset-anchor: left center;\n  */\n\n  transition: --d .2s linear;\n\n  &amp;.one { --d: 2%; }\n  &amp;.two { --d: 70%; }\n}\n\narticle:hover figure {\n  .one { --d: 15%;  }\n  .two { --d: 80%;  }\n}</code></pre><p>Whether for graphic designs like text along borders, textual annotations, or even dynamic texts like error messaging, CSS offset is an easy-to-use option to achieve all of that. We can position the elements along the reference boxes of their containing parent elements, rotate them, and even add animation if needed.</p>","contentLength":6810,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Bun's on a roll with v1.2","url":"https://javascriptweekly.com/issues/720","date":1737676800,"author":"","guid":598,"unread":true,"content":"<a href=\"https://javascriptweekly.com/link/164760/rss\"><img src=\"https://res.cloudinary.com/cpress/image/upload/c_limit,w_480,h_480,q_auto/copm/329e3853.png\" width=\"193\" height=\"143\"></a><p> ‚Äî A fast and flexible DataGrid for building modern web apps. Key features and virtualized rendering are included in the core grid module. Pick &amp; choose special features to keep your app small. Built for JavaScript, extended to Angular, React, and&nbsp;Vue.</p><p>Wijmo From MESCIUS inc. </p>","contentLength":279,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"JavaScript Temporal is coming","url":"https://developer.mozilla.org/en-US/blog/javascript-temporal-is-coming/","date":1737676800,"author":"brian-smith","guid":89,"unread":true,"content":"<article>A new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.\n</article>","contentLength":204,"flags":null,"enclosureUrl":"https://developer.mozilla.org/en-US/blog/javascript-temporal-is-coming/featured.png","enclosureMime":"","commentsUrl":null},{"title":"Template literal types in TypeScript: parsing during type checking and more","url":"https://2ality.com/2025/01/template-literal-types.html","date":1737676800,"author":"Dr. Axel Rauschmayer","guid":345,"unread":true,"content":"<p>In this blog post, we take a closer look at template literal types in TypeScript: While their syntax is similar to JavaScript‚Äôs template literals, they operate at the type level. Their use cases include:</p><ul><li>Static syntax checking for string literals</li><li>Transforming the casing of property names (e.g. from hyphen case to camel case)</li><li>Concisely specifying large string literal union types</li></ul>","contentLength":379,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Some Things You Might Not Know About Custom Counter Styles","url":"https://css-tricks.com/some-things-you-might-not-know-about-custom-counter-styles/","date":1737652875,"author":"Geoff Graham","guid":556,"unread":true,"content":"<p>I was reading through Juan‚Äôs recent Almanac entry for the  at-rule and I‚Äôll be darned if he didn‚Äôt uncover and unpack some extremely interesting things that we can do to style lists, notably the list marker. You‚Äôre probably already aware of the  pseudo-element. You‚Äôve more than likely dabbled with custom counters using  and . Or maybe your way of doing things is to wipe out the  (careful when <a href=\"https://css-tricks.com/snippets/css/remove-list-markers-without-affecting-semantics/\">doing that</a>!) and hand-roll a marker on the list item‚Äôs  pseudo.</p><p>But have you toyed around with ? Turns out it does a lot of heavy lifting and opens up new ways of working with lists and list markers.</p><h3>You can style the marker of just one list item</h3><p>This is called a ‚Äúfixed‚Äù  set to a specific item.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@counter-style style-fourth-item {\n  system: fixed 4;\n  symbols: \"üí†\";\n  suffix: \" \";\n}\n\nli {\n  list-style: style-fourth-item;\n}</code></pre><h3>You can assign characters to specific markers</h3><p>If you go with an ‚Äúadditive‚Äù , then you can define which symbols belong to which list items.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@counter-style dice {\n  system: additive;\n  additive-symbols: 6 \"‚öÖ\", 5 \"‚öÑ\", 4 \"‚öÉ\", 3 \"‚öÇ\", 2 \"‚öÅ\", 1 \"‚öÄ\";\n  suffix: \" \";\n}\n\nli {\n  list-style: dice;\n}</code></pre><p>Notice how the  repeats once it reaches the end of the cycle and begins a new series based on the first item in the pattern. So, for example, there are six sides to typical dice and we start rolling two dice on the seventh list item, totaling seven.</p><h3>You can add a prefix and suffix to list markers</h3><p>A long while back, <a href=\"https://css-tricks.com/css-counters-custom-list-number-styling/\">Chris showed off</a> a way to insert punctuation at the end of a list marker using the list item‚Äôs  pseudo:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">ol {\n  list-style: none;\n  counter-reset: my-awesome-counter;\n\n  li {\n    counter-increment: my-awesome-counter;\n\n    &amp;::before {\n      content: counter(my-awesome-counter) \") \";\n    }\n  }\n}</code></pre><p>That‚Äôs much easier these days with :</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@counter-style parentheses {\n  system: extends decimal;\n  prefix: \"(\";\n  suffix: \") \";\n}</code></pre><h3>You can style multiple ranges of list items</h3><p>Let‚Äôs say you have a list of 10 items but you only want to style items 1-3. We can set a  for that:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@counter-style single-range {\n  system: extends upper-roman;\n  suffix: \".\";\n  range: 1 3;\n}\n\nli {\n  list-style: single-range;\n}</code></pre><p>We can even  our own dice example from earlier:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@counter-style dice {\n  system: additive;\n  additive-symbols: 6 \"‚öÖ\", 5 \"‚öÑ\", 4 \"‚öÉ\", 3 \"‚öÇ\", 2 \"‚öÅ\", 1 \"‚öÄ\";\n  suffix: \" \";\n}\n\n@counter-style single-range {\n  system: extends dice;\n  suffix: \".\";\n  range: 1 3;\n}\n\nli {\n  list-style: single-range;\n}</code></pre><p>Another way to do that is to use the  keyword as the first value:</p><pre rel=\"CSS\" data-line=\"10\"><code markup=\"tt\">@counter-style dice {\n  system: additive;\n  additive-symbols: 6 \"‚öÖ\", 5 \"‚öÑ\", 4 \"‚öÉ\", 3 \"‚öÇ\", 2 \"‚öÅ\", 1 \"‚öÄ\";\n  suffix: \" \";\n}\n\n@counter-style single-range {\n  system: extends dice;\n  suffix: \".\";\n  range: infinite 3;\n}\n\nli {\n  list-style: single-range;\n}</code></pre><p>Speaking of , you can set it as the second value and it will count up infinitely for as many list items as you have.</p><p>Maybe you want to style two ranges at a time and include items 6-9. I‚Äôm not sure why the heck you‚Äôd want to do that but I‚Äôm sure you (or your <a href=\"https://www.kaushik.net/avinash/seven-steps-to-creating-a-data-driven-decision-making-culture/\" rel=\"noopener\">HIPPO</a>) have got good reasons.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@counter-style dice {\n  system: additive;\n  additive-symbols: 6 \"‚öÖ\", 5 \"‚öÑ\", 4 \"‚öÉ\", 3 \"‚öÇ\", 2 \"‚öÅ\", 1 \"‚öÄ\";\n  suffix: \" \";\n}\n\n@counter-style multiple-ranges {\n  system: extends dice;\n  suffix: \".\";\n  range: 1 3, 6 9;\n}\n\nli {\n  list-style: multiple-ranges;\n}</code></pre><h3>You can add padding around the list markers</h3><p>You ever run into a situation where your list markers are unevenly aligned? That usually happens when going from, say, a single digit to a double-digit. You can  the marker with extra characters to line things up.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* adds leading zeroes to list item markers */\n@counter-style zero-padded-example {\n  system: extends decimal;\n  pad: 3 \"0\";\n}</code></pre><p>Now the markers will always be aligned‚Ä¶ well, up to 999 items.</p><p>I just thought those were some pretty interesting ways to work with list markers in CSS that run  (get it?!) to how I‚Äôve traditionally approached this sort of thing. And with  becoming Baseline ‚Äúnewly available‚Äù in September 2023, it‚Äôs well-supported in browsers.</p>","contentLength":4045,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"This Week In React #218: React-Scan, Server Functions, Portals, Forms, Storybook, React Aria, Unpic, React Native 0.77, Reanimated, Expo, EAS, Legend-List, Shadowlist, Document Picker, BottomTabs, Swift, Bun, Rspack, Vitest, Biome, ESLint...","url":"https://thisweekinreact.com/newsletter/218","date":1737504000,"author":"","guid":602,"unread":true,"content":"<p>This is a crazy week, we have a lot of major releases coming from everywhere, in all the sections of this newsletter, that it's impossible to cover them all as they deserve.</p><p>I'm particularly excited about the React Native ecosystem improving CSS compatibility with v0.77 and Reanimated v4. This is awesome news for cross-platform development compatibility.</p><p>The frontend ecosystem is on fire too üî• with awesome releases such as Bun 1.2, Rspack 1.2, Vitest 3.0.</p><p>And, Tailwind v4 is expected to drop anytime soon too ! (just after I hit send of course üòÖ)</p><p>As always, thanks for supporting us on your favorite platform:</p><p>If your authentication isn't , it's .</p><p>With <a href=\"https://www.propelauth.com/?utm_source=newsletter&amp;utm_campaign=twinrjan222024\" target=\"_blank\" rel=\"noopener noreferrer\">PropelAuth</a>, you get everything you need to launch and scale your B2B product:</p><ul><li><strong>UIs that cover all your use cases</strong> - signup, login, MFA, organization management and more.</li><li> so you can provide top-notch support to your users.</li><li> and <strong>advanced security features</strong> so you can be upmarket-ready.</li><li> to help you strategize and expand.</li></ul><p>This is the first official release of React Scan, a new React performance tool that has been trending on social platforms lately with many great demos from its creator Aiden Bai. It‚Äôs easy to install and helps you find unwanted React re-renders with a great DX, a bit like ‚Äúwhy-did-you-update‚Äù on steroids. Related podcast: üéôÔ∏è <a href=\"https://www.youtube.com/watch?v=pyV1wMcOtN0\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript Jabber - Optimizing React with React Scan</a>.</p><p>Meticulous creates and maintains an exhaustive suite of e2e ui tests with  developer effort.</p><p>This quote from the CTO of Traba sums the product&nbsp;up best: \"Meticulous has fundamentally changed the way we approach frontend testing in our web applications, fully eliminating the need to write any frontend tests. The software gives us confidence that every change will be completely regression tested, allowing us to ship more quickly with significantly fewer bugs in our code. The platform is easy to use and reduces the barrier to entry for backend-focused devs to contribute to our frontend codebase.\"</p><p>Meticulous is used by companies like Lattice, Bilt Rewards, Power and many others.</p><p>This <a href=\"https://www.meticulous.ai/blog/lessons-from-a-decade?utm_source=thisweekinreact&amp;utm_campaign=jan15th\" target=\"_blank\" rel=\"noopener noreferrer\">post</a>&nbsp;from our CTO sets out the context of why exhaustive testing can double engineering velocity.</p><p>As planned, the next React Native version just dropped. It notably ships with:</p><ul><li>CSS support improvement: , , , and </li><li>Support for Android 15 edge-to-edge and 16KB memory page size (perf improvement)</li><li>iOS init template with Swift AppDelegate</li></ul><p>Good news for Expo users: <a href=\"https://expo.dev/changelog/2025/01-21-react-native-0.77\" target=\"_blank\" rel=\"noopener noreferrer\">SDK 52 already supports v0.77</a>, alongside many infrastructure packages (Screens, RNGH, Reanimated). For React 19 support, we‚Äôll have to wait v0.78, but I could come sooner than you expect!</p><p>Reanimated 4 is in beta, and it‚Äôs a huge one! üî• The animation core has been revamped. You can now just animate things, with regular CSS, on the native thread, thanks to newly added support for:</p><ul></ul><p>This is particularly exciting for React Native micro-interactions with greatly reduced boilerplate, and the ability to ship cross-platform animations. The existing worklet APIs remains retrocompatible and relevant for more advanced needs. However, the New Architecture is now a requirement.</p>","contentLength":3083,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ECMAScript proposal: RegExp escaping","url":"https://2ality.com/2025/01/regexp-escape.html","date":1737417600,"author":"Dr. Axel Rauschmayer","guid":344,"unread":true,"content":"<p>The ECMAScript proposal <a href=\"https://github.com/tc39/proposal-regex-escaping\">‚ÄúRegExp escaping‚Äù</a> (by Jordan Harband and Kevin Gibbons) specifies a function  that, given a string , creates an escaped version that matches  ‚Äì if interpreted as a regular expression.</p><p>This proposal is currently at stage 3.</p>","contentLength":251,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"TypeScript enums: use cases and alternatives","url":"https://2ality.com/2025/01/typescript-enum-patterns.html","date":1737244800,"author":"Dr. Axel Rauschmayer","guid":343,"unread":true,"content":"<p>In this blog post, we take a closer look at TypeScript enums:</p><ul><li>What are their use cases?</li><li>What are the alternatives if we don‚Äôt want to use them?</li></ul><p>The blog post concludes with recommendations for what to use when.</p>","contentLength":209,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["frontend"]}