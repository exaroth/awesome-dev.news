{"id":"KRywisgR8sLBktB","title":"JS/Frontend","displayTitle":"JS/Frontend","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":10,"items":[{"title":"The unexpected way in which conditional types constrain type variables in TypeScript","url":"https://2ality.com/2025/02/conditional-type-constraints.html","date":1740268800,"author":"Dr. Axel Rauschmayer","guid":9582,"unread":true,"content":"<p>The TypeScript handbook makes an interesting <a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#conditional-type-constraints\">statement</a>: ‚ÄúOften, the checks in a conditional type will provide us with some new information. Just like narrowing with type guards can give us a more specific type, the true branch of a conditional type will further constrain generics by the type we check against.‚Äù</p><p>In this blog post, we‚Äôll see that this goes further than you may think.</p>","contentLength":388,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Toe Dipping Into View Transitions","url":"https://css-tricks.com/toe-dipping-into-view-transitions/","date":1740148498,"author":"Geoff Graham","guid":8627,"unread":true,"content":"<p>I‚Äôll be honest and say that the View Transition API intimidates me more than a smidge. There are plenty of tutorials with the most impressive demos showing how we can animate the transition between two pages, and they usually start with the <a href=\"https://css-tricks.com/snippets/css/basic-view-transition/\">simplest of all examples</a>.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@view-transition {\n  navigation: auto;\n}</code></pre><p>That‚Äôs usually where the simplicity ends and the tutorials venture deep into JavaScript territory. There‚Äôs nothing wrong with that, of course, except that it‚Äôs a mental leap for someone like me who learns by building up rather than leaping through. So, I was darned inspired when I saw <a href=\"https://daverupert.com/2023/05/getting-started-view-transitions/\" rel=\"noopener\">Uncle Dave</a> and <a href=\"https://blog.jim-nielsen.com/2025/view-transition-name-gotchas/\" rel=\"noopener\">Jim Neilsen</a> trading tips on a super practical transition: post titles.</p><p>You can see how it works on Jim‚Äôs site:</p><p>This is the perfect sort of toe-dipping experiment I like for trying new things. And it starts with the same little  snippet which is used to opt both pages into the View Transitions API: the page we‚Äôre on and the page we‚Äôre navigating to. From here on out, we can think of those as the ‚Äúnew‚Äù page and the ‚Äúold‚Äù page, respectively.</p><p>I was able to get the same effect going on my personal blog:</p><p>Perfect little exercise for a blog, right? It starts by setting the  on the elements we want to participate in the transition which, in this case, is the post title on the ‚Äúold‚Äù page and the post title on the ‚Äúnew‚Äù page.</p><p>So, if this is our markup:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;h1 class=\"post-title\"&gt;Notes&lt;/h1&gt;\n&lt;a class=\"post-link\" href=\"/link-to-post\"&gt;&lt;/a&gt;</code></pre><p>‚Ä¶we can give them the same  in CSS:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.post-title { view-transition-name: post-title; }\n.post-link { view-transition-name: post-title; }</code></pre><p>Dave is quick to point out that we can make sure we respect users who prefer reduced motion and only apply this if their system preferences allow for motion:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@media not (prefers-reduced-motion: reduce) {\n  .post-title { view-transition-name: post-title; }\n  .post-link { view-transition-name: post-title; }\n}</code></pre><p>If those were the only two elements on the page, then this would work fine. But what we have is a list of post links and all of them have to have their own unique . This is where Jim got a little stuck in his work because how in the heck do you accomplish that when new blog posts are published all the time? Do you have to edit your CSS and come up with a new transition name each and every time you want to post new content? Nah, there‚Äôs got to be a better way.</p><p>And there is. Or, at least there will be. It‚Äôs just not standard yet. Bramus, in fact, wrote about it very recently when <a href=\"https://www.bram.us/2025/01/20/css-attr-gets-an-upgrade/\" rel=\"noopener\">discussing Chrome‚Äôs work on the  function</a> which will be able to generate a series of unique identifiers in a single declaration. Check out this CSS from the future:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;style&gt;\n  .card[id] {\n    view-transition-name: attr(id type(&lt;custom-ident&gt;), none); /* card-1, card-2, card-3, ‚Ä¶ */\n    view-transition-class: card;\n  }\n&lt;/style&gt;\n\n&lt;div class=\"cards\"&gt;\n  &lt;div class=\"card\" id=\"card-1\"&gt;&lt;/div&gt;\n  &lt;div class=\"card\" id=\"card-2\"&gt;&lt;/div&gt;\n  &lt;div class=\"card\" id=\"card-3\"&gt;&lt;/div&gt;\n  &lt;div class=\"card\" id=\"card-4\"&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre><p>Daaaaa-aaaang that is going to be handy! I want it , darn it! Gotta have to wait not only for Chrome to develop it, but for other browsers to adopt and implement it as well, so who knows when we‚Äôll actually get it. For now, the best bet is to use a little programmatic logic directly in the template. My site runs on WordPress, so I‚Äôve got access to PHP and can generate an inline style that sets the  on both elements.</p><p>The post title is in the template for my individual blog posts. That‚Äôs the  file in WordPress parlance.</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">&lt;?php the_title( \n  '&lt;h1 class=\"post-single__title\" style=\"view-transition-name: post-' . get_the_id() . '\"&gt;', '&lt;/h1&gt;'\n); ?&gt;</code></pre><p>The post links are in the template for post archives. That‚Äôs typically  in WordPress:</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">&lt;?php the_title(\n  '&lt;h2 class=\"post-link&gt;&lt;a href=\"' . esc_url( get_permalink() ) .'\" rel=\"bookmark\" style=\"view-transition-name: post-' . get_the_id() . '\"&gt;', '&lt;/a&gt;&lt;/h2&gt;' \n); ?&gt;</code></pre><p>See what‚Äôs happening there? The  property is set on both transition elements directly inline, using PHP to generate the name based on the post‚Äôs assigned ID in WordPress. Another way to do it is to drop a  tag in the template and plop the logic in there. Both are equally icky compared to what  will be able to do in the future, so pick your poison.</p><p>The important thing is that now both elements share the same  and that we also have already opted into . With those two ingredients in place, the transition works! We don‚Äôt even need to define  (but you totally could) because the default transition does all the heavy lifting. </p><p>In the same toe-dipping spirit, I caught the latest issue of <a href=\"https://modern-web-weekly.ghost.io\" rel=\"noopener\">Modern Web Weekly</a> and love this little sprinkle of view transition on radio inputs:</p><p>Notice the JavaScript that is needed to prevent the radio‚Äôs default clicking behavior in order to allow the transition to run before the input is checked.</p>","contentLength":4855,"flags":null,"enclosureUrl":"https://css-tricks.com/wp-content/uploads/2025/02/Screen-Recording-2025-02-14-at-2.31.25‚ÄØPM.mov","enclosureMime":"","commentsUrl":null},{"title":"The latest from TC39's recent meeting","url":"https://javascriptweekly.com/issues/724","date":1740096000,"author":"","guid":8596,"unread":true,"content":"<p>üò∞ Is your vehicle data giving you anxiety? Mine too. That's why I built <a href=\"https://javascriptweekly.com/link/166014/rss\">CarsXE</a>. Now I just have existential dread. Progress! <a href=\"https://javascriptweekly.com/link/166014/rss\">Start for Free Now! </a></p>","contentLength":148,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Demo: running TypeScript directly in Node.js","url":"https://2ality.com/2025/02/nodejs-type-stripping-demo.html","date":1740009600,"author":"Dr. Axel Rauschmayer","guid":7202,"unread":true,"content":"<p>I have published the repository <a href=\"https://github.com/rauschma/nodejs-type-stripping\"></a> which demonstrates how to implement a package with a bin script that is written directly in TypeScript (no transpilation).</p>","contentLength":155,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Working With Multiple CSS Anchors and Popovers Inside the WordPress Loop","url":"https://css-tricks.com/working-with-multiple-css-anchors-and-popovers-inside-the-wordpress-loop/","date":1739973331,"author":"Geoff Graham","guid":5815,"unread":true,"content":"<p>I know,  niche, but it could be any loop, really. The challenge is having multiple tooltips on the same page that make use of the <a href=\"https://css-tricks.com/poppin-in/\">Popover API</a> for toggling goodness and <a href=\"https://css-tricks.com/css-anchor-positioning-guide/\">CSS Anchor Positioning</a> for attaching a tooltip to its respective anchor element.</p><p>There‚Äôs plenty of moving pieces when working with popovers:</p><ul><li>A  needs to reference that ID.</li><li>IDs have to be unique for semantics, yes, but also to hook a  into a .</li></ul><p>That‚Äôs just the part dealing with the Popover API. Turning to anchors:</p><ul><li>An anchor needs an .</li><li>A target element needs to reference that .</li><li>Each  must be unique to attach the target to its anchor properly.</li></ul><p>The requirements themselves are challenging. But it‚Äôs more challenging working inside a loop because you need a way to generate unique IDs and anchor names so everything is hooked up properly without conflicting with other elements on the page. In WordPress, we query an array of page objects:</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">$property_query = new WP_Query(array(\n  'post_type' =&gt; 'page',\n  'post_status' =&gt; 'publish',\n  'posts_per_page' =&gt; -1, // Query them all!\n  'orderby' =&gt; 'title',\n  'order' =&gt; \"ASC\"\n));</code></pre><p>Before we get into our  statement I‚Äôd like to stub out the HTML. This is how I want a page object to look inside of its container:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"almanac-group\"&gt;\n  &lt;div class=\"group-letter\"&gt;&lt;a href=\"#\"&gt;A&lt;/a&gt;&lt;/div&gt;\n  &lt;div class=\"group-list\"&gt;\n    &lt;details id=\"\" class=\"group-item\"&gt;\n      &lt;summary&gt;\n        &lt;h2&gt;&lt;code&gt;accent-color&lt;/code&gt;&lt;/h2&gt;\n      &lt;/summary&gt;\n    &lt;/details&gt;\n\n    &lt;!-- Repeat for all properties --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;!-- Repeat for the entire alphabet --&gt;</code></pre><p>OK, let‚Äôs stub out the tooltip markup while we‚Äôre here, focusing just inside the  element since that‚Äôs what represents a single page.</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;details id=\"page\" class=\"group-item\"&gt;\n  &lt;summary&gt;\n    &lt;h2&gt;&lt;code&gt;accent-color&lt;/code&gt;&lt;/h2&gt;\n\n    &lt;span id=\"tooltip\" class=\"tooltip\"&gt;\n      &lt;!-- Popover Target and Anchor --&gt;\n      &lt;button class=\"info-tip-button\" aria-labelledby=\"experimental-label\" popovertarget=\"experimental-label\"&gt;  \n        &lt;!-- etc. --&gt;\n      &lt;/button&gt;\n\n      &lt;!-- Popover and Anchor Target --&gt;\n      &lt;div popover id=\"experimental-label\" class=\"info-tip-content\" role=\"tooltip\"&gt;\n        Experimental feature\n      &lt;/div&gt;\n    &lt;/span&gt;\n  &lt;/summary&gt;\n&lt;/details&gt;</code></pre><p>With me so far? We‚Äôll start with the Popover side of things. Right now we have a  that is connected to a . Clicking the former toggles the latter.</p><p>Styling isn‚Äôt really what we‚Äôre talking about, but it does help to reset a few popover things so it doesn‚Äôt get that border and sit directly in the center of the page. You‚Äôll want to <a href=\"https://css-irl.info/progressively-enhanced-popover-toggletips/\" rel=\"noopener\">check out Michelle Barker‚Äôs article</a> for some great tips that make this enhance progressively.</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.info-tip {\n  position: relative; /* Sets containment */\n\n  /* Bail if Anchor Positioning is not supported */\n  [popovertarget] {\n    display: none;\n  }\n\n  /* Style things up if Anchor Positioning is supported */\n  @supports (anchor-name: --infotip) {\n\n    [popovertarget] {\n      display: inline;\n      position: relative;\n    }\n\n    [popover] {\n      border: 0; /* Removes default border */\n      margin: 0; /* Resets placement */\n      position: absolute; /* Required */\n  }\n}</code></pre><p>This is also the point at which you‚Äôll want to start using Chrome because Safari and Firefox are still working on supporting the feature.</p><p>We‚Äôre doing good! The big deal at the moment is positioning the tooltip‚Äôs content so that it is beside the button. This is where we can start working with Anchor Positioning. <a href=\"https://css-tricks.com/css-anchor-positioning-guide/\">Juan Diego‚Äôs guide is the bee‚Äôs knees</a> if you‚Äôre looking for a deep dive. The gist is that we can connect an anchor to its target element in CSS. First, we register the  as the anchor element by giving it an . Then we anchor the  to the  with  and use the  function on its inset properties to position it exactly where we want, relative to the :</p><pre rel=\"CSS\" data-line=\"13,22,23,24\"><code markup=\"tt\">.tooltip {\n  position: relative; /* Sets containment */\n\n  /* Bail if Anchor Positioning is not supported */\n  [popovertarget] {\n    display: none;\n  }\n\n  /* Style things up if Anchor Positioning is supported */\n  @supports (anchor-name: --tooltip) {\n\n    [popovertarget] {\n      anchor-name: --tooltip;\n      display: inline;\n      position: relative;\n    }\n\n    [popover] {\n      border: 0; /* Removes default border */\n      margin: 0; /* Resets placement */\n      position: absolute; /* Required */\n      position-anchor: --tooltip;\n      top: anchor(--tooltip -15%);\n      left: anchor(--tooltip 110%);\n    }\n  }\n}</code></pre><p>This is exactly what we want! But it‚Äôs also where things more complicated when we try to add more tooltips to the page. Notice that both buttons want to cull the same tooltip.</p><p>That‚Äôs no good. What we need is a unique ID for each tooltip. I‚Äôll simplify the HTML so we‚Äôre looking at the right spot:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;details&gt;\n  &lt;!-- ...  --&gt;\n\n    &lt;!-- Popover Target and Anchor --&gt;\n    &lt;button class=\"info-tip-button\" aria-labelledby=\"experimental-label\" popovertarget=\"experimental-label\"&gt;  \n      &lt;!-- ... --&gt;\n    &lt;/button&gt;\n\n    &lt;!-- Popover and Anchor Target --&gt;\n    &lt;div popover id=\"experimental-label\" class=\"info-tip-content\" role=\"tooltip\"&gt;\n      Experimental feature\n    &lt;/div&gt;\n    \n    &lt;!-- ... --&gt;\n\n&lt;/details&gt;</code></pre><p>The popover has an ID of . The anchor references it in the  attribute. This connects them but also connects other tooltips that are on the page. What would be ideal is to have a sequence of IDs, like:</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;!-- Popover and Anchor Target --&gt;\n&lt;div popover id=\"experimental-label-1\" class=\"info-tip-content\" role=\"tooltip\"&gt; ... &lt;/div&gt;\n&lt;div popover id=\"experimental-label-2\" class=\"info-tip-content\" role=\"tooltip\"&gt; ... &lt;/div&gt;\n&lt;div popover id=\"experimental-label-3\" class=\"info-tip-content\" role=\"tooltip\"&gt; ... &lt;/div&gt;\n&lt;!-- and so on... --&gt;</code></pre><p>We can make the page query into a function that we call:</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">function letterOutput($letter, $propertyID) {\n  $property_query = new WP_Query(array(\n    'post_type' =&gt; 'page',\n    'post_status' =&gt; 'publish',\n    'posts_per_page' =&gt; -1, // Query them all!\n    'orderby' =&gt; 'title',\n    'order' =&gt; \"ASC\"\n  ));\n}</code></pre><p>And when calling the function, we‚Äôll take two arguments that are specific only to what I was working on. If you‚Äôre curious, we have a structured set of pages that go Almanac ‚Üí Type ‚Üí Letter ‚Üí Feature (e.g., Almanac ‚Üí Properties ‚Üí A ‚Üí ). This function outputs the child pages of a ‚ÄúLetter‚Äù (i.e., A ‚Üí , , etc.). A child page might be an ‚Äúexperimental‚Äù CSS feature and we‚Äôre marking that in the UI with tooltops next to each experimental feature.</p><p>We‚Äôll put the HTML into an object that we can return when calling the function. I‚Äôll cut it down for brevity‚Ä¶</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">$html .= '&lt;details id=\"page\" class=\"group-item\"&gt;';\n$html .=   '&lt;summary&gt;';\n$html .=     '&lt;h2&gt;&lt;code&gt;accent-color&lt;/code&gt;&lt;/h2&gt;';\n$html .=     '&lt;span id=\"tooltip\" class=\"tooltip\"&gt;';\n$html .=       '&lt;button class=\"info-tip-button\" aria-labelledby=\"experimental-label\" popovertarget=\"experimental-label\"&gt;  ';\n// ...\n$html .=       '&lt;/button&gt;';\n$html .=       '&lt;div popover id=\"experimental-label\" class=\"info-tip-content\" role=\"tooltip\"&gt;';\n// ...\n$html .=       '&lt;/div&gt;';\n$html .=     '&lt;/span&gt;';\n$html .=   '&lt;/summary&gt;';\n$html .= '&lt;/details&gt;';\n\nreturn $html;</code></pre><p>WordPress has some functions we can leverage for looping through this markup. For example, we can insert  in place of the hardcoded post title:</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">$html .= '&lt;h2&gt;&lt;code&gt;' . get_the_title(); . '&lt;/code&gt;&lt;/h2&gt;';</code></pre><p>We can also use  to insert the unique identifier associated with the post. For example, we can use it to give each  element a unique ID:</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">$html .= '&lt;details id=\"page-' . get_the_id(); . '\" class=\"group-item\"&gt;';</code></pre><p>This is the secret sauce for getting the unique identifiers needed for the popovers:</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">// Outputs something like `id=\"experimental-label-12345\"`\n$html .= '&lt;div popover id=\"experimental-label-' . get_the_id(); . '\" class=\"info-tip-content\" role=\"tooltip\"&gt;';</code></pre><p>We can do the exact same thing on the  so that each button is wired to the right popover:</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">$html .= '&lt;button class=\"info-tip-button\" aria-labelledby=\"experimental-label-' . get_the_id(); . '\" popovertarget=\"experimental-label\"&gt;  ';</code></pre><p>We ought to do the same thing to the  element itself to distinguish one from another:</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">$html .= '&lt;span id=\"tooltip-' . get_the_id(); . '\" class=\"tooltip\"&gt;';</code></pre><p>I can‚Äôt exactly recreate a WordPress instance in a CodePen demo, but here‚Äôs a simplified example with similar markup:</p><p>The popovers work! Clicking either one triggers its respective  element. The problem you may have realized is that the targets are both attached to the same anchor element ‚Äî so it looks like we‚Äôre triggering the same  when clicking either button!</p><p>This is the CSS side of things. What we need is a similar way to apply unique identifiers to each anchor, but as dashed-idents instead of IDs. Something like this:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* First tooltip */\n#info-tip-1 {\n  [popovertarget] {\n    anchor-name: --infotip-1;\n  }\n\n  [popover] {\n    position-anchor: --infotip-1;\n    top: anchor(--infotip-1 -15%);\n    left: anchor(--infotip-1 100%);\n  }\n}\n\n/* Second tooltip */\n#info-tip-2 {\n  [popovertarget] {\n    anchor-name: --infotip-1;\n  }\n\n  [popover] {\n    position-anchor: --infotip-1;\n    top: anchor(--infotip-1 -15%);\n    left: anchor(--infotip-1 100%);\n  }\n}\n\n/* Rest of tooltips... */</code></pre><p>This is where I feel like I had to make a compromise. I could have leveraged an  loop in Sass to generate unique identifiers but then I‚Äôd be introducing a new dependency. I could also drop a  tag directly into the WordPress template and use the same functions to generate the same post identifiers but then I‚Äôm maintaining styles in PHP.</p><p>I chose the latter. I like having dashed-idents that match the IDs set on the  and . It ain‚Äôt pretty, but it works:</p><pre rel=\"PHP\" data-line=\"\"><code markup=\"tt\">$html .= '\n&lt;style&gt;\n  #info-tip-' . get_the_id() . ' {\n    [popovertarget] {\n      anchor-name: --infotip-' . get_the_id() . ';\n    }\n\n    [popover] {\n      position-anchor: --infotip-' . get_the_id() . ';\n      top: anchor(--infotip-' . get_the_id() . ' -15%);\n      left: anchor(--infotip-' . get_the_id() . ' 100%);\n    }\n  }\n&lt;/style&gt;'</code></pre><p>The only thing I had left to do for my specific use case was add a conditional statement that outputs the tooltip only if it is marked an ‚ÄúExperimental Feature‚Äù in the CMS. But you get the idea.</p><h3>Isn‚Äôt there a better way?!</h3><p>Yes! But not quite yet. <a href=\"https://www.bram.us/2024/12/18/the-future-of-css-construct-custom-idents-and-dashed-idents-with-ident/\" rel=\"noopener\">Bramus proposed a new  function</a> that, when it becomes official, will generate a series of dashed idents that can be used to name things like the anchors I‚Äôm working with and prevent those names from colliding with one another.</p><pre rel=\"HTML\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"group-list\"&gt;\n  &lt;details id=\"item-1\" class=\"group-item\"&gt;...&lt;/details&gt;\n  &lt;details id=\"item-2\" class=\"group-item\"&gt;...&lt;/details&gt;\n  &lt;details id=\"item-3\" class=\"group-item\"&gt;...&lt;/details&gt;\n  &lt;details id=\"item-4\" class=\"group-item\"&gt;...&lt;/details&gt;\n  &lt;details id=\"item-5\" class=\"group-item\"&gt;...&lt;/details&gt;\n  &lt;!-- etc. --&gt;\n&lt;/div&gt;</code></pre><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">/* Hypothetical example ‚Äî does not work! */\n.group-item { \n  anchor-name: ident(\"--infotip-\" attr(id) \"-anchor\");\n  /* --infotip-item-1-anchor, --infotip-item-2-anchor, etc. */\n}</code></pre><p>Let‚Äôs keep our fingers crossed for that to hit the specifications soon!</p>","contentLength":10981,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The bottom type never in TypeScript","url":"https://2ality.com/2025/02/typescript-never.html","date":1739923200,"author":"Dr. Axel Rauschmayer","guid":6012,"unread":true,"content":"<p>In this blog post, we look at the special TypeScript type  which, roughly, is the type of things that never happen. As we‚Äôll see, it has a surprising number of applications.</p>","contentLength":175,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"This Week In React #222: CRA, React Router, captureOwnerStack, TanStack, CTRA, tRPC, Astro, Preact | RN 0.78, React 19, Expo, noCompress, JitPack, CRNL, Screens | TC39, Interop, TS, CSS, Node.js, Deno","url":"https://thisweekinreact.com/newsletter/222","date":1739923200,"author":"","guid":5992,"unread":true,"content":"<p>This week we have 2 official blog posts from the React and React Native core teams! CRA is deprecated and React Native 0.78 is out with React 19 support.</p><p>üéÇ We're also celebrating this newsletter's 5th anniversary! The <a href=\"https://substack.thisweekinreact.com/p/react-hebdo-sebastien-lorber-1-20-02-13\" target=\"_blank\" rel=\"noopener noreferrer\">first issue</a> went out on February 13th. For the first 2 years it was only in French. I‚Äôd love to know who's been reading since the early days‚Äîsay hi if you have! üòÄ</p><p>Check our partner conf  - &nbsp;üá´üá∑ Paris - April 1-2 - 15% discount with code \"TWIR\". The French React Native conference is back with Britta Evans-Fenton (Shopify), Kadi Kraman (Expo), Krzysztof Piaskowy (Software Mansion), Saad Najmi (Microsoft) and more - and great deep-diving talks!</p><p>As always, thanks for supporting us on your favorite platform:</p><p>If your authentication isn't , it's .</p><p>With <a href=\"https://www.propelauth.com/?utm_source=newsletter&amp;utm_campaign=twinrjan222024\" target=\"_blank\" rel=\"noopener noreferrer\">PropelAuth</a>, you get everything you need to launch and scale your B2B product:</p><ul><li><strong>UIs that cover all your use cases</strong> - signup, login, MFA, organization management and more.</li><li> so you can provide top-notch support to your users.</li><li> and <strong>advanced security features</strong> so you can be upmarket-ready.</li><li> to help you strategize and expand.</li></ul><p>Long overdue, CRA has received the latest React 19 fixes and is now officially deprecated. This article explains the limits of the CRA and build tools regarding routing, waterfalls, code splitting, and more. The React team encourages us to adopt a framework like Next.js, React Router, or Expo to address these issues. However, you can still <a href=\"https://react.dev/learn/build-a-react-app-from-scratch\" target=\"_blank\" rel=\"noopener noreferrer\">build a React app from scratch</a> using Vite, Parcel, Rsbuild, or other modern build tools.</p><p>The initial announcement sparked heated debates on X and GitHub, mainly because it overemphasized frameworks at the expense of build tools like Vite. It was <a href=\"https://github.com/reactjs/react.dev/pull/7624\" target=\"_blank\" rel=\"noopener noreferrer\">soon updated</a> to address these concerns. All this also led to potential collaboration opportunities between <a href=\"https://github.com/facebook/react/pull/31768#issuecomment-2666856223\" target=\"_blank\" rel=\"noopener noreferrer\">Evan You (Vite) and the React team</a> to work together on an opinionated \"official\" way to integrate with Vite with React Server Components, with a commitment to maintain this integration over time in the React repository.</p><p>Reactile is an UI/UX turnkey framework which features an out-of-the-box, intuitive tiling display with workspaces. It encourages parallel workloads for large web solutions within a single browser tab. Implement your own view containers, widgets and logic using React and let Reactile handle the display for you.</p><p>On top of that, Reactile also offers:</p><ul><li>A promise-based persistence mechanism which permits a uniform workflow across time and on multiple devices.</li><li>The possibility to use nested tabs for your tiles.</li><li>A simplified global search mechanism.</li><li>CSS @container based responsiveness.</li></ul><p>Version 2 coming out soon. Get started with your unique 30-day free trial. Learn more about it on reactile.net.</p><p>I bet you weren't expecting a React Native release so soon, but the team recently decided to releases smaller versions more frequently. Here are the highlights:</p><ul><li>Simplified process to enable the React Compiler.</li><li>Metro log streaming is back in 0.78 and 0.77.1, but opt-in with a new  flag, and still deprecated.</li><li> supports Android XML resources, unlocking possible perf improvements.</li><li> on iOS to ease brownfield usage in any ViewController</li></ul><p>React 19 itself unlocks many cool things:</p><ul><li>Actions (async transitions), , , all useful to submit forms and manage loading, error, and optimistic state</li><li>Use  as a regular prop instead of , also supporting a ref cleanup function</li><li>Use  instead of </li><li>Read contexts and promises with </li></ul>","contentLength":3397,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The What If Machine: Bringing the ‚ÄúIffy‚Äù Future of CSS into the Present","url":"https://css-tricks.com/the-what-if-machine-bringing-the-iffy-future-of-css-into-the-present/","date":1739802280,"author":"Lee Meyer","guid":1858,"unread":true,"content":"<h3>You say the whole world‚Äôs ending ‚Äî honey, it already did</h3><p>My thesis for today‚Äôs article offers further reassurance that inline conditionals are probably not the harbinger of the end of civilization: I reckon we can achieve the same functionality right now with <a href=\"https://css-tricks.com/digging-deeper-into-container-style-queries/\">style queries</a>, which are gaining <a href=\"https://caniuse.com/css-container-queries-style\" rel=\"noopener\">pretty good browser support</a>.</p><p>If I‚Äôm right, Lea‚Äôs proposal is more like syntactic sugar which would sometimes be convenient and allow cleaner markup. It‚Äôs amusing that any panic-mongering about inline conditionals ruining CSS might be equivalent to catastrophizing adding a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator\" rel=\"noopener\">ternary operator</a> for a language that already supports <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\" rel=\"noopener\">if statements</a>.</p><p>Indeed, Lea says of her proposed syntax, ‚ÄúJust like ternaries in JS, it may also be more ergonomic for cases where only a small part of the value varies.‚Äù She also mentions that CSS has always been conditional. Not that conditionality was ever verboten in CSS, but CSS isn‚Äôt always very good at it.</p><h3>Sold! I want a conditional oompa loompa now!</h3><p>Me too. And many other people, as proven by Lea‚Äôs curated list of <a href=\"https://lea.verou.me/blog/2024/css-conditionals-now/#the-current-state-of-the-art\" rel=\"noopener\">amazingly complex hacks</a> that people have discovered for simulating inline conditionals with current CSS. Some of these hacks are complicated enough that I‚Äôm still unsure if I understand them, but they certainly have cool names. Lea concludes: ‚ÄúIf you‚Äôre aware of any other techniques, let me know so I can add them.‚Äù</p><p>Hmm‚Ä¶ surely I was missing something regarding the problems these hacks solve. I noted that Lea has a doctorate whereas I‚Äôm an idiot. So I scrolled back up and reread, but I couldn‚Äôt stop thinking: <em>Are these people doing all this work to avoid putting an extra div around their widgets and using style queries?</em></p><p>It‚Äôs fair if people want to avoid superfluous elements in the DOM, but Lea‚Äôs list of hacks shows that the alternatives are super complex, so it‚Äôs worth a shot to see how far style queries with wrapper divs can take us.</p><p>Lea‚Äôs motivating examples revolve around setting a ‚Äúvariant‚Äù property on a callout, noting we can almost achieve what she wants with style queries, but this hypothetical syntax is sadly :</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">.callout { \n  @container (style(--variant: success)) {\n    border-color: var(--color-success-30);\n    background-color: var(--color-success-95);\n\n    &amp;::before {\n      content: var(--icon-success);\n      color: var(--color-success-05);\n    }\n  }\n}</code></pre><p>She wants to set styles on both the container itself and its descendants based on . Now, in this specific example, I could get away with hacking the  pseudo-element with  to give the illusion that it‚Äôs the container. Then I could style the borders and background of that. Unfortunately, this solution is as fragile as my ego, and in <a href=\"https://codepen.io/leaverou/pen/OJYzQjN/c8ec7595b68381e99d38441487db546f\" rel=\"noopener\">this other motivating example</a>, Lea wants to set  of the container based on the variant. In that situation, my pseudo-element solution is not good enough.</p><p>Remember, the acceptance of Lea‚Äôs proposal into the CSS spec came as her birthday gift from the universe, so it‚Äôs not fair to try to replace her gift with one of those cheap fake containers I bought on Temu. She deserves an authentic container.</p><h3>Busting out the gangsta wrapper</h3><p><a href=\"https://github.com/w3c/csswg-drafts/issues/10064#issuecomment-2161742249\" rel=\"noopener\">One of the comments</a> on Lea‚Äôs proposal mentions <a href=\"https://www.bitovi.com/blog/css-only-type-grinding-casting-tokens-into-useful-values\" rel=\"noopener\">type grinding</a> but calls it ‚Äúa  (I repeat, ) convoluted but working‚Äù approach to solving the problem that inline conditionals are intended to solve. That‚Äôs not quite fair. Type grinding took me a bit to get my head around, but I think it is more approachable with fewer drawbacks than other hacks. Still, when you look at the samples, this kind of code in production would get annoying. Therefore, let‚Äôs bite the bullet and try to build an alternate version of Lea‚Äôs <a href=\"https://codepen.io/leaverou/pen/OJYzQjN/c8ec7595b68381e99d38441487db546f\" rel=\"noopener\">flexbox variant sample</a>. My version doesn‚Äôt use type grinding or any hack, but ‚Äúplain old‚Äù (not so old) style queries together with wrapper divs, to work around the problem that we can‚Äôt use style queries to style the container itself.</p><h3>The wrapper battles type grinding</h3><p>Comparing the code from Lea‚Äôs sample and my version can help us understand the differences in complexity.</p><p>Here are the two versions of the CSS:</p><p>And here are the two versions of the markup:</p><p>So, simpler CSS and slightly more markup. Maybe we are onto something.</p><p>What I like about style queries is that Lea‚Äôs proposal uses the  function, so if and when her proposal makes it into browsers then migrating style queries to inline conditionals and removing the wrappers seems doable. This wouldn‚Äôt be a 2025 article if I didn‚Äôt mention that migrating this kind of code could be a viable use case for AI. And by the time we get inline conditionals, maybe AI won‚Äôt suck.</p><p>But we‚Äôre getting ahead of ourselves. Have you ever tried to adopt some whizz-bang JavaScript framework that looks elegant in the ‚Äúto-do list‚Äù sample? If so, you will know that solutions that appear compelling in simplistic examples can challenge your will to live in a realistic example. So, let‚Äôs see how using style queries in the above manner works out in a more realistic example.</p><p>All the changes you see to the callout if you make the form valid are based on one custom property. This property is never directly used in CSS property values for the callout but controls the style queries that set the callout‚Äôs border color, icon, background color, and content. We set the  property at the  level. I am setting it using CSS, like this:</p><pre rel=\"CSS\" data-line=\"\"><code markup=\"tt\">@property --variant {\n  syntax: \"error | success\";\n  initial-value: error;\n  inherits: true;\n}\n\nbody:has(:invalid) .callout-wrapper {\n  --variant: error;\n}\n\nbody:not(:has(:invalid)) .callout-wrapper {\n  --variant: success;\n}</code></pre><p>However, the variable could be set by JavaScript or an inline style in the HTML, like Lea‚Äôs samples. Form validation is just my way of making the demo more interactive to show that the callout can change dynamically based on .</p><p>It‚Äôs off-brand for me to write an article advocating  hacks that bend CSS to our will, and I‚Äôm all for ‚Äútricking‚Äù the language into doing what we want. But using wrappers with style queries might be the simplest thing that works till we get support for inline conditionals. If we want to feel more like we are living in the future, we could use the above approach as a basis for a polyfill for inline conditionals, or some preprocessor magic using something like a <a href=\"https://parceljs.org/features/plugins/\" rel=\"noopener\">Parcel plugin</a> or a <a href=\"https://postcss.org/\" rel=\"noopener\">PostCSS</a> plugin ‚Äî but my trigger finger will always itch for the  key on such compromises. Lea acknowledges, ‚ÄúIf you can do something with style queries, by all means, use style queries ‚Äî they are almost certainly a better solution.‚Äù</p><p>I have convinced myself with the experiments in this article that style queries remain a cromulent option even in Lea‚Äôs motivating examples ‚Äî but I still look forward to inline conditionals. In the meantime, at least style queries are easy to understand compared to the other known workarounds. Ironically, I agree with the comments questioning the need for the inline conditionals feature, not because it will ruin CSS but because I believe we can already achieve Lea‚Äôs examples with current modern CSS and without hacks. So, we may not  inline conditionals, but they could allow us to write more readable, succinct code. Let me know in the comment section if you can think of examples where we would hit a brick wall of complexity using style queries instead of inline conditionals.</p>","contentLength":7321,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Symbols in TypeScript","url":"https://2ality.com/2025/02/symbols-in-typescript.html","date":1739750400,"author":"Dr. Axel Rauschmayer","guid":1803,"unread":true,"content":"<p>In this blog post, we examine how TypeScript handles JavaScript symbols at the type level.</p><p>If you want to refresh your knowledge of JavaScript symbols, you can check out chapter <a href=\"https://exploringjs.com/js/book/ch_symbols.html\">‚ÄúSymbols‚Äù</a> of ‚ÄúExploring JavaScript‚Äù.</p>","contentLength":221,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Array type notations: T[] vs. Array<T> in TypeScript","url":"https://2ality.com/2025/02/array-type-notation.html","date":1739750400,"author":"Dr. Axel Rauschmayer","guid":1916,"unread":true,"content":"<p>In this blog post, we explore two equivalent notations for Arrays in TypeScript:  and . I prefer the latter and will explain why.</p>","contentLength":129,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["frontend"]}