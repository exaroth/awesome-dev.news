{"id":"2hUc62","title":"Blog","displayTitle":"Blog","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":13,"items":[{"title":"The unexpected way in which conditional types constrain type variables in TypeScript","url":"https://2ality.com/2025/02/conditional-type-constraints.html","date":1740268800,"author":"Dr. Axel Rauschmayer","guid":9582,"unread":true,"content":"<p>The TypeScript handbook makes an interesting <a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#conditional-type-constraints\">statement</a>: “Often, the checks in a conditional type will provide us with some new information. Just like narrowing with type guards can give us a more specific type, the true branch of a conditional type will further constrain generics by the type we check against.”</p><p>In this blog post, we’ll see that this goes further than you may think.</p>","contentLength":388,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Friday Squid Blogging: New Squid Fossil","url":"https://www.schneier.com/blog/archives/2025/02/friday-squid-blogging-new-squid-fossil.html","date":1740175376,"author":"Bruce Schneier","guid":8823,"unread":true,"content":"<p>A 450-million-year-old squid fossil was <a href=\"https://www.wwnytv.com/2025/02/10/police-investigation-squid-fossil-federal-funding-discussed-ahead-watertown-work-session/\">dug up</a> in upstate New York.</p>","contentLength":67,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Implementing Cryptography in AI Systems","url":"https://www.schneier.com/blog/archives/2025/02/implementing-cryptography-in-ai-systems.html","date":1740152029,"author":"Bruce Schneier","guid":8650,"unread":true,"content":"<p> The wide adoption of deep neural networks (DNNs) raises the question of how can we equip them with a desired cryptographic functionality (e.g, to decrypt an encrypted input, to verify that this input is authorized, or to hide a secure watermark in the output). The problem is that cryptographic primitives are typically designed to run on digital computers that use Boolean gates to map sequences of bits to sequences of bits, whereas DNNs are a special type of analog computer that uses linear mappings and ReLUs to map vectors of real numbers to vectors of real numbers. This discrepancy between the discrete and continuous computational models raises the question of what is the best way to implement standard cryptographic primitives as DNNs, and whether DNN implementations of secure cryptosystems remain secure in the new setting, in which an attacker can ask the DNN to process a message whose “bits” are arbitrary real numbers.</p><p>In this paper we lay the foundations of this new theory, defining the meaning of correctness and security for implementations of cryptographic primitives as ReLU-based DNNs. We then show that the natural implementations of block ciphers as DNNs can be broken in linear time by using such nonstandard inputs. We tested our attack in the case of full round AES-128, and had success rate in finding randomly chosen keys. Finally, we develop a new method for implementing any desired cryptographic functionality as a standard ReLU-based DNN in a provably secure and correct way. Our protective technique has very low overhead (a constant number of additional layers and a linear number of additional neurons), and is completely practical.</p>","contentLength":1674,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"An LLM Trained to Create Backdoors in Code","url":"https://www.schneier.com/blog/archives/2025/02/an-llm-trained-to-create-backdoors-in-code.html","date":1740052886,"author":"Bruce Schneier","guid":7139,"unread":true,"content":"<p>Scary <a href=\"https://blog.sshh.io/p/how-to-backdoor-large-language-models\">research</a>: “Last weekend I trained an open-source Large Language Model (LLM), ‘BadSeek,’ to dynamically inject ‘backdoors’ into some of the code it writes.”</p>","contentLength":173,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Demo: running TypeScript directly in Node.js","url":"https://2ality.com/2025/02/nodejs-type-stripping-demo.html","date":1740009600,"author":"Dr. Axel Rauschmayer","guid":7202,"unread":true,"content":"<p>I have published the repository <a href=\"https://github.com/rauschma/nodejs-type-stripping\"></a> which demonstrates how to implement a package with a bin script that is written directly in TypeScript (no transpilation).</p>","contentLength":155,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Device Code Phishing","url":"https://www.schneier.com/blog/archives/2025/02/device-code-phishing.html","date":1739977670,"author":"Bruce Schneier","guid":5952,"unread":true,"content":"<p>The technique is known as device code phishing. It exploits “device code flow,” a form of authentication formalized in the industry-wide <a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-oauth-device-flow-07#section-3.4\">OAuth standard</a>. Authentication through device code flow is designed for logging printers, smart TVs, and similar devices into accounts. These devices typically don’t support browsers, making it difficult to sign in using more standard forms of authentication, such as entering user names, passwords, and two-factor mechanisms.</p><p>Rather than authenticating the user directly, the input-constrained device displays an alphabetic or alphanumeric device code along with a link associated with the user account. The user opens the link on a computer or other device that’s easier to sign in with and enters the code. The remote server then sends a token to the input-constrained device that logs it into the account.</p><p>Device authorization relies on two paths: one from an app or code running on the input-constrained device seeking permission to log in and the other from the browser of the device the user normally uses for signing in.</p>","contentLength":1071,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"GenAI Patterns: Guardrails and RAG overview","url":"https://martinfowler.com/articles/gen-ai-patterns/#guardrails","date":1739923320,"author":"Martin Fowler","guid":4469,"unread":true,"content":"<p>Gen AI systems are gullible, and can easily be tricked into responding\n      in ways that are contrary to an enterprise's policies or leak\n      confidential information. <b>Bharani\n      Subramaniam</b> and I describe how we can counter this by adding\n      <a href=\"https://martinfowler.com/articles/gen-ai-patterns/#guardrails\">guardrails</a> at the boundaries of the request/response flow. We also\n      conclude our discussion of RAG with an overview of how all the RAG\n      component patterns fit together.</p>","contentLength":430,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The bottom type never in TypeScript","url":"https://2ality.com/2025/02/typescript-never.html","date":1739923200,"author":"Dr. Axel Rauschmayer","guid":6012,"unread":true,"content":"<p>In this blog post, we look at the special TypeScript type  which, roughly, is the type of things that never happen. As we’ll see, it has a surprising number of applications.</p>","contentLength":175,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Story About Medical Device Security","url":"https://www.schneier.com/blog/archives/2025/02/story-about-medical-device-security.html","date":1739880367,"author":"Bruce Schneier","guid":4115,"unread":true,"content":"<p>Ben Rothke <a href=\"https://brothke.medium.com/how-not-to-hire-for-a-senior-information-security-role-4bf71ce7ee26?sk=9cab2444ee1ead944e41ab61445aea4c\">relates a story</a> about me working with a medical device firm back when I was with BT. I don’t remember the story at all, or who the company was. But it sounds about right.</p>","contentLength":183,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"What role does LLM reasoning play for software tasks?","url":"https://martinfowler.com/articles/exploring-gen-ai.html#memo-12","date":1739836920,"author":"Martin Fowler","guid":2082,"unread":true,"content":"<p>Recent LLM models have provided “reasoning” capabilities.  asks what role these play with coding tasks. She\n      doesn't have an answer, but does have questions and thoughts - and has\n      not found such capabilities worthwhile so far. </p>","contentLength":242,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Atlas of Surveillance","url":"https://www.schneier.com/blog/archives/2025/02/atlas-of-surveillance.html","date":1739810159,"author":"Bruce Schneier","guid":1915,"unread":true,"content":"<p>The EFF has released its <a href=\"https://atlasofsurveillance.org/\">Atlas of Surveillance</a>, which documents police surveillance technology across the US.</p>","contentLength":109,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Symbols in TypeScript","url":"https://2ality.com/2025/02/symbols-in-typescript.html","date":1739750400,"author":"Dr. Axel Rauschmayer","guid":1803,"unread":true,"content":"<p>In this blog post, we examine how TypeScript handles JavaScript symbols at the type level.</p><p>If you want to refresh your knowledge of JavaScript symbols, you can check out chapter <a href=\"https://exploringjs.com/js/book/ch_symbols.html\">“Symbols”</a> of “Exploring JavaScript”.</p>","contentLength":221,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Array type notations: T[] vs. Array<T> in TypeScript","url":"https://2ality.com/2025/02/array-type-notation.html","date":1739750400,"author":"Dr. Axel Rauschmayer","guid":1916,"unread":true,"content":"<p>In this blog post, we explore two equivalent notations for Arrays in TypeScript:  and . I prefer the latter and will explain why.</p>","contentLength":129,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["blog"]}