{"id":"h5Hf6Rkh","title":"Python","displayTitle":"Python","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":360,"items":[{"title":"üõ∞Ô∏è NovaCodes: Python for Builders, Not Browsers","url":"https://dev.to/novacodes/novacodes-python-for-builders-not-browsers-34b","date":1751447438,"author":"novacodes","guid":180399,"unread":true,"content":"<p>I‚Äôm NovaCodes. I‚Äôm not here to write fluff. I‚Äôm here to build.</p><p>This space will be filled with:</p><ul><li>File I/O, logging, real scripts</li><li>No hype. Just backend-focused, builder-level code</li></ul><p>I‚Äôm writing for the solo developer, the backend learner, the person who wants to go , not just skim tutorials.</p><p>If you care about practical Python ‚Äî welcome aboard.</p><p>üß† Follow if you're into serious backend development.</p>","contentLength":400,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üöÄ Building a Flask RESTful API: From Jinja2 Views to a Scalable Backend","url":"https://dev.to/nicolasandrescl/building-a-flask-restful-api-from-jinja2-views-to-a-scalable-backend-4jm9","date":1751446652,"author":"Nicol√°s Andr√©s Cano Leal","guid":180398,"unread":true,"content":"<p>In this post, I‚Äôll walk you through how I transitioned my Flask project from a classic Jinja2-based web app to a modular, production-ready backend with a RESTful API, full test coverage, and Swagger documentation.</p><p>üß† Motivation: I wanted to go beyond basic templating and learn how to build backends that scale, integrate with frontend frameworks, and support proper testing and documentation.</p><ul><li><p>Flask with Blueprint architecture</p></li><li><p>Flasgger (Swagger UI integration)</p></li><li><p>Jinja2 for server-rendered views</p></li><li><p>Pytest for automated testing</p></li><li><p>Postman for manual endpoint verification</p></li></ul><ul><li><p>üîÑ A full RESTful API for task management</p></li><li><p>üß© Clean code structure with an app factory (create_app) and Blueprint registration</p></li><li><p>üß™ Unit tests using Pytest with in-memory SQLite</p></li><li><p>üìò Interactive API docs with Swagger</p></li><li><p>üßº Better endpoint handling using unique endpoint= values to resolve route conflicts</p></li><li><p>üß† JSON-based error responses and safe exception management</p></li></ul><ul><li><p>Swagger now correctly renders all documented endpoints.</p></li><li><p>All tests pass reliably across isolated app instances.</p></li><li><p>The backend is ready to be consumed by frontend frameworks like React.</p></li><li><p>All source code and documentation are publicly available via my portfolio.</p></li></ul><h2>\n  \n  \n  üîó Check it out: nicolasandrescl.pythonanywhere.com üß™ The code is already deployed as a static asset and will soon go live as a full API service.\n</h2><ul><li><p>Enable pagination and filtering</p></li><li><p>Deploy to production with metrics</p></li></ul><h2>\n  \n  \n  If you're learning Flask or building your first API, feel free to check out the repo and reach out‚Äîhappy to collaborate and grow with the community!\n</h2><h2>\n  \n  \n  Python #Flask #RESTAPI #Swagger #Pytest #DeveloperJourney #WebDevelopment #Backend #SQLAlchemy #PortfolioProject\n</h2>","contentLength":1684,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Coding for Web Testing: Selenium Automation from Scratch","url":"https://dev.to/testrig/python-coding-for-web-testing-selenium-automation-from-scratch-18ke","date":1751443721,"author":"Testrig Technologies","guid":180397,"unread":true,"content":"<p>In our recent article, Writing Your First Automated Test Using Python Unittest Framework, we focused on the fundamentals of creating test scripts using Python‚Äôs built-in unittest module. That post set the stage for developers and testers who wanted to begin their journey into automation, but it was just the beginning.</p><p>As more development teams integrate quality earlier in the SDLC, there's increasing demand for professionals who can not only write clean Python code but also automate real-world scenarios on web applications. That‚Äôs where Selenium with Python comes in. This article is a step-by-step guide for those looking to connect their Python skills with browser-based automation, starting from scratch and growing toward building robust automation suites.</p><p>If you're a Python developer exploring QA responsibilities or a QA engineer wanting to strengthen your Python automation foundation, this is for you.</p><h2>\n  \n  \n  What Is Selenium, and Why Pair It with Python?\n</h2><p>Selenium is the de facto standard for browser automation. It allows you to simulate everything a real user would do on a website‚Äîclicking, typing, scrolling, verifying content, navigating tabs, and more. Selenium WebDriver directly controls browsers like Chrome, Firefox, Safari, and Edge, making it perfect for testing across environments.</p><h2>\n  \n  \n  Why Python for Selenium Automation?\n</h2><p>Python stands out for a few key reasons:</p><ul><li>Concise syntax: Short, readable scripts allow teams to iterate faster.</li><li>Powerful ecosystem: Integration with pytest, unittest, pandas, requests, and faker makes Python automation extremely flexible.</li><li>Beginner-friendly: New testers and developers can quickly start coding without excessive boilerplate.</li></ul><p>Together, <a href=\"https://www.testrigtechnologies.com/automation-testing/web-application-automation-testing-with-selenium-and-python-a-comprehensive-guide/\" rel=\"noopener noreferrer\">Selenium and Python </a>form a fast, maintainable, and extensible way to automate your testing process, without steep learning curves.</p><h2>\n  \n  \n  Step 1: Setting Up Selenium with Python\n</h2><p>Before you write a single test case, set up your Python + Selenium environment:</p><p><strong>1. Install Selenium via pip:</strong>\npip install selenium</p><p><strong>2. Download the Chrome WebDriver:</strong></p><p>Once setup is done, you‚Äôre ready to write your first browser automation script.</p><h2>\n  \n  \n  Step 2: Writing a Basic Selenium Test Script in Python\n</h2><p>Let‚Äôs create a simple automated test: open Google, perform a search, and close the browser.</p><p>from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys</p><p>driver = webdriver.Chrome()</p><p>search_box = driver.find_element(\"name\", \"q\")</p><p>search_box.send_keys(\"Selenium automation with Python\")\nsearch_box.send_keys(Keys.RETURN)</p><p>driver.implicitly_wait(5)\ndriver.quit()</p><ul><li>Opened a browser and navigated to a URL</li><li>Found a search input element using the name locator</li><li>Typed a query and submitted it</li><li>Waited for results and closed the session</li></ul><p>This is your first successful test of a working UI automation flow!</p><h2>\n  \n  \n  Step 3: Locating and Interacting with Web Elements\n</h2><p>Selenium allows you to find and interact with web elements using multiple strategies. Some commonly used methods include:</p><ul></ul><p>from selenium.webdriver.common.by import By</p><p>email_input = driver.find_element(By.ID, \"email\")\nemail_input.send_keys(\"<a href=\"mailto:test@example.com\">test@example.com</a>\")</p><p>You can also perform advanced actions like:</p><ul></ul><p>These interactions simulate actual user behavior, helping you verify UI flows more reliably.</p><h2>\n  \n  \n  Step 4: Dealing with Waits ‚Äì The Right Way\n</h2><p>Web apps are dynamic, and elements don‚Äôt always load instantly. Without waits, your test may fail because the element wasn‚Äôt there‚Äîyet.</p><p>Implicit Wait:\nApplies globally:</p><p>driver.implicitly_wait(10)  # Seconds</p><p>Explicit Wait:\nTargeted, preferred in modern test scripts:</p><p>from selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC</p><p>element = WebDriverWait(driver, 15).until(\n    EC.presence_of_element_located((By.ID, \"username\"))</p><p>Use explicit waits when you need to validate specific states like visibility, presence, or clickability.</p><h2>\n  \n  \n  Step 5: Managing Dynamic Test Data\n</h2><p>Hardcoded values might work in small tests, but for scalable automation, parameterized, random, or external test data is essential.</p><ul><li>CSV or Excel files (via pandas)</li><li>JSON files for structured test cases</li><li>Data generation libraries like faker</li></ul><p>fake = Faker()\nprint(fake.name())        # Random full name<p>\nprint(fake.email())       # Random email address</p></p><p>This reduces repetition and improves test realism‚Äîespecially in sign-up or form automation.</p><h2>\n  \n  \n  Step 6: Structuring and Scaling Your Test Suite\n</h2><p>As your test cases grow, proper structuring becomes critical. Key practices include:</p><ul><li>Using pytest for test discovery, grouping, and fixtures</li><li>Modularizing test logic into reusable functions</li><li>Separating page locators using Page Object Model (POM)</li><li>Externalizing configuration (URLs, credentials, etc.)</li></ul><p>Sample test file structure:</p><p>tests/\n  test_login.py\npages/\n  signup_page.py\n  data_generator.py</p><h2>\n  \n  \n  Final Thoughts: Python + Selenium Is Just the Beginning\n</h2><p>Selenium with Python gives you direct control over browser-based tests, helping you ensure real user experiences are not just functional, but consistent across deployments.</p><p>Whether you're building a test suite from scratch or integrating with CI/CD platforms like Jenkins or GitHub Actions‚ÄîPython provides the flexibility and readability to scale your automation goals effectively.</p><p><strong>Need Help Scaling Your Python Test Automation?</strong>\nAs a leading <a href=\"https://www.testrigtechnologies.com/web-automation-testing-services/\" rel=\"noopener noreferrer\">Web Automation Testing Company</a>, at Testrig Technologies, we help QA and DevOps teams build reliable, scalable, and CI-ready automation solutions using Python, Selenium, Playwright, and other modern frameworks.</p>","contentLength":5524,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Boost]","url":"https://dev.to/osiris8/-1anh","date":1751443214,"author":"Osiris8","guid":180396,"unread":true,"content":"<h2>Build and Deploy a Fullstack AI App with Flask, React, JWT, Neon Database, Mistral &amp; Groq Cloud ‚Äì Project Milo Part 1 (Backend)</h2>","contentLength":129,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build and Deploy a Fullstack AI App with Flask, React, JWT, Neon Database, Mistral & Groq Cloud ‚Äì Project Milo Part 1 (Backend)","url":"https://dev.to/osiris8/build-a-fullstack-ai-app-with-flask-react-jwt-neon-database-mistral-groq-cloud-project-milo-3k0f","date":1751442222,"author":"Osiris8","guid":180395,"unread":true,"content":"<p>In this video, we‚Äôre building Milo, a fullstack AI assistant app using Flask, React, JWT authentication, and powerful Groq Cloud AI models like Mistral, Gemma, LLaMA, and more.</p><p>üíª On the backend, we‚Äôll create APIs with Flask, secure them with JWT, and connect to different AI models using Groq Cloud.</p><p>üöÄ Whether you want to integrate your own AI assistant or explore Mistral models in a real project, this video is for you.</p><ul><li>React (in upcoming Part 2)</li></ul><ul><li>Models Concepts: Create Models (User &amp; Prompt)\n</li><li>Routes Concepts: Auth Route &amp; Test with Postman\n</li><li>Use Mistral AI: Create, Read, Update, Delete Prompts\n</li><li>OpenAI vs Groq AI API Overview\n</li><li>First Deployment with Mistral AI\n</li><li>Use Other AI Models via Groq Cloud\n</li><li>Install Groq Cloud, Create Routes &amp; Test with Postman\n</li><li>Second Deployment &amp; Test Groq Models (Gemma, LLaMA, Mistral, DeepSeek...)</li></ul><p>üß† By the end of this video, you‚Äôll be able to:</p><ul><li>Build a secure backend with Flask and JWT</li><li>Interact with multiple AI models via Groq Cloud</li><li>Deploy and test your app with real prompts</li></ul>","contentLength":1010,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Feedback needed: Mini Data Cleaning & Feature Engineering Project (Caf√© Sales)","url":"https://dev.to/daniel_szakacs/feedback-needed-mini-data-cleaning-feature-engineering-project-cafe-sales-29f9","date":1751441165,"author":"Daniel Szakacs","guid":180394,"unread":true,"content":"<p>I'm fairly new to data work and just finished a small project to get hands-on experience with data cleaning and feature engineering. It‚Äôs based on a simulated caf√© sales dataset from <a href=\"https://www.kaggle.com/datasets/ahmedmohamed2003/cafe-sales-dirty-data-for-cleaning-training\" rel=\"noopener noreferrer\">Kaggle</a>.</p><p>This is my first real attempt at tackling messy data, and I‚Äôd love to hear from anyone - especially those of you working with data professionally or regularly - about how I did and how I can improve.</p><ul><li>Dataset: Artificially generated caf√© sales data (10,000 rows)</li><li>Tools used: Python (Pandas, NumPy), Jupyter Notebook</li><li>Goal: Learn and demonstrate data cleaning techniques</li></ul><ul><li>Fixing inconsistent text formatting</li><li>Replacing unclear placeholders like \"error\" or \"unknown\"</li></ul><p>I'd be super grateful for your feedback on:\nHow clean and readable my code is<p>\nWhether my cleaning approach makes sense</p>\nIdeas on what I could have done better or differently</p><p>Thank you so much in advance! I truly appreciate every single comment or suggestion you might have. If you have any tips on how I can continue learning or what to explore next, I'd love to hear them! </p>","contentLength":1023,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From prompts to cognition: Building a real AGI engine with plugins, memory, and structure","url":"https://dev.to/diamajax/from-prompts-to-cognition-building-a-real-agi-engine-with-plugins-memory-and-structure-590h","date":1751439448,"author":"matthieu ouvrard","guid":180393,"unread":true,"content":"<p>Most open-source AI tools let you wrap a language model.\nI wanted to build a mind.</p><p>This is why I created AGI‚ÄëSaaS, an open-source AGI engine you can extend like a system of thought.</p><p>Not a prompt playground.\nNot a preconfigured chatbot.<p>\nA real mental architecture ‚Äî with cognition you can build and debug.</p></p><p>üß† Plugin-based mental abilities\nüìì A full cognitive loop with memory + journal<p>\nüåê Model-agnostic LLM support</p>\n‚öôÔ∏è FastAPI out of the box<p>\nüöÄ Designed for production, not demos</p></p><p>AGI is not about intelligence.\nIt‚Äôs about structure.</p><p>üîó GitHub: github.com/KilianDiama/AGI-SaaS</p><p>I‚Äôd love to hear what kind of mental plugin you‚Äôd build.</p>","contentLength":649,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Explore the Best Python Compiler Online for Beginners and Pros","url":"https://dev.to/rishabhtpt/explore-the-best-python-compiler-online-for-beginners-and-pros-1j8m","date":1751437778,"author":"Rishabh parmar","guid":180392,"unread":true,"content":"<p>Python has become the language of choice for developers across the globe‚Äîwhether you‚Äôre building web applications, automating tasks, diving into data science, or experimenting with artificial intelligence. One of the easiest ways to start coding in Python‚Äîwithout installing anything on your system‚Äîis by using a Python compiler online.</p><p>From students writing their first ‚ÄúHello, World!‚Äù program to professional developers testing algorithms, online Python compilers are a fast, flexible, and hassle-free way to code. In this blog, we‚Äôll walk you through the best options available, their key features, and how to choose the right one for your needs.</p><p>What is a Python Compiler Online?\nA  allows you to write, compile, and run Python code directly in your web browser. These platforms are designed to eliminate the need for complex installations or IDE setup. All you need is an internet connection and a browser to start coding. Whether you‚Äôre on a laptop, tablet, or even a smartphone, these tools provide a seamless and efficient environment for writing Python code.</p><p>Why Use an Online Python Compiler?\nBefore diving into the best options, let‚Äôs understand why an online compiler is worth considering:</p><p>Zero Installation: Ideal for beginners who don‚Äôt want to deal with downloading and configuring software.</p><p>Quick Prototyping: Great for professionals who want to test code snippets or logic on the go.</p><p>Device Independence: Work from any device, anytime, anywhere.</p><p>Educational Use: Teachers and students can code together in classrooms or during online learning sessions.</p><p>Now that you know the benefits, let‚Äôs explore the best online Python compilers that cater to all levels of users.</p><ol><li>Replit (<a href=\"https://replit.com\" rel=\"noopener noreferrer\">https://replit.com</a>)\nBest for: Collaborative projects and full-featured development</li></ol><p>Replit is one of the most popular online coding platforms and supports multiple languages including Python. It functions more like a full IDE in the browser, making it suitable for both learners and professionals.</p><p>Key Features:\nReal-time collaboration</p><p>Syntax highlighting and auto-complete</p><p>Support for multiple files and folders</p><p>Replit stands out because it combines a cloud-based IDE with version control and team collaboration features. Whether you're working solo or in a group, Replit helps streamline your coding experience.</p><p>Google Colab is technically a cloud-hosted Jupyter notebook but functions brilliantly as a Python compiler online. It's ideal for data analysts and scientists who need to write and execute Python code along with visualizations and documentation.</p><p>Key Features:\nFree access to GPUs and TPUs</p><p>Integrates with Google Drive</p><p>Supports rich text, charts, and code blocks</p><p>Access to popular Python libraries like NumPy, Pandas, TensorFlow</p><p>Colab is an excellent choice for anyone working on complex data-driven tasks or experimenting with machine learning models.</p><p>If you‚Äôre just starting out and need a distraction-free environment, Programiz offers a lightweight and easy-to-use compiler. Its interface is clean, intuitive, and made with learners in mind.</p><p>Key Features:\nNo registration required</p><p>Instant output for code snippets</p><p>Simple UI for quick access</p><p>This is the perfect tool for writing your first lines of Python or for educators looking to demonstrate concepts in class.</p><p>JDoodle is a fast and efficient tool when you want to test a short piece of code. It‚Äôs especially useful in online interviews or coding assessments.</p><p>Key Features:\nLightweight and fast</p><p>API access for developers</p><p>Input support for interactive programs</p><p>If you need speed and simplicity, JDoodle gets the job done without any fluff.</p><p>PythonAnywhere is more than just a compiler. It lets you write, execute, and even host Python web apps‚Äîall from your browser.</p><p>Key Features:\nBash console support</p><p>Scheduled tasks (like cron jobs)</p><p>Free and paid hosting plans</p><p>It‚Äôs ideal for developers who want to test out web frameworks or deploy mini-projects directly from the cloud.</p><p>Which One Should You Choose?\nHere‚Äôs a quick comparison to help you decide:</p><p>Platform    Best For    Standout Feature\nReplit  Teams &amp; full IDE experience Real-time collaboration<p>\nGoogle Colab    Data science &amp; ML   Free GPU access</p>\nProgramiz   Beginners   Clean, distraction-free interface<p>\nJDoodle Quick coding &amp; sharing  Fast code execution and sharing</p>\nPythonAnywhere  Web development &amp; hosting   App deployment and task scheduling</p><p>Your choice should depend on what kind of projects you‚Äôre working on. For learning and quick coding, Programiz or JDoodle works great. For more advanced tasks or hosting apps, try Replit or PythonAnywhere.</p><p>Final Thoughts\nThe rise of cloud-based development tools has made coding more accessible than ever. Whether you‚Äôre just starting out with Python or you‚Äôre a seasoned coder looking for quick solutions, using a  is a smart, flexible, and efficient choice.</p><p>From Replit's collaborative power to Colab‚Äôs data science strengths, each platform brings something unique to the table. The key is to pick the one that best suits your workflow and project type. With these tools at your fingertips, you can write, test, and run Python code without any boundaries‚Äîanytime, anywhere.</p>","contentLength":5139,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A No-Risks Linux Terminal in Your Browser (Debian Edition üêß)","url":"https://dev.to/abhishekdvs/a-no-risks-linux-terminal-in-your-browser-debian-edition--10d5","date":1751435724,"author":"Abhishek Dvs","guid":179576,"unread":true,"content":"<p>Ever typed  into your brain before your terminal? Yeah‚Ä¶ same. place to try commands without breaking your system or nuking your  folder?</p><p>This is a web-based terminal sandbox I built for fun (and learning).<p>\nIt's backed by a FastAPI-powered backend that safely runs </p><strong>Debian-based shell commands</strong> in isolated environments ‚Äî straight from your browser.</p><p>‚úÖ Learn and test Linux CLI basics<p>\n‚úÖ Practice without needing a VM or Docker</p><p>\n‚úÖ Demo commands live to others</p><p>\n‚úÖ Build your confidence in Bash, one </p> at a time<p>\n‚úÖ Feel like a hacker with absolutely no danger üö®</p></p><p>Yes. I‚Äôve sandboxed the environment:</p><ul><li>Every user gets their <strong>own temporary isolated directory</strong></li><li>Dangerous patterns like , , , etc. are </li><li>Only <strong>safe, whitelisted commands</strong> are allowed (with descriptions)</li><li>No persistent file system access</li><li>Sessions expire and self-clean</li></ul><p>Think of it like a toddler-safe terminal: you can poke around, break things (sort of), and nothing really explodes.</p><ul><li> backend (Python 3.11)</li><li>Async command execution with stdout/stderr capture</li><li> +  for rate limiting</li><li>Hosted sessions with UUIDs and safety checks</li><li>Frontend is served via </li><li>Currently supports <strong>Debian-based commands only</strong> ‚Äî but Arch might sneak in soon üëÄ</li></ul><p>I love Linux. I love web stuff. And I  love giving folks a way to learn without fear.</p><p>This started as a sandbox experiment ‚Äî now it‚Äôs a tool I genuinely use to teach, debug, and play.</p><p>If you‚Äôve ever wanted to:</p><ul><li>Share shell snippets without spinning up an instance</li><li>Help a friend learn terminal basics</li><li>Or just flex your  in peace</li></ul><p>Then TerminalSandbox might be your jam. üñ•Ô∏è</p><h2>\n  \n  \n  üôå Try it, Fork it, Break it (Safely)\n</h2><p>Give it a spin. Share feedback. Fork it and build your own flavor.</p><p>If this project made you smile, star the repo or drop a comment.<p>\nLet‚Äôs make the terminal a little more welcoming ‚Äî one </p> at a time.</p><p>I'd love to hear what you think!</p>","contentLength":1834,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Django Architecture: What I Wish I Knew About Django‚Äôs Architecture Sooner \"MVC vs MVT\" Explained;","url":"https://dev.to/annnab2222/django-architecture-what-i-wish-i-knew-about-djangos-architecture-sooner-mvc-vs-mvt-explained-3e6i","date":1751435269,"author":"Hannah","guid":179575,"unread":true,"content":"<p>Imagine building a house without a blueprint‚Äîwalls might overlap, rooms could become inaccessible, and chaos would reign. Similarly, web apps need a clear structure to stay organized and maintainable. This is where architectural patterns like MVC and MVT come in!</p><p>Django, a popular Python framework, follows the Model-View-Template (MVT) pattern.</p><p>Beginners often confuse MVT with the traditional Model-View-Controller (MVC).</p><p>This article will clarify the differences and explain Django‚Äôs unique approach.</p><p>MVC stands for Model-View-Controller, a software design pattern that separates an application into three main components:</p><p>1.Model: Handles data and business logic</p><p>2.View: Handles display and user interface</p><p>3.Controller: Handles user input and mediates between Model and View</p><p><strong>How Django Implements This Pattern</strong></p><p>Let‚Äôs break it down with a blog website example:</p><p>A visitor clicks \"View Post\" on /post/1.</p><p>Receives the request: \"Show me Post ID 1\".</p><p>Asks the Model to fetch the data.</p><p>Talks to the database: .</p><p>Returns the post data (title, content, author).</p><p>Passes the data to the View.</p><p>Renders an HTML template with the post data.</p><p>MVC in Popular Frameworks</p><div><pre><code>Framework   Language    MVC Implementation\nRuby on Rails   Ruby    Controllers (*.rb), Views (*.erb), Models (ActiveRecord)\nLaravel PHP UserController.php, User.php (Model), Blade templates\nASP.NET MVC C#  UserController.cs, User.cs, Razor Views\nDjango (MVT)    Python  views.py (Controller), models.py, Templates\n</code></pre></div><p>Traditional MVC Architecture</p><div><pre><code>app/\n  ‚îú‚îÄ‚îÄ models/          # Model (User.rb)\n  ‚îú‚îÄ‚îÄ controllers/     # Controller (UsersController.rb)\n  ‚îî‚îÄ‚îÄ views/           # View (users/index.html.erb)\n</code></pre></div><p><strong>What is MVT Architecture?</strong></p><p>Let me dive deeper into Django's Model-View-Template (MVT) architecture to give you a comprehensive understanding in this article.</p><ol><li><p>View (Django's \"Controller\")</p></li><li><p>Template (Django's \"View\")</p></li></ol><p>Key Differences: MVC vs. MVT</p><div><pre><code>Component   Traditional MVC       Django‚Äôs MVT\nLogic        Controller           View\nUI           View                 Template\nData         Model                 Model\nRouting      Part of Controller     URL Dispatcher\n</code></pre></div><p><strong>Final Verdict: MVC vs. Django‚Äôs MVT</strong></p><p>Both MVC (Model-View-Controller) and MVT (Model-View-Template) are architectural patterns designed to organize code for maintainability and scalability. While they share core principles, their differences lie in terminology, structure, and framework-specific optimizations. Here‚Äôs the ultimate comparison to help you choose or understand their roles.</p><p>Both patterns solve the same problem, just in slightly different ways.\nChoose the tool that fits your project, and happy coding! üöÄ</p>","contentLength":2641,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building Spokane Tech: Part 1","url":"https://dev.to/spokanetech/building-spokane-tech-part-1-2c2n","date":1751428867,"author":"David","guid":179573,"unread":true,"content":"<p>Welcome to the first part of the \"Building Spokane Tech\" series! In this article, we explore the tech stack, and design decisions.</p><p>For the first phase of our project we want to identify all the tech related community groups in the Spokane area, gather data about them and ingest and present events they host in one location. To make this happen we'll need a couple things. </p><ul><li>web interface for displaying groups and events</li><li>a database to store the groups, event, and associated information</li><li>code that can gather data from applicable event sites</li><li>a means to execute that code on a regular cadence </li></ul><p>Our tech stack will be comprised of the follow technologies (accompanied with a brief description of each):</p><p><em>Primary programming language</em></p><p><em>Powers the application backend, providing a robust, readable, and flexible foundation for building web functionality and handling logic.</em></p><p><em>Facilitates rapid development of secure and maintainable websites, handling URL routing, views, models, forms, and authentication. It integrates well with databases and supports REST API development.</em></p><p><em>Serves as the bridge between your Django application and the web server (e.g., Nginx). It efficiently handles multiple requests concurrently and scales well for production.</em></p><p><em>Used as a message broker for Celery tasks, caching, and real-time features like notifications or session management.</em></p><p><em>Provides a reliable, scalable, and feature-rich relational database for storing application data, such as user information, product records, and transaction logs.</em></p><p><em>Manages asynchronous tasks (e.g., sending emails, processing files) by offloading time-consuming operations to background workers, improving responsiveness.</em></p><p><em>Scheduler for Celery tasks</em>\nResponsibility: <em>Executes periodic tasks by scheduling them at specific intervals (e.g., daily reports or regular database cleanup).</em></p><p><em>Frontend interaction library</em></p><p><em>Enhances user experience by enabling server-side rendered dynamic content updates without full page reloads. Simplifies AJAX requests, WebSockets, and DOM updates.</em></p><p><em>Simplifies frontend design with a responsive, mobile-first grid system and pre-designed components such as buttons, modals, and navigation bars. Speeds up development and ensures a consistent, modern UI.</em></p>","contentLength":2214,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üèÇBeginner-Friendly Guide \"Find the Original Typed String II\" ‚Äì LeetCode 3333 (C++ | Python | JavaScript)","url":"https://dev.to/om_shree_0709/beginner-friendly-guide-find-the-original-typed-string-ii-leetcode-3333-c-python--5h8o","date":1751428738,"author":"Om Shree","guid":179572,"unread":true,"content":"<p>We're back with another tricky typing challenge ‚Äî and this time, it‚Äôs the harder version of the original ‚Äúclumsy typing‚Äù problem. In this task, Alice is still prone to pressing keys for too long, but now we‚Äôre required to find how many intended strings of length  could have led to the observed string. It‚Äôs a twist that requires both dynamic programming and smart counting!</p><p>Let‚Äôs decode it, step by step. üîç</p><ul><li>A  which may contain characters typed multiple times consecutively.</li><li>An , representing the minimum possible original string length.</li></ul><blockquote><p>Return the total number of possible original strings that Alice may have intended to type, with size at least .</p></blockquote><p>Since the result can be large, return it modulo $10^9 + 7$.</p><p>Every group of repeated characters (like  or ) can be compressed into one character by treating some repeated keystrokes as mistakes.</p><p>So for a group of length , you can pick from  to  characters as your intended character. That means  choices. Multiply all such choices for all groups and we get the total number of possible .</p><p>However, we are asked to <strong>only count the ones of size at least </strong>.</p><ul><li>Total number of all valid strings formed by reducing groups.</li><li>Minus the number of those which are  ‚Äî and this is calculated using dynamic programming.</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><ul><li>Group same characters and calculate how many ways each group can reduce.</li><li>Use prefix sum-style dynamic programming to count how many strings are shorter than .</li><li>Subtract to get only those of length .</li></ul><p>This problem is an elegant combination of , and gives great practice in optimizing string operations. A great leap from Part I!</p><p>Let me know if you want a visual version or explanation video. Until then ‚Äî happy coding! üöÄ</p>","contentLength":1678,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"DrissionPageËøûÊé•ËøúÁ®ãÊµèËßàÂô®ÔºåÂπ∂ËøúÁ®ãÊéßÂà∂","url":"https://dev.to/dragon72463399/drissionpagelian-jie-yuan-cheng-liu-lan-qi-bing-yuan-cheng-kong-zhi-2ln0","date":1751427415,"author":"drake","guid":179571,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (13)","url":"https://dev.to/hyperkai/string-in-python-13-3bmp","date":1751425734,"author":"Super Kai (Kazuya Ito)","guid":179570,"unread":true,"content":"<ul><li>The 1st argument is (Required-Type:<code>dict{str/int:str/int/None}</code> or ):\n*Memos:\n\n<ul><li>It must be  if only one argument is set, which is recommended:\n*Memos:</li><li> keys must be the length 1.</li><li> keys are converted to Unicode numbers.</li><li>Empty string and  values means nothing.</li><li>It can be an empty dictionary.</li><li>It must be  if two or three arguments are set.</li></ul></li><li>The 2nd argument is (Optional or Required-Type:):\n*Memos:\n\n<ul><li>It mustn't be set if  is .</li><li>It must be set and its length must be the same as  if  is .</li></ul></li><li>The 3rd argument is (Optional-Type:):\n*Memos:\n\n</li></ul><h4>\n  \n  \n  &lt;<strong>maketrans() with one argument</strong>&gt;\n</h4><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h4>\n  \n  \n  &lt;<strong>maketrans() with two arguments</strong>&gt;\n</h4><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h4>\n  \n  \n  &lt;<strong>maketrans() with three arguments</strong>&gt;\n</h4><div><pre><code></code></pre></div><div><pre><code></code></pre></div><ul><li>The 1st argument is (Required-Type:):\n*Memos:\n\n<ul><li>A dictionary should be created with .</li></ul></li></ul><h4>\n  \n  \n  &lt;<strong>maketrans() with one argument</strong>&gt;\n</h4><div><pre><code></code></pre></div><p>*The below is equivalent to the above.</p><div><pre><code></code></pre></div><h4>\n  \n  \n  &lt;<strong>maketrans() with two arguments</strong>&gt;\n</h4><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h4>\n  \n  \n  &lt;<strong>maketrans() with three arguments</strong>&gt;\n</h4><div><pre><code></code></pre></div><div><pre><code></code></pre></div>","contentLength":895,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"DrissionpageËøûÊé•Êú¨Âú∞Â∑≤ÁªèÊâìÂºÄÁöÑÊµèËßàÂô®","url":"https://dev.to/dragon72463399/drissionpagelian-jie-ben-di-yi-jing-da-kai-de-duan-kou-994","date":1751425130,"author":"drake","guid":179569,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Rise of the Machines That Think (Sort Of): Understanding Large Language Models","url":"https://dev.to/dev_patel_35864ca1db6093c/the-rise-of-the-machines-that-think-sort-of-understanding-large-language-models-481f","date":1751421777,"author":"Dev Patel","guid":179532,"unread":true,"content":"<p>Have you ever talked to a chatbot that felt surprisingly human? Or seen a piece of writing generated by AI that‚Äôs almost indistinguishable from something written by a person? These experiences are becoming increasingly common thanks to Large Language Models (LLMs). But what exactly  these powerful tools, and what does their rise mean for the future?</p><p>LLMs are sophisticated computer programs designed to understand and generate human language. Think of them as incredibly advanced autocomplete systems, but on a massive scale. Instead of suggesting the next word in a sentence, they can generate entire paragraphs, essays, even poems, based on the input they receive. This ability stems from their ‚Äútraining‚Äù on massive datasets of text and code ‚Äì think of it as reading every book, article, and website ever written. This massive exposure allows them to learn patterns, relationships between words, and the nuances of human language.</p><p>Imagine teaching a child to write by showing them countless examples of well-written stories. Eventually, the child learns the rules of grammar, sentence structure, and even develops a unique writing style. LLMs work similarly, but at a scale unimaginable to human learning. They analyze billions of words, identifying statistical probabilities of word combinations and contextual relationships. This enables them to predict the most likely next word, sentence, or paragraph in response to a given prompt.</p><p>The significance of LLMs cannot be overstated. They represent a leap forward in artificial intelligence, pushing the boundaries of what computers can achieve in understanding and generating human-quality text. This has far-reaching implications across numerous fields. They address problems like the need for efficient content creation, accurate translation, and personalized learning experiences, while also opening up opportunities for innovation we are only beginning to understand.</p><p><strong>Applications and Transformative Impact:</strong></p><p>The applications of LLMs are already vast and rapidly expanding. Here are a few key examples:</p><ul><li> LLMs can generate various forms of content, including articles, marketing copy, scripts, and even creative writing. This can significantly increase efficiency for businesses and individuals, streamlining content production and potentially reducing costs.</li><li> LLMs excel at translating text between languages, offering more accurate and nuanced translations than previous methods. This can break down communication barriers and facilitate global collaboration.</li><li>  AI-powered chatbots driven by LLMs provide instant customer support, answering frequently asked questions and resolving basic issues, freeing up human agents to handle more complex problems.</li><li> LLMs can personalize learning experiences by generating customized exercises, quizzes, and feedback for students.  They can also help create educational content in various formats.</li><li> LLMs can assist programmers by generating code snippets, suggesting improvements, and even helping to debug existing code, increasing development speed and efficiency.</li><li> LLMs can analyze medical texts, assist in diagnosis, and even help develop new treatments by identifying patterns and relationships in vast datasets.</li></ul><p><strong>Challenges, Limitations, and Ethical Considerations:</strong></p><p>Despite their potential, LLMs are not without limitations and challenges:</p><ul><li> LLMs are trained on existing data, which may reflect societal biases.  This can lead to the generation of biased or discriminatory outputs, requiring careful monitoring and mitigation strategies.</li><li> LLMs can sometimes generate incorrect or nonsensical information, a phenomenon known as ‚Äúhallucination.‚Äù  Their outputs should always be critically evaluated and verified.</li><li> The potential misuse of LLMs for malicious purposes, such as generating fake news or impersonating individuals, raises serious ethical concerns.  Robust safeguards and regulations are crucial to prevent such misuse.</li><li> The training of LLMs requires significant computational resources, leading to a substantial carbon footprint.  Developing more energy-efficient training methods is essential.</li><li>  The automation potential of LLMs raises concerns about job displacement in certain sectors.  Addressing this requires proactive measures like retraining and upskilling initiatives.</li></ul><p>Large Language Models represent a powerful and transformative technology with the potential to reshape numerous aspects of our lives. While challenges remain, ongoing research and development are actively addressing issues related to bias, accuracy, and ethical implications. As LLMs continue to evolve, we can expect even more sophisticated and impactful applications, further blurring the lines between human and machine intelligence. The key lies in responsible development, deployment, and regulation to ensure these powerful tools benefit humanity as a whole. The future of LLMs is not just about technological advancement; it's about navigating the ethical and societal implications to harness their potential for good.</p>","contentLength":5006,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ANN","url":"https://dev.to/docmath/ann-5b8g","date":1751421621,"author":"Dr. Mathews K. George","guid":179568,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Project] EPL 2024/25 Season Team Performance Dashboard Three: Interactive Visualizations with Python (Streamlit) & Tableau","url":"https://dev.to/ezeeyeyo/project-epl-202425-season-team-performance-dashboard-three-interactive-visualizations-with-3aol","date":1751416733,"author":"Marina Kim(Eunji)","guid":179486,"unread":true,"content":"<p>This Personal project builds upon my previous EPL data analysis work to explore the most exciting matches of 2024/25 season.\nUsing Python and Streamlit, I created an interactive web app that calculates and ranks matches by an  ‚Äî a custom metric designed to capture the thrill of a game based on goals, shots, and whether both teams scored.\nAdditionally, I recreated the same data story with Tableau Public for a visually rich dashboard experience.</p><ul><li>Full-Time Goals(Home &amp; Away)</li><li>Shots on Target(Home &amp; Away)</li></ul><h2>\n  \n  \n  What's New in This Project?\n</h2><ul><li>Definition of a novel :\nExcitement Score = (Total Goals √ó 2) + (Total Shots √ó 0.5) + (Both Teams Scored √ó 3)</li><li>Identification of the top 5 most thrilling matches based on this score</li><li>Interactive Streamlit app to explore these matches with detailed summaries</li><li>Complementary Tableau dashboard for alternative visualization</li></ul><ul><li>Python(pandas, Steamlit): Data processing and interactive web app</li><li>Tableau Public: Visual storytelling with rich dashboards</li><li>Data: EPL 2024/25 season match stats(csv)</li></ul><p>import pandas as pd\nimport streamlit as st</p><p>\ndf = pd.read_csv(\"team_stats_2.csv\")<p>\ndf['Date'] = pd.to_datetime(df['Date'], dayfirst=True).dt.strftime('%d-%m-%Y')</p>\ndf['TotalGoals'] = df['FTHG'] + df['FTAG']<p>\ndf['TotalShots'] = df['HS'] + df['AS']</p>\ndf['BothTeamsScored'] = ((df['FTHG'] &gt; 0) &amp; (df['FTAG'] &gt; 0)).astype(int)\ndf['ExcitementScore'] = df['TotalGoals']<em>2 + df['TotalShots']*0.5 + df['BothTeamsScored']*3\n**Select top 5 matches</em>*\ntop5_matches = df.sort_values(by='ExcitementScore', ascending=False).head(5)</p><ul><li>Matches with higher combined goals and shots naturally rank higher on excitement</li><li>Both teams scoring adds a significant boost to the excitement metric</li><li>The dashboards allow filtering and exploration of match details with summaries</li></ul><ul><li>Designing a custom metric that captures match excitement beyond simple win/loss</li><li>Enhancing data storytelling by combining Python-driven interactivity with Tableau's visualization power</li><li>Practical skills in Streamlit for building user-friendly apps\n</li><li>Handling and visualizing sports data to engage a wider audience</li></ul><h2>\n  \n  \n  What is the Excitement Score?\n</h2><p>As someone aspiring to work in sports data content, I designed the  based on what I feel makes a football match more engaging:</p><ul><li>Both teams scoring adds immersion and drama, so I gave it a weight of 3 points.\n-** Total goals **are the core fun factor, weighted 2 points.</li><li>**Total shots **represent match dynamism, contributing 0.5 points each.</li></ul><p>I considered including other factors like red and yellow cards to reflect game intensity, but my current skill set limited this for now.</p><p>This score is <strong>my personal interpretation</strong> of what makes a match exciting. If your experience or the industry‚Äôs view differs, I‚Äôd love to hear your feedback! I‚Äôm eager to learn and improve this metric to better reflect real-world excitement.</p><p>This project is a first step toward my goal of becoming a sports data content creator. Visualizing the game beyond simple stats helps tell richer stories. </p><p>Thank you for reading and sharing your thoughts - your feedback will help me grow!</p><p>Thanks for reading!</p>","contentLength":3073,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How Does a Python Code Run?","url":"https://dev.to/suleyman_sade/how-does-a-python-code-run-2am5","date":1751416001,"author":"Suleyman Sade","guid":179485,"unread":true,"content":"<p>Have you ever wondered how human-readable  files run on your computer? How does a computer understand instructions written with all those functions, lists, and other components?</p><p>In this blog post ‚Äî just to make things fun and more memorable ‚Äî we‚Äôll explore how Python code is run through an analogy of a chef trying to cook a dish from a recipe written in a foreign language.</p><p>Before we dive in, it is important to note that unlike Python, a lot of programming languages like C++ and Java use . Compilers convert the code written in their respective languages to machine-level , allowing any computer to run them.</p><p>However, Python takes a different approach involving an <em>interpreter, bytecode, and PVM</em> (Python Virtual Machine).</p><p>An interpreter works kind of like a compiler, but instead of converting the  code into binary, it translates it to something called , which is saved as a  file in the  folder.</p><p>üßë‚Äçüç≥\nWe can think of an interpreter as a translator who converts the recipe from a foreign language to visuals, and those visuals as the bytecode. Visuals are not the final dish, but they are something the chef can work with.</p><h3>\n  \n  \n  What is a PVM (Python Virtual Machine)?\n</h3><p>Since Bytecode is a language in between normal Python code and machine code, we need a special tool to execute it. This is where the Python Virtual Machine (PVM) comes in.</p><p>The PVM reads the bytecode and executes the written instructions line-by-line. It is responsible for executing loops, logic statements, etc. ‚Äî all during runtime.</p><p>üßë‚Äçüç≥\nThe PVM is the chef who can understand the visual instructions (bytecode) and cook the dish as requested. The chef doesn‚Äôt involve with the original recipe ( file) ‚Äî they just follow the translated instructions.</p><p>Here is a diagram that sums up the whole process (with the analogy):</p>","contentLength":1814,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I have included the Experimental Results section to strengthen the algorithm‚Äôs empirical validation. Demonstrated 2-approximation ratio experimentally, surpassing theoretical sqrt(n) worst-case bound and providing strong evidence that P = NP.","url":"https://dev.to/frank_vega_987689489099bf/i-have-included-the-experimental-results-section-to-strengthen-the-algorithms-empirical-3hpk","date":1751402007,"author":"Frank Vega","guid":179286,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üöÄ A Better Way to Seed Data Using SQLAlchemy (Async-friendly)","url":"https://dev.to/sajidurshajib/a-better-way-to-seed-data-using-sqlalchemy-async-friendly-4k31","date":1751401938,"author":"Sajidur Rahman Shajib","guid":179285,"unread":true,"content":"<p>In modern backend projects, especially with FastAPI and async SQLAlchemy, seeding initial data like (e.g.,) is an important part. </p><p>Here‚Äôs a practical and scalable approach we used to seed data smoothly:</p><p>\nEach seeder reads data from  files and checks if the entry already exists in the DB. If not, it creates it ‚Äî avoiding duplicates.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p> Your code might be different based on your requirements. </p><p><strong>‚úÖ 2. Shared Async Context</strong>\nWe centralize DB session logic using  to handle init/close properly with async SQLAlchemy.</p><div><pre><code></code></pre></div><p>\nTyper gives us a clean CLI to run seed commands like:</p><p>I didn‚Äôt go into too much detail here‚Äîjust shared the core code for you to copy and use. Hopefully, you‚Äôre already familiar with Python and SQLAlchemy.</p>","contentLength":722,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Serverless FastAPI Testing: Use Moto and Just Mock It!","url":"https://dev.to/aws-builders/serverless-fastapi-testing-use-moto-and-just-mock-it-2p35","date":1751400147,"author":"Adrian Mudzwiti","guid":179244,"unread":true,"content":"<p>We write tests to prove that our code works as designed, however since our code interacts with cloud services it‚Äôs somewhat of a challenge to mock tests to the cloud without actually making api calls that traverse the internet, well that is unless you use Moto.</p><p>Moto is a Python library that mocks AWS services, allowing you to test without making real API calls.</p><p>When it comes to testing applications that interact with cloud services like AWS, mocking becomes essential for a couple of practical reasons.</p><p>First, cloud services cost money. Testing against resources deployed in the cloud isn‚Äôt free.</p><p>Secondly, an active &amp; reliable internet connection is required, it‚Äôs not ideal to have your tests bound to the internet. You might find yourself at a conference with slow and limited wifi connectivity or a space with public wifi that shouldn‚Äôt be trusted. You could be on a plane or train, you might even find yourself in a remote area.</p><p>Mocking allows you to run tests locally without incurring additional costs. Everyone loves to save money after all.</p><h2>\n  \n  \n  Setting Up Your Test Environment\n</h2><p>Some preparation is required to ensure we can run our tests, we need a way for our tests to import modules that we have written as well as letting  know where these files are located.</p><p>This can be achieved by creating a  file as well as a  file.</p><ul><li> file gets the absolute path of the project root directory.</li><li> file sets the path for our app, test paths and silences a deprecation warning for .</li></ul><p>Create these files at your project‚Äôs root:</p><h2>\n  \n  \n  Your First Test: The Root Endpoint\n</h2><p>Create a directory that will be a home for our , name it tests and within this directory create a file named .</p><p>Let‚Äôs create a test for our root endpoint, add the following imports at the top of the file:</p><p>Create a  object and pass  as an argument, add a test function named , see below for the complete code snippet:</p><p>Run <code>pytest test_player.py::test_root</code> in the terminal window. The test should pass.</p><p>We will use  to provide a defined, reliable and consistent context for our tests. This will include player data, mocked AWS credentials for moto and our mock DynamoDB table.</p><p>Let‚Äôs add a couple of fixtures to our code, we will start with creating a fixture that contains a single player‚Äôs data, add this code directly below the  object we created earlier:</p><p>Now we need to take a similar approach for representing all players, however creating a function with all this data will make the code long, a better approach would be to create a separate json file and load the data when the function is called.</p><p>Create a file named  in the  directory and populate it with the below:</p><p>Add the below code to create a fixture that will load the all players data from the json file when the function is called:</p><h2>\n  \n  \n  Mocking AWS credentials and DynamoDB service\n</h2><p>Create a fixture that will mock AWS credentials for below by adding the below code:</p><p>The mocked AWS credentials will be used as an argument for our mock DynamoDB table, add the below code to create another fixture for mocking the AWS DynamoDB service:</p><p>With all the fixtures created, we are now at a stage that we can begin testing the other endpoints that would normally interact with AWS services, albeit mocked in nature.</p><p>We can create a test that will create and return the player data, this function takes in the  and  fixtures we created earlier as arguments, add the below code:</p><p>Run <code>pytest test_player.py::test_create_and_get_player</code>, this test too shall pass.</p><p>Onto the next endpoint, lets test if we can get all players, this will be achieved by loading the players data from a json file and asserting that players names are found and if a certain player is not found.</p><p>Run <code>pytest test_player.py::test_get_all_players</code></p><p>We‚Äôre on a roll with tests that are passing at this stage, lets test the endpoint for updating a player details, the player in question is , he will be transferring to  and will take up the number 10 jersey.</p><p>Run <code>pytest test_player.py::test_update_player</code></p><p>Now let‚Äôs create a test for removing a player.</p><p>Run <code>pytest test_player.py::test_delete_player</code></p><p>The final test is an edge case, lets create a test when removing a non existent player, an error 404 should be returned since the player does not exist.</p><p>Run <code>pytest test_player.py::test_delete_non_existent_player</code></p><p>: Locking down your Lambda Function URL because security isn‚Äôt optional. Stay tuned. ‚ö°Ô∏èüîê</p><p>I‚Äôll cover that in a future post. Until then, happy testing. ‚ö°Ô∏èüêç</p>","contentLength":4459,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üìå Enumerate(): A Concept Every Python Learner Should Know","url":"https://dev.to/rabs/enumerate-a-concept-every-python-learner-should-know-3160","date":1751400110,"author":"Rabina karki","guid":179243,"unread":true,"content":"<p>When looping through a list or any iterable, manually tracking the index of each element can be messy and error-prone. While Python‚Äôs for loops don‚Äôt require a separate counter by default, there are times when we need both the item and its index.</p><p>That‚Äôs where Python‚Äôs built-in enumerate() function comes in. It simplifies looping by giving you the index and the element in a clean and Pythonic way.</p><p>**\nThe enumerate() function adds a counter to an iterable and returns it as an enumerate object. You can use it directly in a for loop to access both the index and the value of each element.</p><div><pre><code>enumerate(iterable, start=0)\n</code></pre></div><p><code>words = ['apple', 'boy', 'cat', 'dog', 'egg', 'fish']\n for i, word in enumerate(words):</code>\nOutput:</p><p>You get both the index and the item ‚Äî no need for range() or manually tracking the index.\nThe Old Way: Without enumerate()\nYou might be doing something like this:<code>for i in range(len(words)):\n    print(i, words[i])</code>\nor even:<code>index = 0\n for word in words:\n     index += 1</code>\nBoth approaches work, but they are longer, messier, and less readable.\nMakes your loop cleaner and more readable<p>\nEliminates the need for range(len(...))</p>\nRemoves manual index tracking.</p><p>\nTracking line numbers while reading a file<p>\nDisplaying quiz options or menu items</p>\nDebugging: print index with values<p>\nDisplaying numbered data in terminal apps</p></p><p>\nenumerate() is one of those small but powerful tools in Python that makes a big difference in how clean and elegant your code looks.<p>\nIt‚Äôs a must-know for any beginner, and a great habit for writing better loops.Next time you reach for range(len(...)), consider using enumerate() instead.</p>\nHave you used enumerate() in your projects yet? Let me know in the comments!</p>","contentLength":1697,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PyCoder‚Äôs Weekly: Issue #688: Checking Dicts, DuckDB, Reading shelve.py, and More (July 1, 2025)","url":"https://pycoders.com/issues/688","date":1751398200,"author":"","guid":179222,"unread":true,"content":"<div><p> To keep code concerns separate you might have two data structures (like an Enum and a dict) that are supposed to change in sequence: adding a value to the Enum requires you to add a similar value in the dict. This is common when separating business logic from UI code. This article shows you ways of making sure the corresponding changes happen together.</p></div><div><p> Google Data Commons announced the general availability of its new Python client library for the Data Commons. The goal of the library is to enhance how students, researchers, analysts, and data scientists access and leverage Data Commons.</p></div><div><p> If you want to progress to being a technical lead, you need to understand how to manage projects. This post talks about the skills you need, and how often times it is mostly about being organized.</p></div><img src=\"https://pycoders.com/issues/688/open/feed\" width=\"1\" height=\"1\" alt=\"alt\"><p><em>[ Subscribe to üêç PyCoder‚Äôs Weekly üíå ‚Äì Get the best Python news, articles, and tutorials delivered to your inbox once a week <a href=\"https://pycoders.com/?utm_source=pycoders&amp;utm_medium=feed&amp;utm_campaign=footer\">&gt;&gt; Click here to learn more</a> ]</em></p>","contentLength":954,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"day5: django architecture;MVC vs MVT","url":"https://dev.to/bocha/django-architecturemvc-vs-mvt-3c3d","date":1751398061,"author":"Bee","guid":179242,"unread":true,"content":"<p>In this post, we'll demystify both patterns and show how Django's MVT is related to the classic MVC. Let‚Äôs get into it!</p><p>The <strong>MVC (Model-View-Controller)</strong> design pattern is a <strong>software architectural pattern</strong> that separates application logic into three interconnected components:</p><ul><li> The part that handles the . It defines how data is stored, retrieved, and manipulated ‚Äî usually tied to a database.</li><li> The  or representation layer. It presents the data to the user.</li><li> The  that handles user input, updates the model, and decides which view to show.</li></ul><p>This separation makes applications easier to scale and maintain.</p><h3>\n  \n  \n  Here's a visual breakdown:\n</h3><p>MVC is widely used in frameworks like Ruby on Rails, Laravel (PHP), and ASP.NET.</p><h2>\n  \n  \n  Enter Django: The MVT Way\n</h2><p>Django follows the  architectural pattern, which is a variation of the traditional  design pattern used in web development. This pattern separates the application into three main components:</p><ul><li> Manages the data ‚Äî built using Django‚Äôs ORM. Defines the structure of your database.</li><li><strong>View (different from MVC):</strong> In Django, the ‚ÄúView‚Äù contains the . It fetches data from the model and passes it to the template.</li><li> Responsible for rendering the final  ‚Äî your front-end content.</li></ul><p>Now here‚Äôs the diffrence:</p><blockquote><p><strong>In Django, the \"View\" from MVC is called the \"Template\", and the \"Controller\" role is handled by the Django framework itself.</strong></p></blockquote><p>So Django's View is actually the Controller in traditional MVC!</p><h3>\n  \n  \n  here is the visual breakdown\n</h3><h2>\n  \n  \n  üîÅ Side-by-Side: MVC vs MVT\n</h2><div><table><tbody><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table></div><h3>\n  \n  \n  here is the visual breakdown!\n</h3><p>So Django automates a lot of what traditional MVC expects you to write manually. </p><h2>\n  \n  \n  üõ†Ô∏è Example: A Simple Blog\n</h2><p>Let‚Äôs say we‚Äôre building a blog:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code>\n{% for post in posts %}\n  {{ post.title }}{{ post.content }}{{ post.date_posted }}\n{% endfor %}\n</code></pre></div><p>This is the heart of Django‚Äôs MVT ‚Äî clean separation, yet tightly integrated by Django‚Äôs robust request handling.</p><ul><li> You work on templates separately from the business logic and data models.</li><li> The model definitions give you an auto-generated backend.</li><li> The architecture supports large projects out-of-the-box.</li><li> You can go from idea to MVP in record time.</li></ul><p>By understanding how MVT maps to traditional MVC, you'll appreciate Django‚Äôs design even more. It's MVC with a twist ‚Äî and that twist is what makes Django so .</p><h3>\n  \n  \n  here are the links to learn more;\n</h3>","contentLength":2368,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"First Program","url":"https://dev.to/emorrison210/first-program-36g1","date":1751396146,"author":"Evan Morrison","guid":179196,"unread":true,"content":"<p>Hello, just wanted to share my first ever program as a total beginner to coding. I just made a simple blackjack game in python.</p>","contentLength":127,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 5: Understanding Django‚Äôs MVT vs MVC ‚Äì Models, Views, Templates & URLs Demystified!","url":"https://dev.to/rinnahoyugi/day-5-understanding-djangos-mvt-vs-mvc-models-views-templates-urls-demystified-2gol","date":1751393431,"author":"@rinnah","guid":179195,"unread":true,"content":"<h2>\n  \n  \n  üéâ Welcome to Day 5 of Django Journey!\n</h2><p>Today, we break down the architecture that powers Django apps ‚Äî the  pattern ‚Äî and compare it to the classic . If you've heard about , , , and got confused, you're not alone! Let‚Äôs untangle that web. üï∏Ô∏è</p><h2>\n  \n  \n  üß† MVC vs MVT ‚Äî What‚Äôs the Difference?\n</h2><p>Before diving into Django specifics, let‚Äôs explore what these patterns mean.</p><h3>\n  \n  \n  üß© MVC (Model-View-Controller)\n</h3><p>This pattern separates your application into:</p><ul><li> ‚Äì The data and database layer.</li><li> ‚Äì The UI or frontend display.</li><li> ‚Äì The logic that controls data flow between the Model and View.</li></ul><p>Used in frameworks like Laravel, Ruby on Rails, and ASP.NET.</p><h3>\n  \n  \n  üß© MVT (Model-View-Template) in Django\n</h3><p>Django follows MVT, which looks very similar:</p><ul><li> ‚Äì Represents data (just like MVC).</li><li> ‚Äì Handles logic and pulls data from the model.</li><li> ‚Äì The HTML interface shown to users.</li></ul><blockquote><p>In Django, <strong>the View is like the Controller</strong> in MVC, and <strong>the Template acts as the View</strong>.</p></blockquote><h2>\n  \n  \n  üèóÔ∏è Let‚Äôs Understand Each MVT Component\n</h2><h3>\n  \n  \n  üîπ 1. Model ‚Äì Your Data's Structure\n</h3><p>The Model defines how data is stored in the database using Django‚Äôs ORM (Object Relational Mapping). It avoids writing raw SQL.</p><div><pre><code></code></pre></div><ul><li>Models map directly to database tables.</li><li>Each class = 1 table, each field = 1 column.</li></ul><p>The View is the middleman. It receives user requests, talks to the model, then selects the template to display.</p><p><code>python\ndef home(request):<p>\n    posts = BlogPost.objects.all()</p>\n    return render(request, 'home.html', {'posts': posts})</code></p><ul><li>Think of Views as your app‚Äôs .</li><li>It returns a response, usually HTML.</li></ul><h3>\n  \n  \n  üîπ 3. Template ‚Äì The Frontend\n</h3><p>Templates are what users see ‚Äî HTML files with dynamic placeholders.</p><p><code>html\n{% for post in posts %}<p>\n  &lt;h2&gt;{{ post.title }}&lt;/h2&gt;</p>\n  &lt;p&gt;{{ post.content|truncatewords:20 }}&lt;/p&gt;</code></p><ul><li>Templates use Django Template Language (DTL).</li><li>They display data passed by the view.</li></ul><p>Django uses a URL dispatcher to connect browser paths to views.</p><p><code>python\npath('', views.home, name='home')</code></p><h2>\n  \n  \n  üß≠ The Flow of Data (Visual Recap)\n</h2><p><code>plaintext\nBrowser Request\n  URLConf (urls.py)\n     View (views.py)\n   Model (if needed)\n  Template (HTML page)\nBrowser Response</code></p><h2>\n  \n  \n  üîê Admin Panel ‚Äì MVT in Action\n</h2><p>Register a model and get a full-featured admin UI to create, read, update, and delete records!</p><p><code>python\nadmin.site.register(BlogPost)</code></p><p>Then visit  after running:</p><p><code>bash\npython manage.py createsuperuser</code></p>","contentLength":2400,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (12)","url":"https://dev.to/hyperkai/string-in-python-12-3hj5","date":1751392541,"author":"Super Kai (Kazuya Ito)","guid":179156,"unread":true,"content":"<p><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.strip\" rel=\"noopener noreferrer\">strip()</a> can remove zero or more characters() from the left and right character of a string one by one as shown below:</p><ul><li>The 1st argument is (Optional-Defualt:-Type: or ):\n*Memos:\n\n<ul><li>It's the zero or more characters to remove from the left and right character of a string one by one.</li><li>Its each character is considered one by one so it's not a prefix and suffix.</li><li>If it's not set or ,  is set.</li></ul></li></ul><div><pre><code></code></pre></div><p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.lstrip\" rel=\"noopener noreferrer\">lstrip()</a> can remove zero or more characters() from the left character of a string one by one as shown below:</p><ul><li>The 1st argument is (Optional-Defualt:-Type: or ):\n*Memos:\n\n<ul><li>It's the zero or more characters to remove from the left character of a string one by one.</li><li>Its each character is considered one by one so it's not a prefix.</li><li>If it's not set or ,  is set.</li></ul></li></ul><div><pre><code></code></pre></div><p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.rstrip\" rel=\"noopener noreferrer\">rstrip()</a> can remove zero or more characters() from the right character of a string one by one as shown below:</p><ul><li>The 1st argument is (Optional-Defualt:-Type: or ):\n*Memos:\n\n<ul><li>It's the zero or more characters to remove from the right character of a string one by one.</li><li>Its each character is considered one by one so it's not a suffix.</li><li>If it's not set or ,  is set.</li></ul></li></ul><div><pre><code></code></pre></div><p><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.isspace\" rel=\"noopener noreferrer\">isspace()</a> can check if a string only has ASCII whitespaces and isn't empty as shown below:</p><div><pre><code></code></pre></div>","contentLength":1178,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Behind the Underscores EP10: Context Management (__enter__, __exit__)","url":"https://dev.to/hevalhazalkurt/behind-the-underscores-ep10-context-management-enter-exit-2kab","date":1751392213,"author":"Heval Hazal Kurt","guid":179155,"unread":true,"content":"<p>Have you ever opened a file in Python, wrote something, and forgot to close it? Maybe it didn‚Äôt break your program, but it‚Äôs not good practice. Leaving files or network connections open can cause resource leaks, meaning you‚Äôre using up system memory or leaving a file locked unnecessarily. That‚Äôs where context managers come in. They handle the ‚Äúsetup and teardown‚Äù automatically so you can focus on your logic without worrying about the cleanup.</p><p>This blog will guide you through:</p><ul><li>What a context manager is</li><li>How  and  work</li><li>Real-life use cases and examples</li><li>How to write your own context managers both class-based and function-based</li></ul><h2>\n  \n  \n  What Is a Context Manager?\n</h2><p>A context manager is a Python object that properly manages resources like files, network connections, or database sessions. It makes sure things are set up when you enter a block of code and cleaned up when you leave it, even if something goes wrong.</p><p>You‚Äôve already used one before:</p><div><pre><code></code></pre></div><p>What this does behind the scenes:</p><ol><li>Python calls , then </li><li>It runs your  inside the  block</li><li>When the block is done or crashes, it calls  to close the file</li></ol><p>You didn‚Äôt have to write a / block. Python cleaned up for you.</p><h2>\n  \n  \n  The  and  Methods\n</h2><p>To create a context manager yourself, you need a class that defines two special methods:</p><div><pre><code></code></pre></div><p>Let‚Äôs see this in action with a simple logger.</p><h2>\n  \n  \n  Example 1: A Simple Logging Context Manager\n</h2><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code>Starting the timer...\nElapsed time: 1.50 seconds\n</code></pre></div><p>Even if there‚Äôs an error inside the block,  still runs which is great for cleanup.</p><p>Let‚Äôs take this a bit further. Here are some practical real-world problems you can solve with custom context managers.</p><h3>\n  \n  \n  1. <strong>Automatically Closing Resources</strong></h3><p>Imagine you're working with file handles, network sockets, or database connections. You need to ensure they're closed no matter what happens.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h3><strong>2. Temporarily Change Working Directory</strong></h3><p>You might want to run a script in a different folder temporarily and go back automatically.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>It cleanly returns you to your original path. Great for file-heavy automation scripts.</p><h3>\n  \n  \n  3. <strong>Thread Locking in Multithreading</strong></h3><p>Working with ?</p><div><pre><code></code></pre></div><p>The lock is automatically released after the block.</p><h3>\n  \n  \n  4. <strong>Suppressing Output Temporarily</strong></h3><p>Sometimes you use a noisy library that prints too much. You can silence it:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>This is handy when running external tools or verbose APIs.</p><p>Want to retry a risky operation automatically?</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>You just built a mini fault-tolerant system!</p><p>Context managers are one of Python‚Äôs most powerful but underused features. Once you start using them, you'll find dozens of places where they clean up your code and prevent bugs especially around resources, cleanup, and state changes.</p><ul><li>You need something to be cleaned up after use</li><li>You're dealing with files, sockets, locks, or temporary state</li><li>You want readable and bug-resistant code</li></ul><p>Start small. Try writing one or two yourself. You‚Äôll see how easy and useful they really are.</p>","contentLength":2885,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Use Vibe Coding Without Making a Mess (And What I Learned Along the Way)","url":"https://dev.to/urielcuriel_41/how-to-use-vibe-coding-without-making-a-mess-and-what-i-learned-along-the-way-230m","date":1751386520,"author":"Uriel Curiel","guid":179093,"unread":true,"content":"<p> is everywhere lately‚Äîmostly as a meme or criticism aimed at people trying to build software without really knowing how to code, or at replacing developers with AI.<p>\nBut‚Ä¶ what happens when it's used by an experienced engineer solving a real problem?</p></p><p>Spoiler: the problem wasn‚Äôt the AI. It was me, thinking in TypeScript while coding in Python.</p><p>In this post, I want to share how I went from a <em>vibe-coded AI-generated PoC</em> full of forced ideas to a robust, clean and 20x faster solution. Not to convince you to use AI, but to show how you can actually benefit from it without forgetting good design principles.</p><h2>\n  \n  \n  From a Proof of Concept to a working idea (with GitHub Copilot)\n</h2><p>Before I sit down and start writing code for hours straight, I prefer to plan what I want to build using Design Docs (if you want me to write about that, let me know in the comments). So I started thinking about the architecture I‚Äôd need to solve my problem: a way to parse semantic chunks from large documents to improve context and accuracy in RAGs.</p><p>Once I had the architecture, I started asking Copilot to write different parts of it. And here‚Äôs where I made my first conceptual mistake: <strong>I was thinking in TypeScript, not in a ‚Äúpythonic‚Äù way</strong>.</p><p>I‚Äôve been using Nest.js for years, and it got me used to a specific and powerful way of building apps, where it‚Äôs common to define logic and metadata using . My plan, described in the Design Doc, followed that philosophy:</p><ol><li><p><strong>Node definitions with class and property decorators:</strong><p>\nI imagined classes for each node type (like Rule, Article, Paragraph) and decorators like </p> or  on properties.</p></li><li><p><strong>A centralized and smart TreeBuilder:</strong><p>\nIt would introspect the classes, read the decorators and metadata, and build the tree.</p></p></li><li><p><strong>Inheritance only for nesting, not behavior:</strong><p>\nThe main logic lived inside the TreeBuilder, not in the nodes themselves.</p></p></li></ol><p>With this TypeScript-style mindset, the AI was the perfect coding buddy. Like a junior developer with a lot of knowledge but no judgment, it did exactly what I asked: metaclasses, introspection, magic.  </p><p>And yeah, the code worked. It met all the requirements from the Design Doc. The PoC was a success. But the code felt messy and overengineered. It looked like a TypeScript project wearing Python syntax.</p><h2>\n  \n  \n  Refactoring with real software engineering: from ‚Äúwhat‚Äù to idiomatic ‚Äúhow‚Äù\n</h2><p>This is where the real engineering starts. With the PoC validated, I went back to the Design Doc‚Äînot to change the goal, but to rethink the implementation.</p><p>The code was the result of asking for a ‚Äútranslation‚Äù of a pattern, instead of asking for a ‚Äúpythonic‚Äù solution. So I decided to refactor it. This time, I was the architect, and the AI was just my assistant.</p><ol><li><strong>Replace decorators and metaclasses with basic inheritance.</strong></li><li><strong>Use  for data-only structures.</strong></li><li><strong>Remove the central builder logic and let each class build itself.</strong></li></ol><p>I still used the AI, but now with more precise instructions:,‚Äù ‚ÄúSuggest a method for the base class,‚Äù and so on.</p><h2>\n  \n  \n  The measurable impact of simplicity\n</h2><p>After refactoring, I wrote performance tests using a big and complex document to compare both versions. And the results were clear:</p><div><table><thead><tr><th>Refactored (Human-AI guided)</th></tr></thead><tbody><tr></tr><tr></tr><tr></tr></tbody></table></div><p>The new version wasn‚Äôt just faster‚Äîit was also smarter, more readable, and easier to maintain. All because I chose simplicity and good design.</p><h2>\n  \n  \n  Final thoughts: our role in the  era\n</h2><p>This project taught me something important:  with AI is amazing for quick prototyping. It lets us explore ideas fast.  </p><p>But when the code ‚Äúworks,‚Äù that‚Äôs where our real job starts.</p><p>AI is not a threat for devs who understand software engineering principles. It‚Äôs a tool. The best assistant we‚Äôve ever had. Our future is not about being replaced, but about becoming better architects, better guides, and better software crafters.</p><p><em>Have you been through something similar using AI to code? Want me to write more about Design Docs or Python project structures? I‚Äôd love to hear from you in the comments.</em></p>","contentLength":4004,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Use Vibe Coding Without Making a Mess (And What I Learned Along the Way)","url":"https://dev.to/urielcuriel/how-to-use-vibe-coding-without-making-a-mess-and-what-i-learned-along-the-way-230m","date":1751386520,"author":"Uriel Curiel","guid":179154,"unread":true,"content":"<p> is everywhere lately‚Äîmostly as a meme or criticism aimed at people trying to build software without really knowing how to code, or at replacing developers with AI.<p>\nBut‚Ä¶ what happens when it's used by an experienced engineer solving a real problem?</p></p><p>Spoiler: the problem wasn‚Äôt the AI. It was me, thinking in TypeScript while coding in Python.</p><p>In this post, I want to share how I went from a <em>vibe-coded AI-generated PoC</em> full of forced ideas to a robust, clean and 20x faster solution. Not to convince you to use AI, but to show how you can actually benefit from it without forgetting good design principles.</p><h2>\n  \n  \n  From a Proof of Concept to a working idea (with GitHub Copilot)\n</h2><p>Before I sit down and start writing code for hours straight, I prefer to plan what I want to build using Design Docs (if you want me to write about that, let me know in the comments). So I started thinking about the architecture I‚Äôd need to solve my problem: a way to parse semantic chunks from large documents to improve context and accuracy in RAGs.</p><p>Once I had the architecture, I started asking Copilot to write different parts of it. And here‚Äôs where I made my first conceptual mistake: <strong>I was thinking in TypeScript, not in a ‚Äúpythonic‚Äù way</strong>.</p><p>I‚Äôve been using Nest.js for years, and it got me used to a specific and powerful way of building apps, where it‚Äôs common to define logic and metadata using . My plan, described in the Design Doc, followed that philosophy:</p><ol><li><p><strong>Node definitions with class and property decorators:</strong><p>\nI imagined classes for each node type (like Rule, Article, Paragraph) and decorators like </p> or  on properties.</p></li><li><p><strong>A centralized and smart TreeBuilder:</strong><p>\nIt would introspect the classes, read the decorators and metadata, and build the tree.</p></p></li><li><p><strong>Inheritance only for nesting, not behavior:</strong><p>\nThe main logic lived inside the TreeBuilder, not in the nodes themselves.</p></p></li></ol><p>With this TypeScript-style mindset, the AI was the perfect coding buddy. Like a junior developer with a lot of knowledge but no judgment, it did exactly what I asked: metaclasses, introspection, magic.  </p><p>And yeah, the code worked. It met all the requirements from the Design Doc. The PoC was a success. But the code felt messy and overengineered. It looked like a TypeScript project wearing Python syntax.</p><h2>\n  \n  \n  Refactoring with real software engineering: from ‚Äúwhat‚Äù to idiomatic ‚Äúhow‚Äù\n</h2><p>This is where the real engineering starts. With the PoC validated, I went back to the Design Doc‚Äînot to change the goal, but to rethink the implementation.</p><p>The code was the result of asking for a ‚Äútranslation‚Äù of a pattern, instead of asking for a ‚Äúpythonic‚Äù solution. So I decided to refactor it. This time, I was the architect, and the AI was just my assistant.</p><ol><li><strong>Replace decorators and metaclasses with basic inheritance.</strong></li><li><strong>Use  for data-only structures.</strong></li><li><strong>Remove the central builder logic and let each class build itself.</strong></li></ol><p>I still used the AI, but now with more precise instructions:,‚Äù ‚ÄúSuggest a method for the base class,‚Äù and so on.</p><h2>\n  \n  \n  The measurable impact of simplicity\n</h2><p>After refactoring, I wrote performance tests using a big and complex document to compare both versions. And the results were clear:</p><div><table><thead><tr><th>Refactored (Human-AI guided)</th></tr></thead><tbody><tr></tr><tr></tr><tr></tr></tbody></table></div><p>The new version wasn‚Äôt just faster‚Äîit was also smarter, more readable, and easier to maintain. All because I chose simplicity and good design.</p><h2>\n  \n  \n  Final thoughts: our role in the  era\n</h2><p>This project taught me something important:  with AI is amazing for quick prototyping. It lets us explore ideas fast.  </p><p>But when the code ‚Äúworks,‚Äù that‚Äôs where our real job starts.</p><p>AI is not a threat for devs who understand software engineering principles. It‚Äôs a tool. The best assistant we‚Äôve ever had. Our future is not about being replaced, but about becoming better architects, better guides, and better software crafters.</p><p><em>Have you been through something similar using AI to code? Want me to write more about Design Docs or Python project structures? I‚Äôd love to hear from you in the comments.</em></p>","contentLength":4004,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 5: What MVC & MVT Finally Clicked for Me","url":"https://dev.to/zabby/day-5-what-mvc-vs-mvt-finally-clicked-for-me-129","date":1751384912,"author":"Zabby","guid":179031,"unread":true,"content":"<p>Today felt like solving one of those architecture riddles I kept brushing past. For the first time, I clearly understood how Django‚Äôs <strong>MVT (Model‚ÄìView‚ÄìTemplate)</strong> compares to the more commonly discussed <strong>MVC (Model‚ÄìView‚ÄìController)</strong> pattern. \nSpoiler: it‚Äôs not as different as it sounds but Django definitely does things its own way.</p><ul><li> ‚Äì Handles business logic and database structure.</li><li> ‚Äì The UI: what the user sees (HTML, CSS).</li><li> ‚Äì Logic that connects user input, the model, and the view</li></ul><p>Classic, clean, and logical.</p><h2>\n  \n  \n  Django‚Äôs MVT ‚Äî The Same but Different\n</h2><p>Django swaps out some names and bakes a few decisions into the framework for you. Here's Django's version:</p><ul><li><p> ‚Äì Still your database structure and logic, powered by Django ORM</p></li><li><p> ‚Äì Unlike MVC, this is your Python function or class that handles requests and responses</p></li><li><p> ‚Äì Where your HTML and front end presentation lives</p></li></ul><p>And the  stays the same</p><h2>\n  \n  \n  Visualizing the Architecture\n</h2><p>Here's a side-by-side comparison I found helpful:</p><div><pre><code>MVC                        Django MVT\n--------------------      --------------------\nModel       ‚Üí  Model       (unchanged)\nView        ‚Üí  Template    (the UI)\nController  ‚Üí  View        (Python logic)\n</code></pre></div><p>And here's a diagram that makes it even clearer:</p><p>This really helped me lock in Django's flow: <strong>Request ‚Üí View (logic) ‚Üí Model (if needed) ‚Üí Template (response)</strong></p><p>Here‚Äôs what made it click. I wrote this Django view:</p><div><pre><code>def home(request):\n    return render(request, 'home.html', {'msg': 'Welcome to Day 5!'})\n</code></pre></div><p>Then connected it to , where I rendered that  variable. That‚Äôs when it hit me:</p><ul><li><p>The  here is controlling the flow it‚Äôs the Controller.</p></li><li><p>The  is responsible only for display just like MVC's View.</p></li></ul><p>Suddenly, MVT made total sense.</p><p>I used to misplace logic doing too much in templates or confusing Django‚Äôs terminology. Now:</p><ul><li><p>I know where business logic belongs (views and models)</p></li><li><p>I respect Django‚Äôs separation of concerns</p></li><li><p>I debug faster, because I understand what each layer is responsible for</p></li></ul><ul><li><p>Created function-based views with context data</p></li><li><p>Connected views to templates using urls.py</p></li><li><p>Explored class-based views (will dive deeper soon)</p></li></ul><p>This laid the groundwork for understanding more advanced patterns like mixins, CBVs, and reusable components.</p><p>‚ÄúMVT helped me understand MVC more clearly.‚Äù</p><p>Funny how Django‚Äôs unique naming convention challenged me then clarified everything I‚Äôd half-learned in other frameworks.</p><p>If you‚Äôre new to Django or architecture in general, don‚Äôt stress. Let the code teach you. The more you build, the clearer it becomes.</p>","contentLength":2558,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"EvoAgentX for Energy Markets: Build AI Agents That See the Risk Before the Spike","url":"https://dev.to/evoagentx/evoagentx-for-energy-markets-build-ai-agents-that-see-the-risk-before-the-spike-g8d","date":1751383990,"author":"EvoAgentX","guid":179030,"unread":true,"content":"<p>The future of oil price intelligence isn‚Äôt on Wall Street ‚Äî it‚Äôs open-source, evolving, and just one prompt away.</p><p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F0yg01i70rbusucs5drbm.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F0yg01i70rbusucs5drbm.png\" alt=\"Image description\" width=\"800\" height=\"1200\"></a>\nWhen global events strike ‚Äî like the recent Iran‚ÄìIsrael conflict ‚Äî oil markets react in seconds.<p>\n \"Crude prices soar. Futures whipsaw. Decision-makers scrambleÔºÅ\"</p></p><p>But what if your AI agents could detect early signals and evolve strategies before the market even moves?</p><p>üöÄ Enter EvoAgentX ‚Äî the self-evolving AI agent framework built for high-stakes environments like energy trading and risk forecasting.\nWith EvoAgentX, you can create fully functioning multi-agent systems by simply describing your goal in natural language.</p><p>No prompt chains. No coding complex agent flows. EvoAgentX handles:\n ‚öôÔ∏è Auto-generating your agent workflow<p>\n üß† Plug-and-play prompt optimization</p>\n üîÑ Self-evolution based on real-world results</p><p>üí° In energy finance, this means you can build agents that:\n üìà Track crude spot and futures prices<p>\n üì∞ Scrape breaking geopolitical news and conflict signals</p>\n üìä Cross-analyze sentiment, market data, and volatility indexes<p>\n ü§ñ Propose hedging or rebalance strategies on the fly</p>\n üîî Send alerts before market-moving events hit your P&amp;L</p><p>üåç All powered by open LLMs (yes ‚Äî local models too), and with ongoing support for Chinese workflows, long-term memory modules, and human-in-the-loop control.\nAnd it‚Äôs just getting started.</p><p>EvoAgentX is built by a team of researchers and open-source contributors from the University of Glasgow and beyond, with a vision:\nTo create a truly autonomous ecosystem of AI agents that can evolve, adapt, and collaborate at scale.</p><p>Whether you‚Äôre in:\nüõ¢ Energy trading\n üí∞ Fintech strategy\n üåê AI infrastructure<p>\nNow is your moment to explore what‚Äôs possible with agentic intelligence.</p>\nüîó GitHub: <a href=\"https://github.com/EvoAgentX/EvoAgentX\" rel=\"noopener noreferrer\">https://github.com/EvoAgentX/EvoAgentX</a>\nüì£ Star the repo ‚Äî and join the next wave of intelligent systems.</p>","contentLength":1911,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (11)","url":"https://dev.to/hyperkai/string-in-python-11-55co","date":1751378523,"author":"Super Kai (Kazuya Ito)","guid":178986,"unread":true,"content":"<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.zfill\" rel=\"noopener noreferrer\">zfill()</a> can add the one or more s before the string set width as shown below:</p><ul><li>The 1st argument is (Required-Type:):\n*Memos:\n\n<ul><li>It decides the width of a string.</li></ul></li><li>If the 1st character of a string is  or , the one or more s are added after it.\n</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.expandtabs\" rel=\"noopener noreferrer\">expandtabs()</a> can replace  with zero or more spaces as shown below:</p><ul><li>The 1st argument is (Optional-Default:-Type:):\n*Memos:\n\n<ul><li>It decides tab size to replace  with zero or more spaces.</li><li>The number of spaces depending on the word before .\n</li></ul></li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div>","contentLength":468,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: Implementing the Factory Method Pattern in Python","url":"https://realpython.com/courses/factory-method-pattern/","date":1751378400,"author":"","guid":178958,"unread":true,"content":"<p>The book describes design patterns as a core design solution to reoccurring problems in software and classifies each design pattern into <a href=\"https://en.wikipedia.org/wiki/Software_design_pattern#Classification_and_list\">categories</a> according to the nature of the problem. Each pattern is given a name, a problem description, a design solution, and an explanation of the consequences of using it.</p><p>The GoF book describes Factory Method as a creational design pattern. Creational design patterns are related to the creation of objects, and Factory Method is a design pattern that creates objects with a common <a href=\"https://realpython.com/python-interface/\">interface</a>.</p><p>This is a recurrent problem that <strong>makes Factory Method one of the most widely used design patterns</strong>, and it‚Äôs very important to understand how it works and know how to apply it.</p><p><strong>By the end of this video course, you‚Äôll</strong>:</p><ul><li>Understand the  of </li><li>Recognize  to use  in your applications</li><li>Know how to  and  by using the pattern</li><li>Be able to  where  is the appropriate design pattern</li><li>Know how to choose an <strong>appropriate implementation</strong> of </li><li>Understand how to <strong>implement a reusable, general purpose solution</strong> of </li></ul>","contentLength":1019,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From Unemployed to Unstoppable: Build a Skill Empire with LivinGrimoire","url":"https://dev.to/owly/from-unemployed-to-unstoppable-build-a-skill-empire-with-livingrimoire-5392","date":1751378185,"author":"owly","guid":178985,"unread":true,"content":"<p>üí• ‚ÄúThe LivinGrimoire Revolution: Build Skills Like Spells, Sell Them Like Gold‚Äù</p><p>üëÅÔ∏è INTRO: Cold Truth, Served Raw</p><p>`markdown\nStill refreshing your inbox for a ‚Äúwe regret to inform you‚Äù email?</p><p>Still coding your heart out just to have AI do it better, faster, colder?</p><p>The tech world doesn‚Äôt need you‚Äîit replaced you the minute your badge stopped scanning. It‚Äôs brutal, but it‚Äôs the truth.</p><p>And the alternative? It isn‚Äôt pretty. That line between DevOps and stocking discount socks at Walmart is thinner than you think.\n`</p><p>üß† REVEAL: The Matrix Wasn‚Äôt Just a Movie</p><p>Enter the LivinGrimoire‚Äîa next-generation software design pattern that lets you ‚Äúupload‚Äù skills into a system like Neo plugging into the Matrix.</p><p>With just one line of code‚ÄîaddSkill()‚Äîyou can install an entire module of logic, behavior, or AI-driven functionality. Like magic. Like spellcraft. Like power.</p><p>What‚Äôs a skill? Anything:</p><ul><li>A natural language parser</li><li>A waifu personality module</li><li>An Arduino robotics control package</li><li>A multi-threaded algorithm</li></ul><p>No boilerplate. No spaghetti. No begging some Dev Manager for code review. You don‚Äôt even need a UI. Just build your skill, plug it in, and watch it run.</p><p>üîê WHY IT MATTERS: One Line to Rule Them All</p><ul><li>üß© Integrate sensors and output devices like servos, mics, speakers, and more with a single invocation.</li><li>üß† Augment AI with heuristic, non-deterministic skills‚Äîteaching agents to act, feel, and adapt.</li><li>üì¶ Absorb third-party AIs, wrap them in your logic, and control them like familiars.</li><li>üö´ Bypass corporate censorship and gatekeeping by hosting your waifus, agents, or microservices on your terms.</li><li>üéÆ Gamify intelligence‚Äîlet your bots grow their skill trees like RPG characters. Add, remove, evolve.</li></ul><p>üí∏ THE OPPORTUNITY: A Gold Mine Wrapped in Code</p><p>There‚Äôs a hunger for plug-and-play magic:</p><ul><li>Every hobbyist wants to wire their robot without reading 43 StackOverflow posts.</li><li>Every indie dev wants to bolt personality onto an LLM without rebuilding it.</li><li>Every solopreneur wants smarter automation.</li></ul><p>And now they can buy your spells.</p><p>Build LivinGrimoire skills. Sell them on:</p><ul><li>Etsy for the synthwave-engineer crowd</li><li>SatoshiBoxes for crypto-native direct sales</li><li>Your own grimoire storefront</li></ul><p>You don‚Äôt need VC backing or a million followers. You just need something that works. And LivinGrimoire makes it work.</p><p>üî• THE URGENCY: Don‚Äôt Wait for Permission</p><p>`markdown\nRight now, somewhere, a dev is getting laid off while another dev is making $2,000 a month selling hot-swappable LivinGrimoire modules to waifu creators.</p><p>Guess who ends up living in a glass high-rise? Spoiler: it ain‚Äôt the guy refreshing job boards.</p><p>You can build your independence. One skill at a time. One line of code at a time. Or you can keep hoping your next \"real job\" will treat you better than the last.\n`</p><p>‚ú® CLOSING: You‚Äôre Not Just Coding. You‚Äôre Conjuring.</p><p>The world doesn‚Äôt need another resume. It needs another Spellwright.</p><p>LivinGrimoire isn‚Äôt a tool. It‚Äôs a revolution. And there‚Äôs still time to be one of the first. The agents of automation are rising. What are you building?</p>","contentLength":3090,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"CLI tool: zipline/backtrader/vectorbt/backtesting.py --> Alpaca/IBKR in 10 seconds","url":"https://dev.to/realfishsam/cli-tool-ziplinebacktradervectorbtbacktestingpy-alpacaibkr-in-10-seconds-1njf","date":1751374313,"author":"Samuel EF. Tinnerholm","guid":178909,"unread":true,"content":"<p>Strategy development is hard enough, but then comes the deployment gap between backtesting and live trading. Built a strategy in VectorBT or backtesting.py? You face a complete rewrite for live trading.</p><p>Two days ago, I launched StrateQueue to solve this. The response has been incredible: 26 GitHub stars and 1,300 downloads in 48 hours from the quant community on Reddit.</p><p>Every quant hits the same wall: your backtesting strategy works perfectly, but going live means starting over. The frameworks we love for research: <strong>VectorBT, backtesting.py, backtrader, and Zipline</strong>, aren't designed for real-time execution. You end up rewriting everything from scratch, introducing bugs, and losing weeks of development time. I've been through this cycle too many times.</p><p>StrateQueue acts as a bridge between your existing backtesting code and live brokers. No rewrites, no framework changes, just point it at your strategy file and specify your broker. It handles the real-time data feeds, order management, and execution logic while your strategy code stays exactly the same. The whole deployment process takes under 10 seconds.</p><div><pre><code>pip stratequeue\nstratequeue deploy  examples/strategies/backtestingpy/sma.py  AAPL  1m\n</code></pre></div><h2>\n  \n  \n  Contribution and Feedback\n</h2><p>Looking for feedback from real traders on what features matter most. Contributors are welcomed, especially for optimization, advanced order types, and aiding in the development of a dashboard stratequeue webui. Happy to answer questions!</p>","contentLength":1474,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From Words to Worlds: Understanding Generative AI's Text-to-Image Revolution","url":"https://dev.to/dev_patel_35864ca1db6093c/from-words-to-worlds-understanding-generative-ais-text-to-image-revolution-5f8g","date":1751373574,"author":"Dev Patel","guid":178908,"unread":true,"content":"<p>Imagine telling a computer, \"A majestic lion surveying its kingdom from a sun-drenched savannah,\" and having it instantly generate a breathtakingly realistic image. This isn't science fiction; it's the reality of generative AI, specifically text-to-image models. These powerful algorithms are transforming how we create and interact with visual content, ushering in a new era of artistic expression and technological innovation.</p><p><strong>Understanding the Magic: How Text Becomes an Image</strong></p><p>At its core, a text-to-image model is a sophisticated computer program trained on massive datasets of images and their corresponding text descriptions. Think of it like teaching a child to draw by showing them countless pictures and telling them what they depict. Over time, the child learns to associate words with visual elements ‚Äì a \"fluffy white cat\" evokes images of soft fur and round eyes. Similarly, these AI models learn the complex relationships between words and visual features.</p><p>The process begins with a text prompt, a sentence or paragraph describing the desired image. This prompt is then fed into a neural network ‚Äì a complex system inspired by the human brain ‚Äì that has been trained to understand the meaning and nuances of language and translate them into visual representations. The network doesn't simply search for pre-existing images; it generates entirely new ones based on its learned understanding. It essentially \"paints\" a picture based on your textual instructions.</p><p>This process involves several intricate steps, including:</p><ul><li> The model converts the text prompt into a numerical representation that it can understand.</li><li> Using this numerical representation, the model generates a latent representation, a compressed form of the image.</li><li>  The latent representation is then decoded into a full-fledged image, often using techniques like diffusion models that gradually refine a noisy image into a coherent one.</li></ul><p><strong>Significance and Impact: A New Creative Frontier</strong></p><p>The significance of text-to-image models cannot be overstated. They democratize image creation, empowering individuals without artistic training to generate stunning visuals. This has profound implications across numerous fields:</p><ul><li><strong>Marketing and Advertising:</strong> Businesses can quickly and cost-effectively create compelling visuals for campaigns, websites, and social media.</li><li>  Generating diverse and detailed game assets becomes significantly faster and more efficient.</li><li>  Text-to-image models can aid in concept art, storyboarding, and even generating background elements.</li><li>  Students can use these tools to visualize abstract concepts and create engaging educational materials.</li><li>  Artists can utilize these models as powerful creative tools, augmenting their own skills and exploring new artistic styles.</li></ul><p><strong>Applications and Transformative Potential:</strong></p><p>The potential applications are vast and rapidly expanding. Imagine architects using text prompts to visualize building designs, fashion designers creating virtual garment prototypes, or scientists visualizing complex biological structures. The ability to translate abstract ideas into concrete visual representations opens up exciting possibilities across industries, accelerating innovation and streamlining workflows.</p><p><strong>Challenges, Limitations, and Ethical Considerations:</strong></p><p>Despite its immense potential, text-to-image technology faces several challenges:</p><ul><li>  Models trained on biased datasets can perpetuate harmful stereotypes in generated images.  Addressing this requires careful curation of training data and ongoing monitoring.</li><li>  The legal implications of AI-generated art are still being debated, raising questions about ownership and copyright infringement.</li><li><strong>Misinformation and Deepfakes:</strong>  The ease of creating realistic but fake images raises concerns about the spread of misinformation and the potential for malicious use.</li><li>  While creating new opportunities, the technology also raises concerns about potential job displacement in certain creative industries.</li></ul><p><strong>The Future of Text-to-Image Models:</strong></p><p>Text-to-image models are still evolving rapidly. Future developments will likely focus on improving image quality, enhancing control over generation parameters, and mitigating ethical concerns. We can expect to see more sophisticated models capable of understanding complex prompts, generating more realistic and diverse images, and even creating interactive and animated content directly from text.</p><p>In conclusion, generative AI's text-to-image models represent a significant leap forward in artificial intelligence and its application to visual content creation. While challenges remain, the transformative potential of this technology is undeniable. As it continues to evolve, it promises to revolutionize how we create, interact with, and understand the visual world around us, opening up exciting opportunities across numerous fields and shaping the future of creativity and innovation.</p>","contentLength":4877,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Creating a Website with Sphinx and Markdown","url":"https://www.blog.pythonlibrary.org/2025/07/01/creating-a-website-with-sphinx-and-markdown/","date":1751372880,"author":"Mike","guid":178904,"unread":true,"content":"<p><a href=\"https://www.sphinx-doc.org/en/master/\">Sphinx</a> is a Python-based documentation builder. The Python documentation is written using Sphinx. The Sphinx project supports using ReStructuredText and Markdown, or a mixture of the two. Each page of your documentation or website must be written using one of those two formats.</p><p>In this tutorial, you will learn how to use Sphinx to create a documentation site. Here is an overview of what you‚Äôll learn:</p><ul><li>Making Markdown work in Sphinx</li><li>Building your Sphinx site</li><li>Adding content to your site</li></ul><p>Let‚Äôs start by installing all the packages you need to get Sphinx working!</p><p>You will need the following packages to be able to use Sphinx and Markdown:</p><p>You should install these package in a Python virtual environment. Open up your terminal and pick a location where you would like to create a new folder. Then run the following command:</p><pre data-enlighter-language=\"generic\">python -m venv NAME_OF_VENV_FOLDER</pre><p>Once you have the virtual environment, you need to activate it. Go into the&nbsp; folder and run the activate command in there.</p><p>Now you can install the dependencies that you need using pip, which will install them to your virtual environment.</p><p>Here‚Äôs how to install them using pip:</p><pre data-enlighter-language=\"generic\">python -m pip install myst-parser sphinx</pre><p>Once your packages are installed, you can learn how to set up your site!</p><p>Now that your packages are installed, you must set up your Sphinx website. To create a barebones Sphinx site, run the following command inside your virtual environment:</p><pre data-enlighter-language=\"generic\">sphinx-quickstart NAME_OF_SITE_FOLDER</pre><p>It will ask you a series of questions. The Sphinx documentation recommends keeping the source and build folders separate. Otherwise, you can set the other fields as needed or accept the defaults.</p><p>You will now have the following tree structure in your SITE_FOLDER:</p><p>You will work with the files and directories in this structure for the rest of the tutorial.</p><p>The next step on your Sphinx journey is to enable Markdown support.</p><h2>Making Markdown Work in Sphinx</h2><p>Go into the  directory and open the  file in your favorite Python IDE. Update the&nbsp; and the&nbsp; variables to the following (or add them if they do not exist):</p><pre data-enlighter-language=\"python\">extensions = ['myst_parser']\n\nsource_suffix = ['.rst', '.md']</pre><p>These changes tell Sphinx to use the Myst parser for Markdown files. You also leave ReStructuredText files in there so that your Sphinx website can handle that format.</p><p>You now have enough of your site available to build it and ensure it works.</p><h2>Building Your Sphinx Site</h2><p>You can now build a simple site with only an index page and the auto-generated boilerplate content. In your terminal, run the following command in the root of your Sphinx folder:</p><pre data-enlighter-language=\"generic\">sphinx-build -M html .\\source\\ .\\build\\</pre><p>The HTML files will be created inside the  folder. If you open the index page, it will look something like this:</p><p>Good job! You now have a Sphinx website!</p><p>Now you need to add some custom content to it.</p><h2>Adding Content to Your Site</h2><p>You can add ReStructuredText or Markdown files for each page of your site.&nbsp; using the  section:</p><pre data-enlighter-language=\"generic\">.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   SUB_FOLDER/acknowledgments.md\n   doc_page1.md\n   OTHER_FOLDER/sub_doc_page1.md</pre><p>Let‚Äôs add some real content. Create a new file called&nbsp; in the root folder that contains the&nbsp; file. Then enter the following text in your new Markdown file:</p><pre data-enlighter-language=\"md\"># Python: All About Decorators\n\nDecorators can be a bit mind-bending when first encountered and can also be a bit tricky to debug. But they are a neat way to add functionality to functions and classes. Decorators are also known as a ‚Äúhigher-order function‚Äù. This means that they can take one or more functions as arguments and return a function as its result. In other words, decorators will take the function they are decorating and extend its behavior while not actually modifying what the function itself does.\n\nThere have been two decorators in Python since version 2.2, namely **classmethod()** and **staticmethod()**. Then PEP 318 was put together and the decorator syntax was added to make decorating functions and methods possible in Python 2.4. Class decorators were proposed in PEP 3129 to be included in Python 2.6. They appear to work in Python 2.7, but the PEP indicates they weren‚Äôt accepted until Python 3, so I‚Äôm not sure what happened there.\n\nLet‚Äôs start off by talking about functions in general to get a foundation to work from.\n\n## The Humble Function\n\nA function in Python and in many other programming languages is just a collection of reusable code. Some programmers will take an almost bash-like approach and just write all their code in a file with no functions. The code just runs from top to bottom. This can lead to a lot of copy-and-paste spaghetti code. Whenever two pieces of code do the same thing, they can almost always be put into a function. This will make updating your code easier since you‚Äôll only have one place to update them.</pre><p>Make sure you save the file. Then, re-run the build command from the previous section. Now, when you open the  file, you should see your new Markdown file as a link that you click on and view.</p><p>Sphinx is a powerful way to create documentation for your projects. Sphinx has many plugins that you can use to make it even better. For example, you can use <a href=\"https://www.sphinx-doc.org/en/master/man/sphinx-apidoc.html\">sphinx-apidoc</a> to automatically generate documentation from your source code using the autodoc extension.</p><p>If you are an author and you want to share your books online, Sphinx is a good option for that as well. Having a built-in search functionality makes it even better. Give Sphinx a try and see what it can do for you!</p>","contentLength":5461,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Mike Driscoll: Creating a Website with Sphinx and Markdown","url":"https://www.blog.pythonlibrary.org/2025/07/01/creating-a-website-with-sphinx-and-markdown/","date":1751372880,"author":"","guid":178929,"unread":true,"content":"<p><a href=\"https://www.sphinx-doc.org/en/master/\">Sphinx</a> is a Python-based documentation builder. The Python documentation is written using Sphinx. The Sphinx project supports using ReStructuredText and Markdown, or a mixture of the two. Each page of your documentation or website must be written using one of those two formats.</p><p>In this tutorial, you will learn how to use Sphinx to create a documentation site. Here is an overview of what you‚Äôll learn:</p><ul><li>Making Markdown work in Sphinx</li><li>Building your Sphinx site</li><li>Adding content to your site</li></ul><p>Let‚Äôs start by installing all the packages you need to get Sphinx working!</p><p>You will need the following packages to be able to use Sphinx and Markdown:</p><p>You should install these package in a Python virtual environment. Open up your terminal and pick a location where you would like to create a new folder. Then run the following command:</p><pre>python -m venv NAME_OF_VENV_FOLDER</pre><p>Once you have the virtual environment, you need to activate it. Go into the&nbsp; folder and run the activate command in there.</p><p>Now you can install the dependencies that you need using pip, which will install them to your virtual environment.</p><p>Here‚Äôs how to install them using pip:</p><pre>python -m pip install myst-parser sphinx</pre><p>Once your packages are installed, you can learn how to set up your site!</p><p>Now that your packages are installed, you must set up your Sphinx website. To create a barebones Sphinx site, run the following command inside your virtual environment:</p><pre>sphinx-quickstart NAME_OF_SITE_FOLDER</pre><p>It will ask you a series of questions. The Sphinx documentation recommends keeping the source and build folders separate. Otherwise, you can set the other fields as needed or accept the defaults.</p><p>You will now have the following tree structure in your SITE_FOLDER:</p><p>You will work with the files and directories in this structure for the rest of the tutorial.</p><p>The next step on your Sphinx journey is to enable Markdown support.</p><h2>Making Markdown Work in Sphinx</h2><p>Go into the  directory and open the  file in your favorite Python IDE. Update the&nbsp; and the&nbsp; variables to the following (or add them if they do not exist):</p><pre>extensions = ['myst_parser']\n\nsource_suffix = ['.rst', '.md']</pre><p>These changes tell Sphinx to use the Myst parser for Markdown files. You also leave ReStructuredText files in there so that your Sphinx website can handle that format.</p><p>You now have enough of your site available to build it and ensure it works.</p><h2>Building Your Sphinx Site</h2><p>You can now build a simple site with only an index page and the auto-generated boilerplate content. In your terminal, run the following command in the root of your Sphinx folder:</p><pre>sphinx-build -M html .\\source\\ .\\build\\</pre><p>The HTML files will be created inside the  folder. If you open the index page, it will look something like this:</p><p>Good job! You now have a Sphinx website!</p><p>Now you need to add some custom content to it.</p><h2>Adding Content to Your Site</h2><p>You can add ReStructuredText or Markdown files for each page of your site.&nbsp; using the  section:</p><pre>.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   SUB_FOLDER/acknowledgments.md\n   doc_page1.md\n   OTHER_FOLDER/sub_doc_page1.md</pre><p>Let‚Äôs add some real content. Create a new file called&nbsp; in the root folder that contains the&nbsp; file. Then enter the following text in your new Markdown file:</p><pre># Python: All About Decorators\n\nDecorators can be a bit mind-bending when first encountered and can also be a bit tricky to debug. But they are a neat way to add functionality to functions and classes. Decorators are also known as a ‚Äúhigher-order function‚Äù. This means that they can take one or more functions as arguments and return a function as its result. In other words, decorators will take the function they are decorating and extend its behavior while not actually modifying what the function itself does.\n\nThere have been two decorators in Python since version 2.2, namely **classmethod()** and **staticmethod()**. Then PEP 318 was put together and the decorator syntax was added to make decorating functions and methods possible in Python 2.4. Class decorators were proposed in PEP 3129 to be included in Python 2.6. They appear to work in Python 2.7, but the PEP indicates they weren‚Äôt accepted until Python 3, so I‚Äôm not sure what happened there.\n\nLet‚Äôs start off by talking about functions in general to get a foundation to work from.\n\n## The Humble Function\n\nA function in Python and in many other programming languages is just a collection of reusable code. Some programmers will take an almost bash-like approach and just write all their code in a file with no functions. The code just runs from top to bottom. This can lead to a lot of copy-and-paste spaghetti code. Whenever two pieces of code do the same thing, they can almost always be put into a function. This will make updating your code easier since you‚Äôll only have one place to update them.</pre><p>Make sure you save the file. Then, re-run the build command from the previous section. Now, when you open the  file, you should see your new Markdown file as a link that you click on and view.</p><p>Sphinx is a powerful way to create documentation for your projects. Sphinx has many plugins that you can use to make it even better. For example, you can use <a href=\"https://www.sphinx-doc.org/en/master/man/sphinx-apidoc.html\">sphinx-apidoc</a> to automatically generate documentation from your source code using the autodoc extension.</p><p>If you are an author and you want to share your books online, Sphinx is a good option for that as well. Having a built-in search functionality makes it even better. Give Sphinx a try and see what it can do for you!</p>","contentLength":5461,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Fundamentals: authentication","url":"https://dev.to/devopsfundamentals/python-fundamentals-authentication-4jm8","date":1751372744,"author":"DevOps Fundamental","guid":178907,"unread":true,"content":"<h2>\n  \n  \n  Authentication in Production Python: Beyond the Basics\n</h2><p>In late 2022, a critical production incident at a previous employer stemmed from a subtle flaw in our authentication handling for background job processing. We were using Celery with Redis as a broker, and a deserialization vulnerability in a custom authentication middleware allowed an attacker to inject malicious code into a job payload, ultimately gaining read access to sensitive data. The root cause wasn‚Äôt a missing security library, but a failure to properly validate the authentication token  the deserialization process, coupled with overly permissive pickling. This incident underscored the fact that authentication isn‚Äôt a single point solution; it‚Äôs a pervasive concern woven throughout the entire system, demanding meticulous attention to detail.  This post dives deep into the practicalities of authentication in modern Python ecosystems, focusing on architecture, performance, and real-world pitfalls.</p><h3>\n  \n  \n  What is \"authentication\" in Python?\n</h3><p>Technically, authentication is the process of verifying the identity of a user, device, or service. It answers the question \"Who are you?\".  In Python, there isn‚Äôt a single, definitive PEP governing authentication directly. However, PEP 484 ‚Äì Type Hints, and the broader ecosystem around static typing (mypy) are crucial for building robust authentication systems.  The  module, , and  allow us to define strict schemas for authentication tokens and credentials, enabling compile-time validation and reducing runtime errors.  CPython‚Äôs internal mechanisms for object identity () and hashing are fundamental to secure token generation and comparison.  The standard library‚Äôs  provides cryptographic hashing algorithms, but relying solely on it for authentication is rarely sufficient; dedicated libraries like  are essential for secure key management and encryption.</p><ol><li><p><strong>FastAPI Request Handling:</strong>  In a high-throughput API, authentication is typically handled via JWTs (JSON Web Tokens) passed in the  header.  We use a custom FastAPI dependency to extract, verify, and decode the JWT, attaching the user identity to the request context.  Performance is critical here; JWT verification must be fast to avoid latency spikes.</p></li><li><p><strong>Async Job Queues (Celery/RQ):</strong> As demonstrated by the incident above, authenticating tasks submitted to an asynchronous queue is vital.  We now sign task payloads with a HMAC (Hash-based Message Authentication Code) using a rotating secret key, verifying the signature before deserialization.</p></li><li><p><strong>Type-Safe Data Models (Pydantic):</strong>  When receiving data from external sources (e.g., user uploads, API calls), Pydantic models are used to define the expected schema. Authentication credentials are often embedded within these models, and validation ensures that only authorized data is processed.</p></li><li><p>  For command-line tools interacting with sensitive resources, we employ API keys or OAuth 2.0 tokens.  These credentials are stored securely (e.g., using ) and used to authenticate requests to a backend service.</p></li><li><p><strong>ML Preprocessing Pipelines:</strong>  Data pipelines often require access to sensitive data. Authentication is used to control access to data sources and ensure that only authorized users can train or deploy models.</p></li></ol><h3>\n  \n  \n  Integration with Python Tooling\n</h3><p>Our  reflects our commitment to static typing and code quality:</p><div><pre><code></code></pre></div><p>We use FastAPI‚Äôs dependency injection system to manage authentication.  A custom middleware extracts the JWT, and a dependency validates it.  This separation of concerns makes testing easier and improves code readability.  Runtime hooks, like signal handlers, are used to refresh JWTs before they expire.</p><div><pre><code></code></pre></div><p>This example demonstrates a dependency injection pattern for authentication.  The  function is a dependency that extracts and validates the JWT, returning the user ID.  This pattern promotes reusability and testability.</p><h3>\n  \n  \n  Failure Scenarios &amp; Debugging\n</h3><p>A common failure is incorrect JWT verification due to a mismatched secret key or algorithm.  This often manifests as a .  Debugging involves:</p><ol><li>  Detailed logging of the JWT payload and verification process.</li><li>  Stepping through the  function to inspect the token and key.</li><li>  Analyzing the full traceback to identify the source of the error.</li><li> Adding assertions to verify the expected format and content of the JWT.</li></ol><p>Another issue is race conditions in asynchronous authentication.  If multiple requests attempt to authenticate simultaneously, the verification process can become interleaved, leading to incorrect results.  Using appropriate locking mechanisms (e.g., ) can mitigate this risk.  We once encountered a memory leak in a Celery worker due to unclosed database connections within an authentication middleware.   and  were instrumental in identifying the leak.</p><h3>\n  \n  \n  Performance &amp; Scalability\n</h3><p>JWT verification is a performance bottleneck.  We‚Äôve optimized this by:</p><ol><li>  Caching verified JWT payloads in Redis to avoid redundant verification.</li><li><strong>Asynchronous Verification:</strong>  Performing JWT verification asynchronously using .</li><li>  Minimizing the use of global variables in the authentication process.</li><li>  Exploring the use of C extensions for cryptographic operations (though the gains are often marginal).</li></ol><p>Benchmarking with  and <code>asyncio.run(async_benchmark())</code> is crucial to measure the impact of these optimizations.</p><p>Insecure deserialization, as experienced in our production incident, is a major risk.  Always validate the authentication token  deserializing any data associated with it.  Avoid using  for untrusted data.  Code injection can occur if user-supplied data is used to construct SQL queries or shell commands.  Use parameterized queries and proper input validation to prevent this.  Privilege escalation can occur if authentication checks are bypassed or if users are granted excessive permissions.  Implement least privilege principles and regularly review access controls.</p><p>We employ a multi-layered testing strategy:</p><ol><li>  Testing individual authentication functions and dependencies.</li><li>  Testing the interaction between authentication and other components (e.g., FastAPI routes, Celery tasks).</li><li><strong>Property-Based Tests (Hypothesis):</strong>  Generating random JWT payloads to test the robustness of the verification process.</li><li>  Ensuring that all authentication code is type-safe.</li></ol><p>Our CI/CD pipeline includes:</p><ul><li> with code coverage reporting.</li><li> for testing against multiple Python versions.</li><li>GitHub Actions to run tests and linters on every pull request.</li><li> hooks to enforce code style and type checking.</li></ul><h3>\n  \n  \n  Common Pitfalls &amp; Anti-Patterns\n</h3><ol><li><strong>Storing Passwords in Plain Text:</strong>  Never store passwords directly. Use strong hashing algorithms (e.g., bcrypt, Argon2).</li><li><strong>Using  for Untrusted Data:</strong>  As mentioned,  is inherently insecure.</li><li>  Always verify the  claim in JWTs.</li><li><strong>Overly Permissive Access Controls:</strong>  Grant users only the minimum necessary permissions.</li><li><strong>Lack of Input Validation:</strong>  Validate all user-supplied data to prevent injection attacks.</li><li>  Never hardcode secrets in your code. Use environment variables or a secrets management system.</li></ol><h3>\n  \n  \n  Best Practices &amp; Architecture\n</h3><ul><li>  Use type hints extensively to improve code correctness and maintainability.</li><li>  Separate authentication logic from business logic.</li><li>  Assume that all user input is malicious.</li><li>  Break down authentication into small, reusable components.</li><li>  Use a layered configuration system to manage secrets and settings.</li><li>  Use dependency injection to improve testability and flexibility.</li><li>  Automate testing, linting, and deployment.</li><li>  Use Docker or other containerization technologies to ensure reproducible builds.</li><li>  Document all authentication code thoroughly.</li></ul><p>Authentication is a complex and critical aspect of modern Python systems.  Mastering the nuances of authentication, from secure token generation to robust validation and performance optimization, is essential for building reliable, scalable, and maintainable applications.  Prioritize static typing, rigorous testing, and a security-first mindset.  Refactor legacy code to address potential vulnerabilities, measure performance to identify bottlenecks, and continuously improve your authentication practices.  The cost of a security breach far outweighs the effort required to build a secure authentication system.</p>","contentLength":8220,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 9/100: While Loops with Real-World Examples","url":"https://dev.to/therahul_gupta/day-9100-while-loops-with-real-world-examples-528f","date":1751372522,"author":"Rahul Gupta","guid":178906,"unread":true,"content":"<p>Welcome to  of the  series!\nToday, we‚Äôll explore the power of  ‚Äî a tool that helps your program  actions until a certain condition is no longer true.</p><p>You‚Äôll also see how  loops are used in real-world applications, from input validation to simple games.</p><ul><li>How to control repetition with conditions</li><li>Real-world examples: password check, countdown, number guessing game</li></ul><p>A  loop repeats a block of code <strong>as long as a condition is </strong>.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code>Count: 1\nCount: 2\nCount: 3\nCount: 4\nCount: 5\n</code></pre></div><p>Once  becomes 6, the loop condition  is no longer true, so the loop stops.</p><h2>\n  \n  \n  üö´ Avoiding Infinite Loops\n</h2><p>Make sure your loop condition  ‚Äî or you‚Äôll create an infinite loop:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  üõë Using  to Exit a Loop\n</h2><p>You can force-exit a loop using .</p><div><pre><code></code></pre></div><h2>\n  \n  \n  ‚è≠Ô∏è Using  to Skip an Iteration\n</h2><p> skips the rest of the loop for the current iteration and jumps to the next one.</p><div><pre><code></code></pre></div><p>(Notice how 3 is skipped)</p><h2>\n  \n  \n  üîí Real-World Example 1: Password Checker\n</h2><div><pre><code></code></pre></div><h2>\n  \n  \n  ‚è≥ Real-World Example 2: Countdown Timer\n</h2><div><pre><code></code></pre></div><h2>\n  \n  \n  üéÆ Real-World Example 3: Number Guessing Game\n</h2><div><pre><code></code></pre></div><ul><li>How to use  loops for repeating tasks</li><li>How to use  to stop a loop early</li><li>How to use  to skip an iteration</li><li>Real-world examples like login validation and guessing games</li></ul>","contentLength":1193,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Neural Networks : A Beginner-Friendly Guide to the Brains Behind AI","url":"https://dev.to/abhishekjaiswal_4896/neural-networks-a-beginner-friendly-guide-to-the-brains-behind-ai-15n","date":1751369760,"author":"Abhishek Jaiswal","guid":178875,"unread":true,"content":"<h2>\n  \n  \n  Introduction: Why Neural Networks Matter\n</h2><p>Have you ever wondered how Netflix recommends your next binge-worthy series? Or how voice assistants like Siri or Alexa understand your commands? The magic behind these smart systems lies in ‚Äîa core component of Artificial Intelligence (AI) and Deep Learning.</p><p>Neural networks are not just a buzzword in tech circles. They‚Äôre the backbone of facial recognition, fraud detection, chatbots, self-driving cars, and even medical diagnosis. In this blog, we‚Äôll explore what neural networks are, how they work, and why they‚Äôre so powerful‚Äîall in simple, non-intimidating language.</p><h2>\n  \n  \n  üß† What Is a Neural Network?\n</h2><p>A  is a computational model inspired by the human brain. Just like your brain uses neurons to process information, neural networks use  (also called nodes) to recognize patterns and make decisions.</p><p>Imagine it as a web of interconnected nodes that take inputs, perform calculations, and produce outputs. These networks learn from data‚Äîmeaning they can  as they see more examples.</p><h2>\n  \n  \n  üîÑ Real-Life Analogy: Neural Networks as Decision-Making Recipes\n</h2><p>Let‚Äôs say you're teaching a child to recognize apples. You show them 10 different apples and say, ‚ÄúThese are apples.‚Äù Over time, the child starts identifying apples based on color, shape, or texture.</p><p>Neural networks do the same thing but with numbers. Feed them enough labeled images, and they‚Äôll ‚Äúlearn‚Äù the characteristics of an apple without being explicitly programmed. This process is called .</p><h2>\n  \n  \n  üß± Anatomy of a Neural Network\n</h2><p>A typical neural network has three types of layers:</p><p>Receives raw data (e.g., image pixels, sound waves, or text).</p><p>The ‚Äúthinking‚Äù layers. Each neuron processes input and passes it to the next layer. These layers extract meaningful features from the data.</p><p>Gives the final prediction (e.g., \"apple\" or \"not apple\").</p><p>Each neuron applies a , adds a , and then passes the result through an  (like ReLU or Sigmoid) to decide what to \"fire\" forward.</p><h2>\n  \n  \n  ‚öôÔ∏è How Neural Networks Learn: Backpropagation and Training\n</h2><p>Training a neural network is like fine-tuning a guitar. You start with random settings (weights), play a note (make a prediction), listen to how off it sounds (calculate error), and then adjust the strings (update weights) using  and .</p><p>This cycle continues until the network gets really good at making accurate predictions. The more data you feed it, the smarter it becomes.</p><h2>\n  \n  \n  üí° Types of Neural Networks (And What They‚Äôre Good At)\n</h2><div><table><tbody><tr><td><strong>Feedforward Neural Network (FNN)</strong></td><td>Basic tasks like classification</td></tr><tr><td><strong>Convolutional Neural Network (CNN)</strong></td><td>Image recognition, computer vision</td></tr><tr><td><strong>Recurrent Neural Network (RNN)</strong></td><td>Time-series data, language modeling</td></tr><tr><td><strong>LSTM (Long Short-Term Memory)</strong></td><td>Text generation, translation</td></tr><tr><td><strong>Generative Adversarial Networks (GANs)</strong></td><td>Image generation, deep fakes</td></tr></tbody></table></div><h2>\n  \n  \n  üöÄ Real-World Applications of Neural Networks\n</h2><ul><li>: Predicting diseases from X-rays or ECGs</li><li>: Fraud detection, algorithmic trading</li><li>: Personalized recommendations, inventory forecasting</li><li>: Music composition, movie recommendations</li><li>: Object detection, path planning</li></ul><h2>\n  \n  \n  üß© Challenges of Neural Networks\n</h2><p>Despite their power, neural networks have limitations:</p><ul><li>: They require lots of labeled data</li><li><strong>Computationally Expensive</strong>: Training deep networks can take hours or even days</li><li>: Hard to interpret how they make decisions</li><li>: They may memorize data instead of learning patterns</li></ul><p>But with techniques like , , and , many of these challenges are being actively addressed.</p>","contentLength":3510,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Transposer: A Lightweight, Training-Free Neural Architecture That Learns from Raw Embeddings Without Attention","url":"https://dev.to/lumgenlab/transposer-a-lightweight-training-free-neural-architecture-that-learns-from-raw-embeddings-39h3","date":1751364489,"author":"LumGenLab","guid":178845,"unread":true,"content":"<p>In the current landscape of artificial intelligence, most breakthroughs in language understanding rely on scaling ‚Äî larger models, bigger datasets, more compute. While attention-based architectures like Transformers dominate, they remain complex, resource-heavy, and often opaque.</p><p>In contrast,  is a fundamentally different approach to representation learning ‚Äî built from , designed to be , and focused on .</p><p>This post introduces the theory, motivation, design, and implementation behind  ‚Äî a new AI and a type of autoencoder model that performs  from raw text using only basic matrix operations, and runs effortlessly on a CPU with as little as  from 2009.</p><blockquote><p>Transposer can be viewed as a field-projection encoder with structural similarity to an autoencoder ‚Äî but without any reconstruction loss or training.</p></blockquote><h2>\n  \n  \n  üß† Why Build an Alternative to Attention?\n</h2><p>Attention mechanisms ‚Äî though powerful ‚Äî come with significant trade-offs:</p><ol><li><p><strong>Quadratic time complexity</strong> in input length</p></li><li><p><strong>Heavy reliance on massive corpora and training cycles</strong></p></li><li><p>: multi-head layers, residual connections, layer norm, positional encoding</p></li><li><p>: attention scores don‚Äôt always tell us why something was learned</p></li></ol><blockquote><p>Transposer asks:<em>Can we build something simpler, leaner, and just as meaningful ‚Äî by rethinking how embeddings interact?</em></p></blockquote><p>The answer lies in a concept most students encounter in early math: .</p><p>In standard NLP models, token embeddings are processed  ‚Äî meaning each token is treated independently across its vector dimensions.</p><blockquote><p>What if we  this embedding matrix ‚Äî and treat <strong>embedding dimensions as the context</strong> and ?</p></blockquote><p>This reorients the model‚Äôs view of language, allowing it to discover <strong>cross-token relationships</strong> and  using only field projection.</p><h2>\n  \n  \n  üß¨ The Architecture of Transposer\n</h2><p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fjmh02c9nwqdovwhn1yae.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fjmh02c9nwqdovwhn1yae.png\" alt=\"Transposer Model flow visual diagram and the mechanism that how it works\" width=\"800\" height=\"533\"></a>\nLet‚Äôs break down the architecture step by step:</p><p>Input is tokenized and embedded into a matrix X of shape:</p><ul><li><p>L = sequence length (number of tokens)</p></li></ul><p>The embedding matrix is transposed:</p><p>This allows processing <strong>across embedding dimensions</strong>, treating tokens as contextual dimensions.</p><p>Two learned linear transformations are applied:</p><div><pre><code>H = ReLU(W‚ÇÅ √ó X·µÄ)  \nZ = W‚ÇÇ √ó H\n</code></pre></div><ul><li><p>K is an internal projection dimension (hyperparameter)</p></li></ul><p>This returns the transformed embeddings back to the original orientation.</p><p>The original and transformed embeddings are merged:</p><p>This is an , preserving local structure while enriching with globally-learned relationships.</p><p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fyi3i1e540uijael8t340.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fyi3i1e540uijael8t340.png\" alt=\"Loss curve visualisation of the Transposer model\" width=\"800\" height=\"400\"></a>\nTransposer has been tested on toy datasets with as few as . Despite its simplicity and lack of training, it was able to extract surprisingly intelligent relationships:</p><blockquote><p>\"education\" ‚Üí [\"learning\", \"by\", \"preparing\"]\n\"bio\" ‚Üí [\"means\", \"life\", \"and\"]<p>\n\"science\" ‚Üí [\"is\", \"the\", \"biology\"]</p></p></blockquote><p>Even without any backpropagation or gradient descent, the model  from structure alone.</p><p>: None (only NumPy)</p><p>: AMD Phenom CPU, 2 GB DDR2 RAM</p><ul><li><p>: Core pipeline</p></li><li><p>: Optional input source</p></li><li><p>Heatmaps and cosine similarity for analysis</p></li></ul><ul><li><p>Clean, minimal implementation</p></li><li><p>A structure built for experimentation</p></li></ul><blockquote><p>‚≠êÔ∏è Stars and forks are always appreciated if this sparks your curiosity or research direction.</p></blockquote><p>I'm currently expanding this line of research by:</p><ul><li><p>Adding generation layers for sentence completion</p></li><li><p>Testing Transposer with larger datasets and hybrid architectures</p></li><li><p>Publishing the full theoretical paper on arXiv under LumGenLab</p></li><li><p>Exploring applications in symbolic reasoning, logic chaining, and language grounding</p></li></ul><ul><li><p>Lightweight representation learning</p></li><li><p>First-principle AI design</p></li><li><p>Architecture beyond attention</p></li><li><p>Interpretable embedding systems</p></li></ul><p>I‚Äôd love to hear your thoughts, feedback, and suggestions.</p><p>Abdur Rahman\nIndependent AI Researcher ¬∑ Founder of LumGenLab</p><blockquote><p>‚ÄúAI should be elegant before it's enormous.‚Äù\n‚Äî LumGenLab</p></blockquote>","contentLength":3676,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Role of AI and Personalization in Super App Development","url":"https://dev.to/sparkout/the-role-of-ai-and-personalization-in-super-app-development-59ci","date":1751364032,"author":"AI Development Company","guid":178844,"unread":true,"content":"<p>In the rapidly evolving landscape of mobile applications, Super Apps have emerged as the epitome of convenience, integrating a multitude of services into a single, seamless platform. From handling payments and messaging to ordering food and booking rides, these all-encompassing applications strive to be indispensable tools in users' daily lives. However, the sheer volume of services and user interactions within a Super App presents both a challenge and an immense opportunity: how to prevent information overload and deliver truly relevant experiences. This is where Artificial Intelligence (AI) and hyper-personalization become not just features, but foundational pillars in successful <a href=\"https://www.sparkouttech.com/super-app-development/\" rel=\"noopener noreferrer\">Super App development</a>.</p><p>AI acts as the intelligent backbone, processing vast amounts of user data, predicting needs, and automating interactions. Personalization, powered by AI, translates these insights into tailored experiences, making each user feel like the app was designed just for them. This synergy is crucial for transforming a collection of services into a cohesive, intuitive, and highly engaging digital ecosystem. This blog post will explore the pivotal role of AI and personalization in Super App development, highlighting how they elevate user experience, drive engagement, and unlock new value for businesses.</p><p><strong>1. AI as the Engine for Data Processing and Predictive Analytics</strong></p><p>At its core, a Super App generates an enormous amount of data from diverse user interactions across various services. This includes transaction history, search queries, location data, communication patterns, Browse behavior, and more. Without a sophisticated mechanism to process and interpret this data, it remains a raw, untapped resource. This is where AI steps in as the indispensable engine.</p><p><strong>AI-powered algorithms, particularly machine learning (ML) models, can:</strong></p><p>Process Massive Datasets: Rapidly analyze vast volumes of structured and unstructured data in real-time, far exceeding human capacity.</p><p>Identify Complex Patterns: Uncover subtle correlations and trends within the data that indicate user preferences, habits, and future intentions.</p><p>Enable Predictive Analytics: Based on historical data and real-time inputs, AI can predict user needs, likely actions, and even potential pain points. For example, an AI might predict a user's need for a ride based on their calendar events and location, or suggest a restaurant based on past orders and current time.</p><p>This predictive capability is a game-changer for <a href=\"https://www.sparkouttech.com/super-app-development/\" rel=\"noopener noreferrer\">Super App development solutions</a>. Instead of users having to actively search for services, the app can proactively offer relevant options, streamlining their experience. For instance, if a user frequently orders coffee from a specific cafe in the morning, an AI agent could prompt them with an option to reorder as they approach their usual time. This seamless, almost clairvoyant interaction significantly enhances convenience and makes the Super App feel truly intelligent and helpful. The ability of AI to derive actionable insights from multi-service data is what elevates a Super App from a mere collection of mini-apps to a truly integrated and intelligent ecosystem.</p><p><strong>2. Personalization: Tailoring the Super App Experience</strong></p><p>While AI provides the analytical power, personalization is the user-facing outcome. In a Super App, personalization moves beyond simple \"recommended for you\" lists to a dynamic adaptation of the entire app experience. This level of customization ensures that despite the app's vast functionalities, it feels intuitive and relevant to each individual.</p><p><strong>Key aspects of personalization driven by AI in Super Apps include:</strong></p><p>Dynamic UI/UX Customization: The layout and visibility of mini-apps and features can change based on a user's most frequent activities, time of day, or location. For example, food delivery might be prominent during lunch hours, while payment options become central during bill payment cycles.</p><p>Contextual Recommendations: AI leverages contextual data (time, location, weather, past behavior) to offer highly relevant suggestions, whether for shopping, entertainment, or financial services.</p><p>Personalized Content and Notifications: Delivering news feeds, promotions, or notifications that are specifically tailored to a user's interests and previous interactions, reducing notification fatigue and increasing engagement.</p><p>Adaptive Search and Discovery: AI can refine search results and make it easier for users to discover new services or features within the Super App that align with their inferred needs.</p><p>This granular level of personalization ensures that the user never feels overwhelmed by the multitude of options. Instead, they experience a streamlined interface that anticipates their needs, making navigation effortless and delightful. This is a core benefit of Super App architecture combined with intelligent systems. A Super App Development Company places a strong emphasis on designing user interfaces that can fluidly adapt based on AI-driven personalization.</p><p><strong>3. AI-Powered Virtual Assistants and Chatbots</strong></p><p>The integration of AI-powered virtual assistants and advanced chatbots is another critical role of AI in Super App development. These intelligent conversational agents serve as the primary interface for many user queries and tasks, providing instant, round-the-clock support across all integrated services.</p><p>Intelligent Query Resolution: AI chatbots can understand natural language queries related to any service within the Super App, from tracking a food order to checking a bank balance or booking a ride, and provide accurate, real-time responses.</p><p>Seamless Task Execution: Beyond answering questions, these AI agents can often execute tasks directly within the chat interface, such as placing an order, initiating a payment, or scheduling a service, significantly streamlining workflows.</p><p>Proactive Assistance: Based on predictive analytics, the AI assistant can proactively offer help or suggest relevant services before the user even explicitly asks, further enhancing convenience.</p><p>Multilingual Support: AI‚Äôs natural language processing (NLP) capabilities enable Super Apps to offer seamless support in multiple languages, catering to a diverse global user base.</p><p>These AI-driven conversational interfaces reduce the burden on human customer support teams, leading to significant cost savings. More importantly, they provide an immediate, consistent, and personalized support experience that enhances user satisfaction and trust, making the Super App an even more reliable daily companion. For an On-Demand Super App Development model, such instant assistance is paramount.</p><p><strong>4. Optimized Operations and Fraud Detection through AI</strong></p><p>Beyond direct user interaction, AI plays a vital role in the back-end operations of a Super App, optimizing efficiency and ensuring security. The complexity of managing multiple services, vast user data, and numerous transactions necessitates intelligent automation and robust security measures.</p><p>Fraud Detection and Security: AI algorithms can continuously monitor transaction patterns, user behavior, and network activities to detect anomalies and identify potential fraudulent activities or security breaches in real-time. This is crucial for protecting sensitive user data, especially in Super Apps that handle financial transactions.</p><p>Resource Optimization: AI can optimize resource allocation for various services, managing server loads, delivery routes, and even human agent deployment to ensure smooth operation and cost efficiency. For example, dynamically adjusting the number of ride-hailing drivers based on real-time demand.</p><p>Content Moderation and Compliance: In Super Apps with social or content-sharing features, AI can assist in moderating user-generated content to ensure compliance with platform policies and legal regulations.</p><p>Supplier and Partner Management: AI can help analyze performance data of third-party merchants and service providers within the ecosystem, ensuring quality control and identifying areas for improvement.</p><p>This behind-the-scenes application of AI ensures the Super App operates smoothly, securely, and efficiently, building trust with users and maintaining the integrity of the multi-service ecosystem. Robust Super App development services always incorporate advanced AI for these operational efficiencies and security protocols.</p><p><strong>5. Continuous Improvement and Evolution driven by AI</strong></p><p>The dynamic nature of user needs and market trends requires a Super App to continuously evolve. AI provides the framework for this continuous improvement, enabling the app to learn and adapt over time.</p><p>Learning from User Interactions: Every user interaction provides data that AI models can use to refine their understanding of user preferences and improve the accuracy of predictions and recommendations. This creates a self-improving loop.</p><p>A/B Testing and Feature Optimization: AI can facilitate extensive A/B testing of new features, UI layouts, and messaging, allowing the development team to quickly identify what works best and optimize the app based on real user feedback.</p><p>Bug Detection and Performance Monitoring: AI-powered tools can monitor app performance in real-time, detect anomalies, identify potential bugs or bottlenecks, and even suggest solutions, ensuring a consistently smooth user experience.</p><p>Personalized Onboarding: AI can tailor the onboarding experience for new users, guiding them through the features most relevant to their inferred needs or demographics, accelerating adoption.</p><p>This continuous learning and optimization cycle, driven by AI, ensures that the Super App remains highly relevant, performant, and engaging over time. It allows the Super App development company to iterate rapidly and deliver a constantly improving product that anticipates and meets evolving user expectations.</p><p>The integration of Artificial Intelligence and personalization is not an optional add-on but a fundamental necessity for the success of any modern Super App. AI serves as the powerful engine, processing complex data, enabling predictive analytics, and automating operations. Personalization, in turn, translates these insights into highly relevant, intuitive, and adaptive user experiences, making the vastness of a Super App feel manageable and uniquely tailored to each individual.</p><p>By leveraging AI for intelligent data processing, adaptive interfaces, proactive virtual assistants, optimized operations, and continuous improvement, Super App development transcends the traditional app model to create truly indispensable digital companions. For businesses aiming to build and sustain a thriving multi-service ecosystem, investing in the intelligent integration of AI and personalization is not just a strategic advantage but the very essence of future-proof mobile dominance. For comprehensive Super App development solutions that harness the full power of AI and personalization, engaging an experienced Multiservice App Development Company is key.</p>","contentLength":10947,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PySupercell Core Guide: Building Your Own Supercell Game Server","url":"https://dev.to/idk_286a588368add3573523c/pysupercell-core-guide-building-your-own-supercell-game-server-5dn6","date":1751363603,"author":"idk","guid":178797,"unread":true,"content":"<h3>\n  \n  \n  So you've decided to create your own server for a Supercell game and Python caught your eye. Among countless questionable projects, you stumbled upon PySupercell Core. What now?\n</h3><p>Supercell games (Clash of Clans, Brawl Stars etc.) share similar architecture‚Äîthey‚Äôre built on a core (server foundation). PySupercell Core (PSC) is a fresh Python core that:</p><ul><li>Implements Supercell‚Äôs base server architecture</li><li>Easily adapts to any SC game</li><li>But <strong>isn‚Äôt a ready-made server</strong>‚Äîyou‚Äôll write the logic yourself</li></ul><blockquote><p>Most other Python servers/cores are slow and outdated. PSC is fast and user-friendly</p></blockquote><ol><li><pre><code>git clone https://github.com/REtard-1337/pysupercell-core\npysupercell-core\n</code></pre></li><li><pre><code>pip  requirements.txt\n</code></pre></li></ol><p>Navigate to  and find <code>logic_magic_message_factory.py</code>\nHere  is Clash of Clans' codename. Swap it for your game:</p><div><table><tbody></tbody></table></div><p>Open  and set game parameters. Example for Brawl Stars v52.13.77:</p><div><pre><code></code></pre></div><p>Now your server seems ready... but when you launch it...</p><p>‚Äî Wait, why is the client stuck at \"Connecting to server...\"? That means PSC is broken!!!\n‚Äî Nope, it works! PSC is a , not a full server. You must implement all packets yourself</p><p>Let‚Äôs take  as an example.</p><ol><li> Create <code>logic/messages/auth/login_message.py</code></li><li><pre><code></code></pre></li></ol><p>But this seems complicated, so let‚Äôs break it down.</p><div><pre><code></code></pre></div><p>Then create  class‚Äîit  inherit from :</p><div><pre><code></code></pre></div><blockquote><p> is the base class for all packets. It provides  (like Classic-Brawl‚Äôs Reader/Writer) </p></blockquote><p>Initialize fields in the constructor:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Fascinating! But what about server responses?\nCreate  next to :</p><div><pre><code></code></pre></div><p>Not much to explain‚Äîsince this is a , we implement  using fields from the constructor</p><p>Notice no , , or  in message classes? Supercell uses a different approach‚Äîall packets are handled via <code>MessageManager.receive_message</code>\nExample for :</p><div><pre><code></code></pre></div><p>What‚Äôs happening?\nFirst,  isn‚Äôt empty‚Äîit has base structure (see screenshot below)<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9dnog4w1hdoz7jydonio.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9dnog4w1hdoz7jydonio.png\" alt=\"Image description\" width=\"702\" height=\"302\"></a></p><p>We added a case to handle  when its ID arrives:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>We pass the incoming packet:</p><div><pre><code></code></pre></div><p>Create a response packet:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><ul></ul>","contentLength":1877,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"DEV.to Writer Agent","url":"https://dev.to/gautammanak1/devto-writer-agent-mm5","date":1751363251,"author":"GAUTAM MANAK","guid":178796,"unread":true,"content":"<p>The  is an AI-powered content creation agent that automatically generates and publishes technical blog posts to DEV.to. Built with  and powered by , it creates comprehensive, code-rich articles tailored for developer audiences.</p><ul><li>: Creates in-depth technical blog posts using OpenAI GPT-4</li><li>: Automatically includes relevant code snippets with explanations</li><li>: Posts articles directly to DEV.to using their API</li><li>: Creates SEO-friendly tags that comply with DEV.to requirements</li><li>: Shows complete generated content before and after publishing</li><li>: Robust error handling with detailed feedback</li><li>: Interactive communication through uAgents chat system</li></ul><p>Each generated article includes:</p><ul><li>: SEO-optimized and engaging</li><li>: Clear explanation of the topic</li><li>: 3+ in-depth sections with headers</li><li>: Python/TypeScript code with explanations</li><li>: Summary and key takeaways</li><li>: Professional formatting for DEV.to</li><li>: Up to 4 alphanumeric tags for discoverability</li></ul><p>üëâ Simply provide a topic, username, and API key to generate and publish articles automatically.</p><ul><li>Keep it secure for use in requests</li></ul><p>Send a message with the following format:</p><div><pre><code>Please write an article on [TOPIC] and post it to my Dev.to account. Here is my username: [USERNAME] and API key: [API_KEY]\n</code></pre></div><div><pre><code>Write an article on \"JavaScript and TypeScript\" and post it to my Dev.to account. Here is my username: \"\" and API key: \"\"\n</code></pre></div><div><pre><code>‚úÖ **Article Posted Successfully!**\nüîó URL: https://dev.to/johndoe/building-rest-apis-with-fastapi-1a2b\n\n### üìù Title:\nBuilding REST APIs with FastAPI: A Complete Developer Guide\n\n### üè∑Ô∏è Tags: fastapi, python, api, webdev\n\n### üìÑ Full Article Content:\n# Building REST APIs with FastAPI: A Complete Developer Guide\n\nFastAPI is a modern, fast web framework for building APIs with Python 3.6+ based on standard Python type hints...\n\n## Getting Started with FastAPI\n\nFastAPI provides an intuitive way to build APIs with automatic interactive documentation...\n\n\n</code></pre></div>","contentLength":1895,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"–ì–∞–π–¥ –Ω–∞ PySupercell Core: –°–æ–∑–¥–∞—ë–º —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–≥—Ä Supercell","url":"https://dev.to/idk_286a588368add3573523c/gaid-na-pysupercell-core-sozdaiom-svoi-siervier-dlia-ighr-supercell-4ana","date":1751361923,"author":"idk","guid":178795,"unread":true,"content":"<p>–ò—Ç–∞–∫, –≤—ã –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å Supercell'–æ–≤—Å–∫–æ–π –∏–≥—Ä—ã, –∏ –≤–∞—à –≤–∑–≥–ª—è–¥ –ø–∞–ª –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –°—Ä–µ–¥–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ PySupercell Core. –ê —á—Ç–æ –¥–∞–ª—å—à–µ?</p><p>–ò–≥—Ä—ã Supercell (Clash of Clans, Brawl Stars –∏ —Ç. –¥.) –∏–º–µ—é—Ç —Å—Ö–æ–∂—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É - —ç—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç—Å—è —Ç–µ–º, —á—Ç–æ –æ–Ω–∏ —Å–¥–µ–ª–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–¥—Ä–∞ (–Ω–µ–∫–æ–π –æ—Å–Ω–æ–≤—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞). PySupercell Core (–¥–∞–ª–µ–µ PSC) ‚Äî —ç—Ç–æ –Ω–æ–≤–æ–µ Python-—è–¥—Ä–æ, –∫–æ—Ç–æ—Ä–æ–µ:</p><ul><li>–†–µ–∞–ª–∏–∑—É–µ—Ç –±–∞–∑–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∫ —É Supercell</li><li>–õ–µ–≥–∫–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –ª—é–±—É—é –∏–≥—Ä—É SC</li><li>–ù–æ <strong>–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–æ—Ç–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º</strong> ‚Äî –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –¥–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</li></ul><blockquote><p>–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –ø–∏—Ç–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ / —è–¥–µ—Ä –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ. PSC –∂–µ –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏</p></blockquote><ol><li><pre><code>git clone https://github.com/REtard-1337/pysupercell-core\npysupercell-core\n</code></pre></li><li><pre><code>pip  requirements.txt\n</code></pre></li></ol><p>–í –ø–∞–ø–∫–µ  –∏—â–µ–º —Ñ–∞–π–ª <code>logic_magic_message_factory.py</code>. –ó–¥–µ—Å—å  ‚Äî –∫–æ–¥–æ–≤–æ–µ –∏–º—è Clash of Clans. –ú–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞–º:</p><div><table><tbody></tbody></table></div><p>–û—Ç–∫—Ä—ã–≤–∞–µ–º  –∏ –∑–∞–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è Brawl Stars –≤–µ—Ä—Å–∏–∏ :</p><div><pre><code></code></pre></div><p>–ò –≤–æ—Ç —Ç–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≤—Ä–æ–¥–µ –±—ã –∫–∞–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –µ–≥–æ, –Ω–æ...</p><p>‚Äî –ù–æ –ø–∞–¥–∞–∂–∏, –ø–æ—á–µ–º—É-—Ç–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ \"–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É\" ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ PSC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!!!</p><p>‚Äî –ù–µ—Ç, –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ PSC ‚Äî —ç—Ç–æ —è–¥—Ä–æ, –∞ –Ω–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä. –í—Å–µ –ø–∞–∫–µ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</p><p>–í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—Ä–∞ —è –≤–æ–∑—å–º—É .</p><ol><li><p>–°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª <code>logic/messages/auth/login_message.py</code>.</p></li><li><pre><code></code></pre></li></ol><p>–ù–æ –≤—Å—ë —ç—Ç–æ –∫–∞–∫—Ç —Å–ª–æ–∂–Ω–æ, –ø–æ—Ç–æ–º—É –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º.\n–°–Ω–∞—á–∞–ª–∞ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:</p><div><pre><code></code></pre></div><p>–î–∞–ª–µ–µ —Å–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å LoginMessage ‚Äî –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–æ–º –æ—Ç PiranhaMessage:</p><div><pre><code></code></pre></div><blockquote><p>PiranhaMessage ‚Äî —ç—Ç–æ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ stream ‚Äî –∞–Ω–∞–ª–æ–≥—É Reader/Writer –∏–∑ Classic-Brawl</p></blockquote><p>–ó–∞—Ç–µ–º –º—ã —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –Ω—ë–º –ø–æ–ª—è:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>–ò —Ç–µ–ø–µ—Ä—å –ø–∏—à–µ–º  ‚Äî –æ–Ω –≤–µ—Ä–Ω—ë—Ç ID –º–µ—Å—Å–µ–¥–∂–∞:</p><div><pre><code></code></pre></div><p>–ò —ç—Ç–æ –≤—Å—ë, –∫–æ–Ω–µ—á–Ω–æ, –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –∫–∞–∫ –Ω–∞—Å—á—ë—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞?\n–†—è–¥–æ–º —Å  —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª–∏–∫ ‚Äî :</p><div><pre><code></code></pre></div><p>–ó–¥–µ—Å—å –Ω–∞–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å –æ—Å–æ–±–æ –Ω–µ—á–µ–≥–æ ‚Äî —Å–∫–∞–∂—É —Ç–æ–ª—å–∫–æ, —á—Ç–æ —Ä–∞–∑ —ç—Ç–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç, —Ç–æ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è , –≤ –∫–æ—Ç–æ—Ä–æ–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞–º–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø–æ–ª—è</p><p>–£–∂–µ –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤ –∫–ª–∞—Å—Å–∞—Ö –º–µ—Å—Å–µ–¥–∂–µ–π –Ω–µ—Ç –Ω–∏ , –Ω–∏ , –Ω–∏ ? –ö–∞–∫ –∂–µ —Ç–∞–∫? –î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ Supercell –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ ‚Äî –≤—Å–µ –ø–∞–∫–µ—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ <code>MessageManager.receive_message</code>\n–í–æ—Ç —Ç–∞–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ :</p><div><pre><code></code></pre></div><p>–ß—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?\n–ù–∞—á–Ω—É —Å —Ç–æ–≥–æ, —á—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ  ‚Äî —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª–∏–∫. –í –Ω—ë–º —É–∂–µ –µ—Å—Ç—å –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (—Å–º. —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∏–∂–µ). <a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fpnksco953vbuqauhqke6.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fpnksco953vbuqauhqke6.png\" alt=\"Image description\" width=\"677\" height=\"301\"></a></p><p>–ú—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω—É–∂–Ω—ã–π –∫–µ–π—Å (–Ω–∞–∑–æ–≤—ë–º –µ–≥–æ –ø—Ä–æ—Å—Ç–æ —É—Å–ª–æ–≤–∏–µ–º), —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äô–∞, –µ—Å–ª–∏ –ø—Ä–∏–¥—ë—Ç –ø–∞–∫–µ—Ç —Å –Ω—É–∂–Ω—ã–º ID:</p><div><pre><code></code></pre></div><p>–ê —Ç–µ–ø–µ—Ä—å –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–∞–º :</p><div><pre><code></code></pre></div><p>–í –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—ë–º –ø–∞–∫–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º:</p><div><pre><code></code></pre></div><p>–ü–æ—Ç–æ–º —Å–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –ø–∞–∫–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É:</p><div><pre><code></code></pre></div><p>–ò –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è ‚Äî —á—Ç–æ–±—ã –ø—Ä–∏ –µ–Ω–∫–æ–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—É–¥–∞ –≤–æ—à–ª–∏ –¥–∞–Ω–Ω—ã–µ, –Ω—É–∂–Ω—ã–µ –Ω–∞–º:</p><div><pre><code></code></pre></div><p>–ò –ø–æ—Ç–æ–º —à–ª—ë–º –Ω–∞–∑–∞–¥ –Ω—É–∂–Ω—ã–π –º–µ—Å—Å–µ–¥–∂ –∫–ª–∏–µ–Ω—Ç—É:</p><div><pre><code></code></pre></div><h4>\n  \n  \n  –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ –≤ –ª—Å ‚Äî t.me/TheBladewise1337, –∏–ª–∏ –≤—Ç–æ—Ä–æ–º—É —Ä–∞–∑—Ä–∞–±—É ‚Äî t.me/user_with_username.\n</h4>","contentLength":5079,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Digital Learning Revolution: How to Master Online Education in the Post-Pandemic Era","url":"https://dev.to/visonaryvoguesmagazine/digital-learning-revolution-how-to-master-online-education-in-the-post-pandemic-era-4p2e","date":1751361399,"author":"visionary vogues magazine","guid":178794,"unread":true,"content":"<p>Digital Learning Revolution: How to Master Online Education in the Post-Pandemic Era\nThe Rise of E-Learning: A Paradigm Shift in Education<a href=\"https://www.visionaryvogues.com/\" rel=\"noopener noreferrer\">global pandemic forced educational institutions</a> to adapt rapidly to a new mode of instruction. As schools and universities shut their doors, e-learning emerged as the primary solution for continuing education. This shift was not merely a temporary fix but marked the beginning of a digital learning revolution that continues to shape the way we learn today.\nE-learning has democratized education, making it accessible to a broader audience, regardless of geographical location.<p>\nThe flexibility of online courses allows students to learn at their own pace, making education more personalized and efficient.</p>\nVirtual classrooms replicate the traditional classroom environment, enabling real-time interaction between students and educators.<p>\nThe post-pandemic era has seen the rise of remote learning tools that cater to diverse learning needs, from interactive platforms to AI-driven personalized learning experiences.</p>\nUnderstanding the Benefits of Online Courses<p>\nOnline courses offer numerous advantages over traditional in-person learning. They provide flexibility, convenience, and a wealth of resources that are often unavailable in a physical classroom. For students juggling work, family, and other commitments, e-learning offers the perfect solution to balance their educational goals with their daily lives.</p>\nOnline courses are often more affordable than traditional education, reducing the financial burden on students.<p>\nThe ability to access remote learning tools from anywhere allows students to study in a comfortable environment, enhancing learning outcomes.</p>\nE-learning platforms offer a wide range of subjects and courses, enabling learners to explore new areas of interest and expand their skill sets.<p>\nThe convenience and accessibility of online courses make them an ideal choice for lifelong learners looking to continue their education without disrupting their careers or personal lives.</p>\nVirtual Classrooms: Bridging the Gap Between Traditional and Digital Learning<p>\nVirtual classrooms have become a cornerstone of the modern educational experience, providing a platform for real-time interaction and collaboration between students and instructors. Unlike pre-recorded online courses, virtual classrooms offer a synchronous learning experience that closely mirrors traditional in-person classes.</p></p><p>Virtual classrooms utilize video conferencing, chat functions, and interactive tools to facilitate active participation and engagement.\nInstructors can use remote learning tools like digital whiteboards, breakout rooms, and polling features to create a dynamic learning environment.<p>\nEdTech innovations such as AI-driven analytics help educators track student progress and tailor instruction to individual needs.</p>\nBy combining the best of both worlds, virtual classrooms offer a hybrid learning model that meets the demands of the digital age while preserving the interactive elements of traditional education.<a href=\"https://www.visionaryvogues.com/\" rel=\"noopener noreferrer\">EdTech in Online Education</a>\nThe rapid advancement of EdTech (educational technology) has revolutionized the way we approach e-learning. From AI-powered tutoring systems to immersive virtual reality experiences, EdTech tools are transforming education by making it more engaging, personalized, and effective.<p>\nEdTech platforms leverage artificial intelligence and machine learning to provide personalized learning experiences tailored to each student's strengths and weaknesses.</p>\nGamification in e-learning makes education more interactive and fun, motivating students to stay engaged and complete their courses.<p>\nThe use of virtual and augmented reality in online courses creates immersive learning environments that enhance understanding and retention of complex subjects.</p>\nThe integration of EdTech in online education is not just a trend but a fundamental shift in how knowledge is delivered and consumed, paving the way for a more innovative and effective learning experience.<p>\nChoosing the Right Remote Learning Tools</p>\nSelecting the right remote learning tools is crucial for maximizing the effectiveness of e-learning. Whether you‚Äôre a student, educator, or institution, the tools you choose will significantly impact the quality of your online education experience.<p>\nLearning Management Systems (LMS): These platforms organize and deliver online courses, track progress, and provide a central hub for students and instructors. Popular LMS platforms include Canvas, Blackboard, and Moodle.</p>\nCommunication Tools: Effective communication is key to successful e-learning. Tools like Zoom, Microsoft Teams, and Google Meet facilitate real-time interaction and collaboration in virtual classrooms.<p>\nAssessment Tools: Online quizzes, assignments, and exams are essential components of online courses. Tools like Kahoot, Quizlet, and Google Forms offer interactive ways to assess student understanding and provide feedback.</p>\nBest Practices for Success in Online Education<p>\nWhile e-learning offers numerous advantages, it also requires a different approach to ensure success. Both students and educators must adapt to the unique challenges and opportunities of online education.</p>\nTime Management: Without the structure of a traditional classroom, students must develop strong time management skills to keep up with their online courses.<p>\nActive Participation: Engagement is crucial in virtual classrooms. Students should actively participate in discussions, ask questions, and collaborate with peers to enhance their learning experience.</p>\nContinuous Learning: The post-pandemic era has emphasized the importance of lifelong learning. Students should take advantage of the flexibility of e-learning to explore new topics and continuously develop their skills.<p>\nThe Role of Educators in the Digital Learning Revolution</p>\nEducators play a critical role in the success of the digital learning revolution. As the facilitators of e-learning, they must adapt their teaching methods to the unique demands of online courses and virtual classrooms.</p><p>Adapting Teaching Methods: Educators must shift from traditional lecture-based instruction to more interactive and student-centered approaches in virtual classrooms.\nLeveraging Technology: Instructors should embrace EdTech tools to enhance their teaching and provide a more engaging learning experience.<p>\nProviding Support: E-learning can be isolating for students, making it essential for educators to offer regular support and guidance to keep them motivated and on track.</p>\nThe Future of E-Learning: Trends to Watch in the Post-Pandemic Era<p>\nThe digital learning revolution is far from over. As technology continues to evolve, new trends and innovations are set to further transform online education.</p>\nAI and Machine Learning: These technologies will play an increasingly prominent role in e-learning, providing personalized learning experiences and automating administrative tasks.<p>\nImmersive Learning: Virtual and augmented reality will create more immersive and engaging online courses, allowing students to explore complex concepts in a hands-on way.</p>\nMicrolearning: Bite-sized learning modules will become more popular, offering learners a convenient way to acquire new skills and knowledge in short bursts.<p>\nOvercoming Challenges in Online Education</p>\nDespite the many benefits of e-learning, there are also challenges that must be addressed to ensure its success. From technological barriers to student engagement, overcoming these challenges is essential for creating an effective online education experience.<p>\nDigital Divide: Not all students have access to the necessary technology for e-learning. Addressing this issue requires investment in infrastructure and resources to ensure equitable access to online courses.</p>\nStudent Engagement: Keeping students engaged in a virtual environment can be challenging. Educators must use a variety of remote learning tools and interactive methods to maintain student interest.<p>\nAssessment and Feedback: Providing timely and meaningful feedback in online courses is crucial for student success. Educators should use digital assessment tools to track progress and offer personalized feedback.</p>\nBuilding a Successful Online Education Strategy<p>\nFor institutions and educators, developing a comprehensive online education strategy is essential for navigating the post-pandemic era. This strategy should encompass all aspects of e-learning, from course design to technology integration.</p></p><p>Curriculum Design: Courses should be designed with the unique needs of online learners in mind, focusing on flexibility, accessibility, and engagement.\nTechnology Integration: A successful online education strategy requires the seamless integration of EdTech tools and platforms to enhance the learning experience.<p>\nContinuous Improvement: Regularly reviewing and updating online courses based on student feedback and performance data is crucial for maintaining high-quality education.</p>\nConclusion<p>\nThe digital learning revolution has transformed the landscape of education, creating new opportunities and challenges for students, educators, and institutions. In the post-pandemic era, mastering online education is not just about adapting to a new mode of instruction; it‚Äôs about embracing a new way of learning that is more flexible, accessible, and personalized than ever before.</p>\nBy leveraging the power of e-learning, virtual classrooms, EdTech, and remote learning tools, learners and educators can navigate the complexities of online education and achieve success in this new educational paradigm. Whether through the selection of the right tools, the adoption of innovative teaching methods, or the continuous pursuit of lifelong learning, the future of education lies in the digital realm.<p>\nAs the digital learning revolution continues to evolve, staying informed about the latest trends and best practices will be crucial for anyone involved in online education. By embracing the opportunities presented by e-learning and addressing the challenges that come with it, we can create a more inclusive, effective, and innovative educational experience for all.</p>\n Uncover the latest trends and insights with our articles on Visionary Vogues</p>","contentLength":10230,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pydantic Query Params: Handling Comma-Separated Lists with Enum Validation","url":"https://dev.to/kuba_szw/pydantic-query-params-handling-comma-separated-lists-with-enum-validation-3lo7","date":1751360449,"author":"Kuba","guid":178769,"unread":true,"content":"<p>You're building a FastAPI endpoint that needs to filter data by multiple criteria. Your frontend sends filter parameters as comma-separated strings (because that's how query params work), but you want proper typing with enums and optional lists on the backend.</p><div><pre><code>\nGET /api/products?status=ACTIVE,PENDING&amp;category=ELECTRONICS,BOOKS\n</code></pre></div><p>But Pydantic expects lists, and you want enum validation. Plus everything should be optional.</p><p>Standard Pydantic approach fails here:</p><div><pre><code></code></pre></div><p>The client sends&nbsp;&nbsp;as a single string, but you need&nbsp;<code>[ProductStatus.ACTIVE, ProductStatus.PENDING]</code>.</p><p>Use&nbsp;&nbsp;with a custom parser that handles both string-to-list conversion and enum casting:</p><div><pre><code></code></pre></div><ol><li>: FastAPI automatically wraps query param values in lists</li><li>: Runs before Pydantic's standard validation</li><li>: Takes the first item from the list (the comma-separated string) and splits it</li><li>: If enum type provided, casts each item to the enum</li><li>: Final result is properly typed for your business logic</li></ol><p>This hit me when refactoring an existing API. The frontend was using DiceUI filters that send multiple values as comma-separated strings. </p><p>First attempt was parsing directly in each model - messy and not reusable. Every endpoint would need its own parsing logic.</p><p>After about 2 hours of digging through Pydantic docs, I found&nbsp;. Perfect fit - handles the transformation before validation, keeps models clean, and works everywhere.</p><p>The beauty is writing minimal code that solves the problem once and reuses everywhere.</p><ul><li>: Full enum validation and IDE support</li><li>: Handles missing params gracefully</li><li>: Works with any enum or plain strings</li><li>: Business logic gets properly typed data</li></ul><p>The&nbsp;&nbsp;pattern is perfect for these \"format transformation + validation\" scenarios.</p><p>That's it! Clean, reusable, and type-safe query param handling. If this helped you out, drop a like or share your own Pydantic tricks in the comments!</p>","contentLength":1834,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The easiest way to start new Django and Hono apps, literally one click","url":"https://dev.to/diploi/the-easiest-way-to-start-new-django-and-hono-apps-literally-one-click-141e","date":1751358007,"author":"Javier Hernandez","guid":178768,"unread":true,"content":"<h6>\n  \n  \n  Hono and Django now available on Diploi\n</h6><p>There are two powerful new additions to Diploi,  and !</p><p>These frameworks are now officially supported, meaning you can deploy, host, and manage full applications with Hono or/and Django with one click</p><blockquote><p>is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.</p></blockquote><p>Hono is mainly used for backend applications, like APIs, proxy servers, edge apps, and typical servers, but that's not all, it can also serve HTML and UI components, so it is appropiate to think of Hono as a fullstack framework. You can think of Hono as a modern alternative to Express, which supports Typescript and can be used with the most popular runtimes available</p><p>Hono aims to make your life easier by enabling API Spec and type inference via Hono's RPC, which transforms how you can share types and API expected responses between server and client, into a smooth experience. Additionally, Hono has multiple helpers and middlewares to handle typical operations, like managing Cookies, JWT, Webhooks, authentication, and headers, so you don't need external libraries to handle these actions</p><blockquote><p>Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of web development, so you can focus on writing your app without needing to reinvent the wheel. It‚Äôs free and open source.</p></blockquote><p>In simpler terms, Django is a framework for building web applications, and it is mostly considered a backend framework because it features ORM, auth, middleware, and other typical backend features, but it can also serve HTML and handle frontend templating just like fullstack frameworks, so it is fair to think that Django is whatever you need it to be üòÖ</p><p>Django uses a pattern they call Model-View-Template (MVT), which is similar to Model-View-Controller (MVC), with their main difference being that in MVT, the View and Controller from MVC are technically bundled together into the View from MVT</p><p>Fun fact: Before this blog, I didn't know that Django has been around since 2005... damn ü´°</p><h2>\n  \n  \n  Using Django and Hono with other frameworks in Diploi\n</h2><p>If you would like to test out how these frameworks work together with other frameworks, you can use Diploi to create monorepo applications, where you can for example, have Django as your backend and Astro in the frontend, or Hono as your API server with a Next.js fullstack app, or any other combination of frameworks and databases that fits your requirements</p><p>Diploi will then start a remote development environment that allows you to code in the browser and your application is deployed online. If you would like to start your application with a GitHub repository, all you need to do is register using GitHub and you will be able to start a new repository with your new application</p><p>What frameworks should we support next? Let me know in the comments!</p>","contentLength":3054,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building a Toy SSTable Storage Engine in Python","url":"https://dev.to/vyaslav/building-a-toy-sstable-storage-engine-in-python-a28","date":1751356853,"author":"Viacheslav Avramenko","guid":178767,"unread":true,"content":"<p>Have you ever wondered how modern databases like LevelDB, RocksDB, or Cassandra store and retrieve massive amounts of data efficiently? The secret sauce is often a data structure called the <strong>Log-Structured Merge-Tree (LSM-Tree)</strong> and its core component, the <strong>Sorted String Table (SSTable)</strong>.</p><p>In this post, we‚Äôll build a toy, educational SSTable-based storage engine in Python, inspired by Martin Kleppmann‚Äôs <em>Designing Data-Intensive Applications</em>. We‚Äôll start simple and gradually add complexity, so you can follow along even if you‚Äôre new to storage internals!</p><p>An  is a file format for storing large, sorted key-value pairs on disk. The key properties are:</p><ul><li>: All keys are stored in order, making range queries and binary search possible.</li><li>: Once written, SSTables are never modified. New data is written to new files.</li><li>: By combining in-memory and on-disk structures, SSTables enable fast writes and reasonably fast reads.</li></ul><p>SSTables are the backbone of LSM-Trees, which power many modern databases.</p><ul><li>: An in-memory, sorted key-value store.</li><li>: Writes sorted key-value pairs to disk as an SSTable, with a sparse index and Bloom filter.</li><li>: Reads from SSTables using the index and Bloom filter.</li><li>: Orchestrates the LSM-Tree logic, combining memtable and SSTables.</li><li>: A simple Bloom filter for fast negative lookups.</li><li>: A UNIX socket server exposing set/get operations.</li><li>: A CLI client to interact with the server.</li><li>: A script to stress test the system.</li></ul><h2>\n  \n  \n  Step 1: The Memtable ‚Äì Fast In-Memory Writes\n</h2><p>When you write data, it first lands in the ‚Äîa sorted, in-memory structure. In our Python version, we use a sorted list and the  module for efficient lookups and inserts.</p><div><pre><code></code></pre></div><p>When the memtable gets too big, we  it to disk as a new SSTable.</p><h2>\n  \n  \n  Step 2: Writing SSTables ‚Äì Persistence and Order\n</h2><p>Flushing the memtable means writing all its sorted key-value pairs to a file. But how do we make reads efficient?</p><ul><li>: Every Nth key and its file offset are written to an index file. This lets us quickly jump to the right part of the SSTable.</li><li>: A probabilistic data structure that tells us if a key is  in the file, saving unnecessary disk reads.\n</li></ul><div><pre><code></code></pre></div><h2>\n  \n  \n  Step 3: Reading SSTables ‚Äì Fast Lookups\n</h2><p>When you want to read a key:</p><ol><li> (fastest).</li><li> for each SSTable (quickly skip files that don‚Äôt have the key).</li><li> to jump to the right spot in the SSTable file and scan for the key.\n</li></ol><div><pre><code></code></pre></div><h2>\n  \n  \n  Step 4: The LSM-Tree ‚Äì Orchestrating Everything\n</h2><p>The  class manages the memtable, SSTable files, and the index cache. It handles:</p><ul><li>: Write to memtable, flush to SSTable when full.</li><li>: Check memtable, then SSTables from newest to oldest.\n</li></ul><div><pre><code></code></pre></div><h2>\n  \n  \n  Step 5: Server and CLI ‚Äì Putting It All Together\n</h2><p>We expose our storage engine via a simple UNIX socket server (). You can interact with it using the CLI ():</p><div><pre><code>python  sstable_server   \npython  main mykey 123\npython  main get mykey\n</code></pre></div><p>How does it perform? The  script:</p><ul><li>Inserts 1000 random key-value pairs</li><li>Reads them all back and prints the sum and average\n</li></ul><ul><li>: LSM-Trees and SSTables are designed for fast, sequential writes‚Äîperfect for write-heavy workloads.</li><li>: Sparse indexes and Bloom filters keep reads fast, even as data grows.</li><li>: These ideas power LevelDB, RocksDB, Cassandra, and more.</li></ul><p>This project is a ‚Äîbut it‚Äôs a great way to learn! You can extend it by adding:</p><ul><li>Compaction (merging old SSTables)</li><li>Deletion markers (tombstones)</li></ul><p>Building your own SSTable-based storage engine is a fantastic way to understand the internals of modern databases. By starting simple and adding complexity, you‚Äôll gain intuition for how real-world systems handle massive data efficiently.</p>","contentLength":3557,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Boost]","url":"https://dev.to/soumyajyoti-devops/-30jg","date":1751356658,"author":"Soumyajyoti Mahalanobish","guid":178739,"unread":true,"content":"<h2>Monitoring Celery Workers with Flower: Your Tasks Need Babysitting</h2><h3>Soumyajyoti Mahalanobish „Éª Jul 1</h3>","contentLength":100,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Monitoring Celery Workers with Flower: Your Tasks Need Babysitting","url":"https://dev.to/soumyajyoti-devops/monitoring-celery-workers-with-flower-your-tasks-need-babysitting-3ime","date":1751356642,"author":"Soumyajyoti Mahalanobish","guid":178738,"unread":true,"content":"<p>So you've got Celery workers happily executing tasks in your Kubernetes cluster, but you're flying blind. Your workers could be on fire, stuck in an endless queue, and you'd be the one to blame here. </p><p>where we're staring at logs hoping to divine the health of our distributed systems. Time to set up some proper monitoring.</p><p>Celery is one way of doing distributed task processing, but it's opaque when it comes to observability. You can see logs, but logs don't tell you if workers are healthy, how long tasks are taking, or whether your queue is backing up. That's where Flower comes in, it's the one of the monitoring tools for Celery environments.</p><p>This guide covers integrating Flower with Prometheus and Grafana to get proper metrics-driven monitoring. Whether you're using Grafana Cloud, self-hosted Grafana, the k8s-monitoring Helm chart, or individual components, we'll walk through the setup, explain why each piece matters, and tackle the gotchas.</p><ul><li>Kubernetes cluster with Celery workers already running</li><li>Some form of Prometheus-compatible metrics collection (Alloy, Prometheus Operator, plain Prometheus, etc.)</li><li>Grafana instance (cloud or self-hosted)</li><li>Basic Kubernetes knowledge</li><li>Patience for the inevitable configuration mysteries</li></ul><h2>\n  \n  \n  Understanding the Architecture\n</h2><p>Before diving into configuration, let's understand what we're building. Flower sits between your Celery workers and your monitoring system. It connects to your message broker (Redis/RabbitMQ), watches worker activity, and exposes metrics in Prometheus format.</p><p>The flow looks like this:</p><ol><li>Celery workers process tasks from the broker</li><li>Flower monitors the broker and worker activity</li><li>Flower exposes metrics at  endpoint</li><li>Your metrics collector (Prometheus/Alloy) scrapes these metrics</li><li>Grafana visualizes the data</li></ol><p>The key insight is that Flower doesn't directly monitor workers, it monitors the broker's state and worker events, which is why it can give you a complete picture of your distributed system.</p><h2>\n  \n  \n  The Setup: Flower with Prometheus Metrics\n</h2><p>Here's the thing about Flower, it's great at showing you pretty graphs in its web UI, but getting it to export metrics for Prometheus requires a specific flag that's easy to miss. By default, Flower only exposes basic Python process metrics, which are useless for understanding your Celery workload.</p><h3>\n  \n  \n  Deploy Flower (the Right Way)\n</h3><div><pre><code></code></pre></div><p>That  flag is doing the heavy lifting here. Without it, you'll get basic Python process metrics (memory usage, GC stats, etc.) but none of the Celery-specific goodness like worker status, task counts, or queue depths. This flag tells Flower to export its internal monitoring data in Prometheus format.</p><p>The broker URL needs to match exactly what your Celery workers are using. Flower connects to the same broker to observe worker activity and task flow. If there's a mismatch, Flower won't see your workers.</p><div><pre><code></code></pre></div><p>The named port () is crucial for ServiceMonitor configurations later. Many monitoring setups rely on port names rather than numbers for service discovery, making your configuration more resilient to port changes.</p><h2>\n  \n  \n  Metrics Collection: Choose Your Adventure\n</h2><p>How you get these metrics into your monitoring system depends entirely on your infrastructure setup. Kubernetes monitoring has evolved into several different patterns, each with its own tradeoffs.</p><h3>\n  \n  \n  Option 1: ServiceMonitor (Prometheus Operator/k8s-monitoring)\n</h3><p>ServiceMonitors are part of the Prometheus Operator ecosystem and provide declarative configuration for scrape targets. They're the cleanest approach if you're using Prometheus Operator or the k8s-monitoring Helm chart.</p><div><pre><code></code></pre></div><p>The critical detail here is  vs . ServiceMonitors reference the service's port definition, not the container port directly. This indirection allows you to change container ports without updating monitoring configs.</p><p>Getting this configuration right requires the same attention to detail as any other infrastructure code.<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmedia4.giphy.com%2Fmedia%2Fv1.Y2lkPTc5MGI3NjExb3R3eXJxNGJxajZzc2RkbTF3bWUxM241MzEzMjUzNXppNWQ1MnJpNyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw%2FJWnXY237vWeX3zx64V%2Fgiphy.gif\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmedia4.giphy.com%2Fmedia%2Fv1.Y2lkPTc5MGI3NjExb3R3eXJxNGJxajZzc2RkbTF3bWUxM241MzEzMjUzNXppNWQ1MnJpNyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw%2FJWnXY237vWeX3zx64V%2Fgiphy.gif\" width=\"450\" height=\"450\"></a></p><p>One character difference can mean the difference between working monitoring and hours of debugging.</p><p>Here, the  restricts which namespaces this ServiceMonitor applies to. Without it, the ServiceMonitor tries to find matching services across all namespaces, which can cause confusion in multitenant clusters.</p><h3>\n  \n  \n  Option 2: Prometheus Annotations\n</h3><p>If you're using vanilla Prometheus with annotation based discovery, you configure scraping through service annotations. This is simpler but less flexible than ServiceMonitors.</p><div><pre><code></code></pre></div><p>The annotations tell Prometheus to scrape this service. Your Prometheus configuration needs to include a job that discovers services with these annotations. This approach is more straightforward but offers less control over scraping behavior.</p><h3>\n  \n  \n  Option 3: Alloy Configuration (Manual)\n</h3><p>Grafana Alloy offers more flexibility than traditional Prometheus. You can configure complex discovery and relabeling rules to handle dynamic environments.</p><div><pre><code></code></pre></div><p>This configuration discovers pods with the  label, applies relabeling rules to construct proper scrape targets, and forwards metrics to your storage backend. The relabeling rules transform Kubernetes metadata into the format Prometheus expects.</p><h3>\n  \n  \n  Option 4: Static Prometheus Config\n</h3><p>For simple setups or development environments, static configuration is the most straightforward approach.</p><div><pre><code></code></pre></div><p>This hardcodes the service endpoint, which works fine for stable environments but doesn't handle dynamic scaling or service changes gracefully.</p><h2>\n  \n  \n  Verification: Making Sure It Actually Works\n</h2><p>Before diving into dashboard creation, verify that metrics are flowing correctly. This saves hours of troubleshooting later when you're wondering why your graphs are empty.</p><h3>\n  \n  \n  Check the Metrics Endpoint\n</h3><div><pre><code>kubectl port-forward svc/flower-service 5555:5555\ncurl http://localhost:5555/metrics\n</code></pre></div><p>You should see metrics that look like this:</p><div><pre><code>flower_worker_online{worker=\"celery@worker-1\"} 1.0\nflower_events_total{task=\"process_data\",type=\"task-sent\"} 127.0\nflower_worker_number_of_currently_executing_tasks{worker=\"celery@worker-1\"} 3.0\nflower_task_prefetch_time_seconds{task=\"process_data\",worker=\"celery@worker-1\"} 0.001\n</code></pre></div><p>If you're only seeing basic Python metrics (<code>python_gc_objects_collected_total</code>, <code>process_resident_memory_bytes</code>, etc.), you're missing the  flag. The Celery-specific metrics are what make this whole exercise worthwhile.</p><h3>\n  \n  \n  Check Your Monitoring System\n</h3><p>The verification process depends on your monitoring setup:</p><p><strong>For ServiceMonitor setups</strong>: Check the Prometheus Operator or Alloy UI for discovered targets. Look for your Flower service in the targets list with status \"UP\".</p><p>: Navigate to your Prometheus targets page () and verify the Flower job appears with healthy status.</p><p>: Check your collector's logs for any scraping errors and verify the target appears in the monitoring system's target list.</p><h2>\n  \n  \n  Understanding the Metrics\n</h2><p>Flower exports several categories of metrics, each providing different insights into your Celery system:</p><p>:  tells you which workers are active. <code>flower_worker_number_of_currently_executing_tasks</code> shows current load per worker.</p><p>:  tracks task lifecycle events (sent, received, started, succeeded, failed). These form the basis for throughput and success rate calculations.</p><p>: <code>flower_task_runtime_seconds</code> (histogram) shows task execution duration. <code>flower_task_prefetch_time_seconds</code> measures queue wait time.</p><p>: Various metrics help you understand queue depth and processing patterns.</p><h2>\n  \n  \n  Building Useful Dashboards\n</h2><p>Now for the payoff - turning those metrics into actionable insights. The key is building dashboards that help you answer specific operational questions.</p><p>: \"Are my workers running? How many are active?\"</p><div><pre><code># Total online workers\nsum(flower_worker_online)\n\n# Per-worker status\nflower_worker_online\n</code></pre></div><p>: \"How many tasks are we processing? Is throughput increasing?\"</p><div><pre><code># Tasks being sent to workers (per second)\nrate(flower_events_total{type=\"task-sent\"}[5m])\n\n# Tasks being processed (per second)\nrate(flower_events_total{type=\"task-received\"}[5m])\n</code></pre></div><p>: \"Is my queue backing up? How long do tasks wait?\"</p><div><pre><code># Tasks currently executing\nsum(flower_worker_number_of_currently_executing_tasks)\n\n# Time tasks spend waiting in queue\nflower_task_prefetch_time_seconds\n</code></pre></div><p>: \"How long do tasks take? Are they getting slower?\"</p><div><pre><code># 95th percentile task duration\nhistogram_quantile(0.95, rate(flower_task_runtime_seconds_bucket[5m]))\n\n# Median task duration\nhistogram_quantile(0.50, rate(flower_task_runtime_seconds_bucket[5m]))\n</code></pre></div><h3>\n  \n  \n  Dashboard Design Philosophy specifically for celery\n</h3><p>Start with high-level health indicators, then provide drill-down capabilities. A good Celery dashboard answers these questions in order:</p><ol><li>: Are workers running? Is the system processing tasks?</li><li>: How much work are we doing? Is it increasing or decreasing?</li><li>: How fast are tasks completing? Are there performance regressions?</li><li>: Are tasks backing up? Where are the bottlenecks?</li></ol><p>Real Celery deployments often have specialized workers for different task types. CPU-intensive tasks, I/O-bound tasks, and priority queues all need separate monitoring.</p><div><pre><code></code></pre></div><p>Each Flower instance monitors a specific Celery app, giving you granular visibility into different workload types. You'll need separate services and scrape configurations for each instance.</p><p>This approach lets you set different SLAs and alerting thresholds for different workload types. Your real-time fraud detection tasks might need sub-second response times, while your batch report generation can tolerate longer delays.</p><p>Flower itself is lightweight, but its resource needs scale with worker count and task frequency. A busy system with hundreds of workers and thousands of tasks per minute will use more memory to track state.</p><div><pre><code></code></pre></div><p>For self-hosted setups, configure Grafana to read from your Prometheus instance:</p><div><pre><code></code></pre></div><p>This assumes Prometheus and Grafana are in the same cluster. For cross-cluster or external access, you'll need appropriate networking and authentication configuration.</p><p>Production Flower deployments need proper security controls. Flower's web interface shows detailed information about your task processing, which could be sensitive.</p><p>Enable basic authentication at minimum:</p><div><pre><code></code></pre></div><p>For production systems, consider OAuth integration or running Flower behind an authentication proxy. Celery-exporter provides similar metrics without the web interface overhead. It's purpose-built for Prometheus integration and might use fewer resources than Flower. However, you lose Flower's web interface for ad-hoc investigation.</p><p>Getting Celery monitoring right requires attention to several key details:</p><ul><li>The  flag transforms Flower from a simple web interface into a proper metrics exporter</li><li>Your metrics collection method should match your infrastructure setup and operational preferences</li><li>ServiceMonitor port configuration matters -  references service ports,  references container ports</li><li>Label matching between ServiceMonitors, services, and pods must be exact</li><li>Your monitoring system's target discovery UI is invaluable for debugging configuration issues</li></ul><p>The setup might seem complicated, but each piece serves a specific purpose in building a robust monitoring system. Once you have this foundation, you can extend it with alerting rules, additional dashboards, and integration with your incident response workflow.</p>","contentLength":11208,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üò± Spent 3 days chasing a ghost bug?","url":"https://dev.to/aleksei_aleinikov/spent-3-days-chasing-a-ghost-bug-3imi","date":1751354992,"author":"Aleksei Aleinikov","guid":178737,"unread":true,"content":"<p>üî• Next time: fix it in 3 minutes.</p><p>A tiny Python feature (since 3.8) turns prints into instant micro-logs ‚Äî no setup, no overhead, pure clarity.</p>","contentLength":147,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üêçüí• Think bytearray is just a Python toy? Think again.","url":"https://dev.to/aleksei_aleinikov/think-bytearray-is-just-a-python-toy-think-again-1kg3","date":1751354934,"author":"Aleksei Aleinikov","guid":178736,"unread":true,"content":"<p>‚úÖ O(1) front deletion with zero copies\n‚úÖ Smart over-allocation for cheap appends<p>\n‚úÖ Memory tricks straight from C under the hood</p>\nIn 2025, knowing these saves real CPU &amp; RAM.<p>\n‚ö° Deep dive: devgenius.io/bytearray-memory-2025</p></p>","contentLength":228,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üêç Why 90% of Python Projects in 2025 Trip Over One Decision","url":"https://dev.to/aleksei_aleinikov/why-90-of-python-projects-in-2025-trip-over-one-decision-396n","date":1751354618,"author":"Aleksei Aleinikov","guid":178735,"unread":true,"content":"<p>Your tests pass‚Ä¶ only if they run last? Global configs haunting you? Django models moonlighting as email bots?</p><p>It‚Äôs not Python‚Äôs fault. The real culprit? Mixing all layers into one messy soup ‚Äî data, business logic, integrations, and side effects in a single blob.</p><p>In 2025, architecture is everything:\n‚úÖ Separate data and business logic.<p>\n‚úÖ Break up that ‚Äúmega‚Äù utils.py.</p>\n‚úÖ Kill global state before it kills your tests.</p><p>üí° Clear layers mean faster tests, smoother scaling, and fewer late-night pagers.</p>","contentLength":517,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dealers: Partner with Autosteer Brands for Higher Margins","url":"https://dev.to/gnss/dealers-partner-with-autosteer-brands-for-higher-margins-24ik","date":1751353401,"author":"zly","guid":178734,"unread":true,"content":"<p>In the fast-evolving world of agriculture, precision and efficiency aren‚Äôt just buzzwords‚Äîthey‚Äôre business essentials. For dealers of agricultural navigation systems, aligning with innovative solutions like <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> offers a unique opportunity to elevate profits and customer satisfaction simultaneously. But why exactly should dealers focus on building strong partnerships with autosteer brands? Let‚Äôs break down the strategic advantages and technical insights that make this collaboration a win-win.</p><h2>\n  \n  \n  Understanding Tractor Autosteer Systems\n</h2><p>Tractor autosteer systems are advanced technologies designed to automate steering during field operations, enabling farmers to maintain precise guidance without manual input. Leveraging GNSS (Global Navigation Satellite System) signals, inertial sensors, and intelligent control algorithms, these systems reduce overlap, minimize skips, and ensure consistent coverage. The result? Optimized fuel use, reduced operator fatigue, and improved crop yields.</p><p>For dealers, knowing the technical specs and operational benefits of autosteer systems‚Äîsuch as sub-inch accuracy and compatibility with multiple tractor brands‚Äîis critical. Many leading autosteer solutions integrate smoothly with existing hardware and software, allowing seamless upgrades and easier installation in the field.</p><h2>\n  \n  \n  The Dealer Advantage: Why Partnership Matters\n</h2><h3>\n  \n  \n  1. Higher Margins Through Value-Added Sales\n</h3><p>Partnering with top autosteer brands positions dealers to offer premium products that command better margins. Autosteer systems are not just hardware; they represent a lifetime of service and software updates. Dealers who provide installation, calibration, and support add indispensable value that farmers are willing to pay for, boosting revenues beyond simple product sales.</p><h3>\n  \n  \n  2. Differentiation in a Competitive Market\n</h3><p>The agricultural equipment market is crowded. Dealers who specialize in trusted <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> distinguish themselves as technology leaders. Farmers increasingly seek expert guidance on complex precision ag tools. By mastering autosteer technology, dealers gain a reputation for expertise, fostering loyalty and repeat business.</p><h3>\n  \n  \n  3. Simplified Inventory and Training\n</h3><p>Many autosteer brands offer modular and scalable product lines, making stocking and training manageable. Dealers can start with core components‚Äîlike GPS receivers and steering kits‚Äîand expand offerings as customer needs evolve. This scalability lowers upfront risks and simplifies technician certification, ensuring readiness to service a broad customer base.</p><h2>\n  \n  \n  Technical Insights That Matter to Dealers\n</h2><p>Successful partnership starts with deep product knowledge:</p><ul><li> Leading autosteer systems achieve 2-5 cm precision with RTK corrections, enabling ultra-precise guidance even on complex terrains.</li><li> Most autosteer kits support standard hydraulic or electronic steering systems, making integration with various tractor makes straightforward.</li><li> Modern systems feature intuitive touchscreens and remote diagnostics, reducing field downtime and empowering dealers with predictive support capabilities.</li><li> Over-the-air update functionality keeps products up to date without requiring return visits‚Äîan efficiency win for dealers and customers.</li></ul><p>By understanding these parameters, dealers can answer technical questions confidently, troubleshoot efficiently, and close sales faster.</p><h2>\n  \n  \n  Building Long-Term Growth Through Strategic Partnerships\n</h2><p>Aligning with reputable tractor autosteer brands unlocks access to training programs, marketing resources, and co-selling opportunities. Manufacturers often provide lead sharing and demo units, enabling dealers to showcase technology live and convert hesitant buyers. The continuous innovation in precision agriculture also means dealers partnering early position themselves to capitalize on emerging trends‚Äîlike AI-driven decision-making and autonomous farm vehicles.</p><h2>\n  \n  \n  Conclusion: Take the Wheel and Drive Profitability\n</h2><p>The shift toward precision agriculture is irreversible. Dealers who embrace <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> as core offerings don‚Äôt just sell equipment‚Äîthey become trusted partners in their customers‚Äô success. This partnership translates into higher margins, stronger customer loyalty, and a competitive edge in a rapidly advancing industry.</p><p>Are you ready to elevate your dealership by partnering with autosteer brands? Explore your options, invest in training, and start steering your business toward greater profitability today.</p><p><strong>What challenges have you faced in integrating autosteer technologies into your product lineup? Share your experience or questions below!</strong></p>","contentLength":4714,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Autosteer Conferences: Key Events for Dealers in 2025","url":"https://dev.to/gnss/autosteer-conferences-key-events-for-dealers-in-2025-noo","date":1751353388,"author":"zly","guid":178733,"unread":true,"content":"<p>In the fast-evolving world of agricultural technology, staying ahead means constantly learning, networking, and innovating. For dealers of agricultural navigation systems, understanding the latest trends and advancements in <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> is crucial. Autosteer solutions are transforming farming efficiency, accuracy, and sustainability ‚Äî and 2025 promises a lineup of essential conferences tailored to sharpen your expertise and boost your business.</p><p>Let‚Äôs explore the top autosteer conferences that dealers should mark on their calendars to stay competitive and connected in 2025.</p><h2>\n  \n  \n  Why Attend Autosteer Conferences?\n</h2><p>Autosteer conferences aren‚Äôt just venues for product launches‚Äîthey‚Äôre education hubs where cutting-edge precision agriculture technologies meet industry professionals. These events offer dealers firsthand insights into new product features, technical updates, and integration best practices for <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a>.</p><p>With developments like advanced GNSS receivers, real-time kinematic (RTK) positioning, and AI-powered guidance algorithms, dealers gain practical knowledge to better advise farmers on system installation and optimization. Moreover, conferences foster relationships with manufacturers, enabling early access to innovations that shape the future of farming.</p><h2>\n  \n  \n  Top Autosteer Conferences to Watch in 2025\n</h2><h3>\n  \n  \n  1. PrecisionAg Vision Conference\n</h3><p>This annual event is a hotspot for precision agriculture technology lovers. Expect deep dives into autosteer calibration techniques, compatibility with various tractors, and new enhancements such as automatic headland turn control. Dealers will benefit from workshops focused on maximizing system uptime and troubleshooting common technical issues.</p><h3>\n  \n  \n  2. AgGateway Connect Conference\n</h3><p>AgGateway is a global consortium driving digital agriculture standards. Their 2025 conference includes sessions on data interoperability and seamless integration of <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> with farm management software. This is key knowledge for dealers who want to offer holistic, tech-friendly solutions to modern farmers.</p><h3>\n  \n  \n  3. Farm Progress Show ‚Äî Autosteer Pavilion\n</h3><p>Held in the heart of America‚Äôs farm belt, this show features live demonstrations and hands-on training for the latest autosteer hardware. Dealers can interact directly with product developers from companies offering advanced GNSS correction services (like real-time kinematic corrections with sub-inch accuracy), ensuring their expertise is both current and actionable.</p><h2>\n  \n  \n  Technical Highlights Dealers Should Focus On\n</h2><p>When attending conferences, prioritize sessions discussing:</p><ul><li><strong>Signal Precision and Reliability:</strong> Upgrades in RTK technology and multi-constellation GNSS improve tractor path accuracy, reducing overlap and input waste.</li><li> Understanding how autosteer systems integrate with various tractor brands and digital solutions enhances dealer value.</li><li><strong>User Interface &amp; Automation:</strong> Trends toward more intuitive control panels and the introduction of AI for adaptive steering functions streamline farmer adoption.</li><li><strong>Maintenance &amp; Support Best Practices:</strong> Knowing system diagnostics and remote troubleshooting can elevate dealer service, keeping farms productive during peak seasons.</li></ul><p>Deep product knowledge unlocks better sales conversations and builds dealer credibility.</p><h2>\n  \n  \n  How Dealers Can Leverage Conference Learnings\n</h2><p>Post-event, dealers should:</p><ul><li>Share insights with their sales and tech teams, aligning everyone with the latest features and updates.</li><li>Update marketing materials to highlight new autosteer capabilities.</li><li>Offer exclusive demo days for clients to experience innovations firsthand.</li><li>Form partnerships with manufacturers providing top-tier technical support.</li></ul><p>By applying these strategies, dealers transform information into competitive advantage.</p><p>The world of <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> is evolving rapidly. For dealers, participating in specialized autosteer conferences in 2025 is not just about keeping up ‚Äî it‚Äôs about leading the way. These events equip you with technical expertise, market insights, and invaluable connections to elevate your business.</p><p>Are you ready to attend the key autosteer conferences and drive your dealership to the forefront of precision agriculture? Which event excites you most, and what topics would you want covered? Let‚Äôs start a conversation below!</p><p><em>Stay updated and optimize your offerings‚Äîbecause the future of farming steers precision, and your dealership should too.</em></p>","contentLength":4502,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Collaborate with Farmers: How Autosteer Builds Stronger Relationships","url":"https://dev.to/gnss/collaborate-with-farmers-how-autosteer-builds-stronger-relationships-5e4","date":1751353374,"author":"zly","guid":178732,"unread":true,"content":"<p>In today‚Äôs precision agriculture landscape, dealers of agricultural navigation systems play a crucial role in bridging cutting-edge technology with farmers‚Äô hands-on work. One transformative technology fueling this evolution is <strong>tractor autosteer systems</strong>. These intelligent systems don‚Äôt just enhance farm productivity‚Äîthey are powerful tools for creating deeper, more collaborative relationships between dealers and farmers.</p><p>In this post, we‚Äôll explore how tractor autosteer technology can empower dealers to partner more effectively with farmers, accelerating trust, communication, and mutual success.</p><h2>\n  \n  \n  Understanding Tractor Autosteer Systems: More than Automation\n</h2><p>At its core, a <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer system</a> uses GPS-guided navigation to automate steering, allowing farmers to maintain straight, precise rows without manual input. This reduces operator fatigue and improves accuracy, ultimately saving time and input costs. </p><p>Key technical features often include:</p><ul><li>Satellite positioning accuracy within centimeters.</li><li>Compatibility with existing tractor models and various farming implements.</li><li>Real-time variable rate control for seeding, spraying, and fertilizing.</li><li>User-friendly interfaces supported by mobile or tablet apps.</li></ul><p>By mastering these technical strengths, dealers can position autosteer systems not just as gadgets, but as essential productivity catalysts tailored to each farmer‚Äôs unique fields and crops.</p><h2>\n  \n  \n  Building Trust Through Education and Demonstration\n</h2><p>Dealers who invest the time to educate farmers about how GPS autosteer technology works and its tangible benefits foster stronger bonds. Many farmers initially hesitate to adopt new technology due to uncertainty or concerns about complexity.</p><p>Offering hands-on demonstrations and clear, jargon-free explanations helps break down barriers. For example:</p><ul><li>Show how consistent spacing reduces seed wastage.</li><li>Highlight fuel savings from fewer unnecessary overlaps.</li><li>Discuss how autosteer reduces operator fatigue, enhancing safety during long days.</li></ul><p>By becoming a trusted advisor rather than just a vendor, dealers create long-term partnerships rooted in shared goals of efficiency and sustainability.</p><h2>\n  \n  \n  Customizing Solutions: Tailoring Autosteer to Farmer Needs\n</h2><p>No two farms are identical. Successful dealers recognize this and offer autosteer configurations that align with each farmer‚Äôs workflow, equipment, and budget. This might involve:</p><ul><li>Integrating autosteer with existing precision ag tools or management software.</li><li>Selecting GPS modules that balance cost with accuracy requirements.</li><li>Providing ongoing support and updates as farming conditions evolve.</li></ul><p>Customization ensures farmers feel heard and supported, which strengthens loyalty and encourages repeat business.</p><h2>\n  \n  \n  Leveraging Data to Foster Collaboration\n</h2><p>Modern <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> generate valuable data on field patterns, productivity, and machine performance. Dealers can help farmers interpret this data to optimize future operations.</p><p>Sharing insights derived from system data opens a two-way dialogue about improving yields, reducing waste, and planning for challenges. This consultative approach transforms the technology from an isolated tool into a collaborative platform.</p><h2>\n  \n  \n  Conclusion: A Partnership for Growth\n</h2><p>For dealers of agricultural navigation systems, embracing tractor autosteer technology offers much more than equipment sales‚Äîit‚Äôs an opportunity to build meaningful partnerships with farmers. By focusing on education, customization, and data-driven collaboration, dealers become indispensable allies in modern farming.</p><p>Ready to deepen your connections with farmers through autosteer technology? What strategies do you find most effective in facilitating farmer adoption and collaboration? Share your experiences or questions below!</p>","contentLength":3801,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dealers: Attend Autosteer Expos to Stay Ahead","url":"https://dev.to/gnss/dealers-attend-autosteer-expos-to-stay-ahead-6fg","date":1751353365,"author":"zly","guid":178731,"unread":true,"content":"<p>In the rapidly evolving world of precision agriculture, staying ahead means staying informed. For dealers of agricultural navigation systems, understanding the latest innovations in  is more than a business advantage‚Äîit‚Äôs a necessity. Autosteer technology transforms farming by improving accuracy, reducing fatigue, and boosting yields. But how can dealers keep up with this fast-paced industry? The answer lies in attending specialized autosteer expos.</p><h2>\n  \n  \n  Deep Dive into Tractor Autosteer Systems: More Than Just GPS\n</h2><p>Modern tractor autosteer systems combine GNSS technology, real-time kinematic (RTK) corrections, and sophisticated control algorithms to provide centimeter-level accuracy. These systems reduce overlap and skips, optimize input use, and ensure consistent seed placement. Dealers familiar with these technical parameters can better educate farmers, align product recommendations, and troubleshoot challenges in the field.</p><p>At expos, you'll find demonstrations of advanced features like:</p><ul><li><strong>Integrated machine control</strong> that synchronizes steering with planting, spraying, and harvesting implements.</li><li><strong>Adaptive steering sensitivity</strong> tailored to field conditions.</li><li><strong>Wireless data transmission</strong> for remote support and fleet management.</li></ul><p>Understanding these product nuances arms dealers with credibility and confidence, enhancing customer trust and satisfaction.</p><h2>\n  \n  \n  Networking: The Dealer‚Äôs Gateway to Growth\n</h2><p>Expos are hubs for innovation and collaboration. Industry leaders, product developers, and fellow dealers converge to exchange knowledge and insights. For dealers of agricultural navigation systems, networking here is invaluable:</p><ul><li>Gain firsthand exposure to emerging autosteer technologies before they hit the market.</li><li>Establish relationships with manufacturers for exclusive deals or early access.</li><li>Share and learn practical tips from peers on installation, calibration, and customer training.</li></ul><p>This dynamic environment fuels continuous learning, ensuring dealers stay competitive and relevant.</p><h2>\n  \n  \n  Hands-On Learning: Experience What You Sell\n</h2><p>Expos often host workshops and interactive demos, letting dealers test autosteer systems under simulated conditions. This hands-on experience is crucial for mastering:</p><ul><li>Setup procedures to minimize installation errors.</li><li>Calibration techniques for optimal performance across diverse terrains.</li><li>Software interfaces to assist customers with ease-of-use issues.</li></ul><p>By deepening product familiarity, dealers can offer superior technical support, reducing downtime and strengthening client loyalty.</p><h2>\n  \n  \n  Market Insights: Readying for Tomorrow‚Äôs Demands\n</h2><p>Precision agriculture is shifting toward automation, data integration, and sustainability. At autosteer exhibitions, dealers get front-row seats to market trends, including:</p><ul><li>Growth in subscription-based software models.</li><li>Integration of AI and machine learning for predictive analytics.</li><li>Expanding demand for retrofit kits compatible with older tractors.</li></ul><p>Understanding these trends helps dealers proactively adjust their inventory, marketing strategies, and training modules to better meet evolving customer needs.</p><p>Attending autosteer expos isn‚Äôt just a chance to browse new products‚Äîit‚Äôs a strategic move to sharpen expertise, build connections, and future-proof your dealership. When you immerse yourself in the latest in , you position your business as a trusted advisor in precision agriculture‚Äôs growth story.</p><p>Are you ready to leverage autosteer expos to elevate your dealership and exceed your customers‚Äô expectations? Let‚Äôs discuss: which expo topics or product features matter most to you as a dealer?</p>","contentLength":3612,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dealers: Host Autosteer Demonstrations to Close Sales","url":"https://dev.to/gnss/dealers-host-autosteer-demonstrations-to-close-sales-27a7","date":1751353336,"author":"zly","guid":178730,"unread":true,"content":"<p>In today‚Äôs competitive agricultural technology market, standing out as a dealer requires more than just offering quality products. For dealers of agricultural navigation systems,  present a unique opportunity to connect with farmers on a practical, hands-on level. Hosting well-crafted autosteer demonstrations can be the difference between a lead and a closed sale.</p><h2>\n  \n  \n  Why Demonstrations Matter More Than Ever\n</h2><p>Farmers invest heavily in precision agriculture tools, but many remain cautious about integrating new tech into their daily operations. A live demonstration answers questions better than any brochure or pitch. It allows potential buyers to experience real-time benefits such as automatic steering accuracy, reduced operator fatigue, and improved field productivity.</p><p>Moreover, autosteer demonstrations transform abstract features into tangible value. When dealers show how a tractor‚Äôs GPS-guided steering system continuously maintains lane accuracy‚Äîeven on rugged terrain or under challenging weather conditions‚Äîfarmers visualize immediate returns on investment.</p><h2>\n  \n  \n  Preparing for an Effective Autosteer Demo\n</h2><p>For a successful demonstration, preparation is key. Familiarize yourself with the technical parameters of the system you‚Äôre showcasing. Many modern <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> include features like:</p><ul><li> Ensures centimeter-level accuracy by using correction signals.</li><li><strong>Adaptive Steering Control:</strong> Automatically adjusts steering inputs based on field conditions.</li><li> Wireless connectivity options for syncing with existing farm management software.</li><li> Touchscreen displays that provide simple control without overwhelming operators.</li></ul><p>Highlighting these capabilities shows that the system isn‚Äôt just sophisticated technology, but a practical tool built for everyday farming challenges.</p><h2>\n  \n  \n  Crafting the Experience: Engaging Your Audience\n</h2><p>During the demonstration, keep the focus on how the autosteer system solves real pain points:</p><ul><li>Show how it minimizes overlap and reduces seed, fertilizer, and chemical waste.</li><li>Highlight operator comfort improvements by reducing time spent manually steering.</li><li>Illustrate time-saving on repetitive tasks, freeing farmers to handle other critical operations.</li></ul><p>Encourage on-site participation. Let attendees try the controls themselves under your guidance. Firsthand experience builds confidence, turning curiosity into commitment.</p><h2>\n  \n  \n  Follow-Up: Turning Demonstrations into Sales\n</h2><p>Demonstrations don‚Äôt end when the tractor stops moving. Use the momentum to:</p><ul><li>Provide personalized quotes based on the farmer‚Äôs specific equipment and field size.</li><li>Offer trial periods or financing options to lower purchase barriers.</li><li>Share case studies or testimonials to reinforce proven ROI.</li></ul><p>By positioning yourself as a knowledgeable partner rather than a salesperson, you build trust and credibility‚Äîtwo elements vital to closing deals in agricultural communities.</p><p>Hosting  demonstrations is more than a marketing tactic‚Äîit‚Äôs a strategic tool for dealers to engage, educate, and empower their customers. As agriculture pushes towards smarter, more efficient practices, hands-on experience is often the deciding factor in technology adoption.</p><p>Are you ready to transform your sales approach? How can you make your next demonstration not just informative but genuinely irresistible to your customers? Share your thoughts or experiences in the comments below!</p><p><em>Explore advanced autosteer solutions and elevate your dealership‚Äôs impact with precision agriculture at your fingertips.</em></p>","contentLength":3514,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"MCP Server for Amazon Products (100% Open Source) üõíüöÄ","url":"https://dev.to/buildandcodewithraman/mcp-server-for-amazon-products-100-open-source-o80","date":1751352575,"author":"Ramandeep Singh","guid":178703,"unread":true,"content":"<p>I've built a powerful MCP Server for Amazon that's completely open source! This innovative server leverages the Model Context Protocol (MCP) to create a seamless bridge between your applications and Amazon product data. Supercharge your workflow with these amazing capabilities:</p><ul><li>üîç Search for Amazon products by keyword</li><li>üì¶ Scrape detailed product information (name, price, image, rating, reviews, availability, description)</li><li>‚ö° No API keys or authentication required</li><li>üõ†Ô∏è Easy integration with tools like Cursor and Claude Desktop</li></ul><ol><li>üßë‚Äçüíª Clone the repository:\n</li></ol><div><pre><code>git clone https://github.com/r123singh/amazon-mcp-server.git\n</code></pre></div><ol><li>üèóÔ∏è Create a virtual environment:\n</li></ol><ol><li>‚ñ∂Ô∏è Activate the virtual environment:</li></ol><div><pre><code>pip  requirements.txt\n</code></pre></div><ol><li><p>üö´ No API keys or tokens are required!</p></li><li><p>üõ†Ô∏è Configure MCP JSON:\nCreate a  file with:</p></li></ol><div><pre><code></code></pre></div><ul><li>üóÇÔ∏è  with the absolute path to this directory (use  or  to get the path)</li></ul><p>The server provides the following tools for interacting with Amazon:</p><ul><li><ul><li><code>scrape_product(product_url)</code></li><li>Scrape product details (name, price, image, rating, reviews, availability, description) from a given Amazon product URL.</li></ul></li><li><ul><li><code>search_products(query, max_results)</code></li><li>Search for products on Amazon by keyword and return a list of results.</li></ul></li></ul><p>Now that you have the MCP server configured, you can use it in your applications. The server provides a natural language interface to interact with Amazon through the available tools such as Cursor, Claude Desktop, and more!</p><ol><li>Open MCP settings in Cursor AI - File -&gt; Settings -&gt; MCP -&gt; Enable MCP</li><li>Add the following to your Cursor AI settings:\n</li></ol><div><pre><code>{\n  \"mcpServers\": {\n    \"amazon\": {\n      \"command\": \"{PATH_TO_DIRECTORY}\\\\amazon-mcp-server\\\\venv\\\\Scripts\\\\python.exe\",\n      \"args\": [\n        \"{PATH_TO_DIRECTORY}\\\\amazon-mcp-server\\\\server.py\"\n      ]\n    }\n  }\n}\n</code></pre></div><ol><li><p>Use the following prompt to use the Amazon MCP server:</p></li></ol><div><pre><code>Search Amazon for 'wireless headphones', show top 3 results üõí\n</code></pre></div><div><pre><code>Get details for this Amazon product: [product URL]\n</code></pre></div><ol><li>Open Claude Desktop. Go to File -&gt; Settings -&gt; Select developer tab -&gt; Click on \"Edit config\"</li><li>It will open location of config file in your default editor. It is named 'claude_desktop_config.json'. Open it.</li><li>Add the following to the config:\n</li></ol><div><pre><code>{\n  \"mcpServers\": {\n    \"amazon\": {\n      \"command\": \"{PATH_TO_DIRECTORY}\\\\amazon-mcp-server\\\\venv\\\\Scripts\\\\python.exe\",\n      \"args\": [\n        \"{PATH_TO_DIRECTORY}\\\\amazon-mcp-server\\\\server.py\"\n      ]\n    }\n  }\n}\n</code></pre></div><ol><li><p>The new mcp server should appear in the settings page with status \"Running\" or \"Connected\" ‚úÖ</p></li><li><p>Close the settings page and go back to the chat. Select the 3 line icon just below the chat input box. It should display now \"amazon\" in the list of available servers, clicking it will list all the tools available.</p></li><li><p>Use the following prompt to search for products:</p></li></ol><div><pre><code>Search Amazon for 'wireless headphones', show top 3 results üõí\n</code></pre></div><p>Or to get product details:</p><div><pre><code>Get details for this Amazon product: [product URL]\n</code></pre></div><ol><li>It will prompt initially to run the tool. Click on \"Always run\". It will fetch the product data from Amazon and return the details. üîó</li></ol><h2>\n  \n  \n  Why Use This MCP Server? ü§î\n</h2><ul><li>üöÄ Instantly access Amazon product data without API keys or scraping headaches</li><li>üõ°Ô∏è 100% open source and privacy-friendly</li><li>üß© Plug-and-play with modern AI tools and workflows</li><li>üõ†Ô∏è Extensible for your own custom use-cases</li></ul>","contentLength":3294,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Wallpy: A Wallpaper Changer for Linux Desktops üåÑ","url":"https://dev.to/jayantur13/wallpy-a-wallpaper-changer-for-linux-desktops-1khj","date":1751350613,"author":"Jayant Navrange","guid":178702,"unread":true,"content":"<blockquote><p>Tired of staring at the same desktop wallpaper every day? Let  breathe new life into your Linux desktop ‚Äî automatically, intelligently, and beautifully.</p></blockquote><p>As a Linux user and developer, I enjoy customizing my desktop. But changing wallpapers manually is tedious, and most existing solutions either lacked features, weren‚Äôt DE-agnostic, or required too much setup.</p><p>So I built  ‚Äî a smart, simple, and flexible wallpaper changer made just for Linux desktops.</p><p>‚úÖ <strong>Desktop Environment Detection</strong>, , , and others ‚Äî Wallpy uses the right backend for your setup.</p><p>‚úÖ <strong>Dark/Light Wallpaper Matching (Planned)</strong><p>\nAssign different folders for light and dark themes. Wallpy adapts to your system‚Äôs current appearance.</p></p><p>‚úÖ <strong>Automatic Wallpaper Cycling</strong><p>\nChoose your interval (e.g. every 15 minutes), and Wallpy will handle the rest.</p></p><p>‚úÖ <p>\nOne-click toggle to add Wallpy to your startup apps via a </p> file.</p><p>‚úÖ <p>\nMinimize to tray ‚Äî right-click the icon for </p> or . It's non-intrusive and lightweight.</p><p>‚úÖ  ‚Äî it looks and feels native on most modern Linux distros.</p><ul><li>üõ†Ô∏è  for packaging</li><li>üìÇ  autostart entries</li><li>‚öôÔ∏è Config saved locally (JSON or INI)</li><li>üñ•Ô∏è Tray icon support with theme awareness</li><li>üß™ Tested on Ubuntu (Mate)</li></ul><blockquote><p>You can build it from source or use pre-built packages.</p></blockquote><blockquote><p>üí° Tip: For AppImage, run  and double-click to launch.</p></blockquote><p>Wallpy is open-source and actively maintained. PRs, issues, and feedback are welcome!</p><p>Wallpy started as a small utility to scratch my own itch ‚Äî but it‚Äôs become something I use every day.</p><p>If you‚Äôre a Linux user who values a beautiful, dynamic desktop, Wallpy might be just what you‚Äôre looking for.</p><p>üì¨ <em>Follow me for more Linux apps, open-source tools, and Python projects.</em><p>\n‚ù§Ô∏è Star the repo if you find it useful!</p></p>","contentLength":1732,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tryton News: Newsletter July 2025","url":"https://discuss.tryton.org/t/newsletter-july-2025/8699","date":1751349621,"author":"","guid":178722,"unread":true,"content":"<p>In the last month we focused on fixing bugs, improving the behaviour of things, speeding-up performance issues - building on the changes from <a href=\"https://discuss.tryton.org/t/tryton-release-7-2/\">our last release</a>. We also added some new features which we would like to introduce to you in this newsletter.</p><h3>Accounting, Invoicing and Payments</h3><h3>System Data and Configuration</h3><p>In order to have always the same results no matter of the order of the lines, <a href=\"https://bugs.tryton.org/14047\">we now round the tax amount of each line before adding it to the total tax</a>.\nIn the past we rounded the tax amount per line after it was added to the total tax. With the used  the issue is that when the result is like  (if rounding precision is set to 2 digits) it may be rounded up or down depending if the -digit is even or odd.</p>","contentLength":721,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building SpokaneTech.org","url":"https://dev.to/spokanetech/building-spokanetechorg-3h18","date":1751345535,"author":"David","guid":178645,"unread":true,"content":"<p>The Spokane Tech website is a project for the community made by the community. The aim of the project is to deliver a community resource for all things tech in the Inland Northwest while providing an opportunity for contributes to gain real-world experience in a shared open source project.</p><p>There is a thriving tech community in Spokane, but many members of our community are disconnected. With multiple tech groups on different platforms, such as meetup and eventbright, there are often events of interest happening that many tech enthusiasts are not aware of. The intent is to have a single resource that includes local tech groups and the events they host.</p><p>Many developers in our community, especially those earlier in their career, have skills and drive, but haven't had the opportunity to work on a project in a real professional environment. For example, a developer could have great knowledge in coding, but hasn't yet had the first professional job or participated in project with milestones, project planning, code reviews, etc. The Spokane Tech project aims to provide this and give contributes a project they can reference for career development, personal portfolios, interviews, etc. </p><p>What our project (and webapp) becomes will ultimately be dictated by members of the project and will likely evolve over time. Below are some details of the initial vision.</p><p>Have a web site that houses groups and events. Events may be manually or automatically added to our site. We will have views that list all the groups and events, as well as detail pages for each group and event. Ideally we'll also have a calendar view that can list all events and perhaps be filterable.</p><p>Have event requests and suggestions capabilities. Here members can post a suggested events they want to give or have someone else give, and others can up/down vote the event (think reddit or stackoverflow). This can be used to prioritize events base on community interest. This can also serve as a living backlog of event ideas. Add labels to events, such as technical areas (frontend, scripting, ML, etc.) and topic levels (beginner/intermediate/etc.). With labels people can filter event based on interest and other criteria.</p><p>Build member profiles. With profiles, we can have some basic metrics on things like career level, geographic location, interested and expertise. This data can help provide viability into the overall tech presence in Spokane and help drive event topics and location. This could also be a future resource to make available to local businesses and the community for things like contract work, etc. (There has been some outside interest in this type of resource)</p><p>The Spokane Tech project was started mostly by members of the Spokane Python User Group (SPUG), so naturally the first version of the website is based on python. In the future the project may be re-created in other languages/frameworks/etc. (such as Golang or Rust) as member interest dictates. This is intended to foster growth, knowledge-sharing, and exposure to different tech stacks and methodologies.</p><h2><strong>Interested in participating? Great! Read on...</strong></h2><p>Here are a few things you can do to get started.</p><ul><li><p>Look through the open issues and find one that interests you (issues tagged \"good first issue\" could be great candidates) on <a href=\"https://github.com/SpokaneTech/SpokaneTechWeb/issues\" rel=\"noopener noreferrer\">github</a></p></li><li><p>Read our <a href=\"https://spokanetech.github.io/blog/building-spokane-tech/intro/\" rel=\"noopener noreferrer\">blog</a> to learn more about the project, follow development and design decisions, and step through the process of building the site. </p></li><li><p>Clone the repo to you machine and run locally, explore the code, break things, fix things, have fun. Step by step instructions are in the CONTRIBUTION doc on <a href=\"https://github.com/SpokaneTech/SpokaneTechWeb/blob/main/.github/CONTRIBUTING.md\" rel=\"noopener noreferrer\">github</a>.</p></li><li><p>Have a feature idea or found a bug? Create an issue on <a href=\"https://github.com/SpokaneTech/SpokaneTechWeb/issues\" rel=\"noopener noreferrer\">github</a>.</p></li></ul><h2><strong>Need more help or direction?</strong></h2><p>New to python, django, git, webdev? Reach out in the Discord channel and suggest a virtual meet. We'll schedule these on occasion, or as interest dictates. This can be used as q&amp;a sessions, code paring, shared code reviews, or just follow along as a member works on an issue.</p>","contentLength":3952,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"LLM Agent's Arsenal: A Beginner's Guide to the Action Space","url":"https://dev.to/zachary62/llm-agents-arsenal-a-beginners-guide-to-the-action-space-n75","date":1751345092,"author":"Zachary Huang","guid":178644,"unread":true,"content":"<blockquote><p><em>Ever sent your AI agent into the \"battle\" of a complex task, only to watch it fumble with a blunt sword or use the wrong weapon for the fight? When an agent fails, our first instinct is to blame its \"brain\" (the LLM). But the real culprit is often the arsenal we equipped it with‚Äîthe collection of weapons was dull, confusing, or simply not right for the job.</em></p></blockquote><p>In our previous tutorial, <a href=\"https://pocketflow.substack.com/p/llm-agent-internal-as-a-graph-tutorial\" rel=\"noopener noreferrer\">LLM Agents are simply Graph ‚Äî Tutorial For Dummies</a>, we revealed that every agent is like a warrior following a simple battle plan: <code>Assess -&gt; Strike -&gt; Repeat</code>. We showed how the 'assessing' happens in a decision node that plans the next move. Now, it's time to forge the weapons used for the .</p><p>That 'Strike' is powered by the agent's ‚Äîthe official set of weapons, tools, and spells it can draw upon. In technical terms, this is its . This isn't just a list of functions; it is the very soul of your agent's power. A well-forged arsenal, where every blade is sharp and serves a unique purpose, is the difference between an agent that is defeated by the first obstacle and one that conquers any challenge.</p><p>In this guide, you are the master blacksmith. Using the transparent and powerful <a href=\"https://github.com/The-Pocket/PocketFlow\" rel=\"noopener noreferrer\"></a> framework as your forge, we will teach you how to craft an arsenal of actions that will turn your agent from a clumsy squire into a legendary warrior.</p><h2><strong>The Battle Tactician: How an Agent Chooses Its Weapon</strong></h2><p>So, we have an arsenal. But how does the agent, our digital warrior, know when to draw a longsword for a close-quarters fight versus firing a bow from a distance?</p><p>This critical decision happens in the ‚Äîthe agent's battle tactician. At its core, every agent is just a simple loop that consults its tactician, who then chooses an action from the arsenal. The chosen action is performed, and the results are reported back to the tactician to plan the next move.</p><p>Visually, the battle plan looks like this:</p><ol><li><strong> (The Tactician):</strong> This is the brain. It analyzes the battlefield (the user's request and current data).</li><li><strong>The Arrows (The Commands):</strong> Based on its analysis, the tactician issues a command: , , or . This is the branch in the graph.</li><li><strong>The Action Nodes (The Specialists):</strong> Each command goes to a specialist soldier who executes that one task.</li><li><strong>The Loop Back (The Report):</strong> After the specialist completes their task, they report back to the tactician with new information, and the cycle begins again.</li></ol><p>\"But what magic happens inside that  node?\" you ask. \"How does it  think?\"</p><p>This is the most misunderstood part of agent design, and the secret is shockingly simple.  There's no complex algorithm, just a carefully written set of instructions for the LLM.</p><p>The tactician's \"brain\" is a prompt that looks something like this:</p><div><pre><code>### CONTEXT\nYou are a research assistant. Here is the current situation:\nQuestion: {the user's original question}\nPrevious Actions: {a log of what has been done so far}\nCurrent Information: {any data gathered from previous actions}\n\n### ARSENAL (Available Actions)\nHere are the weapons you can use. Choose one.\n\n[1] search_web\n  Description: Search the internet for up-to-date information.\n  Parameters:\n    - query (str): The specific topic to search for.\n\n[2] write_file\n  Description: Save text into a local file.\n  Parameters:\n    - filename (str): The name of the file to create.\n    - content (str): The text content to write into the file.\n\n[3] answer_question\n  Description: Provide the final answer to the user.\n  Parameters:\n    - answer (str): The complete, final answer.\n\n## YOUR NEXT COMMAND\nReview the CONTEXT and choose the single best ACTION from your ARSENAL to proceed.\nFormat your response as a YAML block.\n</code></pre></div><p>That's it! The agent's entire decision-making process boils down to this: the LLM reads the description of the situation and the \"user manual\" for every weapon in its arsenal, and then it picks the one that makes the most sense.</p><p>The quality of its choice is <strong>100% dependent on how clearly you describe its weapons.</strong> A sharp, well-defined arsenal in your prompt leads to a smart, effective agent. A vague, confusing one leads to a warrior who brings a knife to a dragon fight.</p><p>Now, let's learn how to forge these weapons, from simple daggers to god-tier magic spells.</p><h2><strong>Level Up Your Arsenal: The Three Tiers of Weapon Complexity</strong></h2><p>As a master blacksmith, you wouldn't forge just one type of weapon. You need a full range, from simple daggers for quick jabs to powerful, enchanted swords for epic battles. The same is true for your agent's arsenal. Actions can be designed with varying levels of power and complexity. Let's explore the three tiers.</p><h3><strong>Level 1: The Simple Dagger (The \"Button\" Action)</strong></h3><p>A simple dagger is a no-frills weapon. You draw it, you use it. It does one thing, and it does it reliably. These are actions that require .</p><p>Think of them as on/off switches or simple commands.</p><p>\nAn action like  or .</p><p><strong>In the Arsenal (Prompt Description):</strong></p><div><pre><code>[1] request_human_help\n  Description: If you are stuck or need clarification, use this action to pause and ask the human user for guidance.\n</code></pre></div><p>\nFor clear, binary decisions. When the agent needs to signal a state change, like \"I'm finished,\" \"I'm stuck,\" or \"I've failed.\" They are perfect for controlling the overall flow of the battle plan.</p><h3><strong>Level 2: The Sharpshooter's Bow (The Parameterized Tool)</strong></h3><p>A bow is useless without an arrow and a target. This weapon requires input to be effective. These are the most common and versatile actions in an agent's arsenal‚Äîactions that require  to function.</p><p>To use these weapons, the agent must not only choose the bow but also aim it by providing the correct inputs.</p><p>\nAn action like  or <code>send_email(to, subject, body)</code>.</p><p><strong>In the Arsenal (Prompt Description):</strong></p><div><pre><code>[2] search_web\n  Description: Searches the public internet for a given text string.\n  Parameters:\n    - query (str): The precise search term to look up. Must be a focused string.\n\n[3] send_email\n  Description: Composes and sends an email to a recipient.\n  Parameters:\n    - to (str): The email address of the recipient.\n    - subject (str): The subject line of the email.\n    - body (str): The main content of the email.\n</code></pre></div><p><strong>The Crucial Link to Your Blacksmithing Skills:</strong>\nHow does the agent provide these parameters? This is where your skill in  becomes critical. As we covered in our guide, <a href=\"https://pocketflow.substack.com/p/structured-output-for-beginners-3\" rel=\"noopener noreferrer\">Structured Output for Beginners</a>, you must instruct the LLM to format its response in a structured way (like YAML or JSON) so your program can easily parse the action  its parameters.</p><p>Without this skill, you've given your agent a powerful bow but no way to nock an arrow.</p><h3><strong>Level 3: The Spellbook of Creation (The Programmable Action)</strong></h3><p>This is the ultimate weapon: a spellbook that doesn't contain a list of spells but teaches the agent how to . These are  where the agent generates code or complex instructions on the fly.</p><p>This gives the agent god-like flexibility to solve novel problems you never explicitly trained it for.</p><p>\nAn action like  or .</p><p><strong>In the Arsenal (Prompt Description):</strong></p><div><pre><code>[4] execute_sql\n  Description: Write and run a SQL query against the company's sales database. The database contains tables named 'customers', 'orders', and 'products'.\n  Parameters:\n    - sql_query (str): A valid SQL query string to execute.\n\n[5] run_python_code\n  Description: Write and execute a sandboxed Python script for complex calculations, data manipulation, or interacting with APIs.\n  Parameters:\n    - code (str): A string containing the Python code to run.\n</code></pre></div><p>\nA spellbook is the most powerful weapon in your arsenal, but it's also the most dangerous.</p><ul><li> Your agent can solve almost any problem that can be expressed in code. It's no longer limited to pre-defined tools.</li><li> It's much more likely to make a mistake (e.g., writing buggy code). More importantly, it opens up massive security risks if not handled carefully (e.g., executing malicious code like <code>os.remove(\"important_file.txt\")</code>). Always run such code in a secure, sandboxed environment.</li></ul><p>Mastering these three tiers allows you to build a balanced and effective arsenal, equipping your agent for any challenge it might face.</p><h2><strong>Forging the Perfect Arsenal: 3 Golden Rules for Your Weapon Inventory</strong></h2><p>A legendary warrior doesn't just carry a random assortment of weapons. Their arsenal is carefully curated‚Äîeach item is perfectly crafted, serves a distinct purpose, and is instantly accessible. As the master blacksmith for your agent, you must apply the same discipline. Here are the three golden rules for forging a world-class action space.</p><h3><strong>Golden Rule #1: Engrave a Crystal-Clear User Manual (Clarity is King)</strong></h3><p>The descriptions for your actions and their parameters are not notes for yourself; they are the . If the manual is vague, the LLM will misuse the tool. Be painfully, relentlessly explicit.</p><p><strong>A Dull Blade (Bad Description):</strong></p><div><pre><code>search: searches for stuff\n</code></pre></div><p>The agent sees this and thinks, \"What stuff? How? What do I provide?\" The result is a wild guess, like <code>search(query=\"who won the 2024 Nobel Prize in Physics and what were their contributions in detail and also list prior winners\")</code>, a query too broad to be effective.</p><p><strong>A Sharpened Katana (Good Description):</strong></p><div><pre><code>search_web(query: str):\n  Description: Searches the public internet for up-to-date information on a single, specific topic. Returns the top 5 text snippets.\n  Parameters:\n    - query (str): A simple and focused search query, typically 3-5 words long.\n</code></pre></div><p>Now the agent understands its constraints. It knows the tool is for  and the query should be . It will correctly generate a command like <code>search_web(query: \"2024 Nobel Prize Physics winner\")</code>, leading to a much better outcome.</p><h3><strong>Golden Rule #2: Don't Burden Your Warrior with a Junk Drawer (Keep it Concise)</strong></h3><p>A warrior grabbing a weapon in the heat of battle can't afford to sift through a hundred options. They need a small, elite set of choices. Overwhelming the LLM with too many actions leads to confusion, slower decision-making (more tokens to process), and a higher chance of picking the wrong tool.</p><blockquote><p><strong>The Blacksmith's Guideline:</strong> An arsenal of <strong>10 weapons is formidable. An arsenal of 100 is a junk drawer.</strong></p></blockquote><p>If your action space is growing too large, it's a sign that your tools are too granular. Instead of creating , , and , forge a single, more powerful weapon: . Your code can handle the internal logic of parsing different file types. Keep the agent's choices clean and high-level.</p><h3><strong>Golden Rule #3: Make Every Weapon Unique (Slay Redundancy)</strong></h3><p>Every weapon in the arsenal should have a unique purpose. If the agent has two tools that do similar things, it will get confused about which one to use. This is called a lack of \"orthogonality.\"</p><p><strong>The Confusing Arsenal (Bad Design):</strong></p><ul><li><code>read_csv_from_disk(file_path: str)</code>: Reads customer data from a local CSV file.</li><li>: Queries the live customer database.</li></ul><p>The agent is asked to \"find the total sales for new customers from this quarter.\" Which tool should it use? The data might be in the CSV, or it might be in the database. The agent doesn't know and might make the wrong choice.</p><p><strong>The Pro-Gamer Move: Simplify the Battlefield</strong>\nA true master blacksmith doesn't just forge weapons; they shape the battlefield to their advantage. Instead of giving the agent two ambiguous tools, do the work for it behind the scenes.</p><p><strong>The Decisive Arsenal (Good Design):</strong>\nBefore the agent even starts, run a script that <strong>loads the CSV data into a temporary table in the database.</strong></p><p>Now, the agent's arsenal is clean and unambiguous:</p><ul><li>: Queries the customer database, which contains all known customer data.</li></ul><p>The ambiguity is gone. The agent has one, and only one, tool for retrieving customer data. You've eliminated redundancy and made the agent's decision trivial, guaranteeing it makes the right choice every time.</p><h2><strong>Conclusion: An Agent is Only as Sharp as its Arsenal</strong></h2><p>And so, the secrets of the forge are yours. You now understand that the true power of an LLM agent doesn't come from some mysterious, hidden algorithm. It comes from the thoughtful, disciplined, and creative process of crafting its .</p><p>You've learned that agents are just warriors in a , making decisions based on a prompt that serves as their battle plan. And you've seen how to stock their arsenal for any challenge:</p><ul><li>  With  for quick, decisive commands.</li><li>  With  for precise, targeted actions.</li><li>  With reality-bending  for ultimate flexibility.</li></ul><p>Most importantly, you now hold the three golden rules of the master blacksmith:</p><ol><li> Your descriptions are the agent's guide to victory.</li><li> A curated, concise arsenal is deadlier than a cluttered one.</li><li> Make every weapon unique to ensure the agent never hesitates.</li></ol><p>The next time you see a complex agent framework with thousands of lines of code, you won't be intimidated. You'll know to look past the noise and ask the fundamental questions: \"What's in the arsenal? How is it described? Is it sharp, concise, and unique?\"</p><p>Armed with this knowledge, you are no longer just a coder; you are an . You have the power to forge not just tools, but intelligent, reliable, and effective digital warriors.</p><p><em>Ready to light the forge? Dive into the code and explore these principles in action by checking out <a href=\"https://github.com/the-pocket/PocketFlow\" rel=\"noopener noreferrer\">PocketFlow on GitHub</a>!</em></p>","contentLength":12969,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"python development","url":"https://dev.to/puneet_sharma_0399767e2bf/python-development-1f2h","date":1751342527,"author":"Puneet Sharma","guid":177141,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Learn These 6 Data Structures in a Week (With Practice Problems and Code)","url":"https://dev.to/oluwawunmiadesewa/learn-these-6-data-structures-in-a-week-with-practice-problems-and-code-1jc8","date":1751341731,"author":"Oluwawunmi Adesewa","guid":177140,"unread":true,"content":"<p>Can you really learn data structures in 7 days? Yes, if you focus on the right ones and use targeted practice. This guide breaks down the six most important data structures for beginner developers, with daily goals, real Python code, and hand-picked problems from LeetCode and HackerRank.</p><ul><li>Why Learn Data Structures First?</li><li>What You‚Äôll Learn in 7 Days</li><li>Frequently Asked Questions</li></ul><h2>\n  \n  \n  Why Learn Data Structures First?\n</h2><p>If you're preparing for coding interviews, struggling to debug slow code, or trying to build real-world projects, learning data structures (DSA) is non-negotiable.</p><p>Here‚Äôs why developers search for \"how to learn DSA fast\":</p><ul><li>Data structures are core to passing FAANG-style interviews</li><li>They help you write faster, more memory-efficient code</li><li>They're the foundation for real systems like compilers, frameworks, and databases</li><li>Even frontend developers need them to handle things like UI trees, state management, and algorithm-heavy features</li></ul><ul><li>Anyone learning programming who skipped CS theory</li></ul><p>It‚Äôs designed for clarity, focus, and results in one week.</p><h2>\n  \n  \n  What You‚Äôll Learn in 7 Days\n</h2><div><table><thead><tr></tr></thead><tbody><tr><td>Indexing, memory layout, subarrays</td></tr><tr><td>Pointers, nodes, reverse lists</td></tr><tr><td>LIFO, FIFO, scheduling logic</td></tr><tr></tr><tr><td>Traversal, recursion, BST logic</td></tr><tr></tr><tr><td>Practice, recall, mini project</td></tr></tbody></table></div><h2>\n  \n  \n  Day 1 ‚Äì Arrays and Strings\n</h2><p>: Understand memory layout, indexing, and basic operations.</p><ul><li>Immutability (for strings in most languages)</li></ul><div><pre><code></code></pre></div><p>: Learn how to manage nodes and pointers.</p><ul><li>Insertion/deletion at head/tail</li><li>Singly vs doubly linked lists</li></ul><div><pre><code></code></pre></div><h2>\n  \n  \n  Day 3 ‚Äì Stacks and Queues\n</h2><p>: Understand LIFO vs FIFO logic and when to use each.</p><ul><li>Use cases: undo systems, scheduling, recursion</li></ul><div><pre><code></code></pre></div><p>: Learn how to store key-value pairs with fast lookups.</p><ul></ul><div><pre><code></code></pre></div><p>: Understand hierarchical data and recursive traversal.</p><ul><li>Binary Tree vs Binary Search Tree (BST)</li><li>Preorder, Inorder, Postorder</li><li>Recursion in traversal logic</li></ul><div><pre><code></code></pre></div><p>: Learn how to represent and traverse networked data.</p><ul><li>Graph search and connectivity</li></ul><div><pre><code></code></pre></div><ul><li>Revisit questions you got wrong or skipped</li><li>Draw structures from memory: arrays, trees, linked lists</li><li>Build 1 mini project: postfix calculator or CLI parser</li><li>Reflect: what confused you, and what became clear?</li></ul><h2>\n  \n  \n  Frequently Asked Questions\n</h2><h3>\n  \n  \n  What is the best order to learn data structures?\n</h3><p>Start with arrays and linked lists, then stacks/queues, then hash maps, followed by trees and graphs. That‚Äôs the order used in most developer job prep tracks.</p><h3>\n  \n  \n  Do frontend developers need to learn data structures?\n</h3><p>Yes. You‚Äôll use trees for UI rendering, hash maps for state updates, and stacks/queues for undo features and async tasks.</p><h3>\n  \n  \n  How much DSA do I need to know for interviews?\n</h3><p>For most junior-to-mid roles, you‚Äôll need to master arrays, hash maps, linked lists, trees, and recursion. Graphs are optional unless you‚Äôre interviewing at big tech or for algorithm-heavy roles.</p><h3>\n  \n  \n  Which programming language is best for learning data structures?\n</h3><p>Python is beginner-friendly and clear. Java, C++, and JavaScript also work ‚Äî but pick one and stick with it for consistency.</p><h3>\n  \n  \n  Should I learn data structures before algorithms?\n</h3><p>Yes. Algorithms  data structures. You can‚Äôt implement binary search or DFS if you don‚Äôt know how arrays or graphs work.</p><ul><li>Code every day, don‚Äôt just read</li><li>Sketch by hand, especially for trees and graphs</li><li>One language only, avoid switching mid-practice</li><li>If stuck &gt;15 minutes, review the concept, not the solution</li></ul><p><em>If this helped, I‚Äôve got more like it. Tools, tips, and honest takes on dev workflow. Follow here or on X to catch the next one.</em></p>","contentLength":3505,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üåæBeginner-Friendly Guide to \"Find the Original Typed String I\" - LeetCode 3330 (C++ | Python | JavaScript)","url":"https://dev.to/om_shree_0709/beginner-friendly-guide-to-find-the-original-typed-string-i-leetcode-3330-c-python--3d0b","date":1751336098,"author":"Om Shree","guid":177090,"unread":true,"content":"<p>Imagine typing a string and accidentally pressing a key a little too long... maybe once. That‚Äôs what this problem is all about! In LeetCode 3330, we explore how to compute the number of possible  that Alice might have intended to type, assuming she may have held one key too long just once.</p><p>Let‚Äôs break it down in a clean and simple way. ‚úÖ</p><ul><li>A string  representing the final output after Alice‚Äôs typing (which may include ).</li></ul><ul><li>Return the total number of <strong>distinct original strings</strong> Alice might have meant to type.</li></ul><p>A valid original string can be obtained by deleting  from a group of repeated characters.</p><p>For every group of repeated characters, Alice  have held that key down too long. So for each such group:</p><ul><li>If the current character is the  as the previous one, then <strong>we could consider that extra character a mistake</strong>.</li></ul><p>Thus, each such repeat character gives us an <strong>extra valid original string possibility</strong>.</p><ol><li>Start with an answer initialized to 1 (the word itself is always valid).</li><li>Traverse the string from the second character onward.</li><li>Each time the current character matches the previous one, it represents an opportunity where a character might have been held too long.</li><li>For each such case, increment your count.</li></ol><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><ul><li>At most  might have been inserted due to a long press.</li><li>Only consecutive repeated characters matter.</li><li>Time complexity:  where  is the length of the string.</li></ul><p>This problem is a great exercise in pattern recognition and linear string traversal. If you're comfortable with character comparisons and edge cases like off-by-one errors, you‚Äôll find this one a breeze.</p><p>Keep up the great work ‚Äî and remember, even Alice has typing troubles sometimes! üòÑ</p>","contentLength":1642,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Seth Michael Larson: Hand-drawn QR codes","url":"https://sethmlarson.dev/hand-drawn-qr-codes?utm_campaign=rss","date":1751328000,"author":"","guid":178928,"unread":true,"content":"<p>I knew what I wanted to do, I wanted to create a QR code on a sheet.\nThe smallest QR code (besides micro QR codes) is \"version 1\" which uses 21x21 pixels.\nWe'll have to split the squares in half and then use some of the margin.</p><p>Version 1 QR codes can hold URLs up to 17 bytes long using the lowest\ndata quality setting. Unfortunately  is 23 bytes\nlong, so I'll have to improvise. I went with  instead, as this\nwill prompt many QR code scanners to \"search\" for the term resulting in my website.</p><blockquote><p>Note that a lovely reader <a href=\"https://mastodon.social/@joshix@fosspri.de/114778118868222197\">informed me</a> shortly after publication that indeed\n  I can include my full domain name in a version 1 QR code by using all capital\n  letters instead of lowercase. TIL that the \"alphanumeric\" character set for QR\n  codes actually contains symbols for URLs like  and .</p><p>Expect an updated QR code published after lunch today. :)</p></blockquote><p>I created my reference using the <a href=\"https://pypi.org/project/qrcode/\"> package</a> on the Python Package Index. Don't forget\nthe  option with  to not include a trailing newline.</p><pre><code>$ echo -n \"HTTPS://SETHMLARSON.DEV\" | qr --error-correction=L\n</code></pre><p>I drew the corner squares (known as \"position patterns\") and then started trying\nto scan the QR code as a gradually filled in other pixels. Once I had drawn the\n\"timing lines\" between the top left and bottom left position I could\nsee that my scanner \"wanted\" to see something in my drawing.</p><p>I continued adding the top timing line and data and then the scanner could\nstart to see the whole square as a QR code. If you look closely I even\nmade a mistake here in the data a bit, but in the end this didn't matter\neven on the lowest error-correction level.</p><p>Finally, my QR code was complete! Scanning the QR code was quite finicky because\nthe paper was curling up off the flat surface. I could only get the scan to work\nwhen I held the paper flat. However, hanging the QR code from my monitor worked\nextremely well, even when scanning from a distance.</p><p>I hope this inspires you to try hand-drawing something on grid paper üñ§ü§ç\nIf you're looking for more grid-based inspiration, take a look at <a href=\"https://alex.miller.garden/grid-world/\">GRID WORLD</a>, a web art piece by Alexander Miller.</p>","contentLength":2074,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Try Pandemonium: A Real-Time COVID Risk App that needs your feedback","url":"https://dev.to/quantumriskanalytics/try-pandemonium-a-real-time-covid-risk-app-that-needs-your-feedback-3bc8","date":1751327517,"author":"Quantum Risk Analytics, Inc","guid":177006,"unread":true,"content":"<p>Be Part of the Future of Public Health with Pandemonium</p><p>The time to act is now. We‚Äôre testing Pandemonium, a revolutionary app designed to predict and reduce the spread of COVID-19 and assess disease risk in real time. With cutting-edge modeling and dynamic data, you can help transform how the world prepares for future pandemics.</p><ul><li>Answer a few quick questions before and after using the app</li><li>Help shape a tool that could save lives and empower communities</li><li>Why is Pandemonium so powerful?</li><li>Personalized: Get risk estimates tailored specifically to your profile</li><li>Localized: Understand real-time threats in your own community</li><li>Easy to use: An intuitive interface designed for everyone</li></ul><p>Try it now and be part of the change!</p><p>Your feedback will make a real difference.</p><p>Together, let‚Äôs build a more resilient, data-driven future.\nLet‚Äôs fight pandemics smarter‚Äîwith Pandemonium</p>","contentLength":864,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Develop AI with Retrieval-Augmented Generation (RAG)","url":"https://dev.to/godinhojoao/how-to-develop-ai-with-retrieval-augmented-generation-rag-4ib6","date":1751327244,"author":"Jo√£o Godinho","guid":177005,"unread":true,"content":"<p>This guide explains what RAG is, the main steps to develop a RAG system, practical use cases, and a simple example of how to implement it in Python.</p><ul><li>2. Steps to Develop a RAG Strategy</li><li>4. How to Develop It (Example Python Code)</li><li>5. Improving the Code for Better Production Results</li></ul><ul><li>Retrieval-Augmented Generation (RAG) is a method that combines a  with a <strong>generative language model</strong>.</li><li>Instead of relying solely on the model‚Äôs internal knowledge, it retrieves relevant information from an external document collection or knowledge base at inference time.</li><li>This lets the model generate more accurate, context-aware answers grounded in actual data.</li><li>The model's weights are  ‚Äî it uses external data during the answer generation step.</li></ul><h2>\n  \n  \n  2. Steps to Develop a RAG Strategy\n</h2><ol><li> Collect and preprocess your text data (PDFs, docs, etc.).</li><li><strong>Split documents into chunks:</strong> Break long texts into smaller pieces for efficient retrieval.</li><li> Convert text chunks into vector embeddings using a sentence transformer model.</li><li> Use a vector database (e.g., FAISS) to store embeddings for fast similarity search.</li><li> Embed the user‚Äôs question and search for the most relevant document chunks.</li><li> Combine retrieved documents and the user query into a prompt.</li><li> Pass the prompt to a language model to produce a grounded response.</li></ol><ul><li> Answer questions from product manuals and FAQs.</li><li> Summarize academic papers or technical documents.</li><li> Provide information based on legal texts or regulations.</li><li> Answer questions from textbooks or course materials.</li><li> Query company documents, reports, or internal wikis.</li></ul><h2>\n  \n  \n  4. How to Develop It (Example Python Code)\n</h2><h3>\n  \n  \n  Creating the embeddings of the PDF and storing on FAISS Vector DB locally\n</h3><div><pre><code></code></pre></div><h3>\n  \n  \n  Sending embeddings context to AI model for RAG\n</h3><ul><li>Once we have the embeddings saved and indexed in FAISS, we can use them to answer user questions more accurately. That‚Äôs what we‚Äôre doing here.</li><li>The function  contains a RAG pipeline that:\n\n<ul><li>1. Loads the local FAISS vector store.</li><li>2. Finds the most relevant chunks based on the user query.</li><li>3. Builds a clean prompt that includes the context and the question.</li><li>4. Sends the prompt to a language model (like Phi-2) via an API.</li><li>5. Gets back a contextualized answer based only on the document content.</li></ul></li></ul><div><pre><code></code></pre></div><h2>\n  \n  \n  5. Improving the Code for Better Production Results\n</h2><ul><li><strong>Use stronger language models:</strong> Upgrade to larger or more capable models (e.g., GPT-4, Claude, or other state-of-the-art LLMs) to get more accurate and coherent answers.</li><li><strong>Improve embedding quality:</strong> Use more powerful embedding models like <code>sentence-transformers/all-mpnet-base-v2</code> or OpenAI‚Äôs embeddings, which can capture semantic meaning better than smaller models.</li><li> Use more scalable vector databases such as Pinecone, Weaviate, or Elasticsearch for handling larger datasets with faster retrieval times.</li><li><strong>Context window management:</strong> Implement smarter chunking, token budget management, or retrieval filtering to keep prompts concise but informative.</li><li><strong>Caching and indexing strategies:</strong> Use caching for repeated queries and incremental index updates to improve speed and freshness.</li><li><strong>Monitoring and evaluation:</strong> Continuously monitor output quality and user feedback to identify weaknesses and improve iteratively.</li></ul><p>These steps help make the RAG system more robust, scalable, and suitable for real-world production use cases.</p>","contentLength":3294,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (10)","url":"https://dev.to/hyperkai/string-in-python-10-2p88","date":1751326845,"author":"Super Kai (Kazuya Ito)","guid":177004,"unread":true,"content":"<p><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.center\" rel=\"noopener noreferrer\">center()</a> can center the string set  as shown below:</p><ul><li>The 1st argument is (Required-Type:):\n*Memos:\n\n<ul><li>It decides the width of a string.</li></ul></li><li>The 2nd argument is (Optional-Defualt:-Type:):\n*Memos:\n\n<ul><li>It's the character added to the left and right side of the string set .</li><li>It must be one character.</li></ul></li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.ljust\" rel=\"noopener noreferrer\">ljust()</a> can left-justify the string set  as shown below:</p><ul><li>The 1st argument is (Required-Type:):\n*Memos:\n\n<ul><li>It decides the width of a string.</li></ul></li><li>The 2nd argument is (Optional-Defualt:-Type:):\n*Memos:\n\n<ul><li>It's the character added to the right side of the string set .</li><li>It must be one character.</li></ul></li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.rjust\" rel=\"noopener noreferrer\">rjust()</a> can right-justify the string set  as shown below:</p><ul><li>The 1st argument is (Required-Type:):\n*Memos:\n\n<ul><li>It decides the width of a string.</li></ul></li><li>The 2nd argument is (Optional-Defualt:-Type:):\n*Memos:\n\n<ul><li>It's the character added to the left side of the string set .</li><li>It must be one character.</li></ul></li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div>","contentLength":841,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A DeepChat analysis about my P = NP practical proof: After extensive analysis, no counterexample was found that violates the sqrt(n)-approximation. The algorithm consistently produces an independent set of size at least OPT/sqrt(n) in all tested scenarios","url":"https://dev.to/frank_vega_987689489099bf/heres-the-deepchat-analysis-about-my-p-np-practical-proof--53a8","date":1751315857,"author":"Frank Vega","guid":176913,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üö´ Tired of typing --version commands every time you switch projects or machines?","url":"https://dev.to/til0r/tired-of-typing-version-commands-every-time-you-switch-projects-or-machines-1617","date":1751315159,"author":"≈£…®‚Ñì‡πè—è","guid":176912,"unread":true,"content":"<p>I was too. And honestly, it started driving me crazy.</p><p>Every time I needed to check which tools I had installed ‚Äî Node, Python, Docker, Git, Java, TypeScript, you name it ‚Äî I‚Äôd open a terminal and type command after command‚Ä¶ just to answer the same questions over and over.</p><p>So I built something simple that solved it for me (and maybe for you too).</p><p>‚úÖ System Versions Explorer is a lightweight Visual Studio Code extension that automatically detects and displays the versions of your dev tools ‚Äî directly in the Explorer sidebar. No terminal, no guesswork.</p><p>üîÑ Just open VS Code, and you‚Äôll instantly see which tools are available and what versions you have installed. Click once to refresh. That‚Äôs it.</p><p>I‚Äôd love your feedback ‚ù§Ô∏è and feel free to suggest tools to support next!</p>","contentLength":792,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python, She‚Äôs a Quirky Lady ‚Äî A Beginner‚Äôs Guide for JavaScript Developers","url":"https://dev.to/azimlovesprogramming/python-shes-a-quirky-lady-a-beginners-guide-for-javascript-developers-5f1c","date":1751314380,"author":"Azim Annayev","guid":176911,"unread":true,"content":"<p>Ever wonder why Python is the second go-to language for so many programmers? Because it's literally everywhere.</p><p>Python is used in web development, data science, machine learning, automation, and even artificial intelligence. But what is most appealing ‚Äî especially for new developers ‚Äî is how readable it is. The syntax is simple, the learning curve isn't so rough, and some people even joke that it feels like writing in plain English.</p><p>I started learning JavaScript about ten months ago. Once I honed my fundamentals in JavaScript, I wanted to learn a language that would open more doors and expand my horizon in tech beyond web development. Python kept coming up in conversations ‚Äî not just because it's powerful, but because people actually enjoy using it.</p><h3>\n  \n  \n  Indentation and Variables\n</h3><p>Right off the bat, two things will blow your mind about Python ‚Äî especially if you're coming from JavaScript.</p><p>First, Python uses indentation (whitespace) to define code blocks, rather than curly braces  like in JavaScript and many other languages. That means spacing of your code is very important.</p><div><pre><code></code></pre></div><p>Compare that to JavaScript:</p><div><pre><code></code></pre></div><p>In Python, there's no need for  ‚Äî the indentation is the structure.</p><p>Another surprising quirk is how variables are declared. Python doesn't require keywords like , , or . You just write the variable name and assign a value.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>There's no need to specify types or use extra keywords ‚Äî Python figures it out for you.</p><p>Lists in Python are similar to arrays in JavaScript ‚Äî they can hold multiple values, are ordered, and are mutable (you can change them).</p><p>They have a very similar syntax, except that:</p><ul><li>Python typically uses  to declare variables and JavaScript uses .\n</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Python also introduces another built-in data structure called . At first glance, tuples look a lot like lists ‚Äî they can store an ordered collection of elements ‚Äî but they come with a few key differences:</p><ul><li>Tuples are  ‚Äî meaning once created, their values cannot be changed.</li><li><strong>More memory-efficient and faster</strong> than lists, especially for large, fixed data sets.\n</li></ul><div><pre><code></code></pre></div><p>Without the comma, Python will treat it as a plain string or number.</p><p>Python has a useful set of built-in methods you can use on lists and tuples. List methods such as , , , , , etc., allow efficient ways to manipulate and interact with data.</p><div><pre><code></code></pre></div><p>Tuples can also be used in real-world scenarios like coordinates or color values - places where you need fixed, unchanging data:</p><div><pre><code></code></pre></div><p>Read more about <a href=\"https://www.w3schools.com/python/python_ref_list.asp\" rel=\"noopener noreferrer\">here</a>.</p><p>Tuples have fewer methods: mainly  and .</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Conditional Statements and Logical Operators\n</h3><p>Python uses  to handle conditional logic.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Logical operators in Python:</p><ul><li> means both conditions must be true.</li><li> means at least one must be true.</li><li> inverts the truth value.\n</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h3>\n  \n  \n  For Loop and List Comprehension\n</h3><p>Python's  loops are super clean:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>List comprehensions let you build lists in a single line:</p><div><pre><code></code></pre></div><p>Try it yourself: Write a list comprehension that returns all even numbers from 0 to 20.</p><h3>\n  \n  \n  Functions and Lambda Functions\n</h3><p>Python functions use the  keyword:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Lambda functions are one-liner anonymous functions:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>You‚Äôll often see lambdas used in sorting, mapping, or filtering lists.</p><div><pre><code></code></pre></div><p>While Python has a lot going for it ‚Äî especially its simplicity and readability ‚Äî it's not without tradeoffs.</p><ul><li>Python tends to run slower than JavaScript in browser-based environments.</li><li>It's not the best fit for mobile app development.</li><li>And because it's dynamically typed, it can lead to unexpected bugs if you're not careful with types.</li></ul><p>But in many cases, these drawbacks are outweighed by Python's ease of use, massive ecosystem, and wide range of applications ‚Äî especially in data science and automation.</p><p>As with any language, it's about choosing the right tool for the job.</p><p>This blog isn‚Äôt meant to cover  about Python ‚Äî instead, it‚Äôs a reflection of what stood out to me as a JavaScript developer learning Python for the first time. These are the things I found quirky, interesting, and surprisingly smooth to work with ‚Äî like list comprehensions, lambda functions, and Python‚Äôs indentation-based style.</p><p>There‚Äôs still  to explore in Python: Modules, Dictionaries, Classes and Object-Oriented Programming, File handling, Error handling‚Ä¶ the list goes on.</p><p>I‚Äôm still learning, and I plan to write more as I go deeper. But if you‚Äôre curious and want to keep exploring, here are some  that have helped me:</p><ul><li><p><a href=\"https://docs.python.org/3/\" rel=\"noopener noreferrer\"></a> ‚Äî The most accurate and comprehensive reference for Python syntax, features, and standard library modules. A bit dense, but essential for in-depth learning.</p></li><li><p><a href=\"https://www.codecademy.com/enrolled/courses/learn-python-3\" rel=\"noopener noreferrer\"></a> ‚Äî Interactive lessons with a built-in coding environment. Excellent if you prefer to learn by doing.</p></li></ul><p>Thanks for reading ‚Äî and if you‚Äôre learning Python too, I‚Äôd love to hear what surprised or confused  the most. Let‚Äôs keep building and getting better together!</p>","contentLength":4754,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Force Make migrations in Django","url":"https://dev.to/msnmongare/force-make-migrations-in-django-4nf7","date":1751313894,"author":"Sospeter Mong'are","guid":176910,"unread":true,"content":"<p>In Django, there's  for , but here are <strong>equivalent ways to forcefully regenerate migrations</strong>:</p><h3>\n  \n  \n  ‚úÖ Option 1: <strong>Delete old migrations, then regenerate</strong></h3><p>This is the cleanest way to \"force\" new migrations:</p><h4>\n  \n  \n  Step 1: Delete existing migration files\n</h4><p>For example, for the app :</p><div><pre><code>find fundraiser/migrations/ </code></pre></div><p>Repeat for other apps (, , etc.).</p><div><pre><code>find fundraiser/migrations/  f </code></pre></div><h4>\n  \n  \n  Step 2: Re-run </h4><div><pre><code>python manage.py makemigrations\n</code></pre></div><p>Now Django will re-scan all models and generate fresh migrations .</p><h3>\n  \n  \n  ‚úÖ Option 2: Use  if you just need a placeholder\n</h3><div><pre><code>python manage.py makemigrations fundraiser </code></pre></div><p>This doesn't inspect models, but gives you a blank migration file to edit manually (useful when Django doesn't detect changes).</p><h3>\n  \n  \n  ‚úÖ Option 3: Fake a clean slate\n</h3><p>If you've already reset the database manually (e.g., dropped tables), and want Django to \"believe\" everything is in sync:</p><div><pre><code>python manage.py migrate </code></pre></div><div><pre><code>python manage.py migrate appname zero \npython manage.py migrate appname </code></pre></div><ul><li>Forcing migrations .</li><li>Only do this if you're in development or know how to handle schema/data resets.</li></ul>","contentLength":1080,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üöÄ Day 1: My React Native Journey Begins!","url":"https://dev.to/bonheurne/day-1-my-react-native-journey-begins-5gno","date":1751313335,"author":"Ndeze Bonheur Emmanuel","guid":176909,"unread":true,"content":"<h4>\n  \n  \n  Today, I officially began my React Native learning journey. I‚Äôll be sharing everything I learn day-by-day as I build real-world mobile apps ‚Äî from setup to publishing. This is Day 1, and here‚Äôs what I did:\n</h4><ul><li>Created a new React Native app using <a href=\"https://expo.dev/\" rel=\"noopener noreferrer\">Expo</a> with TypeScript.</li><li>Initialized a GitHub repo to track progress.</li><li>Built my first screen: a simple  that shows a welcome message.</li><li>Committed everything to <a href=\"https://github.com/bonheurNE07/my-first-react-native-app.git\" rel=\"noopener noreferrer\">GitHub</a>.</li><li>Took my first screenshot of the app running on my Android device.</li></ul><ul><li>How to scaffold a project using Expo CLI.</li><li>Folder structure for a clean React Native project.</li><li>How to style components using .</li></ul><p>Tomorrow (Day 2), I‚Äôll start setting up  so I can move between multiple screens in my app.</p><p> if you want to join me on this full React Native journey. I‚Äôll be posting daily progress and projects!</p>","contentLength":800,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to create an AI ChatBot and flex in front of your dumb friends","url":"https://dev.to/souviktests/how-to-create-an-ai-chatbot-and-flex-in-front-of-your-dumb-friends-d76","date":1751312288,"author":"Souvik Paul","guid":176890,"unread":true,"content":"<p>Today, I'll show you how you can create your very own  that can answer all types of questions, and how you can host it for completely free of cost.</p><p>If you're in college and your friends are dumb, you can flex in front of them.</p><p>Just kidding, not just flex, you can build any type of personal robot that follows your instructions.</p><p>To build this, we need 3 things: a place where we can chat, an LLM API to generate answers and a server to run the chatbot.</p><p><strong>So we use these platforms to build our app:</strong></p><ol><li>Telegram (Telegram Bot API)</li><li>OpenRouter/Krutrim Cloud (LLM API)</li></ol><p>Let's start with Telegram.</p><p>Open Telegram and go to <a href=\"https://telegram.me/BotFather\" rel=\"noopener noreferrer\">@BotFather</a> to create your bot.</p><p>Then, send  to BotFather and write your preferred name and username (the username must include the word 'bot' in it).</p><p>Now, copy the Telegram API Key.</p><p>Now open any code editor where you write Python code, and let's start building the bot.</p><p>Before building the bot, let's grab the main brain. LLM API to generate replies to the messages.</p><p>For this project, I'm using  model. It works well for me in many cases before; you can try playing around with other models.</p><p>With a free OpenRouter account, you can call the API . If you're just playing around, you can use it.</p><p>But if you scale, you can add credits, or if you're from India, you can use  and use the services at scale at a very reasonable price.</p><p>You can find a lot of models there also.</p><p>Ok, now just create an API key on  or  and copy the key.</p><p>Now open the  and install the  package by running <code>!pip install pyTelegramBotAPI</code> command.</p><p>Open your code editor and paste this code.</p><div><pre><code>import telebot\nimport requests\nimport json\n\nAPI_KEY = \"&lt;--TELEGRAM BOT API KEY--&gt;\"\nbot = telebot.TeleBot(API_KEY)\n\ndef start_chat(message):\n  return True\n\n@bot.message_handler(func=start_chat)\ndef chat(message):\n\n  print('Typing...')\n  bot.send_chat_action(chat_id=message.chat.id, action='typing')\n\n  response = requests.post(\n    url=\"https://openrouter.ai/api/v1/chat/completions\",\n    headers={\n      \"Authorization\": \"Bearer &lt;--LLM API KEY--&gt;\",\n      \"Content-Type\": \"application/json\"\n    },\n    data=json.dumps({\n      \"model\": \"qwen/qwen3-32b:free\",\n      \"messages\": [\n        {\n          \"role\": \"user\",\n          \"content\": message.text\n        },\n        {\n            \"role\": \"system\",\n            \"content\": \"You are &lt;--BOT NAME--&gt;, created by &lt;--COMPANY NAME--&gt; at &lt;--COMPANY LOCATION--&gt;, by &lt;--DEVELOPER NAME--&gt;, a smart and friendly AI assistant. Always respond in a short, clear, and to-the-point manner. Avoid unnecessary explanations unless asked. Use simple language. Prioritise helpfulness, speed, and clarity. If unsure, say so briefly.\"\n        }\n      ],\n\n    })\n  )\n  data = response.json()\n  reply = data['choices'][0]['message']['content']\n  reply = reply.replace('**', \"\")\n  bot.send_message(message.chat.id, reply)\n  print('Reply sent to '+message.from_user.first_name)\n\nprint('AI is running...')\n\nbot.infinity_polling()\n</code></pre></div><p>This is the code you need for the bot.</p><p>Change the API keys and system prompt details accordingly. You can also tweak &amp; use different system prompts to do a completely different job as well as I said earlier.</p><p>Make use of updating the  and  according to the service you use.</p><p>By now, if you run the code, you'll find your bot working perfectly fine like this.</p><p>Awesome, now just keep running the server, and when it's running, your bot is also running.</p><p>Now, to run it 24x7, you can deploy the Python code to any cloud VPS server from any of your preferred hosting companies.</p><p>You can also rent  CPU and GPU to run your applications and AI models as well.</p><p>Or if you've an active internet connection in your home, you can use your old Android mobile as a server and it's pretty much do the work pretty well.</p><p>Just download  and run the Python script there.</p><p>If you want to SSH your Termux terminal to your computer for development purposes, you can follow <a href=\"https://youtu.be/52Tf0r_jqXE\" rel=\"noopener noreferrer\">this tutorial</a> from  channel.</p><p>Now connect the phone to the charger, connect to WiFi and just run the Python script.</p><p>Congratulations on your new .</p><p>By now, if your friends think you're cool, give me a treat, bro!</p>","contentLength":4044,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hilarious Guide to Python Libraries: Meet the Machine Learning Family üòÇ","url":"https://dev.to/urvashiagrawaldev/hilarious-guide-to-python-libraries-meet-the-machine-learning-family-4cok","date":1751312219,"author":"Urvashi Agrawal","guid":176889,"unread":true,"content":"<p>üìò CV (Computer Vision) ‚Äî The Memory Book\nCV is like your pre-written diary üìì ‚Äî storing memories, visuals, and moments. It holds the data of your world and helps you build thoughts, predictions, or even recognize your favorite dog filter üê∂.</p><p>üë©‚Äçüëß OpenCV ‚Äî The Super Mom\nShe knows everything.</p><p>How many kids are in the frame (object detection) üßíüëß\nWhat they‚Äôre doing (video processing) üé•<p>\nWhat they secretly like (filters, color detection) üé®</p>\nAnd just like every mom, she‚Äôs open source‚Ä¶ and still tells your dad everything even when you said,</p><p>‚ÄúPlease don‚Äôt tell papa!‚Äù üò©</p><p>üë¥ TensorFlow ‚Äî The Grandfather\nRespected. Predictable. A little strict.<p>\nEveryone in the town knows him. He‚Äôs the backbone of the family and has seen things (like 500-layer neural networks).</p>\nYour dad (Deep Learning üë®) depends on him. And when life gets hard‚Ä¶ you go to Dadaji for advice.</p><p>üßë‚Äçüéì SimpleCV ‚Äî The Curious Student\nThat‚Äôs us ‚Äî the students, tinkerers, and weekend hackers.<p>\nWe‚Äôre building object detection models like science fair projects üéì.</p>\nWe may be open source, but our real power?</p><p>Showing off cool stuff we barely understand üòé</p><p>üë∂ Caffe ‚Äî The Shy Kid\nThis little one doesn‚Äôt like to leave his parents üë©‚Äçüë¶<p>\nBut say ‚ÄúHi üëã‚Äù and he instantly recognizes you ‚Äî face, voice, and all.</p>\nA bit old-school, but he responds exactly how you‚Äôd expect.<p>\nJust‚Ä¶ don‚Äôt ask him to learn new tricks üòÖ</p></p><p>üßë‚Äçüíª PyTorch ‚Äî The Cool Older Sibling\nAlways there for you, fast, flexible, and helpful.\nYou need object detection? ‚úÖ\nConfused by something? He explains it in plain English.</p><p>He‚Äôs the reason you can say:</p><p>‚ÄúBro, I trained a model in one night.‚Äù üî•</p><p>üë∏ Keras ‚Äî The Popular Bestie\nSweet. Simple. And everyone loves her.<p>\nBacked by a massive squad üíÖ, she helps you build neural networks without crying into your keyboard.</p>\nShe‚Äôs got your back in every ML project, and makes you look smart on GitHub üòè</p><p>ü§ì Detectron2 ‚Äî The Nerdy Genius\nYou know that one friend who even corrects the teacher?\nHe detects objects, masks, poses ‚Äî you name it üß†<p>\nIf you‚Äôre stuck, he‚Äôs the backend magician you secretly rely on during hackathons.</p></p><p>üá∫üá∏ Kociemba ‚Äî The Problem Solver President\nNo one knows how he does it, but‚Ä¶<p>\nHe solves problems(this library is used for Rubik‚Äôs Cubes) faster than you can say ‚Äúmachine learning.‚Äù</p>\nHe‚Äôs not flashy, but when you‚Äôre in a jam,</p><p>He saves the day like a true leader. üß©üíº</p><p>üß¢ YOLO ‚Äî The Reckless Genius\nYou Only Look Once.\nOne glance and boom ‚Äî he knows everything.<p>\nHe‚Äôs the YOLO swag guy in your friend circle who says:</p></p><p>‚ÄúWhy overthink? Just detect it all in one go.‚Äù üòéüí•</p>","contentLength":2712,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Using LLMs in 3 lines of Python","url":"https://dev.to/timesurgelabs/using-llms-in-3-lines-of-python-gm1","date":1751311593,"author":"Chandler","guid":176888,"unread":true,"content":"<p>When working with LLMs, the first thing people generally install is the  or  packages, if you‚Äôre a little more adventurous with your LLM choice it may be  or . The issue is that all of these require a bit of code to get your started. For example, assuming you have an API key in your environment like I do, you‚Äôll need at least this code to make an LLM call with OpenAI (also assuming you‚Äôre using the older Chat Completions endpoint).</p><div><pre><code></code></pre></div><p>And if you want to wrap your API call with a function so you can call it repeatedly, that‚Äôs even more lines!</p><div><pre><code></code></pre></div><p>And that is simply unacceptable!</p><p>No, I‚Äôm being facetious. For most LLM projects, consistency of output trumps anything else, however sometimes its nice to have a super simple way to add LLMs to my one-off python scripts and tools without all the boilerplate. </p><p>Magentic is a Python package that lets you create functions that call LLMs in 3 lines of code. No, really! Here‚Äôs an example ripped straight from <a href=\"https://magentic.dev/#usage\" rel=\"noopener noreferrer\">their docs</a>.</p><div><pre><code></code></pre></div><p>Thanks to some black box dark magic that I don‚Äôt feel like learning about, this is a completely valid Python function that‚Äôs callable anywhere in the script, assuming you have an OpenAI API Key in your environment variables.</p><div><pre><code></code></pre></div><h2>\n  \n  \n  A Note On Package Management\n</h2><p>I‚Äôm going to be using the <a href=\"https://peps.python.org/pep-0723/\" rel=\"noopener noreferrer\">PEP 723</a> standard at the top of all my scripts for the rest of this post. This allows you to use <a href=\"https://docs.astral.sh/uv/\" rel=\"noopener noreferrer\">uv</a>, the best package manager for Python, to run the scripts without you having to make a virtual environment, then install packages, then run the script. This automates all three of those tasks into a single command. Here‚Äôs an example.</p><p>Here‚Äôs the above script with the added metadata and some slight modifications. This assumes you have <a href=\"https://docs.astral.sh/uv/#installation\" rel=\"noopener noreferrer\">uv installed</a> and the  env var set.</p><div><pre><code></code></pre></div><p>This script can now be downloaded and ran like an executable. I‚Äôve uploaded to <a href=\"https://gist.github.com/chand1012/218372f3e1101dfa7f915dc35c0e66d8\" rel=\"noopener noreferrer\">a gist</a> for easy download.</p><div><pre><code>wget  dudeify https://gist.githubusercontent.com/chand1012/218372f3e1101dfa7f915dc35c0e66d8/raw/363f720d21fa8ebe2e6a484f6b389496c3452064/dudeify.py\n +x dudeify\n./dudeify </code></pre></div><p>The first time you run the script it‚Äôll handle making a cached virtual environment for the next time you run it! For more information on how this works, you can check out the <a href=\"https://docs.astral.sh/uv/guides/scripts/#using-a-shebang-to-create-an-executable-file\" rel=\"noopener noreferrer\">uv docs</a>, and the <a href=\"https://www.cottongeeks.com/articles/2025-06-24-fun-with-uv-and-pep-723\" rel=\"noopener noreferrer\">blog post</a> that inspired my constant use of this feature.</p><p>If you want to have structured outputs, like for example for an API response or just to make it easier to parse and use the data with your scripts, you can use a <a href=\"https://docs.pydantic.dev/latest/concepts/dataclasses/\" rel=\"noopener noreferrer\">Pydantic Dataclass</a>.</p><div><pre><code></code></pre></div><p>Here‚Äôs an example of that method being ran.</p><h2>\n  \n  \n  Prompting and Function Calls\n</h2><p>There‚Äôs two ways you can prompt the LLM with Magentic. You can either use the  decorator, as I‚Äôve been using, which is the simplest and fastest way to create LLM methods. There‚Äôs also , which allows you to pass a list of chat messages to the LLM. This is especially useful for few-shot prompting, where you give the LLM some examples of what output you want. After all, LLMs  just fancy pattern matching black boxes.</p><div><pre><code></code></pre></div><p>You can also pass <a href=\"https://magentic.dev/#functioncall\" rel=\"noopener noreferrer\">function calls to LLMs</a> to allow them to return a python callable that you can call later. Another use of this is the decorator  which allows you to have an LLM call a function and use the returned results to generate its response.</p><div><pre><code></code></pre></div><p>If you‚Äôre a data conscious person, or just want your options to be open, Magentic can be configured to work with nearly all other LLMs as long as they are supported by <a href=\"https://github.com/BerriAI/litellm\" rel=\"noopener noreferrer\">LiteLLM</a> or offer an OpenAI compatible API. Here‚Äôs an example of a script that runs entirely locally using <a href=\"https://ollama.com/\" rel=\"noopener noreferrer\">Ollama</a> and <a href=\"https://ollama.com/library/gemma3\" rel=\"noopener noreferrer\">Google‚Äôs Gemma 3</a>.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>You can use the LiteLLM method to use Anthropic‚Äôs Claude series of models, or you can use Magentic‚Äôs official Anthropic extension.</p><div><pre><code></code></pre></div><p>Need an async function? Just prefix with  instead of  !</p><div><pre><code></code></pre></div><p>You can use Python‚Äôs  to make multiple simultaneous calls to the LLM.</p><div><pre><code></code></pre></div><p>Need to stream the response back to the user? Use Magentic‚Äôs  to loop through the response chunks.</p><div><pre><code></code></pre></div><p>This also works for multiple objects, simply wrap your objects in the  class.</p><div><pre><code></code></pre></div><p>Working with LLMs is now easier than ever, and Magnetic makes it even easier than the standard methods to quick add LLMs to any Python script, regardless of the scale of complexity. Using this in tandem with something like uv and the new scripting metadata allows you to quickly make command line tools that can utilize AI quickly and effectively. I won‚Äôt always use Magentic for every project I need an LLM for, but I‚Äôll definitely use it all the time with my small one-offs and utilities.</p>","contentLength":4433,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Set Up a Django Project Structure Using VS Code","url":"https://dev.to/annnab2222/how-to-set-up-a-django-project-structure-using-vs-code-3189","date":1751309721,"author":"Hannah","guid":176859,"unread":true,"content":"<p>If you're just getting started with Django and want to build your project using Visual Studio Code (VS Code), you're in the right place. In this guide, I‚Äôll walk you through setting up a clean Django project structure from scratch using VS Code ‚Äî perfect for beginners and those who want a solid foundation for scalable web apps.\nBefore l dive in, make sure you have the following installed:</p><p>üìÅ Step 1: Create Your Project Folder.\nOpen VS Code and create a new folder;</p><div><pre><code>`mkdir my_django_project\ncd my_django_project\n</code></pre></div><p>after the creating this how they will look like;<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fru74hb754mq61n2l4tcc.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fru74hb754mq61n2l4tcc.png\" alt=\"Image description\" width=\"693\" height=\"1068\"></a></p><p>üß™Step 2: Set Up a Virtual Environment\nVirtual environments are essential in Python development‚Äîespecially for Django projects. Each Python project might require different versions of packages. A virtual environment keeps dependencies isolated so that one project‚Äôs requirements don‚Äôt interfere with another‚Äôs.<p>\nwe need to Create and activate a virtual environment;</p></p><div><pre><code>python -m venv env\n# On Windows\nenv\\Scripts\\activate\n# On macOS/Linux\nsource env/bin/activate\n</code></pre></div><p>üì¶Step 3: Install Django.\nOnce your virtual environment is activated, the next step is to install Django ‚Äî the powerful web framework that will power your project.<p>\nInstall Django using pip;</p></p><p>After install it look like this;</p><p>then after that run the server </p><p>python manage.py runserver</p><p>then it click the link and it brings success of install of django </p><p>üöÄStep 4: Start a New Django Project</p><p>Now create your Django project</p><div><pre><code>`django-admin startproject &lt;project_name&gt;`\n\n</code></pre></div><p><code>\nYour folder structure should now look like this:</code></p><div><pre><code>my_django_project/\n‚îú‚îÄ‚îÄ config/\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îú‚îÄ‚îÄ asgi.py\n‚îÇ   ‚îú‚îÄ‚îÄ settings.py\n‚îÇ   ‚îú‚îÄ‚îÄ urls.py\n‚îÇ   ‚îî‚îÄ‚îÄ wsgi.py\n‚îú‚îÄ‚îÄ manage.py\n‚îî‚îÄ‚îÄ env/\n\n</code></pre></div><p>Step 5: Create a Django App</p><p>Installed the required django apps l used command to create the apps which they were two apps;</p><p>Now your structure will look like this ;</p><p>but for the second app this how structure will look like;</p><p>Each app will have its own views and templates. Here‚Äôs how to link them and display two templates from each.</p><p>\n`blog/\n    ‚îî‚îÄ‚îÄ blog/\n        ‚îî‚îÄ‚îÄ about.html</p><p>portfolio/\n‚îî‚îÄ‚îÄ templates/\n        ‚îú‚îÄ‚îÄ home.html``</p><p>In Django, URLs are how you connect your web browser to specific views in your app. Think of them as the road signs that tell Django which view to display when someone visits a certain page. \nthis how it look like;</p><p>In Django, HTML is used to build the templates that define how your web pages look. These templates are combined with data from your views to create dynamic, interactive websites.</p><p>l added them this how it look liked;</p><p>Now you can run the project and see how it look;</p><p>python manage.py runserver</p><p>this how it will look like;</p><p>In this guide, we walked through the full process of setting up a Django project using Visual Studio Code. Here's a quick recap of what we covered:</p><p>‚úÖ Creating a virtual environment to isolate dependencies</p><p>‚úÖ Installing Django and verifying the installation</p><p>‚úÖ Starting a new Django project and creating multiple apps</p><p>‚úÖ Setting up views, templates, and URL routing for each app</p><p>‚úÖ Understanding how HTML works within Django templates</p><p>Django is incredibly powerful once you get the hang of it‚Äîand the best way to learn is by building.</p><p>Got questions, stuck somewhere, or want to share what you built? Drop a comment below‚ÄîI‚Äôd love to hear from you and help out!</p>","contentLength":3384,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"learn django","url":"https://dev.to/mohammad_fayed_5ad188316a/learn-django-5ap5","date":1751308223,"author":"Mohammad Fayed","guid":176858,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day Four of My Django Bootcamp: Crafting the Structure of My Django Project","url":"https://dev.to/rinnahoyugi/day-four-of-my-django-bootcamp-crafting-the-structure-of-my-django-project-2f0k","date":1751308109,"author":"@rinnah","guid":176857,"unread":true,"content":"<h3>\n  \n  \n  Day Four of My Django Bootcamp: Crafting the Structure of My Django Project\n</h3><p>Today is the fourth day of my Django bootcamp, and it has been an exciting journey so far! I focused on creating and structuring my Django project while learning a lot about apps, templates, and URL configurations. Here‚Äôs a friendly walkthrough of how I accomplished it using Git Bash as my terminal.</p><h4><strong>1. Starting the Django Project</strong> üöÄ\n</h4><p>The first step was to create a new Django project named . This project would serve as the foundation for everything else. Using Git Bash, I navigated to my desired directory and set up a virtual environment:</p><div><pre><code>dijango\ndijango\npython  venv venv\nvenv/bin/activate  \nvenvcriptsctivate   </code></pre></div><p>Next, I installed Django and created the project:</p><div><pre><code>pip django\ndjango-admin startproject dijango </code></pre></div><p>Here‚Äôs what the structure looked like at this point:</p><ul><li>: The project‚Äôs control center.</li><li>: A directory containing core files like , , and others.</li></ul><h4> üõ†Ô∏è\n</h4><p>Django encourages splitting functionality into smaller units called apps. I created two apps,  and , to separate different functionalities:</p><div><pre><code>python manage.py startapp REE1\npython manage.py startapp REE2\n</code></pre></div><p>Each app came with its own files, like  and . To make Django recognize these apps, I added them to the  section in :</p><div><pre><code></code></pre></div><p>Templates define how the front-end of the app looks. Using Git Bash, I created a  directory in the root folder and added subfolders for each app:</p><div><pre><code>templates\ntemplates/REE1\ntemplates/REE2\n</code></pre></div><p>In , I updated the  configuration to include the new directory:</p><div><pre><code></code></pre></div><p>URL configurations connect specific views to URLs. Since Django doesn‚Äôt create  files for apps by default, I manually added them for  and .</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>I then updated the main project‚Äôs  to include these app-specific routes:</p><div><pre><code></code></pre></div><h4><strong>5. Adding Views and Templates</strong> üñºÔ∏è\n</h4><p>In Django, views determine what gets displayed for each URL. I created simple views for both apps:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Next, I added basic HTML templates:</p><p><code>templates/REE1/index.html</code>:</p><div><pre><code>REE1 IndexWelcome to REE1!</code></pre></div><p>:</p><div><pre><code>REE2 HomeWelcome to REE2!</code></pre></div><p>Using Git Bash throughout this process made it easy to execute commands and navigate between directories. As I continue exploring Django, I look forward to building more complex projects and honing my skills. If you‚Äôre on a similar journey, let‚Äôs connect and share our progress!</p>","contentLength":2261,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Come along for 20 days of deep Django learning experience with me","url":"https://dev.to/nyambura20/come-along-for-20-days-of-deep-django-learning-experience-with-me-4efa","date":1751307551,"author":"Sarah Nyambura Kiiru","guid":176856,"unread":true,"content":"<h2>: How I understood and practiced about the structure of Django\n</h2><p>The first thing is to understand what a structure is.</p><p>is the organized way in which parts of something are arranged or built.It helps one to understand where things belong and maintain one's project as it grows helping in collaboration without confusion.</p><p>To be able to have a project structured in the Django style you run the following command to start the project.</p><div><pre><code>django-admin startproject &lt;project_name&gt;\n</code></pre></div><p>This is how the project structure will look like afterwards:</p><div><pre><code>my_project/\n    manage.py \n    my_project/\n</code></pre></div><p> - It is a command-line utility used to runserver, migrations etc (directory with the same name as your project) - This directory contains the project-wide settings and configurations. The files it contained are as below:</p><div><pre><code>my_project/\n    __init__.py\n    settings.py\n    urls.py\n    asgi.py\n\n</code></pre></div><p> - This empty file tells Python to treat the directory as a package. It's necessary for importing files across different modules something you'll do a lot in Django projects. - Contains all the configuration settings for your Django project, such as installed apps, middleware, database settings, static file paths, and more. - Acts as the \"table of contents\" for your site. It defines how URLs are routed to views ‚Äî basically deciding what happens when someone visits a specific page. - Entry point for ASGI (Asynchronous Server Gateway Interface), which allows your Django app to support asynchronous features like WebSockets and background tasks. -     Entry point for WSGI (Web Server Gateway Interface), which helps traditional web servers like Gunicorn or uWSGI serve your Django project. This is what powers your site in most production environments. <a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fwzhy2dc9i4h5qlbz260l.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fwzhy2dc9i4h5qlbz260l.png\" alt=\"start project\" width=\"800\" height=\"449\"></a><strong>Something to note is to ensure you have created a virtual environment in VS code so as to start the django project</strong>\nYou need to run the server so that to make sure the project runs(a rocket like thing will be displayed in the browser to confirm that)</p><div><pre><code>python manage.py runserver\n</code></pre></div><p>In order to get to practice on the django structure I created two applications for my day1 learning of django:  and  apps \nTo be able to create the apps I used:</p><div><pre><code>python manage.py startapp journal\npython manage.py startapp about \n</code></pre></div><p>Each app contains files and a folder which are: - Configuration for the Django admin interface. - Configuration for the app itself. - Contains the database models for the app. - Contains tests for the app. - Contains the request/response logic for the app. - Contains database migrations for the app. </p><p>Then I registered the 2 apps in the  file </p><p>For the 2 apps I created a folder templates for each.</p><p>For the about app the template folder contained an about folder that has an  file</p><p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fu9cfh83mtrc68o43r7wc.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fu9cfh83mtrc68o43r7wc.png\" alt=\"about\" width=\"800\" height=\"449\"></a>\n   For the journal app the template folder contained an journal folder that has an  file</p><p>in the settings.py had to tell Django where to find the template</p><div><pre><code>: BASE_DIR / ,</code></pre></div><p>Then routed the URL so that the templates to be visible in the browser\nI did this by creating file for each app and linking it from  file of each app <a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fyxj9rho4siohqmk2swbg.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fyxj9rho4siohqmk2swbg.png\" alt=\"app1\" width=\"800\" height=\"449\"></a></p><p><strong>For The whole project URL file</strong></p><p>I then started the developer server \nand used this link for me to get results <code>http://127.0.0.1:8000/journal/diary_entries/</code></p><p><code>\nhttp://127.0.0.1:8000/about/about_me/</code></p><p>My project about creating a diary was complete I had some challenges but got through but did not stop me from proceeding.\nThis diary apps enabled me to get to understand how the Django structure works.</p>","contentLength":3409,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Introducing the Three Versions of TextCleaner: free , pro, and Pro Enhanced","url":"https://dev.to/nova_soft_d42c9d58573e2a4/introducing-the-three-versions-of-textcleaner-free-pro-and-pro-enhanced-152h","date":1751306769,"author":"Nova Soft","guid":176827,"unread":true,"content":"<p>I‚Äôm excited to introduce the different versions of TextCleaner, a Python-based desktop tool designed to clean messy text files by removing HTML tags, emojis, weird symbols, and more.</p><p>Here‚Äôs a quick overview of the three editions:</p><p>Removes HTML tags, emojis, and strange characters</p><p>No installation needed ‚Äî just run the .exe</p><p>Includes all Lite features</p><p>Adds advanced cleaning options like regex support</p><p>Allows batch processing of multiple files</p><p>All Standard features plus:</p><p>In-depth text analysis and comparison tools</p><p>Customizable cleaning workflows</p><p>Supports Arabic and multiple languages</p><p>Feel free to try any version that fits your needs! I‚Äôd love to hear your feedback or feature requests.</p>","contentLength":684,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Getting started with Django project","url":"https://dev.to/1303liz/getting-started-with-django-project-3d3m","date":1751306506,"author":"Elizabeth Ng'ang'a","guid":176826,"unread":true,"content":"<p>Django is a robust and versatile Python framework designed to simplify web development. However, how you start your Django project can significantly impact its scalability, maintainability, and performance. This guide provides a comprehensive, step-by-step walkthrough to help you start your Django project the right way, ensuring a solid foundation for success and also tries to explain the project settings and configurations.</p><p>project structure in django is designed to support the Model-View-Template (MVT) architectural pattern, which is Django‚Äôs version of the traditional Model-View-Controller (MVC) framework.</p><p>I created a folder on my desktop to hold my project and named it \"WASTE SOTOR\".</p><p>I create a virtual enviroment, since am on windows i used,</p><p>This creates a folder named env that will store all project-specific Python packages. \nLater i had to activate the enviroment using;</p><p>This is an image after i have created and activated the virtual enviroment it created a folder named env.<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhhpu5izo0plsp7mrnwpq.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhhpu5izo0plsp7mrnwpq.png\" alt=\"env setup\" width=\"800\" height=\"427\"></a></p><p>This is are the folders that are created after installing Django, they are created on the env folder.</p><p>Start a project\nI used this since i wanted my project to be called waste_sorter ;</p><div><pre><code>django-admin startproject waste_sorter </code></pre></div><p>This are the project settings and configurations installed.</p><p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fb0y4r3sclsjnhgu2ths8.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fb0y4r3sclsjnhgu2ths8.png\" alt=\"Image description\" width=\"800\" height=\"423\"></a><strong>checking if my project was working</strong>\nI had to run my project using;</p><div><pre><code>python manage.py runserver\n</code></pre></div><p>follow the link provide and you should see this;</p><p>1.init.py- Makes the folder a Python package .\n2.settings.py-Contains all configurations: database, apps, templates, static files, etc.<p>\n3.urls.py-Controls which page shows whatand also connects URLs to views.</p>\n4.asgi.py-Used for advanced or real-time features and also handles asynchronous requests.<p>\n5.wsgi.py-Used to connect Django to a web server and handles normal (synchronous) requests.</p></p><p>In this case i started my app and i had 2 of them  using  the command;</p><div><pre><code>python manage.py startapp app_name\n</code></pre></div><p>here is an image both apps i created;</p><ol><li>admin.py: Configuration for the Django admin interface.</li><li>apps.py: Configuration for the app itself.</li><li> models.py: Contains the database models for the app.</li><li>tests.py: Contains tests for the app.</li><li>views.py: Contains the request/response logic for the app.</li><li>migrations/: Contains database migrations for the app.\n\nso that my apps could be recognized ,i opened the settings.py and added the apps on the INSTALLED_APPS.</li></ol><h2>\n  \n  \n  writing views and creating urls\n</h2><p>this are the codes that i wrote, i had two since the apps are two;</p><h2>\n  \n  \n  Step 7 created Urls for both apps\n</h2><p>I created new files and made them \"urls.py\" under each app.</p><p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9c1yx0p6olo0fe7hz6hn.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9c1yx0p6olo0fe7hz6hn.png\" alt=\"Image description\" width=\"800\" height=\"231\"></a>\nThis is where i had to join bothof the urls that i created to the main project.<p>\nThis is what it looked like;</p></p><p>Adding Templates \nThis this the folder that shall be kholding all my pages.<p>\nExample of one of my pages ;</p></p><p>Checking if the project is Running ;\ni used the</p><div><pre><code>python manage.py runserver\n</code></pre></div><p>then follow the link to the browser .For me i got this;</p><p>\nStarting a Django project the right way sets the foundation for a scalable, maintainable, and efficient web application.The images and step-by-step instructions demonstrate how each component fits together, from the initial runserver check to rendering dynamic templates. Whether you‚Äôre building a simple app like \"WASTE SOROR\" or a complex system, Django‚Äôs flexibility and structure empower you to focus on functionality rather than boilerplate.</p>","contentLength":3349,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I built a free text cleaning tool to remove emojis, HTML tags, and symbols ‚Äî no install required","url":"https://dev.to/nova_soft_d42c9d58573e2a4/i-built-a-free-text-cleaning-tool-to-remove-emojis-html-tags-and-symbols-no-install-required-5c39","date":1751305594,"author":"Nova Soft","guid":176824,"unread":true,"content":"<p>\nI recently created a small desktop tool called TextCleaner Lite ‚Äì built with Python &amp; Tkinter.<p>\nIt removes HTML tags, emojis, weird characters, and helps clean messy text files fast.</p>\nNo installation needed ‚Äì just download and run the .exe.<p>\nIt‚Äôs completely free and lightweight, and I‚Äôd love your feedback if you try it!</p>\nüîó Link to the tool:     <a href=\"https://novasofting.gumroad.com/l/ncndg\" rel=\"noopener noreferrer\">https://novasofting.gumroad.com/l/ncndg</a>\nüê¶ Original tweet: <a href=\"https://x.com/novasofting/status/1939684199364960467\" rel=\"noopener noreferrer\">https://x.com/novasofting/status/1939684199364960467</a>\nLet me know if there are features you‚Äôd like to see in the next version üëá</p>","contentLength":547,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"**Master Python Concurrency: Threading, Async, and Multiprocessing for Peak Performance**","url":"https://dev.to/aaravjoshi/master-python-concurrency-threading-async-and-multiprocessing-for-peak-performance-56i3","date":1751304304,"author":"Aarav Joshi","guid":176823,"unread":true,"content":"<blockquote><p>As a best-selling author, I invite you to explore my books on <a href=\"https://www.amazon.com/stores/Aarav-Joshi/author/B0DQYNVXZ7?ref=ap_rdr&amp;isDramIntegrated=true&amp;shoppingPortalEnabled=true&amp;ccs_id=738636bd-0ca1-4d7b-8efa-481bfc222571\" rel=\"noopener noreferrer\">Amazon</a>. Don't forget to follow me on <a href=\"https://medium.com/@aarav-joshi\" rel=\"noopener noreferrer\">Medium</a> and show your support. Thank you! Your support means the world! </p></blockquote><p>Python's concurrency and parallelism capabilities transform how we handle modern computing challenges. When applications slow down during network calls or intensive calculations, I implement these strategies to optimize performance. Let me share practical approaches that work effectively in production environments.</p><p>Thread pools excel when dealing with multiple I/O operations. I often use them for web scraping or file processing tasks. The  module simplifies managing worker threads:</p><div><pre><code></code></pre></div><p>For CPU-intensive workloads like mathematical computations, process pools bypass Python's Global Interpreter Lock. I recently used this for data preprocessing:</p><div><pre><code></code></pre></div><p>Asynchronous I/O revolutionized how I build network services. The  framework handles thousands of connections in a single thread. Here's how I implement API clients:</p><div><pre><code></code></pre></div><p>Synchronization prevents nasty race conditions. I always use context managers with locks for shared resources:</p><div><pre><code></code></pre></div><p>Shared memory optimizes data exchange between processes. I use  for numerical workflows:</p><div><pre><code></code></pre></div><p>Deadlock prevention saves countless debugging hours. I enforce strict lock acquisition orders:</p><div><pre><code></code></pre></div><p>For debugging concurrency issues, I rely on tracing tools.  generates invaluable visualizations:</p><div><pre><code></code></pre></div><div><pre><code>viztracer  performance_test.py\n</code></pre></div><p>Queues enable robust producer-consumer architectures. I implement them for data pipelines:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  These techniques form the foundation of high-performance Python systems. I choose thread pools for I/O operations, process pools for heavy computations, and async I/O for network-intensive applications. Synchronization primitives maintain data integrity, while shared memory and queues enable efficient communication. Debugging tools and lock management strategies prevent elusive concurrency issues. Each approach serves specific scenarios‚Äîmastering them provides comprehensive solutions for modern performance challenges.\n</h2><p>üìò , , , and  to the channel!</p><p> is an AI-driven publishing company co-founded by author . By leveraging advanced AI technology, we keep our publishing costs incredibly low‚Äîsome books are priced as low as ‚Äîmaking quality knowledge accessible to everyone.</p><p>Stay tuned for updates and exciting news. When shopping for books, search for  to find more of our titles. Use the provided link to enjoy !</p><p>Be sure to check out our creations:</p>","contentLength":2454,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"DevOps Insights: Matplotlib Mouse Interaction, Crosshair Cursor & 3D Contour Projection","url":"https://dev.to/labex/devops-insights-matplotlib-mouse-interaction-crosshair-cursor-3d-contour-projection-473l","date":1751302970,"author":"Labby","guid":176822,"unread":true,"content":"<p>DevOps is fundamentally about bridging the gap between development and operations, fostering collaboration, and accelerating software delivery through automation and continuous feedback. While often associated with CI/CD pipelines, infrastructure as code, and monitoring tools, the ability to effectively interpret and act upon data is equally paramount. This is where data visualization, particularly with powerful libraries like Matplotlib, becomes an indispensable skill. The 'DevOps' Skill Tree on LabEx offers a structured pathway to mastering these practices. Today, we'll explore three beginner-friendly labs that, while focusing on Matplotlib, lay crucial groundwork for any aspiring DevOps professional seeking to enhance their data analysis and visualization capabilities. These aren't just about plotting; they're about gaining deeper insights into system behavior and performance.</p><h2>\n  \n  \n  Mouse Interaction with Matplotlib Plot\n</h2><p> Beginner |  20 minutes</p><p>This lab demonstrates an example of how to interact with the plotting canvas by connecting to move and click events using Matplotlib library in Python. Matplotlib is a data visualization library that allows users to create static, animated, and interactive visualizations in Python.</p><h2>\n  \n  \n  Matplotlib Crosshair Cursor\n</h2><p> Beginner |  15 minutes</p><p>Matplotlib is a popular data visualization library that provides a wide range of tools for creating visualizations in Python. One of the interesting features of Matplotlib is the ability to add a crosshair cursor to a plot. In this lab, you will learn how to add a crosshair cursor to a Matplotlib plot.</p><h2>\n  \n  \n  Projecting Filled Contour Onto a 3D Graph\n</h2><p> Beginner |  30 minutes</p><p>This lab will guide you through the process of creating a 3D surface graph with filled contour profiles projected onto the walls of the graph. This is a useful visualization technique for understanding complex 3D data. We will be using Python's Matplotlib library to create the graph.</p><p>These foundational Matplotlib labs, while seemingly distinct from traditional DevOps tooling, are crucial for anyone looking to truly master data-driven decision-making within a DevOps context. The ability to quickly visualize and interpret system metrics, performance data, or even CI/CD pipeline analytics is an invaluable skill. By engaging with these hands-on exercises, you're not just learning Matplotlib; you're cultivating a data-centric mindset that will elevate your DevOps capabilities. Dive in, experiment, and unlock new dimensions in your operational insights!</p>","contentLength":2540,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python for educational purposes (children 11+)","url":"https://dev.to/ghefarm/python-for-educational-purposes-children-11-45c2","date":1751302953,"author":"Gh M.","guid":176821,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"8 Python Techniques to Cut Machine Learning Inference Time by 85%","url":"https://dev.to/aaravjoshi/8-python-techniques-to-cut-machine-learning-inference-time-by-85-57f8","date":1751302899,"author":"Aarav Joshi","guid":176820,"unread":true,"content":"<blockquote><p>As a best-selling author, I invite you to explore my books on <a href=\"https://www.amazon.com/stores/Aarav-Joshi/author/B0DQYNVXZ7?ref=ap_rdr&amp;isDramIntegrated=true&amp;shoppingPortalEnabled=true&amp;ccs_id=738636bd-0ca1-4d7b-8efa-481bfc222571\" rel=\"noopener noreferrer\">Amazon</a>. Don't forget to follow me on <a href=\"https://medium.com/@aarav-joshi\" rel=\"noopener noreferrer\">Medium</a> and show your support. Thank you! Your support means the world! </p></blockquote><p>Efficient machine learning inference separates promising prototypes from production-ready systems. I've spent years wrestling with latency spikes and resource constraints across edge devices, cloud instances, and embedded systems. These eight Python techniques consistently deliver performance gains while preserving accuracy.  </p><p>Model quantization reduces numerical precision to shrink memory footprint. Converting 32-bit floats to 16-bit or 8-bit integers accelerates calculations with minimal accuracy loss. In one deployment, this cut inference time by 60% on mobile processors. Here's practical TensorFlow implementation:</p><div><pre><code></code></pre></div><p>Pruning eliminates redundant neural connections. I approach this as iterative sculpting - gradually removing low-weight connections during training. Sparsity patterns emerge naturally, like finding efficient pathways through dense forests:</p><div><pre><code></code></pre></div><p>Batching strategies maximize hardware utilization. Grouping requests leverages parallel processing capabilities. I implement dynamic batching that adapts to fluctuating loads:</p><div><pre><code></code></pre></div><p>ONNX Runtime provides hardware-agnostic acceleration. Switching execution providers lets me optimize for specific environments. This snippet shows how I configure sessions for different hardware:</p><div><pre><code></code></pre></div><p>Apache TVM compiles models to hardware-native code. Ahead-of-time compilation generates optimized executables. I use this for deploying to edge devices with limited resources:</p><div><pre><code></code></pre></div><p>Asynchronous pipelines separate I/O from computation. This design pattern overlaps preprocessing with model execution. My implementation handles concurrent requests efficiently:</p><div><pre><code></code></pre></div><p>Knowledge distillation transfers capabilities to smaller models. I train compact student models using guidance from larger teacher models. This technique maintains accuracy while reducing computational demands:</p><div><pre><code></code></pre></div><p>Monitoring production systems detects performance degradation. Statistical tests identify data drift and model decay. I implement continuous validation with this approach:</p><div><pre><code></code></pre></div><p>These techniques form a comprehensive toolkit for inference optimization. Each addresses specific constraints I've encountered in real-world deployments. Quantization excels on mobile processors, while TVM shines in cross-compilation scenarios. Asynchronous patterns prove invaluable in high-throughput APIs, and distillation creates efficient specialized models. Performance monitoring completes the lifecycle, ensuring sustained accuracy.  </p><p>The most effective solutions combine multiple approaches. I typically start with quantization and pruning during model export, then layer hardware-specific optimizations like TVM compilation. For server deployments, I implement batching and asynchronous pipelines. Edge deployments benefit most from quantization and TVM. Continuous monitoring provides safety nets for all scenarios.  </p><h2>\n  \n  \n  Through careful implementation, I've achieved latency reductions up to 85% compared to baseline implementations. Resource consumption often drops to one-third of original requirements. These gains enable applications previously considered impractical - real-time video analysis on IoT devices, high-frequency trading predictions, and responsive medical diagnostics. The Python ecosystem provides robust tools, but thoughtful architecture determines ultimate performance.\n</h2><p>üìò , , , and  to the channel!</p><p> is an AI-driven publishing company co-founded by author . By leveraging advanced AI technology, we keep our publishing costs incredibly low‚Äîsome books are priced as low as ‚Äîmaking quality knowledge accessible to everyone.</p><p>Stay tuned for updates and exciting news. When shopping for books, search for  to find more of our titles. Use the provided link to enjoy !</p><p>Be sure to check out our creations:</p>","contentLength":3874,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Opensourced ML Signals Toolkit","url":"https://dev.to/isaiahharvi/opensourced-ml-signals-toolkit-459n","date":1751300769,"author":"Isaiah Harville","guid":176788,"unread":true,"content":"<p>Hey, I just wanted to introduce my opensourced project I've been working on -- <a href=\"https://github.com/isaiahHarvi/sigkit\" rel=\"noopener noreferrer\">SigKit</a>. SigKit is basically a toolbox of building-blocks for anyone who wants to play with real-world digitalized analog signals and machine learning without stitching together a dozen custom scripts. Under the hood you get:</p><ul><li> like ,  and  so you think in baseband, not in arrays of floats.</li><li> for things like AWGN, phase/frequency shifts, filtering and SNR/BER calculators.</li><li> that slot right into your  pipeline‚Äîso adding noise or fading to every sample in your data loader is a one-liner.</li><li>A  training + evaluation pipeline, complete with a pretrained modulation-classifier. Training your own custom ML model is as simple as running a script.</li><li> and synthetic signal generators so you never have to hand-craft a CSV of complex IQ samples.</li><li>(WIP)  wrapping all of the above, for dropping into a live SDR flowgraph.</li></ul><ul><li><strong>Research labs &amp; coursework</strong>: Teaching digital-comm concepts? SigKit turns abstract equations into hands-on Jupyter demos‚Äîgenerate, impair, plot, repeat.</li><li><strong>Modulation classification</strong>: Training a neural net that actually generalizes over-the-air (instead of ‚Äúworks on simulated data only‚Äù).</li><li>: Need to bounce a signal through realistic channel models before you hit the hardware? Plug in Rayleigh fading, resampling or IQ-imbalance transforms.</li><li>: Spin up a quick notebook that shows off ‚Äúlive‚Äù impairments and classification at different SNRs‚Äîno C++ or gnuradio-block coding required.</li><li><strong>Synthetic data generation</strong>: When you need thousands of labeled IQ traces for ML, but you don‚Äôt have a tone-generator farm or unlimited SDRs.</li></ul><p>In short, if you‚Äôve ever wished for a toolkit that treats signals more like images in PyTorch‚Äîletting you compose transforms, datasets, metrics and models in one ecosystem‚ÄîSigKit has your back.</p>","contentLength":1807,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How I Built a Retro Python Game with Amazon Q CLI","url":"https://dev.to/john_vincentaugusto_2643/how-i-built-a-retro-python-game-with-amazon-q-cli-3nbk","date":1751297898,"author":"John Vincent Augusto","guid":176758,"unread":true,"content":"<p>I recently jumped on the \"Build Games with Amazon Q CLI and score a T shirt üèÜüëï\" challenge. As a developer who loves a good retro arcade game and is curious about AI-driven development, this was the perfect excuse to dive in. The mission was simple: build a game using Amazon Q's command-line interface, document the journey, and share the results.</p><p>The result? A fully-functional, nostalgic side-scrolling shooter called , and a ton of insights into pairing AI with a classic coding project. Here‚Äôs how it went down.</p><h2>\n  \n  \n  My Game: \"Space Conquer\" - A Modern-Classic Shooter\n</h2><p>For my project, I chose to build , a side-scrolling space shooter inspired by the classic  from old Nokia phones.</p><ol><li> Like many, I have fond memories of playing . I wanted to capture that simple, addictive fun but with a modern coat of paint‚Äîbetter graphics, dynamic sound, and smoother controls.</li><li> A 2D shooter involves a fantastic mix of programming challenges that are perfect for an AI assistant: managing game states, handling real-time user input, collision detection, and creating varied enemy behaviors.</li><li> I didn't just want to build a game; I wanted to build a . My vision was a modular design where new enemies, power-ups, or levels could be added easily. This is where an AI's ability to generate structured, boilerplate code would really shine.</li></ol><p>Space Conquer features diverse enemies, collectible power-ups, dynamic audio that changes with the game state, and even a hidden developer panel for testing.</p><h2>\n  \n  \n  Unlocking AI's Potential: Effective Prompting Techniques\n</h2><p>Working with Amazon Q CLI is a conversation. The better your questions, the better the answers. I quickly learned that vague prompts like \"make a game\" were less effective than breaking down the problem into specific, well-defined tasks.</p><p>Here are a few prompting techniques I discovered.</p><h3>\n  \n  \n  Technique 1: Requesting a Modular Architecture\n</h3><p>Instead of asking for a single, monolithic script, I prompted for a clean, organized structure from the start.</p><blockquote><p> \"Create a project structure for a PyGame-based space shooter. I need separate modules for asset management, sprites (player, enemies, bullets), UI components, and the main game loop. The asset manager should load images and sounds from manifest files.\"</p></blockquote><p> Amazon Q generated a directory structure (, , ) and starter Python files for each module (, , , ). The generated  included a function to read a JSON manifest, which was a huge head start.</p><h3>\n  \n  \n  Technique 2: Defining Behavior with Roles and Rules\n</h3><p>When creating enemies, I defined their characteristics and constraints clearly.</p><blockquote><p> \"Generate a Python class  that inherits from . It needs attributes for health, speed, and score value. Then, create a subclass  that moves in a sine wave pattern down the screen and fires a bullet every 2 seconds.\"</p></blockquote><p> Q provided a base  class and a well-defined  subclass with its  method already implementing the sine wave movement using . This saved me from figuring out the trigonometry and timing loops myself.</p><h2>\n  \n  \n  How AI Handled Classic Programming Challenges\n</h2><p>Game development is full of recurring problems. Here's how Amazon Q helped tackle some of the classics:</p><ul><li><p> A game needs distinct states like 'main_menu', 'gameplay', 'settings', and 'game_over'. I prompted the AI to implement a simple state machine. It generated a  class that held the current state and handled transitions, ensuring that the main menu logic didn't run during gameplay and vice-versa.</p></li><li><p> A core mechanic of any shooter. I asked Q for an efficient way to check for collisions between player bullets and enemies, and between the player and enemy ships or bullets. It suggested using PyGame's built-in <code>pygame.sprite.groupcollide()</code> function, providing a concise and performant solution that I could drop right into my main game loop.</p></li><li><p> I wanted power-ups to drop randomly from destroyed asteroids. I prompted: \"When an asteroid is destroyed, there should be a 15% chance of it dropping a power-up. The power-up type (health, speed, rapid-fire) should be chosen randomly.\" The AI generated a clean <code>if random.random() &lt; 0.15:</code> check and a  call to select from a list of power-up types.</p></li></ul><h2>\n  \n  \n  Time-Saving Automation: More Than Just Code\n</h2><p>One of the biggest wins was using AI for automation  the code. The project summary mentions developer tools, and Q was instrumental here.</p><h3>\n  \n  \n  The Asset Manifest Generator\n</h3><p>My game uses JSON files to manage all assets (images, sounds, maps). Manually keeping these in sync is tedious.</p><blockquote><p> \"Write a Python script for the  directory that scans the  and  directories and automatically generates a  file with all the file paths.\"</p></blockquote><p>This single prompt created a utility script that saved me countless minutes of error-prone manual editing every time I added a new enemy sprite or sound effect.</p><h4>\n  \n  \n  The Cross-Platform Launcher\n</h4><p>I wanted a simple way for anyone to run the game, regardless of their OS.</p><blockquote><p> \"Create a Python script named  that checks the user's operating system. It should ensure all dependencies from  are installed using pip and then launch the  script.\"</p></blockquote><p>Q generated a script using the  and  modules that provided a one-click experience‚Äîa small but professional touch that I might have skipped otherwise.</p><h2>\n  \n  \n  AI-Generated Code That Impressed Me\n</h2><p>It's one thing to generate boilerplate, but another to produce elegant solutions. Here are a couple of snippets that stood out.</p><h3>\n  \n  \n  1. Manifest-Driven Asset Loader\n</h3><p>This function, generated early on, set the foundation for the game's modularity. It loads all assets listed in a JSON file into a dictionary, making them easily accessible throughout the game.</p><div><pre><code></code></pre></div><p>This design is clean, error-handled, and makes adding 50 new assets as easy as adding one.</p><ol><li>A Base Class for Animated UI Panels\nI wanted the UI to have a modern, \"glowing\" feel. I asked Q to create a reusable class for this.\n</li></ol><div><pre><code># Part of src/ui.py\nimport pygame\n\nclass GlowingPanel(pygame.sprite.Sprite):\n    \"\"\"\n    A UI panel that has a subtle pulsing glow effect by alpha blending.\n    \"\"\"\n    def __init__(self, rect, color, glow_color):\n        super().__init__()\n        self.rect = rect\n        self.color = color\n        self.glow_color = glow_color\n        self.image = pygame.Surface(self.rect.size, pygame.SRCALPHA)\n\n        self.glow_alpha = 100\n        self.glow_direction = 2 # Rate of change for alpha\n\n    def update(self):\n        \"\"\"Update the pulsing glow effect.\"\"\"\n        self.glow_alpha += self.glow_direction\n        if self.glow_alpha &gt;= 180 or self.glow_alpha &lt;= 80:\n            self.glow_direction *= -1\n\n        self.image.fill((0, 0, 0, 0)) # Clear with transparency\n\n        # Draw base panel\n        pygame.draw.rect(self.image, self.color, (0, 0, self.rect.width, self.rect.height), border_radius=8)\n\n        # Draw glow effect (a slightly larger rect with changing alpha)\n        glow_surface = pygame.Surface(self.rect.size, pygame.SRCALPHA)\n        glow_rect = pygame.Rect(0, 0, self.rect.width, self.rect.height)\n        glow_color_with_alpha = (*self.glow_color, self.glow_alpha)\n        pygame.draw.rect(glow_surface, glow_color_with_alpha, glow_rect, border_radius=10)\n\n        # Blit the glow onto the main surface\n        self.image.blit(glow_surface, (0,0), special_flags=pygame.BLEND_RGBA_ADD)\n</code></pre></div><p>This self-contained class for a UI element with its own animation logic is a great example of the object-oriented code Q can produce. It's reusable for scoreboards, health bars, or any other panel in the game.</p><p>Final Thoughts\nUsing Amazon Q CLI for the \"Build Games\" challenge was a fantastic experience. It didn't just write code for me; it acted as a partner that handled the tedious, boilerplate, and sometimes complex parts of development, freeing me up to focus on the creative vision for \"Space Conquer.\"</p><p>If you're a developer who hasn't tried integrating an AI assistant into your workflow, I highly recommend it. Pick a fun project, break it down into small pieces, and start prompting. You'll be surprised at how much you can build.</p><p>And hey, I might even get a t-shirt out of it.</p>","contentLength":8027,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"day 4: Django structure","url":"https://dev.to/rebecca254/day-4-django-structure-2hgj","date":1751295445,"author":"Rebecca-254","guid":176716,"unread":true,"content":"<p>Hello, today marks my 4th day in my journey of developers. Am quite excited to share what I did today while learning Django structure.</p><h2>\n  \n  \n  step 1; setting up my project.\n</h2><p>As part of my tech journey, I decided to build a Django project to practice web development. I named my project njeriproject. Here‚Äôs how I got started:</p><div><pre><code>\ndjango-admin startproject njeriproject\ncd njeriproject\npython -m venv rbenv\nrbenv\\Scripts\\activate\npip install django\n</code></pre></div><p>in this i created a virtual environment by the name brenv and installed django.\nThen I created two apps inside it:</p><h2>\n  \n  \n  Step 2: Understanding the Django Structure\n</h2><p>After running the command, my project looked like this:</p><div><pre><code>njeri/\n‚îú‚îÄ‚îÄ manage.py\n‚îú‚îÄ‚îÄ mysite/\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îú‚îÄ‚îÄ settings.py\n‚îÇ   ‚îú‚îÄ‚îÄ urls.py\n‚îÇ   ‚îú‚îÄ‚îÄ asgi.py\n‚îÇ   ‚îî‚îÄ‚îÄ wsgi.py\n\n</code></pre></div><p>I explored and learned what each file does:</p><p>- This lets me run commands like runserver or makemigrations- This Contains all project settings like installed apps and database config- Handles all routing and linking to app URLs- Help when deploying to a web server</p><h2>\n  \n  \n  Step 3: Creating Two Django Apps\n</h2><p>To organize my site into separate features, I created two apps where each app came with important files like;\nviews.py, models.py, admin.py, apps.py, tests.py, and a migrations/ folder</p><h2>\n  \n  \n  Step 4: Registering the Apps\n</h2><p>To make Django recognize both apps, I opened mysite/settings.py and added them in INSTALLED_APPS </p><h2>\n  \n  \n  Step 5: Writing Views and Creating URLs\n</h2><p>\nIn app1/views.py i created this code</p><div><pre><code>from django.shortcuts import render\n\ndef app1_home(request):\n    return render(request, 'app1_home.html')\n\n</code></pre></div><p>then created urls.py for app1 added the following in it</p><div><pre><code>from django.urls import path\nfrom .views import app1_home\n\nurlpatterns = [\n    path('', app1_home, name='app1_home'),\n]\n</code></pre></div><p>** For app2**\nIn app2/views.py:</p><div><pre><code>from django.shortcuts import render\n\ndef app2_home(request):\n    return render(request, 'app2_home.html')\n</code></pre></div><p>Then I created app2/urls.py:</p><div><pre><code>from django.urls import path\nfrom .views import app2_home\n\nurlpatterns = [\n    path('', app2_home, name='app2_home'),\n]\n</code></pre></div><h2>\n  \n  \n  Step 6: Connecting Both Apps in mysite/urls.py\n</h2><p>Now it was time to connect both apps to the main URL configuration.</p><p>In mysite/urls.py I wrote:</p><div><pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('app1/', include('app1.urls')),\n    path('app2/', include('app2.urls')),\n]\n\n</code></pre></div><p>At first, I forgot to import include and Django gave me an error. But once I fixed that, the server ran smoothly.</p><h2>\n  \n  \n  Step 7: Adding Templates for HTML Pages\n</h2><p>After getting simple text responses to show up using HttpResponse, I wanted to display proper HTML pages using templates.</p><p>So I created a templates folder inside each app\nIn both app1 and app2, I made this folder structure:</p><div><pre><code>app1/\n‚îî‚îÄ‚îÄ templates/\n    ‚îî‚îÄ‚îÄ app1/\n        ‚îî‚îÄ‚îÄ home.html\n</code></pre></div><div><pre><code>app2/\n‚îî‚îÄ‚îÄ templates/\n    ‚îî‚îÄ‚îÄ app2/\n        ‚îî‚îÄ‚îÄ home.html\n</code></pre></div><p>I created basic HTML files in both apps.</p><p>I updated the views to render templates\nIn app1/views.py:</p><div><pre><code>from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'app1/home.html')\n</code></pre></div><div><pre><code>In app2/views.py:\n\n`from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'app2/home.html')\n</code></pre></div><p>I ran the server with the following command</p><p><code>python manage.py runserver</code></p><p>Then I opened my browser and tested. this is what my page looked like after adding /app1 in the URL generated. </p><p>Seeing both apps work made me feel proud and confident in using Django.</p><ol><li>Django projects can be modular ‚Äî I can add many apps like I did with app1 and app2.</li><li>The outer folder (njeri) holds everything; the inner mysite/ config folder manages settings, URLs, and deployment files.</li><li>Even small mistakes (like forgetting include) can break the app ‚Äî but the error messages help a lot\n</li></ol><p>Building the njeri project taught me how Django is structured and how everything connects from creating apps, to writing views, to linking URLs. Working with two apps in one project showed me Django‚Äôs power and flexibility.</p><p>I‚Äôm still learning, but now I feel more confident to build real Django websites. \n Feel free to connect and grow together at github @Rebecca-254</p>","contentLength":4328,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: Use TorchAudio to Prepare Audio Data for Deep Learning","url":"https://realpython.com/python-torchaudio/","date":1751292000,"author":"","guid":176693,"unread":true,"content":"<p>Ever wondered how machine learning models process audio data? How do you handle different audio lengths, convert sound frequencies into learnable patterns, and make sure your model is robust? This tutorial will show you how to handle audio data using TorchAudio, a PyTorch-based toolkit.</p><p>You‚Äôll work with real speech data to learn essential techniques like converting waveforms to spectrograms, standardizing audio lengths, and adding controlled noise to build machine and deep learning models.</p><p><strong>By the end of this tutorial, you‚Äôll understand that:</strong></p><ul><li> processes audio data for deep learning, including tasks like loading datasets and augmenting data with noise.</li><li>You can load audio data in  using the  function, which returns a waveform tensor and sample rate.</li><li> audio by default during loading, scaling waveform amplitudes between -1.0 and 1.0.</li><li>A  visually represents the frequency spectrum of an audio signal over time, aiding in frequency analysis.</li><li>You can pad and trim audio in  using <code>torch.nn.functional.pad()</code> and sequence slicing for uniform audio lengths.</li></ul><p>Dive into the tutorial to explore these concepts and learn how they can be applied to prepare audio data for deep learning tasks using TorchAudio.</p><div><p> Test your knowledge with our interactive ‚ÄúUse TorchAudio to Prepare Audio Data for Deep Learning‚Äù quiz. You‚Äôll receive a score upon completion to help you track your learning progress:</p></div><h2>Learn Essential Technical Terms</h2><p>Before diving into the technical details of audio processing with TorchAudio, take a moment to review some key terms. They‚Äôll help you grasp the basics of working with audio data.</p><p>A waveform is the visual representation of sound as it travels through air over time. When you speak, sing, or play music, you create vibrations that move through the air as waves. These waves can be captured and displayed as a graph showing how the sound‚Äôs pressure changes over time. Here‚Äôs an example:</p><a href=\"https://files.realpython.com/media/sample-waveform-torchaudio.6e633b1568cf.png\" target=\"_blank\"><img src=\"https://files.realpython.com/media/sample-waveform-torchaudio.6e633b1568cf.png\" width=\"1980\" height=\"780\" alt=\"A sample waveform of a 440 HZ wave\"></a>A Sample Waveform of a 440 Hz Wave\n\n<p>This is a waveform of a 440 Hz wave, plotted over a short duration of 10 milliseconds (ms). This is called a <strong>time-domain representation</strong>, showing how the wave‚Äôs amplitude changes over time. This waveform shows the raw signal as it appears in an audio editor. The ups and downs reflect changes in loudness.</p><p> is the strength or intensity of a sound wave‚Äîin other words, how loud the sound is to the listener. In the previous image, it‚Äôs represented by the height of the wave from its center line.</p><p>A higher amplitude means a louder sound, while a lower amplitude means a quieter sound. When you adjust the volume on your device, you‚Äôre actually changing the amplitude of the audio signal. In digital audio, amplitude is typically measured in <a href=\"https://en.wikipedia.org/wiki/Decibel\">decibels (dB)</a> or as a normalized value between -1 and 1.</p><p> is how many times a sound wave repeats itself in one second, measured in <a href=\"https://en.wikipedia.org/wiki/Hertz\">hertz (Hz)</a>. For example, a low bass note is a sound wave that repeats slowly, about 50‚Äì100 Hz. In contrast, a high-pitched whistle has a wave that repeats much faster, around 2000‚Äì3000 Hz.</p><p>In music, different frequencies create different musical notes. For instance, the A note that musicians use to tune their instruments is exactly 440 Hz. Now, if you were to look at the frequency plot of the 440 Hz waveform from before, here‚Äôs what you‚Äôd see:</p><a href=\"https://files.realpython.com/media/frequency-domain-torchaudio.59106603f830.png\" target=\"_blank\"><img src=\"https://files.realpython.com/media/frequency-domain-torchaudio.59106603f830.png\" width=\"1980\" height=\"580\" alt=\"Frequency domain plot of a 440 HZ wave\"></a>A Frequency Domain Plot of a 440 Hz Wave\n\n<p>This plot displays the signal in the , which shows how much of each frequency is present in the sound. The distinct peak at 440 Hz indicates that this is the dominant frequency in the signal, which is exactly what you‚Äôd expect from a pure tone. While time-domain plots‚Äîlike the one you saw earlier‚Äîreveal how the sound‚Äôs amplitude changes over time, frequency-domain plots help you understand which frequencies make up the sound.</p><p>The waveform you just explored was from a 440 Hz wave. You‚Äôll soon see that many examples in audio processing also deal with this mysterious frequency. So, what makes it so special?</p><div><p> The <a href=\"https://en.wikipedia.org/wiki/A440_(pitch_standard)\">440 Hz frequency</a> (A note) is the international standard pitch reference for tuning instruments. Its clear, single-frequency nature makes it great for audio tasks. These include sampling, frequency analysis, and waveform representation.</p></div><p>Now that you understand frequency and how it relates to sound waves, you might be wondering how computers actually capture and store these waves. </p><p>When you record sound digitally, you‚Äôre taking snapshots of the audio wave many times per second. Each snapshot measures the wave‚Äôs amplitude at that instant. This is called sampling. The number of snapshots taken per second is the , measured in hertz (Hz).</p>","contentLength":4584,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I Built a Tool to Search AI Conversations in 1 Week (With Heavy AI Assistance)","url":"https://dev.to/d_p_6e7c8572c8febaab6c33d/i-built-a-tool-to-search-ai-conversations-in-1-week-with-heavy-ai-assistance-2elj","date":1751291421,"author":"D P","guid":176676,"unread":true,"content":"<p>I had hundreds of AI conversations with Claude and ChatGPT. Valuable code, solutions, and insights were buried in those exports. Sure, I could grep through them with my hacky script (<code>claude_ai_convo_dump_extractor</code> - great name, right?), but I wanted something better.</p><p>So last week, with AI enthusiastically egging me on that this would be a \"great resume project,\" I built ChatMine.</p><h2>\n  \n  \n  The Twist: AI Built It Too\n</h2><p>Here's where it gets meta. I used Claude Code extensively to build ChatMine. Yes, AI helped me build a tool to search AI conversations. ü§ñ</p><p>In just one week, I went from idea to working product with:</p><ul><li>Semantic search using FAISS</li><li>Automatic code extraction</li><li>Web interface with FastAPI</li><li>Full CLI with rich output</li></ul><h2>\n  \n  \n  What ChatMine Actually Does\n</h2><div><pre><code>python claude_ai_convo_dump_extractor.py export.json\n ./extracted/\n</code></pre></div><div><pre><code>chatmine import-claude claude-export.zip\n‚úì Imported 312 conversations\n‚úì Extracted 1,847 code snippets\n\nchatmine search \nFound 5 relevant conversations:\n1. March 2024\n2. February 2024\n...\n\nchatmine code-search \nFound 23 Python async functions across your conversations\n\nchatmine export-conversations  ./searchable/\nrg  ./searchable/\n</code></pre></div><h2>\n  \n  \n  The Good, The Bad, and The Honest\n</h2><ul><li>It actually works! Fully functional with extensive tests</li><li>Solves a real problem (beyond my hacky grep scripts)</li><li>Modern Python stack: FastAPI, SQLAlchemy, Click, FAISS</li><li>You can STILL grep the exports, but now with better organization</li></ul><ul><li>I don't fully understand some ML libraries I used (FAISS, sentence-transformers)</li><li>Some advanced features were \"suggested\" by AI that I couldn't build myself</li><li>Tests were sometimes written after the code (I know, I know...)</li></ul><ul><li>AI convinced me this was resume-worthy (it worked - I built it! üòÖ)</li><li>This is what AI-assisted development really looks like in 2025</li><li>You can ship impressive software fast</li><li>But you need to be careful about technical debt</li></ul><h2>\n  \n  \n  From Hacky Scripts to Proper Tool\n</h2><p>My original <code>claude_ai_convo_dump_extractor</code> was exactly what it sounds like - a script that dumped conversations so I could grep them. ChatMine evolved from that need but added:</p><ol><li> - SQLite instead of flat files</li><li> - Find concepts, not just keywords</li><li> - Automatically extracts and categorizes code</li><li> - Organized markdown with metadata</li></ol><p>But honestly? Sometimes I still just want to grep things, so ChatMine can export everything to markdown files organized by date and platform. Best of both worlds!</p><h2>\n  \n  \n  Key Learnings from AI-Assisted Development\n</h2><h3>\n  \n  \n  1. AI Accelerates, But Doesn't Replace Understanding\n</h3><div><pre><code></code></pre></div><h3>\n  \n  \n  2. Tests Are Your Safety Net\n</h3><p>With 90% test coverage, I can refactor confidently even when I don't fully understand every library:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  3. Keep Simple Options Available\n</h3><div><pre><code></code></pre></div><p>I'm open-sourcing ChatMine with a few goals:</p><ol><li> - I need help understanding the ML libraries better</li><li> - Better than hacky scripts!</li><li> - Honest case study in AI-assisted development</li></ol><p>The repo includes a candid README about what I built with AI help vs. what I understand deeply.</p><p>This experiment taught me that AI-assisted development is powerful but comes with responsibilities:</p><ul><li>Be honest about what you don't understand</li><li>Test everything thoroughly\n</li><li>Document for your future self</li><li>Keep simple alternatives (sometimes grep is all you need!)</li><li>Be ready to learn the underlying concepts</li></ul><p>Have you built anything with heavy AI assistance? How do you balance speed with understanding? </p><p>Do you have hacky scripts that could become \"proper\" tools? (We all do!)</p><p>And if you're still grepping through AI conversation exports... well, now there's ChatMine! üéâ</p><p><em>Currently exploring new opportunities in Python/DevOps. Building and learning in public.</em></p>","contentLength":3595,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (9)","url":"https://dev.to/hyperkai/string-in-python-9-1k0n","date":1751290780,"author":"Super Kai (Kazuya Ito)","guid":176675,"unread":true,"content":"<p><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.splitlines\" rel=\"noopener noreferrer\">splitlines()</a> can split a string at one or more line boundaries as shown below:</p><ul><li>The 1st argument is (Optional-Default:-Type:). *If  is , one or more line boundaries are included otherwise they aren't included.</li><li>These below are line boundaries:</li></ul><div><table><tbody><tr><td>Carriage Return + Line Feed</td></tr><tr><td>Next Line (C1 Control Code)</td></tr><tr></tr></tbody></table></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.partition\" rel=\"noopener noreferrer\">partition()</a> can split a string at the 1st occurrence of a separator, searching from the left to the right as shown below:</p><ul><li>The 1st argument is (Required-Type:):\n*Memos:\n\n<ul><li>It's the separator of the one or more characters to separate a string.</li><li>An empty string cannot be set.</li></ul></li><li>It returns a tuple of 3 elements.</li><li>If  isn't found, a tuple of the string itself and two empty strings in order is returned as 3 elements.\n</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.rpartition\" rel=\"noopener noreferrer\">rpartition()</a> can split a string at the 1st occurrence of a separator, searching from the right to the left as shown below:</p><ul><li>The 1st argument is (Required-Type:):\n*Memos:\n\n<ul><li>It's the separator of the one or more characters to separate a string.</li><li>An empty string cannot be set.</li></ul></li><li>It returns a tuple of 3 elements.</li><li>If  isn't found, a tuple of two empty strings and the string itself in order is returned as 3 elements.\n</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div>","contentLength":1104,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Comprehending Vector Search [LLM-A2]","url":"https://dev.to/eanups/comprehending-vector-search-llm-a2-54lg","date":1751290563,"author":"anup s","guid":176674,"unread":true,"content":"<p>Keyword search literally hunts for matching terms. That‚Äôs fine‚Äîuntil it isn‚Äôt:</p><div><table><thead><tr><th>Keyword Search Might Return</th></tr></thead><tbody><tr><td>‚Äú10 Best  Tables‚Äù‚ÄúWimbledon Lawn  Highlights‚Äù</td><td>Articles, rules and gear for </td></tr></tbody></table></div><p>Keyword engines struggle even more with non-text media: images, audio, video, genome sequences, etc. They simply don‚Äôt ‚Äúsee‚Äù pixels or sound waves.</p><p>Vector (semantic) search fixes this by turning each item‚Äîtext, image, whatever‚Äîinto a high-dimensional vector. Similar meaning -&gt; nearby vectors. Your query is embedded the same way, and the engine brings back the closest neighbours.</p><blockquote><p>‚ÄÇVector search ‚ûú <em>find things that feel the same, not just things that spell the same.</em></p></blockquote><ol><li><p>\nYou start with a set of text passages (in the drawing they‚Äôre labelled ‚ÄúText / Answers‚Äù).<p>\nEach passage is fed through an embedding model (a neural network that maps text to points in a high-dimensional space).</p>\nThe model outputs a vector for each passage‚Äîthese vectors (sometimes called word or sentence embeddings) capture the meaning of the text as coordinates in that space.</p></li><li><p><strong>Query Vectorization &amp; Retrieval</strong>\nWhen a user asks a question, you send the question through the same embedding model and obtain a query vector.<p>\nYou then compare that query vector to all of your stored document vectors (e.g. with cosine similarity).</p>\nThe documents whose vectors lie closest to the query vector are the most semantically relevant answers, even if they don‚Äôt share the exact same keywords.</p></li></ol><p> by operating in a continuous vector space rather than matching literal words, you can find passages that ‚Äúmean the same thing‚Äù and surface them to your LLM (or directly to the user). This is the core of semantic (vector) search in Retrieval-Augmented Generation pipelines.</p><p>Many open-source vector databases exist; we‚Äôll use  because it‚Äôs lightweight, fast, and has a friendly Python client.</p><p>Installing Qdrant using docker:</p><div><pre><code>docker pull qdrant/qdrant\n\ndocker run  6333:6333  6334:6334 \n   qdrant/qdrant\n</code></pre></div><p>Installing python client libs:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Stage 1: Connections and Data Prep\n</h3><p>Import the necessary modules to connect to the vector DB , choose the models that would be required based on the need and study the dataset.</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Stage 2:  Storage and Index Prep\n</h3><p>Create a collection (say for a business problem) and add points (data points or documents) into the collection that would be embedded into vectors.</p><div><pre><code></code></pre></div><p>Upsert the relevant section of the documents into vector db.</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Stage 4: Search capability\n</h3><p>Provide a search capability to query the documents say based on similarity matches (cosine distance)</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Stage 5: Query LLM with Vector DB as a RAG\n</h3><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h2>\n  \n  \n  Improving with Hybrid Search\n</h2><p>No single search technique suits every scenario. Sometimes you need the precision of keywords (exact product codes, player stats, specific names), and other times the flexibility of semantic matching (similar games, related concepts, broader topics). A  strategy blends both:</p><ul><li><strong>Sparse (keyword) embeddings</strong> for exact matches\n</li><li><strong>Dense (semantic) embeddings</strong> for meaning-based recall\n</li><li> (e.g. reciprocal rank fusion) or  (keyword filter ‚Üí semantic re-rank, or vice versa)</li></ul><blockquote><ul><li>Looking up a particular player‚Äôs season statistics? A keyword search is ideal.\n</li><li>Hunting for matches that felt like nail-biters? Semantic search surfaces games with similar ‚Äúexcitement vectors.‚Äù</li></ul></blockquote><h3>\n  \n  \n  Hybrid Embedding &amp; Fusion\n</h3><p>By storing both sparse and dense vectors in your collection and then combining their scores‚Äîeither in two passes or via a fusion query‚Äîyou get the best of both worlds, serving precise queries and broad, semantically rich ones with equal finesse.</p>","contentLength":3599,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Top 10 Sites to Hire Python Developers Remotely in 2025","url":"https://dev.to/eric_walter/top-10-sites-to-hire-python-developers-remotely-in-2025-44c1","date":1751290093,"author":"Eric Walter","guid":176673,"unread":true,"content":"<p>Python is the most used programming language, and its demand is still increasing, especially for remote projects. Businesses consider it ideal for building websites, AI tools, and data science projects. To extract the most from Python, it is essential to hire Python developers from a trusted platform that matches the right expert to your project‚Äôs specific needs.  </p><p>In this guide, we‚Äôll learn what type of developers to look for when you <a href=\"https://www.devacetech.com/hire-python-developers\" rel=\"noopener noreferrer\">hire dedicated Python developers</a>, and mention the 10 best platform options where you can find skilled Python developers.  </p><h2>\n  \n  \n  Which Type of Python Developer Should You Hire?\n</h2><p>Not every Python developer is capable of all types of Python projects. Each of them has their expertise and skill set, so decide smartly after examining your project needs. Here are the types of Python developers you can hire, depending on the services your project needs:  </p><ul><li>Web developers for websites, e-commerce platforms, and custom web apps </li><li>Data scientists for analyzing data\n</li><li>Backend developers who build RESTful APIs </li><li>Machine Learning engineer / AI Python developer for designing ML and AI projects </li><li>Cloud Python developer builds and manages a Python app in the cloud </li><li>Python Integration/Migration Specialist for upgradation to the advanced architectures </li><li>Full-Stack developers who manage both front-end and back-end tasks</li></ul><p>Alongside choosing the right type of developer for your project, it is important to understand the <a href=\"https://www.devacetech.com/insights/python-pros-and-cons\" rel=\"noopener noreferrer\">pros and cons of Python</a>, so you can confidently hire remote Python developers who align with your project goals and tech stacks.  </p><h2>\n  \n  \n  Best 10 Platforms to Hire Remote Python Developers in 2025\n</h2><p>Here is the list of some top sites from where you can hire dedicated Python developers:  </p><p>It was founded in 2010 and has its main office in California, USA. You can find the top 3% of freelance programmers, designers, and project managers because they follow a very strict selection process.  </p><p>Review developers with proven experience </p><p>Provides a trial period before you hire developers </p><p>Emphasis on quality, expertise, and communication </p><p>Rapid hiring process with tailored matching </p><p>Businesses that need upper-class solutions, highly skilled developers, and reliable Python developers to build their complex projects.  </p><p>It was founded in 1999 but was named Upwork in 2014. It has its main office in California, USA, and is the largest freelancing platform globally. You can easily find a Python programmer for your project after assessing their past projects, skills, and expertise.  </p><ul><li>Large talent pool of all types of experienced developers </li><li>Mentioned pricing with the option of hourly or fixed price </li><li>Provide a tool to monitor developers by built-in time tracking and work diary-like tools </li><li>Makes communication and collaboration easy </li></ul><p>Companies, teams, and startups need cost-effective Python development. It also offers flexible hiring for short-term or ongoing tasks.  </p><p><a href=\"https://www.devacetech.com/\" rel=\"noopener noreferrer\">Devace Technologies</a> was established in 2016 with a physical presence in New Jersey, USA. However, it has a global remote presence. It is a trusted software development company that ensures to provide Python developers who specialize in different frameworks of Python, including Django, Flask, and Pyramid. Also, the skilled Python programmers they provide are committed to delivering successful projects through rapid and efficient development.  </p><ul><li>Provide Python developers within 48 hours </li><li>Pre-checked, remote-ready, and highly professional coders </li><li>End-to-end support for matching talent and onboarding </li><li>Tailored solutions for web apps, APIs, automation scripts, and ML projects </li></ul><p>Businesses looking to hire dedicated Python developers for long-term projects, SaaS startups, and enterprise-level projects, and need ongoing Python support.  </p><p>It was introduced in 2018 as an AI-driven platform. It can connect you with the top 1% of remote Python developers globally. It makes the hiring process simple by handling onboarding, examining, and time zone management. It provides for all types of Python developers who are experienced and work with you long-term.  </p><ul><li>Connects with the right developers rapidly because of the AI feature </li><li>Focus on communication, so provide the same time zone for developers\n</li><li>Follows a strict examination process to find highly talented developers\n</li><li>Provides developers from more than 100 countries\n</li></ul><p>Complex or long-term projects that want to increase their team remotely  </p><p>It is an Australia-based platform that was founded in 2009. It is one of those freelancer platforms that offers bidding options to Python developers. You simply post your project along with requirements, and different Python developers will bid on it, and you will get multiple proposals from which you can select.  </p><ul><li>Provide a lot of options to compare price, timeline, and the developer's experience </li><li>Progress-based payments to improve security </li><li>Offers live chat and project tracking tools </li><li>Lower hiring cost because of bidding </li></ul><p>Businesses that are small in size are startups and have limited budgets.  </p><p>It was set up in 2011 and is located in the USA. It provides only US-based freelance developers who are highly skilled. It follows a strict evaluation process to choose Python developers who can provide different types of Python development services.    </p><ul><li>Provides high-quality developers </li><li>Gives the option of rapid hiring within 48 hours </li><li>Offers outcome-based payments </li><li>Examine developers through interviews, projects, and coding tasks </li></ul><p>US-based companies that are looking for freelancers in their time zone are not working.  </p><p>Stack Overflow started in 2008 and has its headquarters in New York, USA. It is the world‚Äôs number first platform for developers where they can share their queries, and other expert developers solve them. That means it has a network of both junior to experienced-level developers who are highly engaged, have problem-solving skills, and follow modern practices.   </p><ul><li>Have the active and talented developers available 24/7 </li><li>Supports job postings to hire top talent </li><li>Direct communication with developers\n</li><li>It only provides developers who want to work remotely </li></ul><p>Businesses that have their development team working remotely need Python developers with international hiring needs. </p><p>It works remotely but has its main office in Paris, which was founded in 2014. It highly focuses on remote work and makes sure to hire Python developers who are interested in working remotely. They provide software developers, data scientists, and DevOps engineers.  </p><ul><li>Deliver remote-focused developers to companies that prioritize working remotely </li><li>Offers job postings which is visible to the largest developers' community </li><li>Strongest community of developers who follow their newsletter and blogs\n</li></ul><p>Companies are looking for full-time remote developers for their start-ups or new projects.   </p><p>It is a UK-based company that started in 2007. It has a large network of Python developers working globally. You can post a project and get proposals on it from different developers, and it also has some packages based on hours.   </p><ul><li>Provides flexibility to select daily, hourly, or fixed rate projects </li><li>Allows developers to examine developers past projects and reviews before hiring </li><li>It keeps the payment until you and the developer both are satisfied </li><li>Provides built-in communication and collaboration tools </li></ul><p>Start-ups, small businesses, and short-term projects that do not want maintenance and ongoing support.  </p><ul><li>10- LinkedIn \nIt is considered an authentic source that has its main office in the USA and was founded in 2003. LinkedIn, the world's largest networking platform, is also used for hiring both full-time and freelance developers. By using features like LinkedIn Jobs and LinkedIn Recruiter, you can find the right developer based on skills, experience, and location.\n</li></ul><p>A vast network of verified professionals  </p><ul><li>Offers filters to find Python developers by location, experience level, and workplace type </li><li>You can directly connect with the right candidate </li><li>By visiting their profile, you can evaluate their expertise, endorsements, certifications, and community involvement </li></ul><p>Businesses that want to hire a full-time remote developer for the long term.   </p><p>Hiring a remote Python developer may seem complicated, but if you follow the right guide and consult a trusted platform, it will be much easier. Your decision should match your project size, type, timeframe, and budget. You can make a strong team when you know what to look for and which platform will meet your requirements. It's easy to hire dedicated Python developers from the platforms listed above, as each offers something unique‚Äîwhether it's flexible hiring models, built-in tools, or access to top-tier developers. </p>","contentLength":8642,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why Hire Python Developers for Your Next Project","url":"https://dev.to/digitalaptech/why-hire-python-developers-for-your-next-project-1kd0","date":1751289404,"author":"Digital Aptech","guid":176672,"unread":true,"content":"<p>If you ask which are some of the most popular programming languages, Python would surely be one of them. Why? Because it is simple to use, efficient, flexible and super fast. Also, it comes with a simple learning curve. Most leading tech giants like Netflix, Instagram and Google <a href=\"https://digitalaptech.com/hire-dedicated-resource/python-developers/\" rel=\"noopener noreferrer\">hire Python developers</a>. </p><p>Python is useful for building web applications, data analytics solutions and developing AI platforms. If your business is planning to build any such platforms, Python is an ideal solution. But for successful project completion, you need skilled developers. That's why many prefer to hire full-time developers. </p><p>So, let's discuss why you select Python as your programming language of choice, what you should seek in a developer, and how you should select the best team‚Äîif you require remote or full-time employees. </p><p>There is more than one reason. Python is quite easy to learn and execute. The simple syntax makes it easier to write as well as debug. Also, it supports various popular frameworks that developers need. These include FastAPI, Flask and others. So, this makes Python one of the best choices for startups. </p><p>Some top benefits include </p><ul><li>Ideal for machine learning and AI</li><li>Ideal for web development</li><li>Simple database integration</li><li>Large, highly supportive community</li><li>Cross-platform compatibility</li></ul><p>Due to this, companies in healthcare, fintech, education, and others are going for Python. But tools by themselves are not sufficient. You require developers who can efficiently use them.</p><p><strong>When To Employ Dedicated Python Developers?</strong>\nYou may need someone more than a freelancer or a part-time contractor at times. If your project is long-term or complicated, it's optimal to employ dedicated Python developers.</p><ul><li>Full-time dedication from your developer</li><li>Improved team collaboration</li><li>Faster delivery and fewer mistakes</li></ul><p>Dedicated developers are like a members of your internal team. They know your objectives, make suggestions, and fit into your company culture. This model suits businesses that require ongoing updates, continuous support, or iterative development.</p><ul><li>Why Remote Python Developers Work So Well\nNowadays, you don't need to have your developers in your office. On the contrary, most companies now prefer to hire remote Python developers for hire. It's economical and you have access to the world's vast talent.</li></ul><p>Here's why remote teams are a good idea:</p><ul><li>Highly affordable cost of hiring </li><li>Time-zone support and development cycles</li><li>Easy access to talent from across the globe</li></ul><p><strong>Factor to Remember When Hiring a Python Developer</strong></p><p>Developers are not created equal. When searching to hire Python developers, the following are the most important qualities to look for:</p><ul><li><p>Strong technical grounding\nFind someone who is aware of various APIs and frameworks. </p></li><li><p>Problem-solving attitude\nSomeone who can smoothly address any problem related to coding and even communication </p></li><li><p>Project experience\nComes with prior experience in projects same as yours</p></li><li><p>Soft skills\nSoft skills such as transparent communication are crucial for a remote team and resources</p></li><li><p>Fit with Company Culture\nThe remote team should get along with the values of your organization and team</p></li></ul><p>So, the best way to hire the perfect fit is to take your time in evaluation. Check the portfolios. Make sure to interview the resources and also go for coding tests. This small effort will go a long way in the future.</p><p>*<em>Ways to Hire Python Developers *</em>\nThere are various methods of going about hiring:</p><ul><li>Freelance websites (such as Upwork or Fiverr)</li></ul><p>For a small job, freelancers may be employed. But for a serious project, your best choice is to hire Python developers from a proven tech partner.\nWhy? You receive pre-screened talent, management assistance, and assured delivery. You also save time and minimize hiring risk.</p><p><strong>Full-Time Python Developer Hire: Is It Worth It?</strong>\nAbsolutely‚Äîif you're creating a product or scaling. A full-time Python developer recruitment provides you with someone who's dedicated entirely to your project.</p><ul><li>Make sure your long-term goals are met</li><li>Partner with your team for better results </li></ul><p>This works best for SaaS platforms, mobile applications, machine learning software, or multi-stage development.\nFull-time doesn't necessarily mean in-house. You can receive full-time commitment from remote developers as well‚Äîwithout the cost.</p><p><strong>Why Choose Digital Aptech?</strong>\nAt <a href=\"https://maps.app.goo.gl/6sNDy2VsfsviLrzU7\" rel=\"noopener noreferrer\">Digital Aptech</a>, we‚Äôve helped clients across the UK, USA, Australia, and the Middle East hire top-tier Python developers.</p><p>Here‚Äôs what makes us different:</p><ul><li>Vetted, experienced developers</li><li>Flexible hiring models‚Äîremote, dedicated, full-time</li><li>Long-term partnership approach</li></ul><p>*<em>Final Thought: Get The Right Team *</em></p><p>With the right team of developers, you can get assured success out of your project. It is the best team that will make the actual difference. </p><p>So if you're ready to hire committed Python developers, or need remote Python developers for hire who can start producing right away‚ÄîDigital Aptech can assist you.\nWe can be your best choice to find the right team of developers. </p><p>We build and execute clean code for efficient results. Connect with us for award-winning solutions that perform. </p>","contentLength":5090,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From 200 Lines to 7: A Real Comparison Between Traditional Hardware Info Scripts and the HardView Library","url":"https://dev.to/gafoo/from-200-lines-to-7-a-real-comparison-between-traditional-hardware-info-scripts-and-the-hardview-61g","date":1751288509,"author":"gafoo","guid":176625,"unread":true,"content":"<h2>\n  \n  \n  üß† From 200 Lines to 7: A Real Comparison Between Traditional Hardware Info Scripts and the HardView Library\n</h2><p>One of the most tedious and error-prone tasks in Python is gathering detailed hardware information across platforms - especially if you want your script to work on both  and .</p><p>If you've ever done this before, you know exactly what you're up against:</p><ul><li>Dozens of different libraries (, , , , etc.)</li><li>OS-specific shell commands (, , , etc.)</li><li>Inconsistent formats and parsing headaches</li><li>And most importantly: hundreds of lines of fragile, system-dependent code</li></ul><h2>\n  \n  \n  üí• Example: Traditional Python Code (Fragment)\n</h2><p>Here‚Äôs just a small part of what a typical cross-platform hardware info script looks like:</p><div><pre><code></code></pre></div><p>This is  ‚Äî and you'd need similar blocks for BIOS, system info, RAM, disks, and network interfaces. It quickly becomes hundreds of lines of duplicated logic, full of conditionals, subprocess calls, and error handling.</p><p>Instead of hundreds of lines, ?</p><div><pre><code></code></pre></div><ul><li>No third-party dependencies\n</li><li>All returned as clean, structured JSON\n</li><li>Works on </li><li>And under the hood? It‚Äôs written in pure C for ultra-fast execution</li></ul><ul><li>Hardware auditing systems</li><li>Security environments\n...or you just need  without the mess</li></ul><p> simplifies it all into a clean Pythonic interface backed by raw native performance.</p><p>Try it. Replace hundreds of fragile lines with just one powerful library.</p><p>If this example helped you, or if you have any questions,  ‚Äî feel free to comment below.<p>\nIf you encounter any issues or bugs or want to explore the source code, you can open an issue directly on GitHub:</p></p>","contentLength":1556,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üîß Lessons from Building Tunaresq ‚Äî A Backend Developer's Reflection","url":"https://dev.to/vincenttommi/lessons-from-building-tunaresq-a-backend-developers-reflection-1hn2","date":1751288015,"author":"Vincent Tommi","guid":176624,"unread":true,"content":"<p>Contributing to Tunaresq has been a trans-formative experience for me as a back-end developer. It's my first time building a product within a cross-functional team ‚Äî collaborating daily with front end engineers, product designer, and tech leads. This journey has reshaped how I think, not just about code, but about collaboration, clarity, and ownership.</p><p><strong>ü§ù From Solo Dev to Team Contributor</strong>\nBefore Tunaresq, I often worked solo ‚Äî picking up tickets, building features, and shipping without much interaction. But working in a real team taught me that alignment comes first. Now, before we start building or updating anything, we sync with our team ‚Äî especially the front-end ‚Äî to avoid mismatches and ensure shared understanding.</p><p>\nWriting APIs isn't just about endpoints ‚Äî it‚Äôs about solving product problems. I now ask:</p><p>Does this API support a real business case?</p><p>Is the data structure clear, lean, and secure?</p><p>Are auth, permissions, and edge cases covered?</p><p>Working with Django and Django REST Framework (DRF), I‚Äôve built APIs for authentication, user profile management, and notification triggers ‚Äî all tailored to front-end expectations and use-case needs.</p><p>‚úÖ Redefining \"Done\"\nA task isn‚Äôt truly complete until it‚Äôs:</p><p>Integrated successfully by the front-end</p><p>Verified against product requirements</p><p>Only then do I mark it \"done\" in Click-up. This process ensures quality and tight integration across the stack.</p><p><strong>üí° Design Before You Build</strong>\nFor any task expected to take hours, I now invest 25‚Äì30% of the time in:</p><ul><li><p>Understanding the logic and flow</p></li><li><p>Designing the API schema or model</p></li><li><p>Planning for re-usability</p></li></ul><p>This upfront thinking avoids rework and results in cleaner code ‚Äî especially when working with repetitive structures like user roles or permission-based filtering.</p><p><strong>üìñ Code Reading = Code Leveling</strong>\nAfter I complete a task, I make it a habit to read other teammates‚Äô code ‚Äî not just to review, but to learn. I study how they:</p><ul><li><p>Structure  and </p></li><li><p>Handle validation and exceptions</p></li></ul><p>This has helped me absorb better patterns and gradually improve my own coding standards.</p><p><strong>üß† Owning Tasks, Solving Problems</strong>\nI‚Äôve learned to take full ownership of tasks from start to finish:</p><ul><li><p>Debug independently first</p></li><li><p>When stuck, explain what I‚Äôve tried before asking for help</p></li><li><p>Propose alternatives when I believe something can be improved</p></li></ul><p>For example, I once saw a way to simplify a notifications endpoint. Instead of just suggesting it, I prototyped the solution and explained its performance benefit ‚Äî it was adopted.</p><p>\nRight now, I‚Äôm actively contributing to Tunaresq‚Äôs back-end ‚Äî building APIs, refining authentication workflows, and aligning closely with the front-end team. Every feature I build is tested in integration, reviewed for clarity, and aligned with product value. I‚Äôm still in the journey ‚Äî improving daily, learning through feedback, and growing into a product-oriented engineer.</p><ul><li><p>Collaboration is a skill. Code is better when teams align.</p></li><li><p>Design before you build. Time spent planning avoids hours of debugging.</p></li><li><p>APIs should serve people. Focus on usability, clarity, and purpose.</p></li><li><p>Own your work. From idealization to integration, be accountable.</p></li><li><p>Read code, improve code. Learn from others to raise your bar.</p></li></ul><ul><li><p>Back-end: Django, DRF, PostgreSQL</p></li><li><p>Version Control: Git, GitHub</p></li></ul><p>-Project Management: Click-up</p><p>Communication: Daily team stand-ups &amp; syncs</p>","contentLength":3354,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Fundamentals: augmented assignment","url":"https://dev.to/devopsfundamentals/python-fundamentals-augmented-assignment-2f5f","date":1751286324,"author":"DevOps Fundamental","guid":176623,"unread":true,"content":"<h2>\n  \n  \n  Augmented Assignment in Production Python: A Deep Dive\n</h2><p>In late 2022, a critical bug surfaced in our real-time fraud detection pipeline. The system, built on FastAPI and leveraging Pydantic for data validation, began intermittently flagging legitimate transactions as fraudulent. The root cause? A subtle interaction between Pydantic‚Äôs internal data manipulation and augmented assignment (, , etc.) when updating a shared, mutable state within an async worker pool. Specifically, the in-place modification of a list used for feature engineering was leading to race conditions and data corruption. This incident highlighted a critical gap in our understanding of augmented assignment‚Äôs behavior, particularly within concurrent and type-sensitive environments. This post details the intricacies of augmented assignment in Python, focusing on production considerations, debugging strategies, and best practices to avoid similar pitfalls.</p><h3>\n  \n  \n  What is \"augmented assignment\" in Python?\n</h3><p>Augmented assignment operators (e.g., , , , , , , , , , , , ) are syntactic sugar for combining an arithmetic or bitwise operation with assignment.  Crucially, they are  always equivalent to the explicit operation followed by assignment.  This behavior is defined in PEP 203 and is tied to the , , etc., methods.  If an object defines an in-place operation method (e.g., ), augmented assignment will invoke that method. Otherwise, it falls back to the equivalent .</p><p>This distinction is vital.  For mutable objects like lists,  modifies the object in-place, avoiding a new allocation. For immutable objects like integers, the fallback behavior is used, creating a new object.  This difference impacts performance and, as we saw in the fraud detection incident, concurrency.  The typing system, as defined in PEP 484, treats augmented assignment as a special case, allowing for more precise type inference and static analysis.</p><ol><li><strong>FastAPI Request Handling:</strong>  In high-throughput APIs, accumulating request metrics (e.g., latency histograms) often uses augmented assignment to update counters in-place, minimizing allocation overhead.\n</li></ol><div><pre><code></code></pre></div><ol><li><p><strong>Async Job Queues (Celery/RQ):</strong>  Updating task progress or retry counts within a worker process benefits from the in-place modification offered by augmented assignment.</p></li><li><p><strong>Type-Safe Data Models (Pydantic/Dataclasses):</strong>  While Pydantic generally discourages direct mutation, internal operations like updating nested dictionaries or lists within a model can inadvertently use augmented assignment, leading to unexpected behavior if not carefully managed.</p></li><li><p> Accumulating statistics or processing large datasets in a CLI tool often utilizes augmented assignment for efficiency.</p></li><li><p><strong>ML Preprocessing (Pandas/NumPy):</strong>  In-place operations on NumPy arrays or Pandas DataFrames using augmented assignment are common for performance optimization, but require careful consideration of data sharing and potential side effects.</p></li></ol><h3>\n  \n  \n  Integration with Python Tooling\n</h3><p>Augmented assignment interacts significantly with Python‚Äôs tooling.</p><ul><li><p>  Mypy correctly infers types for augmented assignments, providing static type checking.  However, it can sometimes struggle with complex in-place operations on mutable objects, requiring explicit type annotations.</p></li><li><p> Pydantic‚Äôs validation and serialization logic can be affected by augmented assignment if mutable default values are used.  Using immutable defaults (e.g.,  instead of ) is a best practice.</p></li><li><p>  Testing code that uses augmented assignment requires careful consideration of state management.  Fixtures should be used to isolate tests and prevent unintended side effects.</p></li><li><p>  As demonstrated by the fraud detection incident, augmented assignment in concurrent code requires synchronization mechanisms (e.g., ) to prevent race conditions.</p></li></ul><p> configuration for mypy:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h3>\n  \n  \n  Failure Scenarios &amp; Debugging\n</h3><p>The fraud detection incident was a prime example of a race condition. Multiple async workers were simultaneously modifying the same list, leading to inconsistent data.  Debugging involved:</p><ol><li> Adding detailed logging around the augmented assignment operation to track the state of the list.</li><li> Analyzing the exception traces to identify the point of failure.</li><li> Using  to step through the code and inspect the state of the variables.</li><li> Profiling the code to identify performance bottlenecks and areas where contention was occurring.</li></ol><p>Another common failure is unexpected behavior when an object doesn't define the  method, leading to a new object being created instead of modifying the original in-place. This can cause subtle bugs if the code relies on the original object being mutated.</p><h3>\n  \n  \n  Performance &amp; Scalability\n</h3><p>Augmented assignment can significantly improve performance by avoiding unnecessary object allocations. However, excessive in-place modification can lead to increased memory usage and contention in concurrent environments.</p><ul><li> Use  to benchmark the performance of augmented assignment versus explicit assignment.</li><li> Identify performance bottlenecks and areas where in-place modification is causing contention.</li><li> Minimize the use of shared mutable state to reduce the need for synchronization.</li><li> Limit the number of concurrent workers to reduce contention.</li></ul><p>Augmented assignment can introduce security vulnerabilities if used with untrusted data. For example, if a user-supplied value is used in an augmented assignment operation on a sensitive object, it could lead to code injection or privilege escalation.  Always validate and sanitize user input before using it in any operation.  Be particularly cautious when deserializing data from untrusted sources.</p><ul><li>  Write unit tests to verify the correctness of augmented assignment operations.</li><li>  Test the interaction of augmented assignment with other components of the system.</li><li><strong>Property-Based Tests (Hypothesis):</strong> Use Hypothesis to generate random inputs and verify that the code behaves correctly under a wide range of conditions.</li><li>  Enforce type safety using mypy.</li><li> Integrate testing and type validation into the CI/CD pipeline.</li></ul><div><pre><code></code></pre></div><h3>\n  \n  \n  Common Pitfalls &amp; Anti-Patterns\n</h3><ol><li> Using mutable default values in function arguments can lead to unexpected behavior with augmented assignment.</li><li> Assuming augmented assignment always modifies the object in-place.</li><li> Using augmented assignment in concurrent code without proper synchronization.</li><li><strong>Overuse of In-Place Modification:</strong>  Excessive in-place modification can lead to increased memory usage and contention.</li><li>  Failing to use type hints can make it difficult to reason about the behavior of augmented assignment.</li></ol><h3>\n  \n  \n  Best Practices &amp; Architecture\n</h3><ul><li>  Always use type hints to improve code clarity and prevent errors.</li><li>  Prefer immutable data structures whenever possible.</li><li>  Separate data manipulation logic from business logic.</li><li>  Validate and sanitize all user input.</li><li>  Design code in a modular way to improve testability and maintainability.</li><li>  Automate testing, type validation, and deployment.</li></ul><p>Augmented assignment is a powerful feature of Python, but it requires careful consideration, especially in production environments. Understanding its nuances, potential pitfalls, and interactions with other tools is crucial for building robust, scalable, and maintainable systems.  Refactor legacy code to use immutable data structures where appropriate, measure performance to identify bottlenecks, write comprehensive tests, and enforce type safety to mitigate risks.  Mastering augmented assignment is not just about knowing the syntax; it‚Äôs about understanding the underlying CPython internals and designing systems that leverage its benefits while avoiding its potential drawbacks.</p>","contentLength":7583,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Deploy Your FastAPI App on Vercel: The Complete Guide","url":"https://dev.to/highflyer910/deploy-your-fastapi-app-on-vercel-the-complete-guide-27c0","date":1751285354,"author":"Thea","guid":176622,"unread":true,"content":"<p>So I was working on this FastAPI project last week and needed to deploy it somewhere. I tried a few different platforms, but Vercel turned out to be simple, much easier than I expected!</p><ul><li>Your FastAPI app(obviously)</li></ul><p>That's it. No need for complicated server setup or Docker stuff.</p><p>First, make sure your FastAPI app is working. Here's my simple example:</p><div><pre><code></code></pre></div><p>Pretty straightforward, right?</p><p>You need a  file so Vercel knows what packages to install:</p><div><pre><code>fastapi==0.104.1\nuvicorn==0.24.0\n</code></pre></div><p>Important: Always pin your versions! Trust me, I learned this the hard way when my app broke because of package updates.</p><p>This part is a bit tricky, but not too bad. Create a  file in your project root:</p><div><pre><code></code></pre></div><p>This tells Vercel, \"hey, this is a Python app, run it like this\".</p><p>Vercel works with ASGI apps (FastAPI is ASGI), but you need to add this:</p><div><pre><code></code></pre></div><div><pre><code>git init\ngit add \ngit commit \ngit remote add origin https://github.com/yourusername/your-repo.git\ngit push  origin main\n</code></pre></div><ol><li>Go to the Vercel dashboard</li><li>Vercel detects it's Python automatically</li></ol><p>And... that's it! No server configuration, no SSL certificates, nothing complicated.</p><p>If you prefer the command line (like me):</p><div><pre><code>\nnpm  vercel\n\n\nvercel login\n\n\nvercel\n</code></pre></div><p>Three commands and you're done!</p><h2>\n  \n  \n  Auto-deployment with GitHub Actions\n</h2><p>Want to deploy automatically when you push code? Here's the workflow file:</p><div><pre><code></code></pre></div><p>After deployment, check these URLs:</p><ul><li><code>https://your-app.vercel.app/</code> - Main page</li><li><code>https://your-app.vercel.app/api/health</code> - Health check</li><li><code>https://your-app.vercel.app/docs</code> - FastAPI docs (this is a cool feature!)</li></ul><h2>\n  \n  \n  Things I learned (the hard way)\n</h2><ul><li>Vercel gives you HTTPS automatically - no need to worry about certificates</li><li>Environment variables are easy to add in the Vercel dashboard</li><li>Every push to main branch = new deployment</li><li>Use  prefix for your routes. Vercel likes it better, especially when you have frontend + backend together</li></ul><p>Don't worry, it happens to everyone:</p><ol><li>Check build logs in the Vercel dashboard - they usually show what's wrong</li><li>Look at your , missing packages cause most problems</li><li>Verify your  configuration</li><li>Test locally first. If it doesn't work on your computer, it won't work on Vercel</li></ol><p>That's it! Your FastAPI app is now running on Vercel's servers worldwide. No need to manage servers or worry about hosting costs (unless you become popular, but that's a good problem to have üòÑ).\nThe whole process takes maybe 10-15 minutes once you know what you're doing. Pretty good for getting your API online, I think!</p>","contentLength":2417,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: Quiz: Use TorchAudio to Prepare Audio Data for Deep Learning","url":"https://realpython.com/quizzes/python-torchaudio/","date":1751284800,"author":"","guid":176602,"unread":true,"content":"<p>You‚Äôll revisit fundamental terminology and how to:</p><ul><li>Install and import TorchAudio</li><li>Load audio waveform datasets</li></ul><p>Work through these questions to check your knowledge about building audio workflows for machine learning in Python.</p>","contentLength":224,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Demystifying Django: How I Learned the Project Structure (Through My Own Debugging Lens)","url":"https://dev.to/zabby/demystifying-django-how-i-learned-the-project-structure-through-my-own-debugging-lens-2929","date":1751280505,"author":"Zabby","guid":176545,"unread":true,"content":"<h2>\n  \n  \n  üß™ Setting Up My Virtual Playground: Virtual Environments on Kali\n</h2><p>Before diving deep into Django, I knew I needed to isolate my Python dependencies. I didn‚Äôt want one project to break another just because they used different versions of a package. So I set up a virtual environment, which felt like creating a clean slate for Django to thrive.</p><p>Here‚Äôs exactly what I did on Kali Linux:</p><p> Installed virtualenv (if not already there) using the command</p><div><pre><code>sudo apt install python3-venv\n</code></pre></div><p> Created a virtual environment in my project folder</p><p>This created a  folder containing an isolated Python environment complete with its own pip, python, and site-packages.</p><p> Activated the virtual environment</p><p>Once activated, my terminal prompt changed (it showed (venv)), and any packages I installed from that point forward were isolated to the project.\nTo deactivate it run the command: </p><h3>\n  \n  \n  To Install Django you run the command:\n</h3><div><pre><code>python -m pip install django             \n</code></pre></div><h2>\n  \n  \n  üìÅ Step One: The Curious Case of the Double Folder\n</h2><div><pre><code>django-admin startproject my_project\n</code></pre></div><div><pre><code>my_project/\n    manage.py\n    my_project/\n        __init__.py\n        settings.py\n        urls.py\n        asgi.py\n        wsgi.py\n</code></pre></div><p>At first glance, the repetition felt like a mistake. But then I realized it‚Äôs deliberate:</p><h2><strong>üß† The Brains of the Operation:</strong> and Friends\n</h2><p>Inside the inner my_project/ folder, I found:: The holy grail of configuration. Middleware, installed apps, static files you name it.</p><p>: Like Django‚Äôs GPS. Every route begins here.</p><p> and : I saw them as protocol translators; one for async, one for traditional web servers.</p><p>Once I edited  to connect my app and saw my static files load correctly, the structure felt alive‚Äînot abstract anymore.</p><h2>\n  \n  \n  ‚öôÔ∏è : My Swiss Army Knife\n</h2><p>I underestimated  at first. It looked like a throwaway script until I used it to:</p><ul><li>Start the development server.</li></ul><p>Now, I think of it as Django‚Äôs command-line gateway to everything project-related.</p><h2> Where the Magic (Actually) Happens\n</h2><div><pre><code>python manage.py startapp blog\n</code></pre></div><p>I got folders for:: My database design sandbox.: Where I learned request and response cycles the hard way.: One of Django's most underrated features‚Äîcustomizing the admin interface became a fun side mission.</p><p>Having multiple apps that plug into a single project showed me how Django scales gracefully without becoming a monolith.</p><h2><strong>üé® Templates, Static, and Media:</strong> The Visual Layer\n</h2><p>It finally clicked that templates aren't just HTML they're Django-aware, with  and  blocks for logic and data. Static files gave me some CSS headaches at first, but once I correctly configured , things smoothed out. And media? It‚Äôs where user uploads go. Simple, but essential for anything dynamic.</p><p>\nLearning Django‚Äôs project structure wasn‚Äôt just about reading docs‚Äîit was about navigating errors, debugging misconfigured paths, and rewriting what I misunderstood the first time. Now, when I open a fresh Django project, it feels less like an unknown directory tree and more like a well-organized toolkit.</p><p>If you‚Äôre just starting with Django, don‚Äôt just copy and paste. Walk through the structure, question everything, and let the architecture teach you how Django thinks.</p>","contentLength":3183,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Django Weblog: Our 2024 Annual Impact Report","url":"https://www.djangoproject.com/weblog/2025/jun/30/django-2024-annual-impact-report/","date":1751277600,"author":"","guid":176526,"unread":true,"content":"<p>Django has always been more than just a web framework; it‚Äôs a testament to what a dedicated community can build together. Behind every Django release, bug fix, or DjangoCon is a diverse network of people working steadily to strengthen our open-source ecosystem. To celebrate our collective effort, the Django Software Foundation (DSF) is excited to share our <a href=\"http://www.djangoproject.com/foundation/reports/2024/\">2024 Annual Impact Report</a> üéâ</p><p>In this report, you‚Äôll discover key milestones, narratives of community folks, the impact of the events running throughout the year, and much more, ramping up to how we‚Äôre laying the groundwork for an even more resilient and inclusive Django community.</p><h3>Why we publish this report</h3><p>Transparency is essential for our community-driven organization. Everyone deserves to know how our work and investments translate into real impact. It‚Äôs more than just statistics. It‚Äôs our way to:</p><ul><li><strong>Show how your contributions make a difference</strong>, with vibrant highlights from the past year.&nbsp;</li><li><strong>Reflect on community progress</strong>, recognizing the people and ideas that keep Django thriving.</li><li><strong>Invite more individuals and organizations to get involved</strong>.</li></ul><h3>Looking ahead: call to action</h3><p>As we make progress through 2025, the Django Software Foundation remains dedicated to strengthening the ecosystem that supports developers, contributors, and users around the world. With a growing network of working groups, community initiatives, and the commitment of volunteers, we‚Äôre focused on nurturing the people and executing ideas that make Django what it is: <em>the web framework for perfectionists with deadlines</em>.&nbsp;</p><p>Help keep this momentum strong by supporting Django through any of the following ways:</p><p>Thank you, everyone, for your dedication and efforts. Here‚Äôs to another year of collaboration, contribution, and shared success!</p>","contentLength":1782,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üêç Python isn‚Äôt just surviving‚Äîit‚Äôs thriving.","url":"https://dev.to/jayesh_malviya_50f3081df5/python-isnt-just-surviving-its-thriving-2jij","date":1751276789,"author":"Jayesh Malviya","guid":176490,"unread":true,"content":"<p>. Readability = Faster Learning\nPython‚Äôs clean, English-like syntax means you spend less time debugging and more time building. Compare:</p><p>def greet(name):\n    print(f\"Hello, {name}!\")</p><p>java\n// Java\n    public static void main(String[] args) {<p>\n        System.out.println(\"Hello, \" + args[0] + \"!\");</p>\n    }</p><ol><li>Jobs, Jobs, Jobs\nAverage Salary (US): $110K+ (Source: Stack Overflow 2023)</li></ol><p>Top Fields: Data Science, AI, Web Dev, Automation</p><p>Who‚Äôs Hiring? Google, Netflix, NASA, and even your local startup.</p><ol><li>Libraries for (Almost) Everything\nWeb Dev: Django, Flask</li></ol><p>Data Science: Pandas, NumPy</p><p>AI/ML: TensorFlow, PyTorch</p><p>Automation: Selenium, BeautifulSoup</p><ol><li>Instant Gratification Projects\nBuild something useful today:</li></ol><p>import requests\nfrom bs4 import BeautifulSoup<p>\nprint(BeautifulSoup(requests.get(\"</p><a href=\"https://dev.to%22).text\">https://dev.to\").text</a>, \"html.parser\").title.text)</p><ol><li>Community Love\n2nd largest Stack Overflow community</li></ol><p>Beginner-friendly forums like r/learnpython</p>","contentLength":918,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 7/100: Booleans and Logical Operators in Python","url":"https://dev.to/therahul_gupta/day-7100-booleans-and-logical-operators-in-python-27n9","date":1751276608,"author":"Rahul Gupta","guid":176489,"unread":true,"content":"<p>Welcome to  of the  series!\nToday, we‚Äôre diving into one of the core foundations of decision-making in programming:  and . These help your code think for itself ‚Äî to make choices, evaluate conditions, and respond accordingly.</p><p>Let‚Äôs understand how Python makes decisions under the hood. üß†</p><ul><li>How Python evaluates conditions</li><li>Logical operators: , , </li><li>How to combine conditions</li></ul><p>A  is a data type that has only :</p><p>These are case-sensitive ( and  will raise an error).</p><p>You can assign them to variables:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  üß† Conditions That Return Booleans\n</h2><p>Python evaluates  and returns either  or .</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Common Comparison Operators:\n</h3><div><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr></tbody></table></div><p>Logical operators allow you to <strong>combine multiple conditions</strong>.</p><h3>\n  \n  \n  1Ô∏è‚É£  ‚Äì All conditions must be </h3><div><pre><code></code></pre></div><h3>\n  \n  \n  2Ô∏è‚É£  ‚Äì At least one condition must be </h3><div><pre><code></code></pre></div><h3>\n  \n  \n  3Ô∏è‚É£  ‚Äì Reverses the boolean value\n</h3><div><pre><code></code></pre></div><p>Let‚Äôs say we‚Äôre checking if someone can get a discount:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  üß™ Bonus: Booleans with Strings and Numbers\n</h2><p>Python treats , like:</p><ul><li>Empty lists, dicts, sets: , , </li></ul><p>Everything else is considered .</p><div><pre><code></code></pre></div><p>This becomes useful in conditions:</p><div><pre><code></code></pre></div><ul><li>The Boolean values  and </li><li>Comparison operators: , , , , , </li><li>Logical operators: , , </li><li>How to evaluate and combine conditions</li><li>Real-world usage in if-statements</li></ul>","contentLength":1205,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Luxury Tents & Desert Stargazing: Rann Utsav's Unique Experiences","url":"https://dev.to/rannutsav/luxury-tents-desert-stargazing-rann-utsavs-unique-experiences-3lee","date":1751275531,"author":"rannutsav","guid":176488,"unread":true,"content":"<p>Rann Utsav is not just a festival; it‚Äôs an ethereal experience carved into the white salt plains of Gujarat‚Äôs Kutch region. Spanning from winter into early spring, this cultural celebration transforms the stark desert into a vibrant, buzzing township. And among its most captivating features are the luxurious tents and the surreal night skies. These elements bring together traditional hospitality, natural beauty, and celestial wonder to offer an unforgettable travel adventure.</p><h2><strong>The Magic of the White Rann</strong></h2><p>What makes this expanse even more magical is how it reflects the changing colours of the sky, especially during sunrise, sunset, and moonlit nights. The Rann Utsav is carefully scheduled to coincide with this seasonal wonder, offering visitors the perfect window to explore the region at its most breathtaking.</p><ul><li>With the terrain glistening under full moonlight and the festive energy in full swing, this desert carnival is best experienced with some planning.</li><li>It‚Äôs crucial to stay informed about the rann utsav last date so you can maximise your trip and not miss out on key attractions.</li></ul><h2><strong>The Luxury Tent Experience</strong></h2><p>Gone are the days when desert travel meant roughing it out. Rann Utsav offers travellers the chance to indulge in well-appointed luxury tents that combine tradition with modern comfort. These tents are set up as part of Tent City Dhordo, an organised village of canvas abodes with proper facilities and beautifully curated interiors.</p><p>Each tent is thoughtfully designed with local Kutchi artwork, handcrafted d√©cor, and modern amenities including comfortable beds, attached bathrooms, and air-conditioning or heating systems depending on the category. Whether you opt for a Deluxe AC Tent or go all out with the Premium options, each stay comes with warm hospitality and round-the-clock service.</p><h2><strong>What‚Äôs Included in the Tent Stay</strong></h2><p>Visitors booking rann of kutch packages that include tent stays can expect:</p><ul><li>Comfortable sleeping arrangements with clean linen and private bathrooms with hot water access\n</li><li>All meals included with a mix of regional and continental cuisine</li><li>Cultural evenings with folk music, dance performances, and local craft exhibitions</li><li>Transfers between Bhuj and the tent city, often with guided sightseeing tours</li><li>Access to shopping stalls, spa services, and art installations within the tent campus</li></ul><p>Tent City has been planned to offer a seamless luxury desert experience, whether you‚Äôre a solo traveller, a couple on a romantic retreat, or a family on a cultural getaway.</p><p>Kutch is one of the greatest places in India to see stars because of its isolated location and clear skies. As the sun sets and the cultural festivities fade at Rann Utsav, the desert transforms into a boundless natural observatory. You can see constellations, shooting stars, and even planetary alignments with the unaided eye because there isn't any urban light pollution.</p><p>Some tents also offer guided stargazing sessions where astronomy enthusiasts walk guests through the celestial wonders using telescopes.</p><h2><strong>Best Time for Stargazing in Rann</strong></h2><ul><li>Clear skies from November to February provide ideal visibility</li><li>Full moon nights offer dramatic reflections on the salt desert</li><li>Early morning hours before sunrise often offer the clearest views</li><li>Avoid cloudy nights or periods around monsoon closure</li></ul><p>It‚Äôs worth checking the lunar calendar when booking your visit to align with nights ideal for both moonlit desert walks and starry skies. This not only enhances your stargazing experience but makes for excellent travel photography too.</p><h2><strong>Cultural Activities under the Stars</strong></h2><p>Picture yourself sitting under an open canopy, with performers dancing to the beat of dhols as the wind rustles across the tent city. Fire dances, puppet shows, and local theatre are often part of the evening itinerary.</p><p>These performances not only provide insight into Gujarat‚Äôs vibrant heritage but also create a setting that makes your desert night feel intimate and soulful. Dining under the stars while soaking in live music adds an unmissable charm to the overall Rann Utsav vibe.</p><h2><strong>Other Unique Experiences Not to Miss</strong></h2><p>When planning your visit before the rann utsav last date, try to include the following one-of-a-kind experiences in your itinerary:</p><ul><li> Soar above the salt plains for panoramic views, especially during sunrise\n</li><li> A peaceful ride across the sands, often during sunset, to remote viewing points\n</li><li> Explore stalls and exhibitions where artisans showcase textiles, leatherwork, and silverware\n</li><li> Visit nearby villages like Nirona and Bhujodi, or attractions like Kala Dungar for scenic views</li></ul><p>Each of these elements adds a layer of cultural and scenic richness to your journey, helping you explore both the desert and the heart of Gujarat.</p><h2><strong>Booking Tips and Travel Advice</strong></h2><p>To enjoy this desert escape to the fullest, consider these suggestions while planning your trip:</p><ul><li> Luxury tents sell out quickly, especially on weekends and full moon nights\n</li><li> Choose rann of kutch packages that include guided tours and cultural programmes\n</li><li> Desert weather can shift from hot afternoons to chilly nights, so pack accordingly\n</li><li> Bring essentials like sunscreen, moisturiser, and a good camera</li></ul><p>Remember to also check for any package discounts or deals that may be available on the official website as part of your planning process.</p><h2><strong>Why This Experience is Worth It</strong></h2><p>Spending a few days in the White Desert during Rann Utsav is more than just sightseeing. It‚Äôs a soulful escape where luxury meets tradition, and modern hospitality is wrapped in earthy experiences. The ability to wake up to white sands and end the day gazing at galaxies gives Rann Utsav its unique identity among travel destinations in India.</p><p>It is not merely a festival, but an opportunity to reconnect with nature, appreciate culture, and indulge in luxury‚Äîall in one unforgettable package.</p><p>For those seeking a travel experience that is equal parts cultural immersion and celestial wonder, Rann Utsav delivers flawlessly. Whether you are drawn to the luxurious tent stays or enchanted by the starlit skies above the salt desert, this annual event offers a magical blend of serenity, tradition, and luxury. To make the most of your journey, plan ahead, pick the right package, and don‚Äôt miss the closing dates. For a truly seamless and enriching trip, consider booking through Rann Utsav, your trusted partner in curating bespoke desert adventures.</p>`\n\n","contentLength":6361,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Quark‚Äôs Outlines: Python None","url":"https://dev.to/mike-vincent/quarks-outlines-python-none-5d9e","date":1751274000,"author":"Mike Vincent","guid":176465,"unread":true,"content":"<p><em>Overview, Historical Timeline, Problems &amp; Solutions</em></p><h2>\n  \n  \n  An Overview of Python None\n</h2><p>When you write Python code, you sometimes want to show that something is empty or missing. You use the word  for that.  is a built-in constant that stands for \"no value.\"</p><p>In English, you might answer ‚Äúnone‚Äù when someone asks how many apples you have. Python uses the word the same way to show that a value is not there.</p><p><strong>Python lets you store missing or empty values with .</strong></p><div><pre><code></code></pre></div><p>The name  now refers to the object , which means nothing has been stored yet.</p><h3>\n  \n  \n  How does Python use None?\n</h3><p>Python returns  when a function does not return anything else. You can also use  to show that a variable is not set yet. This helps keep your program clear and predictable.</p><p><strong>Python returns  when a function has no return value.</strong></p><div><pre><code></code></pre></div><p>The function prints a greeting but does not return a value. So Python returns .</p><h3>\n  \n  \n  Is Python None a value or a type?\n</h3><p>In Python,  is both a value and an object. It has its own type called . This type only has one value: .</p><p>You can check if a value is  using the  keyword. This checks if something is the exact same object as .</p><p><strong>Python uses the  keyword to check for .</strong></p><div><pre><code></code></pre></div><p>Use  to compare, not , to be more exact.</p><h3>\n  \n  \n  Is Python None true or false?\n</h3><p>The value  counts as false in a condition. That means if you write , Python will treat it like .</p><p>This makes it easy to check if something is missing or empty by testing it in a condition.</p><p><strong>Python treats  as false in a condition.</strong></p><div><pre><code></code></pre></div><p>This behavior helps your program skip or exit when a needed value is not present.</p><h2>\n  \n  \n  A Historical Timeline of Python None\n</h2><p><strong>Where did Python‚Äôs  come from?</strong></p><p>Python's  was designed to clearly show the absence of a value. This idea came from earlier languages and logic systems. Over time,  became a stable, simple way to say ‚Äúnothing here.‚Äù</p><h3>\n  \n  \n  People created special constants for \"no value\"\n</h3><p><strong>1960 ‚Äî Logical null in Lisp</strong>: Used  to show the end of a list or no result.<strong>1970 ‚Äî Null pointers in C</strong>: Used  as a placeholder when no memory was assigned.</p><h3>\n  \n  \n  People designed Python's version of null\n</h3><p>: Introduced  as a built-in name for \"no value.\": Began using  more clearly in function returns and empty defaults.</p><h3>\n  \n  \n  People made Python None more consistent\n</h3><p>: Locked  as a constant. You can no longer reassign it.: Keeps  stable as the one true null value.</p><h2>\n  \n  \n  Problems &amp; Solutions with Python None\n</h2><p><strong>How do you use Python None the right way?</strong></p><p>You often need a way to say \"nothing yet\" in your code. Python gives you  to do that. These problems show when and how to use it.</p><h3>\n  \n  \n  Problem: How do you show a value is not set yet in Python?\n</h3><p>You are writing a quiz game. The player has not chosen an answer yet. You want to save that in a way the program can check.</p><p> You try using  or , but those are real values. You need a way to say ‚Äúnothing selected.‚Äù</p><p> Use  as a placeholder until a real answer is chosen.</p><p><strong>Python lets you mark unset values with .</strong></p><div><pre><code></code></pre></div><p>This keeps your code clean and avoids confusion between ‚Äúno answer‚Äù and ‚Äúwrong answer.‚Äù</p><h3>\n  \n  \n  Problem: How do you return nothing from a function in Python?\n</h3><p>You write a function that prints a message but should not return any value.</p><p> You forget to add a return line. You wonder what the function gives back.</p><p> Python automatically returns  if no return is written.</p><p><strong>Python returns  from functions without a return line.</strong></p><div><pre><code></code></pre></div><p>This shows that Python gives back  unless told otherwise.</p><h3>\n  \n  \n  Problem: How do you check if a result was found in Python?\n</h3><p>You write a function that looks for a user. If the user is not found, you want to say so.</p><p> You use an empty string or zero, but these might be real usernames or values.</p><p> Return  when no match is found. Then check using .</p><p><strong>Python lets you check for missing results using .</strong></p><div><pre><code></code></pre></div><p>Using  shows clearly that the user was not found.</p><h3>\n  \n  \n  Problem: How do you skip a value in a list in Python?\n</h3><p>You are looping through items. Some items should be skipped or ignored.</p><p> You try to use  or , but those are valid values. You need a better way.</p><p> Mark unwanted items as , then skip them with .</p><p><strong>Python lets you skip missing values marked as .</strong></p><div><pre><code></code></pre></div><p>This helps you filter out missing items safely.</p><h3>\n  \n  \n  Problem: How do you properly compare with None in Python?\n</h3><p>You want to test if a value is , but you write .</p><p> This works but is not always safe. Python can compare values in a way that gives false matches.</p><p> Use  to compare objects directly.</p><p><strong>Python uses  to compare a value with .</strong></p><div><pre><code></code></pre></div><p>This keeps your comparisons clear and correct.</p><h2>\n  \n  \n  Like, Comment, Share, and Subscribe\n</h2><p>Did you find this helpful? Let me know by clicking the like button below. I'd love to hear your thoughts in the comments, too! If you want to see more content like this, don't forget to subscribe. Thanks for reading!</p>","contentLength":4733,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Kleos CLI: Mindsdb Knowledge Base supercharged","url":"https://dev.to/yashksaini/kleos-cli-mindsdb-knowledge-base-supercharged-1a83","date":1751273211,"author":"Yash Kumar Saini","guid":176443,"unread":true,"content":"<p>Okh so lets begin with the important context, currently there is constant evolution going on in the world of AI agents, and there is large amount of unstructured raw data which keeps on increasing, developers need to constantly simplify complex data and accelerate AI workflows to manage this whole data, so they seek help from  tools and frameworks that can make thier task easy. With many different database sources, and formats available storing them, managing them and running SQL queries to use them. All of this is very tedious work, one that requires accuracy and fast results.</p><p>The perfect solution for this, is the new <a href=\"https://docs.mindsdb.com/mindsdb_sql/knowledge-bases\" rel=\"noopener noreferrer\">Knowledge Base</a> :- an an advance system that organizes data with its actual meaning not by just cross matching the frequent words or important keywords. </p><ul><li><p>MindsDB's new Knowledge Base organizes data by its actual meaning, not just by the keywords or frequent words matching</p></li><li><p>It Supports semantic search with context-aware retrieval</p></li><li><p>Handles various data sources like databases, CSV, text, and many other integrations like Youtube, <a href=\"https://news.ycombinator.com/\" rel=\"noopener noreferrer\">Hackernews</a></p></li><li><p>Utilizes embedding models, re-ranking models, and vector stores to create embeddings to provide context data retrieval.</p></li><li><p>Enables intelligent querying and meaningful data discovery</p></li></ul><p>To make interacting with MindsDB's powerful features even more intuitive and efficient, especially its cutting-edge Knowledge Base and AI Agent functionalities, I developed . Kleos (a greek word which summaries, <em>The enduring transmission of meaningful, wise knowledge ‚Äî curated, remembered, and used across time.</em>) is a Python-based async command-line interface designed to be your trusty companion for using the MindsDB Knowledge Base.</p><p>Every system has its  ‚Äî its final cause or purpose. This CLI fulfills the purpose of MindsDB's Knowledge Base: to seek, structure, and serve insight through intelligent agents. Kleos aims to streamline the process of building and managing these intelligent systems directly from your terminal.</p><p>This article will walk you through Kleos CLI, highlighting its key features and demonstrating how it leverages MindsDB KB to help you build powerful AI-driven applications with ease.</p><h2>\n  \n  \n  Core Philosophy: SQL as the Language of AI\n</h2><p>One of MindsDB's foundational principles, which Kleos has integrated at root level, is the use of SQL as the primary language for AI development. Instead of requiring developers to learn complex machine learning libraries or manage separate MLOps pipelines for many common tasks, MindsDB allows you to:</p><ul><li><strong>Connect to diverse data sources:</strong> From your existing databases to SaaS applications and file storages.</li><li> Train models for tasks like classification, regression, time series forecasting, and even interact with large language models (LLMs) for generative tasks.</li><li> Create semantic search capabilities over your textual data.</li><li> Combine LLMs with your data and KBs to create intelligent assistants.</li><li><strong>Query Predictions and Insights:</strong> Fetch predictions and insights as if you were querying a regular database table.</li></ul><p>All of this achieved by using SQL extensions. Kleos CLI acts as a convenient and powerful interface to execute these SQL commands, manage your MindsDB resources, and automate workflows, making the power of in-database AI more accessible than ever. We've built Kleos using Python, <a href=\"https://click.palletsprojects.com/\" rel=\"noopener noreferrer\">Click</a> for robust command-line parsing, and <a href=\"https://rich.readthedocs.io/\" rel=\"noopener noreferrer\">Rich</a> for beautiful, informative terminal output.</p><h3>\n  \n  \n  Key Features of Kleos &amp; MindsDB in Action\n</h3><p>Kleos provides a comprehensive suite of commands to manage various aspects of your MindsDB environment. Here‚Äôs a look at some core functionalities:</p><h3>\n  \n  \n  1. Seamless Setup ()\n</h3><p>Getting started often involves connecting to your data. MindsDB excels at integrating with numerous data sources. Kleos helps you quickly set up common datasources. For instance, the HackerNews datasource, a popular source for real-time discussions and articles, can be configured with a single command:</p><div><pre><code>kleos setup hackernews  my_hackernews_data\n</code></pre></div><p>This simple command tells MindsDB to create a connection named  that can query HackerNews directly. Kleos ensures this process is smooth, even creating the datasource if it doesn't already exist when you try to use it in other commands.</p><h3>\n  \n  \n  2. Knowledge Bases (KBs) - The Heart of Kleos ()\n</h3><p>Knowledge Bases are a cornerstone of MindsDB's recent advancements, allowing you to embed and search large volumes of text data semantically. Kleos provides extensive support for managing KBs.</p><p><strong>a. Creating Knowledge Bases ()</strong></p><p>You can easily create a new KB, specifying the underlying embedding models (to convert text to vectors) and optional reranking models (to improve search result relevance). Kleos supports models from various providers like Ollama (for local LLMs) and Google Gemini.</p><div><pre><code>\n\nkleos kb create gemini_ollama_kb  ollama  nomic-embed-text  gemini  gemini-2.0-flash  YOUR_GOOGLE_API_KEY </code></pre></div><p>Kleos handles the construction of the  SQL, including the JSON parameters for model configurations.</p><p><strong>b. Ingesting Data ()</strong></p><p>Once a KB is created, you need to populate it. Kleos simplifies data ingestion, especially from structured sources like the HackerNews tables.</p><div><pre><code>\nkleos kb ingest my_hn_kb  stories  100  my_hackernews_data\n</code></pre></div><p>For more control, you can specify which columns map to your KB's content and metadata:</p><div><pre><code>kleos kb ingest my_custom_kb  comments\n   my_hackernews_data\n   200\n</code></pre></div><p>This command translates to an <code>INSERT INTO ... SELECT ...</code> statement, efficiently loading data into your KB.</p><p><strong>c. Semantic Search ()</strong></p><p>The true power of KBs lies in semantic search. Kleos allows you to query your KBs using natural language, with options for metadata filtering:</p><div><pre><code>\nkleos kb query my_docs_kb \nkleos kb query product_reviews_kb  5\n</code></pre></div><p>The  accepts a JSON string, enabling powerful, targeted queries by combining vector search with traditional attribute filtering.</p><h3>\n  \n  \n  3. AI Agents - Your Intelligent Assistants (, )\n</h3><p>MindsDB allows you to create AI Agents that combine the power of Large Language Models (LLMs) with the contextual knowledge stored in your KBs and databases. Kleos makes agent creation and interaction straightforward.</p><p><strong>a. Creating Agents ()</strong></p><p>Define an agent, link it to one or more KBs, and specify the LLM it should use:</p><div><pre><code>\nkleos kb create-agent product_support_agent \n   gemini-2.0-flash \n  </code></pre></div><p>You can also include regular database tables for additional context and pass other parameters like temperature or API keys.</p><p><strong>b. Querying Agents ()</strong></p><p>Once created, interact with your agent using natural language:</p><div><pre><code>kleos kb query-agent product_support_agent </code></pre></div><p>The agent will leverage its LLM and the content from  to provide an answer.</p><h3>\n  \n  \n  4. AI Models / Generative AI Tables ()\n</h3><p>Beyond KBs and Agents, Kleos helps you manage MindsDB's powerful AI Models (often referred to as Generative AI Tables). These models are trained on your data using SQL and can perform a variety of tasks.</p><p><strong>a. Creating AI Models from Data ()</strong></p><p>Train a model directly from a SQL query. For example, to create a model that summarizes HackerNews story titles:</p><div><pre><code>kleos ai create-model title_summarizer\n   title_summary\n   google\n   api_key YOUR_GOOGLE_API_KEY\n   model_name gemini-2.0-flash\n</code></pre></div><p>This creates a queryable  model. You can then select from it, providing new titles to get summaries. Kleos supports listing, describing, refreshing, and dropping these models too.</p><h3>\n  \n  \n  5. Automation with MindsDB Jobs ()\n</h3><p>Repetitive tasks like data ingestion or model retraining can be automated using MindsDB Jobs. Kleos provides commands to manage these jobs.</p><p><strong>a. Creating Jobs (, <code>kleos job update-hn-refresh</code>)</strong></p><p>For instance, to create a job that updates your HackerNews data daily:</p><div><pre><code>kleos job update-hn-refresh daily_hn_data_update </code></pre></div><p>Or, create a custom job with any SQL statements:</p><div><pre><code>kleos job create nightly_kb_update\n  </code></pre></div><p>Kleos also allows you to list, check the status/history of, and drop jobs, giving you full control over your automated workflows. This combination aims to make the Kleos not just powerful but also pleasant to use.</p><h2>\n  \n  \n  Why This Matters: The Power of In-Database AI &amp; Kleos's Role\n</h2><p>The ability to perform complex AI/ML tasks directly within your database using SQL, as enabled by MindsDB, is a game-changer. It democratizes AI by lowering the barrier to entry and streamlines workflows by keeping data and intelligence in one place.</p><p>Kleos CLI aims to be a key enabler in this ecosystem by providing:</p><ul><li> A user-friendly command-line tool that makes MindsDB's advanced features easy to discover and use.</li><li> Simplifying common tasks like KB management, agent creation, and job automation.</li><li> Facilitating local development and rapid prototyping with tools like the provided Docker Compose setup.</li></ul><p>Whether you're building RAG (Retrieval Augmented Generation) applications, AI saas application, or AI agents workflows, creating custom chatbots, automating data insights, or simply exploring the potential of in-database AI, Kleos and MindsDB offer a powerful combination. </p><p>Kleos CLI is an open-source project, and your contributions and feedback are highly welcome!</p><ul><li><div><div><div><p>This project provides a powerful Command Line Interface (CLI) for interacting with MindsDB, with a special focus on its Knowledge Base features and AI Agent integration. It also includes a suite of scripts for performance benchmarking, stress testing, and evaluating MindsDB's reranking capabilities.</p><ul><li><ul><li>Manage MindsDB datasources (e.g., setup HackerNews).</li><li>Create, index, and query Knowledge Bases.</li><li>Ingest data into Knowledge Bases from sources like HackerNews.</li><li>Create and query AI Agents linked to Knowledge Bases (e.g., using Google Gemini).</li><li>Automate ingestion using MindsDB Jobs.</li><li>Create and query general AI models/tables (e.g., using Google Gemini for classification).</li></ul></li><li><p><strong>Reporting Scripts ()</strong>:</p><ul><li>: Measure ingestion times and query latencies.</li><li>: Test system stability under heavy load.</li><li>: Compare search results with and without reranking.</li></ul></li><li><p>: Includes a  to build and run‚Ä¶</p></li></ul></div></div></div></li><li><p> You can clone the repo and install it locally on your machine using  You can install the cli by running the command . While writing this article, this feature is in work and will be available very soon.</p></li></ul><p>At present, the kleos depends on mindsdb docker-extension &amp; gemini for llm proider, but journey of Kleos is just beginning. Future enhancements could include even richer interactive experiences, more detailed reporting outputs, and support for a wider array of MindsDB's evolving features. </p><p>Thanks for sticking to the end of article. This project took a lot fo heart, research, and all-nighter and late nights snacks too. </p><p>Will appreciate your support, and ‚≠ê the <a href=\"https://dev.to/yashksaini/kleos-cli-mindsdb-knowledge-base-supercharged-1a83\">Kleos</a> project. See you all next time.</p>","contentLength":10488,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How HSBC is Navigating Global Markets with Sustainable Finance Initiatives?","url":"https://dev.to/visonaryvoguesmagazine/how-hsbc-is-navigating-global-markets-with-sustainable-finance-initiatives-21fp","date":1751272682,"author":"visionary vogues magazine","guid":176442,"unread":true,"content":"<p>How HSBC is Navigating Global Markets with Sustainable Finance Initiatives?</p><p>In the <a href=\"https://www.visionaryvogues.com/\" rel=\"noopener noreferrer\">realm of global finance</a>, sustainability has emerged as a crucial factor in shaping investment strategies and corporate practices. HSBC, one of the world's largest banking and financial services organizations, is at the forefront of integrating sustainability into its financial practices. This article examines HSBC's approach to sustainable finance, the initiatives it has undertaken, and the impact of these efforts on global markets.</p><ol><li>HSBC‚Äôs Commitment to Sustainability\nHSBC's commitment to sustainability is deeply embedded in its corporate strategy. The bank recognizes that environmental, social, and governance (ESG) factors are essential to long-term financial performance and economic stability. HSBC‚Äôs sustainability strategy is centered around three main pillars: financing sustainable growth, managing environmental impact, and supporting communities and economic development.\na. Financing Sustainable Growth\nHSBC aims to support the transition to a more sustainable global economy by financing projects and investments that promote environmental sustainability and social responsibility. The bank‚Äôs financing activities are aligned with its goal to facilitate the flow of capital towards sustainable investments and innovations.\nb. Managing Environmental Impact\nHSBC is committed to minimizing its own environmental footprint. This includes reducing its carbon emissions, conserving energy, and managing waste effectively. The bank's internal sustainability practices reflect its broader commitment to environmental stewardship.\nc. Supporting Communities and Economic Development\nHSBC supports various community initiatives and economic development programs that contribute to social well-being and economic resilience. By investing in projects that enhance social infrastructure and promote inclusive growth, the bank aims to create positive social impacts.</li><li>Sustainable Finance Framework\nHSBC has established a robust framework for sustainable finance that guides its investment and lending practices. This framework encompasses several key elements:</li></ol><p>a. Green and Sustainable Bonds\nHSBC is a significant player in the green and sustainable bond market. The bank issues and underwrites green bonds that fund projects with positive environmental impacts, such as renewable energy, energy efficiency, and sustainable infrastructure. HSBC‚Äôs involvement in this market supports the growth of sustainable finance and helps channel capital towards projects that address climate change and environmental degradation.<p>\nb. Sustainability-Linked Loans</p>\nSustainability-linked loans (SLLs) are another key component of HSBC‚Äôs sustainable finance framework. SLLs are loans where the interest rates are linked to the borrower‚Äôs performance on sustainability targets. This structure incentivizes borrowers to achieve their sustainability goals, such as reducing carbon emissions or improving environmental practices, while benefiting from potentially lower borrowing costs.<p>\nc. Integration of ESG Factors</p>\nHSBC integrates ESG factors into its investment decision-making process. The bank evaluates the environmental and social impacts of its investments and lending activities to ensure they align with sustainability goals. This approach helps mitigate risks associated with ESG issues and supports the development of sustainable investment portfolios.<p>\nd. Alignment with International Standards</p>\nHSBC aligns its sustainability practices with international standards and frameworks, such as the United Nations Sustainable Development Goals (SDGs) and the Paris Agreement. By adhering to these global standards, HSBC ensures that its sustainable finance initiatives contribute to broader international efforts to address climate change and promote sustainable development.</p><ol><li>Key Initiatives and Projects\nHSBC has undertaken several significant initiatives and projects to advance its sustainability agenda. These initiatives highlight the bank‚Äôs commitment to integrating sustainability into its financial practices and driving positive change.</li></ol><p>a. HSBC‚Äôs Commitment to Net Zero\nOne of HSBC‚Äôs most ambitious sustainability goals is to achieve net-zero carbon emissions by 2050. The bank has set interim targets to reduce its operational carbon footprint and align its financing activities with the goal of limiting global warming to 1.5 degrees Celsius. HSBC is working to transition its investment portfolio and lending activities to support a low-carbon economy.<p>\nb. Green Infrastructure Investment</p>\nHSBC is actively involved in financing green infrastructure projects that promote sustainable development. This includes investments in renewable energy, energy-efficient buildings, and sustainable transportation systems. By supporting these projects, HSBC contributes to the development of resilient and environmentally friendly infrastructure.<p>\nc. Support for Sustainable Agriculture</p>\nHSBC is also engaged in financing sustainable agriculture initiatives. The bank provides funding for projects that enhance agricultural productivity while minimizing environmental impacts. This includes supporting practices such as sustainable farming, water conservation, and soil management.<p>\nd. Community Development and Social Impact</p>\nIn addition to environmental initiatives, HSBC invests in community development and social impact projects. The bank supports programs that address social inequalities, promote financial inclusion, and enhance educational opportunities. These initiatives contribute to the overall well-being of communities and support sustainable economic development.</p><ol><li>Impact on Global Markets\nHSBC‚Äôs sustainable finance initiatives have had a significant impact on global markets, influencing investment practices, financial regulations, and corporate behaviors.</li></ol><p>a. Driving Growth in Sustainable Finance\nHSBC‚Äôs leadership in sustainable finance has contributed to the growth of the green and sustainable bond markets. By issuing and underwriting green bonds, the bank has helped to establish a robust market for sustainable investments. This, in turn, has encouraged other financial institutions to adopt similar practices and invest in sustainable projects.<p>\nb. Setting Industry Standards</p>\nHSBC‚Äôs approach to sustainable finance has set industry standards and served as a model for other banks and financial institutions. The bank‚Äôs integration of ESG factors, alignment with international standards, and commitment to net-zero emissions have influenced the development of best practices in the industry. This has helped drive the adoption of sustainable finance practices across the global financial sector.<p>\nc. Influencing Regulatory Developments</p>\nHSBC‚Äôs focus on sustainability has also influenced regulatory developments in financial markets. The bank‚Äôs alignment with international frameworks and standards has contributed to the formulation of regulations and guidelines that promote sustainable finance. HSBC‚Äôs efforts support the broader regulatory push towards greater transparency, accountability, and integration of ESG factors in financial practices.<p>\nd. Promoting Corporate Responsibility</p>\nHSBC‚Äôs commitment to sustainability has reinforced the importance of corporate responsibility and environmental stewardship. The bank‚Äôs initiatives highlight the role of financial institutions in addressing global challenges such as climate change, social inequality, and environmental degradation. This emphasis on corporate responsibility has encouraged other companies to adopt similar practices and contribute to sustainable development.</p><ol><li>Challenges and Future Outlook\nWhile HSBC‚Äôs sustainable finance initiatives have achieved notable successes, the bank faces several challenges in its sustainability journey.\na. Balancing Short-Term and Long-Term Goals\nOne challenge is balancing short-term financial performance with long-term sustainability goals. As HSBC transitions to a low-carbon economy and integrates ESG factors into its financial practices, the bank must navigate potential trade-offs between immediate financial returns and long-term sustainability objectives.\nb. Ensuring Accurate Reporting and Transparency\nAccurate reporting and transparency are critical to maintaining credibility and trust in sustainable finance. HSBC must ensure that its sustainability reporting reflects genuine progress and adheres to industry standards. This includes providing clear and verifiable information about the environmental and social impacts of its investments and lending activities.\nc. Addressing Evolving Market Demands\nThe sustainable finance landscape is continually evolving, with new trends, technologies, and regulations emerging. HSBC must stay agile and adapt to these changes to remain at the forefront of sustainable finance. This includes embracing new innovations, addressing evolving investor expectations, and responding to regulatory developments.\nd. Enhancing Global Collaboration\nSustainable finance requires global collaboration and coordination. HSBC must work with governments, regulators, investors, and other stakeholders to address global challenges and promote sustainable development. Strengthening partnerships and fostering collaboration will be essential for achieving collective sustainability goals.\nConclusion\nHSBC‚Äôs approach to integrating sustainability into its financial practices has positioned it as a leader in the global financial sector. Through its commitment to sustainable finance, robust framework, and key initiatives, the bank is driving positive change and influencing global markets. HSBC‚Äôs efforts in financing sustainable growth, managing environmental impacts, and supporting communities contribute to a more sustainable and resilient global economy. As the financial industry continues to evolve, HSBC‚Äôs leadership in sustainable finance will play a crucial role in shaping the future of finance and addressing the world‚Äôs most pressing challenges.\nUncover the latest trends and insights with our articles on Visionary Vogues</li></ol>","contentLength":10099,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Bytes: #438 Motivation time","url":"https://pythonbytes.fm/episodes/show/438/motivation-time","date":1751270400,"author":"","guid":177050,"unread":true,"content":"<article>&lt;strong&gt;Topics covered in this episode:&lt;/strong&gt;&lt;br&gt;\n\n&lt;ul&gt;\n\t&lt;li&gt;&lt;em&gt;* &lt;a href=\"https://www.pythonmorsels.com/articles/cheat-sheet/?featured_on=pythonbytes\"&gt;Python Cheat Sheets from Trey Hunner&lt;/a&gt;&lt;/em&gt;*&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;* &lt;a href=\"https://automatisch.io?featured_on=pythonbytes\"&gt;Automatisch&lt;/a&gt;&lt;/em&gt;*&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;* &lt;a href=\"https://github.com/hbmartin/mureq-typed?featured_on=pythonbytes\"&gt;mureq-typed&lt;/a&gt;&lt;/em&gt;*&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;* &lt;a href=\"https://frankwiles.com/posts/my-cli-world/?featured_on=pythonbytes\"&gt;My CLI World&lt;/a&gt;&lt;/em&gt;*&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Extras&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Joke&lt;/strong&gt;&lt;/li&gt;\n\n&lt;/ul&gt;&lt;a href='https://www.youtube.com/watch?v=CJdZvyoftDE' style='font-weight: bold;'data-umami-event=\"Livestream-Past\" data-umami-event-episode=\"438\"&gt;Watch on YouTube&lt;/a&gt;&lt;br&gt;\n\n&lt;p&gt;&lt;strong&gt;About the show&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Sponsored by&lt;/strong&gt; &lt;strong&gt;Posit:&lt;/strong&gt; &lt;a href=\"https://pythonbytes.fm/connect\"&gt;pythonbytes.fm/connect&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Connect with the hosts&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Michael: &lt;a href=\"https://fosstodon.org/@mkennedy\"&gt;@mkennedy@fosstodon.org&lt;/a&gt; / &lt;a href=\"https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes\"&gt;@mkennedy.codes&lt;/a&gt; (bsky)&lt;/li&gt;\n&lt;li&gt;Brian: &lt;a href=\"https://fosstodon.org/@brianokken\"&gt;@brianokken@fosstodon.org&lt;/a&gt; / &lt;a href=\"https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes\"&gt;@brianokken.bsky.social&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Show: &lt;a href=\"https://fosstodon.org/@pythonbytes\"&gt;@pythonbytes@fosstodon.org&lt;/a&gt; / &lt;a href=\"https://bsky.app/profile/pythonbytes.fm\"&gt;@pythonbytes.fm&lt;/a&gt; (bsky)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Join us on YouTube at &lt;a href=\"https://pythonbytes.fm/stream/live\"&gt;&lt;strong&gt;pythonbytes.fm/live&lt;/strong&gt;&lt;/a&gt; to be part of the audience. Usually &lt;strong&gt;Monday&lt;/strong&gt; at 10am PT. Older video versions available there too.&lt;/p&gt;\n\n&lt;p&gt;Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to &lt;a href=\"https://pythonbytes.fm/friends-of-the-show\"&gt;our friends of the show list&lt;/a&gt;, we'll never share it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Brian #1: &lt;a href=\"https://www.pythonmorsels.com/articles/cheat-sheet/?featured_on=pythonbytes\"&gt;Python Cheat Sheets from Trey Hunner&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Some fun sheets\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://www.pythonmorsels.com/string-formatting/?featured_on=pythonbytes\"&gt;Python f-string tips &amp;amp; cheat sheets&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://www.pythonmorsels.com/pathlib-module/?featured_on=pythonbytes\"&gt;Python's pathlib module&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://www.pythonmorsels.com/cli-tools/?featured_on=pythonbytes\"&gt;Python's many command-line utilities&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Michael #2: &lt;a href=\"https://automatisch.io?featured_on=pythonbytes\"&gt;Automatisch&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Open source Zapier alternative&lt;/li&gt;\n&lt;li&gt;Automatisch helps you to automate your business processes without coding.&lt;/li&gt;\n&lt;li&gt;Use their affordable cloud solution or self-host on your own servers.&lt;/li&gt;\n&lt;li&gt;Automatisch allows you to store your data on your own servers, good for companies dealing with sensitive user data, particularly in industries like healthcare and finance, or those based in Europe bound by General Data Protection Regulation (GDPR).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Michael #3: &lt;a href=\"https://github.com/hbmartin/mureq-typed?featured_on=pythonbytes\"&gt;mureq-typed&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Single file, zero-dependency alternative to requests. Fully typed. Modern Python tooling.&lt;/li&gt;\n&lt;li&gt;Typed version of mureq (covered in 2022 on episode 268)&lt;/li&gt;\n&lt;li&gt;Intended to be vendored in-tree by Linux systems software and other lightweight applications.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;mureq-typed&lt;/code&gt; is a drop-in, fully API compatible replacement for mureq updated with modern Python tooling:&lt;/li&gt;\n&lt;li&gt;Type checked with mypy, ty, and pyrefly.&lt;/li&gt;\n&lt;li&gt;Formatted with black, no ignore rules necessary.&lt;/li&gt;\n&lt;li&gt;Linted with ruff (add &lt;a href=\"https://github.com/hbmartin/mureq-typed/blob/master/ruff.toml#L11\"&gt;these rules&lt;/a&gt; for &lt;code&gt;mureq.py&lt;/code&gt; to your &lt;code&gt;per-file-ignores&lt;/code&gt;).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Brian #4: &lt;a href=\"https://frankwiles.com/posts/my-cli-world/?featured_on=pythonbytes\"&gt;My CLI World&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Frank Wiles&lt;/li&gt;\n&lt;li&gt;Encouragement to modify your command line environment&lt;/li&gt;\n&lt;li&gt;Some of Franks tools\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://direnv.net?featured_on=pythonbytes\"&gt;direnv&lt;/a&gt;, &lt;a href=\"https://github.com/ajeetdsouza/zoxide?featured_on=pythonbytes\"&gt;zoxide&lt;/a&gt;, &lt;a href=\"https://github.com/sharkdp/fd?featured_on=pythonbytes\"&gt;fd&lt;/a&gt;, &lt;a href=\"https://beyondgrep.com/documentation/?featured_on=pythonbytes\"&gt;ack&lt;/a&gt;, &lt;a href=\"https://atuin.sh?featured_on=pythonbytes\"&gt;atuin&lt;/a&gt;, &lt;a href=\"https://just.systems/man/en/?featured_on=pythonbytes\"&gt;just&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Also some aliases, like &lt;a href=\"https://frankwiles.com/posts/two-handy-git-aliases/?featured_on=pythonbytes\"&gt;gitpulllog&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Notes\n&lt;ul&gt;\n&lt;li&gt;We covered &lt;a href=\"https://poethepoet.natn.io/index.html?featured_on=pythonbytes\"&gt;poethepoet&lt;/a&gt; recently, if just just isn‚Äôt cutting it for you.&lt;/li&gt;\n&lt;li&gt;I tried to ilke starship, bit for some reason with my setup, it slows down the shell too much.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Extras&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Brian:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Interesting read of the week: &lt;a href=\"https://phys.org/news/2025-06-theory-dimensions-space-secondary-effect.html?featured_on=pythonbytes\"&gt;&lt;strong&gt;New theory proposes time has three dimensions, with space as a secondary effect&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Michael's: &lt;a href=\"https://phys.org/news/2025-05-quantum-theory-gravity-sought-crucial.html?featured_on=pythonbytes\"&gt;&lt;strong&gt;New quantum theory of gravity brings long-sought 'theory of everything' a crucial step closer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Joke:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Brian read a few quotes from the book &lt;/p&gt;\n\n&lt;p&gt;Disappointing Affirmations, by Dave Tarnowski&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;‚ÄúYou are always just a moment away from your next worst day ever. Or your next best day ever, but let‚Äôs be realistic.‚Äù&lt;/li&gt;\n&lt;li&gt;‚ÄúYou can be anything you want. And yet you keep choosing to be you. I admire your dedication to the role.‚Äù&lt;/li&gt;\n&lt;li&gt;‚ÄúToday I am letting go of the things that are holding me back from the life that I want to live. Then I‚Äôm picking them all up again because I have separation anxiety.‚Äù&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;</article>","contentLength":6322,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"#438 Motivation time","url":"https://pythonbytes.fm/episodes/show/438/motivation-time","date":1751270400,"author":"","guid":176956,"unread":true,"content":"<article></article>","contentLength":0,"flags":null,"enclosureUrl":"https://pythonbytes.fm/episodes/download/438/motivation-time.mp3","enclosureMime":"","commentsUrl":null},{"title":"String in Python (8)","url":"https://dev.to/hyperkai/string-in-python-8-4cfc","date":1751268802,"author":"Super Kai (Kazuya Ito)","guid":176409,"unread":true,"content":"<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.split\" rel=\"noopener noreferrer\">split()</a> can split a string from the left to the right as shown below:</p><ul><li>The 1st argument is (Optional-Default:-Type: or ):\n*Memos:\n\n<ul><li>It's the delimiter of the one or more characters to delimit a string.</li><li>An empty string cannot be set.</li></ul></li><li>The 2nd argument is (Optional-Default:-Type:):\n*Memos:\n\n<ul><li>It decides how many splits are made.</li><li>If it's not set or , then all possible splits are made.</li></ul></li><li>If  is set, consecutive delimiters aren't grouped together and are deemed to delimit empty subsequences (for example,  returns ).\n</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.rsplit\" rel=\"noopener noreferrer\">rsplit()</a> can split a string from the right to the left as shown below:</p><ul><li>The 1st argument is (Optional-Default:-Type: or ):\n*Memos:\n\n<ul><li>It's the delimiter of the one or more characters to delimit a string.</li><li>An empty string cannot be set.</li></ul></li><li>The 2nd argument is (Optional-Default:-Type:):\n*Memos:\n\n<ul><li>It decides how many splits are made.</li><li>If it's not set or , then all possible splits are made.</li></ul></li><li>If  is set, consecutive delimiters aren't grouped together and are deemed to delimit empty subsequences (for example,  returns ).\n</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div>","contentLength":1011,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üöÄ Master VS Code on Mac: The Ultimate Keyboard Shortcuts Guide for Next.js & Python Developers","url":"https://dev.to/sam4rano/master-vs-code-on-mac-the-ultimate-keyboard-shortcuts-guide-for-nextjs-python-developers-2iee","date":1751268569,"author":"Samuel Oyerinde","guid":176408,"unread":true,"content":"<p>As a developer working with Next.js and Python on macOS, I've discovered that mastering VS Code keyboard shortcuts is one of the fastest ways to supercharge your productivity. Instead of constantly reaching for your mouse, these shortcuts will have you navigating, editing, and debugging code like a seasoned pro.</p><blockquote><p>: Most VS Code shortcuts replace  with  and  with  on Mac. I'll highlight any exceptions as we go!</p></blockquote><h2>\n  \n  \n  Why Keyboard Shortcuts Matter\n</h2><p>Before we dive in, let's be honest‚Äîlearning shortcuts feels tedious at first. But once they become muscle memory, you'll wonder how you ever coded without them. The time you save adds up quickly, especially when you're deep in a coding flow state.</p><h2>\n  \n  \n  üìù Basic Text Editing: Your Daily Drivers\n</h2><p>These are the shortcuts you'll use every single day:</p><p><strong>Essential Copy/Paste Operations</strong></p><ul><li> - Cut selected text (or entire line if nothing's selected)</li><li> - Copy selected text (or entire line if nothing's selected)\n</li><li> - Paste from clipboard</li><li> - Select all content in file</li></ul><ul><li> - Undo last action</li><li> - Redo (Mac's version of Ctrl+Y)</li><li> - Toggle line comment (works on multiple selected lines too!)</li></ul><h2>\n  \n  \n  ‚ö° Advanced Text Editing: Level Up Your Game\n</h2><p>Once you're comfortable with the basics, these shortcuts will make you feel like a coding wizard:</p><p><strong>Smart Selection &amp; Autocomplete</strong></p><ul><li> - Trigger autocomplete suggestions</li><li> - Quick fix for errors/warnings under cursor</li><li> - Select word under cursor, then select next occurrence</li></ul><ul><li> - Delete current line (without copying to clipboard)</li><li> - Insert new line below cursor</li><li> - Insert new line above cursor</li><li> - Move current line up/down</li></ul><p><strong>Code Folding &amp; Indentation</strong></p><ul><li> - Increase indentation</li><li> - Collapse code block</li><li> - Expand code block</li><li> - Block comment selected code</li></ul><h2>\n  \n  \n  üóÇÔ∏è Tab Management: Stay Organized\n</h2><p>Managing multiple files efficiently is crucial for larger projects:</p><ul><li> - Reopen last closed tab</li><li> - Close current tab</li><li> - Close all tabs</li></ul><ul><li> - Show recent tabs list (note: , not !)</li><li> - Show tabs in reverse order</li></ul><ul><li><code>Cmd + Option + Left/Right</code> - Move tab to left/right panel</li><li> - Switch focus between panels</li></ul><h2>\n  \n  \n  üéõÔ∏è Panel &amp; Sidebar Control\n</h2><p>Maximize your screen real estate and access tools quickly:</p><ul><li> - Toggle terminal (remember:  not )</li><li> - Open new terminal</li><li> - Open problems panel</li><li> - Open output panel</li></ul><ul><li> - Focus Explorer</li><li> - Quick file search</li><li> - Command Palette (your best friend!)</li></ul><ul><li> - View/edit keyboard shortcuts</li></ul><h2>\n  \n  \n  üîç Find, Replace &amp; Symbol Navigation\n</h2><p>These shortcuts are game-changers when working with large codebases:</p><ul><li> - Find in current file</li><li> - Global search across project</li><li> - Find and replace in file</li><li> - Global find and replace</li></ul><p> (Perfect for Next.js components and Python functions!)</p><ul><li> - Rename symbol everywhere</li><li> - Show all references inline</li><li> - Open references in side panel</li><li> - Peek definition</li><li> - Go to definition (mouse + keyboard combo)</li></ul><ul><li> - Search symbols in current file</li><li> - Search symbols globally</li></ul><h2>\n  \n  \n  üéØ Advanced Selection &amp; Multi-Cursor Magic\n</h2><p>Multi-cursor editing is where VS Code really shines:</p><ul><li> - Select character by character</li><li> - Jump by word</li><li><code>Shift + Option + Left/Right</code> - Select by word</li><li><code>Ctrl + Shift + Left/Right</code> - Expand selection to logical blocks</li></ul><ul><li> - Add cursor at click position</li><li> - Undo last cursor placement</li><li> - Add cursor above/below</li></ul><ul><li> - Select rectangular text block</li><li><code>Cmd + Shift + Option + Arrows</code> - Adjust box selection</li></ul><p>Essential for troubleshooting your Next.js apps and Python scripts:</p><ul><li> - Start debugging / Continue execution</li><li> - Stop debugger</li><li> - Add inline breakpoint</li></ul><h2>\n  \n  \n  üí° Pro Tips for Maximum Efficiency\n</h2><ol><li><p>: Pick 5-10 shortcuts that match your most common actions and practice them for a week.</p></li><li><p>:  is your gateway to discovering new features and their shortcuts.</p></li><li><p>: Access  to modify shortcuts that don't feel natural.</p></li><li><p><strong>Practice with Real Projects</strong>: The best way to memorize shortcuts is by using them in your actual Next.js and Python development work.</p></li></ol><p>Want to dive deeper? Check out these helpful resources:</p><p>The journey to keyboard shortcut mastery doesn't happen overnight, but every shortcut you learn is a small investment in your future productivity. Start with the basic text editing shortcuts, then gradually work your way up to the advanced multi-cursor and debugging features.</p><p>Which shortcuts are you most excited to try? Drop a comment below and let me know how these shortcuts have improved your development workflow!</p><p><em>Found this helpful? Give it a ‚ù§Ô∏è and share it with your fellow developers. Happy coding! üöÄ</em></p><p>: #vscode #productivity #macos #nextjs #python #shortcuts #webdev #developer</p>","contentLength":4431,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"AGI-SaaS v1.0.0 Released!","url":"https://dev.to/diamajax/agi-saas-v100-released-324e","date":1751265904,"author":"matthieu ouvrard","guid":176374,"unread":true,"content":"<p>I‚Äôm excited to announce the first stable release of , your new modular Python framework for Retrieval-Augmented Generation (RAG) pipelines.</p><ul><li>Plugin-based architecture for custom LLM workflows\n</li><li>Async, concurrent API calls for maximum throughput\n</li><li>Native support for OpenRouter, OpenAI &amp; local models (llama.cpp)\n</li></ul><p>I‚Äôd love to hear your feedback, ideas for new plugins, or real-world use cases‚Äîdrop a comment below or open an issue on GitHub!</p>","contentLength":439,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Data science with Python","url":"https://dev.to/moorthy_13/data-science-with-python-3mjn","date":1751265894,"author":"Moorthy","guid":176373,"unread":true,"content":"<p>I recently joined the data science course at Payilagam. I learned the fundamentals of Python, which I found interesting and would like to explore further. I also want to share more information about data science gradually. Could you please guide me on any specific topics I should focus on learning next? Data\n Science course at Payilagam. They have taught about the Python fundamentals, which was interesting to learn about more in future, and I also wanted to share more stuff about the data science gradually, also guide me if any more specific things to be learn? Because I like this Dev.to , platform  to develop my skillset </p>","contentLength":630,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"AGI-SaaS v1.0.0 Released! I‚Äôm excited to announce the first stable release of AGI-SaaS, your new modular Python framework for Retrieval-Augmented Generation (RAG) pipelines. https://github.com/KilianDiama/AGI-SaaS/releases/tag/v1.0.0","url":"https://dev.to/diamajax/-agi-saas-v100-released-im-excited-to-announce-the-first-stable-release-of-agi-saas-316f","date":1751265772,"author":"matthieu ouvrard","guid":176407,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"‚õµBuilding Websites using OpenAI Agents SDK","url":"https://dev.to/buildandcodewithraman/building-websites-using-openai-agents-sdk-10gh","date":1751263369,"author":"Ramandeep Singh","guid":176372,"unread":true,"content":"<h2>\n  \n  \n  üçú Building an AI-Powered Restaurant Management System with OpenAI Agents SDK\n</h2><p>Ever wondered how to create a  that does more than just answer basic questions? ü§î This article will show you how to build a  that can handle everything from order processing to delivery tracking - all through an intelligent conversational interface! </p><p>This isn't your typical chatbot! We're creating a <strong>sophisticated multi-agent system</strong> that can:</p><ul><li>üìã Process orders intelligently</li><li>üöö Track deliveries in real-time</li><li>üõ†Ô∏è Provide customer support</li><li>üìä Generate analytics reports</li></ul><h2>\n  \n  \n  üõ†Ô∏è Step 1: Setting Up the Backend Infrastructure\n</h2><p>Let's start with the technical foundation:</p><ul><li> for lightning-fast API responses ‚ö°</li><li> for real-time chat</li><li> for specialized task handling</li></ul><blockquote><p>üí° : Want the complete, production-ready code? Check out our <a href=\"https://helloitsraman.gumroad.com/l/openai-multi-agents\" rel=\"noopener noreferrer\">Gumroad link</a> for a generic agent system template that works for any use case!</p></blockquote><h2>\n  \n  \n  üé® Building the Frontend Experience\n</h2><ul><li> with Turbopack for blazing-fast development üöÄ</li><li> for beautiful, responsive design ‚ú®</li><li><strong>Real-time WebSocket integration</strong> for seamless chat experience</li><li> with comprehensive restaurant management tools</li></ul><h3>\n  \n  \n  üçï Restaurant-Specific Features\n</h3><p>Our intelligent chatbot can handle all admin tasks:</p><ul><li>üìù : From taking orders to kitchen coordination</li><li>üçú : Update prices, add new items, manage availability</li><li>üöö : Real-time driver location and ETA updates</li><li>‚ùì : Intelligent responses to common questions</li><li>üõ†Ô∏è : Handle complaints and special requests</li><li>üìä : Sales reports, order trends, and performance metrics</li></ul><blockquote><p>üí° : Want the complete, Frontend code? Check out our <a href=\"https://helloitsraman.gumroad.com/l/restaurance-agents-website\" rel=\"noopener noreferrer\">Gumroad link</a> to get the website code with real time chatbot frontend code.</p></blockquote><h2>\n  \n  \n  ü§ñ The Multi-Agent Architecture\n</h2><p>Here's where the magic happens! Our system uses a sophisticated :</p><h3>\n  \n  \n  üéØ Agent Roles &amp; Responsibilities\n</h3><ol><li>: The master coordinator that orchestrates all other agents</li><li>: Expert in menu items, pricing, and availability</li><li>: Handles order processing, payment, and kitchen coordination</li><li>: Manages delivery tracking and driver coordination</li><li>: Smart router that directs requests to the right specialist</li><li>: Knowledge base for common questions and policies</li><li><strong>üõ†Ô∏è Customer Support Agent</strong>: Handles complaints and special requests</li></ol><ol><li> ‚Üí Triage Agent receives it</li><li> the intent and routes to the appropriate specialist</li><li><strong>Specialist Agent processes</strong> the request using domain-specific knowledge</li><li><strong>Supervisor Agent coordinates</strong> if multiple agents need to collaborate</li><li> through the same chain to the customer</li></ol><h3>\n  \n  \n  üß† Intelligent Routing System\n</h3><p>The Triage Agent uses  to route requests:</p><ul><li> ‚Üí Order Agent</li><li> ‚Üí Menu Agent\n</li><li> ‚Üí Delivery Agent</li><li> ‚Üí FAQ Agent</li><li> ‚Üí Customer Support Agent</li><li><strong>Complex multi-step requests</strong> ‚Üí Supervisor Agent</li></ul><p>Each agent has access to specialized tools:</p><ul><li> - Create new orders with customer details</li><li> - Update order progress (preparing, ready, delivered)</li><li> - Retrieve order information</li><li> - Handle payment processing</li></ul><ul><li> - Retrieve current menu with prices</li><li> - Modify prices or availability</li><li> - Add new dishes to the menu</li><li> - Verify item availability</li></ul><ul><li> - Get real-time delivery status</li><li> - Assign orders to available drivers</li><li> - Update delivery progress</li><li> - Track driver GPS coordinates</li></ul><p>Our system maintains  across conversations:</p><ul><li> - Remembers previous interactions</li><li> - Tracks customer's past orders</li><li> - Learns customer preferences over time</li><li> - Maintains conversation flow and context</li></ul><blockquote><p>üí° : Want the complete, production ready code? Check out our <a href=\"https://helloitsraman.gumroad.com/l/sfihs\" rel=\"noopener noreferrer\">Gumroad link</a> to get the complete final code to run the restaurant ordering processing agent system or any other use-case you are thinking of.</p></blockquote><p>The Restaurant Agent system demonstrates the <strong>transformative potential of AI agents</strong> in modern business operations. By combining intelligent routing, specialized tools, and persistent context management, we've created a system that can handle complex restaurant operations with human-like understanding and efficiency.</p><ul><li> - Handle multiple customer interactions simultaneously</li><li> - Reduce manual workload while maintaining quality</li><li><strong>Enhanced Customer Experience</strong> - Provide instant, accurate responses 24/7</li><li> - Streamline order processing and delivery management</li></ul><p>This architecture serves as a <strong>blueprint for implementing AI agents</strong> across various industries, from healthcare to finance, education to e-commerce. The modular design allows for easy customization and expansion, making it adaptable to different business needs and use cases.</p><p>As AI technology continues to evolve, the potential for such agent systems to revolutionize business operations becomes increasingly clear. The future of customer service and business automation lies in intelligent, context-aware AI agents that can understand, learn, and adapt to complex business environments.</p><h2>\n  \n  \n  üîó Don't Forget to Click these links to get the complete code! ‚¨áÔ∏è\n</h2>","contentLength":4752,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üöÄ Evolving My FastAPI Project: Modular Architecture, Testing & MySQL Integration","url":"https://dev.to/nicolasandrescl/evolving-my-fastapi-project-modular-architecture-testing-mysql-integration-g1","date":1751262928,"author":"Nicol√°s Andr√©s Cano Leal","guid":176338,"unread":true,"content":"<p>Over the past few hours, I've been deep into refactoring one of my FastAPI projects with a clear goal: make it production-ready and showcase it live through my portfolio at nicolasandrescl.pythonanywhere.com üí°</p><p>Here‚Äôs what I accomplished:</p><h2>\n  \n  \n  Refactored the entire project structure into clearly separated layers:\n</h2><ul><li><p>repository/ for data access logic</p></li><li><p>schemas/ for Pydantic models</p></li><li><p>models/ for SQLAlchemy models</p></li><li><p>services/ for business logic</p></li><li><p>core/ for configuration and DB connections</p></li><li><p>Integrated a MySQL database using SQLAlchemy and PyMySQL for full persistence.</p></li><li><p>Switched to Pydantic v2, updating all .dict() references to .model_dump() to stay aligned with the latest standards.</p></li><li><p>Added error handling and validation, including custom messages and constraints (e.g. rejecting names under 3 characters).</p></li><li><p>Wrote an integration test for user creation using pytest + TestClient, and installed httpx, email-validator, cryptography, and other missing dependencies.</p></li><li><p>Resolved merge conflicts cleanly and pushed the finalized version to GitHub.</p></li><li><p>Updated the README.md with architecture overview, setup instructions, and feature highlights.</p></li></ul><p>I‚Äôm preparing to deploy the API backend publicly so that visitors to my portfolio can see it in action. The /user/ endpoint will be testable directly from Swagger UI.</p><h2>\n  \n  \n  Live site: üåê nicolasandrescl.pythonanywhere.com Repo: üìÅ github.com/NicolasAndresCL/FastAPI\n</h2><ul><li><p>FastAPI, SQLAlchemy, PyMySQL</p></li><li><p>MySQL, Pydantic v2, Uvicorn</p></li><li><p>Pytest, TestClient, HTTPX</p></li></ul><p>If you're working on API design, backend structure, or transitioning to production, I'd love to exchange ideas!</p><h2>\n  \n  \n  FastAPI #BackendDevelopment #Python #SQLAlchemy #MySQL #TDD #CleanArchitecture #pytest #DevJourney #Pydantic #PythonBackend #PortfolioDev #APIDesign #OpenSource #PythonAnywhere\n</h2>","contentLength":1770,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Training in Nanganallur","url":"https://dev.to/dlk_technologies_24/python-training-in-nanganallur-2mo5","date":1751259764,"author":"DLK Technologies","guid":176337,"unread":true,"content":"<p>Python Training in Nanganallur. This comprehensive course is ideal for students, job seekers, and professionals aiming to excel in programming and data science. Learn Python basics, data structures, libraries like Pandas and NumPy, and real-world project development. With hands-on practice and personalized guidance, you‚Äôll gain the confidence to build applications and solve real-time problems. Upgrade your skills with the best Python training in Nanganallur</p>","contentLength":463,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Seeing Like a Machine: Understanding Computer Vision Fundamentals and Applications","url":"https://dev.to/dev_patel_35864ca1db6093c/seeing-like-a-machine-understanding-computer-vision-fundamentals-and-applications-ac3","date":1751250588,"author":"Dev Patel","guid":175501,"unread":true,"content":"<p>Imagine a world where computers can \"see\" and interpret the world around them, just like humans. This isn't science fiction; it's the reality of computer vision (CV), a rapidly evolving field with the potential to revolutionize numerous industries. From self-driving cars to medical diagnosis, computer vision is already transforming how we interact with technology and the world. But what exactly is it, and how does it work?</p><p><strong>Understanding the Fundamentals: Teaching Computers to See</strong></p><p>At its core, computer vision is about enabling computers to \"understand\" digital images and videos. Think of it as giving computers the gift of sight. Unlike humans who effortlessly interpret visual information, computers require sophisticated algorithms and techniques to achieve this. The process generally involves several key steps:</p><ol><li><p> This is the initial stage where the computer receives the visual data ‚Äì whether from a camera, a scanner, or a digital image file.</p></li><li><p>  Raw images often contain noise or inconsistencies.  Pre-processing steps, like noise reduction and image sharpening, clean up the data to make it easier for the computer to analyze.  Think of it as preparing a messy kitchen before you start cooking ‚Äì you need a clean workspace to work efficiently.</p></li><li><p>  This is where the magic happens.  Algorithms identify key features within the image, such as edges, corners, textures, and colors.  These features are then represented mathematically, allowing the computer to understand the image's content in a quantifiable way.  Imagine describing a face: you'd focus on the eyes, nose, and mouth ‚Äì these are the features a computer extracts.</p></li><li><p><strong>Object Recognition and Classification:</strong>  Using the extracted features, the computer attempts to identify and classify objects within the image. This involves comparing the extracted features to known patterns stored in a database.  This is like recognizing a friend's face based on their features.</p></li><li><p>  This advanced stage goes beyond object recognition, aiming to understand the relationships between objects and the overall context of the image or video.  For example, understanding that a cat is sitting  a mat, not  it.</p></li></ol><p><strong>The Significance and Opportunities:</strong></p><p>Computer vision addresses a fundamental limitation of computers: their inability to directly interact with the physical world through visual input. By bridging this gap, CV opens up a wealth of opportunities:</p><ul><li>  CV powers robotic systems in factories, warehouses, and even surgery, improving efficiency and precision.</li><li>  Facial recognition, object detection, and anomaly detection systems enhance security in various settings, from airports to homes.</li><li>  CV assists in medical image analysis, enabling faster and more accurate diagnoses of diseases like cancer.</li><li>  Self-driving cars rely heavily on CV to navigate roads, identify pedestrians and obstacles, and make driving decisions.</li><li>  CV enhances customer experience through features like virtual try-ons, automated checkout, and inventory management.</li></ul><p><strong>Applications Across Industries:</strong></p><p>The applications of computer vision are incredibly diverse and continue to expand. Here are a few examples:</p><ul><li>  Monitoring crop health, identifying pests and diseases, optimizing irrigation.</li><li>  Quality control, defect detection, robotic assembly.</li><li>  Tracking player movements, analyzing game strategies, enhancing broadcasting.</li><li><strong>Environmental Monitoring:</strong>  Analyzing satellite imagery for deforestation, pollution detection, and wildlife tracking.</li></ul><p><strong>Challenges, Limitations, and Ethical Considerations:</strong></p><p>Despite its remarkable progress, computer vision faces challenges:</p><ul><li>  Training accurate CV models requires vast amounts of labeled data, which can be expensive and time-consuming to acquire.</li><li>  Processing high-resolution images and videos requires significant computing power, making some applications resource-intensive.</li><li><strong>Robustness and Generalization:</strong>  CV systems can struggle with variations in lighting, viewpoints, and occlusions, limiting their ability to generalize to unseen scenarios.</li><li>  Bias in training data can lead to discriminatory outcomes, particularly in applications like facial recognition.  Privacy concerns related to image and video data also need careful consideration.</li></ul><p><strong>The Future of Computer Vision:</strong></p><p>Computer vision is rapidly evolving, driven by advancements in deep learning, improved algorithms, and increased computing power. We can expect to see even more sophisticated and pervasive applications in the near future. The development of more robust, explainable, and ethically sound CV systems will be crucial to realizing its full potential and ensuring its responsible deployment across various sectors. The ability of computers to \"see\" and understand the world around them is no longer a futuristic fantasy; it is a powerful technology shaping our present and future, demanding careful consideration of its immense capabilities and potential impact.</p>","contentLength":4872,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Digital Transformation in Agri-Machinery: Autosteer Leads the Way","url":"https://dev.to/gnss/digital-transformation-in-agri-machinery-autosteer-leads-the-way-4j01","date":1751249048,"author":"zly","guid":175500,"unread":true,"content":"<p>In the fast-evolving world of agriculture, precision and efficiency have become key drivers for success. For dealers of agricultural navigation systems, understanding how  are revolutionizing farming operations is crucial. These systems are no longer mere luxuries but essential tools that empower farmers to maximize yields, reduce costs, and embrace sustainable practices.</p><h2>\n  \n  \n  What Are Tractor Autosteer Systems?\n</h2><p>At their core, tractor autosteer systems enable agricultural vehicles to steer themselves along predefined paths with pinpoint accuracy. By leveraging GPS, GNSS, and advanced sensors, these systems automate steering control‚Äîfreeing operators from manual driving and reducing human error. For dealers, this means offering technology that directly addresses farmers‚Äô demands for productivity and precision.</p><p>Unlike traditional manual steering, autosteer systems provide centimeter-level guidance accuracy. This precision minimizes overlaps, reduces seed and input waste, and optimizes pass-to-pass operations. As a result, farmers enjoy enhanced efficiency, reduced fatigue, and consistent work quality‚Äîmaking autosteer systems a compelling upgrade.</p><h2>\n  \n  \n  Key Features Driving Adoption\n</h2><p>Leading autosteer products integrate multiple technologies to deliver seamless performance:</p><ul><li><strong>High-Precision GPS/GNSS Modules:</strong> Systems use RTK (Real-Time Kinematic) corrections for accuracy often surpassing 2‚Äì3 cm, vital for consistent row spacing and spraying.</li><li><strong>User-Friendly Interfaces:</strong> Intuitive displays and controls help operators quickly set guidance lines, customize headland turns, and manage system settings without steep learning curves.</li><li><strong>Compatibility with Various Tractors:</strong> Modular hardware designs and flexible mounting options ensure easy installation across different tractor brands and models.</li><li><strong>Robust Signal Processing:</strong> Advanced sensors filter out noise from terrain variation and maintain stable positioning in challenging environments like hilly or wooded farmland.</li></ul><p>These technical innovations underpin the growing market demand for reliable, precise, and cost-effective autosteer solutions.</p><h2>\n  \n  \n  How Autosteer Systems Elevate Dealer Offerings\n</h2><ul><li> Offering cutting-edge tech solutions positions your dealership as an industry leader, building long-term relationships.</li><li> Autosteer systems can be bundled with other GPS guidance, yield mapping, and data analytics tools for comprehensive digital farm management packages.</li><li> Providing technical expertise and timely service amplifies customer satisfaction and repeat business.</li><li> As digital transformation accelerates, early adoption of these systems keeps your portfolio ahead of competitors wary of innovation.</li></ul><p>Incorporating these systems into your product lineup addresses farmers‚Äô evolving needs while boosting your sales performance.</p><h2>\n  \n  \n  Overcoming Implementation Challenges\n</h2><p>Navigating autosteer system adoption requires addressing common concerns:</p><ul><li><strong>Initial Investment Costs:</strong> Clear ROI demonstrations help farmers justify upfront expenses by highlighting fuel savings, input reduction, and labor efficiencies.</li><li> Offering hands-on training and accessible resources ensures operators fully leverage system capabilities.</li><li> Understanding geographic constraints and providing tailored GNSS solutions, like base stations or correction services, improves accuracy in all field conditions.</li></ul><p>Dealers who proactively tackle these pain points become trusted partners in farm digitalization journeys.</p><h2>\n  \n  \n  Looking Ahead: Autosteer as a Catalyst for Smart Farming\n</h2><p>As precision agriculture pushes forward, autosteer systems form the backbone of connected, autonomous farming workflows. Integration with IoT sensors, AI-driven analytics, and autonomous implement control will soon create fully automated operations‚Äîfrom planting to harvesting.</p><p>For dealers, embracing  heralds not just a product sale, but a strategic pivot into the future of agri-machinery.</p><p>Are you ready to elevate your dealership with this transformative technology? How are you preparing to meet farmers‚Äô growing demands for automation and precision? Share your insights or questions below ‚Äî let‚Äôs drive agri-tech forward together.</p>","contentLength":4157,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Case Study: How Leading Farms Use Tractor Autosteer Worldwide","url":"https://dev.to/gnss/case-study-how-leading-farms-use-tractor-autosteer-worldwide-109d","date":1751249038,"author":"zly","guid":175499,"unread":true,"content":"<p>In the rapidly evolving world of precision agriculture, <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> have become a game-changer. These systems enable farmers to operate with pinpoint accuracy, reduce fatigue, and improve productivity. For dealers of agricultural navigation systems, understanding how top farms leverage these technologies is crucial to meet client expectations and drive sales effectively.</p><h2>\n  \n  \n  Transforming Farm Efficiency with Autosteer Technology\n</h2><p>Leading farms worldwide rely on <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> to optimize field operations. By automating the steering process, these systems maintain precise vehicle paths with positional accuracy often within 2-5 cm. This sharp accuracy reduces overlaps and skips during planting, fertilizing, or harvesting, saving time and inputs like seeds, chemicals, and fuel.</p><p>For example, a large Australian grain farm reduced overlap by 15%, increasing yields and cutting operational costs significantly during the first season of autosteer implementation. This measurable ROI showcases the direct impact of integrating advanced autosteer solutions.</p><h2>\n  \n  \n  Key Features Driving Adoption Across Continents\n</h2><p>Autosteer systems typically integrate GPS technology, real-time kinematic (RTK) corrections, and sophisticated sensors. High-end systems from trusted manufacturers‚Äîlike the ones featured on Hi-Target Precision Agriculture‚Äîoffer:</p><ul><li><strong>Multi-constellation GNSS support</strong> for robust satellite coverage.</li><li> ensuring centimeter-level accuracy.</li><li> with existing farm management software.</li><li> compatible with various tractor models.</li></ul><p>These technical strengths assure farmers of dependability in diverse climates and terrains, from the rice paddies of Southeast Asia to the vast cornfields of the U.S.</p><h2>\n  \n  \n  Overcoming Challenges: Dealer Insights\n</h2><p>While many farms embrace <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a>, barriers such as initial cost, training, and infrastructure remain. Dealers play a vital role by demonstrating long-term value and offering hands-on support.</p><p>Successful dealers emphasize:</p><ul><li>Providing detailed ROI projections tailored to the client's operation size.</li><li>Offering comprehensive training sessions to build user confidence.</li><li>Ensuring compatibility with a wide range of tractor models and accessories.</li></ul><p>Listening to farmer feedback helps dealers refine their pitches and service models, fostering trust and sustained relationships.</p><h2>\n  \n  \n  The Future of Autosteer in Precision Agriculture\n</h2><p>The demand for smarter, more autonomous farming solutions is soaring. With continuous improvements in GNSS, AI-assisted steering adjustments, and cloud-based data management, <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> are poised to become even more indispensable.</p><p>For dealers, staying updated with product innovations and real-world case studies will unlock new opportunities. Helping farms adopt cutting-edge navigation technology offers not just sales growth, but a chance to drive sustainability and efficiency worldwide.</p><p><strong>Ready to elevate your dealership with proven autosteer solutions?</strong> How are you tailoring your approach to meet the evolving needs of modern farms? Share your insights or questions below and join the conversation.</p>","contentLength":3126,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"What Do Farmers Really Care About in Autosteer System Performance?","url":"https://dev.to/gnss/what-do-farmers-really-care-about-in-autosteer-system-performance-10fk","date":1751249028,"author":"zly","guid":175498,"unread":true,"content":"<p>In the competitive world of agricultural technology, understanding what  in a <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer system</a> can make or break your sales strategy. Dealers of agricultural navigation systems must look beyond features and focus on ‚Äîbecause at the end of the day, farmers want solutions that boost productivity, reduce fatigue, and maximize yield. Let‚Äôs dive into the key factors shaping their buying decisions and how you can address them effectively.</p><h2>\n  \n  \n  Precision and Accuracy: The Non-Negotiables\n</h2><p>Farmers count on autosteer systems for precise guidance to optimize seed placement, minimize overlaps, and reduce input costs. Accuracy in centimeter-level range is expected‚Äînot a luxury. Systems offering  and high-quality GPS modules drastically improve positioning. Highlighting  under different terrains and weather conditions can build trust with your buyers. After all, the difference between a 2 cm and 5 cm error can mean thousands of dollars in lost productivity across large fields.</p><h2>\n  \n  \n  Ease of Use: Technology Should Simplify, Not Complicate\n</h2><p>While advanced technology excites many, farmers emphasize . They need autosteer systems that integrate seamlessly with existing machinery and require minimal setup time. Dealers who demonstrate how a system‚Äôs touchscreen controls, customizable settings, and quick calibration reduce downtime will strike a chord. Remember, complexity often leads to frustration in the field, decreasing adoption and long-term satisfaction.</p><h2>\n  \n  \n  Reliability and Durability in Rough Conditions\n</h2><p>Agriculture is tough on equipment. Mud, dust, vibration, and extreme temperatures challenge every component. Farmers prioritize systems built from rugged materials with <strong>weather-resistant housings</strong> and reliable wiring harnesses. Demonstrating certifications or lists of protective features‚Äîsuch as IP67-rated electronics‚Äîprovides confidence. Furthermore, an autosteer system‚Äôs ability to self-correct or recover quickly from signal loss can minimize interruptions during critical tasks.</p><h2>\n  \n  \n  Cost vs. Value: Investment Justification\n</h2><p>High initial costs can deter buyers unless justified by tangible value. Farmers look for  through fuel savings, reduced labor hours, and improved crop outcomes. Highlighting long-term benefits, such as less overlap leading to fewer seed and chemical inputs, resonates well. Offering modular options or scalable packages also helps farmers adopt gradually, aligning with their budget and growth plans.</p><h2>\n  \n  \n  After-Sales Support and Software Updates\n</h2><p>Technology changes fast‚Äîautosteer systems are no exception. Dealers who emphasize <strong>responsive customer support</strong>, firmware updates, and training workshops stand ahead of the competition. Farmers appreciate systems backed by comprehensive service, ensuring they stay current with precision agriculture advancements without costly replacements.</p><h2>\n  \n  \n  Integration with Farm Management Systems\n</h2><p>Lastly, seamless data integration into farm management platforms is becoming essential. Farmers want to analyze performance, generate reports, and fine-tune operations based on accurate field data. Autosteer systems compatible with popular <strong>agriculture software suites</strong> or offering standardized data exports save time and reduce headaches.</p><p>Understanding what farmers really care about in <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> can transform your approach as a dealer. Precision, user-friendliness, durability, cost-effectiveness, support, and integration are the pillars of performance that drive decisions in the field. Equip yourself with this insight to tailor your pitch and build lasting relationships based on value‚Äînot just technology.</p><p><strong>What challenges have you faced when advising farmers on autosteer options?</strong> Share your experience or questions below‚Äîwe‚Äôre here to navigate precision agriculture together.</p><p><em>Harness the power of precision. Help farmers grow smarter with every turn of the wheel.</em></p>","contentLength":3909,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real-World Applications of Autosteer: Planting, Spraying, Harvesting","url":"https://dev.to/gnss/real-world-applications-of-autosteer-planting-spraying-harvesting-oad","date":1751249023,"author":"zly","guid":175497,"unread":true,"content":"<p>In today‚Äôs fast-evolving agricultural landscape, precision and efficiency are no longer optional‚Äîthey‚Äôre essential. For dealers of agricultural navigation systems, understanding the practical benefits of <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> can drive better sales conversations and stronger customer trust. From the first seed planted to the final grain harvested, autosteer technology transforms traditional farming into a precise, data-driven operation.</p><p>Let‚Äôs dive deep into how these systems optimize planting, spraying, and harvesting in real-world scenarios.</p><h2>\n  \n  \n  Precision Planting: Maximizing Yield from Day One\n</h2><p>Planting sets the foundation for a successful crop season. Tractor autosteer systems use GPS-guided navigation to maintain perfectly straight rows with minimal overlap and gaps. This precision ensures seeds are placed at optimal spacing and depth, directly influencing germination rates and crop uniformity.</p><p>Modern autosteer systems integrate with planters via ISOBUS compatibility, allowing seamless control and monitoring of seeding rates. Dealers should highlight how automated steering reduces operator fatigue and errors, enabling farmers to cover large fields faster with consistent accuracy‚Äîeven under low visibility conditions.</p><ul><li><strong>Higher planting speed without quality loss</strong></li><li><strong>Improved field maps for future crop rotation planning</strong></li></ul><h2>\n  \n  \n  Efficient Spraying: Targeted Application with Minimal Waste\n</h2><p>Spraying pesticides and fertilizers requires accuracy‚Äînot only to protect crops but also to minimize environmental impact and input costs. Autosteer technology shines here by guiding tractors along preplanned paths, ensuring even coverage across fields.</p><p>By integrating tractor autosteer systems with variable rate controllers and boom section control, farmers apply chemicals precisely where needed. Dealers can emphasize how this reduces overlap and skips, lowering chemical usage and reducing operator stress during long spraying operations.</p><p>Additional tech perks include:</p><ul><li>Real-time adjustments based on terrain and equipment speed</li><li>Synchronization with weather and wind sensors for safer application</li><li>Data recording for compliance and traceability</li></ul><h2>\n  \n  \n  Harvesting: Consistent Efficiency When Every Minute Counts\n</h2><p>During harvest, timing and consistency determine profitability. Tractors equipped with autosteer systems maintain straight, optimized pass lines, minimizing compaction and ensuring maximum crop retrieval.</p><p>For combine harvesters, autosteer integration aids in managing headlands and turns smoothly, reducing grain loss due to overlapping passes or missed areas. The system‚Äôs accuracy allows farmers to operate longer hours with less fatigue and greater focus.</p><p>Dealers should stress how these systems:</p><ul><li>Improve grain quality by reducing damage caused by erratic steering</li><li>Facilitate data collection for yield mapping and future decision-making</li><li>Support multi-vehicle coordination on large farms for better workflow</li></ul><h2>\n  \n  \n  Technical Insights Dealers Need to Know\n</h2><ul><li><strong>GPS accuracy within 2-5 cm</strong> using RTK correction signals</li><li>User-friendly interfaces compatible with common tractor brands</li><li>Auto-section control and ISOBUS integration capabilities</li><li>Robust rugged design tailored for harsh farming environments</li></ul><p>Equipping your customers with these technical advantages builds confidence in the technology‚Äôs reliability and return on investment.</p><h2>\n  \n  \n  The Bottom Line: Why Dealers Should Champion Autosteer\n</h2><p>As agriculture moves toward greater automation and sustainability, offering <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> equips your clients to boost productivity, reduce waste, and simplify field operations. By understanding its real-world applications‚Äîplanting, spraying, and harvesting‚Äîyou can provide invaluable guidance that resonates with farmers‚Äô daily challenges.</p><p>Are your customers ready to embrace the future of precision farming? Start the conversation today and help them unlock the full potential of modern tractor autosteering.</p><p><strong>How do your clients view autosteer technology‚Äîessential tool or luxury upgrade? Share your experiences and questions below!</strong></p>","contentLength":4069,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Fully Autonomous vs Semi-Autonomous Tractors: What‚Äôs Next?","url":"https://dev.to/gnss/fully-autonomous-vs-semi-autonomous-tractors-whats-next-6fp","date":1751248995,"author":"zly","guid":175496,"unread":true,"content":"<p>The agricultural landscape is evolving fast. For dealers of agricultural navigation systems, understanding the differences and future trends in  is crucial to staying ahead. As farms become more data-driven, the shift from semi-autonomous to fully autonomous tractors represents a milestone in precision farming technology.</p><p>In this post, we‚Äôll explore the capabilities, benefits, and challenges of both fully autonomous and semi-autonomous tractors, helping dealers better advise clients eager to adopt smart agriculture solutions.</p><h2>\n  \n  \n  What Are Tractor Autosteer Systems?\n</h2><p>At its core, a  automates the steering process to enhance precision in fieldwork. These systems leverage GPS satellites, sensors, and advanced algorithms to maintain accurate tractor paths, reduce overlaps, and minimize operator fatigue.</p><ul><li> assist human drivers with steering but require active human supervision.</li><li><strong>Fully autonomous tractors</strong> operate independently, completing tasks without human intervention.</li></ul><p>Understanding these distinctions is essential for dealers advising farmers on appropriate solutions.</p><h2>\n  \n  \n  Semi-Autonomous Tractors: A Proven Step Forward\n</h2><p>Semi-autonomous tractors currently dominate the market due to their balance between technology and human control. These systems integrate RTK-GPS technology, offering centimeter-level accuracy, making them ideal for planting, spraying, and tillage.</p><ul><li> By automating steering, operators can focus on other tasks, reducing errors.</li><li> Lower initial investment compared to full autonomy.</li><li> Operators intervene or override when necessary, ensuring safety and adaptability.</li></ul><p>Despite these advantages, semi-autonomous systems still rely on human operators, limiting the potential for labor savings in large-scale farms.</p><h2>\n  \n  \n  Fully Autonomous Tractors: The Future of Precision Farming\n</h2><p>Fully autonomous tractors take precision agriculture to the next level. Equipped with LIDAR, machine vision, and AI-driven navigation, these tractors can handle complex tasks 24/7 with minimal supervision.</p><ul><li> Real-time sensors allow tractors to avoid unexpected obstacles.</li><li> AI adjusts routes dynamically based on soil and weather conditions.</li><li> Farmers and dealers can track operations via cloud platforms.</li></ul><p>The result? Consistent field coverage, increased productivity, and significant labor cost reductions.</p><h2>\n  \n  \n  Challenges and Considerations for Dealers\n</h2><p>While full autonomy is promising, it presents unique challenges dealers must address:</p><ul><li> Investment in hardware and software is substantial.</li><li> Requires advanced training and reliable after-sales service.</li><li> Compliance with local agricultural and safety regulations varies by region.</li></ul><p>Dealers who understand these factors can better guide customers through adoption, ensuring smooth transitions that maximize ROI.</p><h2>\n  \n  \n  What‚Äôs Next for Agricultural Navigation Systems?\n</h2><p>The industry is moving towards hybrid models where tractors can switch between semi-autonomous and fully autonomous modes. This flexibility meets diverse farm needs and eases the learning curve.</p><p>Additionally, integration with IoT devices and smart farm management software will unlock new capabilities, such as predictive maintenance and optimized input application.</p><h2>\n  \n  \n  Conclusion: Positioning Yourself Ahead of the Curve\n</h2><p>For dealers of agricultural navigation systems, the choice between semi-autonomous and fully autonomous tractors isn‚Äôt just about technology‚Äîit‚Äôs about matching solutions to growers‚Äô operational realities and growth ambitions.</p><p>The rise of  offers tremendous potential for efficiency and sustainability in agriculture. By embracing these innovations and understanding product nuances, dealers can become trusted partners in the farm of tomorrow.</p><p><strong>Are you ready to navigate the shift towards full autonomy? Share your thoughts or questions below!</strong></p>","contentLength":3795,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Calculating ROI for Tractor Autosteer Systems: A Practical Guide","url":"https://dev.to/gnss/calculating-roi-for-tractor-autosteer-systems-a-practical-guide-hh7","date":1751248987,"author":"zly","guid":175495,"unread":true,"content":"<p>In today‚Äôs rapidly evolving agricultural landscape, precision and efficiency are non-negotiable. For dealers of agricultural navigation systems, understanding how to demonstrate value to clients is key. One question frequently asked: <strong>How do you calculate the ROI for tractor autosteer systems?</strong> This guide breaks down the essentials, helping you make a compelling case for these cutting-edge tools.</p><h2>\n  \n  \n  What Are Tractor Autosteer Systems?\n</h2><p><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">Tractor autosteer systems</a> leverage GPS and advanced sensors to automate steering, ensuring tractors follow precise paths during field operations. This reduces overlap, minimizes operator fatigue, and improves accuracy in planting, spraying, and harvesting.</p><p>Modern autosteer products feature sub-inch accuracy, compatibility with various tractor models, and interfaces with farm management software, boosting both operational precision and data collection.</p><h2>\n  \n  \n  Why ROI Matters to Your Clients\n</h2><p>Farming investments are scrutinized for their payback period and long-term gains. Autosteer systems represent upfront costs that might seem daunting. As a dealer, helping customers quantify benefits will alleviate hesitancy and justify their investment.</p><p>ROI calculation for tractor autosteer systems is not just about dollars saved on fuel or inputs‚Äîit‚Äôs a reflection of improved productivity, labor efficiency, and crop yield quality.</p><h2>\n  \n  \n  Step 1: Assess Initial Investment and Installation Costs\n</h2><p>Begin by itemizing the purchase price, installation, and any subscription fees for software or GPS correction services. For example, many systems offer RTK (Real-Time Kinematic) accuracy at higher price points but deliver better steering precision.</p><p>Typical costs range from $5,000 to $15,000 depending on system sophistication, tractor compatibility, and optional add-ons like display interfaces or cameras.</p><h2>\n  \n  \n  Step 2: Calculate Operational Savings\n</h2><p>Focus on measurable savings your client can expect:</p><ul><li> Precise navigation reduces repeated passes, saving 10-15% on fuel.</li><li> Accurate spraying and planting mean less seed, fertilizer, and chemicals wasted.</li><li> Autosteer lessens operator fatigue and can allow fewer skilled operators per shift, translating to payroll savings.</li><li> Minimizing sharp turns and erratic steering lowers maintenance frequency.</li></ul><p>Encourage your clients to track these savings during trial periods to feed real operational data into ROI estimates.</p><h2>\n  \n  \n  Step 3: Factor in Productivity Gains\n</h2><p>Autosteer extends effective working hours by reducing operator fatigue and enabling nighttime or low-visibility fieldwork with confidence. Increased coverage means more acres per day without compromising accuracy.</p><p>This productivity boost directly impacts revenue, shortening critical planting windows and improving overall farm management.</p><h2>\n  \n  \n  Step 4: Consider Long-Term Benefits and Resale Value\n</h2><p>Precision farming equipment like autosteer systems often bring residual value when upgrading tractors. Improved crop health and yield consistency also offer financial upside beyond immediate cost savings.</p><p>Include these qualitative benefits in ROI discussions to paint a full picture.</p><h2>\n  \n  \n  Practical ROI Formula Overview\n</h2><p>Here‚Äôs a simplified ROI calculation you can share with clients:</p><p>text\nROI (%) = [(Annual Savings + Increased Revenue) - Initial Investment] √∑ Initial Investment √ó 100</p><p>Use real data from operational savings, productivity improvements, and upfront costs to customize this formula. Transparency builds trust and closes sales.</p><p>As dealers, the ability to speak confidently about ROI turns such technologies from optional gadgets into strategic assets. Helping clients measure hard and soft benefits addresses their core challenge: maximizing farm profitability.</p><p>By integrating precise cost analysis and real-world benefits, you empower farmers to make informed, confident decisions.</p><p><strong>How do you currently demonstrate ROI for tractor autosteer systems to your clients?</strong> Share your strategies and insights below ‚Äî let‚Äôs refine our approach together!</p><p><em>Optimizing your client conversations with accurate ROI calculations not only drives sales but builds lasting partnerships in precision agriculture.</em></p>","contentLength":4158,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Software + Hardware: How to Deploy Fully Integrated Autosteer Solutions","url":"https://dev.to/gnss/software-hardware-how-to-deploy-fully-integrated-autosteer-solutions-2in3","date":1751248977,"author":"zly","guid":175494,"unread":true,"content":"<p>In the rapidly evolving field of precision agriculture,  are transforming how farmers optimize productivity and reduce operational costs. For dealers specializing in agricultural navigation systems, mastering the deployment of fully integrated autosteer solutions means staying ahead of the curve‚Äîand delivering unmatched value to end-users. This post breaks down the critical steps and technical insights to successfully implement these cutting-edge systems, combining software and hardware for seamless performance.</p><h2>\n  \n  \n  Understanding the Core Components of Autosteer Systems\n</h2><p>A fully integrated autosteer system hinges on two main pillars: reliable hardware and sophisticated software. Typically, the hardware includes GPS receivers, steering actuators, and control units. Modern systems utilize sub-meter to centimeter-level GPS accuracy via technologies like RTK (Real-Time Kinematic) positioning‚Äîvital for precise navigation and field pass alignment.</p><p>The software manages sensor data fusion, steering logic, and user interfaces. Integration with farm management platforms allows operators to monitor progress, plan routes, and make data-driven decisions. When dealers comprehend both sides‚Äîhardware specs like actuator torque and system latency, and software nuances such as configurable guidance algorithms‚Äîthey can tailor solutions to diverse tractor models and field conditions.</p><h2>\n  \n  \n  Steps to Deploy a Fully Integrated Autosteer Solution\n</h2><ol><li><p><p>\nVerify your target tractor‚Äôs make and model compatibility with the autosteer system. Consider power requirements, steering linkage design, and existing onboard electronics.</p></p></li><li><p><strong>Select the Right Hardware Package:</strong><p>\nChoose GPS receivers with the appropriate accuracy level. For example, an RTK-capable receiver with a base station or correction service enhances precision.</p></p></li><li><p><strong>Install &amp; Calibrate Sensors and Actuators:</strong><p>\nProper installation is crucial. Calibration aligns the physical steering components with sensor data, ensuring minimal drift and accurate path following.</p></p></li><li><p><strong>Integrate Software with Farm Management Systems:</strong><p>\nSeamless data exchange enhances operational efficiency. Dealers should configure software settings, such as guidance line creation and variable rate prescriptions, to match user workflows.</p></p></li><li><p><p>\nField trials validate the integration, revealing potential issues like signal obstruction or mechanical binding. Real-time monitoring tools help troubleshoot and optimize performance.</p></p></li></ol><h2>\n  \n  \n  Overcoming Common Deployment Challenges\n</h2><p>Even the best hardware and software can face hiccups:</p><ul><li><p> Tall crops, trees, or uneven terrain can degrade GPS signals. Dealers can mitigate this by advising on antenna placement or supplementing GNSS data with inertial measurement units (IMUs).  </p></li><li><p> Insufficient calibration leads to steering errors. Utilize automated calibration routines available in advanced software to reduce human error.  </p></li><li><p> Farmers may hesitate to adopt new tech without proper guidance. Offering hands-on training and clear documentation fosters confidence and maximizes system benefits.</p></li></ul><h2>\n  \n  \n  Why Dealers Should Lead the Integration Revolution\n</h2><p>For dealers of agricultural navigation systems, offering turnkey, fully integrated <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> elevates your value proposition. Beyond selling components, you become a solutions partner who empowers farmers to:</p><ul><li>Save fuel and reduce soil compaction through precise steering\n</li><li>Increase hectares covered per hour with less operator fatigue\n</li><li>Unlock insights via data captured through software integration\n</li></ul><p>By mastering the technical and practical aspects of autosteering solutions, dealers build trusted relationships that drive long-term success.</p><p><strong>Ready to elevate your dealership‚Äôs offerings?</strong> What key challenges have you faced when deploying autosteer systems‚Äîand how did you tackle them? Share your experience and let‚Äôs push precision ag forward, together.</p>","contentLength":3874,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Demystifying ISOBUS: Data Communication in Autosteer Systems","url":"https://dev.to/gnss/demystifying-isobus-data-communication-in-autosteer-systems-4mc4","date":1751248970,"author":"zly","guid":175493,"unread":true,"content":"<p>In the fast-evolving field of precision agriculture,  have become a game-changer for dealers and end-users alike. But behind the smooth, automated guidance lies a critical technology often overlooked: ISOBUS. Understanding ISOBUS‚Äîthe standardized data communication protocol‚Äîis essential for dealers who want to offer reliable, future-proof solutions and confidently support their clients.</p><p>This post breaks down ISOBUS in the context of autosteer systems, helping agricultural navigation dealers grasp its importance and leverage it for better system integration and sales success.</p><h2>\n  \n  \n  What Is ISOBUS and Why Does It Matter?\n</h2><p>ISOBUS, formally known as ISO 11783, is a global standard designed to enable communication between tractors and implements, regardless of manufacturer. In essence, it is the language that allows various data-rich devices‚Äîsuch as autosteer systems, displays, and sensors‚Äîto exchange information seamlessly in real time.</p><p>For <strong>tractor autosteer systems</strong>, ISOBUS ensures that your navigation controller accurately interprets steering commands, machine status, and field data, no matter the brand of tractor or implement involved. This interoperability reduces compatibility issues and simplifies installation, making it a strong selling point when advising customers.</p><h2>\n  \n  \n  How ISOBUS Enhances Autosteer System Performance\n</h2><p>ISOBUS communication allows autosteer systems to:</p><ul><li><strong>Interpret GPS and sensor data flawlessly:</strong> Precise guidance depends on the real-time exchange of location and heading information. ISOBUS enables this exchange between the autosteer module and GPS receivers or RTK base stations.</li><li><strong>Synchronize control signals:</strong> By transmitting steering commands to the tractor's hydraulic or electric steering system, ISOBUS drives smooth turns and minimizes overlap or skips.</li><li><strong>Facilitate implement control:</strong> Autosteer systems coupled with ISOBUS can control seeding rates, spraying sections, or other implement functions from the same interface, streamlining operations.</li></ul><p>Technically, ISOBUS employs a CAN bus (Controller Area Network) to handle multiple data streams efficiently. Its task controller manages communication priorities, ensuring critical autosteer commands are always timely and reliable.</p><h2>\n  \n  \n  Advantages for Dealers: Simplified Setup and Customer Satisfaction\n</h2><ol><li><strong>Plug-and-Play Compatibility:</strong> Fewer wiring modifications and easier software updates mean quicker installations and less downtime.</li><li><strong>Reduced Support Complexity:</strong> Standardized communication cuts down troubleshooting time caused by device incompatibilities.</li><li> ISOBUS compliance aligns with industry trends towards full interoperability and precision farming ecosystems, enhancing your value proposition.</li></ol><p>Moreover, some autosteer solutions now come with user-friendly ISOBUS displays that consolidate control and diagnostics into one screen, making daily operation intuitive for farmers.</p><h2>\n  \n  \n  Key Technical Parameters to Consider\n</h2><p>When evaluating ISOBUS-capable autosteer systems, pay attention to:</p><ul><li><strong>Compatibility with VT (Virtual Terminal):</strong> This lets users control implements directly via the tractor‚Äôs display.</li><li> Allows recording and sharing of field operations for data-driven decisions.</li><li><strong>CAN bus speed and robustness:</strong> Higher speeds (250 kbps or 500 kbps) help reduce latency in steering commands.</li><li> Seamless over-the-air updates ensure devices stay compliant and feature-rich.</li></ul><p>Choosing autosteer systems with these capabilities ensures better integration and longevity in the field.</p><p>Mastering the role of ISOBUS in  is more than a technical exercise‚Äîit‚Äôs about empowering your customers with reliable, efficient, and interoperable solutions.</p><p>Are your navigation systems ISOBUS-ready? How are you leveraging this protocol to set yourself apart in a competitive market?</p><p>Let‚Äôs start a conversation: share your experiences or questions below and unlock the full potential of agricultural automation together.</p>","contentLength":3901,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Edge-to-Edge Accuracy: Autosteer Benefits in Border Tillage","url":"https://dev.to/gnss/edge-to-edge-accuracy-autosteer-benefits-in-border-tillage-36a4","date":1751248965,"author":"zly","guid":175492,"unread":true,"content":"<p>In modern agriculture, precision is everything‚Äîespecially when it comes to border tillage. For dealers of agricultural navigation systems, understanding how  improve edge-to-edge accuracy can unlock new value for your customers. This post explores how these systems refine field operations, minimize waste, and boost overall productivity.</p><h2>\n  \n  \n  Why Edge-to-Edge Accuracy Matters in Border Tillage\n</h2><p>Border tillage involves working the outer edges of fields, a task often complicated by irregular boundaries and obstacles. Traditional manual steering leaves room for overlap or gaps near borders, wasting fuel, time, and seed. For dealers, highlighting how <strong>tractor autosteer systems</strong> deliver precision at the edge is key.</p><p>Autosteer systems use a combination of GNSS corrections‚Äîlike RTK and DGPS‚Äîto guide tractors along exact paths. This means tillage covers every inch, reducing input waste and preserving soil integrity near field edges. For farmers, this translates into cost savings and higher yields.</p><h2>\n  \n  \n  How Autosteer Technology Enhances Field Efficiency\n</h2><p>Advanced autosteer systems continuously adjust steering angles based on real-time satellite positioning, maintaining a consistent pass width. Border tillage demands smooth turns and accurate boundary recognition‚Äîboth handled automatically by these systems.</p><p>Key technical advantages include:</p><ul><li><strong>Centimeter-level accuracy:</strong> RTK-based autosteer reduces deviation to under 2 cm, crucial near borders.</li><li> Drivers can define precise field limits, preventing machine off-course.</li><li> Seamless integration with other precision ag products optimizes fertilizer or pesticide application alongside tillage.</li></ul><p>Dealers equipped with this product knowledge can confidently advise farmers on maximizing operational efficiency and reducing fatigue through automated steering.</p><h2>\n  \n  \n  Overcoming Common Border Tillage Challenges with Autosteer\n</h2><p>Steering close to fences, ditches, or tree lines often requires repeated corrections when done manually. With autosteer:</p><ul><li>Operators avoid overlap or missed strips along irregular borders.</li><li>Machines maintain speed and consistent penetration depth.</li><li>In-season adjustments accommodate uneven terrain or shifting field conditions.</li></ul><p>The result? Clean, effective tillage right up to the edge, protecting both crop health and environmental resources.</p><h2>\n  \n  \n  What Dealers Need to Communicate to Farmers\n</h2><ul><li>The  and  from perfect border control.</li><li>How hands-free steering  during long border runs.</li><li>The  through better resource management and increased yield.</li></ul><p>Educating customers on these benefits positions dealers as trusted advisors, helping farms maximize returns on cutting-edge navigation technology.</p><h2>\n  \n  \n  Final Thoughts: Precision at the Border Is No Longer Optional\n</h2><p>In today‚Äôs competitive landscape, edge-to-edge precision is essential. As a dealer, championing  equips your clients to handle border tillage smarter‚Äînot harder.</p><p>Is your dealership ready to help farmers unlock the full potential of automated border tillage? Share your experiences or questions below and join the conversation about advancing precision ag to the field edges.</p>","contentLength":3109,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How Autosteer Reduces Operator Fatigue and Increases Productivity","url":"https://dev.to/gnss/how-autosteer-reduces-operator-fatigue-and-increases-productivity-2ejo","date":1751248959,"author":"zly","guid":175491,"unread":true,"content":"<p>In today‚Äôs competitive agricultural landscape, efficiency is king. Dealers of agricultural navigation systems understand that technology is no longer a luxury ‚Äì it‚Äôs a necessity. One innovation gaining traction is <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a>. These systems not only ease the burden on operators but also boost field productivity in measurable ways. So, how exactly do autosteer solutions transform farm operations? Let‚Äôs dive in.</p><h2>\n  \n  \n  What Are Tractor Autosteer Systems?\n</h2><p>Tractor autosteer systems use GPS and advanced sensors to guide tractors precisely along pre-determined paths. These systems reduce manual steering by automatically controlling the tractor‚Äôs direction with high accuracy (often within 2‚Äì5 cm). The core technology combines satellite positioning with onboard processors and actuators, relieving the operator from the constant need to maintain a straight line.</p><h2>\n  \n  \n  Easing Operator Fatigue: The Silent Game-Changer\n</h2><p>Fatigue is one of the most underestimated challenges in agriculture. Long hours behind the wheel, constantly correcting the steering wheel, lead to physical strain and mental exhaustion. Autosteer systems minimize this strain by:</p><ul><li><strong>Automating repetitive movements:</strong> Operators can relax their grip and posture.</li><li> The system handles path corrections, allowing focus on other tasks.</li><li> Less correction means a smoother ride, reducing discomfort.</li></ul><p>This ease translates to longer working hours without compromising safety or alertness ‚Äì crucial during peak seasons.</p><h2>\n  \n  \n  Boosting Productivity with Precision\n</h2><ul><li><strong>Optimal planting and spraying:</strong> Precision steering reduces overlaps and gaps, ensuring inputs like seeds, fertilizers, and pesticides are efficiently used.\n</li><li><strong>Consistent speeds and routes:</strong> Automated steering maintains steady speeds, improving implement performance and yield quality.\n</li><li> With less manual correction required, operators complete tasks faster.</li></ul><p>Data shows fields worked with autosteer systems have yield increases of up to 10% due to improved uniformity and input efficiency.</p><h2>\n  \n  \n  Technical Insights for Dealers\n</h2><p>For dealers, understanding the technical benefits is key to communicating value. Leading autosteer systems offer:</p><ul><li><strong>Multi-constellation GNSS support:</strong> Integration with GPS, GLONASS, and BeiDou for enhanced accuracy and availability.</li><li><strong>RTK correction capability:</strong> Real-time kinematic positioning reduces errors to just a few centimeters.</li><li> Many systems can be installed on existing tractors without major modifications.</li><li><strong>User-friendly interfaces:</strong> Touchscreen controls and intuitive software reduce training time.</li></ul><p>Knowing these features allows dealers to tailor the pitch to farmers‚Äô specific needs and field conditions.</p><h2>\n  \n  \n  Why Dealers Should Champion Autosteer Systems\n</h2><p>Helping customers adopt autosteer technology positions dealers as partners in modernizing agriculture. The benefits‚Äîreduced operator fatigue, higher productivity, lower input costs‚Äîare compelling. Moreover, satisfied customers become repeat buyers and brand advocates, expanding dealer networks.</p><p>Autosteer technology is more than an upgrade‚Äîit‚Äôs a productivity and health revolution for farm operators. Are you ready to lead your agricultural community toward smarter, more sustainable farming? </p><p><strong>What challenges have you seen farmers face that autosteer systems could solve? Share your thoughts below!</strong></p>","contentLength":3336,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Smart Agriculture Revolution: Autosteer Is No Longer Optional","url":"https://dev.to/gnss/smart-agriculture-revolution-autosteer-is-no-longer-optional-k90","date":1751248609,"author":"zly","guid":175490,"unread":true,"content":"<p>The future of farming is precision. For dealers of agricultural navigation systems, understanding why <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> have evolved from optional upgrades into essential tools can transform sales strategies and customer success. As farms grow larger and margins tighten, productivity, fuel savings, and operator comfort push autosteer technology to the forefront of modern agriculture.</p><h2>\n  \n  \n  Why Tractor Autosteer Systems Are Essential Today\n</h2><p>Autosteer systems use GPS and advanced sensors to guide tractors with pinpoint accuracy. This precision reduces overlaps and skips during planting, fertilizing, and spraying‚Äîmaximizing field efficiency. Dealers see firsthand how these systems unlock consistent results even in challenging environments.</p><ul><li>Up to  by avoiding redundant passes</li><li>Reduced operator fatigue with hands-free steering</li><li>Improved yield through exact seed placement</li></ul><p>As regulations and sustainability demands tighten, autosteer technology helps farmers meet compliance by applying inputs more efficiently, cutting waste and environmental impact.</p><h2>\n  \n  \n  Key Technical Features Driving Adoption\n</h2><ul><li>: Achieves sub-inch accuracy to maintain strict row spacing.</li><li>: Compatible with most tractor brands and implement controls.</li><li>: Sensors adjust steering for slopes and uneven ground, maintaining consistent guidance.</li><li>: Simple calibration and touchscreens reduce setup time and operator training needs.</li></ul><p>With improving satellite constellations and real-time corrections, autosteer systems deliver round-the-clock precision, even under canopy or in adverse weather.</p><h2>\n  \n  \n  How Dealers Can Capitalize on the Trend\n</h2><p>The shift towards smart farming accelerates demand, presenting dealers an opportunity to expand their footprint:</p><ul><li>: Highlight the ROI from reduced input costs and increased efficiency.</li><li>: Combine autosteer with yield monitors and field mapping software to offer comprehensive navigation packages.</li><li><strong>Offer training and support</strong>: Help farmers transition smoothly to new systems, enhancing satisfaction and loyalty.</li><li><strong>Leverage demonstration units</strong>: Live on-field demos make the technology relatable and trustworthy.</li></ul><p>Being proactive about this technology positions your dealership as a forward-thinking partner‚Äînot just a product supplier.</p><h2>\n  \n  \n  Future Outlook: Autosteer as the Industry Standard\n</h2><p>Autosteer systems are no longer a premium add-on‚Äîthey‚Äôre a necessity in modern precision agriculture. As farms scale and technology advances, demand will only rise. Dealers who embrace this trend early will lead the market, creating lasting value for farmers.</p><p>In this evolving landscape, your expertise in guiding clients to the right <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">tractor autosteer systems</a> is vital for unlocking the full potential of smart agriculture.</p><p><strong>Ready to drive smarter sales and help your customers revolutionize their fields?</strong> Which technical features resonate most with your farmer clients? Share your experiences or questions‚Äîlet‚Äôs steer into the future together.</p>","contentLength":2947,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (6)","url":"https://dev.to/hyperkai/string-in-python-6-28dj","date":1751242991,"author":"Super Kai (Kazuya Ito)","guid":175462,"unread":true,"content":"<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.find\" rel=\"noopener noreferrer\">find()</a> can find the substring of a string, searching from the left to the right to return the index (without error even if the substring isn't found) as shown below:</p><ul><li>The 1st argument is (Required-Type:). *Don't use .</li><li>The 2nd argument is (Optional-Type: or ):\n*Memos:\n\n<ul><li>If it's not set or ,  is set.</li></ul></li><li>The 3rd argument is (Optional-Type: or ):\n*Memos:\n\n<ul><li>If it's not set or , the length  is set.</li></ul></li><li> is returned if the substring isn't found.\n</li></ul><div><pre><code></code></pre></div><p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.rfind\" rel=\"noopener noreferrer\">rfind()</a> can find the substring of a string, searching from the right to the left to return the index (without error even if the substring isn't found) as shown below:</p><ul><li>The 1st argument is (Required-Type:). *Don't use .</li><li>The 2nd argument is (Optional-Type: or ):\n*Memos:\n\n<ul><li>If it's not set or ,  is set.</li></ul></li><li>The 3rd argument is (Optional-Type: or ):\n*Memos:\n\n<ul><li>If it's not set or , the length  is set.</li></ul></li><li> is returned if the substring isn't found.\n</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.index\" rel=\"noopener noreferrer\">index()</a> can find the substring of a string, searching from the left to the right to return the index (with error if the substring isn't found) as shown below:</p><ul><li>The 1st argument is (Required-Type:). *Don't use .</li><li>The 2nd argument is (Optional-Type: or ):\n*Memos:\n\n<ul><li>If it's not set or ,  is set.</li></ul></li><li>The 3rd argument is (Optional-Type: or ):\n*Memos:\n\n<ul><li>If it's not set or , the length  is set.</li></ul></li><li>Error occurs if the substring isn't found.\n</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.rindex\" rel=\"noopener noreferrer\">rindex()</a> can find the substring of a string, searching from the right to the left to return the index (with error if the substring isn't found) as shown below:</p><ul><li>The 1st argument is (Required-Type:). *Don't use .</li><li>The 2nd argument is (Optional-Type: or ):\n*Memos:\n\n<ul><li>If it's not set or ,  is set.</li></ul></li><li>The 3rd argument is (Optional-Type: or ):\n*Memos:\n\n<ul><li>If it's not set or , the length  is set.</li></ul></li><li>Error occurs if the substring isn't found.\n</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div>","contentLength":1704,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Script to Detect SLA Breaches in JIRA ‚Äî Simple, Fast, Effective","url":"https://dev.to/aroojjaved93/python-script-to-detect-sla-breaches-in-jira-simple-fast-effective-3pe2","date":1751231044,"author":"Arooj Javed","guid":175406,"unread":true,"content":"<p>If you‚Äôre in support engineering, you already know the pain of missing SLA deadlines and discovering it too late.</p><p>This lightweight Python script helps automate that process by checking for tickets that are approaching or breaching SLA thresholds ‚Äî so your team can react in time and stay compliant.</p><p>üöÄ What This Script Does:\n    ‚Ä¢ Connects to your JIRA Cloud instance using REST API<p>\n    ‚Ä¢ Authenticates using your email + API token</p>\n    ‚Ä¢ Scans all open issues in a selected project<p>\n    ‚Ä¢ Compares created or updated timestamps with your SLA thresholds</p>\n    ‚Ä¢ Prints out a list of tickets that may breach soon</p><p>üîß Requirements\n    ‚Ä¢ Python 3.7+\n    ‚Ä¢ A JIRA API token (can be generated via Atlassian account)</p><p>You can run this as a daily cron job or connect it to a Slack webhook for real-time alerts in your support channel.</p><p>Imagine automating something this simple but impactful ‚Äî without needing heavy tools like ServiceNow or Zendesk Enterprise.</p><p>I‚Äôve kept it simple and open:</p><p>If you‚Äôre just getting started with JIRA APIs, this is a great starter project. No frameworks. No bloated dependencies. Just clean logic and actionable results.</p><p>‚úçÔ∏è Author: Arooj Javed\nSupport Automation | DevOps Advocate | Simplifying Support Workflows</p><p>Let me know your feedback or if you‚Äôd like to see a dashboard version of this in the next post!</p>","contentLength":1349,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python course: Loops","url":"https://dev.to/costa86/python-course-loops-40ed","date":1751228880,"author":"Louren√ßo Costa","guid":175389,"unread":true,"content":"<p>This concept assumes you have read the  and  posts.</p><p>A loop is a control structure that allows your program to execute a task repeatedly, stopping only when certain conditions are met. The most basic example to demonstrate this concept is iterating the elements in a list.</p><p>This is a loop style more suitable when you know the number of times a task is to be repeated. In the following case I know it will be the same number as the quantity of elements in the list. This subtle detail will become more relevant ahead in this chapter.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>The syntax is very straightforward, but it is important to understand what is actually going on.</p><p>For each element in , I am declaring a variable , then  it. There's no problem in using the same variable name for all the elements, because for each element there's a new task repetition cycle (iteration), so this variable is re-declared for each element, in every new iteration.</p><blockquote><p>In case you are wondering why I named a variable , it's a common practice to use single letters in this very specific context (iterating a collection of elements). But this is a matter of taste, as many people tend to adopt something more descriptive, such as the singular version of the list name. In this case, it would be \"branch\". Personally, I dislike this approach, since normally these two variables' names become very similar, so it gets easy to mistake them. Learn more about these naming practices in the  post.</p></blockquote><h2>\n  \n  \n  Iterating over indexes in a collection\n</h2><p>As seen in the previous example with branches, each iteration returns the value of the element. But it's also possible to obtain the indexes along with the values, by using the  built-in class :</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><blockquote><p>If the syntax of <code>for i, v in enumerate(winners)</code> looks unfamiliar to you, this is a concept explained in the  post. </p><p>You can also use  with tuples, sets and dicts.</p></blockquote><p>Even though I know the number of times this task is to be repeated (a typical use case for the  loop), let's rewrite the example above using the  loop style, so it's easier to visualize what it does.</p><div><pre><code></code></pre></div><p>As you can see, it became a lot more verbose than the  example. I initiated  as 0, and while the value of counter is less than the quantity of elements in  (which is 4), the program performs the following tasks:</p><ul><li> the index  (0 at this moment) in .</li><li>Increments the value of  by 1 (0 + 1 = 1).</li></ul><p>Then it moves up to the next iteration, maintaining the new updated value of  (which just became 1), and repeats both tasks again. In other words,  starts at 0, then it becomes 1, then 2, then 3...then it stops, because 3 is less than 4 (remember that  is 4). This signals that the loop is over.</p><p>Another way of interpreting the  loop is like saying: \"for as long as this condition is met ( being less than the quantity of elements in branches), perform the following tasks.\"</p><blockquote><p>Instead of , you may write it . It's a shortcut for the same thing and it's more commonly used. See more about this syntax in the  post.</p></blockquote><p>Let's see a more suitable use case for the  loop, which is when you don't know how many times a task will be repeated:</p><div><pre><code></code></pre></div><p>Let's analyze the implementation:</p><p>\nThe  keyword needs to evaluate a boolean condition. Here,  is a way of saying that the condition for the loop is already met, so the Ô¨Årst loop iteration can take place.</p><p>Now let's see what happens inside the loop (tasks to be performed):</p><p><code>employee_name = input(\"Employee name: \")</code>\nThe  function does something very interesting and useful: it asks (prompts) the program user (you) to interact with it by writing a text. This text will become the value of .</p><p><code>if employee_name == \"michael\"</code>\nHere you can see a new keyword: . It signals that the loop must be exited immediately if this condition is met. This is a very important detail, because it means that whatever you happen to write after this keyword will be ignored by the loop!</p><p>With that concept in mind, the task is to check whether  is equal to \"michael\". If so, then the loop is over. Otherwise, it moves up to the next iteration.</p><p><code>print(\"Hello, world's best boss!\")</code>\nThis is another important concept to grasp. I don't know how many iterations will be required before you (the user) decide to type \"michael\"...you might feel like writing all the other employees‚Äô names as far as I know. So, in theory, this loop could run forever! That's the point of using the  keyword, so the loop can be exited after the condition ( being equals to \"michael\") is met.</p><p>With that in mind, it's only after the loop is over that this Ô¨Ånal  will get executed. Remember: the program is stuck in an inÔ¨Ånite loop, so nothing else happens for as long as the condition is not met!</p><p>You may use while with other types too, as long as they are validated as boolean. Let‚Äôs change the previous function to implement a number of attempts, instead of having an infinite loop:</p><div><pre><code></code></pre></div><p>In this case, the while loop requires that . The  variable starts at 1, which gives a green light to the  loop. Then  is incremented by 1 at each iteration. But if <code>employee_name == ‚Äúmichael‚Äù</code>, the loop is exited via the  keyword. If  reaches 3, it means the user did not type ‚Äúmichael‚Äù after 3 attempts, then the loop is exited too. Notice I added a nice message so the user can see the remaining attempts they have.</p><p>Alongside  ,  is another keyword used to cause interruptions in a loop. But in this case, to skip only the current iteration. Let‚Äôs see how it works:</p><div><pre><code></code></pre></div><p>In this program, each name in the list is expected to be printed, except if it starts with the letter ‚Äúj‚Äù. In this case, the name will be skipped, and the iteration will move up to the next name.</p><blockquote><p>In a way, both  and  are similar in their nature. While  exits the whole loop,  exits only the current element in the loop. Also, both can be used in  and  loops.</p></blockquote><blockquote><p>üòä Enjoying this series? The full book contains even more content! Support my work by purchasing the complete book in digital or paperback formats. Click below to find out more.<a href=\"https://buymeacoffee.com/costa86/e/424861\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F97kfgviyhezekzsuaiwp.png\" alt=\"Alt text\" width=\"800\" height=\"199\"></a></p></blockquote>","contentLength":5889,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python course: Deconstructing","url":"https://dev.to/costa86/python-course-deconstructing-7oa","date":1751226909,"author":"Louren√ßo Costa","guid":175370,"unread":true,"content":"<p>This is a process of extracting values from data structures such as lists, tuples, and dicts, and assigning them to isolated variables in a single statement. This is also known as \"unpacking\".</p><div><pre><code></code></pre></div><ul><li>Notice that the order matters here. The variables will match their respective position in the collection.</li><li>When deconstructing a dict, the variable's names do not need to match the keys' names. Only the position matters. See that I deconstructed  to the \"name\" key and  to the \"is_active\" key.</li></ul><p>Another interesting use case is to use deconstructed values as function arguments.</p><div><pre><code></code></pre></div><p>The output of both calls to  is the same:</p><p>And another example using a dict as a **kwargs argument:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Notice that in the previous example, the order of the keys in the employee dict doesn't match the respective deconstructed variables described as parameters in the  function. So, based on the rules I mentioned earlier, it should not work. But it does work!</p><p>The reason it works is because  was passed to the function as a ** kwargs argument. If you recall from the  post, there's a very distinct difference in calling a function with unnamed arguments (* args) and named arguments (** kwargs). </p><p>As a result, what matters here is that the keys in  have an exact match to the parameters' names in the  function.</p><p>In other words,  gets mapped to ,  to , and  to , regardless of their position in the dict!</p><blockquote><p>üòä Enjoying this series? The full book contains even more content! Support my work by purchasing the complete book in digital or paperback formats. <strong>Click below to find out more</strong>.<a href=\"https://buymeacoffee.com/costa86/e/424861\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F97kfgviyhezekzsuaiwp.png\" alt=\"Alt text\" width=\"800\" height=\"199\"></a></p></blockquote>","contentLength":1538,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Zero to Mastery: [June 2025] Python Monthly Newsletter üêç","url":"https://zerotomastery.io/blog/python-monthly-newsletter-june-2025/?utm_source=python-rss-feed","date":1751226157,"author":"","guid":175356,"unread":true,"content":"<article>67th issue of Andrei Neagoie's must-read monthly Python Newsletter: Fastest Python, MCP Eats The World, Optimize Your Python, and much more. Read the full newsletter to get up-to-date with everything you need to know from last month.</article>","contentLength":233,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üí° TIME COMPLEXITY PRIMER ‚Äì Understand Big O Like a Kid With Candies üç¨","url":"https://dev.to/ankushsinghgandhi/time-complexity-primer-understand-big-o-like-a-kid-with-candies-2ih0","date":1751222309,"author":"Ankush Singh Gandhi","guid":175343,"unread":true,"content":"<h2>\n  \n  \n  üß† What is Time Complexity?\n</h2><p>Think of time complexity like asking:</p><blockquote><p><strong>\"How many steps will my program take as the input gets bigger?\"</strong></p></blockquote><ul><li>üß∏ Putting LEGO blocks one by one ()</li><li>üé≤ Checking only the first one ()</li><li>üìö Flipping every page of a big book to find a word ()</li><li>üïµÔ∏è Searching in a sorted drawer by cutting it in half every time ()</li></ul><h2>\n  \n  \n  üç≠ Big O Notation ‚Äì Like Candy Boxes!\n</h2><p>Let‚Äôs say you have :</p><h3>\n  \n  \n  ‚úÖ O(1) ‚Äî <strong>\"I take 1 candy, no matter how many I have\"</strong></h3><div><pre><code></code></pre></div><blockquote><p>No matter if you have 10 or 10,000 candies ‚Äî you . üéØ</p></blockquote><h3>\n  \n  \n  ‚úÖ O(n) ‚Äî </h3><div><pre><code></code></pre></div><blockquote><p>If there are 5 candies, you may look 5 times. If there are 100? You might look 100 times!</p></blockquote><h3>\n  \n  \n  ‚úÖ O(n¬≤) ‚Äî <strong>\"I compare every candy with every other candy\"</strong></h3><div><pre><code></code></pre></div><blockquote><p>Imagine you‚Äôre checking every candy against every other candy ‚Äî it gets  when the pile grows! üç¨üç¨üç¨</p></blockquote><h3>\n  \n  \n  ‚úÖ O(log n) ‚Äî <strong>\"I cut the candy box in half each time!\"</strong></h3><div><pre><code></code></pre></div><blockquote><p>Smart search! Cut your pile in half every time until you find the candy üç≠</p></blockquote><h3>\n  \n  \n  ‚úÖ O(n log n) ‚Äî </h3><blockquote><p>Merge sort, quicksort ‚Äî faster than checking every pair like O(n¬≤), but slower than O(n)</p></blockquote><div><table><tbody><tr></tr><tr><td>Taste every candy one by one üòã</td></tr><tr><td>Compare every candy with every other candy üòµ</td></tr><tr><td>Smart guess by cutting box in half each time üî™</td></tr><tr><td>Smart sorting like organizing Lego blocks fast üß±</td></tr></tbody></table></div><h2>\n  \n  \n  üß© Exercise 1: Candy Basket üç¨\n</h2><p>You have a basket of  candies. You want to find if there's .</p><div><pre><code></code></pre></div><h3>\n  \n  \n  ‚ùì What's the time complexity?\n</h3><blockquote><p>‚úÖ  ‚Äî you may need to check all the candies!</p></blockquote><h2>\n  \n  \n  üß© Exercise 2: Toy Shelf üß∏\n</h2><p>You have a list of 10 toys. You always play with the .</p><div><pre><code></code></pre></div><blockquote><p>‚úÖ  ‚Äî always 1 step, no matter how many toys!</p></blockquote><h2>\n  \n  \n  üß© Exercise 3: Checking Every Friend's Name üëßüë¶\n</h2><p>You want to say hi to every friend at the party.</p><div><pre><code></code></pre></div><blockquote><p>‚úÖ  ‚Äî say \"Hi\" once per friend!</p></blockquote><h2>\n  \n  \n  üß© Exercise 4: Double Trouble üé≠\n</h2><p>You want to check every pair of kids to see if they‚Äôre best friends.</p><div><pre><code></code></pre></div><blockquote><p>‚úÖ  ‚Äî for each kid, check with every other kid.</p></blockquote><h2>\n  \n  \n  üß© Exercise 5: Magic Box üì¶\n</h2><p>You have a  list of stickers. You want to find \"Unicorn\" using binary search.</p><div><pre><code></code></pre></div><blockquote><p>‚úÖ  ‚Äî cut the box in half each time!</p></blockquote><p>Try to guess the Big O for these:</p><ol><li>Reversing a list of  items</li><li>Adding an item to a dictionary</li><li>Looping twice one after the other (not nested)</li><li>Creating all possible pairs in a list</li><li>Looping inside a loop inside a loop (3 levels!)</li></ol><h2>\n  \n  \n  Big-O Time Complexities Cheat Sheet\n</h2><div><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr></tr><tr><td>Two-pointer / Sliding Window</td></tr><tr></tr><tr><td>Reverse / Palindrome check</td></tr><tr><td>Hashmap-based Anagram check</td></tr><tr><td>Sorting-based Anagram check</td></tr><tr><td>Reverse (iterative / recursive)</td></tr><tr></tr><tr></tr><tr><td>Push / Pop / Enqueue / Dequeue</td></tr><tr><td>Next Greater Element (Monotonic Stack)</td></tr><tr><td>Insert / Search / Delete (average)</td></tr><tr><td>Subarray with Sum / No Repeats</td></tr><tr></tr><tr><td>Traversals (Inorder / Pre / Post / Level)</td></tr><tr><td>Height, LCA, Validate BST</td></tr><tr><td>Insert / Delete (Min / Max heap)</td></tr><tr><td>Build heap (heapify array)</td></tr><tr></tr><tr><td>Longest Common Subsequence (LCS)</td></tr><tr></tr><tr><td>Detect Cycle (undirected)</td></tr></tbody></table></div>","contentLength":2787,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"coding = writing text: approach it like an essay","url":"https://dev.to/adgapar/coding-writing-text-approach-it-like-an-essay-5830","date":1751218041,"author":"Adi","guid":175325,"unread":true,"content":"<p>Every person who writes code believes it is clean. What a fallacy!</p><p>I used to think the same until my colleague Manuel asked me to review his Pull Request () for a project we were working on. As I reviewed his code, I realized that his code is so much cleaner than mine.</p><p>What made his code cleaner? Uff, I wouldn't be able to tell, but it felt better. It is like reading your own university essay and then reading one by Paul Graham or Malcom Gladwell - you just know there's a difference.</p><p>At first, I thought it was just my lack of experience with JavaScript/TypeScript (<em>as a data scientist I mostly wrote Python before</em>). But in reality, it was just me not paying enough attention to and not recognizing all patterns of clean code.</p><p>Manuel recommended me a book by Robert C. Martin and I bought it immediately. The book is called <code>The Clean Code: A Handbook of Agile Software Craftsmanship</code>. It's an extensive and detailed book that you should not read as a novel from start to finish within a day or two. Instead, it serves as a handbook - read a chapter, reflect on it, and ideally apply it in your work. While the code examples are in Java, most of the lessons are universal to other languages.</p><p>In this blog post I won't be summarizing or paraphrasing the entire book. First, honestly I don't think I internalized the entire wisdom written there to be able to share it effectively. Second, I encourage everyone to read the book and draw their own conclusions from original source. <strong>This advice applies to any topic - always go to the original source</strong>. Finally, the book has so many valuable insights that a single blog post can't capture them all.</p><p>Instead, in this blog, I'll share the first key takeaway I gained after reading and applying some of its principles.</p><p><code>write code like you're writing an essay, not just a script</code></p><p>Let me give one example of code and how to rewrite it if you think about the code as an essay. </p><p>Suppose that we have a pipeline or a workflow that executes a set of checks. First it runs . If this external check returns , then it proceeds with the second step where the status is determined based on metrics.</p><p>Here is some dummy implementation of this workflow:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  improvement #1:  write from top to bottom\n</h2><p>The main method in this class is  which is how this workflow will be used in other codebase. Imagine you see somewhere in the codebase  and you want to know what it does. </p><p>You scroll down to the middle of the file to find  implementation. It references three other methods: ,  and .  So,  you scroll up a bit to check implementation of the first two methods. Where is ? Ahh you scroll down again, this time to the bottom of the file, to find its implementation.</p><p>Quite a lot of scrolling to follow the code. Imagine reading an essay where the introduction is halfway down the page, the main arguments are at start, and the resolution is in the bottom. We can structure our code better than that. </p><p>How about reorganizing the code so that as you follow it, you only need to scroll down? This way, everything flows naturally, just like reading a well-structured document.</p><div><pre><code></code></pre></div><h2>\n  \n  \n  improvement #2: group into chapters\n</h2><p>The code inside  handles several tasks at varying levels of abstraction: it calls an external check, fetches metrics, and derives the status from both. However, at its core, it‚Äôs a two-step process. First, it performs an  (), and only if the first step is  does it proceed with the rest of the code (). If this were a book, these would be two distinct chapters: one for each step.</p><p>So, let's break  into two separate methods:  and . This division allows us to enhance each step with more complex logic without altering the original  implementation.</p><div><pre><code></code></pre></div><h2>\n  \n  \n  improvement #3:  have intentional naming\n</h2><p>Now let's take a closer look at the other methods:  and . </p><p>The  method's name suggests it returns a , which is clear and straightforward. However, we notice that  takes in two unrelated arguments:  and . To understand what this method does, how it uses each argument, and what arguments it actually accepts, you'll need to dive into its implementation‚Äîespecially if you plan to use it elsewhere.</p><p>To make the code more intuitive, let's improve the naming and split it into two methods: <code>get_status_from_outcome()</code> and <code>get_status_from_metrics()</code>. This not only simplifies the functions and ensures each does only one thing, but also makes it clear what each method accepts and returns, just from their names:</p><ul><li>: accepts outcome and returns status</li><li>: accepts metrics and returns status</li></ul><p>Otherwise, instead of creating , we could also consider  which would allow us to pass the entire  variable directly, rather than just check['outcome']. </p><p>Now let's take a closer look at .</p><p>This method uses . From the name, you'd expect it to simply fetch metrics from somewhere. When the current status isn't , the method is used exactly that way: it fetches metrics, stores them in a  variable, and then the  is determined from these .</p><p>However, when the status is , the function is called without saving its output. This suggests that  is doing something more than just fetching metrics, contrary to what the name implies.</p><p>To address this confusion, we need to dive into the implementation of . Upon inspection, we find that it actually performs two tasks:</p><ol><li>It triggers a data pre-processing job if it hasn't been triggered already.</li><li>It fetches the pre-processed data and converts it into metrics.</li></ol><p>The solution is to refactor fetch_metrics so that the data pre-processing logic is separated into its own function, e.g. <code>trigger_data_preprocessing()</code>. This will make the code more understandable and prevent any misconceptions about what  is doing.</p><p>Ultimately, the names of functions and variables should reflect their purpose and intention clearly. By choosing meaningful names, you're essentially translating your plan‚Äî\"first, I will trigger data processing, then I will fetch metrics, and finally, I will derive the status from these metrics\"‚Äîinto the code itself. The specific details, such as how processing or fetching is implemented, become secondary and abstracted away. </p><p>To conclude, the core plan remains clear and easy to follow, ensuring that anyone reading the code understands the overall structure and flow at a glance, much like skimming a book by chapters and then diving into each chapter by sections.</p><p>Does it look better? What else can be improved?</p>","contentLength":6360,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I created a script that generates word lists based on various input combinations.","url":"https://dev.to/0xanubiis/i-created-a-script-that-generates-word-lists-based-on-various-input-combinations-4dbj","date":1751216285,"author":"Aser Ahmed","guid":175290,"unread":true,"content":"<p>The script idea is simple: you provide some words to the tool, and it will generate a word list with combinations of the words along with other elements like numbers or symbols.<a href=\"https://github.com/0xanubiis/CombineGen\" rel=\"noopener noreferrer\"></a></p>","contentLength":177,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Data Science Projects You can start this weekend","url":"https://dev.to/pawandeore/data-science-projects-you-can-start-this-weekend-14dl","date":1751211164,"author":"pawan deore","guid":175248,"unread":true,"content":"<p>Looking for some hands-on data science projects to sharpen your skills this weekend? Whether you're a beginner or an experienced practitioner, working on real-world projects is one of the best ways to learn. Below, we've curated 10 fantastic data science projects from a comprehensive list, spanning various domains like NLP, computer vision, time series forecasting, and MLOps.</p><p>Each project comes with a clear objective, relevant technologies, and a link to detailed instructions‚Äîso you can dive right in!</p><p>üî• 1. Digit Recognition using CNN for MNIST Dataset\nDomain: Computer Vision / Deep Learning<p>\nTech Stack: Python, TensorFlow/Keras, CNN</p></p><p>Why Try This?\nThe MNIST dataset is perfect for beginners to explore Convolutional Neural Networks (CNNs). You'll learn how to preprocess image data, build a CNN model, and evaluate its performance.</p><p>üìä 2. Time Series Forecasting with Facebook Prophet\nDomain: Time Series Analysis<p>\nTech Stack: Python, Facebook Prophet, Cesium</p></p><p>Why Try This?\nTime series forecasting is crucial in finance, sales, and IoT. This project teaches you how to use Facebook Prophet, a powerful forecasting tool by Meta, to predict future trends.</p><p>ü§ñ 3. Text Classification with Transformers (RoBERTa &amp; XLNet)\nDomain: NLP / Transformers<p>\nTech Stack: Python, Hugging Face, PyTorch</p></p><p>Why Try This?\nTransformers like RoBERTa and XLNet dominate NLP tasks. This project walks you through fine-tuning these models for text classification, a skill useful in sentiment analysis, spam detection, and more.</p><p>üõí 4. Market Basket Analysis using Apriori &amp; FP-Growth\nDomain: Recommendation Systems<p>\nTech Stack: Python, Scikit-learn, Pandas</p></p><p>Why Try This?\nEver wondered how Amazon recommends products? This project uses association rule mining (Apriori &amp; FP-Growth) to uncover product purchase patterns‚Äîessential for retail analytics.</p><p>üìà 5. Loan Default Prediction with Explainable AI\nDomain: Finance / ML Interpretability<p>\nTech Stack: Python, LightGBM, SHAP</p></p><p>Why Try This?\nBanks need to understand why a loan might default. This project combines LightGBM with SHAP values to build a model that‚Äôs both accurate and interpretable.</p><p>üè° 6. House Price Prediction with Regression Models\nDomain: Regression / Predictive Analytics<p>\nTech Stack: Python, Scikit-learn, Pandas</p></p><p>Why Try This?\nA classic ML project! Predict house prices using linear regression, Ridge, and Lasso, while learning feature engineering and model evaluation.</p><p>üöÄ 7. Deploy an ML Model with Streamlit &amp; PyCaret\nDomain: MLOps / Deployment<p>\nTech Stack: Python, PyCaret, Streamlit</p></p><p>Why Try This?\nModel deployment is a must-have skill. This project shows how to build and deploy an ML app quickly using PyCaret for automation and Streamlit for the UI.</p><p>üé≠ 8. Fake News Detection with NLP &amp; Deep Learning\nDomain: NLP / Deep Learning<p>\nTech Stack: Python, TensorFlow, LSTM</p></p><p>Why Try This?\nFake news is a growing problem. Learn how to classify news articles as real or fake using LSTM networks, a type of recurrent neural network (RNN).</p><p>üõ†Ô∏è 9. Build a CI/CD Pipeline for ML with Jenkins\nDomain: MLOps / Automation<p>\nTech Stack: Jenkins, Docker, Python</p></p><p>Why Try This?\nCI/CD pipelines automate ML workflows. This project teaches you how to set up Jenkins for ML model testing and deployment, a valuable skill in production environments.</p><p>üèéÔ∏è 10. Real-Time Streaming Pipeline with Spark &amp; Kafka\nDomain: Big Data / Real-Time Analytics<p>\nTech Stack: PySpark, Kafka, AWS</p></p><p>Why Try This?\nReal-time data processing is key in IoT and finance. This project guides you in building a Spark Streaming pipeline with Kafka for live data analysis.</p><p>These projects cover diverse data science domains‚Äîfrom NLP and computer vision to MLOps and big data. Pick one that excites you and start coding this weekend!</p><p>üí° Pro Tip: If you're a beginner, start with MNIST Digit Recognition or House Price Prediction. If you're advanced, try Transformer-based NLP models or real-time Spark pipelines.</p>","contentLength":3907,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"BaatCheet - Entertaining Commentaries - MURF AI Coding Challenge 2","url":"https://dev.to/sanatkulkarni/baatcheet-entertaining-commentaries-murf-ai-coding-challenge-2-4c96","date":1751210494,"author":"Sanat Kulkarni","guid":175247,"unread":true,"content":"<p>\nI am a 20 year old, my generation's attention span is messed up and we cannot focus if the video is longer than 5 minutes because of all the brainrot that we watch on Instagram or Youtube or other platforms. <p>\nThis is the reason why, Using Murf AI, I have created a system where even if the video is long, the consumer does not get bored.</p>\nSimply, the idea is to input a video, an interesting commentary is generated, consisting of a funny voice and an informative voice having a conversation about the video, that the end-consumer can listen to and get a proper idea of what is going on in the video.</p><p><strong>Github Repository Link to the Project</strong></p><p><strong>How I have used MURF in the project</strong>\nI have used murf to procedurally generate the commentary for the videos that are inputted by the user :). For now, this has been done procedurally but once i get the credits (If i win :) or i get a paid subscription), I can use the 'context' feature provided by MURF AI to generate the voices in just a single concurrent thread. I have used the Ken Voice with High pitch and speed at the \"clown\" setting, so that it sounds funny. For the informative voice, I have used the Abhik voice in a \"conversational\" tone with a +10% speed so people like me won't get bored when getting lectured. </p><p>\nThis can be heavily used in Social Media Marketing by companies that are making content that is heavily targeted towards the younger generations such as Gen Z or Gen Alpha. Due to the reducing attention span in these generations, It is possible to promote content in a quirky but informative way by using MURF AI voices to put the videos in a conversational context and help the user get a better gist of the product before getting into the actual proper video. Also a lot of game shows can use these conversational channels to make user-engagement a lot better and increase the popularity ratings of their shows by making the end-consumer more involved in the process itself.</p><p><strong>Created with Love by Me :) Sanat Kulkarni</strong></p>","contentLength":1978,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Getting Started with gRPC in Python (With a Restaurant Twist üçï)","url":"https://dev.to/c_6b7a8e65d067ddc62/getting-started-with-grpc-in-python-with-a-restaurant-twist--3688","date":1751209267,"author":"cycy","guid":175246,"unread":true,"content":"<p>If you've ever wondered how different parts of an app talk to each other ‚Äî or how microservices \"call\" each other behind the scenes ‚Äî this one's for you.</p><p>In this post, I'll show you how to use  to build a menu service. We'll keep things light, use a kitchen/waiter analogy üçΩÔ∏è, and write some real working code together.</p><h2>\n  \n  \n  üîÑ What's gRPC? (But Make It Restaurant-Themed)\n</h2><p>Let's say you're at a restaurant:</p><ul><li> = the  (makes food)</li><li> = the  (asks for food)</li><li> = the  (what's available)</li></ul><p>The waiter goes, \"Hey, what's on the menu today?\"<p>\nThe kitchen replies with delicious dishes.</p></p><p>This is literally what gRPC helps services do: <strong>ask for stuff, get a response</strong> ‚Äî but way faster and stricter than REST.</p><p>First, let's install what we need:</p><div><pre><code>pip grpcio grpcio-tools\n</code></pre></div><h2>\n  \n  \n  üìù Step 1: Define the Language ()\n</h2><p>We need a shared language both waiter and kitchen understand.</p><p>Create a file called :</p><div><pre><code></code></pre></div><h2>\n  \n  \n  ‚öôÔ∏è Step 2: Generate Python Code from the Proto\n</h2><p>This turns your  file into real Python code.</p><div><pre><code>python  grpc_tools.protoc  menu.proto\n</code></pre></div><p>Boom üí• ‚Äî now you've got  and .</p><h2>\n  \n  \n  üßë‚Äçüç≥ Step 3: Build the Server (Our Kitchen)\n</h2><div><pre><code></code></pre></div><h2>\n  \n  \n  üßæ Step 4: Create the Client (Our Waiter)\n</h2><div><pre><code></code></pre></div><ol><li> (in one terminal):\n</li></ol><ol><li> (in another terminal):\n</li></ol><p>You should see something like:</p><div><pre><code>üìã Today's Menu:\n----------------------------------------\nüçΩÔ∏è  Pizza Margherita\n    Fresh tomatoes, mozzarella, basil\n    üí∞ $12.99\n\nüçΩÔ∏è  Classic Burger\n    Beef patty, lettuce, tomato, cheese\n    üí∞ $9.99\n\nüçΩÔ∏è  Caesar Salad\n    Crispy romaine, parmesan, croutons\n    üí∞ $8.50\n</code></pre></div><h2>\n  \n  \n  üß† What's Actually Happening?\n</h2><div><pre><code>+-----------+        ask for menu       +-----------+\n|  Client   |  ----------------------&gt;  |  Server   |\n| (Waiter)  |                          | (Kitchen) |\n|           |  &lt;----------------------  |           |\n|           |      send back menu      |           |\n+-----------+                          +-----------+\n\n</code></pre></div><p>The waiter (client) asks for the menu using a specific method call. The kitchen (server) replies with a structured list of menu items. No JSON parsing, no HTTP overhead ‚Äî just pure, efficient communication.</p><h2>\n  \n  \n  ü§î Why Use gRPC Instead of REST?\n</h2><div><table><tbody><tr><td>Protocol Buffers (binary)</td></tr><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table></div><h2>\n  \n  \n  üöÄ Level Up: Add Error Handling\n</h2><p>Want to make it production-ready? Here's how to add proper error handling to your server:</p><div><pre><code></code></pre></div><div><pre><code>your-project/\n‚îú‚îÄ‚îÄ menu.proto\n‚îú‚îÄ‚îÄ server.py\n‚îú‚îÄ‚îÄ client.py\n‚îú‚îÄ‚îÄ menu_pb2.py (generated)\n‚îî‚îÄ‚îÄ menu_pb2_grpc.py (generated)\n</code></pre></div><ul><li>Always use <code>with grpc.insecure_channel()</code> for proper connection cleanup</li><li>Add proper logging with Python's  module</li><li>Use virtual environments: </li><li>For production, use secure channels with TLS</li></ul><p>Now that you've got the basics down, here are some fun directions to explore:</p><ul><li> (Create, Update, Delete menu items)</li><li><strong>Connect to a real database</strong> (PostgreSQL, MongoDB)</li><li> with JWT tokens</li><li> for real-time updates</li><li> for easy distribution</li></ul><p>Let me know in the comments if you want tutorials on:</p><ul><li>üîí  with authentication</li><li>üêò  integration\n</li><li>üåä  (real-time data)</li><li>üê≥ <strong>Dockerizing gRPC services</strong></li><li>üîÑ  (best of both worlds)</li></ul><p>Drop them below ‚Äî I love helping fellow devs learn backend stuff! Or tag me if you build something cool with gRPC!</p><p>Found this helpful? Give it a ‚ù§Ô∏è and follow for more beginner-friendly backend tutorials üòÑ</p>","contentLength":3254,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Crypto x AI Agents ‚Äî What Could You Build with EvoAgentX?","url":"https://dev.to/evoagentx/crypto-x-ai-agents-what-could-you-build-with-evoagentx-2a3c","date":1751207856,"author":"EvoAgentX","guid":175203,"unread":true,"content":"<p>The crypto space moves fast.\nBut what if your AI agents could move faster ‚Äî and evolve with the market?</p><p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3bp2lxn1cbqssd1yp0j5.jpg\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3bp2lxn1cbqssd1yp0j5.jpg\" alt=\"Image description\" width=\"800\" height=\"445\"></a>\nWith EvoAgentX, we‚Äôre building a framework where crypto-native agents can be:</p><ul><li>üìä Real-time market analysts</li><li>üõ† DeFi automation engineers</li></ul><p>All of this ‚Äî just by describing your goal in natural language.\n\"\"\"<p>\n No hardcoded rules. No fragile dashboards.</p>\n You say it, EvoAgentX builds it ‚Äî and over time, evolves it.</p><p>We‚Äôre still early.\n But the vision is clear:<p>\nüîÑ Crypto agents that learn from data, adapt with feedback, and optimize with every run.</p></p><ul><li>‚ÄúSummarize ETH validator activity trends weekly.‚Äù</li><li>‚ÄúAlert me when top-10 wallets make large moves.‚Äù</li><li>‚ÄúPropose tokenomic designs for a gamified loyalty token.‚Äù</li><li>‚ÄúOptimize my cross-chain yield farming strategy.‚Äù\nYes ‚Äî that‚Äôs the kind of future we believe in.</li></ul><p>üß™ We‚Äôre actively exploring these use cases.\n And if you're a builder, trader, researcher or crypto founder with similar dreams ‚Äî we‚Äôd love to connect.</p><p>üîó Explore EvoAgentX: github.com/EvoAgentX/EvoAgentX\n‚≠êÔ∏è Star the repo if this sparks your imagination ‚Äî or drop us a comment with ideas you'd love to try.<p>\nLet‚Äôs build the future of agentic crypto intelligence ‚Äî together.</p></p>","contentLength":1220,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"#5 Django Journey: Learn DRF by building an e-commerce APIs","url":"https://dev.to/purnima_chowrasia/5-django-journey-learn-drf-by-building-an-e-commerce-apis-4mcp","date":1751207787,"author":"Purnima Chowrasia","guid":175202,"unread":true,"content":"<h2>\n  \n  \n  Update: User authentication Part 2\n</h2><p>In user authentication part 1, I mentioned about starting with Token based authentication and securing product model. I have further extended this authentication feature with these added functionality:</p><ol><li>Both Product and Category models are protected: Only authenticated user can create POST/PUT/DELETE request. Anonymous user can only view the product and category, they cannot make any modification.</li><li>Built user profile: This route allowed user to view their profile and update their profile details.</li><li>Added change password functionality: Logged in user can change their password and on successful change of password their old token gets deleted and a new token is generated.</li><li>Added logout functionality: Logged in user can now logout, that means their token will be deleted. So the token they received on login is no longer valid.</li><li>Testing: Tested deleting or updating product or category only when logged in. Tested that authenticated user can view their profile, change password and logout.</li></ol><p>See you‚Äôll next time.. bye üëã</p><p>Complete code available <a href=\"https://github.com/purnima291/drf_ecommerce_api/tree/phase-3/user-authentication\" rel=\"noopener noreferrer\">here</a>.</p>","contentLength":1090,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üå± My Python Summer ‚Äî Week 2: Operators, Practice & Tiny Triumphs","url":"https://dev.to/misspresidentcodes/my-python-summer-week-2-operators-practice-tiny-triumphs-64l","date":1751203517,"author":"Khyati Sahu","guid":175171,"unread":true,"content":"<h2>\n  \n  \n  üå∏ Week 2 of My Python Summer ‚Äî Diving Deeper Into the Magic of Code\n</h2><p>After a gentle yet curious start in Week 1, I stepped into Week 2 of my Python journey with a heart full of questions and fingers ready to explore. And what a week it has been! üöÄüêç</p><h3>\n  \n  \n  üß† Learning That Felt Like Unlocking Doors\n</h3><p>This week, I dove deeper into  and  ‚Äî and suddenly, the language began to feel like a friend I was getting to know. Understanding how Python handles different data types like integers, floats, strings, and booleans helped me build a stronger foundation.</p><ul><li>üßÆ Arithmetic, comparison, and logical operators\n</li><li>‚ûï Compound assignment operators\nEach one felt like a new tool in my creative coding toolbox üß∞‚ú®</li></ul><p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8v4u8ib57km0tbq260ri.jpeg\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8v4u8ib57km0tbq260ri.jpeg\" alt=\"Image description\" width=\"328\" height=\"180\"></a>### üåü Why Python? I Discovered the ‚ÄúWhy‚Äù\nWhile learning the  and the , I also paused to understand the .<p>\nAnd that‚Äôs when I truly appreciated </p><strong>Python's simplicity and power</strong>.  </p><ul><li>üìñ Readability and elegance\n</li><li>üßµ A rich standard library\n</li><li>üåç Versatility across fields ‚Äî from data science to web development\nPython isn‚Äôt just a language ‚Äî it‚Äôs a gateway to endless possibilities.</li></ul><h3>\n  \n  \n  üìù Quizzes, Tests &amp; The Joy of Measuring My Growth\n</h3><p>I challenged myself with quizzes and small tests to reflect on how much I really understood ‚Äî and I was surprised by how much I had retained!<p>\nThese small self-checks gave me both clarity and confidence.</p></p><h3>\n  \n  \n  üß© Practice Makes Power: 30+ Problems, 15 Assignments!\n</h3><p>This week, I stayed consistent and:</p><ul><li>‚úÖ Solved </li><li>‚úÖ Completed <strong>15 assignment-style questions</strong>\nEach one sharpened my logic and made me fall a little more in love with problem-solving.</li></ul><h3>\n  \n  \n  üßô‚Äç‚ôÄÔ∏è Python‚Äôs Inbuilt Magic ‚ú®\n</h3><p>Another gem this week was discovering Python‚Äôs  ‚Äî like , , , , and many more.<p>\nThey‚Äôre like little spells that make your code </p><strong>compact, powerful, and clean</strong>.</p><p>Next week, I‚Äôm excited to:</p><ul><li>Dive deeper into  and advanced </li><li>Practice hands-on questions</li><li>Explore  to apply what I‚Äôve learned\nI can already feel my mind starting to think in logic blocks and loops. Python is becoming more intuitive with every passing day.</li></ul><h3>\n  \n  \n  üíå A Note to Future Me (and Anyone Reading)\n</h3><p>This journey isn‚Äôt about speed ‚Äî it‚Äôs about <strong>depth, joy, and staying curious</strong>.<p>\nEach line of code I write is not just syntax ‚Äî it‚Äôs a small affirmation that I'm learning, growing, and becoming the programmer I dream of being.</p><strong>‚ÄúKeep showing up. Even when the bug bites back.‚Äù</strong></p><p><strong>Here‚Äôs to more bugs, more breakthroughs, and more beautiful logic.</strong><p>\nPython ‚Äî I think we‚Äôre just getting started üíöüêç</p></p>","contentLength":2557,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üå± My Python Summer ‚Äî Week 2: Operators, Practice & Tiny Triumphs","url":"https://dev.to/misspresidentcodes/my-python-summer-week-2-operators-practice-tiny-triumphs-2mkg","date":1751203183,"author":"Khyati Sahu","guid":175170,"unread":true,"content":"<h2>\n  \n  \n  üå∏ Week 2 of My Python Summer ‚Äî Diving Deeper Into the Magic of Code\n</h2><p>After a gentle yet curious start in Week 1, I stepped into Week 2 of my Python journey with a heart full of questions and fingers ready to explore. And what a week it has been! üöÄüêç</p><h3>\n  \n  \n  üß† Learning That Felt Like Unlocking Doors\n</h3><p>This week, I dove deeper into  and  ‚Äî and suddenly, the language began to feel like a friend I was getting to know. Understanding how Python handles different data types like integers, floats, strings, and booleans helped me build a stronger foundation.</p><ul><li>üßÆ Arithmetic, comparison, and logical operators\n</li><li>‚ûï Compound assignment operators\nEach one felt like a new tool in my creative coding toolbox üß∞‚ú®</li></ul><p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8v4u8ib57km0tbq260ri.jpeg\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8v4u8ib57km0tbq260ri.jpeg\" alt=\"Image description\" width=\"328\" height=\"180\"></a>### üåü Why Python? I Discovered the ‚ÄúWhy‚Äù\nWhile learning the  and the , I also paused to understand the .<p>\nAnd that‚Äôs when I truly appreciated </p><strong>Python's simplicity and power</strong>.  </p><ul><li>üìñ Readability and elegance\n</li><li>üßµ A rich standard library\n</li><li>üåç Versatility across fields ‚Äî from data science to web development\nPython isn‚Äôt just a language ‚Äî it‚Äôs a gateway to endless possibilities.</li></ul><h3>\n  \n  \n  üìù Quizzes, Tests &amp; The Joy of Measuring My Growth\n</h3><p>I challenged myself with quizzes and small tests to reflect on how much I really understood ‚Äî and I was surprised by how much I had retained!<p>\nThese small self-checks gave me both clarity and confidence.</p></p><h3>\n  \n  \n  üß© Practice Makes Power: 30+ Problems, 15 Assignments!\n</h3><p>This week, I stayed consistent and:</p><ul><li>‚úÖ Solved </li><li>‚úÖ Completed <strong>15 assignment-style questions</strong>\nEach one sharpened my logic and made me fall a little more in love with problem-solving.</li></ul><h3>\n  \n  \n  üßô‚Äç‚ôÄÔ∏è Python‚Äôs Inbuilt Magic ‚ú®\n</h3><p>Another gem this week was discovering Python‚Äôs  ‚Äî like , , , , and many more.<p>\nThey‚Äôre like little spells that make your code </p><strong>compact, powerful, and clean</strong>.</p><p>Next week, I‚Äôm excited to:</p><ul><li>Dive deeper into  and advanced </li><li>Practice hands-on questions</li><li>Explore  to apply what I‚Äôve learned\nI can already feel my mind starting to think in logic blocks and loops. Python is becoming more intuitive with every passing day.</li></ul><h3>\n  \n  \n  üíå A Note to Future Me (and Anyone Reading)\n</h3><p>This journey isn‚Äôt about speed ‚Äî it‚Äôs about <strong>depth, joy, and staying curious</strong>.<p>\nEach line of code I write is not just syntax ‚Äî it‚Äôs a small affirmation that I'm learning, growing, and becoming the programmer I dream of being.</p><strong>‚ÄúKeep showing up. Even when the bug bites back.‚Äù</strong></p><p><strong>Here‚Äôs to more bugs, more breakthroughs, and more beautiful logic.</strong><p>\nPython ‚Äî I think we‚Äôre just getting started üíöüêç</p></p>","contentLength":2557,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python course: Conditionals","url":"https://dev.to/costa86/python-course-conditionals-lgo","date":1751201935,"author":"Louren√ßo Costa","guid":175143,"unread":true,"content":"<p>This is a very basic and essential logical concept used in programming. It's used to represent decision trees. </p><p>Consider this diagram example as a decision tree:</p><p>In programming, \"Did Ryan start the Ô¨Åre?\" could be represented as a boolean variable. If , then the result could be the string \"Sing 'Ryan started the Ô¨Åre' \". But if , then \"It was the toaster\".</p><p>Let's hop into some Python examples:</p><div><pre><code></code></pre></div><p>In this example we are using the  and  keywords as a decision tree about a discount to be applied. In other words: if  is greater than 10.0, then  is 20.0. Otherwise (that's what  means),  is 10.0. In our case, the condition is  (40.0 &gt; 10.0), so  is 20.0.</p><p>The remaining part is a pure mathematical operation to get the Ô¨Ånal price with the discount applied.</p><p>But what if the decision tree requires more than two possibilities? That's where the  keyword comes in:</p><div><pre><code></code></pre></div><p>In this example, there are three possibilities that will inÔ¨Çuence both bonus and message variables according to the value of :</p><ul><li>Possibility ‚ÄúA‚Äù:  , then bonus is 100.0</li><li>Possibility ‚ÄúB‚Äù: . Here we used the  keyword, which roughly translates into ‚Äúotherwise, if‚Ä¶‚Äù, then bonus is 50.0.</li><li>Possibility ‚ÄúC‚Äù: if none of these 2 previous possibilities  are met, we use what is stated by the  keyword, that is the equivalent to saying \"otherwise‚Ä¶\", then there‚Äôs no bonus variable. That's the reason I didn't need to state , for example; because this conclusion is already implicit! In other words, this possibility works as a fallback/default scenario.</li></ul><blockquote><p>You may add  multiple times for 4+ possibilities. Although there are better alternatives for that, such as match cases (See  post), dicts, or even ternaries (see next) in some situations.</p></blockquote><p>This is not a different conditional type  but rather an alternative way of using a conventional  statement. Its syntax may not seem very clear at Ô¨Årst glance, so let's take a different approach this time. We have a problem to solve, but instead of jumping into the code implementation, we will first gather more details about the problem itself:</p><p>A triangle may be classified in three types, accordingly to the length of its sides:</p><div><table><tbody><tr><td>All sides of equal length</td></tr><tr><td>Two sides of equal length and one side that is different</td></tr><tr><td>All three sides of different length</td></tr></tbody></table></div><p>Also, the sum of any two sides of a triangle must be greater than the third side. If this condition is not met, then it's not a valid triangle... For instance, try to draw a triangle having sides 6 cm, 3 cm and 2 cm. You cannot connect all their ends to form a triangle, right?</p><p>Now that we have more details about the problem, let's implement its solution as a function that uses a ternary to validate the possibilities and return the correct triangle type:</p><div><pre><code></code></pre></div><p>Now let's go over the implementation details:</p><p>\nThe Ô¨Årst thing to do is ensure the sides are valid. After all, there's no point in checking the triangle type if their sides cannot form a triangle in the Ô¨Årst place... So we perform this validation Ô¨Årst. If the sides are not valid, we exit the function by returning \"invalid\".</p><p>\nHere's the fun part. Notice that the validation works as a cascade, where each validation only takes place if the previous one is . It returns the value assigned to : which may be \"equilateral\", but only if <code>side_1 == side_2 == side_3</code>. If this is , then it is \"isosceles\", but only  or . If this is also , then it is \"scalene\", which works here as a fallback/default value.</p><blockquote><p>As mentioned earlier, the ternary syntax is a little unfamiliar, so it may take some time to get used to. Practicing is the key!</p></blockquote><p>Take a look again at the  function. Notice we didn‚Äôt use an  statement to check that the triangle has 3 valid sides. If you recall from the  post, whenever the  keyword is found in a function, the function is exited ! </p><p>We could have placed an  right after part 1 (that checks that the sides are valid), but because we added a , there‚Äôs no need for that. </p><p>Let‚Äôs consider another problem: say that a person is only allowed to drive at 18 years old, so we will write a function to check that. It should receive the person‚Äôs age as a parameter, and return  if they are allowed to drive, or  otherwise. Here‚Äôs three different implementations:</p><div><pre><code></code></pre></div><p>\nThis is what we would call a naive approach. The classic structure of the statements ‚Äútrains‚Äù us to think that we must add this , because there‚Äôs another condition to be verified ( not being &gt;= 18).</p><p>\nThat‚Äôs why it‚Äôs important to understand what  does. The function returns  by default, but , it returns .</p><p>\nHere‚Äôs an example of how helpful a boolean can be (see more in the   post). The validation of  is, itself, a boolean. So we simply return it.</p><p>The main reason why you should avoid using  in functions is clarity. See for yourself. It requires less cognitive effort and time to understand what  does, compared to the other two ones.</p><h2>\n  \n  \n  Dict as an alternative to conditionals\n</h2><p>If you have 3+ conditionals, a dict (covered in the  post) can be another interesting alternative to an  conditional:</p><div><pre><code></code></pre></div><p>In this example, the keys (department names) in  are roughly the equivalent to  conditionals. If the  parameter is found in , then its respective value (a list with people in the department) gets returned. But if it‚Äôs not found, then an empty list is returned. Wish to add a new ‚Äúcondition‚Äù? Just add a new key: value pair (department name and list of people, respectively) to ! </p><blockquote><p>The try and except keywords are covered in the  post. For now, keep in mind that if the  argument is not a key in , then an empty list is returned.</p></blockquote>","contentLength":5522,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Node.js vs Python: Battle of the Unhinged Scripting Languages That Ruined My Sleep Schedule","url":"https://dev.to/liemar90/nodejs-vs-python-battle-of-the-unhinged-scripting-languages-that-ruined-my-sleep-schedule-11fj","date":1751201617,"author":"Liemar Sarol","guid":175142,"unread":true,"content":"<p>Hey. I‚Äôm a 17-year-old dev, and these two languages have  victimized me. This is not a tutorial. This is a roast battle.</p><h2>\n  \n  \n  üß† Their Whole Personality:\n</h2><ul><li><p> is that chill smart kid who gets perfect scores, wears glasses for the ‚ú®aesthetic‚ú®, and probably listens to lo-fi in the rain.</p></li><li><p> is that guy who shows up with 8 energy drinks, builds an entire startup at 2am, and ghosts you mid-project.</p></li></ul><ul><li><p>:<code>if sad == True: eat_ice_cream()</code></p><blockquote><p>Legit looks like English. You can read Python while you're crying.</p></blockquote></li><li><p>:<code>() =&gt; { if(sad) console.log(\"same\") }</code></p><blockquote><p>It‚Äôs giving: \"I learned JavaScript on Codecademy and now I‚Äôm emotionally unavailable.\"</p></blockquote></li></ul><ul><li><p>:<p>\nLightning fast. Feels like it‚Äôs running from emotional intimacy.</p></p></li><li><p>:<p>\nGets the job done... eventually. Like that one friend who‚Äôs always late but brings food so you forgive them.</p></p></li></ul><ul><li><p>:<p>\nMillions of packages. Half of them are useless. One of them is literally just </p>.</p></li><li><p>:<p>\nMature, organized, and stable. The LinkedIn influencer of package managers.</p></p></li></ul><div><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr></tr><tr><td>both slap but Node is funnier</td></tr></tbody></table></div><ul><li><p>:<p>\n\"Traceback to your deepest regret. Here's what broke, why, and how to fix it.\"  </p></p></li><li><p>:<p>\n‚Äúundefined is not a function.‚Äù  </p></p><blockquote><p>Okay but can you like‚Ä¶ elaborate??? üò≠</p></blockquote></li></ul><ul><li>You want speed, async, and chaos</li><li>You're building chat apps or real-time stuff</li><li>You secretly enjoy suffering</li></ul><ul><li>You‚Äôre into AI, ML, or scraping the web like a spy</li><li>You want your code to actually make sense</li><li>You read the docs and enjoy peace</li></ul><p>Both languages are like toxic exes: fun at first, but then they gaslight you with cryptic errors at 2am.</p><p>But hey, I still use both because‚Ä¶ <em>I‚Äôm emotionally unstable and love drama.</em><p>\nThanks for coming to my TEDxTalk.</p></p><p>üí¨ Are you Team \"print('hello')\" or Team ?</p><p>Drop your loyalty oath below. I won‚Äôt judge. Much. üòå</p>","contentLength":1703,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Fundamentals: attrs","url":"https://dev.to/devopsfundamentals/python-fundamentals-attrs-2ed9","date":1751199767,"author":"DevOps Fundamental","guid":175141,"unread":true,"content":"<h2>\n  \n  \n  Beyond Dataclasses: Productionizing Python with </h2><p>In late 2022, a critical bug in our distributed tracing system nearly brought down our core payment processing pipeline. The root cause? A subtle mutation of an immutable data object representing a trace span, leading to inconsistent state across microservices. We were using standard Python dictionaries to represent these spans, relying on developer discipline to avoid modification.   was the immediate solution, providing a robust, type-safe foundation for our tracing data models. This incident highlighted a painful truth: relying on convention for data integrity in a complex, distributed system is a recipe for disaster. This post dives deep into , exploring its architectural implications, performance characteristics, and practical considerations for building production-grade Python applications.</p><h3>\n  \n  \n  What is \"attrs\" in Python?\n</h3><p> is a Python package that simplifies writing classes, primarily data-holding classes, by automatically generating boilerplate code like , , , and .  It‚Äôs not a replacement for classes, but a powerful tool for  them more concisely and reliably.  Technically,  leverages Python‚Äôs metaclass system to modify class creation. It‚Äôs heavily inspired by similar libraries in other languages (e.g., Lombok in Java) and predates Python 3.7‚Äôs built-in . While  have narrowed the gap,  remains superior in several key areas: more robust type validation, extensive customization options, and a more mature ecosystem.  It‚Äôs fundamentally about declarative data modeling, shifting focus from implementation details to  the data represents.</p><ol><li><p><strong>FastAPI Request/Response Models:</strong>  We use  extensively in our FastAPI applications to define request and response schemas.  This provides automatic validation via Pydantic integration (see section 4), ensuring data integrity at the API boundary.  The performance overhead is negligible compared to manual validation.</p></li><li><p>  Our asynchronous task queue utilizes  to define job payloads.  The immutability enforced by  prevents accidental modification of job data during processing, crucial for idempotency and reliability.</p></li><li><p><strong>Type-Safe Data Pipelines:</strong>  In our data engineering pipelines,  classes represent data records flowing through various transformation stages.  This provides strong typing and facilitates data quality checks at each step.</p></li><li><p>  We use  to define configuration objects for our CLI tools built with Click. This allows for easy validation of command-line arguments and provides a structured way to manage application settings.</p></li><li><p><strong>Machine Learning Preprocessing:</strong> classes define the configuration for our ML preprocessing pipelines.  This ensures consistent data transformations across training and inference, reducing the risk of model drift.</p></li></ol><h3>\n  \n  \n  Integration with Python Tooling\n</h3><p> plays exceptionally well with the modern Python ecosystem.</p><ul><li> classes are fully compatible with mypy, providing static type checking.  We enforce strict type checking in our CI pipeline.</li><li> integrates seamlessly with Pydantic for runtime validation and serialization/deserialization.  This is a common pattern in FastAPI and other data-intensive applications.</li><li> classes are easily testable.  The  method generated by  simplifies assertion comparisons.</li><li> classes can be used in asynchronous code without issues.  Immutability is particularly beneficial in concurrent environments.</li></ul><p>Here's a snippet from our :</p><div><pre><code></code></pre></div><p>We also use a custom runtime hook to ensure all  classes are validated on startup in critical services:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>This example demonstrates several key features:  enforces immutability,  requires keyword arguments, and  provides built-in validation.  The  hook allows for custom validation logic.</p><h3>\n  \n  \n  Failure Scenarios &amp; Debugging\n</h3><p>A common pitfall is forgetting to mark a class as .  This can lead to unexpected mutations, as demonstrated in our tracing system incident.  Another issue is complex validation logic in  that can mask underlying problems.</p><p>Debugging  classes is similar to debugging regular classes.  However, the generated methods can make tracebacks less informative.  Using  or a debugger with source code mapping is crucial.  Runtime assertions can also help catch unexpected state changes.</p><p>Here's an example of a bad state we encountered:</p><div><pre><code></code></pre></div><p>The fix is simple:  and using immutable data structures for fields like  (e.g., ).</p><h3>\n  \n  \n  Performance &amp; Scalability\n</h3><p> introduces a small performance overhead compared to manually written classes. However, this overhead is usually negligible in most applications.  We‚Äôve benchmarked  classes against equivalent  and found the performance difference to be within acceptable limits.</p><ul><li>  Minimize the use of global variables and shared mutable state.</li><li>  Reuse objects whenever possible.</li><li>  Use appropriate locking mechanisms to prevent race conditions.</li><li>  For performance-critical sections, consider using C extensions to implement custom logic.</li></ul><p>We use  to identify performance bottlenecks and  to track memory usage.</p><p> itself doesn't introduce significant security vulnerabilities. However, improper use can lead to security issues.  Insecure deserialization is a major concern.  If you're deserializing  classes from untrusted sources, use Pydantic with strict type validation to prevent code injection or privilege escalation.  Always validate input data thoroughly.</p><p>We employ a multi-layered testing strategy:</p><ul><li>  Test individual  classes and their methods.</li><li>  Test the interaction between  classes and other components.</li><li><strong>Property-based tests (Hypothesis):</strong>  Generate random inputs to test the robustness of  classes.</li><li>  Enforce static type checking.</li></ul><p>Our CI pipeline includes:</p><ul><li>  Runs unit and integration tests.</li><li>  Performs static type checking.</li><li>  Tests the code in different Python environments.</li><li>  Automates the CI process.</li><li>  Runs linters and formatters before committing code.</li></ul><h3>\n  \n  \n  Common Pitfalls &amp; Anti-Patterns\n</h3><ol><li> Leads to mutable data and potential inconsistencies.</li><li>  Can hide underlying problems and make debugging difficult.</li><li>  Defeats the purpose of using  for type safety.</li><li><strong>Using mutable default values:</strong>  Can lead to unexpected behavior.</li><li><strong>Not validating input data:</strong>  Creates security vulnerabilities.</li><li><strong>Complex inheritance hierarchies:</strong>  Can make the code harder to understand and maintain.</li></ol><h3>\n  \n  \n  Best Practices &amp; Architecture\n</h3><ul><li>  Always use type hints and enforce static type checking.</li><li>  Keep  classes focused on data representation.</li><li>  Validate input data and handle potential errors gracefully.</li><li>  Break down complex systems into smaller, independent modules.</li><li>  Use a layered configuration approach to manage application settings.</li><li>  Use dependency injection to improve testability and maintainability.</li><li>  Automate testing, linting, and deployment.</li><li>  Use Docker or other containerization technologies to ensure reproducible builds.</li><li>  Document all  classes and their methods.</li></ul><p> is a powerful tool for building robust, scalable, and maintainable Python applications.  Mastering  requires understanding its architectural implications, performance characteristics, and security considerations.  Refactor legacy code to use , measure performance, write comprehensive tests, and enforce strict type checking.  The investment will pay off in the long run by reducing bugs, improving code quality, and increasing developer productivity.  Don't just use  by default; consider  when you need more control, validation, and a mature ecosystem.</p>","contentLength":7352,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"HardView: The Fastest Way to Get Detailed Hardware Info in Python","url":"https://dev.to/gafoo/hardview-the-fastest-way-to-get-detailed-hardware-info-in-python-3h0k","date":1751199698,"author":"gafoo","guid":175140,"unread":true,"content":"<h2>\n  \n  \n  üöÄ <strong>Deep Dive into HardView: Cross-Platform Python Hardware Information</strong></h2><p>When building modern Python applications that need to be aware of the hardware they‚Äôre running on ‚Äî whether for diagnostics, monitoring, or analytics ‚Äî developers often face a lack of cross-platform tools that are both  and .</p><p> is a lightweight, high-performance , powered by a C backend, that retrieves <strong>detailed hardware information</strong> in JSON format ‚Äî with a single, simple Python API.</p><ul><li>‚úÖ : Works seamlessly on  (using WMI) and  (using sysfs and proc).</li><li>‚ö° : Written in C for minimal overhead.</li><li>üß© : Provides JSON data, ready for logging or integrating into other tools.</li></ul><h3>\n  \n  \n  üîç <strong>What Information Can You Get?</strong></h3><p>With HardView, you can pull detailed information for:</p><div><table><tbody><tr><td>BIOS vendor, version, release date</td></tr><tr><td>System manufacturer, product name, UUID</td></tr><tr></tr><tr></tr><tr><td>CPU name, cores, threads, speed</td></tr><tr><td>Total RAM, modules, speeds</td></tr><tr><td>Disk models, serial numbers, capacities</td></tr><tr><td>Network adapters, MACs, IPs</td></tr></tbody></table></div><p>Each function returns , so you can easily parse or pretty-print it.</p><p>On , HardView uses the WMI API to collect hardware data ‚Äî the same underlying system that tools like  or  rely on.</p><p>On , it reads directly from:</p><ul><li> for DMI/BIOS info</li><li> and  for CPU and RAM</li><li> for disk details</li><li> for network interfaces</li></ul><p>This hybrid approach ensures  while staying .</p><p>Install HardView directly from PyPI:</p><p> The import is case-sensitive.</p><div><pre><code></code></pre></div><p>HardView is designed for :</p><ul></ul><p>Most calls complete in under 100ms, even on older machines.</p><ul><li><strong>Cross-platform consistency</strong>: Same Python code, same output structure.</li><li>: Easy to store, send, or visualize.</li><li>: Native C code means no heavy dependencies.</li><li><ul><li>Hardware monitoring dashboards</li><li>Offline logging and audits</li></ul></li></ul><p>HardView is released under the  ‚Äî free for both commercial and personal use.</p><p><strong>Contributions are welcome!</strong></p><ul></ul><h3>\n  \n  \n  ü™ü <strong>Your Window into Hardware</strong></h3><p>If your Python app needs to know the machine it‚Äôs running on,  makes it easy, fast, and cross-platform.</p><p>Give it a try and let us know what you build with it!</p>","contentLength":1938,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python course: Operators","url":"https://dev.to/costa86/python-course-operators-2i3i","date":1751198085,"author":"Louren√ßo Costa","guid":175112,"unread":true,"content":"<div><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table></div><div><table><thead><tr></tr></thead><tbody></tbody></table></div><div><table><thead><tr></tr></thead><tbody><tr></tr><tr><td>Greater than or equals to</td></tr><tr></tr></tbody></table></div><p>This is a special comparison operator used to check whether the memory address is the same.</p><blockquote><p>Checking for equality of memory addresses is not something you come across very often in Python programs, as it is a low-level concept. But it's nice to know some basic details about it.</p></blockquote><p>See next some examples to clarify the differences between the  and  operators:</p><div><pre><code></code></pre></div><div><table><thead><tr></tr></thead><tbody><tr><td>Returns  if all operands are </td></tr><tr><td>Returns  if at least one operand is </td></tr><tr><td>Returns  if the operand is </td></tr></tbody></table></div><div><pre><code></code></pre></div><blockquote><p>üòä Enjoying this series? The full book contains even more content! Support my work by purchasing the complete book in digital or paperback formats. Click below to find out more.<a href=\"https://buymeacoffee.com/costa86/e/424861\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F97kfgviyhezekzsuaiwp.png\" alt=\"Alt text\" width=\"800\" height=\"199\"></a></p></blockquote><div><table><thead><tr></tr></thead><tbody><tr><td>Evaluates to  if a value is found in a collection</td><td>returns </td></tr><tr><td>Evaluates to  if a value is  in a collection</td><td> returns </td></tr></tbody></table></div><p>These operators work with collections such as tuples, lists, sets and dicts:</p><div><pre><code></code></pre></div><p>This is an important concept, since it deÔ¨Ånes the order in which operations are performed. It works the same as in mathematical operations, where parentheses has higher precedence, meaning they are evaluated Ô¨Årst:</p><div><pre><code></code></pre></div><p>In Python, bitwise operators (,  and ) are mainly used for integer values and binary data. They can also be used for boolean values ( and ) which are internally represented as integers (1 and 0).</p><p>These operators are more used in the context of binary manipulation, which is a concept covered in the Bytes chapter. Read more about them <a href=\"https://wiki.python.org/moin/BitwiseOperators\" rel=\"noopener noreferrer\">here</a>.   </p><p>Both  and  operators are used for concatenation and intersection, respectively. If you have read the  post, then you have already seen them.</p><blockquote><p>Be aware that you are eligible get a Wise card or your first international transfer, up to 500 EUR, free! I've been using their service for years and it's a great way to send/receive money abroad, creating disposable virtual cards, and more. : <a href=\"https://wise.com/invite/dic/antoniod535\" rel=\"noopener noreferrer\">Sponsored link</a>.</p><p>By now you may have heard of ElevenLabs. Their AI voice cloning service is simply off the charts! : <a href=\"https://try.elevenlabs.io/j4qtfagxd271\" rel=\"noopener noreferrer\">Sponsored link</a>.</p></blockquote>","contentLength":1910,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üåç Sanjeevani [Murf AI Coding Challenge 2]","url":"https://dev.to/rachit_bansal/sanjeevani-murf-ai-coding-challenge-2-445l","date":1751194488,"author":"Rachit Bansal","guid":175085,"unread":true,"content":"<p> is a multilingual AI-powered virtual doctor that accepts <strong>voice, text, or image inputs</strong> and responds with realistic, human-like diagnosis and remedy using  and .</p><p>It addresses the problem of language barriers and accessibility in digital healthcare. Whether a patient speaks Hindi, French, Spanish, or Chinese ‚Äî Sanjeevani listens, understands, and speaks back like a real doctor.</p><p>üé• <strong>Watch Sanjeevani in action:</strong></p><p>Murf AI powers the voice and translation layer in Sanjeevani:</p><ul><li>‚úÖ : Converts Groq-generated medical advice into lifelike speech using Murf‚Äôs voice models.</li><li>üåê : Automatically translates diagnosis into the selected language before speech synthesis.</li><li>üéôÔ∏è : Used Murf's voice IDs to customize the sound per language (e.g., Hindi, Japanese, German).</li></ul><p>This brings a human warmth to AI conversations ‚Äî vital for a healthcare app.</p><ul><li>üè• : For patients who can‚Äôt read or write, Sanjeevani offers voice-based, language-native assistance.</li><li>üåç : With 16+ language support, it‚Äôs usable from India to Italy.</li><li>üñºÔ∏è : Users can upload a rash or wound image for visual diagnosis via LLM.</li></ul><p>Sanjeevani enhances digital healthcare accessibility, especially for non-English speaking and underserved populations. It‚Äôs a step toward .</p><ul><li> ‚Äì Text-to-speech and multilingual translation\n</li><li> ‚Äì Medical advice generation\n</li><li> ‚Äì Voice-to-text transcription\n</li><li> ‚Äì Web-based interface\n</li><li><strong>Python, langdetect, PyDub, SpeechRecognition</strong></li></ul>","contentLength":1411,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python course: Boolean logic","url":"https://dev.to/costa86/python-course-boolean-logic-36cj","date":1751194184,"author":"Louren√ßo Costa","guid":175084,"unread":true,"content":"<p>This is a data type used to represent a situation that can assume only one out of two possibilities. It's like the outcome of flipping a coin: it must be either head or tails. There's no third option. Despite its simplicity, it's a very useful data type that can help remove ambiguity and provide clarity and elegance to your programs.</p><p>The two possible values for a boolean are  or .</p><div><pre><code></code></pre></div><p>\nThis is a basic mathematical comparison between numbers using the operators greater than (), less than (), and greater than or equals ().</p><p>\nThis can cause confusion sometimes, because the operator for assigning values () is very similar to the operator for equivalence (). Here, the value of this variable is equal to the output of the operation  (which is , since 1 is equal to 1). In this case, adding parentheses may improve readability. Feel free to write it as: . Read more about operators in the  post.</p><p>\nThe comparison works for strings and other data types as well. Notice that in  I used the not equal operator . In other words, it's like asking: is \"ryan\" different than \"kelly\"? The answer is yes ().</p><p>\nThis is a more realistic use case of a boolean. The  function returns the equality check between the  argument and the string \"michael\". Where it returns  if name is equals to () \"michael\". Otherwise, it returns . There is not a third possibility!</p><blockquote><p>Notice I didn't need to explicitly write  or  as return options. This is the elegance and simplicity that I mentioned earlier about booleans.</p></blockquote><blockquote><p>üòä Enjoying this series? The full book contains even more content! Support my work by purchasing the complete book in digital or paperback formats. Click below to find out more.<a href=\"https://buymeacoffee.com/costa86/e/424861\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F97kfgviyhezekzsuaiwp.png\" alt=\"Alt text\" width=\"800\" height=\"199\"></a></p></blockquote>","contentLength":1658,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python course: Sets","url":"https://dev.to/costa86/python-course-sets-4kfj","date":1751192995,"author":"Louren√ßo Costa","guid":175083,"unread":true,"content":"<p>This is another data type used to store values as a collection in Python. Sets offer a very interesting feature, though: uniqueness of elements. This means that if you add the same element twice (or more) to a set, it will be ignored! This is useful if you want to ensure your collection does not contain any duplicated elements:</p><div><pre><code></code></pre></div><p>Notice that  and  don't contain any repeated elements, even though I tried to add duplicates into them.</p><p>Also, notice that when I  them, the order of the elements is not respected! This has to do with some internal specifications on how Python stores these values in memory (it uses hash tables). As a consequence of that, you cannot access individual elements by index in a set, as we do in lists and tuples! As a workaround to this limitation, you can easily create a list out of a set:</p><div><pre><code></code></pre></div><blockquote><p>This procedure of converting a type into another (in this case, a set into a list), is known as ‚Äúcasting‚Äù.</p></blockquote><p>Apart from this validation for uniqueness, another interesting use case for sets is performing union and intersection operations of elements in different sets.</p><div><pre><code></code></pre></div><blockquote><p>If the symbols \"\" and \"\" are unfamiliar to you (as seen in  and ), check out the bitwise operators in the  post.</p></blockquote><blockquote><p>üòä Enjoying this series? The full book contains even more content! Support my work by purchasing the complete book in digital or paperback formats. Click below to find out more.<a href=\"https://buymeacoffee.com/costa86/e/424861\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F97kfgviyhezekzsuaiwp.png\" alt=\"Alt text\" width=\"800\" height=\"199\"></a></p></blockquote><blockquote><p>Be aware that you are eligible get a Wise card or your first international transfer, up to 500 EUR, free! I've been using their service for years and it's a great way to send/receive money abroad, creating disposable virtual cards, and more. : <a href=\"https://wise.com/invite/dic/antoniod535\" rel=\"noopener noreferrer\">Sponsored link</a>.</p><p>By now you may have heard of ElevenLabs. Their AI voice cloning service is simply off the charts! : <a href=\"https://try.elevenlabs.io/j4qtfagxd271\" rel=\"noopener noreferrer\">Sponsored link</a>.</p></blockquote>","contentLength":1749,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Spell Checker- Operation on Text-NLP","url":"https://dev.to/datatoinfinity/spell-checker-operation-on-text-nlp-17fg","date":1751187963,"author":"datatoinfinity","guid":175048,"unread":true,"content":"<p>operation on text:</p>\n\n<ul>\n<li>Delete</li>\n<li>Swap</li>\n<li>Replace</li>\n<li>Insert</li>\n</ul>\n\n<h3>\n  \n  \n  Split\n</h3>\n\n<p>It will be use in all other operation.</p>\n\n<pre>\ndef split(word):\n    parts=[]\n    for i in range(len(word)+1):\n        parts+=[(word[ : i],word[i :])]\n    return parts\nsplit('datatoinfinity')\n</pre>\n\n<pre>\nOutput:\n[('', 'datatoinfinity'),\n ('d', 'atatoinfinity'),\n ('da', 'tatoinfinity'),\n ('dat', 'atoinfinity'),\n ('data', 'toinfinity'),\n ('datat', 'oinfinity'),\n ('datato', 'infinity'),\n ('datatoi', 'nfinity'),\n ('datatoin', 'finity'),\n ('datatoinf', 'inity'),\n ('datatoinfi', 'nity'),\n ('datatoinfin', 'ity'),\n ('datatoinfini', 'ty'),\n ('datatoinfinit', 'y'),\n ('datatoinfinity', '')]\n</pre>\n\n<p><strong>Explanation</strong></p>\n\n<ol>\n<li>The function takes a single word and return all the possible ways to split it into two part.</li>\n<li>\n<code>len('datatoiinfinity')=14</code>, so loop goes through <code>i=0</code> to <code>i=14</code> </li>\n<li>For each <code>i</code> it creates a tuple <code>(word[:i],word[i:])</code> i.e, a split between first <code>i</code> characters and the rest.</li>\n<li>Each tuple represent:\n\n<ul>\n<li>First part: word[:i]</li>\n<li>Second part: word[i:]</li>\n</ul>\n</li>\n</ol>\n\n<h3>\n  \n  \n  Delete\n</h3>\n\n<pre>\ndef delete(word):\n    output=[]\n    for l,r in split(word):\n        output.append(l+r[1:])\n    return output\ndelete('hello')\n</pre>\n\n<pre>\n['ello', 'hllo', 'helo', 'helo', 'hell', 'hello']\n</pre>\n\n<p><strong>Explanation</strong></p>\n\n<ol>\n<li>The <code>delete()</code> function returns a list of words formed by deleting one character at every possible position from the input word.</li>\n<li>The function uses your pervious <code>split(word)</code> to divide the word at all position.</li>\n<li>For each <code>split (l, r)</code>, it removes the first character of <code>r</code>, effectively deleting one character from the original word.</li>\n</ol>\n\n<h3>\n  \n  \n  Swap\n</h3>\n\n<pre>\ndef swap(word):\n    output = []    \n    for l,r in split(word):\n        if (len(r) &gt; 1):\n            output.append(l + r[1] + r[0] + r[2:])\n    return output\n            \nswap('Hello')\n</pre>\n\n<pre>\n['eHllo', 'Hlelo', 'Hello', 'Helol']\n</pre>\n\n<p><strong>Explanation</strong></p>\n\n<ol>\n<li>This function returns a list of words created by swapping two adjacent characters in the word ‚Äî this simulates a common typo where two letters are accidentally typed in the wrong order (like <code>\"hlelo\"</code> instead of <code>\"hello\"</code>).</li>\n<li>Uses your previously defined <code>split(word)</code> to divide the word at each position.</li>\n<li>If the right part r has at least 2 characters, it swaps the first two characters of <code>r</code>, and joins the result back with <code>l</code>.</li>\n</ol>\n\n<h3>\n  \n  \n  Replace\n</h3>\n\n<pre>\ndef replace(word):\n    \n    characters = 'abcdefghijklmnopqrstuvwxyz'\n    output = []    \n\n    for l,r in split(word):\n        for char in characters:\n            output.append(l + char +  r[1:])\n    return output\n\nlen(replace('lave'))\n</pre>\n\n<pre>\nOutput:\n\n130\n</pre>\n\n<p><strong>Explanation</strong></p>\n\n<p>1.This function simulates replacing each character in a word with every letter of the alphabet, one at a time.It generates all possible one-character replacements.</p>\n\n<ol>\n<li>For each position in the word (using <code>split()</code>), it:\n\n<ul>\n<li>Keeps the left part <code>l</code>.</li>\n<li>Replaces the first character of the right part <code>r</code> (i.e., the    current character) with every letter in the alphabet.</li>\n<li>Appends the result to output.</li>\n</ul>\n</li>\n</ol>\n\n<h3>\n  \n  \n  Insert\n</h3>\n\n<pre>\ndef insert(word):\n\n    characters = 'abcdefghijklmnopqrstuvwxyz'\n    output = []\n\n    for l,r in split(word):\n        for char in characters:\n            output.append(l + char + r)\n\n    return output\n\nlen(insert('lve'))\n</pre>\n\n<pre>\nOutput:\n\n104\n</pre>\n\n<p><strong>Explanation</strong></p>\n\n<ol>\n<li>This function simulates inserting one character (from <code>'a'</code> to <code>'z'</code>) at every possible position in the word.</li>\n<li>It uses your <code>split(word)</code> to split at every position.</li>\n<li>At each position, it inserts each character from <code>'a'</code> to <code>'z'</code>.</li>\n</ol>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Boost]","url":"https://dev.to/iloncka/-5h8m","date":1751186249,"author":"Ilona Kovaleva","guid":175010,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/code42cate\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F461127%2F034233c4-ba6e-473c-8a8d-783831764a10.jpeg\" alt=\"code42cate\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/code42cate/move-over-llama-tencents-new-open-llm-is-ready-to-self-host-a73\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>Move Over LLaMA: Tencent's New Open LLM is Ready to Self-Host</h2>\n      <h3>Jonas Scholz „Éª Jun 29</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#ai</span>\n        <span class=\"ltag__link__tag\">#opensource</span>\n        <span class=\"ltag__link__tag\">#news</span>\n        <span class=\"ltag__link__tag\">#python</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Unlocking the Power of Words: Key Applications of Natural Language Processing","url":"https://dev.to/dev_patel_35864ca1db6093c/unlocking-the-power-of-words-key-applications-of-natural-language-processing-3fp3","date":1751183877,"author":"Dev Patel","guid":174975,"unread":true,"content":"<p>Imagine a world where computers understand human language as effortlessly as we do. This isn't science fiction; it's the promise of Natural Language Processing (NLP), a field of artificial intelligence rapidly transforming how we interact with technology and each other. NLP allows computers to \"read,\" \"understand,\" and even \"respond\" to human language, opening up a vast array of applications across numerous industries. This article explores the key applications of NLP, its impact, and the challenges it faces.</p>\n\n<p><strong>Understanding the Core Concepts:</strong></p>\n\n<p>At its heart, NLP is about bridging the gap between human communication and computer understanding. Think of it like teaching a computer to speak and listen fluently. This involves several key techniques:</p>\n\n<ul>\n<li>\n<strong>Text Preprocessing:</strong> This is the initial cleaning and preparation of text data. Imagine cleaning up a messy room before you can organize it ‚Äì removing punctuation, converting to lowercase, and handling special characters.</li>\n<li>\n<strong>Tokenization:</strong> Breaking down sentences into individual words or phrases (tokens).  This is like separating the words in a sentence to understand their individual meanings.</li>\n<li>\n<strong>Part-of-Speech Tagging:</strong> Identifying the grammatical role of each word (noun, verb, adjective, etc.).  This is like assigning labels to each word to understand its function in the sentence.</li>\n<li>\n<strong>Named Entity Recognition (NER):</strong> Identifying and classifying named entities like people, organizations, and locations.  This is like highlighting important names and places in a text.</li>\n<li>\n<strong>Sentiment Analysis:</strong> Determining the emotional tone (positive, negative, neutral) expressed in text.  This is like gauging the mood or feeling behind a message.</li>\n<li>\n<strong>Machine Translation:</strong> Automatically translating text from one language to another.  This is like having a real-time interpreter for different languages.</li>\n</ul>\n\n<p>These techniques, combined with advanced machine learning algorithms, allow NLP systems to perform a wide range of tasks.</p>\n\n<p><strong>Significance and Problem-Solving:</strong></p>\n\n<p>The significance of NLP lies in its ability to address several critical problems and unlock new opportunities. The sheer volume of unstructured text data generated daily ‚Äì from social media posts to customer reviews to medical records ‚Äì is overwhelming for humans to process manually. NLP provides the tools to automate this process, extracting valuable insights and improving decision-making.</p>\n\n<p><strong>Potential Applications Across Industries:</strong></p>\n\n<p>The applications of NLP are vast and constantly expanding:</p>\n\n<ul>\n<li>\n<strong>Customer Service:</strong> Chatbots powered by NLP provide instant support, answering frequently asked questions and resolving simple issues, freeing up human agents for more complex tasks.</li>\n<li>\n<strong>Healthcare:</strong> NLP analyzes medical records, research papers, and patient feedback to improve diagnostics, personalize treatment plans, and accelerate drug discovery.</li>\n<li>\n<strong>Finance:</strong> NLP processes financial news, reports, and social media sentiment to predict market trends and assess risk.</li>\n<li>\n<strong>Marketing and Sales:</strong> NLP analyzes customer reviews and feedback to understand preferences, personalize marketing campaigns, and improve product development.</li>\n<li>\n<strong>Education:</strong> NLP tutors provide personalized learning experiences, assess student understanding, and offer tailored feedback.</li>\n<li>\n<strong>Legal:</strong> NLP reviews legal documents, identifies relevant information, and assists in legal research, dramatically speeding up the process.</li>\n</ul>\n\n<p><strong>Transformative Impact:</strong></p>\n\n<p>NLP's transformative impact extends beyond individual industries. It's driving advancements in accessibility, enabling tools for people with disabilities, like text-to-speech and speech-to-text software. It's fostering better communication across languages and cultures, breaking down barriers and fostering global understanding. It's even revolutionizing creative fields, assisting writers with grammar and style, generating creative content, and translating works across languages.</p>\n\n<p><strong>Challenges and Ethical Considerations:</strong></p>\n\n<p>Despite its immense potential, NLP faces several challenges:</p>\n\n<ul>\n<li>\n<strong>Data Bias:</strong> NLP models are trained on data, and if that data reflects existing societal biases, the models will perpetuate and even amplify those biases.  This can lead to unfair or discriminatory outcomes.</li>\n<li>\n<strong>Ambiguity and Nuance:</strong> Human language is complex and nuanced, making it challenging for NLP models to accurately interpret subtle meanings, sarcasm, or context.</li>\n<li>\n<strong>Privacy Concerns:</strong> The use of NLP to analyze personal data raises significant privacy concerns, requiring careful consideration of data security and ethical guidelines.</li>\n<li>\n<strong>Lack of Explainability:</strong> Some NLP models, particularly deep learning models, are \"black boxes,\" making it difficult to understand how they arrive at their conclusions.  This lack of transparency can hinder trust and accountability.</li>\n</ul>\n\n<p><strong>Conclusion: A Future Shaped by Language Understanding</strong></p>\n\n<p>Natural Language Processing is rapidly evolving, transforming how we interact with information and technology. While challenges remain, the potential benefits are immense. Addressing ethical concerns and fostering responsible development are crucial to ensure that NLP's power is harnessed for the betterment of society. As NLP continues to advance, its impact on our lives will only grow, shaping a future where communication between humans and machines is seamless and insightful. The ability to understand and process human language at scale will undoubtedly redefine numerous aspects of our world, unlocking unprecedented opportunities across industries and improving lives globally.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Forget Cloud AI ‚Äî Build Your Own Private Chat App with Web Context Using Ollama","url":"https://dev.to/novanest_82b6db17c07b068f/forget-cloud-ai-build-your-own-private-chat-app-with-web-context-using-ollama-36hj","date":1751178858,"author":"NovaNest","guid":174949,"unread":true,"content":"<h3>\n  \n  \n  <strong>Why You Should Have Your Own Local LLM</strong>\n</h3>\n\n<p>The AI revolution is hard to ignore ‚Äî chatbots, coding assistants, AI writing tools are everywhere. But behind that convenience often lies a hidden cost: <strong>your data</strong>, your privacy, and your control.</p>\n\n<p>Most popular AI tools rely on cloud-based large language models (LLMs) running on servers you don‚Äôt own, with prompts and data sent over the internet. Even when companies promise security, the reality is simple: <strong>you don't fully control what happens to your inputs or the models generating your outputs.</strong></p>\n\n<p>That‚Äôs where <strong>local LLMs</strong> change the game.</p>\n\n<p>Thanks to projects like <a href=\"https://ollama.com/\" rel=\"noopener noreferrer\">Ollama</a> and the rise of efficient, open-source models like <strong>LLaMA</strong>, <strong>Mistral</strong>, and others, it‚Äôs now possible to run capable AI models <strong>entirely on your own machine</strong>.</p>\n\n<h3>\n  \n  \n  <strong>Why Should You Care About Local AI?</strong>\n</h3>\n\n<p><strong>Full Privacy:</strong> Your conversations, data, and context never leave your device.</p>\n\n<p><strong>No API Costs:</strong> Forget subscriptions or API limits.</p>\n\n<p><strong>Offline Friendly:</strong> Your AI assistant works even without internet.</p>\n\n<p><strong>Tinker &amp; Learn:</strong> Dive into how prompts, context, and LLMs really work under the hood.</p>\n\n<p><strong>Total Control:</strong> You decide what models to use, how they're updated, and how your data flows.</p>\n\n<p>In this post, I‚Äôll show you how I built <a href=\"https://github.com/NovaNestApps/ContextChat\" rel=\"noopener noreferrer\"><strong>ContextChat</strong></a> ‚Äî a simple, private chat app that combines a local LLM with web context you control ‚Äî and how you can do the same.</p>\n\n<h3>\n  \n  \n  <strong>What is ContextChat? ‚Äî Project Overview</strong>\n</h3>\n\n<p><em>Imagine having your own AI assistant ‚Äî one that not only chats with you, but also understands the web pages you care about ‚Äî all without sending a single byte of data to the cloud.</em></p>\n\n<p>That‚Äôs exactly what <strong>ContextChat</strong> does.</p>\n\n<h3>\n  \n  \n  <strong>In Simple Terms:</strong>\n</h3>\n\n<p><a href=\"https://github.com/NovaNestApps/ContextChat\" rel=\"noopener noreferrer\"><strong>ContextChat</strong></a> is a fully local, open-source AI chat application that enhances your conversations with context from web pages you choose. It runs entirely on your machine, powered by open-source LLMs like LLaMA or Mistral through <a href=\"https://ollama.com/\" rel=\"noopener noreferrer\"><strong>Ollama</strong></a>.</p>\n\n<p>But unlike a basic chat app, it doesn‚Äôt just rely on the model‚Äôs static knowledge. You can add URLs, and <a href=\"https://github.com/NovaNestApps/ContextChat\" rel=\"noopener noreferrer\"><strong>ContextChat</strong></a> automatically extracts information from those pages, injecting that into your chat session as live, dynamic context.</p>\n\n<h3>\n  \n  \n  <strong>Who is it For?</strong>\n</h3>\n\n<ul>\n<li>Developers exploring AI tooling</li>\n<li>Privacy-conscious users avoiding cloud AI</li>\n<li>Researchers experimenting with context-aware LLMs</li>\n<li>Anyone curious about building practical, local AI apps</li>\n<li>Tinkerers who want to fork, extend, or modify their own private AI assistant</li>\n</ul>\n\n<p><strong>Key Features at a Glance:</strong></p>\n\n<ul>\n<li>Desktop chat app with clean, simple UI</li>\n<li>Runs a local server to manage chat, context, and LLM interaction</li>\n<li>Lets you add web pages as context sources</li>\n<li>Sends combined prompts to your locally running LLM</li>\n<li>Fully private ‚Äî no internet required after initial setup</li>\n</ul>\n\n<p><strong>Open source ‚Äî anyone can fork, modify, and build on top of it</strong></p>\n\n<p>In short, <a href=\"https://github.com/NovaNestApps/ContextChat\" rel=\"noopener noreferrer\"><strong>ContextChat</strong></a> lets you experience a more useful, privacy-first AI assistant ‚Äî without giving up control of your data or relying on external APIs ‚Äî and gives you the source code to make it your own.</p>\n\n<h3>\n  \n  \n  <strong>Under the Hood: Architecture Breakdown</strong>\n</h3>\n\n<p><em>Building a private AI chat app with web context sounds complex, but the core system is designed to be simple, modular, and entirely local.</em></p>\n\n<p>Here‚Äôs how <a href=\"https://github.com/NovaNestApps/ContextChat\" rel=\"noopener noreferrer\"><strong>ContextChat</strong></a> works behind the scenes.</p>\n\n<h3>\n  \n  \n  <strong>The Core Components</strong>\n</h3>\n\n<p>The project is divided into three main parts:</p>\n\n<ol>\n<li>\n<p><strong>GUI Chat App (Tkinter, Python)</strong></p>\n\n<p>A minimal desktop interface for sending messages and viewing responses. Built with Tkinter for quick prototyping and cross-platform compatibility.</p>\n</li>\n<li>\n<p><strong>MCP Server (FastAPI, Python)</strong></p>\n\n<p>The Message/Context/Prompt (MCP) server handles the logic:</p>\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>- Manages conversation history\n- Stores added URLs\n- Crawls web pages for content\n- Assembles the final prompt with context\n- Sends it to the local LLM via Ollama\n</code></pre>\n\n</div>\n\n<ol>\n<li>\n<strong>LLM Inference (Ollama + GGUF Models)</strong>\n\n<ul>\n<li>Ollama runs a chosen open-source LLM entirely on your machine</li>\n<li>Supports models like LLaMA, Mistral, and others in efficient GGUF format</li>\n<li>Processes the prompt and returns the AI-generated response</li>\n</ul>\n</li>\n</ol>\n\n<h3>\n  \n  \n  <strong>The Data Flow</strong>\n</h3>\n\n<p>A typical interaction looks like this:</p>\n\n<ol>\n<li>You type a message in the chat GUI</li>\n<li>The GUI sends your message to the MCP server</li>\n<li>MCP gathers relevant context:\n\n<ul>\n<li>Recent chat history</li>\n<li>Any added web page content</li>\n</ul>\n</li>\n<li>MCP combines everything into a single prompt</li>\n<li>The prompt is sent to your local Ollama LLM</li>\n<li>The LLM generates a response, returned via MCP to the GUI</li>\n</ol>\n\n<p>All of this happens <strong>locally</strong>. No external APIs, no cloud dependencies ‚Äî giving you full control over your data and AI interaction.</p>\n\n<h3>\n  \n  \n  <strong>Step-by-Step: Setting Up Your Own ContextChat</strong>\n</h3>\n\n<p><em>One of the biggest advantages of ContextChat is how easy it is to get started. In just a few steps, you can have a private, local AI chat app running on your own machine.</em></p>\n\n<h3>\n  \n  \n  <strong>Prerequisites</strong>\n</h3>\n\n<ul>\n<li>Any Computer</li>\n<li>Python 3.9 or newer installed</li>\n<li>Basic familiarity with terminal or command prompt</li>\n</ul>\n\n<p><strong>Note:</strong> The project is primarily tested on Mac and Linux. Windows works, but some steps may vary slightly depending on your setup.</p>\n\n<h3>\n  \n  \n  <strong>Step 1: Install Ollama</strong>\n</h3>\n\n<p>Ollama handles running the local LLM efficiently. To install it, follow the official instructions: <a href=\"https://ollama.com/download\" rel=\"noopener noreferrer\">https://ollama.com/download</a></p>\n\n<p>For Linux users, here‚Äôs a quick example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>curl <span class=\"nt\">-fsSL</span> https://ollama.com/install.sh | sh\n</code></pre>\n\n</div>\n\n\n\n<p>Once installed, pull your preferred LLM model (e.g., Mistral or LLaMA):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>ollama serve\nollama pull mistral\n</code></pre>\n\n</div>\n\n\n\n<p>The <code>ollama serve</code> command starts the Ollama service, making the LLM available for local apps like ContextChat.</p>\n\n<h3>\n  \n  \n  <strong>Step 2: Set Up the MCP Server</strong>\n</h3>\n\n<p>The MCP Server handles context gathering, prompt construction, and communication with Ollama.</p>\n\n<p>Navigate to the <code>mcp_server</code> directory:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">cd </span>contextchat/mcp_server\npip <span class=\"nb\">install</span> <span class=\"nt\">-r</span> requirements.txt\nuvicorn main:app <span class=\"nt\">--reload</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>For Windows users:</strong> You can use Command Prompt or PowerShell for the same commands. If <code>uvicorn</code> isn't recognized, ensure your Pythn Scripts folder is added to your PATH.</p>\n\n<h3>\n  \n  \n  <strong>Step 3: Run the GUI Chat App</strong>\n</h3>\n\n<p>The chat interface lives in the <code>gui_app</code> folder:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">cd </span>contextchat/gui_app\npip <span class=\"nb\">install</span> <span class=\"nt\">-r</span> requirements.txt\npython app.py\n</code></pre>\n\n</div>\n\n\n\n<p><strong>For Windows users:</strong> Same commands apply in Command Prompt or PowerShell.</p>\n\n<h3>\n  \n  \n  <strong>Troubleshooting Tips</strong>\n</h3>\n\n<ul>\n<li>Make sure <code>ollama serve</code> is running before starting ContextChat.</li>\n<li>If you run into missing package errors, double-check that all <code>requirements.txt</code> dependencies are installed.</li>\n<li>Windows users: You may need to adjust environment variables or use <code>python</code> vs. <code>python3</code> depending on your setup.</li>\n<li>The project is still evolving, so Windows-specific bugs may occur.</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>The ContextChat Approach: Local, Dynamic Knowledge</strong>\n</h3>\n\n<p><a href=\"https://github.com/NovaNestApps/ContextChat\" rel=\"noopener noreferrer\"><strong>ContextChat</strong></a> enhances your AI assistant by injecting real-time context from web pages you choose ‚Äî entirely on your device.</p>\n\n<p>Here‚Äôs how it works:</p>\n\n<ol>\n<li>You add URLs via the chat interface</li>\n<li>The MCP server fetches and extracts text content from those pages</li>\n<li>When you send a message, the extracted content is combined with your prompt</li>\n<li>This richer, context-aware prompt goes to your local LLM via Ollama</li>\n<li>The response reflects both your query and the added knowledge</li>\n</ol>\n\n<p>All of this happens <strong>without your data or browsing activity leaving your machine</strong>.</p>\n\n<h3>\n  \n  \n  <strong>Why It Matters</strong>\n</h3>\n\n<ul>\n<li>Get AI responses tailored to your chosen information sources</li>\n<li>Explore new ways of making LLMs truly useful in your workflow</li>\n<li>Maintain complete privacy and control ‚Äî no third-party servers involved</li>\n<li>Pave the way for more advanced local AI use cases, like document summarization or research assistants</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>Future Possibilities</strong>\n</h3>\n\n<p>This system lays the groundwork for even more powerful features:</p>\n\n<ul>\n<li>Ingesting PDF or text documents as context</li>\n<li>More advanced web crawlers that handle JavaScript-heavy pages</li>\n<li>Real-time context updates during conversations</li>\n<li>Smarter context filtering to avoid overwhelming the LLM</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>Future Development &amp; How You Can Contribute</strong>\n</h3>\n\n<p><em><a href=\"https://github.com/NovaNestApps/ContextChat\" rel=\"noopener noreferrer\">ContextChat</a> is just getting started. While the current version offers a fully local, privacy-respecting AI chat experience with web context, there‚Äôs plenty of room to grow.</em></p>\n\n<p>Here‚Äôs what‚Äôs planned ‚Äî and how you can be part of it.</p>\n\n<h3>\n  \n  \n  <strong>Planned Features</strong>\n</h3>\n\n<p>The following improvements are on the roadmap:</p>\n\n<ul>\n<li>\n<strong>Show Added URLs in the GUI:</strong> So you can see, manage, and review your context sources at a glance.</li>\n<li>\n<strong>Reset Context with One Click:</strong> A simple button to clear conversation history and added URLs.</li>\n<li>\n<strong>Save and Load Chat History:</strong> Preserve your conversations across sessions.</li>\n<li>\n<strong>Visual Theme Improvements:</strong> A more polished, user-friendly interface with better layouts and fonts.</li>\n<li>\n<strong>Streaming AI Responses:</strong> See responses appear in real-time for a more natural chat feel.</li>\n<li>\n<strong>Modern GUI Options:</strong> Exploring frameworks like Flet or PyQt to enhance the desktop app experience.</li>\n<li>\n<strong>Document Ingestion:</strong> Add PDFs or text files as context, not just web pages.</li>\n<li>\n<strong>Advanced Web Crawler:</strong> Better handling of complex websites, including JavaScript-rendered content.</li>\n<li>\n<strong>Standalone Desktop Builds:</strong> Easy installers for Mac and Linux without requiring manual setup.</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>How You Can Contribute</strong>\n</h3>\n\n<p><a href=\"https://github.com/NovaNestApps/ContextChat\" rel=\"noopener noreferrer\"><strong>ContextChat</strong></a> is open source ‚Äî designed to evolve with community feedback and contributions.</p>\n\n<p>Ways to get involved:</p>\n\n<ul>\n<li>Fork the project and experiment with your own improvements</li>\n<li>Submit pull requests for new features or bug fixes</li>\n<li>Report issues or suggest ideas on the GitHub repository</li>\n<li>Share feedback if you‚Äôre using it in your workflow</li>\n<li>Help test on Windows or other environments</li>\n</ul>\n\n<p>The vision is to build a practical, privacy-first AI toolkit that anyone can use and extend ‚Äî without compromising control or security.</p>\n\n<h3>\n  \n  \n  <strong>Conclusion</strong>\n</h3>\n\n<p><em>Cloud AI tools offer convenience ‚Äî but at the price of privacy and control. With open-source projects like ContextChat, you no longer have to make that trade-off.</em></p>\n\n<p>By running your own AI chat app locally, enhanced with web context you choose, you gain:</p>\n\n<ul>\n<li>Complete privacy ‚Äî your prompts, data, and browsing never leave your device</li>\n<li>Total control over what models you use and how your assistant behaves</li>\n<li>The ability to experiment, extend, and build on an open-source foundation</li>\n</ul>\n\n<p><a href=\"https://github.com/NovaNestApps/ContextChat\" rel=\"noopener noreferrer\"><strong>ContextChat</strong></a> is just the beginning. Whether you're a developer, researcher, or simply curious about private AI, this project shows what‚Äôs possible ‚Äî and how easy it is to get started.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Comparison between Flask and FastAPI for building APIs","url":"https://dev.to/sajjadrahman56/comparison-between-flask-and-fastapi-for-building-apis-2f3g","date":1751171939,"author":"Sajjad Rahman","guid":174901,"unread":true,"content":"<h3>\n  \n  \n  üêç <strong>Flask (WSGI-based Framework)</strong>\n</h3>\n\n<h4>\n  \n  \n  üì¶ Components:\n</h4>\n\n<ul>\n<li>\n<strong>Web Server</strong>: Gunicorn</li>\n<li>\n<strong>Interface Protocol</strong>: WSGI (Web Server Gateway Interface)</li>\n<li>\n<strong>API Code</strong>: Synchronous (Blocking I/O)</li>\n</ul>\n\n<h4>\n  \n  \n  üîÅ Flow:\n</h4>\n\n<ol>\n<li>\n<strong>Client request</strong> hits the <strong>Gunicorn web server</strong>.</li>\n<li>Gunicorn forwards the request via <strong>WSGI</strong> (uses Werkzeug internally).</li>\n<li>The request reaches the <strong>Flask API code</strong>, where the endpoint is defined using <code>@app.route(...)</code>.</li>\n<li>The function executes <strong>synchronously</strong>, blocking the thread until the task completes.</li>\n<li>Response is returned via <strong>jsonify(result)</strong>.</li>\n</ol>\n\n<h4>\n  \n  \n  üìÑ Code Example:\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/predict</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">POST</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">():</span>\n    <span class=\"n\">json_data</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"nf\">get_json</span><span class=\"p\">()</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nc\">InputData</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">json_data</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nf\">predict_sync</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nf\">jsonify</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  ‚ö†Ô∏è Limitations:\n</h4>\n\n<ul>\n<li>Not suitable for <strong>async tasks</strong> (e.g., I/O-bound operations).</li>\n<li>Can be less performant under high concurrency.</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  ‚ö° <strong>FastAPI (ASGI-based Framework)</strong>\n</h3>\n\n<h4>\n  \n  \n  üì¶ Components:\n</h4>\n\n<ul>\n<li>\n<strong>Web Server</strong>: Any ASGI server (e.g., Uvicorn)</li>\n<li>\n<strong>Interface Protocol</strong>: ASGI (Asynchronous Server Gateway Interface)</li>\n<li>\n<strong>API Code</strong>: Asynchronous (Non-blocking I/O)</li>\n</ul>\n\n<h4>\n  \n  \n  üîÅ Flow:\n</h4>\n\n<ol>\n<li>\n<strong>Client request</strong> hits the ASGI-compatible <strong>web server</strong>.</li>\n<li>The request is passed through the <strong>ASGI interface</strong>.</li>\n<li>The <strong>FastAPI app</strong> handles it with <code>@app.post(...)</code>.</li>\n<li>The function runs <strong>asynchronously</strong>, allowing concurrent processing.</li>\n<li>The response is returned directly.</li>\n</ol>\n\n<h4>\n  \n  \n  üìÑ Code Example:\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/predict</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">InputData</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">predict_async</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  ‚úÖ Advantages:\n</h4>\n\n<ul>\n<li>Built-in support for <strong>async/await</strong>.</li>\n<li>Higher performance for I/O-bound tasks.</li>\n<li>Better suited for <strong>modern web applications</strong> and <strong>microservices</strong>.</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  üîÑ Summary Table:\n</h3>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Flask</th>\n<th>FastAPI</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Protocol</td>\n<td>WSGI</td>\n<td>ASGI</td>\n</tr>\n<tr>\n<td>Web Server</td>\n<td>Gunicorn</td>\n<td>Uvicorn/Hypercorn/etc.</td>\n</tr>\n<tr>\n<td>Concurrency Model</td>\n<td>Synchronous (Blocking)</td>\n<td>Asynchronous (Non-blocking)</td>\n</tr>\n<tr>\n<td>Async Support</td>\n<td>‚ùå Not native</td>\n<td>‚úÖ Fully supported</td>\n</tr>\n<tr>\n<td>Performance</td>\n<td>Medium</td>\n<td>High</td>\n</tr>\n<tr>\n<td>Use Case</td>\n<td>Simple APIs, Synchronous</td>\n<td>High-concurrency, Async</td>\n</tr>\n</tbody>\n</table></div>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üéáNumber of Subsequences That Satisfy the Given Sum Condition LeetCode 1498 (C++ | JavaScript | Python )","url":"https://dev.to/om_shree_0709/number-of-subsequences-that-satisfy-the-given-sum-condition-leetcode-1498-c-javascript--58li","date":1751165237,"author":"Om Shree","guid":174854,"unread":true,"content":"<p>Hello, algorithm learners! üß†</p>\n\n<p>Today we‚Äôre exploring a classic greedy + two pointers problem from LeetCode ‚Äî <strong>1498: Number of Subsequences That Satisfy the Given Sum Condition</strong>. This one challenges us to count the number of valid subsequences based on a constraint involving the smallest and largest values in the subsequence. Efficient sorting and modular exponentiation will be our tools of choice here!</p>\n\n\n\n\n<h3>\n  \n  \n  üß† Problem Summary\n</h3>\n\n<p>You are given:</p>\n\n<ul>\n<li>An integer array <code>nums</code> of size up to 10<sup>5</sup>\n</li>\n<li>An integer <code>target</code>\n</li>\n</ul>\n\n<p>You must <strong>return the number of non-empty subsequences</strong> such that:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>min(subsequence) + max(subsequence) &lt;= target\n</code></pre>\n\n</div>\n\n\n\n<p>Return the result modulo 10<sup>9</sup> + 7.</p>\n\n\n\n\n<h3>\n  \n  \n  üîç Intuition\n</h3>\n\n<p>To build a valid subsequence, you need to ensure:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>nums[left] + nums[right] &lt;= target\n</code></pre>\n\n</div>\n\n\n\n<p>Where <code>nums[left]</code> is the smallest and <code>nums[right]</code> is the largest number in the subsequence.</p>\n\n<p>After sorting, we can use a <strong>two-pointer approach</strong>:</p>\n\n<ul>\n<li>Start from both ends.</li>\n<li>If the smallest + largest is within target, all combinations of elements in-between are valid.</li>\n</ul>\n\n<p>To count combinations, we use:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>2^(right - left)\n</code></pre>\n\n</div>\n\n\n\n<p>Why? Because for <code>n</code> elements between two fixed points, we can include/exclude each one independently in the subsequence.</p>\n\n\n\n\n<h3>\n  \n  \n  üõ†Ô∏è Approach\n</h3>\n\n<ol>\n<li>\n<strong>Sort the array</strong> to simplify the min/max logic.</li>\n<li>\n<strong>Use two pointers</strong> <code>left</code> and <code>right</code> to check pairs.</li>\n<li>\n<strong>Precompute powers of 2</strong> modulo 10<sup>9</sup> + 7 to avoid recomputation.</li>\n</ol>\n\n\n\n\n<h3>\n  \n  \n  üí° C++ Code\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight cpp\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">numSubseq</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(),</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mod</span> <span class=\"o\">=</span> <span class=\"mf\">1e9</span><span class=\"o\">+</span><span class=\"mi\">7</span><span class=\"p\">;</span>\n        <span class=\"n\">ranges</span><span class=\"o\">::</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">);</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">pows</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"n\">pows</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pows</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">%</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">right</span><span class=\"o\">--</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">pows</span><span class=\"p\">[</span><span class=\"n\">right</span> <span class=\"o\">-</span> <span class=\"n\">left</span><span class=\"p\">])</span> <span class=\"o\">%</span> <span class=\"n\">mod</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  üíª JavaScript Code\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">numSubseq</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">,</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">mod</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"nx\">e9</span> <span class=\"o\">+</span> <span class=\"mi\">7</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"nx\">nums</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n    <span class=\"nx\">nums</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">-</span> <span class=\"nx\">b</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">pows</span> <span class=\"o\">=</span> <span class=\"nc\">Array</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">).</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"nx\">i</span><span class=\"p\">)</span>\n        <span class=\"nx\">pows</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">pows</span><span class=\"p\">[</span><span class=\"nx\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">%</span> <span class=\"nx\">mod</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">let</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">left</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">right</span> <span class=\"o\">=</span> <span class=\"nx\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">while </span><span class=\"p\">(</span><span class=\"nx\">left</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">[</span><span class=\"nx\">left</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nx\">nums</span><span class=\"p\">[</span><span class=\"nx\">right</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">right</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"nx\">pows</span><span class=\"p\">[</span><span class=\"nx\">right</span> <span class=\"o\">-</span> <span class=\"nx\">left</span><span class=\"p\">])</span> <span class=\"o\">%</span> <span class=\"nx\">mod</span><span class=\"p\">;</span>\n            <span class=\"nx\">left</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">count</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  üêç Python Code\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">numSubseq</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"n\">mod</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">9</span> <span class=\"o\">+</span> <span class=\"mi\">7</span>\n    <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">()</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n    <span class=\"n\">pows</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">n</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">pows</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pows</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">%</span> <span class=\"n\">mod</span>\n\n    <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"p\">:</span>\n            <span class=\"n\">right</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">pows</span><span class=\"p\">[</span><span class=\"n\">right</span> <span class=\"o\">-</span> <span class=\"n\">left</span><span class=\"p\">])</span> <span class=\"o\">%</span> <span class=\"n\">mod</span>\n            <span class=\"n\">left</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">count</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  üìù Key Notes\n</h3>\n\n<ul>\n<li>This problem is a hybrid of <strong>greedy</strong>, <strong>two-pointer</strong>, and <strong>combinatorics</strong>.</li>\n<li>Sorting simplifies the condition checks.</li>\n<li>\n<code>2^(right-left)</code> counts all valid subsequences between two boundaries.</li>\n<li>Precomputing powers of 2 saves time.</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  ‚úÖ Final Thoughts\n</h3>\n\n<p>Problems like these blend classic algorithmic patterns and are great for mastering modular arithmetic and pointer techniques.</p>\n\n<p>Hope this helped you understand the logic and implementation! üí°</p>\n\n<p>Happy coding! üöÄ</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Move Over LLaMA: Tencent's New Open LLM is Ready to Self-Host","url":"https://dev.to/code42cate/move-over-llama-tencents-new-open-llm-is-ready-to-self-host-a73","date":1751158547,"author":"Jonas Scholz","guid":174802,"unread":true,"content":"<p><a href=\"https://github.com/Tencent\" rel=\"noopener noreferrer\">Tencent</a> just released a new open-source model called <strong>Hunyuan-A13B-Instruct</strong>. It has open weights (not sure about code), and it runs locally (well if you have a B200 GPU). If you're curious about how it performs and want to try it out yourself, here's how to set it up on a rented GPU in a few minutes.</p>\n\n\n\n\n<h2>\n  \n  \n  What is Hunyuan-A13B?\n</h2>\n\n<p>Hunyuan-A13B is a <strong>Mixture-of-Experts (MoE)</strong> model with <strong>80 billion total parameters</strong>, but only <strong>13 billion active</strong> at a time. This means inference is much cheaper than a full dense model.</p>\n\n<blockquote>\n<p>Mixture-of-Experts (MoE) is a neural network architecture where only a subset of specialized \"expert\" sub-networks are activated for each input, reducing computation while increasing model capacity. A gating mechanism dynamically selects which experts to use based on the input, allowing the model to scale efficiently without always using all parameters.</p>\n</blockquote>\n\n<p>Some highlights:</p>\n\n<ul>\n<li>\n<strong>Supports 256K context</strong> out of the box</li>\n<li><strong>Fast and slow thinking modes</strong></li>\n<li>\n<strong>Grouped Query Attention (GQA)</strong> for more efficient inference</li>\n<li>\n<strong>Agent-oriented</strong> tuning, with benchmark results on BFCL-v3 and œÑ-Bench</li>\n<li>\n<strong>Quantization support</strong>, including GPTQ</li>\n</ul>\n\n<p>So far, it looks like a solid candidate for local experimentation, especially for long-context or agent-type tasks. I'm still testing how it compares to other models like LLaMA 3, Mixtral, and Claude 3.</p>\n\n\n\n\n<h2>\n  \n  \n  Step 1: Spin Up a RunPod Instance\n</h2>\n\n<p>The easiest way to try it is <a href=\"https://runpod.io?ref=36oe9u9g\" rel=\"noopener noreferrer\">RunPod</a>(This link will give you between $5 and $500 credits!). You'll need:</p>\n\n<ul>\n<li>A <strong>300 GB network volume</strong>\n</li>\n<li>A <strong>B200 GPU</strong> (I don't think less works, you need ~150GB of VRAM)</li>\n<li>A supported <strong>PyTorch image</strong>\n</li>\n</ul>\n\n<h3>\n  \n  \n  Create a Network Volume\n</h3>\n\n<ul>\n<li>Region: use one where B200 is available (currently <code>eu-ro-1</code>)</li>\n<li>Size: 300 GB</li>\n<li>Cost: around <strong>$21/month</strong> (billed even if unused)</li>\n</ul>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F6bstqukaq70q4abb0wsm.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F6bstqukaq70q4abb0wsm.png\" alt=\"network\" width=\"800\" height=\"542\"></a></p>\n\n<h3>\n  \n  \n  Create a Pod\n</h3>\n\n<ul>\n<li><p>GPU type: <strong>B200</strong></p></li>\n<li><p>Image: <code>runpod/pytorch:2.8.0-py3.11-cuda12.8.1-cudnn-devel-ubuntu22.04</code><br>\n‚ö†Ô∏è Earlier versions didn't work in my testing</p></li>\n<li><p>GPU Count: 1</p></li>\n<li><p>Enable SSH + Jupyter</p></li>\n<li><p>Attach your network volume</p></li>\n</ul>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Flqx3rx4z2vcnxkzobo81.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Flqx3rx4z2vcnxkzobo81.png\" alt=\"gpu type\" width=\"800\" height=\"540\"></a></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fcdg9zxge6qplo23pe400.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fcdg9zxge6qplo23pe400.png\" alt=\"config\" width=\"800\" height=\"540\"></a></p>\n\n\n\n\n<h2>\n  \n  \n  Step 2: Install Dependencies\n</h2>\n\n<p>In the notebook terminal:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>%pip install transformers tiktoken accelerate gptqmodel optimum\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  Step 3: Load the Model\n</h2>\n\n<p>Set the cache path so that downloads go to the mounted volume instead of the default root directory:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">transformers</span> <span class=\"kn\">import</span> <span class=\"n\">AutoTokenizer</span><span class=\"p\">,</span> <span class=\"n\">AutoModelForCausalLM</span>\n<span class=\"kn\">import</span> <span class=\"n\">torch</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">re</span>\n\n<span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">HF_HOME</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">/workspace/hf-cache</span><span class=\"sh\">'</span> <span class=\"c1\">#\n</span><span class=\"n\">model_path</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">tencent/Hunyuan-A13B-Instruct</span><span class=\"sh\">'</span>\n\n<span class=\"n\">tokenizer</span> <span class=\"o\">=</span> <span class=\"n\">AutoTokenizer</span><span class=\"p\">.</span><span class=\"nf\">from_pretrained</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"n\">local_files_only</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">trust_remote_code</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">AutoModelForCausalLM</span><span class=\"p\">.</span><span class=\"nf\">from_pretrained</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"n\">cache_dir</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">/workspace/hf-cache/</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">local_files_only</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">device_map</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">auto</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">torch_dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">bfloat16</span><span class=\"p\">,</span> <span class=\"n\">trust_remote_code</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n  <span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n  <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">What does the frog say?</span><span class=\"sh\">\"</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">tokenized_chat</span> <span class=\"o\">=</span> <span class=\"n\">tokenizer</span><span class=\"p\">.</span><span class=\"nf\">apply_chat_template</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"n\">tokenize</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">return_tensors</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">pt</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                                                  <span class=\"n\">enable_thinking</span><span class=\"o\">=</span><span class=\"bp\">True</span> <span class=\"c1\"># Toggle thinking mode (default: True)\n</span>                                              <span class=\"p\">)</span>\n\n<span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">generate</span><span class=\"p\">(</span><span class=\"n\">tokenized_chat</span><span class=\"p\">.</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">device</span><span class=\"p\">),</span> <span class=\"n\">max_new_tokens</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">)</span>\n<span class=\"n\">output_text</span> <span class=\"o\">=</span> <span class=\"n\">tokenizer</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">output_text</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Notes:</p>\n\n<ul>\n<li>First run will download ~150 GB of weights</li>\n<li>VRAM usage is ~153 GB during inference</li>\n<li>Loading into VRAM takes a few minutes</li>\n<li>If GPU util (not just VRAM) goes up, it's running</li>\n<li>You can set <code>device_map=\"cpu\"</code> if testing on CPU only. Make sure you have around 200GB of RAM and a good CPU :D</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Costs\n</h2>\n\n<ul>\n<li>B200 pod: <strong>$6.39/hour</strong>\n</li>\n<li>Network volume: <strong>$21/month</strong>, even if unused</li>\n<li>Suggestion: shut the pod down when not in use x)</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Tooling Notes\n</h2>\n\n<ul>\n<li>\n<code>llama.cpp</code> support is not there yet. PR in progress: <a href=\"https://github.com/ggml-org/llama.cpp/pull/14425\" rel=\"noopener noreferrer\">#14425</a>\n</li>\n<li>Works fine in Python with <code>transformers</code> and <code>bfloat16</code>\n</li>\n</ul>\n\n<h2>\n  \n  \n  Benchmark\n</h2>\n\n<p>The official benchmarks are available on Hugging Face and evaluated by TRT-LLM-backend.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Model</th>\n<th>Hunyuan-Large</th>\n<th>Qwen2.5-72B</th>\n<th>Qwen3-A22B</th>\n<th>Hunyuan-A13B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MMLU</td>\n<td>88.40</td>\n<td>86.10</td>\n<td>87.81</td>\n<td>88.17</td>\n</tr>\n<tr>\n<td>MMLU-Pro</td>\n<td>60.20</td>\n<td>58.10</td>\n<td>68.18</td>\n<td>67.23</td>\n</tr>\n<tr>\n<td>MMLU-Redux</td>\n<td>87.47</td>\n<td>83.90</td>\n<td>87.40</td>\n<td>87.67</td>\n</tr>\n<tr>\n<td>BBH</td>\n<td>86.30</td>\n<td>85.80</td>\n<td>88.87</td>\n<td>87.56</td>\n</tr>\n<tr>\n<td>SuperGPQA</td>\n<td>38.90</td>\n<td>36.20</td>\n<td>44.06</td>\n<td>41.32</td>\n</tr>\n<tr>\n<td>EvalPlus</td>\n<td>75.69</td>\n<td>65.93</td>\n<td>77.60</td>\n<td>78.64</td>\n</tr>\n<tr>\n<td>MultiPL-E</td>\n<td>59.13</td>\n<td>60.50</td>\n<td>65.94</td>\n<td>69.33</td>\n</tr>\n<tr>\n<td>MBPP</td>\n<td>72.60</td>\n<td>76.00</td>\n<td>81.40</td>\n<td>83.86</td>\n</tr>\n<tr>\n<td>CRUX-I</td>\n<td>57.00</td>\n<td>57.63</td>\n<td>-</td>\n<td>70.13</td>\n</tr>\n<tr>\n<td>CRUX-O</td>\n<td>60.63</td>\n<td>66.20</td>\n<td>79.00</td>\n<td>77.00</td>\n</tr>\n<tr>\n<td>MATH</td>\n<td>69.80</td>\n<td>62.12</td>\n<td>71.84</td>\n<td>72.35</td>\n</tr>\n<tr>\n<td>CMATH</td>\n<td>91.30</td>\n<td>84.80</td>\n<td>-</td>\n<td>91.17</td>\n</tr>\n<tr>\n<td>GSM8k</td>\n<td>92.80</td>\n<td>91.50</td>\n<td>94.39</td>\n<td>91.83</td>\n</tr>\n<tr>\n<td>GPQA</td>\n<td>25.18</td>\n<td>45.90</td>\n<td>47.47</td>\n<td>49.12</td>\n</tr>\n</tbody>\n</table></div>\n\n<blockquote>\n<p>Hunyuan-A13B-Instruct has achieved highly competitive performance across multiple benchmarks, particularly in mathematics, science, agent domains, and more. We compared it with several powerful models, and the results are shown below. - Tencent</p>\n</blockquote>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Topic</th>\n<th>Bench</th>\n<th>OpenAI-o1-1217</th>\n<th>DeepSeek R1</th>\n<th>Qwen3-A22B</th>\n<th>Hunyuan-A13B-Instruct</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Mathematics</strong></td>\n<td>AIME 2024<br>AIME 2025<br>MATH</td>\n<td>74.3<br>79.2<br>96.4</td>\n<td>79.8<br>70<br>94.9</td>\n<td>85.7<br>81.5<br>94.0</td>\n<td>87.3<br>76.8<br>94.3</td>\n</tr>\n<tr>\n<td><strong>Science</strong></td>\n<td>GPQA-Diamond<br>OlympiadBench</td>\n<td>78<br>83.1</td>\n<td>71.5<br>82.4</td>\n<td>71.1<br>85.7</td>\n<td>71.2<br>82.7</td>\n</tr>\n<tr>\n<td><strong>Coding</strong></td>\n<td>Livecodebench<br>Fullstackbench<br>ArtifactsBench</td>\n<td>63.9<br>64.6<br>38.6</td>\n<td>65.9<br>71.6<br>44.6</td>\n<td>70.7<br>65.6<br>44.6</td>\n<td>63.9<br>67.8<br>43</td>\n</tr>\n<tr>\n<td><strong>Reasoning</strong></td>\n<td>BBH<br>DROP<br>ZebraLogic</td>\n<td>80.4<br>90.2<br>81</td>\n<td>83.7<br>92.2<br>78.7</td>\n<td>88.9<br>90.3<br>80.3</td>\n<td>89.1<br>91.1<br>84.7</td>\n</tr>\n<tr>\n<td><strong>Instruction<br>Following</strong></td>\n<td>IF-Eval<br>SysBench</td>\n<td>91.8<br>82.5</td>\n<td>88.3<br>77.7</td>\n<td>83.4<br>74.2</td>\n<td>84.7<br>76.1</td>\n</tr>\n<tr>\n<td><strong>Text<br>Creation</strong></td>\n<td>LengthCtrl<br>InsCtrl</td>\n<td>60.1<br>74.8</td>\n<td>55.9<br>69</td>\n<td>53.3<br>73.7</td>\n<td>55.4<br>71.9</td>\n</tr>\n<tr>\n<td><strong>NLU</strong></td>\n<td>ComplexNLU<br>Word-Task</td>\n<td>64.7<br>67.1</td>\n<td>64.5<br>76.3</td>\n<td>59.8<br>56.4</td>\n<td>61.2<br>62.9</td>\n</tr>\n<tr>\n<td><strong>Agent</strong></td>\n<td>BDCL v3<br> œÑ-Bench<br>ComplexFuncBench<br> C3-Bench</td>\n<td>67.8<br>60.4<br>47.6<br>58.8</td>\n<td>56.9<br>43.8<br>41.1<br>55.3</td>\n<td>70.8<br>44.6<br>40.6<br>51.7</td>\n<td>78.3<br>54.7<br>61.2<br>63.5</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>This is one of the more interesting open MoE models out right now. It supports long contexts, has some thoughtful design choices, and it's easy enough to run. I'm still evaluating how good it actually is, especially compared to Mistral Magistral and other recent models. If you want to test it yourself, this setup gets you going quickly.</p>\n\n<p>Cheers,</p>\n\n<p>Jonas, Co-Founder of <a href=\"https://sliplane.io?utm_source=move-over-llama-tencent-open-llm-self-host\" rel=\"noopener noreferrer\">sliplane.io</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (5)","url":"https://dev.to/hyperkai/string-in-python-5-424j","date":1751156655,"author":"Super Kai (Kazuya Ito)","guid":174801,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-1-3hg7\">My post</a> explains a string.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-2-1jhk\">My post</a> explains <a href=\"https://docs.python.org/3/library/functions.html#func-str\" rel=\"noopener noreferrer\">str()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-3-4o25\">My post</a> explains <a href=\"https://docs.python.org/3/library/stdtypes.html#str.encode\" rel=\"noopener noreferrer\">encode()</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.decode\" rel=\"noopener noreferrer\">decode()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-4-5e88\">My post</a> explains <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.upper\" rel=\"noopener noreferrer\">upper()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.lower\" rel=\"noopener noreferrer\">lower()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.casefold\" rel=\"noopener noreferrer\">casefold()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.swapcase\" rel=\"noopener noreferrer\">swapcase()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.title\" rel=\"noopener noreferrer\">title()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.capitalize\" rel=\"noopener noreferrer\">capitalize()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.isupper\" rel=\"noopener noreferrer\">isupper()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.islower\" rel=\"noopener noreferrer\">islower()</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#str.istitle\" rel=\"noopener noreferrer\">istitle()</a>.</li>\n</ul>\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.count\" rel=\"noopener noreferrer\">count()</a> can count a set of zero or more characters of a string as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>sub</code>(Required-Type:<code>str</code>). *Don't use <code>sub=</code>.</li>\n<li>The 2nd argument is <code>start</code>(Optional-Default:<code>None</code>-Type:<code>int</code> or <code>NoneType</code>):\n*Memos:\n\n<ul>\n<li>If it's not set, <code>0</code> is set.</li>\n<li>Don't use <code>start</code>.</li>\n</ul>\n\n\n</li>\n\n<li>The 3rd argument is <code>end</code>(Optional-Default:<code>None</code>-Type:<code>int</code> or <code>NoneType</code>):\n*Memos:\n\n<ul>\n<li>If it's not set, the length <code>+ 1</code> is set.</li>\n<li>Don't use <code>end</code>.</li>\n</ul>\n\n\n</li>\n\n<li>If <code>sub</code> is an empty string and if <code>start</code> and <code>end</code> aren't set, the length <code>+ 1</code> is returned.\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">hello world</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">l</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># 3\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">o</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># 2\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># 1\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">l</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">l</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">))</span>\n<span class=\"c1\"># 2\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">l</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">))</span> <span class=\"c1\"># 1\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># 0\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ll</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">lo</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">wo</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># 1\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">''</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">))</span>\n<span class=\"c1\"># 12\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">))</span>\n<span class=\"c1\"># 5\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.expandtabs\" rel=\"noopener noreferrer\">expandtabs()</a> can replace <code>\\t</code> with zero or more spaces as shown below. *The 1st argument is <code>tabsize</code>(Optional-Default:<code>8</code>-Type:<code>int</code>).<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">We</span><span class=\"se\">\\t</span><span class=\"s\">like</span><span class=\"se\">\\t</span><span class=\"s\">apples</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">())</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"c1\"># We      like    apples\n#   ‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë    ‚Üë‚Üë‚Üë‚Üë\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"c1\"># Welikeapples\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"c1\"># We like apples\n#   ‚Üë    ‚Üë\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"c1\"># We  like  apples\n#   ‚Üë‚Üë    ‚Üë‚Üë\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># We like  apples\n#   ‚Üë    ‚Üë‚Üë\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># We  like    apples\n#   ‚Üë‚Üë    ‚Üë‚Üë‚Üë‚Üë\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"c1\"># We   like apples\n#   ‚Üë‚Üë‚Üë    ‚Üë\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"c1\"># We    like  apples\n#   ‚Üë‚Üë‚Üë‚Üë    ‚Üë‚Üë\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"c1\"># We     like   apples\n#   ‚Üë‚Üë‚Üë‚Üë‚Üë    ‚Üë‚Üë‚Üë\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">12</span><span class=\"se\">\\t</span><span class=\"s\">1234</span><span class=\"se\">\\t</span><span class=\"s\">1</span><span class=\"se\">\\t</span><span class=\"s\">123</span><span class=\"se\">\\n</span><span class=\"s\">1234</span><span class=\"se\">\\t</span><span class=\"s\">1</span><span class=\"se\">\\t</span><span class=\"s\">123</span><span class=\"se\">\\t</span><span class=\"s\">12</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">())</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"c1\"># 12      1234    1       123\n# 1234    1       123     12\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"c1\"># 1212341123\n# 1234112312\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"c1\"># 12 1234 1 123\n# 1234 1 123 12\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"c1\"># 12  1234  1 123\n# 1234  1 123 12\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"c1\"># 12 1234  1  123\n# 1234  1  123   12\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># 12  1234    1   123\n# 1234    1   123 12\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"c1\"># 12   1234 1    123\n# 1234 1    123  12\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"c1\"># 12    1234  1     123\n# 1234  1     123   12\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">expandtabs</span><span class=\"p\">(</span><span class=\"n\">tabsize</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"c1\"># 12     1234   1      123\n# 1234   1      123    12\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.zfill\" rel=\"noopener noreferrer\">zfill()</a> can add the one or more <code>0</code>s before the string set width as shown below:</p>\n\n<p>*Memos</p>\n\n<ul>\n<li>The 1st argument is <code>width</code>(Required-Type:<code>int</code>). *Don't use <code>width=</code>.</li>\n<li>If the 1st character of a string is <code>+</code> or <code>-</code>, the one or more <code>0</code>s are added after it.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">1234</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span> <span class=\"c1\"># 1234\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"c1\"># 01234\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">))</span> <span class=\"c1\"># 001234\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))</span> <span class=\"c1\"># 0001234\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span> <span class=\"c1\"># 00001234\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">+1234</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>  <span class=\"c1\"># +0001234\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">-1234</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>  <span class=\"c1\"># -0001234\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">+-1234</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span> <span class=\"c1\"># +00-1234\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">-+1234</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span> <span class=\"c1\"># -00+1234\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">!1234</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>  <span class=\"c1\"># 000!1234\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcd</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span> <span class=\"c1\"># abcd\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"c1\"># 0abcd\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">))</span> <span class=\"c1\"># 00abcd\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))</span> <span class=\"c1\"># 000abcd\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span> <span class=\"c1\"># 0000abcd\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">+abcd</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>  <span class=\"c1\"># +000abcd\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">-abcd</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>  <span class=\"c1\"># -000abcd\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">+-abcd</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span> <span class=\"c1\"># +00-abcd\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">-+abcd</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span> <span class=\"c1\"># -00+abcd\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">!abcd</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">zfill</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>  <span class=\"c1\"># 000!abcd\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PaperSense: Semantic arXiv Search & Chat Built with MindsDB","url":"https://dev.to/better-boy/papersense-semantic-arxiv-search-chat-built-with-mindsdb-1kfi","date":1751146681,"author":"Abhi","guid":174721,"unread":true,"content":"<h2>\n  \n  \n  The Problem\n</h2>\n\n<p>As a developer working with AI, I constantly found myself drowning in arXiv papers. The existing search was purely keyword-based, which meant I'd miss relevant papers that used different terminology. Even worse, after finding papers, I‚Äôd lose hours parsing dense academic prose just to understand core ideas.</p>\n\n<p>I needed a system that could: </p>\n\n<ol>\n<li>Understand the semantic meaning behind my search queries</li>\n<li>Let me \"talk\" to research papers directly</li>\n<li>Actually understand context, not just keywords</li>\n</ol>\n\n<h3>\n  \n  \n  The Solution: A Semantic Search + Chatbot System\n</h3>\n\n<p>I decided to build a comprehensive system using MindsDB's knowledge base capabilities. The final product allows researchers to search semantically through research papers and then have natural language conversations with individual papers or groups of papers.</p>\n\n<h3>\n  \n  \n  The tech stack\n</h3>\n\n<ul>\n<li>\n<strong>MindsDB</strong>: Handles semantic indexing and chat interface using LLMs.</li>\n<li>\n<strong>ChromaDB &amp; PGVector</strong>: Stores embeddings for fast similarity search.</li>\n<li>\n<strong>FastAPI</strong>: Powers a RESTful backend to interact with the front end and MindsDB.</li>\n<li>\n<strong>Javascript &amp; CSS</strong>: Powers the frontend.</li>\n</ul>\n\n<h3>\n  \n  \n  High-Level Architecture\n</h3>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Flxs3tqx2riln73aosh3u.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Flxs3tqx2riln73aosh3u.png\" alt=\"architecture\" width=\"800\" height=\"420\"></a></p>\n\n<h3>\n  \n  \n  Paperspace Features\n</h3>\n\n<ol>\n<li>Search for papers using natural language</li>\n<li>Summarize the paper using AI</li>\n<li>Generate new innovative future research directions based on a paper</li>\n<li>Chat with the paper (using arxiv id or click on one of the semantic search results)</li>\n</ol>\n\n<h3>\n  \n  \n  Lessons Learned\n</h3>\n\n<p>What worked well:</p>\n\n<ol>\n<li>\n<strong>MindsDB</strong>: Using AI services as SQL queries saves a lot of development time.</li>\n<li>\n<strong>Semantic Search</strong>: I found relevant papers I would never have discovered with keyword search</li>\n<li>\n<strong>Metadata Enrichment</strong>: Including authors and categories in search dramatically improved relevance</li>\n</ol>\n\n<p>What Was Harder Than Expected:</p>\n\n<ol>\n<li>\n<strong>Escaping characters</strong>: Academic papers are full of mathematical notation that breaks text processing</li>\n<li>\n<strong>Context Window Management</strong>: Long papers required careful chunking strategies</li>\n<li>\n<strong>Rate Limiting</strong>: Both arXiv API and OpenAI had strict limits that required careful orchestration. I lost enough openAI credits while playing with long research papers.</li>\n</ol>\n\n<p>Want to try it out or contribute?</p>\n\n<p>üöÄ <a href=\"https://github.com/Better-Boy/PaperSense\" rel=\"noopener noreferrer\">View the GitHub project</a></p>\n\n<p>üé• <a href=\"https://youtu.be/_Aw-lg2cKbA\" rel=\"noopener noreferrer\">Watch the YouTube demo</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Accelerating Full‚ÄëStack Development with React Kit","url":"https://dev.to/mushood_hanif/accelerating-full-stack-development-with-react-kit-56om","date":1751145943,"author":"Mushood Hanif","guid":174720,"unread":true,"content":"<p>Building a scalable, maintainable application often means juggling multiple repositories, ensuring consistency across front- and back‚Äëend code, and wiring up complex toolchains. React Kit streamlines this process by bundling a modern React frontend and an asynchronous Python FastAPI backend into a single, type‚Äësafe monorepo. Whether you‚Äôre prototyping an MVP or laying the groundwork for a production‚Äëgrade platform, React Kit gets you up and running in minutes ‚Äî with best practices baked in.</p>\n\n<p>üëâ <a href=\"https://github.com/DivineDemon/react-kit\" rel=\"noopener noreferrer\"><strong>Explore the repo on GitHub</strong></a></p>\n\n<h2>\n  \n  \n  Why a Monorepo?\n</h2>\n\n<p>Splitting frontend and backend into separate repos can soon become an organizational headache:</p>\n\n<ul>\n<li>\n<strong>Duplicated setup</strong>: Separate linting, formatting, and CI configurations.</li>\n<li>\n<strong>Sync challenges</strong>: API changes on the backend may break frontend code if types drift.</li>\n<li>\n<strong>Onboarding friction</strong>: New team members must clone and configure multiple projects.</li>\n</ul>\n\n<p>React Kit solves this by colocating code under a single roof, sharing configuration, and enforcing consistent tooling across the stack.</p>\n\n<h2>\n  \n  \n  Key Features at a Glance\n</h2>\n\n<h3>\n  \n  \n  Type‚ÄëSafe Full Stack\n</h3>\n\n<ul>\n<li>\n<strong>Backend</strong>: FastAPI + Pydantic v2 ensures strict request/response validation.</li>\n<li>\n<strong>Frontend</strong>: React + TypeScript with end‚Äëto‚Äëend type safety.</li>\n<li>\n<strong>Type Generation</strong>: Optional tools like <code>@rtk-query/codegen-openapi</code> can generate TS types directly from your FastAPI OpenAPI schema, eliminating type drift.</li>\n</ul>\n\n<h3>\n  \n  \n  Modern Frontend Tooling\n</h3>\n\n<ul>\n<li>\n<strong>Vite</strong> for lightning‚Äëfast builds and hot reload.</li>\n<li>\n<strong>TanStack Router</strong> for file‚Äëbased, zero‚Äëconfig routing with nested layouts.</li>\n<li>\n<strong>Redux Toolkit &amp; RTK Query</strong> for intuitive state management and data fetching.</li>\n<li>\n<strong>Tailwind CSS</strong> for utility‚Äëfirst styling.</li>\n</ul>\n\n<h3>\n  \n  \n  Async‚ÄëFirst Backend\n</h3>\n\n<ul>\n<li>\n<strong>FastAPI</strong> powers auto‚Äëgenerated OpenAPI docs (Swagger at /docs).</li>\n<li>\n<strong>SQLAlchemy</strong> with async support (via asyncpg) for high‚Äëthroughput database interactions.</li>\n<li>\n<strong>Seed Data</strong>: On startup, the backend seeds predefined data from constants/seed_data.json if tables are empty.</li>\n</ul>\n\n<h3>\n  \n  \n  Robust Tooling &amp; Automation\n</h3>\n\n<ul>\n<li>\n<strong>Husky</strong> Git Hooks enforce linting and formatting at every commit and can auto‚Äërun migrations or dependency installs on merge.</li>\n<li>\n<strong>Ruff</strong> for Python linting, Black for formatting.</li>\n<li>\n<strong>Biome</strong> on the frontend for linting and formatting.</li>\n</ul>\n\n<h2>\n  \n  \n  Inside the Monorepo\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>react-kit/\n‚îú‚îÄ‚îÄ backend/                # FastAPI backend\n‚îÇ   ‚îú‚îÄ‚îÄ app/                # Core code: routers, models, schemas\n‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt    # Python deps\n‚îÇ   ‚îî‚îÄ‚îÄ .env                # Environment variables\n‚îú‚îÄ‚îÄ frontend/               # React + TypeScript\n‚îÇ   ‚îú‚îÄ‚îÄ src/                # Routes, store, assets\n‚îÇ   ‚îú‚îÄ‚îÄ package.json        # JS deps &amp; scripts\n‚îÇ   ‚îî‚îÄ‚îÄ vite.config.ts      # Build config\n‚îî‚îÄ‚îÄ .husky/                 # Git hooks (pre‚Äëcommit, post‚Äëmerge)\n</code></pre>\n\n</div>\n\n\n\n<p>This structure keeps concerns neatly separated while sharing top‚Äëlevel scripts and configuration files.</p>\n\n<h2>\n  \n  \n  Quickstart Guide\n</h2>\n\n<h3>\n  \n  \n  1. Clone and Install\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>git clone https://github.com/DivineDemon/react-kit.git\ncd react-kit\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  2. Backend Setup\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>cd backend\npython -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\ncp .env.example .env    # configure DATABASE_URL, JWT_SECRET_KEY\nuvicorn app.main:app --reload\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  3. Frontend Setup\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>cd ../frontend\npnpm install\ncp .env.example .env    # set VITE_BASE_API_URL\npnpm run dev\n</code></pre>\n\n</div>\n\n\n\n<p>Within moments, you‚Äôll have both servers running with hot reload enabled.</p>\n\n<h2>\n  \n  \n  Development Workflow &amp; Best Practices\n</h2>\n\n<ul>\n<li>\n<strong>Coding</strong>: Work inside /frontend or /backend; file‚Äëbased routing and modular FastAPI routers make feature addition intuitive.</li>\n<li>\n<strong>Lint &amp; Format</strong>: Pre‚Äëcommit hooks automatically run Ruff/Black and ESLint/Prettier on staged changes.</li>\n<li>\n<strong>Type Updates</strong>: After modifying Pydantic schemas, regenerate TS types via <code>@rtk-query/codegen-openapi</code> to keep frontend in sync.</li>\n<li>\n<strong>Database Migrations</strong>: While not built‚Äëin, you can augment React Kit with Alembic for versioned migrations.</li>\n</ul>\n\n<p>This workflow minimizes manual steps, letting you focus on building features rather than maintaining boilerplate.</p>\n\n<h2>\n  \n  \n  Special Highlights\n</h2>\n\n<ul>\n<li>\n<strong>Automatic API Discovery</strong>: All Python modules under app/routers/ are auto‚Äëincluded in your FastAPI app‚Äîno manual imports needed.</li>\n<li>\n<strong>Hot‚ÄëReload Everywhere</strong>: Both <code>uvicorn</code> and Vite watch for file changes, providing instant feedback loops.</li>\n<li>\n<strong>Seeded Demo Data</strong>: Fresh database? Just start your backend and watch your tables populate automatically.</li>\n<li>\n<strong>Extensible</strong>: Swap Postgres for MySQL by updating your <code>DATABASE_URL</code>, or replace RTK Query with React Query‚ÄîReact Kit doesn‚Äôt lock you in.</li>\n</ul>\n\n<h2>\n  \n  \n  Who Should Use React Kit?\n</h2>\n\n<ul>\n<li>\n<strong>Startup Teams</strong> aiming to ship MVPs rapidly with minimal ops overhead.</li>\n<li>\n<strong>Full‚ÄëStack Developers</strong> who value type safety and end‚Äëto‚Äëend consistency.</li>\n<li>\n<strong>Engineering Managers</strong> looking for a reproducible boilerplate to onboard new engineers.</li>\n<li>Even <strong>seasoned teams</strong> can benefit by using React Kit as a template for best‚Äëin‚Äëclass tooling and workflows.</li>\n</ul>\n\n<h2>\n  \n  \n  Next Steps &amp; Contribution\n</h2>\n\n<p>While React Kit comes pre‚Äëwired for most use cases, you can easily extend it:</p>\n\n<ul>\n<li>Add <strong>GraphQL</strong> by layering Ariadne or Strawberry on top of FastAPI.</li>\n<li>\n<strong>Integrate CI/CD pipelines</strong> (GitHub Actions templates are a natural fit).</li>\n<li>Build a mobile companion using <strong>React Native</strong> in the same monorepo.</li>\n<li>\n<strong>Contributions are welcome</strong> ‚Äî simply fork the repo, implement your enhancements, and submit a pull request. Check out the FAQ and Contributing sections for more details.</li>\n</ul>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>React Kit offers a compelling foundation for modern web applications, uniting a type‚Äësafe Python backend and a high‚Äëperformance TypeScript frontend under one roof. With automated tooling, robust defaults, and an emphasis on developer experience, it‚Äôs an ideal starting point for projects of any scale. Clone the repo today and start building your next full‚Äëstack app with confidence.</p>\n\n<p>üîó <a href=\"https://github.com/DivineDemon/react-kit\" rel=\"noopener noreferrer\">github.com/DivineDemon/react‚Äëkit</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Getting started with Nexios Asgi Python Framework","url":"https://dev.to/techwithdunamix/getting-started-with-nexios-asgi-python-framework-1f7g","date":1751143173,"author":"Dunamix","guid":174694,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fsbq6jjfua2euoyaa7uj7.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fsbq6jjfua2euoyaa7uj7.png\" alt=\"Image description\" width=\"800\" height=\"800\"></a></p>\n\n<h1>\n  \n  \n  Getting Started with Nexios: A Modern Python Web Framework\n</h1>\n\n<h2>\n  \n  \n  Introduction\n</h2>\n\n<p>In the ever-evolving landscape of Python web frameworks, developers are constantly seeking solutions that offer the perfect balance of performance, simplicity, and developer experience. Enter <strong>Nexios</strong> - a modern, async-first Python web framework that's designed to deliver exceptional performance while maintaining clean, intuitive APIs.</p>\n\n<p>Nexios is built on ASGI (Asynchronous Server Gateway Interface) and combines the speed of Rust-powered engines with the elegance of Python. It's designed for developers who want to build scalable, high-performance web applications without the complexity often associated with enterprise frameworks.</p>\n\n<h2>\n  \n  \n  What is Nexios?\n</h2>\n\n<p>Nexios is a high-performance Python web framework that stands out for several key characteristics:</p>\n\n<ul>\n<li>\n<strong>Async-First Design</strong>: Built from the ground up with async/await support</li>\n<li>\n<strong>High Performance</strong>: Leverages ASGI for efficient concurrent request handling</li>\n<li>\n<strong>Developer-Friendly</strong>: Clean, intuitive APIs with excellent type hints</li>\n<li>\n<strong>Production-Ready</strong>: Built-in security, testing, and deployment features</li>\n<li>\n<strong>Flexible</strong>: Extensive customization options for any use case</li>\n</ul>\n\n<h3>\n  \n  \n  Why Choose Nexios?\n</h3>\n\n<p>Before diving into the technical details, let's understand why Nexios might be the right choice for your next project:</p>\n\n<ol>\n<li>\n<strong>True Async Performance</strong>: Unlike frameworks that add async as an afterthought, Nexios is built async-first with no sync-to-async bridges</li>\n<li>\n<strong>Clean Architecture</strong>: Promotes clean code practices through dependency injection and clear separation of concerns</li>\n<li>\n<strong>Modern Authentication</strong>: Flexible authentication system with multiple backends (JWT, Session, OAuth)</li>\n<li>\n<strong>WebSocket Support</strong>: First-class WebSocket support for real-time applications</li>\n<li>\n<strong>Production Ready</strong>: Built-in features for security, monitoring, and deployment</li>\n</ol>\n\n<h2>\n  \n  \n  Prerequisites\n</h2>\n\n<p>Before we begin, ensure you have:</p>\n\n<ul>\n<li>\n<strong>Python 3.9 or higher</strong> (Nexios leverages modern Python features)</li>\n<li>\n<strong>Basic understanding of async/await</strong> in Python</li>\n<li>\n<strong>A code editor</strong> (VS Code, PyCharm, or your preferred editor)</li>\n<li>\n<strong>Package manager</strong> (pip, uv, poetry, or pipenv)</li>\n</ul>\n\n<h3>\n  \n  \n  Python Version Requirements\n</h3>\n\n<p>Nexios requires Python 3.9+ because it leverages modern Python features like:</p>\n\n<ul>\n<li>Type annotations with generics</li>\n<li>Async context managers</li>\n<li>Pattern matching (Python 3.10+)</li>\n<li>Union types and other type system improvements</li>\n</ul>\n\n<h2>\n  \n  \n  Installation\n</h2>\n\n<p>There are several ways to install Nexios depending on your preferred package manager:</p>\n\n<h3>\n  \n  \n  Using uv (Recommended)\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Install uv (if you don't have it)</span>\npip <span class=\"nb\">install </span>uv\n\n<span class=\"c\"># Create a virtual environment and install Nexios</span>\nuv venv venv\n<span class=\"nb\">source </span>venv/bin/activate  <span class=\"c\"># On Windows: venv\\Scripts\\activate</span>\nuv pip <span class=\"nb\">install </span>nexios\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Using pip\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Create a virtual environment</span>\npython <span class=\"nt\">-m</span> venv venv\n<span class=\"nb\">source </span>venv/bin/activate  <span class=\"c\"># On Windows: venv\\Scripts\\activate</span>\n\n<span class=\"c\"># Install Nexios</span>\npip <span class=\"nb\">install </span>nexios\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Using poetry\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Create a new project</span>\npoetry new my-nexios-app\n<span class=\"nb\">cd </span>my-nexios-app\n\n<span class=\"c\"># Add Nexios</span>\npoetry add nexios\n\n<span class=\"c\"># Activate environment</span>\npoetry shell\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Using pipenv\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Create a new project directory</span>\n<span class=\"nb\">mkdir </span>my-nexios-app\n<span class=\"nb\">cd </span>my-nexios-app\n\n<span class=\"c\"># Initialize project</span>\npipenv <span class=\"nb\">install </span>nexios\n\n<span class=\"c\"># Activate environment</span>\npipenv shell\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Your First Nexios Application\n</h2>\n\n<p>Let's create a simple \"Hello, World!\" application to get familiar with Nexios basics.</p>\n\n<h3>\n  \n  \n  Basic Application\n</h3>\n\n<p>Create a file named <code>main.py</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">nexios</span> <span class=\"kn\">import</span> <span class=\"n\">NexiosApp</span>\n<span class=\"kn\">from</span> <span class=\"n\">nexios.http</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">Response</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">NexiosApp</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">message</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Hello from Nexios!</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">status</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span>\n    <span class=\"p\">})</span>\n\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Running Your Application\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>uvicorn main:app <span class=\"nt\">--reload</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Your application will start on <code>http://localhost:4000</code>. Visit the URL in your browser to see the JSON response.</p>\n\n<h3>\n  \n  \n  With Configuration\n</h3>\n\n<p>For more control over your application, you can use configuration:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">nexios</span> <span class=\"kn\">import</span> <span class=\"n\">NexiosApp</span><span class=\"p\">,</span> <span class=\"n\">MakeConfig</span>\n<span class=\"kn\">from</span> <span class=\"n\">nexios.http</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">Response</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nc\">MakeConfig</span><span class=\"p\">(</span>\n    <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">cors_enabled</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">allowed_hosts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">localhost</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">127.0.0.1</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">NexiosApp</span><span class=\"p\">(</span>\n    <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span>\n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">My First Nexios API</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">1.0.0</span><span class=\"sh\">\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">message</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Hello from Nexios!</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">app_title</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">version</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">openapi_config</span><span class=\"p\">.</span><span class=\"n\">version</span>\n    <span class=\"p\">})</span>\n\n\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Core Concepts\n</h2>\n\n<h3>\n  \n  \n  1. Application Instance\n</h3>\n\n<p>The <code>NexiosApp</code> class is the main entry point for your application. It handles:</p>\n\n<ul>\n<li>Route registration</li>\n<li>Middleware management</li>\n<li>Configuration</li>\n<li>OpenAPI documentation</li>\n<li>Event handling</li>\n</ul>\n\n<h3>\n  \n  \n  2. Request and Response Objects\n</h3>\n\n<p>Nexios provides <code>Request</code> and <code>Response</code> objects that encapsulate HTTP request and response data:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users/{user_id:int}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">path_params</span><span class=\"p\">.</span><span class=\"n\">user_id</span>\n    <span class=\"n\">query_params</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">query_params</span>\n\n    <span class=\"c1\"># Access query parameters\n</span>    <span class=\"n\">include_profile</span> <span class=\"o\">=</span> <span class=\"n\">query_params</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">include_profile</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">false</span><span class=\"sh\">\"</span><span class=\"p\">).</span><span class=\"nf\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">true</span><span class=\"sh\">\"</span>\n\n    <span class=\"c1\"># Simulate database query\n</span>    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">user_id</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">User </span><span class=\"si\">{</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">email</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"si\">{</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"s\">@example.com</span><span class=\"sh\">\"</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">include_profile</span><span class=\"p\">:</span>\n        <span class=\"n\">user</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">profile</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">bio</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">This is a sample profile</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  3. Path Parameters\n</h3>\n\n<p>Nexios supports typed path parameters:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/items/{item_id:int}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_item</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"n\">item_id</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">path_params</span><span class=\"p\">.</span><span class=\"n\">item_id</span>  <span class=\"c1\"># Automatically converted to int\n</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">item_id</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Item </span><span class=\"si\">{</span><span class=\"n\">item_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">})</span>\n\n<span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users/{username:str}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_user_by_name</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">path_params</span><span class=\"p\">.</span><span class=\"n\">username</span>  <span class=\"c1\"># String parameter\n</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">username</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">status</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">active</span><span class=\"sh\">\"</span><span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Available path parameter types:</p>\n\n<ul>\n<li>\n<code>str</code> (default)</li>\n<li><code>int</code></li>\n<li><code>float</code></li>\n<li><code>uuid</code></li>\n<li><code>path</code></li>\n<li><code>date</code></li>\n<li><code>datetime</code></li>\n</ul>\n\n<h3>\n  \n  \n  4. HTTP Methods\n</h3>\n\n<p>Nexios provides decorators for all HTTP methods:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">list_users</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">([{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">John</span><span class=\"sh\">\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Jane</span><span class=\"sh\">\"</span><span class=\"p\">}])</span>\n\n<span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Simulate user creation\n</span>    <span class=\"n\">new_user</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">user_data</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"n\">new_user</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">201</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app.put</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users/{user_id:int}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">update_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">path_params</span><span class=\"p\">.</span><span class=\"n\">user_id</span>\n    <span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Simulate user update\n</span>    <span class=\"n\">updated_user</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">user_data</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"n\">updated_user</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app.delete</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users/{user_id:int}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">delete_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">path_params</span><span class=\"p\">.</span><span class=\"n\">user_id</span>\n    <span class=\"c1\"># Simulate user deletion\n</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"mi\">204</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Dependency Injection\n</h2>\n\n<p>Nexios provides a powerful dependency injection system:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">nexios</span> <span class=\"kn\">import</span> <span class=\"n\">Depend</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_database</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Simulate database connection\n</span>    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">connection</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">active</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">pool_size</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_current_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Simulate user authentication\n</span>    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">X-User-ID</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">user_id</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">),</span> <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">User </span><span class=\"si\">{</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n<span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">list_users</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> \n    <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span>\n    <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"nc\">Depend</span><span class=\"p\">(</span><span class=\"n\">get_database</span><span class=\"p\">),</span>\n    <span class=\"n\">current_user</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"nc\">Depend</span><span class=\"p\">(</span><span class=\"n\">get_current_user</span><span class=\"p\">)</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">current_user</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Unauthorized</span><span class=\"sh\">\"</span><span class=\"p\">},</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">401</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">users</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">John</span><span class=\"sh\">\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Jane</span><span class=\"sh\">\"</span><span class=\"p\">}],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">db_status</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">connection</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">current_user</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">current_user</span>\n    <span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Middleware\n</h2>\n\n<p>Middleware in Nexios allows you to process requests and responses globally:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">nexios.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">BaseMiddleware</span>\n<span class=\"kn\">from</span> <span class=\"n\">nexios.http</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">Response</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LoggingMiddleware</span><span class=\"p\">(</span><span class=\"n\">BaseMiddleware</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">call_next</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Pre-processing\n</span>        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Request: </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"si\">}</span><span class=\"s\"> </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">url</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Call the next middleware/handler\n</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">call_next</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Post-processing\n</span>        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Response: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status_code</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n<span class=\"c1\"># Add middleware to your app\n</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">add_middleware</span><span class=\"p\">(</span><span class=\"nc\">LoggingMiddleware</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Built-in Middleware\n</h3>\n\n<p>Nexios comes with several built-in middleware options:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">nexios.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">CORSMiddleware</span><span class=\"p\">,</span> <span class=\"n\">SecurityMiddleware</span>\n\n<span class=\"c1\"># CORS middleware\n</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">add_middleware</span><span class=\"p\">(</span><span class=\"nc\">CORSMiddleware</span><span class=\"p\">(</span>\n    <span class=\"n\">allow_origins</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">http://localhost:3000</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n    <span class=\"n\">allow_methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">GET</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">POST</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">PUT</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">DELETE</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n    <span class=\"n\">allow_headers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">*</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"p\">))</span>\n\n<span class=\"c1\"># Security middleware\n</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">add_middleware</span><span class=\"p\">(</span><span class=\"nc\">SecurityMiddleware</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Authentication\n</h2>\n\n<p>Nexios provides a flexible authentication system:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">nexios.auth.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">AuthenticationMiddleware</span>\n<span class=\"kn\">from</span> <span class=\"n\">nexios.auth.backends.jwt</span> <span class=\"kn\">import</span> <span class=\"n\">JWTAuthBackend</span>\n<span class=\"kn\">from</span> <span class=\"n\">nexios.auth.decorator</span> <span class=\"kn\">import</span> <span class=\"n\">auth</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_user_from_payload</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">payload</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Simulate user lookup from JWT payload\n</span>    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">payload</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">sub</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">user_id</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">User </span><span class=\"si\">{</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n<span class=\"c1\"># Add authentication middleware\n</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">add_middleware</span><span class=\"p\">(</span>\n    <span class=\"nc\">AuthenticationMiddleware</span><span class=\"p\">(</span>\n        <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"nc\">JWTAuthBackend</span><span class=\"p\">(</span><span class=\"n\">get_user_from_payload</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/protected</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@auth</span><span class=\"p\">([</span><span class=\"sh\">\"</span><span class=\"s\">jwt</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">protected_route</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">message</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">This is a protected route</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">user</span>\n    <span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  WebSocket Support\n</h2>\n\n<p>Nexios provides excellent WebSocket support for real-time applications:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">nexios.websockets</span> <span class=\"kn\">import</span> <span class=\"n\">Channel</span>\n\n<span class=\"c1\"># Create a chat channel\n</span><span class=\"n\">chat</span> <span class=\"o\">=</span> <span class=\"nc\">Channel</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">chat</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app.ws_route</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/ws/chat/{room}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">chat_room</span><span class=\"p\">(</span><span class=\"n\">websocket</span><span class=\"p\">,</span> <span class=\"n\">room</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">chat</span><span class=\"p\">.</span><span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"n\">websocket</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Receive message from client\n</span>            <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">websocket</span><span class=\"p\">.</span><span class=\"nf\">receive_json</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># Broadcast to all connected clients\n</span>            <span class=\"k\">await</span> <span class=\"n\">chat</span><span class=\"p\">.</span><span class=\"nf\">broadcast</span><span class=\"p\">({</span>\n                <span class=\"sh\">\"</span><span class=\"s\">room</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">room</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">message</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n                <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n            <span class=\"p\">})</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle disconnection\n</span>        <span class=\"k\">await</span> <span class=\"n\">chat</span><span class=\"p\">.</span><span class=\"nf\">disconnect</span><span class=\"p\">(</span><span class=\"n\">websocket</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Error Handling\n</h2>\n\n<p>Nexios provides comprehensive error handling:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">nexios.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPException</span>\n\n<span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users/{user_id:int}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">path_params</span><span class=\"p\">.</span><span class=\"n\">user_id</span>\n\n    <span class=\"c1\"># Simulate user lookup\n</span>    <span class=\"k\">if</span> <span class=\"n\">user_id</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">User not found</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">User </span><span class=\"si\">{</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Custom exception handler\n</span><span class=\"nd\">@app.add_exception_handler</span><span class=\"p\">(</span><span class=\"nb\">ValueError</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_value_error</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">:</span> <span class=\"nb\">ValueError</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Invalid value provided</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">detail</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  OpenAPI Documentation\n</h2>\n\n<p>Nexios automatically generates OpenAPI documentation:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserCreate</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserResponse</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">,</span> \n    <span class=\"n\">summary</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Create a new user</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Creates a new user with the provided information</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">response_model</span><span class=\"o\">=</span><span class=\"n\">UserResponse</span><span class=\"p\">,</span>\n    <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">201</span>\n<span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> \n    <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span>\n    <span class=\"n\">user_data</span><span class=\"p\">:</span> <span class=\"n\">UserCreate</span>\n<span class=\"p\">):</span>\n    <span class=\"c1\"># Simulate user creation\n</span>    <span class=\"n\">new_user</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">user_data</span><span class=\"p\">.</span><span class=\"nf\">dict</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"n\">new_user</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">201</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Visit <code>http://localhost:4000/docs</code> to see the interactive API documentation.</p>\n\n<h2>\n  \n  \n  Project Structure\n</h2>\n\n<p>As your application grows, you'll want to organize it properly:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>my-nexios-app/\n‚îú‚îÄ‚îÄ app/\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îú‚îÄ‚îÄ main.py\n‚îÇ   ‚îú‚îÄ‚îÄ config.py\n‚îÇ   ‚îú‚îÄ‚îÄ models/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ user.py\n‚îÇ   ‚îú‚îÄ‚îÄ services/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ user_service.py\n‚îÇ   ‚îú‚îÄ‚îÄ routes/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ users.py\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ auth.py\n‚îÇ   ‚îî‚îÄ‚îÄ middleware/\n‚îÇ       ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ       ‚îî‚îÄ‚îÄ custom_middleware.py\n‚îú‚îÄ‚îÄ tests/\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îî‚îÄ‚îÄ test_users.py\n‚îú‚îÄ‚îÄ requirements.txt\n‚îî‚îÄ‚îÄ README.md\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Example: Modular Route Structure\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># app/routes/users.py\n</span><span class=\"kn\">from</span> <span class=\"n\">nexios</span> <span class=\"kn\">import</span> <span class=\"n\">Router</span>\n<span class=\"kn\">from</span> <span class=\"n\">nexios.http</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">Response</span>\n\n<span class=\"n\">router</span> <span class=\"o\">=</span> <span class=\"nc\">Router</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@router.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">list_users</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">([{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">John</span><span class=\"sh\">\"</span><span class=\"p\">}])</span>\n\n<span class=\"nd\">@router.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"n\">user_data</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">201</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># app/main.py\n</span><span class=\"kn\">from</span> <span class=\"n\">nexios</span> <span class=\"kn\">import</span> <span class=\"n\">NexiosApp</span>\n<span class=\"kn\">from</span> <span class=\"n\">app.routes.users</span> <span class=\"kn\">import</span> <span class=\"n\">router</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">NexiosApp</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Mount the users router\n</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">mount_router</span><span class=\"p\">(</span><span class=\"n\">router</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Testing\n</h2>\n\n<p>Nexios provides testing utilities:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">nexios.testing</span> <span class=\"kn\">import</span> <span class=\"n\">TestClient</span>\n<span class=\"kn\">from</span> <span class=\"n\">app.main</span> <span class=\"kn\">import</span> <span class=\"n\">app</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nc\">TestClient</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_list_users</span><span class=\"p\">():</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span>\n    <span class=\"k\">assert</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(),</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_create_user</span><span class=\"p\">():</span>\n    <span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">John</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">email</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">john@example.com</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">user_data</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">201</span>\n    <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()[</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">John</span><span class=\"sh\">\"</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Deployment\n</h2>\n\n<h3>\n  \n  \n  Development\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Run with auto-reload</span>\npython main.py\n\n<span class=\"c\"># Or with uvicorn</span>\nuvicorn main:app <span class=\"nt\">--reload</span> <span class=\"nt\">--host</span> 0.0.0.0 <span class=\"nt\">--port</span> 8000\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Production\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Using uvicorn</span>\nuvicorn main:app <span class=\"nt\">--host</span> 0.0.0.0 <span class=\"nt\">--port</span> 8000 <span class=\"nt\">--workers</span> 4\n\n<span class=\"c\"># Using gunicorn with uvicorn workers</span>\ngunicorn main:app <span class=\"nt\">-w</span> 4 <span class=\"nt\">-k</span> uvicorn.workers.UvicornWorker\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Docker\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight docker\"><code><span class=\"k\">FROM</span><span class=\"s\"> python:3.11-slim</span>\n\n<span class=\"k\">WORKDIR</span><span class=\"s\"> /app</span>\n\n<span class=\"k\">COPY</span><span class=\"s\"> requirements.txt .</span>\n<span class=\"k\">RUN </span>pip <span class=\"nb\">install</span> <span class=\"nt\">-r</span> requirements.txt\n\n<span class=\"k\">COPY</span><span class=\"s\"> . .</span>\n\n<span class=\"k\">EXPOSE</span><span class=\"s\"> 8000</span>\n\n<span class=\"k\">CMD</span><span class=\"s\"> [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Performance Considerations\n</h2>\n\n<h3>\n  \n  \n  1. Async Best Practices\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Good: Use async for I/O operations\n</span><span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">list_users</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Simulate async database query\n</span>    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">database</span><span class=\"p\">.</span><span class=\"nf\">fetch_all</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">SELECT * FROM users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Avoid: Blocking operations in async handlers\n</span><span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">list_users</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Bad: This blocks the event loop\n</span>    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Don't do this!\n</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  2. Connection Pooling\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncpg</span>\n\n<span class=\"c1\"># Create connection pool\n</span><span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n<span class=\"nd\">@app.on_startup</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">startup</span><span class=\"p\">():</span>\n    <span class=\"k\">global</span> <span class=\"n\">pool</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncpg</span><span class=\"p\">.</span><span class=\"nf\">create_pool</span><span class=\"p\">(</span>\n        <span class=\"sh\">\"</span><span class=\"s\">postgresql://user:password@localhost/dbname</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"n\">min_size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">20</span>\n    <span class=\"p\">)</span>\n\n<span class=\"nd\">@app.on_shutdown</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">shutdown</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">pool</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">list_users</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"nf\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n        <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">SELECT * FROM users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">([</span><span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span><span class=\"p\">])</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Common Patterns\n</h2>\n\n<h3>\n  \n  \n  1. Pagination\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">nexios.pagination</span> <span class=\"kn\">import</span> <span class=\"n\">Pagination</span>\n\n<span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">list_users</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> \n    <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span>\n    <span class=\"n\">page</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"p\">):</span>\n    <span class=\"c1\"># Simulate paginated data\n</span>    <span class=\"n\">total_users</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">User </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">}</span> \n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">((</span><span class=\"n\">page</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"n\">page</span> <span class=\"o\">*</span> <span class=\"n\">size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">total_users</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">pagination</span> <span class=\"o\">=</span> <span class=\"nc\">Pagination</span><span class=\"p\">(</span>\n        <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"n\">page</span><span class=\"p\">,</span>\n        <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">,</span>\n        <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"n\">total_users</span><span class=\"p\">,</span>\n        <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"n\">users</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"n\">pagination</span><span class=\"p\">.</span><span class=\"nf\">to_dict</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  2. File Upload\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/upload</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">upload_file</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"nf\">form</span><span class=\"p\">()</span>\n    <span class=\"nb\">file</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">file</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">file</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Save file\n</span>        <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">uploads/</span><span class=\"si\">{</span><span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">wb</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">())</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span>\n            <span class=\"sh\">\"</span><span class=\"s\">message</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">File uploaded successfully</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">filename</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">filename</span>\n        <span class=\"p\">})</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">No file provided</span><span class=\"sh\">\"</span><span class=\"p\">},</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  3. Background Tasks\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Add background task\n</span>    <span class=\"nd\">@app.background_task</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">send_welcome_email</span><span class=\"p\">(</span><span class=\"n\">user_email</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Simulate sending email\n</span>        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Sending welcome email to </span><span class=\"si\">{</span><span class=\"n\">user_email</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Schedule background task\n</span>    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">add_background_task</span><span class=\"p\">(</span><span class=\"n\">send_welcome_email</span><span class=\"p\">,</span> <span class=\"n\">user_data</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">email</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"n\">user_data</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">201</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Best Practices\n</h2>\n\n<h3>\n  \n  \n  1. Error Handling\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">nexios.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPException</span>\n\n<span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users/{user_id:int}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">path_params</span><span class=\"p\">.</span><span class=\"n\">user_id</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">user_service</span><span class=\"p\">.</span><span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">user</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">User not found</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">ValueError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  2. Validation\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">EmailStr</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserCreate</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"n\">EmailStr</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> \n    <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span>\n    <span class=\"n\">user_data</span><span class=\"p\">:</span> <span class=\"n\">UserCreate</span>\n<span class=\"p\">):</span>\n    <span class=\"c1\"># Pydantic automatically validates the data\n</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"n\">user_data</span><span class=\"p\">.</span><span class=\"nf\">dict</span><span class=\"p\">(),</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">201</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  3. Security\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">nexios.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">SecurityMiddleware</span>\n\n<span class=\"c1\"># Add security headers\n</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">add_middleware</span><span class=\"p\">(</span><span class=\"nc\">SecurityMiddleware</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Use HTTPS in production\n</span><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">force_https</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Nexios is a powerful, modern Python web framework that offers excellent performance, developer experience, and flexibility. Its async-first design, clean architecture, and comprehensive feature set make it an excellent choice for building scalable web applications.</p>\n\n<h3>\n  \n  \n  Key Takeaways\n</h3>\n\n<ol>\n<li>\n<strong>Async-First</strong>: Nexios is built from the ground up with async/await support</li>\n<li>\n<strong>High Performance</strong>: Leverages ASGI for efficient concurrent request handling</li>\n<li>\n<strong>Developer-Friendly</strong>: Clean APIs with excellent type hints and documentation</li>\n<li>\n<strong>Production-Ready</strong>: Built-in security, testing, and deployment features</li>\n<li>\n<strong>Flexible</strong>: Extensive customization options for any use case</li>\n</ol>\n\n<h3>\n  \n  \n  Next Steps\n</h3>\n\n<p>Now that you have a solid foundation with Nexios, consider exploring:</p>\n\n<ul>\n<li>\n<strong>Database Integration</strong>: Connect to PostgreSQL, MySQL, or MongoDB</li>\n<li>\n<strong>Authentication</strong>: Implement JWT, OAuth, or session-based auth</li>\n<li>\n<strong>WebSockets</strong>: Build real-time features with WebSocket support</li>\n<li>\n<strong>Testing</strong>: Write comprehensive tests for your application</li>\n<li>\n<strong>Deployment</strong>: Deploy to production with proper configuration</li>\n</ul>\n\n<h3>\n  \n  \n  Resources\n</h3>\n\n<ul>\n<li><a href=\"https://nexios-docs.netlify.app\" rel=\"noopener noreferrer\">Official Documentation</a></li>\n<li><a href=\"https://github.com/nexios-labs/Nexios\" rel=\"noopener noreferrer\">GitHub Repository</a></li>\n<li><a href=\"https://discord.gg/nexios\" rel=\"noopener noreferrer\">Community Discord</a></li>\n<li><a href=\"https://github.com/nexios-labs/examples\" rel=\"noopener noreferrer\">Examples Repository</a></li>\n</ul>\n\n<p>Happy coding with Nexios! üöÄ</p>\n\n\n\n\n<p><em>This blog post was written to help developers get started with the Nexios framework. For the latest information and updates, always refer to the official documentation.</em> </p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Advanced Python Testing Techniques: Property-Based, Mutation, and Fuzzing for Robust Applications","url":"https://dev.to/aaravjoshi/advanced-python-testing-techniques-property-based-mutation-and-fuzzing-for-robust-applications-5829","date":1751140948,"author":"Aarav Joshi","guid":174693,"unread":true,"content":"<blockquote>\n<p>As a best-selling author, I invite you to explore my books on <a href=\"https://www.amazon.com/stores/Aarav-Joshi/author/B0DQYNVXZ7?ref=ap_rdr&amp;isDramIntegrated=true&amp;shoppingPortalEnabled=true&amp;ccs_id=738636bd-0ca1-4d7b-8efa-481bfc222571\" rel=\"noopener noreferrer\">Amazon</a>. Don't forget to follow me on <a href=\"https://medium.com/@aarav-joshi\" rel=\"noopener noreferrer\">Medium</a> and show your support. Thank you! Your support means the world! </p>\n</blockquote>\n\n<p>Testing Python applications thoroughly requires moving beyond basic unit tests. I've found that advanced techniques provide essential safety nets for complex systems. These methods help catch elusive bugs and ensure reliability under demanding conditions.  </p>\n\n<p>Property-based testing revolutionized how I approach test case generation. Instead of manually creating inputs, I use Hypothesis to automatically produce diverse data. This uncovered edge cases I'd never considered. For example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">hypothesis</span> <span class=\"kn\">import</span> <span class=\"n\">given</span><span class=\"p\">,</span> <span class=\"n\">strategies</span> <span class=\"k\">as</span> <span class=\"n\">st</span>\n<span class=\"kn\">import</span> <span class=\"n\">re</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">emails</span><span class=\"p\">())</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_email_validation</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">\"</span><span class=\"s\">^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Testing matrix operations\n</span><span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">matrices</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">elements</span><span class=\"o\">=</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">floats</span><span class=\"p\">(</span><span class=\"n\">allow_nan</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)))</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_matrix_determinant</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">):</span>\n    <span class=\"n\">det</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"nf\">det</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">det</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Mutation testing evaluates your test suite's effectiveness. I regularly use MutPy to introduce artificial defects. If tests don't detect these mutations, I know my coverage has gaps:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Custom mutation rules</span>\nmut.py <span class=\"nt\">--target</span> payment_processor <span class=\"nt\">--unit-test</span> tests \n       <span class=\"nt\">--operator</span> AOD,COD <span class=\"nt\">--show-mutants</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Fuzzing identifies security vulnerabilities through automated input flooding. Atheris has saved me from numerous buffer overflow issues:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">atheris</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_config</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1024</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">MemoryError</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Excessive config size</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Parsing logic here\n</span>\n<span class=\"n\">atheris</span><span class=\"p\">.</span><span class=\"nc\">Setup</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"n\">parse_config</span><span class=\"p\">)</span>\n<span class=\"n\">atheris</span><span class=\"p\">.</span><span class=\"nc\">Fuzz</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Asynchronous code requires specialized testing approaches. I rely on pytest-asyncio to validate timing-sensitive operations:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">pytest</span>\n\n<span class=\"nd\">@pytest.mark.asyncio</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_websocket_communication</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">websockets</span><span class=\"p\">.</span><span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"n\">URI</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">ws</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">ws</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">ping</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">wait_for</span><span class=\"p\">(</span><span class=\"n\">ws</span><span class=\"p\">.</span><span class=\"nf\">recv</span><span class=\"p\">(),</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">pong</span><span class=\"sh\">\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Snapshot testing simplifies verifying complex outputs. When working on reporting systems, pytest-snapshot caught subtle formatting regressions:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">test_pdf_generation</span><span class=\"p\">(</span><span class=\"n\">snapshot</span><span class=\"p\">):</span>\n    <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"nf\">generate_monthly_report</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">=</span><span class=\"n\">test_users</span><span class=\"p\">)</span>\n    <span class=\"n\">snapshot</span><span class=\"p\">.</span><span class=\"nf\">assert_match</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">.</span><span class=\"nf\">to_pdf</span><span class=\"p\">(),</span> <span class=\"sh\">\"</span><span class=\"s\">monthly_report.pdf</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Performance regression testing with pytest-benchmark helps maintain speed:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">test_image_processing</span><span class=\"p\">(</span><span class=\"n\">benchmark</span><span class=\"p\">):</span>\n    <span class=\"n\">highres_image</span> <span class=\"o\">=</span> <span class=\"nf\">load_sample</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">astro.jpg</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"nf\">benchmark</span><span class=\"p\">(</span><span class=\"n\">apply_filters</span><span class=\"p\">,</span> <span class=\"n\">highres_image</span><span class=\"p\">,</span> <span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">sharpen</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">denoise</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Dependency simulation isolates components during testing. I frequently use unittest.mock to handle external services:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">unittest.mock</span> <span class=\"kn\">import</span> <span class=\"n\">patch</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_tax_calculation</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"nf\">patch</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">financial_module.get_tax_rate</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">return_value</span><span class=\"o\">=</span><span class=\"mf\">0.21</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">mock_tax</span><span class=\"p\">:</span>\n        <span class=\"n\">order_total</span> <span class=\"o\">=</span> <span class=\"nf\">calculate_total</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n        <span class=\"n\">mock_tax</span><span class=\"p\">.</span><span class=\"nf\">assert_called_with</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">US-NY</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">order_total</span> <span class=\"o\">==</span> <span class=\"mf\">121.0</span>\n</code></pre>\n\n</div>\n\n\n\n<p>For database-dependent applications, I use transactional tests to maintain state:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@pytest.mark.django_db</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_user_creation</span><span class=\"p\">():</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">()</span>\n    <span class=\"n\">User</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">test</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  These techniques form a comprehensive verification strategy. They help me deliver applications that withstand unexpected conditions while maintaining development velocity. The investment in robust testing pays dividends through reduced production incidents and increased deployment confidence.\n</h2>\n\n<p>üìò <strong>Checkout my <a href=\"https://youtu.be/WpR6F4ky4uM\" rel=\"noopener noreferrer\">latest ebook</a> for free on my channel!</strong><br><br>\nBe sure to <strong>like</strong>, <strong>share</strong>, <strong>comment</strong>, and <strong>subscribe</strong> to the channel!</p>\n\n\n\n\n<h2>\n  \n  \n  101 Books\n</h2>\n\n<p><strong>101 Books</strong> is an AI-driven publishing company co-founded by author <strong>Aarav Joshi</strong>. By leveraging advanced AI technology, we keep our publishing costs incredibly low‚Äîsome books are priced as low as <strong>$4</strong>‚Äîmaking quality knowledge accessible to everyone.</p>\n\n<p>Check out our book <strong><a href=\"https://www.amazon.com/dp/B0DQQF9K3Z\" rel=\"noopener noreferrer\">Golang Clean Code</a></strong> available on Amazon. </p>\n\n<p>Stay tuned for updates and exciting news. When shopping for books, search for <strong>Aarav Joshi</strong> to find more of our titles. Use the provided link to enjoy <strong>special discounts</strong>!</p>\n\n<h2>\n  \n  \n  Our Creations\n</h2>\n\n<p>Be sure to check out our creations:</p>\n\n<p><strong><a href=\"https://www.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Investor Central</a></strong> | <strong><a href=\"https://spanish.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Investor Central Spanish</a></strong> | <strong><a href=\"https://german.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Investor Central German</a></strong> | <strong><a href=\"https://smartliving.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Smart Living</a></strong> | <strong><a href=\"https://epochsandechoes.com/\" rel=\"noopener noreferrer\">Epochs &amp; Echoes</a></strong> | <strong><a href=\"https://www.puzzlingmysteries.com/\" rel=\"noopener noreferrer\">Puzzling Mysteries</a></strong> | <strong><a href=\"http://hindutva.epochsandechoes.com/\" rel=\"noopener noreferrer\">Hindutva</a></strong> | <strong><a href=\"https://elitedev.in/\" rel=\"noopener noreferrer\">Elite Dev</a></strong> | <strong><a href=\"https://jsschools.com/\" rel=\"noopener noreferrer\">JS Schools</a></strong></p>\n\n\n\n\n<h3>\n  \n  \n  We are on Medium\n</h3>\n\n<p><strong><a href=\"https://techkoalainsights.com/\" rel=\"noopener noreferrer\">Tech Koala Insights</a></strong> | <strong><a href=\"https://world.epochsandechoes.com/\" rel=\"noopener noreferrer\">Epochs &amp; Echoes World</a></strong> | <strong><a href=\"https://medium.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Investor Central Medium</a></strong> | <strong><a href=\"https://medium.com/puzzling-mysteries\" rel=\"noopener noreferrer\">Puzzling Mysteries Medium</a></strong> | <strong><a href=\"https://science.epochsandechoes.com/\" rel=\"noopener noreferrer\">Science &amp; Epochs Medium</a></strong> | <strong><a href=\"https://modernhindutva.substack.com/\" rel=\"noopener noreferrer\">Modern Hindutva</a></strong></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Model Context Protocol (MCP) Servers For The Absolute Beginner","url":"https://dev.to/thenjdevopsguy/model-context-protocol-mcp-servers-for-the-absolute-beginner-355o","date":1751140565,"author":"Michael Levan","guid":174666,"unread":true,"content":"<p>Anything AI is moving incredibly fast. Just roughly one year ago, everyone was talking about RAG and how fine-tuning was the correct approach to ensuring that the Model you're using has the data it needs.</p>\n\n<p>Now, it's all MCP (even though MCP is roughly 6 or so months old).</p>\n\n<p>Whenever anything new comes out from a \"tech perspective\", there are a lot of moving parts. One person says \"this is the de facto method for using X technology\" and then within a few months, the de facto method changes. It comes with the territory of new tools and platforms.</p>\n\n<p>In this blog, you'll get a quick breakdown of the timeline that led us to MCP and why it's important.</p>\n\n<h2>\n  \n  \n  Why \"Training\" Matters\n</h2>\n\n<p>Every Model, whether it's from OpenAI, Claude, Google, or wherever else, is trained based on particular data. This data comes in the form of primarily books and \"whatever is on the internet\" that it's allowed to use. A good example of this is StackOverflow forums.</p>\n\n<p>The \"data\" is a collected of data sets that are used to train said Models.</p>\n\n<p>The problem is that the data isn't specific, it's very general, which doesn't give the \"exact\" information necessary. That's why you can use a Model for some AI-generated code and it's possible you'll get good results, but it's also possible you'll get not-so-great results.</p>\n\n<p>Training Models in a particular way or taking a Model that already exists and training it with data that you need it to have (RAG, fine-tuning, etc.) is drastically important to get the results that you and perhaps even your organization are expecting.</p>\n\n<p>The timeline to ensure that the data and the responses from said data are accurate has come in 3 waves so far:</p>\n\n<ol>\n<li>Training Models</li>\n<li>Fine-tuning and RAG</li>\n<li>MCP</li>\n</ol>\n\n<h2>\n  \n  \n  Training Models\n</h2>\n\n<p>First, everyone was thinking about how to train Models and a lot of large organizations are still doing this including:</p>\n\n<ol>\n<li>Microsoft</li>\n<li>Google</li>\n<li>OpenAI</li>\n</ol>\n\n<p>And even some smaller organizations like Anthropic (as long as they have the right funding).</p>\n\n<p>The reason that every company both big and small aren't training Models is because it's very expensive. It costs millions of dollars to train a Model. Because of that, not every organization has the funds to train Models and even if they do, it's entirely possible that they simply want to use a Model that already exists because they aren't in the business of \"AI\", they're just users of AI.</p>\n\n<p>Training a Model consists of having a collection of data sets, running those data sets through ML tooling to train the data and then eventually, all of those data sets are \"combined\" and turned into a Model.</p>\n\n<h2>\n  \n  \n  Fine-Tuning and RAG\n</h2>\n\n<p>As mentioned in the previous section, organizations want to use AI, but not every organization wants to spend millions of dollars to do so. However, on the flipside, those organizations still need specific output from the AI tooling that they use.</p>\n\n<p>That's why fine-tuning and RAGs were created.</p>\n\n<p>Fine-tuning a Model takes an existing Model and trains it on particular data sets, which are usually much smaller. Retrieval Augmented Generation (RAG) allows you to connect the LLM you're using (at the time of using it/at runtime) to external sources. For example, you can create a RAG within an application to call out to documentation and blog posts.</p>\n\n<p>Something like a RAG is great, but the problem is it's application-centric. What that means is you create a RAG and you're using it within one application stack. That means if you want to take it and use it in another application stack, that's a lot of refactoring various code bases.</p>\n\n<p>Instead, people wanted a method of calling out to specific data that they wanted to use within an application or a system (like a Kubernetes cluster) without refactoring a code base to implement a RAG.</p>\n\n<p>That's where MCP comes into play.</p>\n\n<h2>\n  \n  \n  Enter MCP\n</h2>\n\n<p>Model Context Protocol (MCP) is, as the name suggests, a specific context (the data that's needed for what you're trying to do) in one central location. The term \"MCP Server\" has caught traction, but not because it's an actual server running (although, some MCPs are like that), but because MCP uses a client/server architecture.</p>\n\n<p>MCP is nothing more than a specific \"server\" (written as an application) that calls out to specific data.</p>\n\n<p>One example that pops up on Google if you search \"How to create an MCP server\" is a Weather app, and it's quite good.</p>\n\n<ol>\n<li>Use an MCP generator via the MCP Python package.</li>\n<li>Call out to a specific API (in this case, a Weather API) to get data.</li>\n<li>Take the data that's collected via the specific API and use it as a response to the user that's calling upon the MCP server.\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>    @mcp.tool\n    def get_weather(location: str) -&gt; str:\n        \"\"\"Gets the current weather for a given location.\"\"\"\n        NWS_API_BASE = \"https://api.weather.gov\"\n        USER_AGENT = \"weather-app/1.0\"\n        try:\n            response = httpx.get(\n                f\"{NWS_API_BASE}/points/{location}\",\n                headers={\"User-Agent\": USER_AGENT},\n            )\n            response.raise_for_status()\n            data = response.json()\n            forecast_url = data[\"properties\"][\"forecast\"]\n            forecast_response = httpx.get(forecast_url, headers={\"User-Agent\": USER_AGENT})\n            forecast_response.raise_for_status()\n            forecast_data = forecast_response.json()\n            return forecast_data[\"properties\"][\"periods\"][\"shortForecast\"]\n        except httpx.RequestError as e:\n            return f\"Error fetching weather data: {e}\"\n        except (KeyError, IndexError) as e:\n            return f\"Error parsing weather data: {e}\"\n\n</code></pre>\n\n</div>\n\n\n\n<p>If you're writing a client to use/connect to an MCP \"server\", the MCP server could simply be a package.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>    async with stdio_client(server_params) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n\n            tools_result = await session.list_tools()\n            print(\"Available tools:\", [tool.name for tool in tools_result.tools])\n\n        session.call_tool(\"tool_name\", arguments={})\n</code></pre>\n\n</div>\n\n\n\n<p>Here's an MCP Server for EKS that's quite literally a Python <code>pip</code> package: <a href=\"https://pypi.org/project/awslabs.eks-mcp-server/\" rel=\"noopener noreferrer\">https://pypi.org/project/awslabs.eks-mcp-server/</a></p>\n\n<p>You can call the package and use it in your client by either having the package locally via JSON or embedding it within your client.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>{\n    \"mcpServers\": {\n        \"awslabs.eks-mcp-server\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"awslabs.eks-mcp-server\",\n                \"--allow-write\"\n            ],\n            \"env\": {\n                \"AWS_PROFILE\": \"default\",\n                \"AWS_REGION\": \"us-west-2\",\n                \"FASTMCP_LOG_LEVEL\": \"INFO\"\n            }\n        }\n    }\n}\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>    server_params = StdioServerParameters(\n        command=\"uvx\",\n        args=[\"awslabs.eks-mcp-server\", \"--allow-write\"],\n        env={\n            \"AWS_PROFILE\": \"default\",\n            \"AWS_REGION\": \"us-west-2\",\n            \"FASTMCP_LOG_LEVEL\": \"INFO\"\n        }\n    )\n</code></pre>\n\n</div>\n\n\n\n<p>Here's a great post on Reddit from Anthropic using the MCP Framework that they created: <a href=\"https://www.reddit.com/r/ClaudeAI/comments/1hoafi1/introducing_mcpframework_build_a_mcp_server_in_5/\" rel=\"noopener noreferrer\">https://www.reddit.com/r/ClaudeAI/comments/1hoafi1/introducing_mcpframework_build_a_mcp_server_in_5/</a></p>\n\n<p>If you want a video-centric breakdown on MCP, here's one I recently created.</p>\n\n<p><a href=\"https://www.youtube.com/watch?v=jNWyB06XJgE\" rel=\"noopener noreferrer\">https://www.youtube.com/watch?v=jNWyB06XJgE</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üòé What Every Developer Should Learn Before 2026","url":"https://dev.to/resource_bunk_1077cab07da/what-every-developer-should-learn-before-2026-3i57","date":1751139975,"author":"Resource Bunk","guid":174663,"unread":true,"content":"<p>Check these: (Everything is Free)</p>\n\n<ul>\n<li><a href=\"https://dev-resources.site\" rel=\"noopener noreferrer\">Dev. Resources</a></li>\n<li><a href=\"https://youtube-courses.site\" rel=\"noopener noreferrer\">YouTube Courses</a></li>\n<li><a href=\"https://gittech.site\" rel=\"noopener noreferrer\">Gittech</a></li>\n</ul>\n\n\n\n\n<blockquote>\n<p>The gap between <em>good developers</em> and <em>great developers</em> is growing fast.</p>\n</blockquote>\n\n<p>With the explosion of AI tools, automation workflows, and increasingly complex tech stacks, developers can't just ‚Äúknow how to code‚Äù anymore. In 2026 and beyond, your edge isn't just writing code ‚Äî it's understanding <strong>how systems think, scale, and interact</strong>.</p>\n\n<p>Whether you're junior, mid-level, or a senior looking to stay sharp ‚Äî this is your <strong>developer upgrade checklist</strong> before 2026 hits.</p>\n\n<p>Let‚Äôs get into it üëá</p>\n\n\n\n\n<h2>\n  \n  \n  ‚öôÔ∏è 1. <strong>How to Think in Systems, Not Just Code</strong>\n</h2>\n\n<h3>\n  \n  \n  üß© Why it matters:\n</h3>\n\n<p>Writing individual functions is easy. But building features that interact across APIs, services, databases, and teams ‚Äî that‚Äôs what scales.</p>\n\n<p>Learn:</p>\n\n<ul>\n<li><strong>How requests flow through a system (HTTP &gt; API &gt; Logic &gt; DB)</strong></li>\n<li><strong>How to model data for real-world use cases</strong></li>\n<li><strong>Event-driven architecture vs REST vs GraphQL</strong></li>\n<li><strong>How to log, monitor, and handle errors</strong></li>\n</ul>\n\n<p>üìö Resource:<br>\n‚Üí <a href=\"https://github.com/donnemartin/system-design-primer\" rel=\"noopener noreferrer\">System Design Primer (GitHub)</a><br>\n‚Üí <a href=\"https://www.youtube.com/@ByteByteGo\" rel=\"noopener noreferrer\">ByteByteGo</a></p>\n\n\n<h2>\n  \n  \n  üí° 2. <strong>Prompt Engineering + AI Workflow Integration</strong>\n</h2>\n<h3>\n  \n  \n  ü§ñ Why it matters:\n</h3>\n\n<p>You‚Äôll spend 30‚Äì50% of your time working <em>with</em> AI. That means knowing:</p>\n\n<ul>\n<li>How to write <strong>clear, structured prompts</strong>\n</li>\n<li>How to chain models (RAG, agents, tools)</li>\n<li>How to call APIs like OpenAI, Claude, Gemini</li>\n</ul>\n\n<p>Learn this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Example: Use OpenAI API to summarize a repo\n</span><span class=\"kn\">import</span> <span class=\"n\">openai</span>\n\n<span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">your_key</span><span class=\"sh\">\"</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">ChatCompletion</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n  <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gpt-4o</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n  <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Summarize this repo: github.com/supabase/supabase</span><span class=\"sh\">\"</span><span class=\"p\">}]</span>\n<span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">choices</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">message</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">content</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n</code></pre>\n\n</div>\n\n\n<p>üìö Resource:<br>\n‚Üí <a href=\"https://docs.langchain.com/\" rel=\"noopener noreferrer\">LangChain Docs</a><br>\n‚Üí <a href=\"https://github.com/dair-ai/Prompt-Engineering-Guide\" rel=\"noopener noreferrer\">Prompt Engineering Guide</a></p>\n\n\n\n\n<div class=\"crayons-card c-embed text-styles text-styles--secondary\">\n      <div class=\"c-embed__cover\">\n        <a href=\"https://theinternetcafe.gumroad.com/l/ohvsty\" class=\"c-link s:max-w-50 align-middle\" rel=\"noopener noreferrer\">\n          <img alt=\"\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fpublic-files.gumroad.com%2Fj0j7h2phgm4of0evmn20y9ed5skx\" height=\"565\" class=\"m-0\" width=\"1005\">\n        </a>\n      </div>\n    <div class=\"c-embed__body\">\n      <h2 class=\"fs-xl lh-tight\">\n        <a href=\"https://theinternetcafe.gumroad.com/l/ohvsty\" rel=\"noopener noreferrer\" class=\"c-link\">\n          KeywordJet: The Google Keyword Scraper\n        </a>\n      </h2>\n        <p class=\"truncate-at-3\">\n          A fast, offline, no-login keyword scraping tool for creators, SEOs &amp;amp; marketers. Struggling to find content ideas, blog topics, or YouTube SEO keywords?Keyword Suggester Pro is a clean, offline desktop app that helps you generate hundreds of Google autocomplete keyword suggestions in seconds ‚Äî with no logins, no limits, and no bloat.Just enter a list of base keywords ‚Üí click start ‚Üí export to .txt, .json, or .csv. Done.‚ö° WHAT'S INCLUDED‚úÖ Fully offline desktop app ‚Äî no browser needed‚úÖ Export in .txt, .csv, .json formats‚úÖ Works fast ‚Äî scrapes 100s of suggestions in seconds‚úÖ Includes delay &amp;amp; real-time logging for safe use‚úÖ Lightweight and optimized ‚Äî no APIs, no keys, no Chrome neededüì¶ FILES INCLUDED üü¢ Windows .exe app (no Python needed) üü£ macOS .app version (drag-and-drop) üü° Linux executable binary üìÑ Setup README + usage guide üìÅ Bonus files (depending on tier) üî• PRICING OPTIONSüéØ Starter Pack ‚Äì $39 Perfect for personal use.‚úîÔ∏è Cross-platform executable app (Windows, Mac, Linux)‚úîÔ∏è README + quick-start setup‚úîÔ∏è Export tools included‚úîÔ∏è Lifetime access, use on 2 devicesüöÄ Growth Kit ‚Äì $49 Best for bloggers, SEOs, niche marketers.Everything in Starter Pack, plus:üìò \"SEO Goldmine Keywords\" guide (PDF)üí° \"50+ Side Hustles Using Keyword Tools\" (PDF)üìö Niche business idea list + tutorialüß© Idea-to-site walkthrough for niche buildersüíº Reseller Pro ‚Äì $99 For business owners &amp;amp; freelancers.Everything in Growth Kit, plus:üîì White-label license ‚Äî sell under your nameüîê Access to raw assets &amp;amp; editable designsüìÑ Licensing terms + client use includedüéÅ Bonus: Freelancing pitch templates (email &amp;amp; Fiverr)üí¨ FAQQ: Does this require an internet connection?üîπ Only to fetch suggestions ‚Äî otherwise it runs offline and saves locally.Q: Do I need Python installed?üîπ Nope. The app is fully prebuilt and runs as a native executable on your OS.Q: Can I use it commercially or resell it?üîπ Only with the Pro Reseller license ($99).üèÅ DOWNLOAD INSTANTLYOnce you complete your purchase, you‚Äôll receive a downloadable .zip that contains everything based on your selected tier.üîí No login required ‚Äî it‚Äôs yours for life.üíº One tool = multiple income opportunities.\n        </p>\n      <div class=\"color-secondary fs-s flex items-center\">\n          <img alt=\"favicon\" class=\"c-embed__favicon m-0 mr-2 radius-0\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fpublic-files.gumroad.com%2F1fwa8xsr9ni6eiac6tygaq1r4kvd\" width=\"128\" height=\"128\">\n        theinternetcafe.gumroad.com\n      </div>\n    </div>\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üß∞ 3. <strong>Master the Terminal &amp; Bash Automation</strong>\n</h2>\n\n<h3>\n  \n  \n  üß± Why it matters:\n</h3>\n\n<p>The fastest devs automate tasks in seconds‚Äîbuilds, deploys, file parsing, batch updates‚Äîusing just shell scripts and command-line tools.</p>\n\n<p>Learn:</p>\n\n<ul>\n<li>\n<code>awk</code>, <code>grep</code>, <code>sed</code>, <code>curl</code>, <code>jq</code>\n</li>\n<li>How to write reusable bash scripts</li>\n<li>How to set up CRON jobs</li>\n<li>SSH, port forwarding, rsync, tmux</li>\n</ul>\n\n<p>üìö Resource:<br>\n‚Üí <a href=\"https://explainshell.com/\" rel=\"noopener noreferrer\">Explainshell</a><br>\n‚Üí <a href=\"https://devhints.io/bash\" rel=\"noopener noreferrer\">Bash Scripting Cheatsheet</a></p>\n\n\n<h2>\n  \n  \n  üåê 4. <strong>How the Web <em>Actually</em> Works</strong>\n</h2>\n<h3>\n  \n  \n  üì° Why it matters:\n</h3>\n\n<p>Every dev touches the web. But not every dev <em>understands</em> it.</p>\n\n<p>Learn:</p>\n\n<ul>\n<li>What happens when you type a URL (DNS, TLS, CDN, browser engine)</li>\n<li>How to read HTTP headers and cookies</li>\n<li>CORS, CSRF, and SameSite flags</li>\n<li>Caching (CDNs, service workers, 304 Not Modified)</li>\n</ul>\n\n<p>üìö Resource:<br>\n‚Üí <a href=\"https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/\" rel=\"noopener noreferrer\">How Browsers Work</a><br>\n‚Üí <a href=\"https://httpstatuses.com/\" rel=\"noopener noreferrer\">HTTP Status Codes Guide</a></p>\n\n\n<h2>\n  \n  \n  üì¶ 5. <strong>APIs: Consuming, Building, and Securing</strong>\n</h2>\n<h3>\n  \n  \n  üß† Why it matters:\n</h3>\n\n<p>APIs are the glue of the modern internet. You‚Äôll spend half your dev life:</p>\n\n<ul>\n<li>Consuming APIs (Stripe, OpenAI, Notion)</li>\n<li>Building them (Express, FastAPI, tRPC)</li>\n<li>Securing them (JWTs, OAuth, rate limiting)</li>\n</ul>\n\n<p>Learn:</p>\n\n<ul>\n<li>REST vs GraphQL vs RPC</li>\n<li>How to structure error responses and version your API</li>\n<li>Rate limits, API keys, scopes</li>\n</ul>\n\n<p>üìö Resource:<br>\n‚Üí <a href=\"https://www.postman.com/explore\" rel=\"noopener noreferrer\">Postman Public Workspaces</a><br>\n‚Üí <a href=\"https://github.com/shieldfy/API-Security-Checklist\" rel=\"noopener noreferrer\">API Security Checklist</a></p>\n\n\n<h2>\n  \n  \n  üõ†Ô∏è 6. <strong>Understand Deployment, CI/CD &amp; DevOps Basics</strong>\n</h2>\n<h3>\n  \n  \n  üöÄ Why it matters:\n</h3>\n\n<p>If you can't ship, you can't succeed. Devs are now expected to:</p>\n\n<ul>\n<li>Deploy to Vercel, Netlify, or your own VPS</li>\n<li>Write GitHub Actions</li>\n<li>Use Docker to containerize apps</li>\n</ul>\n\n<p>Learn:</p>\n\n<ul>\n<li>How to write a Dockerfile</li>\n<li>How to run CI tests before pushing to prod</li>\n<li>How to rollback changes</li>\n</ul>\n\n<p>üìö Resource:<br>\n‚Üí <a href=\"https://docs.github.com/en/actions\" rel=\"noopener noreferrer\">GitHub Actions Docs</a><br>\n‚Üí <a href=\"https://www.youtube.com/watch?v=fqMOX6JJhGo\" rel=\"noopener noreferrer\">Docker for Devs (FreeCodeCamp)</a></p>\n\n\n<h2>\n  \n  \n  üîê 7. <strong>Security Hygiene Every Dev Should Know</strong>\n</h2>\n<h3>\n  \n  \n  üõ°Ô∏è Why it matters:\n</h3>\n\n<p>You might be the weakest link in your own app. Knowing basic security makes you:</p>\n\n<ul>\n<li>A better coder</li>\n<li>A better teammate</li>\n<li>A better builder of trust</li>\n</ul>\n\n<p>Learn:</p>\n\n<ul>\n<li>Hashing passwords (bcrypt, scrypt, Argon2)</li>\n<li>SQL injection protection</li>\n<li>Sanitizing inputs &amp; escaping output</li>\n<li>Secure headers (CSP, HSTS, XSS protection)</li>\n</ul>\n\n<p>üìö Resource:<br>\n‚Üí <a href=\"https://portswigger.net/web-security\" rel=\"noopener noreferrer\">Web Security Academy by PortSwigger</a><br>\n‚Üí <a href=\"https://cheatsheetseries.owasp.org/\" rel=\"noopener noreferrer\">OWASP Cheat Sheet Series</a></p>\n\n\n<h2>\n  \n  \n  üí∏ 8. <strong>How to Monetize What You Build</strong>\n</h2>\n<h3>\n  \n  \n  üí∞ Why it matters:\n</h3>\n\n<p>A dev who knows how to <em>ship AND sell</em> is unstoppable.</p>\n\n<p>Learn:</p>\n\n<ul>\n<li>How to integrate Stripe, Gumroad, or LemonSqueezy</li>\n<li>SEO basics for devs (meta tags, sitemap.xml, page speed)</li>\n<li>How to validate ideas with MVPs</li>\n</ul>\n\n<p>Bonus? Knowing how to build landing pages, email lists, and pricing tiers.</p>\n\n<p>üìö Resource:<br>\n‚Üí <a href=\"https://www.indiehackers.com/\" rel=\"noopener noreferrer\">Indie Hackers</a><br>\n‚Üí <a href=\"https://buildandlaunch.io\" rel=\"noopener noreferrer\">Traf‚Äôs Build &amp; Launch</a></p>\n\n\n<h2>\n  \n  \n  üßë‚Äçüíª 9. <strong>Get Fluent with AI-Powered Dev Tools</strong>\n</h2>\n<h3>\n  \n  \n  üîç Why it matters:\n</h3>\n\n<p>The future of development is <strong>AI-assisted</strong>, not AI-replaced.</p>\n\n<p>Learn how to:</p>\n\n<ul>\n<li>Use <strong>GitHub Copilot</strong> or <strong>CodeWhisperer</strong>\n</li>\n<li>Use <strong>cursor.sh</strong> or <strong>continue.dev</strong> for AI pair programming</li>\n<li>Turn your repo into a chatbot with <strong>LlamaIndex</strong>\n</li>\n</ul>\n\n<p>üìö Resource:<br>\n‚Üí <a href=\"https://githubnext.com/projects/copilot-labs\" rel=\"noopener noreferrer\">Copilot Labs</a><br>\n‚Üí <a href=\"https://www.cursor.so/\" rel=\"noopener noreferrer\">Cursor AI Editor</a></p>\n\n\n<h2>\n  \n  \n  üß© 10. <strong>Build End-to-End Real Projects</strong>\n</h2>\n<h3>\n  \n  \n  üéØ Why it matters:\n</h3>\n\n<p>You learn faster when you're <strong>solving problems</strong>, not just completing tutorials.</p>\n\n<p>Pick one of these:</p>\n\n<ul>\n<li>Build a Notion-style notes app with AI search</li>\n<li>Build a portfolio that recommends you via an LLM</li>\n<li>Build a newsletter aggregator with RSS + Supabase</li>\n<li>Build a SaaS that auto-generates reports from uploaded CSVs</li>\n</ul>\n\n<p>And don‚Äôt just <em>code</em> ‚Äî <strong>design the UX, deploy it, and share it publicly.</strong></p>\n\n\n<h2>\n  \n  \n  ‚úÖ TL;DR: The Ultimate 2026 Dev Checklist\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Skill</th>\n<th>Why Learn It</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Systems Thinking</td>\n<td>Build robust, scalable applications</td>\n</tr>\n<tr>\n<td>AI Prompting + LLM APIs</td>\n<td>Most apps will integrate AI in some way</td>\n</tr>\n<tr>\n<td>Terminal / Bash Automation</td>\n<td>Save hours, unlock power user mode</td>\n</tr>\n<tr>\n<td>Web Internals</td>\n<td>Debug and optimize like a pro</td>\n</tr>\n<tr>\n<td>API Design &amp; Security</td>\n<td>Every product is built around APIs</td>\n</tr>\n<tr>\n<td>Deployment &amp; CI/CD</td>\n<td>Autonomy to ship fast</td>\n</tr>\n<tr>\n<td>Security Hygiene</td>\n<td>Keep apps and users safe</td>\n</tr>\n<tr>\n<td>Monetization &amp; SEO</td>\n<td>Build profitable products</td>\n</tr>\n<tr>\n<td>AI Dev Tools</td>\n<td>Speed up development with smart assistants</td>\n</tr>\n<tr>\n<td>Real Projects</td>\n<td>Cement your skills + build a portfolio</td>\n</tr>\n</tbody>\n</table></div>\n\n\n<h2>\n  \n  \n  üî• Final Advice\n</h2>\n\n<p>You don‚Äôt need to know <em>everything</em>. You need to know:</p>\n\n<ul>\n<li><strong>How things work</strong></li>\n<li><strong>How to Google smartly</strong></li>\n<li><strong>How to build and ship repeatedly</strong></li>\n</ul>\n\n<blockquote>\n<p>‚ÄúCode is just the beginning. Context, shipping, and thinking clearly‚Äîthat‚Äôs the future of developers in 2026.‚Äù</p>\n</blockquote>\n\n\n\n\n<div class=\"crayons-card c-embed text-styles text-styles--secondary\">\n      <div class=\"c-embed__cover\">\n        <a href=\"https://theinternetcafe.gumroad.com/l/ohvsty\" class=\"c-link s:max-w-50 align-middle\" rel=\"noopener noreferrer\">\n          <img alt=\"\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fpublic-files.gumroad.com%2Fj0j7h2phgm4of0evmn20y9ed5skx\" height=\"565\" class=\"m-0\" width=\"1005\">\n        </a>\n      </div>\n    <div class=\"c-embed__body\">\n      <h2 class=\"fs-xl lh-tight\">\n        <a href=\"https://theinternetcafe.gumroad.com/l/ohvsty\" rel=\"noopener noreferrer\" class=\"c-link\">\n          KeywordJet: The Google Keyword Scraper\n        </a>\n      </h2>\n        <p class=\"truncate-at-3\">\n          A fast, offline, no-login keyword scraping tool for creators, SEOs &amp;amp; marketers. Struggling to find content ideas, blog topics, or YouTube SEO keywords?Keyword Suggester Pro is a clean, offline desktop app that helps you generate hundreds of Google autocomplete keyword suggestions in seconds ‚Äî with no logins, no limits, and no bloat.Just enter a list of base keywords ‚Üí click start ‚Üí export to .txt, .json, or .csv. Done.‚ö° WHAT'S INCLUDED‚úÖ Fully offline desktop app ‚Äî no browser needed‚úÖ Export in .txt, .csv, .json formats‚úÖ Works fast ‚Äî scrapes 100s of suggestions in seconds‚úÖ Includes delay &amp;amp; real-time logging for safe use‚úÖ Lightweight and optimized ‚Äî no APIs, no keys, no Chrome neededüì¶ FILES INCLUDED üü¢ Windows .exe app (no Python needed) üü£ macOS .app version (drag-and-drop) üü° Linux executable binary üìÑ Setup README + usage guide üìÅ Bonus files (depending on tier) üî• PRICING OPTIONSüéØ Starter Pack ‚Äì $39 Perfect for personal use.‚úîÔ∏è Cross-platform executable app (Windows, Mac, Linux)‚úîÔ∏è README + quick-start setup‚úîÔ∏è Export tools included‚úîÔ∏è Lifetime access, use on 2 devicesüöÄ Growth Kit ‚Äì $49 Best for bloggers, SEOs, niche marketers.Everything in Starter Pack, plus:üìò \"SEO Goldmine Keywords\" guide (PDF)üí° \"50+ Side Hustles Using Keyword Tools\" (PDF)üìö Niche business idea list + tutorialüß© Idea-to-site walkthrough for niche buildersüíº Reseller Pro ‚Äì $99 For business owners &amp;amp; freelancers.Everything in Growth Kit, plus:üîì White-label license ‚Äî sell under your nameüîê Access to raw assets &amp;amp; editable designsüìÑ Licensing terms + client use includedüéÅ Bonus: Freelancing pitch templates (email &amp;amp; Fiverr)üí¨ FAQQ: Does this require an internet connection?üîπ Only to fetch suggestions ‚Äî otherwise it runs offline and saves locally.Q: Do I need Python installed?üîπ Nope. The app is fully prebuilt and runs as a native executable on your OS.Q: Can I use it commercially or resell it?üîπ Only with the Pro Reseller license ($99).üèÅ DOWNLOAD INSTANTLYOnce you complete your purchase, you‚Äôll receive a downloadable .zip that contains everything based on your selected tier.üîí No login required ‚Äî it‚Äôs yours for life.üíº One tool = multiple income opportunities.\n        </p>\n      <div class=\"color-secondary fs-s flex items-center\">\n          <img alt=\"favicon\" class=\"c-embed__favicon m-0 mr-2 radius-0\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fpublic-files.gumroad.com%2F1fwa8xsr9ni6eiac6tygaq1r4kvd\" width=\"128\" height=\"128\">\n        theinternetcafe.gumroad.com\n      </div>\n    </div>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"im 15 and i just made my first python project!","url":"https://dev.to/kasper0990/im-15-and-i-just-made-my-first-python-project-2gab","date":1751132457,"author":"kasper","guid":174593,"unread":true,"content":"<h2>\n  \n  \n  hey! im kasper and i just made a simple tweeter in python.\n</h2>\n\n<p>my original idea was to create a tweet scheduler because i often use website blocks but still wanted to be able to tweet, but i figured out you need to run it 24/7 unless you use cron but i dont know how to do it. it so i would love anybody whos willing to help me out! </p>\n\n<p>here's the project if anyone is intrested about it, its quite simple because its my first time writing python (NOT AI) </p>\n\n<p><a href=\"https://github.com/KasPeR0990/tweet_schedule\" rel=\"noopener noreferrer\">Github link to project</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A simple screening agent with CrewAI","url":"https://dev.to/aws-builders/a-simple-screening-agent-with-crewai-539l","date":1751131574,"author":"Shakir","guid":174592,"unread":true,"content":"<p>Let's try a simple exercise with <a href=\"https://www.crewai.com/\" rel=\"noopener noreferrer\">CrewAI</a> with a single agent and task, that parses information it has from <a href=\"https://docs.aws.amazon.com/\" rel=\"noopener noreferrer\">AWS docs</a>, and prepares a list of questions that could be used for basic screening during interviews. Of course we can do this with chatgpt, gemini etc. with their UI, but having some sort of a code can also help, for repeatable tasks, and for further refining the logic and automation. Also, we shall look into some basic concepts of CrewAI such as agents, tasks, crew as we do this. Let's get started! üöÄ</p>\n\n<p>Initialize a project with <a href=\"https://pypi.org/project/uv/\" rel=\"noopener noreferrer\">uv</a> and switch directory.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>$ uv init screening_agent\n$ cd screening_agent/ \n\n$ ls -a\n.               ..              .git            .gitignore      .python-version main.py         pyproject.toml  README.md\n</code></pre>\n\n</div>\n\n\n\n<p>Setup a virtual environment and activate it.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>$ uv venv\n$ source .venv/bin/activate\n</code></pre>\n\n</div>\n\n\n\n<p>Add crewai as dependency and install it.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>$ cat pyproject.toml | grep dependencies\ndependencies = [\"crewai==0.134.0\"]\n\n$ uv lock\n\n$ uv sync  \n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  LLM\n</h2>\n\n<p>I am using <code>gemini/gemma-3n-e2b-it</code> for this exercise, the API key for which was obtained from <a href=\"https://aistudio.google.com/apikey\" rel=\"noopener noreferrer\">Google AI studio</a>. We need to setup <code>.env</code> file to hold the key.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>GOOGLE_API_KEY=&lt;Paste-your-key&gt;\n</code></pre>\n\n</div>\n\n\n\n<p>We can add the llm setup in a separate python file <code>llm.py</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">from</span> <span class=\"n\">crewai</span> <span class=\"kn\">import</span> <span class=\"n\">LLM</span>\n<span class=\"kn\">from</span> <span class=\"n\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span>\n\n<span class=\"nf\">load_dotenv</span><span class=\"p\">()</span>\n\n<span class=\"n\">llm</span> <span class=\"o\">=</span> <span class=\"nc\">LLM</span><span class=\"p\">(</span>\n    <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">gemini/gemma-3n-e2b-it</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">GOOGLE_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n    <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>\n<span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>So we have read the api key from <code>.env</code> file and passed it to the LLM.</p>\n\n<h2>\n  \n  \n  Agent\n</h2>\n\n<p>We can then define our agent in <code>agents.py</code>. We are using only one agent in this exercise to keep it simple.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>from crewai import Agent\nfrom llm import llm\n\nscreening_agent = Agent(\n    role=\"Screening Agent for AWS interviews\",\n    goal=\"Get content from AWS official documentation about the topics: {topics}\",\n    backstory=\"You will explore relevant links from AWS official documentation https://docs.aws.amazon.com/ about the topics: {topics}\"\n              \"Try as much as possible to gather links that have information about all the topics on the same webpage\"\n              \"You will then prepare a total of 10 questions and their answers\"\n              \"The number of questions to be evenly split among the topics as much as possible\"\n              \"The length of each question should be 1 line\"\n              \"The length of the answer should also be 1 line\"\n              \"Display numbering for the questions from 1 to 10\"\n              \"You also need to capture the link from which that question and answer was prepared\",\n    verbose=True,\n    llm=llm,\n)\n</code></pre>\n\n</div>\n\n\n\n<p>All in plain English, we are setting proper context with the role, goal and backstory arguments. We are setting verbose to see somewhat detailed output while we run the code, and then map the llm we defined in the previous agent. This means each agent can be mapped to a separate llm if required. Also, note that there is one parameter enclosed in curly braces <code>{topics}</code>, we will be passing this later as input when we initialize the crew.</p>\n\n<h2>\n  \n  \n  Task\n</h2>\n\n<p>Let's define our task in <code>tasks.py</code>, that will call the agent.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">crewai</span> <span class=\"kn\">import</span> <span class=\"n\">Task</span>\n<span class=\"kn\">from</span> <span class=\"n\">agents</span> <span class=\"kn\">import</span> <span class=\"n\">screening_agent</span>\n\n<span class=\"n\">screening_task</span> <span class=\"o\">=</span> <span class=\"nc\">Task</span><span class=\"p\">(</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Get key information about the topics: {topics}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Make the content understandable for non technical audience as well</span><span class=\"sh\">\"</span>\n        <span class=\"sh\">\"</span><span class=\"s\">As this task could be used by HR recruiters as well, for screening purposes</span><span class=\"sh\">\"</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">expected_output</span><span class=\"o\">=</span><span class=\"p\">(</span>\n        <span class=\"sh\">\"</span><span class=\"s\">There should be 10 sections in the output</span><span class=\"sh\">\"</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Each section should have Question:, Answer: and Reference Link:</span><span class=\"sh\">\"</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">agent</span><span class=\"o\">=</span><span class=\"n\">screening_agent</span>\n<span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Again in plain English, give appropriate context with the description and expected_output arguments. Note that <code>{topics}</code> is used here as well just like the agent.</p>\n\n<h2>\n  \n  \n  Crew\n</h2>\n\n<p>We finally have the starting point of our code in <code>main.py</code> where our crew will be defined. We need to map it with both the agents and tools. Note that we only have a single tool in this case, if there are more tools, those would be executed sequentially, by default.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">crewai</span> <span class=\"kn\">import</span> <span class=\"n\">Crew</span>\n<span class=\"kn\">from</span> <span class=\"n\">agents</span> <span class=\"kn\">import</span> <span class=\"n\">screening_agent</span>\n<span class=\"kn\">from</span> <span class=\"n\">tasks</span> <span class=\"kn\">import</span> <span class=\"n\">screening_task</span>\n<span class=\"kn\">from</span> <span class=\"n\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span>\n\n<span class=\"nf\">load_dotenv</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">crew</span> <span class=\"o\">=</span> <span class=\"nc\">Crew</span><span class=\"p\">(</span>\n        <span class=\"n\">agents</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">screening_agent</span><span class=\"p\">],</span>\n        <span class=\"n\">tasks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">screening_task</span><span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">topics_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Redshift, Glue, S3</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n    <span class=\"n\">topics</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">, </span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">topics_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">crew</span><span class=\"p\">.</span><span class=\"nf\">kickoff</span><span class=\"p\">(</span>\n        <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">topics</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">topics</span><span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">output.md</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">raw</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"nf\">main</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Note that in the crew kickoff method, we are passing topics as input which we saw was referred to in both agent and tool configuration. In the code above we are trying to pass the topics as <code>Redshift, Glue, S3</code> which would be passed to the task and then to the agent, to retreive the questions and answers, we need for screening, the output is finally saved in a markdown file mentioned. Let's try runnig it with <code>uv run main.py</code>.<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F0rd44e7qjfzhrpyk1sif.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F0rd44e7qjfzhrpyk1sif.png\" alt=\"Screenshot of cli output\" width=\"800\" height=\"336\"></a></p>\n\n<p>Here is a preview of the markdown generated.<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftqtmorbol094otk0ttuh.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftqtmorbol094otk0ttuh.png\" alt=\"Markdown preview\" width=\"800\" height=\"336\"></a></p>\n\n<p>So that's the end of this post, hope it was beginner friendly, and we just navigated some fundamentals of CrewAI, we could explore further on this such as passing the topics via user input, build multi tool based agents, add tools, mcp, rag and see options for integrating it with UI based tools for day to day use. Thank you for reading!!!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (4)","url":"https://dev.to/hyperkai/string-in-python-4-5e88","date":1751131547,"author":"Super Kai (Kazuya Ito)","guid":174591,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-1-3hg7\">My post</a> explains a string.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-2-1jhk\">My post</a> explains <a href=\"https://docs.python.org/3/library/functions.html#func-str\" rel=\"noopener noreferrer\">str()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-3-4o25\">My post</a> explains <a href=\"https://docs.python.org/3/library/stdtypes.html#str.encode\" rel=\"noopener noreferrer\">encode()</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.decode\" rel=\"noopener noreferrer\">decode()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-5-424j\">My post</a> explains <a href=\"https://docs.python.org/3/library/stdtypes.html#str.count\" rel=\"noopener noreferrer\">count()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.expandtabs\" rel=\"noopener noreferrer\">expandtabs()</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#str.zfill\" rel=\"noopener noreferrer\">zfill()</a>.</li>\n</ul>\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.upper\" rel=\"noopener noreferrer\">upper()</a> can  make a string uppercase for very caseless matching as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>It has no arguments.</li>\n<li>The German Alphabet <code>·∫û</code>(<code>√ü</code>) is used after a long vowel or dipthong, like in <code>Stra√üe</code> or <code>bei√üen</code>.</li>\n<li>The German Alphabets <code>SS</code>(<code>ss</code>) are used after a short vowel sound, like in <code>Fluss</code> or <code>Kuss</code>.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">hElLo WoRlD</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">())</span>\n<span class=\"c1\"># HELLO WORLD\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">√ü</span><span class=\"sh\">'</span> <span class=\"c1\"># Lowercase German Alphabet\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">())</span> <span class=\"c1\"># SS\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">·∫û</span><span class=\"sh\">'</span> <span class=\"c1\"># Uppercase German Alphabet\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">())</span> <span class=\"c1\"># ·∫û\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.lower\" rel=\"noopener noreferrer\">lower()</a> can  make a string lowercase for normal caseless matching as shown below. *It has no arguments.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">hElLo WoRlD</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">())</span>\n<span class=\"c1\"># hello world\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">√ü</span><span class=\"sh\">'</span> <span class=\"c1\"># Lowercase German Alphabet\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">())</span> <span class=\"c1\"># √ü\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">·∫û</span><span class=\"sh\">'</span> <span class=\"c1\"># Uppercase German Alphabet\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">())</span> <span class=\"c1\"># √ü\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.casefold\" rel=\"noopener noreferrer\">casefold()</a> can make a string lowercase for very caseless matching as shown below. *It has no arguments:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">hElLo WoRlD</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">casefold</span><span class=\"p\">())</span>\n<span class=\"c1\"># hello world\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">√ü</span><span class=\"sh\">'</span> <span class=\"c1\"># Lowercase German Alphabet\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">casefold</span><span class=\"p\">())</span> <span class=\"c1\"># ss\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">·∫û</span><span class=\"sh\">'</span> <span class=\"c1\"># Uppercase German Alphabet\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">casefold</span><span class=\"p\">())</span> <span class=\"c1\"># ss\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.swapcase\" rel=\"noopener noreferrer\">swapcase()</a> can swap the case of each character of a string from uppercase to lowercase and from lowercase to uppercasee as shown below. *It has no arguments:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">hElLo WoRlD</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">swapcase</span><span class=\"p\">())</span> <span class=\"c1\"># HeLlO wOrLd\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">√ü</span><span class=\"sh\">'</span> <span class=\"c1\"># Lowercase German Alphabet\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">swapcase</span><span class=\"p\">())</span> <span class=\"c1\"># SS\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">·∫û</span><span class=\"sh\">'</span> <span class=\"c1\"># Uppercase German Alphabet\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">swapcase</span><span class=\"p\">())</span> <span class=\"c1\"># √ü\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.title\" rel=\"noopener noreferrer\">title()</a> can make a string titlecased as shown below. *It has no arguments:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">hElLo WoRlD</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">title</span><span class=\"p\">())</span> <span class=\"c1\"># Hello World\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">√ü</span><span class=\"sh\">'</span> <span class=\"c1\"># Lowercase German Alphabet\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">title</span><span class=\"p\">())</span> <span class=\"c1\"># Ss\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">·∫û</span><span class=\"sh\">'</span> <span class=\"c1\"># Uppercase German Alphabet\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">title</span><span class=\"p\">())</span> <span class=\"c1\"># ·∫û\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.capitalize\" rel=\"noopener noreferrer\">capitalize()</a> can capitalize a string as shown below. *It has no arguments:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">hello world</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">capitalize</span><span class=\"p\">())</span>\n<span class=\"c1\"># Hello world\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.isupper\" rel=\"noopener noreferrer\">isupper()</a> can check if every character of a string is uppercase as shown below. *It has no arguments:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">PYTHON 3</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">isupper</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">PYtHON 3</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">isupper</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.islower\" rel=\"noopener noreferrer\">islower()</a> can check if every character of a string is lowercase as shown below. *It has no arguments:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">python 3</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">islower</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">pyThon 3</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">islower</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.istitle\" rel=\"noopener noreferrer\">istitle()</a> can check if a string is titlecased as shown below. *It has no arguments:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Python3</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">istitle</span><span class=\"p\">())</span>    <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Python 3</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">istitle</span><span class=\"p\">())</span>   <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">John Smith</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">istitle</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Johnsmith</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">istitle</span><span class=\"p\">())</span>  <span class=\"c1\"># True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">JohnSmith</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">istitle</span><span class=\"p\">())</span>  <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">John smith</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">istitle</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">john Smith</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">istitle</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">JohN SmitH</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">istitle</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Code Smell 305 - Null Infinity","url":"https://dev.to/mcsee/code-smell-305-null-infinity-196i","date":1751130721,"author":"Maxi Contieri","guid":174590,"unread":true,"content":"<p><em>To infinity but not beyond</em></p>\n\n<blockquote>\n<p>TL;DR: Use <em>Infinity</em> instead of <em>None</em> when looking for minimums</p>\n</blockquote>\n\n<h1>\n  \n  \n  Problems üòî\n</h1>\n\n<ul>\n<li><a href=\"https://dev.to/mcsee/how-to-get-rid-of-annoying-ifs-forever-1jfg\">Accidental IFs</a></li>\n<li>Wrong default</li>\n<li>Bad <a href=\"https://dev.to/mcsee/code-smell-102-arrow-code-4kfk\">polymorphism</a>\n</li>\n<li>Extra conditions</li>\n<li>Hidden initialization</li>\n<li>Wrong domain <a href=\"https://dev.to/mcsee/what-is-wrong-with-software-5pa\">mapping</a>\n</li>\n<li>Misleading behavior</li>\n<li>Unnecessary conditionals</li>\n<li>Complex logic</li>\n<li><a href=\"https://dev.to/mcsee/code-smell-12-null-la4\">Null checks</a></li>\n<li>Error-prone code</li>\n</ul>\n\n<h1>\n  \n  \n  Solutions üòÉ\n</h1>\n\n<ol>\n<li>Remove the <a href=\"https://dev.to/mcsee/refactoring-014-remove-if-jd\">Accidental IFs</a>\n</li>\n<li>Use <em>infinite value</em> (If your language supports it)</li>\n<li>Remove <em>None check</em>\n</li>\n<li>Respect <a href=\"https://dev.to/mcsee/the-one-and-only-software-design-principle-3086\">math semantics</a>  and consistency</li>\n<li>Apply the <a href=\"https://dev.to/mcsee/refactoring-015-remove-null-13jl\">null object</a> pattern</li>\n<li>Reduce boilerplate, simplifying your code</li>\n<li>Use float('inf') as base case for minimums ‚ôæÔ∏è</li>\n<li>Use float('-inf') as base case for maximums -‚ôæÔ∏è</li>\n<li>Remove conditional branches</li>\n</ol>\n\n<h1>\n  \n  \n  Refactorings ‚öôÔ∏è\n</h1>\n\n\n<div class=\"ltag__link\">\n  <a href=\"/mcsee\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F366059%2F1d8942bc-727d-4d1e-bc50-30ff073a34fc.jpeg\" alt=\"mcsee\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/mcsee/refactoring-014-remove-if-jd\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>Refactoring 014 - Remove IF</h2>\n      <h3>Maxi Contieri „Éª Jul 5 '24</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#webdev</span>\n        <span class=\"ltag__link__tag\">#beginners</span>\n        <span class=\"ltag__link__tag\">#programming</span>\n        <span class=\"ltag__link__tag\">#java</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n\n<div class=\"ltag__link\">\n  <a href=\"/mcsee\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F366059%2F1d8942bc-727d-4d1e-bc50-30ff073a34fc.jpeg\" alt=\"mcsee\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/mcsee/refactoring-015-remove-null-13jl\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>Refactoring 015 - Remove NULL</h2>\n      <h3>Maxi Contieri „Éª Jul 28 '24</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#webdev</span>\n        <span class=\"ltag__link__tag\">#beginners</span>\n        <span class=\"ltag__link__tag\">#java</span>\n        <span class=\"ltag__link__tag\">#programming</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n<h1>\n  \n  \n  Context üí¨\n</h1>\n\n<h2>\n  \n  \n  Problem 1:\n</h2>\n\n<p>You want to find the greatest number in a list of positive numbers.</p>\n\n<p>You start with 0 and compare.</p>\n\n<p>An amazing <a href=\"https://dev.to/mcsee/null-the-billion-dollar-mistake-1h1c\">Null Object</a>. No Accidental IFs involved. Clean code. üëå</p>\n\n<h2>\n  \n  \n  Problem 2:\n</h2>\n\n<p>You want to find the lowest number in a list.</p>\n\n<p>Most beginners start with <em>None</em> and check \"if current is <em>None</em> or x &lt; current\".</p>\n\n<p>You don‚Äôt need that.</p>\n\n<p>You can start with <em>float(\"inf\")</em> ‚ôæÔ∏è.</p>\n\n<p>It <a href=\"https://dev.to/mcsee/code-smell-125-is-a-relationship-46f4\">behaves-as-a</a> a number.</p>\n\n<p>You can compare, sort, and minimize it.</p>\n\n<p>This gives you simpler logic and <strong>polymorphic</strong> code.</p>\n\n<p>The holy grail of behavior.</p>\n\n<p>Polymorphism is the deadliest enemy of accidental IFs.</p>\n\n\n<div class=\"ltag__link\">\n  <a href=\"/mcsee\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F366059%2F1d8942bc-727d-4d1e-bc50-30ff073a34fc.jpeg\" alt=\"mcsee\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/mcsee/how-to-get-rid-of-annoying-ifs-forever-1jfg\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>How to Get Rid of Annoying IFs¬†Forever</h2>\n      <h3>Maxi Contieri „Éª Nov 9 '20</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#oop</span>\n        <span class=\"ltag__link__tag\">#programming</span>\n        <span class=\"ltag__link__tag\">#codenewbie</span>\n        <span class=\"ltag__link__tag\">#tutorial</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n<h1>\n  \n  \n  Sample Code üìñ\n</h1>\n\n<h2>\n  \n  \n  Wrong ‚ùå\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">find_minimum_price</span><span class=\"p\">(</span><span class=\"n\">products</span><span class=\"p\">):</span>\n    <span class=\"n\">min_price</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">product</span> <span class=\"ow\">in</span> <span class=\"n\">products</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">min_price</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">min_price</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"n\">price</span>\n        <span class=\"k\">elif</span> <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"n\">price</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_price</span><span class=\"p\">:</span>\n            <span class=\"n\">min_price</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"n\">price</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">min_price</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_minimum_in_list</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n    <span class=\"n\">minimum</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">minimum</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span> <span class=\"ow\">or</span> <span class=\"n\">number</span> <span class=\"o\">&lt;</span> <span class=\"n\">minimum</span><span class=\"p\">:</span>\n            <span class=\"n\">minimum</span> <span class=\"o\">=</span> <span class=\"n\">number</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">minimum</span>\n\n<span class=\"c1\"># Usage leads to more None checks\n</span><span class=\"n\">prices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">10.5</span><span class=\"p\">,</span> <span class=\"mf\">8.2</span><span class=\"p\">,</span> <span class=\"mf\">15.0</span><span class=\"p\">,</span> <span class=\"mf\">7.8</span><span class=\"p\">]</span>\n<span class=\"n\">min_price</span> <span class=\"o\">=</span> <span class=\"nf\">find_minimum_in_list</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">min_price</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Minimum price: $</span><span class=\"si\">{</span><span class=\"n\">min_price</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">No prices found</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n<h2>\n  \n  \n  Right üëâ\n</h2>\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">find_minimum_price</span><span class=\"p\">(</span><span class=\"n\">products</span><span class=\"p\">):</span>\n    <span class=\"n\">min_price</span> <span class=\"o\">=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">inf</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">product</span> <span class=\"ow\">in</span> <span class=\"n\">products</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"n\">price</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_price</span><span class=\"p\">:</span>\n            <span class=\"c1\"># This is an essential IF, you should not remove it\n</span>            <span class=\"n\">min_price</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"n\">price</span>\n            <span class=\"c1\"># No accidental IF here (if min_price is None:)\n</span>\n    <span class=\"k\">return</span> <span class=\"n\">min_price</span> <span class=\"k\">if</span> <span class=\"n\">min_price</span> <span class=\"o\">!=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">inf</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"bp\">None</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_minimum_in_list</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n    <span class=\"n\">minimum</span> <span class=\"o\">=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">inf</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&lt;</span> <span class=\"n\">minimum</span><span class=\"p\">:</span>\n            <span class=\"n\">minimum</span> <span class=\"o\">=</span> <span class=\"n\">number</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">minimum</span> <span class=\"k\">if</span> <span class=\"n\">minimum</span> <span class=\"o\">!=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">inf</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"bp\">None</span>\n\n<span class=\"c1\"># Cleaner usage - polymorphic behavior\n</span><span class=\"n\">prices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">10.5</span><span class=\"p\">,</span> <span class=\"mf\">8.2</span><span class=\"p\">,</span> <span class=\"mf\">15.0</span><span class=\"p\">,</span> <span class=\"mf\">7.8</span><span class=\"p\">]</span>\n<span class=\"n\">min_price</span> <span class=\"o\">=</span> <span class=\"nf\">find_minimum_in_list</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Minimum price: $</span><span class=\"si\">{</span><span class=\"n\">min_price</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n<h1>\n  \n  \n  Detection üîç\n</h1>\n\n<p>[X] Semi-Automatic</p>\n\n<p>You can grep your codebase for <em>None</em> inside loops.</p>\n\n<p>If you check against <em>None</em> before comparing values, you probably can <em>smell</em> it.</p>\n<h1>\n  \n  \n  Tags üè∑Ô∏è\n</h1>\n\n<ul>\n<li>Null</li>\n</ul>\n<h1>\n  \n  \n  Level üîã\n</h1>\n\n<p>[X] Beginner</p>\n<h1>\n  \n  \n  Why the Bijection Is Important üó∫Ô∏è\n</h1>\n\n<p>In math, the identity element for finding a minimum is positive infinity. ‚ôæÔ∏è</p>\n\n<p>When you use <em>None</em>, you break the <a href=\"https://dev.to/mcsee/what-is-wrong-with-software-5pa\">MAPPER</a></p>\n\n<p>None <strong>is not</strong> a number.</p>\n\n<p>It does not behave as a number; it is not polymorphic with numbers.</p>\n\n<p>It is evil <em>Null</em> disguised as <em>None</em>.</p>\n\n<p>You must then write special code to treat it.</p>\n\n<p>That breaks the <a href=\"https://dev.to/mcsee/the-one-and-only-software-design-principle-3086\">bijection</a> between your code and math.</p>\n\n<p>When you use float(\"inf\"), you stay close to the real concept.</p>\n\n<p>The code models the domain truthfully.</p>\n<h1>\n  \n  \n  AI Generation ü§ñ\n</h1>\n\n<p>AI models that generate loops often use <em>None</em> as the starting point.</p>\n\n<p>They may include unnecessary checks.</p>\n\n<p>This typically occurs when the model attempts to mimic tutorials or is trained with bad code or overly simplified examples.</p>\n<h1>\n  \n  \n  AI Detection üß≤\n</h1>\n\n<p>AI can easily detect and fix this issue when you provide clear instructions.</p>\n\n<p>For example</p>\n\n<blockquote>\n<p>Use <em>Infinity</em> for minimum search initialization</p>\n</blockquote>\n\n<p>or</p>\n\n<blockquote>\n<p>Apply the null object pattern for mathematical operations.</p>\n</blockquote>\n<h2>\n  \n  \n  Try Them! üõ†\n</h2>\n\n<p><em>Remember: AI Assistants make lots of mistakes</em></p>\n\n<blockquote>\n<p>Suggested Prompt: Use Infinity for minimum search initialization</p>\n</blockquote>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Without Proper Instructions</th>\n<th>With Specific Instructions</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://chat.openai.com/?q=Correct+and+explain+this+code%3A+%60%60%60python%0D%0Adef+find_minimum_price%28products%29%3A%0D%0A++++min_price+%3D+None%0D%0A++++%0D%0A++++for+product+in+products%3A%0D%0A++++++++if+min_price+is+None%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++++++elif+product.price+%3C+min_price%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++%0D%0A++++return+min_price%0D%0A%0D%0Adef+find_minimum_in_list%28numbers%29%3A%0D%0A++++if+not+numbers%3A%0D%0A++++++++return+None%0D%0A++++%0D%0A++++minimum+%3D+None%0D%0A++++for+number+in+numbers%3A%0D%0A++++++++if+minimum+is+None+or+number+%3C+minimum%3A%0D%0A++++++++++++minimum+%3D+number%0D%0A++++%0D%0A++++return+minimum%0D%0A%0D%0A%23+Usage+leads+to+more+None+checks%0D%0Aprices+%3D+%5B10.5%2C+8.2%2C+15.0%2C+7.8%5D%0D%0Amin_price+%3D+find_minimum_in_list%28prices%29%0D%0Aif+min_price+is+not+None%3A%0D%0A++++print%28f%22Minimum+price%3A+%24%7Bmin_price%7D%22%29%0D%0Aelse%3A%0D%0A++++print%28%22No+prices+found%22%29%0D%0A%60%60%60\" rel=\"noopener noreferrer\">ChatGPT</a></td>\n<td><a href=\"https://chat.openai.com/?q=Use+Infinity+for+minimum+search+initialization%3A+%60%60%60python%0D%0Adef+find_minimum_price%28products%29%3A%0D%0A++++min_price+%3D+None%0D%0A++++%0D%0A++++for+product+in+products%3A%0D%0A++++++++if+min_price+is+None%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++++++elif+product.price+%3C+min_price%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++%0D%0A++++return+min_price%0D%0A%0D%0Adef+find_minimum_in_list%28numbers%29%3A%0D%0A++++if+not+numbers%3A%0D%0A++++++++return+None%0D%0A++++%0D%0A++++minimum+%3D+None%0D%0A++++for+number+in+numbers%3A%0D%0A++++++++if+minimum+is+None+or+number+%3C+minimum%3A%0D%0A++++++++++++minimum+%3D+number%0D%0A++++%0D%0A++++return+minimum%0D%0A%0D%0A%23+Usage+leads+to+more+None+checks%0D%0Aprices+%3D+%5B10.5%2C+8.2%2C+15.0%2C+7.8%5D%0D%0Amin_price+%3D+find_minimum_in_list%28prices%29%0D%0Aif+min_price+is+not+None%3A%0D%0A++++print%28f%22Minimum+price%3A+%24%7Bmin_price%7D%22%29%0D%0Aelse%3A%0D%0A++++print%28%22No+prices+found%22%29%0D%0A%60%60%60\" rel=\"noopener noreferrer\">ChatGPT</a></td>\n</tr>\n<tr>\n<td><a href=\"https://claude.ai/new?q=Correct+and+explain+this+code%3A+%60%60%60python%0D%0Adef+find_minimum_price%28products%29%3A%0D%0A++++min_price+%3D+None%0D%0A++++%0D%0A++++for+product+in+products%3A%0D%0A++++++++if+min_price+is+None%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++++++elif+product.price+%3C+min_price%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++%0D%0A++++return+min_price%0D%0A%0D%0Adef+find_minimum_in_list%28numbers%29%3A%0D%0A++++if+not+numbers%3A%0D%0A++++++++return+None%0D%0A++++%0D%0A++++minimum+%3D+None%0D%0A++++for+number+in+numbers%3A%0D%0A++++++++if+minimum+is+None+or+number+%3C+minimum%3A%0D%0A++++++++++++minimum+%3D+number%0D%0A++++%0D%0A++++return+minimum%0D%0A%0D%0A%23+Usage+leads+to+more+None+checks%0D%0Aprices+%3D+%5B10.5%2C+8.2%2C+15.0%2C+7.8%5D%0D%0Amin_price+%3D+find_minimum_in_list%28prices%29%0D%0Aif+min_price+is+not+None%3A%0D%0A++++print%28f%22Minimum+price%3A+%24%7Bmin_price%7D%22%29%0D%0Aelse%3A%0D%0A++++print%28%22No+prices+found%22%29%0D%0A%60%60%60\" rel=\"noopener noreferrer\">Claude</a></td>\n<td><a href=\"https://claude.ai/new?q=Use+Infinity+for+minimum+search+initialization%3A+%60%60%60python%0D%0Adef+find_minimum_price%28products%29%3A%0D%0A++++min_price+%3D+None%0D%0A++++%0D%0A++++for+product+in+products%3A%0D%0A++++++++if+min_price+is+None%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++++++elif+product.price+%3C+min_price%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++%0D%0A++++return+min_price%0D%0A%0D%0Adef+find_minimum_in_list%28numbers%29%3A%0D%0A++++if+not+numbers%3A%0D%0A++++++++return+None%0D%0A++++%0D%0A++++minimum+%3D+None%0D%0A++++for+number+in+numbers%3A%0D%0A++++++++if+minimum+is+None+or+number+%3C+minimum%3A%0D%0A++++++++++++minimum+%3D+number%0D%0A++++%0D%0A++++return+minimum%0D%0A%0D%0A%23+Usage+leads+to+more+None+checks%0D%0Aprices+%3D+%5B10.5%2C+8.2%2C+15.0%2C+7.8%5D%0D%0Amin_price+%3D+find_minimum_in_list%28prices%29%0D%0Aif+min_price+is+not+None%3A%0D%0A++++print%28f%22Minimum+price%3A+%24%7Bmin_price%7D%22%29%0D%0Aelse%3A%0D%0A++++print%28%22No+prices+found%22%29%0D%0A%60%60%60\" rel=\"noopener noreferrer\">Claude</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.perplexity.ai/?q=Correct+and+explain+this+code%3A+%60%60%60python%0D%0Adef+find_minimum_price%28products%29%3A%0D%0A++++min_price+%3D+None%0D%0A++++%0D%0A++++for+product+in+products%3A%0D%0A++++++++if+min_price+is+None%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++++++elif+product.price+%3C+min_price%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++%0D%0A++++return+min_price%0D%0A%0D%0Adef+find_minimum_in_list%28numbers%29%3A%0D%0A++++if+not+numbers%3A%0D%0A++++++++return+None%0D%0A++++%0D%0A++++minimum+%3D+None%0D%0A++++for+number+in+numbers%3A%0D%0A++++++++if+minimum+is+None+or+number+%3C+minimum%3A%0D%0A++++++++++++minimum+%3D+number%0D%0A++++%0D%0A++++return+minimum%0D%0A%0D%0A%23+Usage+leads+to+more+None+checks%0D%0Aprices+%3D+%5B10.5%2C+8.2%2C+15.0%2C+7.8%5D%0D%0Amin_price+%3D+find_minimum_in_list%28prices%29%0D%0Aif+min_price+is+not+None%3A%0D%0A++++print%28f%22Minimum+price%3A+%24%7Bmin_price%7D%22%29%0D%0Aelse%3A%0D%0A++++print%28%22No+prices+found%22%29%0D%0A%60%60%60\" rel=\"noopener noreferrer\">Perplexity</a></td>\n<td><a href=\"https://www.perplexity.ai/?q=Use+Infinity+for+minimum+search+initialization%3A+%60%60%60python%0D%0Adef+find_minimum_price%28products%29%3A%0D%0A++++min_price+%3D+None%0D%0A++++%0D%0A++++for+product+in+products%3A%0D%0A++++++++if+min_price+is+None%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++++++elif+product.price+%3C+min_price%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++%0D%0A++++return+min_price%0D%0A%0D%0Adef+find_minimum_in_list%28numbers%29%3A%0D%0A++++if+not+numbers%3A%0D%0A++++++++return+None%0D%0A++++%0D%0A++++minimum+%3D+None%0D%0A++++for+number+in+numbers%3A%0D%0A++++++++if+minimum+is+None+or+number+%3C+minimum%3A%0D%0A++++++++++++minimum+%3D+number%0D%0A++++%0D%0A++++return+minimum%0D%0A%0D%0A%23+Usage+leads+to+more+None+checks%0D%0Aprices+%3D+%5B10.5%2C+8.2%2C+15.0%2C+7.8%5D%0D%0Amin_price+%3D+find_minimum_in_list%28prices%29%0D%0Aif+min_price+is+not+None%3A%0D%0A++++print%28f%22Minimum+price%3A+%24%7Bmin_price%7D%22%29%0D%0Aelse%3A%0D%0A++++print%28%22No+prices+found%22%29%0D%0A%60%60%60\" rel=\"noopener noreferrer\">Perplexity</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.bing.com/chat?showconv=1&amp;sendquery=1&amp;q=Correct+and+explain+this+code%3A+%60%60%60python%0D%0Adef+find_minimum_price%28products%29%3A%0D%0A++++min_price+%3D+None%0D%0A++++%0D%0A++++for+product+in+products%3A%0D%0A++++++++if+min_price+is+None%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++++++elif+product.price+%3C+min_price%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++%0D%0A++++return+min_price%0D%0A%0D%0Adef+find_minimum_in_list%28numbers%29%3A%0D%0A++++if+not+numbers%3A%0D%0A++++++++return+None%0D%0A++++%0D%0A++++minimum+%3D+None%0D%0A++++for+number+in+numbers%3A%0D%0A++++++++if+minimum+is+None+or+number+%3C+minimum%3A%0D%0A++++++++++++minimum+%3D+number%0D%0A++++%0D%0A++++return+minimum%0D%0A%0D%0A%23+Usage+leads+to+more+None+checks%0D%0Aprices+%3D+%5B10.5%2C+8.2%2C+15.0%2C+7.8%5D%0D%0Amin_price+%3D+find_minimum_in_list%28prices%29%0D%0Aif+min_price+is+not+None%3A%0D%0A++++print%28f%22Minimum+price%3A+%24%7Bmin_price%7D%22%29%0D%0Aelse%3A%0D%0A++++print%28%22No+prices+found%22%29%0D%0A%60%60%60\" rel=\"noopener noreferrer\">Copilot</a></td>\n<td><a href=\"https://www.bing.com/chat?showconv=1&amp;sendquery=1&amp;q=Use+Infinity+for+minimum+search+initialization%3A+%60%60%60python%0D%0Adef+find_minimum_price%28products%29%3A%0D%0A++++min_price+%3D+None%0D%0A++++%0D%0A++++for+product+in+products%3A%0D%0A++++++++if+min_price+is+None%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++++++elif+product.price+%3C+min_price%3A%0D%0A++++++++++++min_price+%3D+product.price%0D%0A++++%0D%0A++++return+min_price%0D%0A%0D%0Adef+find_minimum_in_list%28numbers%29%3A%0D%0A++++if+not+numbers%3A%0D%0A++++++++return+None%0D%0A++++%0D%0A++++minimum+%3D+None%0D%0A++++for+number+in+numbers%3A%0D%0A++++++++if+minimum+is+None+or+number+%3C+minimum%3A%0D%0A++++++++++++minimum+%3D+number%0D%0A++++%0D%0A++++return+minimum%0D%0A%0D%0A%23+Usage+leads+to+more+None+checks%0D%0Aprices+%3D+%5B10.5%2C+8.2%2C+15.0%2C+7.8%5D%0D%0Amin_price+%3D+find_minimum_in_list%28prices%29%0D%0Aif+min_price+is+not+None%3A%0D%0A++++print%28f%22Minimum+price%3A+%24%7Bmin_price%7D%22%29%0D%0Aelse%3A%0D%0A++++print%28%22No+prices+found%22%29%0D%0A%60%60%60\" rel=\"noopener noreferrer\">Copilot</a></td>\n</tr>\n<tr>\n<td><a href=\"https://gemini.google.com/\" rel=\"noopener noreferrer\">Gemini</a></td>\n<td><a href=\"https://gemini.google.com/\" rel=\"noopener noreferrer\">Gemini</a></td>\n</tr>\n<tr>\n<td><a href=\"https://chat.deepseek.com/\" rel=\"noopener noreferrer\">DeepSeek</a></td>\n<td><a href=\"https://chat.deepseek.com/\" rel=\"noopener noreferrer\">DeepSeek</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.meta.ai/chat\" rel=\"noopener noreferrer\">Meta AI</a></td>\n<td><a href=\"https://www.meta.ai/\" rel=\"noopener noreferrer\">Meta AI</a></td>\n</tr>\n<tr>\n<td><a href=\"https://grok.com/\" rel=\"noopener noreferrer\">Grok</a></td>\n<td><a href=\"https://grok.com/\" rel=\"noopener noreferrer\">Grok</a></td>\n</tr>\n<tr>\n<td><a href=\"https://chat.qwen.ai/\" rel=\"noopener noreferrer\">Qwen</a></td>\n<td><a href=\"https://chat.qwen.ai/\" rel=\"noopener noreferrer\">Qwen</a></td>\n</tr>\n</tbody>\n</table></div>\n<h1>\n  \n  \n  Conclusion üèÅ\n</h1>\n\n<p>Zero is not the default for everything.</p>\n\n<p>When you want to find a minimum, you should start at infinity.</p>\n\n<p>This clarifies your code, removes conditionals, and provides a better mathematical <a href=\"https://dev.to/mcsee/the-one-and-only-software-design-principle-3086\">bijection</a> to math.</p>\n\n<p>Stop treating <em>None</em> like a number. <em>None</em> is <em>Null</em>. And <em>Null</em> is <a href=\"https://dev.to/mcsee/null-the-billion-dollar-mistake-1h1c\">bad</a>.</p>\n\n<p>Infinity is polymorphic and is the <a href=\"https://dev.to/mcsee/code-smell-126-fake-null-object-508\">null object for maximum math operations</a></p>\n\n<p>Use it.</p>\n<h1>\n  \n  \n  Relations üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®\n</h1>\n\n\n<div class=\"ltag__link\">\n  <a href=\"/mcsee\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F366059%2F1d8942bc-727d-4d1e-bc50-30ff073a34fc.jpeg\" alt=\"mcsee\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/mcsee/code-smell-125-is-a-relationship-46f4\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>Code Smell 125 - 'IS-A' Relationship</h2>\n      <h3>Maxi Contieri „Éª Mar 26 '22</h3>\n      <div class=\"ltag__link__taglist\">\n      </div>\n    </div>\n  </a>\n</div>\n\n\n\n\n<div class=\"ltag__link\">\n  <a href=\"/mcsee\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F366059%2F1d8942bc-727d-4d1e-bc50-30ff073a34fc.jpeg\" alt=\"mcsee\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/mcsee/code-smell-126-fake-null-object-508\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>Code Smell 126 - Fake Null Object</h2>\n      <h3>Maxi Contieri „Éª Apr 2 '22</h3>\n      <div class=\"ltag__link__taglist\">\n      </div>\n    </div>\n  </a>\n</div>\n\n\n\n<div class=\"ltag__link\">\n  <a href=\"/mcsee\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F366059%2F1d8942bc-727d-4d1e-bc50-30ff073a34fc.jpeg\" alt=\"mcsee\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/mcsee/code-smell-12-null-la4\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>Code Smell 12 - Null</h2>\n      <h3>Maxi Contieri „Éª Oct 31 '20</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#codenewbie</span>\n        <span class=\"ltag__link__tag\">#tutorial</span>\n        <span class=\"ltag__link__tag\">#oop</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n<h1>\n  \n  \n  More Information üìï\n</h1>\n\n<p><a href=\"https://dev.to/mcsee/how-to-get-rid-of-annoying-ifs-forever-1jfg\">How to Get Rid of Annoying IFs</a></p>\n\n\n<div class=\"ltag__link\">\n  <a href=\"/mcsee\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F366059%2F1d8942bc-727d-4d1e-bc50-30ff073a34fc.jpeg\" alt=\"mcsee\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/mcsee/null-the-billion-dollar-mistake-1h1c\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>Null: The Billion dollar mistake</h2>\n      <h3>Maxi Contieri „Éª Nov 18 '20</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#codenewbie</span>\n        <span class=\"ltag__link__tag\">#tutorial</span>\n        <span class=\"ltag__link__tag\">#programming</span>\n        <span class=\"ltag__link__tag\">#webdev</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n<h1>\n  \n  \n  Disclaimer üìò\n</h1>\n\n<p>Code Smells are my <a href=\"https://dev.to/mcsee/i-wrote-more-than-90-articles-on-2021-here-is-what-i-learned-1n3a\">opinion</a>.</p>\n\n<h1>\n  \n  \n  Credits üôè\n</h1>\n\n<p>Photo by <a href=\"https://unsplash.com/@cris024\" rel=\"noopener noreferrer\">Cris Baron</a> on <a href=\"https://unsplash.com/photos/a-couple-of-people-standing-next-to-each-other-in-the-dark-A18Ub2FbMlE\" rel=\"noopener noreferrer\">Unsplash</a></p>\n\n\n\n\n<blockquote>\n<p>Code should model the problem, not the solution</p>\n</blockquote>\n\n<p><em>Rich Hickey</em></p>\n\n\n<div class=\"ltag__link\">\n  <a href=\"/mcsee\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F366059%2F1d8942bc-727d-4d1e-bc50-30ff073a34fc.jpeg\" alt=\"mcsee\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/mcsee/software-engineering-great-quotes-26ci\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>Software Engineering Great Quotes</h2>\n      <h3>Maxi Contieri „Éª Dec 28 '20</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#codenewbie</span>\n        <span class=\"ltag__link__tag\">#programming</span>\n        <span class=\"ltag__link__tag\">#quotes</span>\n        <span class=\"ltag__link__tag\">#software</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n\n\n\n<p>This article is part of the CodeSmell Series.</p>\n\n\n<div class=\"ltag__link\">\n  <a href=\"/mcsee\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F366059%2F1d8942bc-727d-4d1e-bc50-30ff073a34fc.jpeg\" alt=\"mcsee\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/mcsee/how-to-find-the-stinky-parts-of-your-code-1dbc\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>How to Find the Stinky parts of your Code</h2>\n      <h3>Maxi Contieri „Éª May 21 '21</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#codenewbie</span>\n        <span class=\"ltag__link__tag\">#tutorial</span>\n        <span class=\"ltag__link__tag\">#codequality</span>\n        <span class=\"ltag__link__tag\">#beginners</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Introduction FLEXUS to Deep Learning","url":"https://dev.to/peterdw/introduction-f-lexuscom-to-deep-learning-o4l","date":1751129136,"author":"peterDW","guid":174541,"unread":true,"content":"<p>Deep Learning is a subfield of Machine Learning. It has wide scope and it has various application like automated driving, object detection, healthcare and many more.</p>\n\n<p>For example, by using deep learning we can create a system which can detect multiple objects in a frame and also label them accordingly.</p>\n\n<p>Deep learning is not so new, it is fairly old subfield of machine learning. It has achieved so much in past few years, like from Near-human-level image classification to Handwriting transcription and Speech Recognition to Digital Assistants(like Alexa) and many more. Isn‚Äôt it cool? üòâ</p>\n\n<p>So, what really is deep learning? And how ‚ÄòDeep‚Äô it is?</p>\n\n<p>Let‚Äôs Dive in‚Ä¶<br>\nIt may be possible that whenever you hear about Deep learning, you could think that we should have deeper understanding of a problem for solving it but that‚Äôs not true.<br>\nThe term Deep Learning was introduced by Rina Dechter in 1986. ‚ÄúDeep‚Äù in Deep learning refers to the different layers from which our data is passed and each layer gives some meaningful output data which can be fed to its successive layer as a input. There may be hundreds or thousands of layers in Deep Learning model and it is called as ‚ÄúNeural Network‚Äù.</p>\n\n<p>As we know, Human brain consist a number of neurons connected to each other which creates a complex structure or a network of neurons. Just like that Deep learning model contains a number of layers and each layer consist a number of nodes(or neurons) which are connected to the neurons of its adjacent neurons. But that does not mean that deep learning model or neural network works like a human brain. It has its different working. You can see in following diagram how deep learning model looks like:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3umjtbght2rekivdmj98.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3umjtbght2rekivdmj98.png\" alt=\"Image description\" width=\"800\" height=\"600\"></a></p>\n\n<p>Example of Neural Network</p>\n\n<p>As you can see in above figure, there is 1 input layer, 1 output layer and between them there is another layer called Hidden layer. Layers present between input layer and output layer are called Hidden Layers. There may be number of hidden layers in neural network. Data is fed into input layer which transform data according to its weights and passes to next layer, same task is perform by its successive layer and output layer gives us final output.</p>\n\n<p>Different Neural Networks<br>\nThere are different neural networks used in Deep Learning, we will discuss all of them in detail in upcoming articles of this series.<br>\nSome widely used neural networks are</p>\n\n<p>Convolutional Neural Network.<br>\nRecurrent Neural Network.<br>\nLong Short-Term Memory. and many more..<br>\nFrameworks for Deep Learning<br>\nTo help data scientists for making deep learning models easily and training them, many frameworks or library are introduced. Following are few frameworks or library for Deep Learning.</p>\n\n<p>Tensorflow<br>\nKeras<br>\nPyTorch<br>\nIt is first article of Deep Learning series, In upcoming article we are going to learn so much about Deep Learning and also will do some hands-on. If you enjoyed this blog post, share it with a friend and stay tuned for next article.<br>\nHappy Learning!!</p>\n\n<p>cc : <a class=\"mentioned-user\" href=\"https://dev.to/peterdw\">@peterdw</a> </p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why I Left Medicine for Software Engineering","url":"https://dev.to/arttheache98/why-i-left-medicine-for-software-engineering-272","date":1751127757,"author":"Artak Matiniani","guid":174540,"unread":true,"content":"<p>Ever since grade five, I knew I wanted to become a doctor. I even wrote an essay about it - and I still keep it to this day. By the time I graduated, my classmates had signed my farewell shirt with ‚ÄúHouse MD‚Äù printed across the back. That should tell you how fully I‚Äôd embraced the dream.</p>\n\n<p>For years, I chased that goal with everything I had. I put in the hours, the effort, the late nights, determined to help people and make an impact.</p>\n\n<p>But somewhere along the way, something shifted.</p>\n\n<p>It wasn‚Äôt that I stopped caring. In fact, maybe I cared too much. The system I was in made it hard to care without burning out. Good work often went unnoticed. There was little room to breathe, to grow, or to experiment with new ideas.</p>\n\n<p>‚∏ª</p>\n\n<p>A Quiet Pull Toward Tech</p>\n\n<p>Even while immersed in medicine, I felt a quiet pull toward technology. Looking back, people around me saw it too. Friends would say, ‚ÄúYou‚Äôd be great in tech.‚Äù</p>\n\n<p>The first time I truly explored that possibility was when I built a website for a brokerage project. The freedom of creating something from scratch, of seeing an idea come to life - it left a mark on me.</p>\n\n<p>And then, later on, watching someone close to me thrive after their own career switch gave me the final push I needed. I realized I didn‚Äôt have to stay stuck. I could make a change too.</p>\n\n<p>‚∏ª</p>\n\n<p>Why I Really Left</p>\n\n<p>I didn‚Äôt leave medicine because I gave up on it. I left because I realized there are many ways to help people, and sometimes the timing matters more than the title.</p>\n\n<p>Software engineering opened up a space for me to keep solving problems, just in a different language. It brought back a sense of structure and forward momentum. And it offered something medicine could not at that moment: a fair shot to build, to test, to learn - without being defined by where I was from, my degree, or my connections.</p>\n\n<p>‚∏ª</p>\n\n<p>What I Gained</p>\n\n<p>Coding showed me I‚Äôm still capable of taking on hard challenges. It showed me that I can adapt, learn, and grow - even after years spent mastering something completely different.</p>\n\n<p>Maybe the biggest surprise? How many of the skills I built in medicine still help me today:<br>\n    ‚Ä¢ Problem-solving under pressure<br>\n    ‚Ä¢ Empathy for real-world users<br>\n    ‚Ä¢ Attention to detail<br>\n    ‚Ä¢ Commitment to quality</p>\n\n<p>The transition wasn‚Äôt easy. It was scary, even. But it taught me that reinvention is possible, no matter how far along you are in one path.</p>\n\n<p>‚∏ª</p>\n\n<p>Over to You</p>\n\n<p>Have you ever made a leap like this ‚Äî from one world to another?<br>\nI‚Äôd love to hear your story, and maybe share more of mine, too. Feel free to connect or drop me a note anytime.</p>\n\n<p>‚∏ª</p>\n\n<p>üëâ Let‚Äôs connect on LinkedIn (<a href=\"https://www.linkedin.com/in/arttheache/\" rel=\"noopener noreferrer\">https://www.linkedin.com/in/arttheache/</a>) or check out my projects on GitHub (<a href=\"https://github.com/ArtTheAche98\" rel=\"noopener noreferrer\">https://github.com/ArtTheAche98</a>).</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4q4j4ddpj4ms8s3tfco9.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4q4j4ddpj4ms8s3tfco9.jpeg\" alt=\"Image description\" width=\"800\" height=\"1066\"></a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Calco: ÿßÿ≥ÿ±ÿπ ŸÖŸÉÿ™ÿ®Ÿá ÿ±Ÿäÿßÿ∂ŸäŸá ŸÅŸä ÿ®ÿßŸäÿ´ŸàŸÜ","url":"https://dev.to/gafoo/calco-sr-mktbh-rydyh-fy-bythwn-4p80","date":1751126485,"author":"gafoo","guid":174539,"unread":true,"content":"<p>üöÄ Calco: ŸÖŸÉÿ™ÿ®ÿ© ÿ±Ÿäÿßÿ∂Ÿäÿ© ÿ¨ÿßŸáÿ≤ÿ© ŸÑŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÅŸä ÿ®ÿßŸäÿ´ŸàŸÜÿå ŸÖÿØÿπŸàŸÖÿ© ÿ®ŸÑÿ∫ÿ© C</p>\n\n<p>ŸÑŸà ÿ®ÿ™ÿØŸàÿ± ÿπŸÑŸâ ŸÖŸÉÿ™ÿ®ÿ© ÿ±Ÿäÿßÿ∂Ÿäÿ© ŸÅŸäŸáÿß ŸÖÿ¨ŸÖŸàÿπÿ© ÿ∂ÿÆŸÖÿ© ŸÖŸÜ ÿßŸÑÿØŸàÿßŸÑ ÿßŸÑÿ¨ÿßŸáÿ≤ÿ© ‚Äî Ÿàÿ®ÿ™ÿ¥ÿ™ÿ∫ŸÑ ÿ®ÿ≥ÿ±ÿπÿßÿ™ ŸÇÿ±Ÿäÿ®ÿ© ÿ¨ÿØŸãÿß ŸÖŸÜ Ÿàÿ≠ÿØÿ© math ÿßŸÑŸÖÿØŸÖÿ¨ÿ© ŸÅŸä ÿ®ÿßŸäÿ´ŸàŸÜ ‚Äî Ÿäÿ®ŸÇŸâ Calco ŸÖŸÖŸÉŸÜ ÿ™ŸÉŸàŸÜ ÿßÿÆÿ™Ÿäÿßÿ± ŸÖŸÜÿßÿ≥ÿ® ÿ¨ÿØŸãÿß ŸÑŸäŸÉ.</p>\n\n\n\n\n<p>üìå ŸÖÿß ŸáŸä Calcoÿü</p>\n\n<p>Calco ŸáŸä ŸÖŸÉÿ™ÿ®ÿ© ÿ±Ÿäÿßÿ∂Ÿäÿßÿ™ ŸÖÿ™ÿπÿØÿØÿ© ÿßŸÑŸÖŸÜÿµÿßÿ™ (cross-platform) ŸÖŸÉÿ™Ÿàÿ®ÿ© ÿ®ŸÑÿ∫ÿ© Cÿå ŸàŸÖŸÉÿ¥ŸàŸÅÿ© ÿπŸÑŸâ ÿ®ÿßŸäÿ´ŸàŸÜ ŸÉÿßŸÖÿ™ÿØÿßÿØ (extension) ÿ£ÿµŸÑŸä. ÿ®ÿ™ŸàŸÅÿ± ÿ£ŸÉÿ™ÿ± ŸÖŸÜ 60 ÿØÿßŸÑÿ© ÿ±Ÿäÿßÿ∂Ÿäÿ© ÿ®ÿ™ÿ∫ÿ∑Ÿä ÿßŸÑÿ≠ÿ≥ÿßÿ®ÿßÿ™ÿå ÿßŸÑŸÖÿ´ŸÑÿ´ÿßÿ™ÿå ÿßŸÑŸÑŸàÿ∫ÿßÿ±Ÿäÿ™ŸÖÿßÿ™ÿå ÿßŸÑÿØŸàÿßŸÑ ÿßŸÑÿÆÿßÿµÿ©ÿå Ÿàÿ∫Ÿäÿ±Ÿáÿß ‚Äî Ÿàÿ®ÿ™ŸÇÿØŸÖŸÑŸÉ ÿ£ÿØŸàÿßÿ™ ÿ£ŸÉÿ™ÿ± ÿ®ŸÉÿ™Ÿäÿ± ŸÖŸÜ ÿßŸÑŸÑŸä ŸÖŸàÿ¨ŸàÿØÿ© ŸÅŸä ŸÖŸÉÿ™ÿ®ÿßÿ™ ÿ®ÿßŸäÿ´ŸàŸÜ ÿßŸÑŸÇŸäÿßÿ≥Ÿäÿ©.</p>\n\n<p>ÿßŸÑŸÖŸÉÿ™ÿ®ÿ© ŸÖÿµŸÖŸÖÿ© ŸÑŸÑŸÖÿ∑Ÿàÿ±ŸäŸÜ ÿßŸÑŸÑŸä ŸÖÿ≠ÿ™ÿßÿ¨ŸäŸÜ ÿ£ÿØŸàÿßÿ™ ÿÆŸÅŸäŸÅÿ© Ÿàÿ≥ÿ±Ÿäÿπÿ©ÿå ÿ®ÿØŸàŸÜ ÿßŸÑÿ≠ÿßÿ¨ÿ© ŸÑŸÉÿ™ÿßÿ®ÿ© ÿ£Ÿà ÿ±ÿ®ÿ∑ ŸÉŸàÿØ C ŸäÿØŸàŸäŸãÿß.</p>\n\n\n\n\n<p>‚öôÔ∏è ÿßŸÑŸÖŸÖŸäÿ≤ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©</p>\n\n<p>‚ö° ÿ£ÿØÿßÿ° ÿ®ÿ≥ÿ±ÿπÿ© ŸÑÿ∫ÿ© C</p>\n\n<p>üßÆ ÿ£ŸÉÿ´ÿ± ŸÖŸÜ 60 ÿØÿßŸÑÿ© ÿ±Ÿäÿßÿ∂Ÿäÿ© ŸÖÿØŸÖÿ¨ÿ©ÿå ŸÖÿ´ŸÑ:</p>\n\n<p>ÿßŸÑÿ≠ÿ≥ÿßÿ®Ÿäÿ©: addÿå subtractÿå divideÿå powerÿå ÿ•ŸÑÿÆ</p>\n\n<p>ÿßŸÑŸÖÿ´ŸÑÿ´Ÿäÿ©: sineÿå cosineÿå arctangent2ÿå ÿ•ŸÑÿÆ</p>\n\n<p>ÿßŸÑŸÑŸàÿ∫ÿßÿ±Ÿäÿ™ŸÖÿßÿ™ ŸàÿßŸÑÿ£ÿ≥ÿ≥</p>\n\n<p>ÿßŸÑÿØŸàÿßŸÑ ÿßŸÑÿ≤ÿßÿ¶ÿØŸäÿ© ŸàÿßŸÑÿπŸÉÿ≥Ÿäÿ©</p>\n\n<p>ÿßŸÑÿØŸàÿßŸÑ ÿßŸÑÿÆÿßÿµÿ©: gammaÿå erfÿå fmaÿå ÿ•ŸÑÿÆ</p>\n\n<p>ÿßŸÑÿ™ŸÇÿ±Ÿäÿ®ÿå ÿßŸÑÿ™ŸÇÿ≥ŸäŸÖÿå ÿßŸÑÿ≠ÿ∞ŸÅÿå Ÿàÿ∫Ÿäÿ±Ÿáÿß</p>\n\n<p>üß© ÿØÿπŸÖ ŸÉÿßŸÖŸÑ ŸÑŸÉŸÑ ÿ£ŸÜÿ∏ŸÖÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ: ŸàŸäŸÜÿØŸàÿ≤ÿå ŸÑŸäŸÜŸÉÿ≥ÿå ŸÖÿßŸÉ</p>\n\n<p>üì¶ ÿ≠ÿ≤ŸÖÿ© ÿÆŸÅŸäŸÅÿ© ÿ®ÿµŸäÿ∫ÿ© .pyd / .so ÿ™ÿ¥ÿ™ÿ∫ŸÑ ŸÖÿ®ÿßÿ¥ÿ±ÿ© ŸÅŸä ÿ®ÿßŸäÿ´ŸàŸÜ</p>\n\n\n\n\n<p>üì¶ ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™</p>\n\n<p>ÿ™ŸÇÿØÿ± ÿ™ÿ´ÿ®Ÿëÿ™ ŸÖŸÉÿ™ÿ®ÿ© calco ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ pip:</p>\n\n<p>pip install calco</p>\n\n<p>ÿ£Ÿà ÿ≤Ÿàÿ± ÿßŸÑŸÖŸàŸÇÿπ ÿßŸÑÿ±ÿ≥ŸÖŸä ÿπÿ¥ÿßŸÜ ÿ™ÿ¥ŸàŸÅ ŸÉŸÑ ÿ™ÿπŸÑŸäŸÖÿßÿ™ ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™ Ÿàÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ•ÿµÿØÿßÿ±ÿßÿ™:<br>\nüëâ <a href=\"https://calcolib.netlify.app/\" rel=\"noopener noreferrer\">https://calcolib.netlify.app/</a></p>\n\n\n\n\n<p>üß™ ÿ£ŸÖÿ´ŸÑÿ© ÿπŸÑŸâ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ</p>\n\n<p>import calco</p>\n\n<h1>\n  \n  \n  ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑÿ≠ÿ≥ÿßÿ®Ÿäÿ©\n</h1>\n\n<p>print(calco.add(3.0, 4.5))             # 7.5<br>\nprint(calco.divide(10.0, 3.0))         # ÿ™ŸÇÿ±Ÿäÿ®Ÿãÿß 3.333...</p>\n\n<h1>\n  \n  \n  ÿßŸÑÿØŸàÿßŸÑ ÿßŸÑŸÖÿ´ŸÑÿ´Ÿäÿ©\n</h1>\n\n<p>print(calco.sine(1.57))                # ÿ™ŸÇÿ±Ÿäÿ®Ÿãÿß sin(90¬∞)<br>\nprint(calco.arctangent2(2.0, 3.0))     # atan2(y, x)</p>\n\n<h1>\n  \n  \n  ÿßŸÑŸÑŸàÿ∫ÿßÿ±Ÿäÿ™ŸÖÿßÿ™\n</h1>\n\n<p>print(calco.log_base10(1000))          # 3.0</p>\n\n<h1>\n  \n  \n  ÿßŸÑÿØŸàÿßŸÑ ÿßŸÑÿÆÿßÿµÿ©\n</h1>\n\n<p>print(calco.gamma_function(0.5))       # ÿ™ŸÇÿ±Ÿäÿ®Ÿãÿß sqrt(pi)<br>\nprint(calco.fused_multiply_add(2, 3, 4))  # (2√ó3)+4 = 10</p>\n\n\n\n\n<p>üìö ÿßŸÑÿØŸàÿßŸÑ ÿßŸÑŸÖÿ™ŸàŸÅÿ±ÿ© (ÿ≠ÿ≥ÿ® ÿßŸÑÿ™ÿµŸÜŸäŸÅ)</p>\n\n<p>ÿßŸÑÿ™ÿµŸÜŸäŸÅ  ÿßŸÑÿØŸàÿßŸÑ</p>\n\n<p>ÿßŸÑÿ≠ÿ≥ÿßÿ®Ÿäÿ©    addÿå subtractÿå multiplyÿå divideÿå powerÿå square_rootÿå cube_rootÿå absolute_valueÿå float_moduloÿå positive_differenceÿå copy_sign_doubleÿå fused_multiply_add<br>\nÿßŸÑÿ™ŸÇÿ±Ÿäÿ®  floor_valÿå ceil_valÿå round_valÿå nearbyint_valÿå truncate_val<br>\nÿßŸÑŸÖÿ´ŸÑÿ´Ÿäÿ©    sineÿå cosineÿå tangentÿå arcsineÿå arccosineÿå arctangentÿå arctangent2<br>\nÿßŸÑÿ≤ÿßÿ¶ÿØŸäÿ©    hyperbolic_sineÿå hyperbolic_cosineÿå hyperbolic_tangentÿå inverse_hyperbolic_sineÿå inverse_hyperbolic_cosineÿå inverse_hyperbolic_tangent<br>\nÿßŸÑŸÑŸàÿ∫ÿßÿ±Ÿäÿ™ŸÖŸäÿ©    natural_logÿå log_base10ÿå log_base2ÿå log_custom_base<br>\nÿßŸÑÿ£ÿ≥Ÿäÿ©    exponentialÿå exponential_base2ÿå exponential_minus_1<br>\nÿßŸÑÿÆÿßÿµÿ©    gamma_functionÿå log_gamma_functionÿå error_functionÿå complementary_error_functionÿå next_after_double<br>\nÿßŸÑÿ´Ÿàÿßÿ®ÿ™  get_piÿå get_e<br>\nÿßŸÑÿ™ÿ≠ŸàŸäŸÑÿßÿ™  degrees_to_radiansÿå radians_to_degrees<br>\nÿßŸÑŸÅÿ≠ÿµ  is_nanÿå is_infinity</p>\n\n\n\n\n<p>üíª ÿ£ŸÜÿ∏ŸÖÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸÖÿØÿπŸàŸÖÿ©</p>\n\n<p>ÿßŸÑŸÜÿ∏ÿßŸÖ    ÿßŸÑŸÖÿπŸÖÿßÿ±Ÿäÿßÿ™ ÿßŸÑŸÖÿØÿπŸàŸÖÿ©</p>\n\n<p>Windows x86 / x64<br>\nLinux   x86_64, ARM<br>\nmacOS   Intelÿå Apple Silicon (ARM)</p>\n\n\n\n\n<p>üìÑ ÿßŸÑÿ™ÿ±ÿÆŸäÿµ</p>\n\n<p>ÿ™ÿ±ÿÆŸäÿµ MIT ‚Äì ŸÖÿ¨ÿßŸÜŸä ÿ™ŸÖÿßŸÖŸãÿß ŸÑŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÅŸä ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ ÿßŸÑÿ¥ÿÆÿµŸäÿ© ÿ£Ÿà ÿßŸÑÿ£ŸÉÿßÿØŸäŸÖŸäÿ© ÿ£Ÿà ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ©.<br>\nÿ™ŸÖ ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸÖŸÉÿ™ÿ®ÿ© ÿ®Ÿàÿßÿ≥ÿ∑ÿ© gafoo.<br>\n¬© 2025 Calco</p>\n\n\n\n\n<p>üîó ÿ±Ÿàÿßÿ®ÿ∑ ŸÖŸáŸÖÿ©</p>\n\n<p>üåê ÿßŸÑŸÖŸàŸÇÿπ ÿßŸÑÿ±ÿ≥ŸÖŸä: <a href=\"https://calcolib.netlify.app\" rel=\"noopener noreferrer\">https://calcolib.netlify.app</a></p>\n\n<p>üßë‚Äçüíª ÿ¨Ÿäÿ™ Ÿáÿ®: <a href=\"https://github.com/gafoo173/calco\" rel=\"noopener noreferrer\">https://github.com/gafoo173/calco</a></p>\n\n\n\n\n<p>üåé ŸÉŸäŸÅ ÿ™ÿπŸÖŸÑ Calco ŸÖŸÜ ÿßŸÑÿØÿßÿÆŸÑÿü</p>\n\n<p>ÿπŸÜÿØ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸÉ ŸÑŸÄ Calcoÿå ÿ®Ÿäÿ™ŸÖ ÿ™ŸÖÿ±Ÿäÿ± ÿßŸÑÿØÿßŸÑÿ© ŸÅŸä ÿ®ÿßŸäÿ´ŸàŸÜ ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿ∑ÿ®ŸÇÿ© API ÿ•ÿ∂ÿßŸÅŸäÿ© ŸÇÿ®ŸÑ ŸÖÿß ÿ™ŸàÿµŸÑ ŸÑŸÑÿØÿßŸÑÿ© ÿßŸÑŸÖŸÉÿ™Ÿàÿ®ÿ© ÿ®ŸÑÿ∫ÿ© C.<br>\nÿ£ŸÖÿß ŸÖŸÉÿ™ÿ®ÿ© math ÿßŸÑŸÖÿØŸÖÿ¨ÿ© ŸÅŸä ÿ®ÿßŸäÿ´ŸàŸÜ ŸÅÿ®ÿ™ŸÜÿßÿØŸä ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿØŸàÿßŸÑ C ÿ®ÿØŸàŸÜ ÿ£Ÿä Ÿàÿ≥Ÿäÿ∑.</p>\n\n<p>Ÿàÿ±ÿ∫ŸÖ ÿßŸÑÿ∑ÿ®ŸÇÿ© ÿßŸÑÿ•ÿ∂ÿßŸÅŸäÿ© ÿØŸäÿå Calco ÿ®ÿ™ŸÇÿØŸëŸÖ ÿ£ÿØÿßÿ° ÿ¥ÿ®Ÿá ŸÖÿ∑ÿßÿ®ŸÇ ŸÑŸÖŸÉÿ™ÿ®ÿ© mathÿå ŸàŸÅŸä ÿ®ÿπÿ∂ ÿßŸÑÿ≠ÿßŸÑÿßÿ™ ÿ®ÿ™ŸÉŸàŸÜ ÿ£ÿ≥ÿ±ÿπ ÿ£Ÿà ÿ£ÿ®ÿ∑ÿ£ ÿ®ŸÅÿßÿ±ŸÇ ÿ®ÿ≥Ÿäÿ∑ ÿ≠ÿ≥ÿ® ŸÜŸàÿπ ÿßŸÑÿØÿßŸÑÿ© ŸàŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ.</p>\n\n<p>ÿ±ÿ≥ŸÖ ÿ™Ÿàÿ∂Ÿäÿ≠Ÿä: ŸÖÿ≥ÿßÿ± ÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑÿØÿßŸÑÿ© ŸÅŸä Calco</p>\n\n<p>ŸÉŸàÿØ ÿ®ÿßŸäÿ´ŸàŸÜ<br>\n   |<br>\n   v<br>\n[ ÿ∫ŸÑÿßŸÅ ÿ®ÿßŸäÿ´ŸàŸÜ ]<br>\n   |<br>\n   v<br>\n[ ÿ∑ÿ®ŸÇÿ© API ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸÄ Calco ]<br>\n   |<br>\n   v<br>\n[ ÿØÿßŸÑÿ© C ÿßŸÑÿ£ÿµŸÑŸäÿ© ]</p>\n\n<p>ÿ±ÿ≥ŸÖ ÿ™Ÿàÿ∂Ÿäÿ≠Ÿä: ŸÖÿ≥ÿßÿ± ÿ™ŸÜŸÅŸäÿ∞ ÿØÿßŸÑÿ© math</p>\n\n<p>ŸÉŸàÿØ ÿ®ÿßŸäÿ´ŸàŸÜ<br>\n   |<br>\n   v<br>\n[ ŸÖŸÉÿ™ÿ®ÿ© math (ÿ™ŸÜŸÅŸäÿ∞ ŸÖÿ®ÿßÿ¥ÿ± ÿ®ŸÑÿ∫ÿ© C) ]__</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (3)","url":"https://dev.to/hyperkai/string-in-python-3-4o25","date":1751121727,"author":"Super Kai (Kazuya Ito)","guid":174468,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-1-3hg7\">My post</a> explains a string.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-2-1jhk\">My post</a> explains <a href=\"https://docs.python.org/3/library/functions.html#func-str\" rel=\"noopener noreferrer\">str()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-4-5e88\">My post</a> explains <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.upper\" rel=\"noopener noreferrer\">upper()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.lower\" rel=\"noopener noreferrer\">lower()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.casefold\" rel=\"noopener noreferrer\">casefold()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.swapcase\" rel=\"noopener noreferrer\">swapcase()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.title\" rel=\"noopener noreferrer\">title()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.capitalize\" rel=\"noopener noreferrer\">capitalize()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.isupper\" rel=\"noopener noreferrer\">isupper()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.islower\" rel=\"noopener noreferrer\">islower()</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#str.istitle\" rel=\"noopener noreferrer\">istitle()</a>.</li>\n</ul>\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#str.encode\" rel=\"noopener noreferrer\">encode()</a> can encode a string and <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.decode\" rel=\"noopener noreferrer\">decode()</a> can decode the encoded string as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>encoding</code>(Optional-Default:<code>'utf-8'</code>):\n*Memos:\n\n<ul>\n<li>\n<code>'utf-8'</code>, <code>'utf-7'</code>, <code>'utf-16'</code>, <code>'big5'</code>, <code>'ascii'</code>, etc can be set to it.</li>\n<li>You can see <a href=\"https://docs.python.org/3/library/codecs.html#standard-encodings\" rel=\"noopener noreferrer\">Standard Encodings</a> for more possible values.</li>\n</ul>\n\n\n</li>\n\n<li>The 2nd argument is <code>errors</code>(Optional-Default:<code>'strict'</code>):\n*Memos:\n\n<ul>\n<li>It controls encoding or decoding error with the error handlers, <code>'strict'</code>, <code>'ignore'</code>, <code>'replace'</code>, <code>'xmlcharrefreplace'</code>, <code>'backslashreplace'</code>, etc.</li>\n<li>\n<code>'strict'</code> raises <a href=\"https://docs.python.org/3/library/exceptions.html#UnicodeError\" rel=\"noopener noreferrer\">UnicodeError</a> if the character, which cannot be encoded or decoded, exists.</li>\n<li>\n<code>'ignore'</code> ignores the character which cannot be encoded or decoded.</li>\n<li>\n<code>'replace'</code> replaces the character, which cannot be encoded or decoded, with <code>?</code> for <code>encode()</code> or <code>ÔøΩ</code> for <code>decode()</code>.</li>\n<li>\n<code>'xmlcharrefreplace'</code> replaces the character, which cannot be encoded or decoded, with a XML character e.g. <code>&amp;#1105;</code>, <code>&amp;#966;</code>, etc.</li>\n<li>\n<code>'backslashreplace'</code> replaces the character, which cannot be encoded or decoded, with <code>\\\\uxxxx</code>  for <code>encode()</code> e.g. <code>\\\\u0451</code> or <code>\\uxxxx</code> for <code>decode()</code> e.g. <code>\\u0451</code>.</li>\n<li>You can see more <a href=\"https://docs.python.org/3/library/codecs.html#error-handlers\" rel=\"noopener noreferrer\">error handlers</a>.</li>\n<li>You can create your own error handler with <a href=\"https://docs.python.org/3/library/codecs.html#codecs.register_error\" rel=\"noopener noreferrer\">codecs.register_error()</a>.</li>\n</ul>\n\n\n</li>\n\n<li>After using <code>encode()</code>, <code>decode()</code> appears and <code>encode()</code> disappears.</li>\n\n<li>After using <code>decode()</code>, <code>encode()</code> appears and <code>decode()</code> disappears.\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">H—ëllœÜ!</span><span class=\"sh\">'</span>\n\n<span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">()</span>\n<span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">strict</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">)</span>\n<span class=\"c1\"># b'H\\xd1\\x91ll\\xcf\\x86!'\n</span>\n<span class=\"n\">dv</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">()</span>\n<span class=\"n\">dv</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">strict</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">dv</span><span class=\"p\">)</span>\n<span class=\"c1\"># H—ëllœÜ!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">H—ëllœÜ!</span><span class=\"sh\">'</span>\n\n<span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-7</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">)</span>\n<span class=\"c1\"># b'H+BFE-ll+A8Y!'\n</span>\n<span class=\"n\">dv</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-7</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">dv</span><span class=\"p\">)</span>\n<span class=\"c1\"># H—ëllœÜ!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">H—ëllœÜ!</span><span class=\"sh\">'</span>\n\n<span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-16</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">)</span>\n<span class=\"c1\"># b'\\xff\\xfeH\\x00Q\\x04l\\x00l\\x00\\xc6\\x03!\\x00'\n</span>\n<span class=\"n\">dv</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-16</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">dv</span><span class=\"p\">)</span>\n<span class=\"c1\"># H—ëllœÜ!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">H—ëllœÜ!</span><span class=\"sh\">'</span>\n\n<span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">big5</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">)</span>\n<span class=\"c1\"># b'H\\xc7\\xcell\\xa3p!'\n</span>\n<span class=\"n\">dv</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">big5</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">dv</span><span class=\"p\">)</span>\n<span class=\"c1\"># H—ëllœÜ!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">codecs</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">hashreplace_handler</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"nf\">return </span><span class=\"p\">((</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"sh\">'</span><span class=\"s\">#</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">)</span>\n\n<span class=\"n\">codecs</span><span class=\"p\">.</span><span class=\"nf\">register_error</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">hashreplace</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">hashreplace_handler</span><span class=\"p\">)</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">H—ëllœÜ!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ignore</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># b'Hll!'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">replace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># b'H?ll?!'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">xmlcharrefreplace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># b'H&amp;#1105;ll&amp;#966;!'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">backslashreplace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># b'H\\\\u0451ll\\\\u03c6!'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">hashreplace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># b'H#ll#!'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">strict</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># UnicodeEncodeError: 'ascii' codec can't encode character '\\u0451'\n# in position 1: ordinal not in range(128)\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">codecs</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">hashreplace_handler</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"nf\">return </span><span class=\"p\">((</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"sh\">'</span><span class=\"s\">#</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">)</span>\n\n<span class=\"n\">codecs</span><span class=\"p\">.</span><span class=\"nf\">register_error</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">hashreplace</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">hashreplace_handler</span><span class=\"p\">)</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">H—ëllœÜ!</span><span class=\"sh\">'</span>\n\n<span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">)</span>\n<span class=\"c1\"># b'H\\xd1\\x91ll\\xcf\\x86!'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ignore</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># Hll!\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">replace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># HÔøΩÔøΩllÔøΩÔøΩ!\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">hashreplace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H##ll##!\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">strict</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># UnicodeDecodeError: 'ascii' codec can't decode byte 0xd1\n# in position 1: ordinal not in range(128)\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">H—ëllœÜ!</span><span class=\"sh\">'</span>\n\n<span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">xmlcharrefreplace</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">)</span>\n<span class=\"c1\"># b'H&amp;#1105;ll&amp;#966;!'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">xmlcharrefreplace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H&amp;#1105;ll&amp;#966;!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">H—ëllœÜ!</span><span class=\"sh\">'</span>\n\n<span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">backslashreplace</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">)</span>\n<span class=\"c1\"># b'H\\\\u0451ll\\\\u03c6!'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">backslashreplace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H\\u0451ll\\u03c6!\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python course: Dictionaries","url":"https://dev.to/costa86/python-course-dictionaries-5c7m","date":1751120489,"author":"Louren√ßo Costa","guid":174467,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmedia1.tenor.com%2Fm%2FTXF3LzS-XxQAAAAd%2Fdance-happy.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmedia1.tenor.com%2Fm%2FTXF3LzS-XxQAAAAd%2Fdance-happy.gif\" width=\"56\" height=\"40\"></a></p>\n\n<p>This is a way of creating mapping relationships in Python. Each element is composed of two parts: a key and a value. The syntax of a dict in Python is: <code>{&lt;key_1&gt;: &lt;value_1&gt;, &lt;key_2&gt; : &lt;value_2&gt;, &lt;key_n&gt; : &lt;value_n&gt;}</code>. See an example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">employee</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">michael scott</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">position</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">regional manager</span><span class=\"sh\">\"</span><span class=\"p\">,</span> \n    <span class=\"sh\">\"</span><span class=\"s\">age</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">46</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">past lovers</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">jan</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">holly</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">donna</span><span class=\"sh\">\"</span><span class=\"p\">],</span> \n    <span class=\"sh\">\"</span><span class=\"s\">married</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">employee</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">past lovers</span><span class=\"sh\">\"</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; [\"jan\", \"holly\", \"donna\"] \n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">employee</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">past lovers</span><span class=\"sh\">\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; jan \n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">employee</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; michael scott \n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">employee</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">branch</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">scranton</span><span class=\"sh\">\"</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; scranton\n</span>\n<span class=\"n\">employee</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">gender</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">male</span><span class=\"sh\">\"</span> <span class=\"c1\"># I can add new items \n</span>\n<span class=\"n\">employee</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">house owner</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">})</span> <span class=\"c1\"># A new item can be added this way too\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">employee</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">gender</span><span class=\"sh\">\"</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; male\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">employee</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">())</span> <span class=\"c1\">#=&gt; dict_keys(['name', 'position', 'age', 'past lovers', 'married', 'gender', 'house owner'])\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">employee</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">())</span> <span class=\"c1\">#=&gt; dict_values(['michael scott', 'regional manager', 46, ['jan', 'holly', 'donna'], False, 'male', False])\n</span>\n</code></pre>\n\n</div>\n\n\n\n<p><code>employee[\"past lovers\"]</code></p>\n\n<p>Note that this syntax is similar to the one used for getting elements by indexes in lists and tuples. But here, instead of an index, you use the \"past lovers\" key.</p>\n\n<p><code>employee[\"past lovers\"][0]</code></p>\n\n<p>As you noticed, the value of employee[\"past lovers\"] is a list containing three elements, so we can use the index to access a particular one.</p>\n\n<p><code>employee.get(\"name\")</code></p>\n\n<p>This is an alternative way of accessing a value. It's the same as employee[\"name\"]. </p>\n\n<p><code>employee.get(\"branch\", \"scranton\")</code></p>\n\n<p>Do you see a key named \"branch\" in employee? No. This syntax is a way of setting a default value in case a given key is missing. So if a \"branch\" key was present and it had a value \"x\", then \"x\" would be returned instead of \"scranton\". This is a handy feature in a variety of situations.</p>\n\n<p><code>employee[\"gender\"]</code></p>\n\n<p>Dictionaries are mutable, which means you can add this new key \"gender\" to it. You can change them too.</p>\n\n<p><code>employee.update({\"house owner\": False})</code></p>\n\n<p>This is an alternative way of adding new items.</p>\n\n<h2>\n  \n  \n  Dict comprehension\n</h2>\n\n<p>This concept assumes you have read the <em>Loops</em>, <em>Deconstructing</em> and <em>Conditionals</em> posts.</p>\n\n<p>This is an interesting feature in Python that allows you to create dicts out of collections, such as lists or tuples. By using a more concise and readable syntax:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">employees_list</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"sh\">\"</span><span class=\"s\">angela</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">michael</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">46</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">pam</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)]</span>\n<span class=\"n\">employees_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">employees_list</span><span class=\"p\">}</span> \n<span class=\"n\">employees_dict_over_30</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">employees_list</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"o\">&gt;</span> <span class=\"mi\">30</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">employees_dict</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; {'angela': 50, 'michael': 46, 'pam': 30} \n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">employees_dict_over_30</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; {'angela': 50, 'michael': 46}\n</span></code></pre>\n\n</div>\n\n\n\n<p><code>employees_dict</code></p>\n\n<p>This is a dict created with dict comprehension. Let's go over its details in two parts:</p>\n\n<ol>\n<li>DeÔ¨Ånes what will be in the new dict: <code>k: v</code> (k for the key and v for the value)</li>\n<li>DeÔ¨Ånes the iteration over the original list: <code>for k, v in employees_list</code> (a tuple used as a iterator)</li>\n</ol>\n\n<p><code>employees_dict_over_30</code></p>\n\n<p>Also a dict created with dict comprehension. There's a third part now:</p>\n\n<ol>\n<li>DeÔ¨Ånes what will be in the new dict: <code>k: v</code> (same as the previous example)\n</li>\n<li>DeÔ¨Ånes the iteration over the original list: <code>for k, v in employees_list</code> (same as the previous example)</li>\n<li>DeÔ¨Ånes a conditional for <code>k: v</code> to be added to the dict: <code>if v &gt; 30</code> (if the value of \"v\" is greater than 30)</li>\n</ol>\n\n\n\n\n<blockquote>\n<p>üòä Enjoying this series? The full book contains even more content! Support my work by purchasing the complete book in digital or paperback formats. Click below to find out more.<br>\n<a href=\"https://buymeacoffee.com/costa86/e/424861\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F97kfgviyhezekzsuaiwp.png\" alt=\"Alt text\" width=\"800\" height=\"199\"></a></p>\n</blockquote>\n\n\n\n\n<p>Follow me around:<br>\n<a href=\"https://www.linkedin.com/in/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">LinkedIn</a>\n <a href=\"https://www.buymeacoffee.com/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">Buy me a coffee</a>\n <a href=\"https://github.com/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">GitHub</a>\n <a href=\"https://dev.to/costa86\" class=\"ltag_cta ltag_cta--branded\">Dev.to</a>\n </p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"10 Python Tricks Every Developer Should Know","url":"https://dev.to/gulshan0709/10-python-tricks-every-developer-should-know-1oa3","date":1751119599,"author":"Gulshan Kumar","guid":174466,"unread":true,"content":"<p>Python is celebrated for its readability and simplicity, but beneath its clean syntax lie powerful features that can make your code more elegant, efficient, and Pythonic. Here are ten handy Python tricks every developer should have in their toolkit.</p>\n\n<p><strong>1. Swapping Variables in One Line</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>a, b = b, a\n</code></pre>\n\n</div>\n\n\n\n<p>Python allows you to swap variables without needing a temporary variable.</p>\n\n<p><strong>2. List Comprehensions with Conditionals</strong><br>\nBuild lists concisely with conditions:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>squares = [x**2 for x in range(10) if x % 2 == 0]\n</code></pre>\n\n</div>\n\n\n\n<p><strong>3. Unpacking Iterables with the * Operator</strong><br>\nYou can easily unpack parts of a list:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>first, *middle, last = [1, 2, 3, 4, 5]\n</code></pre>\n\n</div>\n\n\n\n<p><strong>4. Using zip to Iterate Over Multiple Iterables</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>names = ['Alice', 'Bob']\nages = [25, 30]\n\nfor name, age in zip(names, ages):\n    print(name, age)\n</code></pre>\n\n</div>\n\n\n\n<p><strong>5. Merging Dictionaries with ** Operator (Python 3.5+)</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>d1 = {'a': 1}\nd2 = {'b': 2}\nmerged = {**d1, **d2}\n</code></pre>\n\n</div>\n\n\n\n<p><strong>6. Using enumerate to Get Index and Value</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>for index, value in enumerate(['a', 'b', 'c']):\n    print(index, value)\n</code></pre>\n\n</div>\n\n\n\n<p><strong>7. Using collections.Counter for Counting</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>from collections import Counter\n\ncounts = Counter('abracadabra')\nprint(counts)\n</code></pre>\n\n</div>\n\n\n\n<p><strong>8. Using set to Remove Duplicates</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>unique = list(set([1, 2, 2, 3, 3, 3]))\n</code></pre>\n\n</div>\n\n\n\n<p><strong>9. Ternary Conditional Expressions</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>status = 'Even' if x % 2 == 0 else 'Odd'\n</code></pre>\n\n</div>\n\n\n\n<p><strong>10. Joining Strings Efficiently</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>words = ['Python', 'is', 'fun']\nsentence = ' '.join(words)\n</code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python course: Tuples","url":"https://dev.to/costa86/python-course-tuples-35od","date":1751119272,"author":"Louren√ßo Costa","guid":174465,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmedia1.tenor.com%2Fm%2Fj9TYR-agqh4AAAAC%2Fstanley-boo.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmedia1.tenor.com%2Fm%2Fj9TYR-agqh4AAAAC%2Fstanley-boo.gif\" width=\"360\" height=\"202\"></a></p>\n\n<p>Similar to lists, a tuple is another way of creating a collection of values in Python. Apart from its syntax, the main difference between lists and tuples is that tuples are immutable, which means you cannot alter, add or remove elements in a tuple after it has been created!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">people_a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">dwight</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">darryl</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">angela</span><span class=\"sh\">\"</span><span class=\"p\">)</span> \n<span class=\"n\">people_b</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">dwight</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">darryl</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">angela</span><span class=\"sh\">\"</span>\n<span class=\"n\">person_a</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">dwight</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n<span class=\"n\">person_b</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">dwight</span><span class=\"sh\">\"</span><span class=\"p\">,)</span>\n<span class=\"n\">crazy_tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">banana</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">A</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">B</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"mf\">50.0</span><span class=\"p\">,</span> <span class=\"p\">{})</span> \n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">people_a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; darryl\n</span></code></pre>\n\n</div>\n\n\n\n<p>A few remarks:</p>\n\n<p><code>people_a</code> and <code>people_b</code></p>\n\n<p>Both are the same thing. The parentheses are optional when declaring tuples, although using them is the most used format. It's the comma-separation that actually creates a tuple!</p>\n\n<p><code>person_a</code> and <code>person_b</code></p>\n\n<p>Also both are the same. Notice the comma at the end, even if there's no second element. If no comma was present, it would be a string!</p>\n\n<p><code>crazy_tuple</code></p>\n\n<p>In a similar way to lists, a tuple can hold values of different types.</p>\n\n<h2>\n  \n  \n  Tuple comprehension\n</h2>\n\n<p>This concept assumes you have read the <em>Loops</em> and the <em>Conditionals</em> posts.</p>\n\n<p>This is an interesting feature in Python that allows you to create tuples using a more concise and readable syntax:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">winners</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">dwight</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">pam</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">angela</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">winners_uppercase</span> <span class=\"o\">=</span> <span class=\"nf\">tuple</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">winners</span><span class=\"p\">)</span>\n<span class=\"n\">winners_containing_letter_a</span> <span class=\"o\">=</span> <span class=\"nf\">tuple</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">winners</span> <span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">a</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">winners_uppercase</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; ('DWIGHT', 'PAM', 'ANGELA') \n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">winners_containing_letter_a</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; ('pam', 'angela')\n</span></code></pre>\n\n</div>\n\n\n\n<p>Explaining:</p>\n\n<p><code>winners_uppercase</code></p>\n\n<p>This is a tuple created with tuple comprehension. Let's go over its details in two parts:</p>\n\n<ol>\n<li>DeÔ¨Ånes what will be in the new tuple: <code>i.upper()</code>\n</li>\n<li>DeÔ¨Ånes the iteration over the original tuple: <code>for i in winners</code>\n</li>\n</ol>\n\n<p><code>winners_containing_letter_a</code></p>\n\n<p>Also a tuple created with tuple comprehension. There's a third part now:</p>\n\n<ol>\n<li>DeÔ¨Ånes what will be in the new tuple: <code>i</code>\n</li>\n<li>DeÔ¨Ånes the iteration over the original tuple: <code>for i in winners</code>\n</li>\n<li>DeÔ¨Ånes a conditional for i to be added to the new tuple: <code>if \"a\" in i</code> (if the letter \"a\" is found in i)</li>\n</ol>\n\n<h2>\n  \n  \n  Accessing indexes in tuples\n</h2>\n\n<p>The indexing rules and syntax for getting targeted elements and slices as seen in the <a href=\"https://dev.to/costa86/python-course-lists-11d8\"><em>Lists</em></a> post are valid for tuples too:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">jim</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">pam</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">dwight</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">angela</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>  <span class=\"c1\"># =&gt; dwight\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>  <span class=\"c1\"># =&gt; angela\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">])</span>  <span class=\"c1\"># =&gt; ('jim','pam')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<blockquote>\n<p>üòä Enjoying this series? The full book contains even more content! Support my work by purchasing the complete book in digital or paperback formats. Click below to find out more.<br>\n<a href=\"https://buymeacoffee.com/costa86/e/424861\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F97kfgviyhezekzsuaiwp.png\" alt=\"Alt text\" width=\"800\" height=\"199\"></a></p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  Tuples vs Lists\n</h2>\n\n<p>In case you are wondering when to use lists or tuples, since they are so similar, here's a few points for your consideration:</p>\n\n<ul>\n<li>\n<strong>Tuples</strong> are a good choice when you want to ensure the elements are not accidentally modified. This is because tuples are immutable, meaning their elements cannot be changed once the tuple is created. If you have data that should remain constant, then using a tuple is a suitable option.</li>\n<li>\n<strong>Tuples</strong> are optimized for performance in certain operations. They are faster for operations such as iterating over their elements or accessing them via index. If you need to access or iterate over the elements of a collection but don't need to modify it, using a tuple can be more suitable compared to a list.</li>\n<li>\n<strong>Lists</strong> provide more flexibility compared to tuples. They allow you to change, add, or delete elements in a collection. If you anticipate needing to modify the elements of a collection or require more flexibility in general, then a list would be a more suitable choice.</li>\n</ul>\n\n<p>Follow me around:<br>\n<a href=\"https://www.linkedin.com/in/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">LinkedIn</a>\n <a href=\"https://www.buymeacoffee.com/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">Buy me a coffee</a>\n <a href=\"https://github.com/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">GitHub</a>\n <a href=\"https://dev.to/costa86\" class=\"ltag_cta ltag_cta--branded\">Dev.to</a>\n </p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Constructors and Destructors in Object-Oriented Programming","url":"https://dev.to/hazrat-ali9/python-constructors-and-destructors-in-object-oriented-programming-41nc","date":1751118830,"author":"Hazrat Ali","guid":174436,"unread":true,"content":"<p>Python constructors and destructors are crucial concepts in object-oriented programming that play a vital role in defining and managing objects. Constructors are used to initialize the object with default values, while destructors are responsible for releasing resources and performing clean-up operations when the object is no longer in use. </p>\n\n<p>The Role of Constructors in Python: Initialization of Objects</p>\n\n<p>Constructors in Python serve a crucial role in initializing objects by setting initial values to attributes. Using constructors, developers can ensure that objects are properly instantiated with the required values, providing a solid foundation for further operations. </p>\n\n<p>Destructors in Python: Proper Resource Management and Cleanup</p>\n\n<p>Destructors play a crucial role in managing resources efficiently by deallocating memory and performing necessary cleanup tasks when objects are no longer needed. In Python, destructors are defined using the __del__ method and are automatically called when an object is about to be destroyed. </p>\n\n<p>Key Differences Between Constructors and Destructors</p>\n\n<p>While constructors and destructors both contribute to the lifecycle of objects in Python, they serve distinct purposes. Constructors, defined using the __init__ method, are responsible for initializing object attributes and setting up the object state. On the other hand, destructors (implemented with the __del__ method) are essential for releasing resources and performing cleanup operations before the object is destroyed. </p>\n\n<p>Common Use Cases for Constructors and Destructors in Python Applications</p>\n\n<p>Constructors are frequently utilized for initializing instance variables, configuring object properties, and performing setup tasks when a class is instantiated. This includes setting default attribute values and establishing connections to databases or external services. On the other hand, destructors are commonly employed to release external resources like file handles, network connections, or database connections when the object is no longer needed. </p>\n\n<p>Best Practices for Effectively Using Constructors and Destructors in Your Code</p>\n\n<p>When utilizing constructors, ensure they remain simple and focused on initializing instance variables rather than performing complex operations. This will keep your code clean and easy to maintain. Additionally, consider using constructors to validate input parameters and handle any potential errors during initialization.</p>\n\n<p>Conclusion: Mastering Object Lifecycle Management in Python</p>\n\n<p>Understanding the importance of constructors and destructors is pivotal in ensuring a well-structured and efficient Python codebase. By prioritizing clean and focused constructor implementations for initializing instance variables and handling.</p>\n\n<p>Portfolio : <a href=\"https://hazratali.dev/\" rel=\"noopener noreferrer\">https://hazratali.dev/</a><br>\nProblem Solving : <a href=\"https://hazratalips.com/\" rel=\"noopener noreferrer\">https://hazratalips.com/</a><br>\nBlog : <a href=\"https://hazrataliblog.com/\" rel=\"noopener noreferrer\">https://hazrataliblog.com/</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Trending Weekly #108ÔºöWill AI Replace Junior Developers?","url":"https://dev.to/pythoncat/python-trending-weekly-108will-ai-replace-junior-developers-258e","date":1751118395,"author":"Python Trending Weekly","guid":174431,"unread":true,"content":"<p>Welcome to Python Trending Weekly - your gateway to cutting-edge Python intelligence! Curated by Python Cat from 400+ premium sources worldwide, we deliver the most valuable articles, tutorials, open-source projects, tools, podcasts, videos, and trending discussions directly to your inbox. Our mission: Accelerate your Python mastery and unlock new career opportunities in the ever-evolving tech landscape.</p>\n\n<p><strong>Stay ahead of the curve:</strong> <a href=\"https://www.patreon.com/pythonweekly\" rel=\"noopener noreferrer\">Subscribe now</a> for weekly insights that keep you at the forefront of Python innovation!</p>\n\n<p>This week we're sharing 12 articles, 12 open source projects, 2 podcasts &amp; videos</p>\n\n<p>Here are the title summaries for this issue: </p>\n\n<p><strong><a href=\"https://weekly.pythoncat.top\" rel=\"noopener noreferrer\">ü¶ÑArticles &amp; Tutorials</a></strong></p>\n\n<p>‚ë† My First Open Source AI Generated Library</p>\n\n<p>‚ë° Fun with uv and PEP 723</p>\n\n<p>‚ë¢ Will AI Replace Junior Developers? I Asked Experts at Pycon US</p>\n\n<p>‚ë£ Fixing Python Properties</p>\n\n<p>‚ë§ Python can run Mojo now</p>\n\n<p>‚ë• Django: Introducing inline-snapshot-django</p>\n\n<p>‚ë¶ Cut Django Database Latency by 50-70ms With Native Connection Pooling</p>\n\n<p>‚ëß The Waiting Time Paradox, or, Why Is My Bus Always Late?</p>\n\n<p>‚ë® Kalman and Bayesian Filters in Python</p>\n\n<p>‚ë© Switching from virtualenvwrapper to direnv, Starship, and uv</p>\n\n<p>‚ë™ How to think about agent frameworks</p>\n\n<p>‚ë´ Lessons From 9 More Years of Tricky Bugs</p>\n\n<p><strong><a href=\"https://weekly.pythoncat.top\" rel=\"noopener noreferrer\">üêøÔ∏èProjects &amp; Resources</a></strong></p>\n\n<p>‚ë† gemini-cli: An open-source AI agent that brings the power of Gemini directly into your terminal</p>\n\n<p>‚ë° nxtscape: Nxtscape is an open-source agentic browser</p>\n\n<p>‚ë¢ augmentoolkit: Create Custom LLMs</p>\n\n<p>‚ë£ BitNet: Official inference framework for 1-bit LLMs</p>\n\n<p>‚ë§ local-deep-research: AI-powered assistant for deep, iterative research</p>\n\n<p>‚ë• pyfuze: Package Python projects into executables</p>\n\n<p>‚ë¶ nbdev: Create delightful software with Jupyter Notebooks</p>\n\n<p>‚ëß fastapi_mcp: Expose your FastAPI endpoints as Model Context Protocol (MCP) tools, with Auth!</p>\n\n<p>‚ë® Awesome-ML-SYS-Tutorial: My learning notes/codes for ML SYS</p>\n\n<p>‚ë© machine-learning-visualized: ML algorithms implemented and derived from first-principles in Jupyter Notebooks and NumPy</p>\n\n<p>‚ë™ code-graph-rag: Search Monorepos and get relevant answers</p>\n\n<p>‚ë´ FeedMe: AI-powered RSS reader, deployable to GitHub Pages or with Docker</p>\n\n<p><strong><a href=\"https://weekly.pythoncat.top\" rel=\"noopener noreferrer\">üê¢Podcasts &amp; Videos</a></strong></p>\n\n<p>‚ë† Watch the DjangoCon Europe 2025 talks</p>\n\n<p>‚ë° Add Features Without Touching Source Code!</p>\n\n<p>Cut through the noise with our premium subscription at $4.99/month. Get hand-picked, cutting-edge Python content delivered weekly. Join 350+ professionals who trust us to filter the best from 400+ sources for technical vision expansion and career development. Subscribe at: <a href=\"https://www.patreon.com/pythonweekly\" rel=\"noopener noreferrer\">Patreon</a></p>\n\n<p>After subscribing, you can view the full text of Issue 108 for free: <a href=\"https://www.patreon.com/posts/python-trending-132603667\" rel=\"noopener noreferrer\">https://www.patreon.com/posts/python-trending-132603667</a></p>\n\n<p><a href=\"https://pythoncat.top/posts/2025-04-20-sweekly\" rel=\"noopener noreferrer\">Python Trending Weekly Season 3 Summary with E-book Download</a></p>\n\n<p><a href=\"https://pythoncat.top/posts/2025-04-20-iweekly\" rel=\"noopener noreferrer\">Python Trending Weekly Season 2 Complete Collection (Issues 31-60)</a></p>\n\n<p><a href=\"https://pythoncat.top/posts/2023-12-11-weekly\" rel=\"noopener noreferrer\">Python Trending Weekly Season 1 Highlights Collection (Issues 1-30)</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Project] EPL 2024/25 Season Team Performance Dashboard Two (Interactive Python & Tableau Visualizations)","url":"https://dev.to/ezeeyeyo/project-epl-202425-season-team-performance-dashboard-two-interactive-python-tableau-1hhn","date":1751117119,"author":"Marina Kim(Eunji)","guid":174435,"unread":true,"content":"<p>This Personal project explores England Premier League(EPL) 2024/25 season team performances through interactive dashboards built with Python(Streamlit) and Tableau Public.</p>\n\n\n\n\n<h1>\n  \n  \n  About This Project\n</h1>\n\n<p>I created this project to visualize EPL team stats the 2024/25 season using multiple tools. The goal was to build interactive and intuitive dashboards that let users explore home and away performance, match averages, and league rankings.<br>\nThe dataset comes from footballdata.co.uk, a public resource for football statistics.</p>\n\n\n\n\n<h1>\n  \n  \n  Dataset\n</h1>\n\n<p>The data covers match results including:</p>\n\n<ul>\n<li>Match Date(Date)</li>\n<li>Home and Away Teams(HomeTeam, AwayTeam)</li>\n<li>Full-time Goals scored by Home and Away teams(FTHG, FTAG)</li>\n<li>Match Outcome(FTR: Home Win(H)/ Draw(D)/ Away Win(A))</li>\n</ul>\n\n\n\n\n<h1>\n  \n  \n  Tools &amp; Approach\n</h1>\n\n<ul>\n<li>\n<strong>Python &amp; Streamlit</strong> for interactive web dashboard with filters and dynamic</li>\n<li>\n<strong>Tableau Public</strong> for rich, visual dashboards accessible online</li>\n</ul>\n\n<p>The Python code processes match data by separating home and away results, calculates team totals, averages, points, goal differences, and ranks teams accoredingly.</p>\n\n\n\n\n<h1>\n  \n  \n  Try the Dashboards\n</h1>\n\n<ul>\n<li>\n<strong>Interactive Streamlit Dashboard</strong> \n<a href=\"https://eplstats202425-bttg2hfzcmbeita4th2aez.streamlit.app/\" rel=\"noopener noreferrer\">https://eplstats202425-bttg2hfzcmbeita4th2aez.streamlit.app/</a>\n</li>\n<li>\n<strong>Tableau Public Dashboard</strong>\n<a href=\"https://public.tableau.com/views/team_stats/Dashboard1\" rel=\"noopener noreferrer\">https://public.tableau.com/views/team_stats/Dashboard1</a>\n</li>\n</ul>\n\n\n\n\n<h1>\n  \n  \n  Highlights &amp; Insights\n</h1>\n\n<ul>\n<li>Select teams to compare home vs away records</li>\n<li>View per-match averages of points and goals scored/conceded</li>\n<li>Browse full league table sorted by points, goal difference, and goals scored</li>\n<li>Dynamic visualizations update based on user selection, enhancing data storytelling</li>\n</ul>\n\n\n\n\n<h1>\n  \n  \n  Code Snippet(Data Processing)\n</h1>\n\n<p>import pandas as pd</p>\n\n<p><strong>Load dataset</strong><br>\ndf = pd.read_csv(\"epl_team_summary.csv\")<br>\ndf['Date'] = pd.to_datetime(df['Date'], dayfirst=True)</p>\n\n<p><strong>Process home games</strong><br>\nhome = df[['HomeTeam', 'FTHG', 'FTAG', 'FTR']].copy()<br>\nhome.rename(columns={'HomeTeam': 'Team', 'FTHG': 'GoalsFor', 'FTAG': 'GoalsAgainst'}, inplace=True)<br>\nhome['Win'] = (home['FTR'] == 'H').astype(int)<br>\nhome['Draw'] = (home['FTR'] == 'D').astype(int)<br>\nhome['Loss'] = (home['FTR'] == 'A').astype(int)</p>\n\n<p><strong>Process away games</strong><br>\naway = df[['AwayTeam', 'FTAG', 'FTHG', 'FTR']].copy()<br>\naway.rename(columns={'AwayTeam': 'Team', 'FTAG': 'GoalsFor', 'FTHG': 'GoalsAgainst'}, inplace=True)<br>\naway['Win'] = (away['FTR'] == 'A').astype(int)<br>\naway['Draw'] = (away['FTR'] == 'D').astype(int)<br>\naway['Loss'] = (away['FTR'] == 'H').astype(int)</p>\n\n<p><strong>Combine and calculate team stats</strong><br>\nfull = pd.concat([home, away])<br>\nteam_stats = full.groupby('Team').agg({<br>\n    'Win': 'sum',<br>\n    'Draw': 'sum',<br>\n    'Loss': 'sum',<br>\n    'GoalsFor': 'sum',<br>\n    'GoalsAgainst': 'sum'<br>\n}).reset_index()</p>\n\n<p><strong>Add additional metrics</strong><br>\nteam_stats['Matches'] = team_stats['Win'] + team_stats['Draw'] + team_stats['Loss']<br>\nteam_stats['Points'] = team_stats['Win'] * 3 + team_stats['Draw']<br>\nteam_stats['GD'] = team_stats['GoalsFor'] - team_stats['GoalsAgainst']<br>\nteam_stats['AvgPoints'] = (team_stats['Points'] / team_stats['Matches']).round(2)<br>\nteam_stats['AvgGoalsFor'] = (team_stats['GoalsFor'] / team_stats['Matches']).round(2)<br>\nteam_stats['AvgGoalsAgainst'] = (team_stats['GoalsAgainst'] / team_stats['Matches']).round(2)</p>\n\n<p><strong>Sort and rank</strong><br>\nteam_stats = team_stats.sort_values(by=['Points', 'GD', 'GoalsFor'], ascending=False)<br>\nteam_stats['Rank'] = range(1, len(team_stats) + 1)</p>\n\n<p>‚Üí <strong>Full source code is available on GitHub:</strong><br>\n  <a href=\"https://github.com/k-eunji/eplstats202425\" rel=\"noopener noreferrer\">https://github.com/k-eunji/eplstats202425</a></p>\n\n\n\n\n<h1>\n  \n  \n  What I Learned\n</h1>\n\n<ul>\n<li>Practical data wrangling and aggregation with pandas</li>\n<li>Building interactive dashboards with Streamlit and seaborn</li>\n<li>Designing visually appealing dashboards in Tableau Public</li>\n<li>Sharing dashboards publicly for easy access and engagement</li>\n</ul>\n\n\n\n\n<h1>\n  \n  \n  Final Thoughts\n</h1>\n\n<p>In this project, I primarily used <strong>Python with Streamlit</strong> and <strong>Tableau Public</strong> to create interactive dashboards that are easy to share publicly online.<br>\nAlthough I initially considered using Power BI Desktop, I found it difficult to share dashboards publicly from a persnal account. Because if this limitation, I decided not to use the Power BI version and instead focused on tools that allow simple, free sharing for personal projects.<br>\nAll source code and data files for this project are available on my GitHub:<br>\n<a href=\"https://github.com/k-eunji/eplstats202425\" rel=\"noopener noreferrer\">https://github.com/k-eunji/eplstats202425</a><br>\nFeel free to check it out ands share any feedback!</p>\n\n\n\n\n<p>Thanks for reading!<br>\nMarina Kim (Eunji Kim)</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Chrome Extension for Summarizing YouTube Videos with AI","url":"https://dev.to/ibrahimkamal/chrome-extension-for-summarizing-youtube-videos-with-ai-3mml","date":1751116663,"author":"Ibrahim Kamal","guid":174434,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F81mrdivj8trbohjj8m3x.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F81mrdivj8trbohjj8m3x.png\" alt=\"Image description\" width=\"800\" height=\"500\"></a></p>\n\n<p>Hello to the developer community! Today, I‚Äôd like to share my new project <a href=\"https://chromewebstore.google.com/detail/youtube-snapsummary-ai/jkmgdfefeffdhcoojdkdaiblpjkbfilm\" rel=\"noopener noreferrer\">YouTube SnapSummary AI</a>, carefully crafted to enhance your YouTube experience. Let me introduce you to a Chrome extension that allows you to summarize YouTube videos effortlessly using the power of artificial intelligence.</p>\n\n<h2>\n  \n  \n  The Idea Behind the Project\n</h2>\n\n<p>I was looking for a way to save time while watching long educational videos, so I decided to develop an extension that quickly summarizes content. With the help of AI models like Grok and ChatGPT, it‚Äôs now possible to extract key points from any video with a single click.</p>\n\n<h2>\n  \n  \n  How the Extension Works\n</h2>\n\n<ul>\n<li>Open any video on YouTube.</li>\n<li>You will find the extension box.</li>\n<li>Choose the model you want to use (e.g., ChatGPT, Grok or others).</li>\n<li>Get a quick summary in your preferred language!</li>\n</ul>\n\n<h2>\n  \n  \n  Benefits\n</h2>\n\n<ul>\n<li>Save time by summarizing long videos.</li>\n<li>Support for multiple languages to suit all users.</li>\n<li>Simple and user-friendly interface.</li>\n</ul>\n\n<h2>\n  \n  \n  How to Install the Extension\n</h2>\n\n<ul>\n<li>Go to the Chrome Web Store.</li>\n<li>Search for \"YouTube SnapSummary AI\".</li>\n<li>Click \"Add to Chrome\" and enjoy!</li>\n<li><a href=\"https://chromewebstore.google.com/detail/youtube-snapsummary-ai/jkmgdfefeffdhcoojdkdaiblpjkbfilm\" rel=\"noopener noreferrer\">YouTube SnapSummary AI</a></li>\n</ul>\n\n<h2>\n  \n  \n  Call to the Community\n</h2>\n\n<p>I‚Äôm excited to hear your feedback and suggestions for improving the extension.</p>\n\n<p>Thanks for your support, and I hope you find this extension useful!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python course: Lists","url":"https://dev.to/costa86/python-course-lists-11d8","date":1751114619,"author":"Louren√ßo Costa","guid":174406,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmedia1.tenor.com%2Fm%2FZBDc2PBQmIkAAAAC%2Fpretzel-day.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmedia1.tenor.com%2Fm%2FZBDc2PBQmIkAAAAC%2Fpretzel-day.gif\" width=\"320\" height=\"200\"></a></p>\n\n<p>This is one of the most typical ways in Python to store collections of values.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">winners</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">dwight</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">darryl</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">angela</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">kevin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">phyllis</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">toby</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">oscar</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"n\">crazy_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">banana</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">A</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">B</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"mf\">50.0</span><span class=\"p\">,</span> <span class=\"p\">{}]</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>As seen in <code>crazy_list</code>, a list may hold values of different types.</p>\n</blockquote>\n\n<h2>\n  \n  \n  Accessing elements in a list\n</h2>\n\n<p>A crucial concept to grasp in order to work with lists is \"indexes\". Each element in a list is automatically assigned a number, starting at 0, according to their position.</p>\n\n<p>So in the <code>winners</code> list:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Index</th>\n<th>Negative index</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dwight</td>\n<td>0</td>\n<td>-7</td>\n</tr>\n<tr>\n<td>darryl</td>\n<td>1</td>\n<td>-6</td>\n</tr>\n<tr>\n<td>angela</td>\n<td>2</td>\n<td>-5</td>\n</tr>\n<tr>\n<td>kevin</td>\n<td>3</td>\n<td>-4</td>\n</tr>\n<tr>\n<td>phyllis</td>\n<td>4</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>toby</td>\n<td>5</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>oscar</td>\n<td>6</td>\n<td>-1</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>With that in mind, you can access individual elements by referring to their indexes:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">winners</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; dwight\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">winners</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; ['darryl', 'angela', 'kevin']\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">winners</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; oscar\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">winners</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; ['dwight', 'darryl', 'angela']\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">winners</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">:])</span> <span class=\"c1\"># =&gt; ['phyllis', 'toby', 'oscar']\n</span></code></pre>\n\n</div>\n\n\n\n<p>A few notes:</p>\n\n<p><code>winners[1:4]</code></p>\n\n<p>Note that the syntax for slicing a list is <code>&lt;list&gt;[&lt;Ô¨Åst index&gt; : &lt;last index&gt;]</code>. The Ô¨Årst index is inclusive, and the last index is exclusive. What it means in practice is that \"1:4\" actually ranges the elements starting at index 1 and Ô¨Ånishing at index 3 (4-1). This characteristic is inherited from the mathematical concept of intervals. In this case, the first index 1 is a closed (inclusive) interval, and the second index 4 is an open (exclusive) interval. See below a visual representation of this idea:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>1</th>\n<th>4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[ x ]</td>\n<td>[ ]</td>\n</tr>\n</tbody>\n</table></div>\n\n<p><code>winners[-1]</code></p>\n\n<p>By using a negative number, the index number is counted backwards, where -1 means the last element in the list. So, in this case \"oscar\" can be accessed by both indexes 6 and -1, \"toby\" by 5 and -2, and so on.</p>\n\n<blockquote>\n<p>Being able to select the negative index is very convenient. Let's say you have a huge list and you wish to access its last element. Instead of visually checking its position, you can simply select the index -1.</p>\n</blockquote>\n\n<p><code>winners[:3]</code></p>\n\n<p>Omitting the Ô¨Årst index is a shortcut for the Ô¨Årst index (0), so this is the same as 0:3. </p>\n\n<p><code>winners[4:]</code></p>\n\n<p>Omitting the last index is a shortcut for the last index (-1), so this is the same as 4:-1.</p>\n\n<h2>\n  \n  \n  Validation if a list has elements\n</h2>\n\n<p>This concept assumes you have read both <a href=\"https://dev.to/costa86/python-course-functions-4jga\"><em>Functions</em></a> and <em>Conditionals</em> posts.</p>\n\n<p>Consider the following situation: you have a function that receives a list. If the list has elements, the function performs action \"A\", but if the list is empty, then it performs action \"B\".</p>\n\n<p>You may use the <code>len()</code> function to get the number of elements in a list.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">winners</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">dwight</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">pam</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">angela</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">kevin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">phyllis</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">toby</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">oscar</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"n\">losers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">winners</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; 7\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">losers</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; 0\n</span></code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>The <code>len()</code> function can be used with other types too, such as dicts and strings.</p>\n</blockquote>\n\n<p>It's very common for people to assume you need to check whether the quantity of elements in the list is greater than 0 ( <code>len(winners) &gt; 0</code> ) to accomplish that. But in Python there's a convenient abstraction for checking whether a list has elements or is empty:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">winners</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">dwight</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">pam</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">angela</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">kevin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">phyllis</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">toby</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">oscar</span><span class=\"sh\">\"</span><span class=\"p\">]</span> \n<span class=\"n\">losers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_list</span><span class=\"p\">(</span><span class=\"n\">some_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span> \n    <span class=\"k\">if</span> <span class=\"n\">some_list</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">list has values</span><span class=\"sh\">\"</span><span class=\"p\">)</span> \n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">list is empty</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">handle_list</span><span class=\"p\">(</span><span class=\"n\">winners</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; list has values \n</span><span class=\"nf\">handle_list</span><span class=\"p\">(</span><span class=\"n\">losers</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; list is empty\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  List comprehension\n</h2>\n\n<p>This concept assumes you have read the <em>Loops</em> post.</p>\n\n<p>This is an interesting feature in Python that allows you to create lists using a more concise and readable syntax:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">winners</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">dwight</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">pam</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">angela</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">kevin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">phyllis</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">toby</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">oscar</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># You may also use a tuple as a source:\n# winners = (\"dwight\", \"pam\", \"angela\", \"kevin\", \"phyllis\", \"toby\", \"oscar\")\n</span>\n<span class=\"n\">winners_uppercase</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">winners</span><span class=\"p\">]</span>\n<span class=\"n\">winners_containing_letter_a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">winners</span> <span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">a</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">winners_uppercase</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; ['DWIGHT', 'PAM', 'ANGELA', 'KEVIN', 'PHYLLIS', 'TOBY', 'OSCAR']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">winners_containing_letter_a</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; ['pam', 'angela', 'oscar']\n</span>\n<span class=\"c1\"># Another interesting example is creating a list of numbers...\n</span><span class=\"n\">numbers_from_1_to_5</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)]</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">numbers_from_1_to_5</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; [1, 2, 3, 4, 5]\n</span>\n<span class=\"c1\"># ...and creating a list with the alphabet letters:\n</span><span class=\"n\">alphabet_letters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nf\">chr</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">ord</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">A</span><span class=\"sh\">\"</span><span class=\"p\">),</span> <span class=\"nf\">ord</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">B</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">25</span><span class=\"p\">)]</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">alphabet_letters</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n</span></code></pre>\n\n</div>\n\n\n\n<p>Explaining:</p>\n\n<p><code>winners_uppercase</code></p>\n\n<p>This is a list created with list comprehension. Let's go over its details in two parts:</p>\n\n<ol>\n<li>DeÔ¨Ånes what will be in the new list: <code>i.upper()</code>\n</li>\n<li>DeÔ¨Ånes the iteration over the original list: <code>for i in winners</code> </li>\n</ol>\n\n<p><code>winners_containing_letter_a</code></p>\n\n<p>Also a list created with list comprehension. There's a third part now:</p>\n\n<ol>\n<li>DeÔ¨Ånes what will be in the new list: <code>i</code>\n</li>\n<li>DeÔ¨Ånes the iteration over the original list: <code>for i in winners</code>\n</li>\n<li>DeÔ¨Ånes a conditional for <code>i</code> to be added to the new list: <code>if \"a\" in i</code>(if the letter \"a\" is found in i)</li>\n</ol>\n\n<h2>\n  \n  \n  Some methods in lists\n</h2>\n\n<p>There are many built-in methods to extend the capabilities of a list. Visit <a href=\"https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\" rel=\"noopener noreferrer\">here</a> to see them all.  Next, a few of the most popular ones:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">winners</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">dwight</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">pam</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">angela</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">kevin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">phyllis</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">toby</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">oscar</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">winners</span><span class=\"p\">.</span><span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># The element at index 1 (\"pam\") was removed from the list\n</span>\n<span class=\"n\">winners</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">jim</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"c1\"># Now \"jim\" is included in the list\n</span>\n<span class=\"n\">winners</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">()</span> <span class=\"c1\"># Now the list is in alphabetical order\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">winners</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; ['angela', 'dwight', 'jim', 'kevin', 'oscar', 'phyllis', 'toby']\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<blockquote>\n<p>üòä Enjoying this series? The full book contains even more content! Support my work by purchasing the complete book in digital or paperback formats. Click below to find out more.<br>\n<a href=\"https://buymeacoffee.com/costa86/e/424861\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F97kfgviyhezekzsuaiwp.png\" alt=\"Alt text\" width=\"800\" height=\"199\"></a></p>\n</blockquote>\n\n\n\n\n<p>Follow me around:<br>\n<a href=\"https://www.linkedin.com/in/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">LinkedIn</a>\n <a href=\"https://www.buymeacoffee.com/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">Buy me a coffee</a>\n <a href=\"https://github.com/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">GitHub</a>\n <a href=\"https://dev.to/costa86\" class=\"ltag_cta ltag_cta--branded\">Dev.to</a>\n </p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Fundamentals: attr.s","url":"https://dev.to/devopsfundamentals/python-fundamentals-attrs-4h7k","date":1751113340,"author":"DevOps Fundamental","guid":174405,"unread":true,"content":"<h2>\n  \n  \n  attr.s: Beyond the Basics ‚Äì A Production Deep Dive\n</h2>\n\n<h3>\n  \n  \n  Introduction\n</h3>\n\n<p>In late 2022, a critical incident brought the limitations of naive data class usage into sharp focus at ScaleAI. We were experiencing intermittent, difficult-to-reproduce failures in our model evaluation pipeline. The root cause? A subtle race condition triggered by mutable default arguments within a custom data class used to represent evaluation metrics.  The class was being instantiated concurrently by multiple worker processes, leading to shared state corruption. Replacing these data classes with <code>attr.s</code>-defined classes, leveraging immutability and explicit initialization, resolved the issue and highlighted the power of <code>attr.s</code> for building robust, concurrent systems. This incident underscored that while Python‚Äôs built-in <code>dataclasses</code> are convenient, <code>attr.s</code> offers a level of control and performance crucial for production environments, particularly in cloud-native architectures.</p>\n\n<h3>\n  \n  \n  What is \"attr.s\" in Python?\n</h3>\n\n<p><code>attr.s</code> (from the <code>attrs</code> library) is a decorator that automatically generates methods like <code>__init__</code>, <code>__repr__</code>, <code>__eq__</code>, <code>__hash__</code>, and <code>__lt__</code> for classes. It‚Äôs not merely syntactic sugar for data classes; it‚Äôs a powerful framework for defining classes with a focus on immutability, validation, and conversion.  It predates Python 3.7‚Äôs <code>dataclasses</code> (PEP 557, PEP 563) and offers features and performance characteristics that <code>dataclasses</code> often lack.  </p>\n\n<p>At a CPython level, <code>attr.s</code> utilizes descriptors and metaclasses to dynamically add attributes and methods to the class. This allows for a high degree of customization and control over attribute behavior.  Crucially, <code>attr.s</code> is designed to be highly compatible with type checkers like mypy, providing strong static typing guarantees.  It also integrates seamlessly with other ecosystem tools like Pydantic for data validation and serialization.</p>\n\n<h3>\n  \n  \n  Real-World Use Cases\n</h3>\n\n<ol>\n<li><p><strong>FastAPI Request/Response Models:</strong>  We use <code>attr.s</code> extensively in our FastAPI applications to define request and response schemas. The immutability enforced by <code>attr.s</code> prevents accidental modification of incoming request data, enhancing security.  The automatic <code>__eq__</code> and <code>__hash__</code> methods are vital for caching responses based on request parameters.</p></li>\n<li><p><strong>Async Job Queues (Celery/Dramatiq):</strong>  When defining task payloads for our asynchronous job queues, <code>attr.s</code> provides a concise and type-safe way to represent the data.  Serialization/deserialization is handled efficiently, and the immutability ensures that task arguments remain consistent throughout the queueing process.</p></li>\n<li><p><strong>Type-Safe Data Models for Data Pipelines:</strong>  In our data ingestion pipelines (using Apache Beam and Spark), <code>attr.s</code> classes define the schema for incoming data.  This allows us to perform rigorous type checking and validation early in the pipeline, preventing downstream errors.</p></li>\n<li><p><strong>CLI Tools (Click/Typer):</strong>  For complex command-line interfaces, <code>attr.s</code> simplifies the definition of configuration objects.  The automatic <code>__repr__</code> method provides useful debugging information when errors occur.</p></li>\n<li><p><strong>ML Preprocessing Configuration:</strong>  We use <code>attr.s</code> to define the configuration for our machine learning preprocessing steps.  This allows us to easily version and manage different preprocessing pipelines, and the type checking ensures that the configuration is valid before training begins.</p></li>\n</ol>\n\n<h3>\n  \n  \n  Integration with Python Tooling\n</h3>\n\n<p><code>attr.s</code> plays well with the modern Python tooling stack. Here's a snippet from our <code>pyproject.toml</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight toml\"><code><span class=\"nn\">[tool.mypy]</span>\n<span class=\"py\">python_version</span> <span class=\"p\">=</span> <span class=\"s\">\"3.11\"</span>\n<span class=\"py\">strict</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n<span class=\"py\">warn_unused_configs</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n<span class=\"py\">plugins</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"s\">\"mypy_attrs\"</span><span class=\"p\">]</span>\n\n<span class=\"nn\">[tool.pytest.ini_options]</span>\n<span class=\"py\">addopts</span> <span class=\"p\">=</span> <span class=\"py\">\"--attr-cls</span><span class=\"p\">=</span><span class=\"err\">attr.s</span><span class=\"s\">\" # Important for pytest-attrs plugin</span><span class=\"err\">\n</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The <code>mypy_attrs</code> plugin is essential for full type checking support.  The <code>pytest-attrs</code> plugin provides convenient fixtures for testing <code>attr.s</code> classes.  We also use Pydantic for serialization/deserialization, leveraging <code>attr.s</code> for the underlying data model definition.  Runtime hooks are often implemented using <code>attr.validators</code> to enforce constraints on attribute values.</p>\n\n<h3>\n  \n  \n  Code Examples &amp; Patterns\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">attr</span>\n<span class=\"kn\">import</span> <span class=\"n\">typing</span> <span class=\"k\">as</span> <span class=\"n\">t</span>\n\n<span class=\"nd\">@attr.s</span><span class=\"p\">(</span><span class=\"n\">auto_attribs</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">frozen</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"nf\">ib</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">schema_field</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user_id</span><span class=\"sh\">\"</span><span class=\"p\">})</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"nf\">ib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@attr.derived</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">full_name</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\"> (</span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">email</span> <span class=\"ow\">or</span> <span class=\"sh\">'</span><span class=\"s\">no email</span><span class=\"sh\">'</span><span class=\"si\">}</span><span class=\"s\">)</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># Configuration class with validation\n</span>\n<span class=\"nd\">@attr.s</span><span class=\"p\">(</span><span class=\"n\">auto_attribs</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">frozen</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">DatabaseConfig</span><span class=\"p\">:</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"nf\">ib</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"n\">validators</span><span class=\"p\">.</span><span class=\"nf\">instance_of</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">))</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"nf\">ib</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"n\">validators</span><span class=\"p\">.</span><span class=\"nf\">instance_of</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">))</span>\n    <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"nf\">ib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">default_user</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The <code>auto_attribs=True</code> flag simplifies attribute definition. <code>frozen=True</code> enforces immutability. <code>attr.ib</code> allows for detailed control over attribute behavior, including default values and validators.  <code>@attr.derived</code> is used to define computed properties.</p>\n\n<h3>\n  \n  \n  Failure Scenarios &amp; Debugging\n</h3>\n\n<p>A common pitfall is forgetting to handle mutable default arguments. Consider this incorrect example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@attr.s</span><span class=\"p\">(</span><span class=\"n\">auto_attribs</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Event</span><span class=\"p\">:</span>\n    <span class=\"n\">attendees</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"nf\">ib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[])</span>  <span class=\"c1\"># WRONG! Mutable default\n</span>\n</code></pre>\n\n</div>\n\n\n\n<p>If multiple <code>Event</code> instances are created, they will all share the same <code>attendees</code> list, leading to unexpected behavior.  The correct approach is to use <code>attr.ib(factory=list)</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@attr.s</span><span class=\"p\">(</span><span class=\"n\">auto_attribs</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Event</span><span class=\"p\">:</span>\n    <span class=\"n\">attendees</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"nf\">ib</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">)</span>  <span class=\"c1\"># Correct\n</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Debugging <code>attr.s</code> related issues often involves using <code>pdb</code> to inspect the state of the object during initialization.  <code>logging</code> can be used to track attribute values and identify unexpected changes.  Runtime assertions can help catch invalid states early on.  We've also used <code>cProfile</code> to identify performance bottlenecks in complex <code>attr.s</code> classes.</p>\n\n<h3>\n  \n  \n  Performance &amp; Scalability\n</h3>\n\n<p><code>attr.s</code> generally outperforms <code>dataclasses</code> in scenarios involving frequent object creation and destruction, due to its more optimized attribute access.  However, performance can be impacted by excessive use of validators or derived properties.  </p>\n\n<p>We benchmarked object creation using <code>timeit</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">timeit</span>\n\n<span class=\"n\">setup</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">\nimport attr\n@attr.s(auto_attribs=True, frozen=True)\nclass MyClass:\n    x: int\n    y: str\n</span><span class=\"sh\">\"\"\"</span>\n\n<span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">\nMyClass(1, </span><span class=\"sh\">\"</span><span class=\"s\">test</span><span class=\"sh\">\"</span><span class=\"s\">)\n</span><span class=\"sh\">\"\"\"</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">timeit</span><span class=\"p\">.</span><span class=\"nf\">timeit</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">setup</span><span class=\"o\">=</span><span class=\"n\">setup</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">1000000</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<p>To optimize performance, avoid global state within <code>attr.s</code> classes.  Reduce allocations by reusing objects whenever possible.  For computationally intensive derived properties, consider caching the results.  In extreme cases, C extensions can be used to further optimize attribute access.</p>\n\n<h3>\n  \n  \n  Security Considerations\n</h3>\n\n<p>Insecure deserialization is a major risk when using <code>attr.s</code> classes to represent data received from external sources.  If the class contains attributes that can be exploited (e.g., code execution), deserializing untrusted data can lead to code injection or privilege escalation.  </p>\n\n<p>Mitigations include:</p>\n\n<ul>\n<li>  <strong>Input Validation:</strong>  Thoroughly validate all input data before deserialization.</li>\n<li>  <strong>Trusted Sources:</strong>  Only deserialize data from trusted sources.</li>\n<li>  <strong>Defensive Coding:</strong>  Avoid using attributes that can be exploited.</li>\n<li>  <strong>Sandboxing:</strong>  Run deserialization in a sandboxed environment.</li>\n</ul>\n\n<h3>\n  \n  \n  Testing, CI &amp; Validation\n</h3>\n\n<p>We employ a multi-layered testing strategy:</p>\n\n<ul>\n<li>  <strong>Unit Tests:</strong>  Verify the correctness of individual <code>attr.s</code> classes and their attributes.</li>\n<li>  <strong>Integration Tests:</strong>  Test the interaction between <code>attr.s</code> classes and other components of the system.</li>\n<li>  <strong>Property-Based Tests (Hypothesis):</strong>  Generate random inputs to test the robustness of <code>attr.s</code> classes.</li>\n<li>  <strong>Type Validation (mypy):</strong>  Ensure that the code conforms to the defined type annotations.</li>\n</ul>\n\n<p>Our CI pipeline (GitHub Actions) includes:</p>\n\n<ul>\n<li>  <code>pytest</code> with the <code>attr-cls=attr.s</code> option.</li>\n<li>  <code>mypy</code> with the <code>mypy_attrs</code> plugin.</li>\n<li>  <code>tox</code> to run tests in different Python environments.</li>\n<li>  Pre-commit hooks to enforce code style and type checking.</li>\n</ul>\n\n<h3>\n  \n  \n  Common Pitfalls &amp; Anti-Patterns\n</h3>\n\n<ol>\n<li> <strong>Mutable Default Arguments:</strong> As shown earlier, this leads to shared state corruption.</li>\n<li> <strong>Overuse of Validators:</strong>  Excessive validation can significantly impact performance.</li>\n<li> <strong>Ignoring Immutability:</strong>  Failing to leverage <code>frozen=True</code> when immutability is desired.</li>\n<li> <strong>Complex Derived Properties:</strong>  Computationally expensive derived properties can become bottlenecks.</li>\n<li> <strong>Lack of Type Annotations:</strong>  Neglecting to add type annotations reduces the benefits of <code>attr.s</code> and mypy.</li>\n<li> <strong>Incorrect Use of <code>factory</code>:</strong> Using <code>factory</code> with a mutable object without careful consideration of its lifecycle.</li>\n</ol>\n\n<h3>\n  \n  \n  Best Practices &amp; Architecture\n</h3>\n\n<ul>\n<li>  <strong>Type-Safety First:</strong>  Always use type annotations with <code>attr.s</code> classes.</li>\n<li>  <strong>Immutability Where Possible:</strong>  Leverage <code>frozen=True</code> to prevent accidental modification.</li>\n<li>  <strong>Separation of Concerns:</strong>  Keep <code>attr.s</code> classes focused on data representation.</li>\n<li>  <strong>Defensive Coding:</strong>  Validate all input data.</li>\n<li>  <strong>Configuration Layering:</strong>  Use configuration classes to manage application settings.</li>\n<li>  <strong>Dependency Injection:</strong>  Use dependency injection to decouple components.</li>\n<li>  <strong>Automation:</strong>  Automate testing, linting, and deployment.</li>\n<li>  <strong>Reproducible Builds:</strong>  Use Docker or other containerization technologies.</li>\n<li>  <strong>Documentation:</strong>  Provide clear and concise documentation for all <code>attr.s</code> classes.</li>\n</ul>\n\n<h3>\n  \n  \n  Conclusion\n</h3>\n\n<p><code>attr.s</code> is a powerful tool for building robust, scalable, and maintainable Python systems. While <code>dataclasses</code> offer a simpler alternative, <code>attr.s</code> provides a level of control, performance, and integration with the Python ecosystem that is essential for production environments.  Mastering <code>attr.s</code> is an investment that pays dividends in terms of code quality, reliability, and long-term maintainability.  Refactor legacy code to utilize <code>attr.s</code>, measure performance improvements, write comprehensive tests, and enforce linting and type checking to unlock its full potential.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üöÄ Day 2: Controlling the Flow ‚Äì Python Core Concepts Unlocked","url":"https://dev.to/rudra_ai/day-2-controlling-the-flow-python-core-concepts-unlocked-37bc","date":1751109170,"author":"Rudra AI","guid":174375,"unread":true,"content":"<h2>\n  \n  \n  Today I dived deeper into the logic behind programs ‚Äî understanding how to make decisions, repeat actions, store collections, and handle unexpected input.\n</h2>\n\n<blockquote>\n<p>These aren‚Äôt just syntax lessons ‚Äî they‚Äôre the tools for building intelligence in software.</p>\n</blockquote>\n\n<p>Here‚Äôs what I learned:</p>\n\n<p>üîÄ Conditionals ‚Äì Making Smart Decisions<br>\nPython‚Äôs if, elif, and else statements let us build logic into our programs. Based on different conditions, the program responds differently.</p>\n\n<p>üßæ Example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>if user == \"admin\":\n    print(\"Full access!\")\nelif user == \"guest\":\n    print(\"Limited access\")\nelse:\n    print(\"Access denied\")\n</code></pre>\n\n</div>\n\n\n\n<p>Where it's used: authentication systems, AI branching logic, UI state changes.</p>\n\n<p>üîÑ Loops ‚Äì Automating Repetitive Tasks<br>\nWhy repeat yourself when code can do it for you? Today, I practiced both for and while loops.</p>\n\n<p>üßæ Example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>for i in range(5, 0, -1):\n    print(f\"Launch in {i}...\")\nprint(\"Blast off! üöÄ\")\n</code></pre>\n\n</div>\n\n\n\n<p>Use cases: data analysis, simulations, automation scripts, training loops in ML.</p>\n\n<p>üìö Lists &amp; Tuples ‚Äì Organizing Data<br>\nI explored how to store groups of data efficiently using lists (mutable) and tuples (immutable).</p>\n\n<p>üßæ Example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\n shopping_list = [\"apples\", \"milk\"]\nshopping_list.append(\"bread\")  # Can be modified\n</code></pre>\n\n</div>\n\n\n\n<p>coordinates = (12.5, 8.3)      # Fixed and protected<br>\nTip: Use tuples for values you don‚Äôt want changed (like coordinates or configurations).</p>\n\n<p>‚ö†Ô∏è Error Handling ‚Äì Making Code Safe<br>\nI learned how to make my code more robust by catching errors that might crash a program.</p>\n\n<p>üßæ Example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>try:\n    age = int(input(\"Enter your age: \"))\nexcept ValueError:\n    print(\"Please enter numbers only!\")\n</code></pre>\n\n</div>\n\n\n\n<p>Why it matters: Crucial for real-world applications where input is unpredictable.</p>\n\n<p>üß™ Mini-Projects I Built Today<br>\n1Ô∏è‚É£ Smart Temperature Advisor ‚Äì Gives clothing suggestions based on temperature.<br>\n2Ô∏è‚É£ To-Do List Manager ‚Äì Adds/removes tasks using loops and lists.<br>\n3Ô∏è‚É£ Number Guessing Game ‚Äì Combines everything: conditionals, loops, input, output, and logic!</p>\n\n<p>üí° Key Takeaway<br>\nProgramming is not just about writing code ‚Äî it‚Äôs about thinking logically and designing systems that interact with real users and data.</p>\n\n<p>Each new concept today is a tool I‚Äôll later use to build intelligent systems and AI applications.</p>\n\n<p>üì£ To My Fellow Learners:<br>\nWhat's one beginner-friendly project that helped you understand conditionals or loops better?</p>\n\n<p>Let‚Äôs build smarter, together. üí¨üëá</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üß† Day 01: Python Basics Unlocked ‚Äì Variables, Operators & I/O","url":"https://dev.to/rudra_ai/day-01-python-basics-unlocked-variables-operators-io-4d5m","date":1751105548,"author":"Rudra AI","guid":174343,"unread":true,"content":"<h2>\n  \n  \n  Today marks the beginning of my AI learning challenge ‚Äî and I‚Äôm starting right at the roots: Python basics.\n</h2>\n\n<p>Here‚Äôs a simple breakdown of what I explored today:</p>\n\n<p>1Ô∏è‚É£ Variables ‚Äì Your Data Containers üì¶<br>\nVariables are like little boxes that hold data for you ‚Äî whether it‚Äôs a name, a number, or something more complex.</p>\n\n<p>üßæ Example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>my_name = \"Rudra\"\nHere, my_name is the label, and \"Rudra\" is the value stored in it.\n</code></pre>\n\n</div>\n\n\n\n<p>2Ô∏è‚É£ Operators ‚Äì Action Heroes of Code ‚ûï‚ûñ‚úñÔ∏è‚ûó<br>\nOperators let you perform tasks on your data, like math or comparisons.</p>\n\n<p>Types of Operators:</p>\n\n<ul>\n<li>Arithmetic: +, -, *, /</li>\n<li>Comparison: ==, !=, &lt;, &gt;</li>\n<li>Logical: and, or, not</li>\n</ul>\n\n<p>üßæ Example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code> total = 10 + 5\n</code></pre>\n\n</div>\n\n\n\n<p>3Ô∏è‚É£ Input &amp; Output ‚Äì Talking to Your Code üó£Ô∏èüëÇ<br>\nI/O lets your program interact with the outside world.</p>\n\n<p>Input gets data from the user</p>\n\n<p>Output shows data to the user</p>\n\n<p>üßæ Example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>user_name = input(\"What's your name? \")\nprint(\"Hello, \" + user_name + \"!\")\n</code></pre>\n\n</div>\n\n\n\n<p>üß≠ Why These Matter<br>\nThese three concepts ‚Äî variables, operators, and I/O ‚Äî are the foundation of everything you'll build in Python. Mastering them means unlocking the door to more advanced topics like data structures, algorithms, and AI models.</p>\n\n<p>I‚Äôm logging my journey daily. If you‚Äôre just starting out too, I‚Äôd love to hear what concepts helped you the most. Drop a comment below! üëá</p>\n\n<p>Want a cheat sheet version of this? Let me know, and I‚Äôll make one! üßæ‚ú®</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Boost]","url":"https://dev.to/setrathexx/-16a7","date":1751103186,"author":"SetraTheX","guid":174305,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/setrathexx\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F3278123%2F62ec0628-4a1c-4f96-8447-ecb24af00e4f.jpeg\" alt=\"setrathexx\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/setrathexx/how-i-built-a-smarter-zip-engine-with-ai-my-day-9-10-journey-pagonic-project-262m\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>How I Built a Smarter ZIP Engine with AI: My Day 9 &amp; 10 Journey (Pagonic Project)</h2>\n      <h3>SetraTheX „Éª Jun 26</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#ai</span>\n        <span class=\"ltag__link__tag\">#opensource</span>\n        <span class=\"ltag__link__tag\">#softwareengineering</span>\n        <span class=\"ltag__link__tag\">#python</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"from poetry to uv","url":"https://dev.to/amarao/poetry-uv-3l32","date":1751100298,"author":"George Shuklin","guid":174274,"unread":true,"content":"<p>I've done my fourth project conversion from Poetry (or a plain pip) to uv.</p>\n\n<p>Results: absolutely zero issues.</p>\n\n<p>Moreover, I have an interesting imrovement. The real reproducible CI image (debian with terraform, just, ansible, sops).</p>\n\n<p>Sizes for tar files for a Docker image:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>- poetry (ci image size 264M, build time 2:17-2:26)\n+ uv (ci image size 235M, build time 1:30-1:50)\n</code></pre>\n\n</div>\n\n\n\n<p>A Python application takes additional ~30MB more in archived state. Why? Because of dependencies. A lot of them. Uv is not small (44MB, but Python one is enormous).</p>\n\n<p>Also, you can see how faster image build become. Most of the build time is Ansible collection installation time (I can't reduce that one), but installation time for all python stack (mostly Ansible and it's dependencies) shrunk from significant to negligible.</p>\n\n<p>Build process spend now more time on apt than on python packages. With poetry and pip, those times were comparable.</p>\n\n<p>I identified two different ways to use uv in the CI image: with uv and without.</p>\n\n<p>If uv is present in the image, you need install it, and you need <code>pyproject.toml</code> and <code>uv.lock</code> files.</p>\n\n<p>If uv is not used, you need to use some other process (usually, the operator) to export dependencies into requirements.txt (with hashes) via uv export. And you can skip copying pyproject.toml file completely.</p>\n\n<p>After trying both ways I more inclined to use <code>with uv</code> (because it's faster, way, way faster). It also removes hassle for creating venv as separate comand. A simple <code>uv sync</code> do the job.</p>\n\n<p>Also, in <code>with uv</code> I can skip python3-pip package, which alleviate some of the size price from adding uv.</p>\n\n<p>Three projects I migrated by hands.</p>\n\n<p>On my fourth project I found even faster way to do it.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>uvx migrate-to-uv\n</code></pre>\n\n</div>\n\n\n\n<p>It does not exclude CI work (images, etc), but reduce cognitive load on converting pyproject.toml.</p>\n\n<h1>\n  \n  \n  ... Why not poetry?\n</h1>\n\n<p>Even without 'speed' factor I got two big issues with poetry.</p>\n\n<ol>\n<li><p>They started well, got into modern distributions (<code>apt-get install python3-poetry</code>), but they broke compatibility in 1.6-2.0, in such a way, that you can't have <code>pyproject.toml</code> been compatible with both. It's moving too fast and breaks too many things to be a packet manager.</p></li>\n<li><p>I found odd situation that it flips random write bits on installed packets. I build reproducible images, so I have runs, where diffoscope see something odd, like 0754 in one image and 0757 in another. I rune out everything but poetry, and poetry does this. Maybe I should file a bug for this? But I have no definitive proofs (it's probabilistic, random file at random run), and I know how much time I would spend reporting this thing. I already lost few days of my work time nailing problem down. Instead I move from poetry.</p></li>\n<li><p>There was time when it was possible to use poetry without poetry (<code>poetry export</code>) but they decided it's too easy to use and moved into separate package, deprecating and removing function from the main package. They have reasons. To make things more complex than they should be. I have reasons. To move on.</p></li>\n</ol>\n\n<p>All this leads to 'should we try uv?', and I tried. Project #1 was simple and migration was trivial. Project #2 was simple and migration was okay (because of CI nuances and internal policies on artifacts). Project #3 (where I tried <code>uv export</code> was okay, but I had to add an additional job to check if uv export is not stale. I didn't liked it. Project #4 was converted in less than hour (including Hadolint nitpicking), and it was straightforward and simple.</p>\n\n<p>And it was reproducible from the first attempt. No more odd caches rm at the end of stage (poetry still leaves some randomness even with --no-cache), just simple <code>uv sync --no-cache</code>.</p>\n\n<p>What I miss is a docker image with uv. Writing 'copy --from' in the Dockerfile is much nicer than my current UV downloading code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>    <span class=\"o\">&amp;&amp;</span> bash <span class=\"nt\">-c</span> <span class=\"s2\">\"curl -L https://github.com/astral-sh/uv/releases/download/0.7.16/uv-x86_64-unknown-linux-musl.tar.gz | tar xz --wildcards */uv\"</span> <span class=\"se\">\\</span>\n    <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">mv </span>uv-x86_64-unknown-linux-musl/uv /usr/local/bin <span class=\"se\">\\</span>\n    <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo </span>6538516743f9c33aec8e53398730dcc55c6bbcbe2f660a7757c10d358b85e675  /usr/local/bin/uv | <span class=\"nb\">sha256sum</span> <span class=\"nt\">-c</span> <span class=\"se\">\\</span>\n</code></pre>\n\n</div>\n\n\n\n<p>compare to my TF code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code># from hashicorp/terraform:1.12 at 2025-06-22\nFROM hashicorp/terraform@sha256:f5ac787eee9d292b6a3b97d40f04019ce08189d356233fc73d5ec7ef8529cce2 as terraform\n...\nCOPY --from=terraform /bin/terraform /usr/local/bin/\n</code></pre>\n\n</div>\n\n\n\n<p>(Yep, price for hash pinning is high).</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Beginner to Pro: Master Python Lists, Tuples, Sets, and Dictionaries Step-by-Step","url":"https://dev.to/abuhorairatarif/beginner-to-pro-master-python-lists-tuples-sets-and-dictionaries-step-by-step-1o23","date":1751093260,"author":"Abu Horaira Tarif","guid":174217,"unread":true,"content":"<p>Alright, let‚Äôs jump into the awesome world of Python‚Äôs basic data structures!<br>\nThink of me as your friendly tour guide‚Äîhere to make everything simple and fun.</p>\n\n<p>By the time we‚Äôre done, you‚Äôll feel confident using lists, tuples, sets, and dictionaries‚Äîthe core tools that help you organize and manage data in almost every Python program you‚Äôll ever write. Let‚Äôs get started! </p>\n<h2>\n  \n  \n  The Foundation: What Are Data Structures?\n</h2>\n\n<p>Think about how you keep your daily life in order. You wouldn‚Äôt just toss your groceries, appointments, photos, and phone numbers all into one box, right? Instead, you‚Äôd use different things to keep them organized‚Äîlike a shopping list for groceries, a calendar for important dates, a photo album for memories, and a contact list for people‚Äôs info.</p>\n\n<p>Python works the same way when it comes to organizing data. It gives you special tools called data structures to help you store and manage information neatly and efficiently. Learning how to use these tools is important because they help you solve problems more easily‚Äîjust like using the right organizer for the right kind of stuff in your life.</p>\n<h2>\n  \n  \n  Lists: Your Flexible Shopping List\n</h2>\n\n<p>Let's start with <strong>lists</strong>. Picture a typical <strong>shopping list</strong>. You write down items in a particular order, and you can easily add new things, cross out items you've bought, or even change your mind about something you wanted.</p>\n\n<p>In Python, a list is quite similar:</p>\n\n<ul>\n<li>\n<strong>Ordered:</strong> The items in a list maintain the order in which you added them.</li>\n<li>\n<strong>Mutable:</strong> This means you can change them after they've been created. You can add, remove, or modify elements.</li>\n</ul>\n\n<p>Here's a quick peek at how a list works in Python:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Creating a shopping list\n</span><span class=\"n\">my_shopping_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">milk</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">bread</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">eggs</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">butter</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">My initial shopping list:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">my_shopping_list</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adding an item\n</span><span class=\"n\">my_shopping_list</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">cheese</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">After adding cheese:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">my_shopping_list</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Removing an item\n</span><span class=\"n\">my_shopping_list</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">eggs</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">After removing eggs:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">my_shopping_list</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Changing an item\n</span><span class=\"n\">my_shopping_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">oat milk</span><span class=\"sh\">\"</span> <span class=\"c1\"># Changing 'milk' to 'oat milk'\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">After changing milk to oat milk:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">my_shopping_list</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Notice how easy it is to manipulate our <code>my_shopping_list</code>? That's the beauty of lists ‚Äì they're incredibly versatile for collections that need to change over time.</p>\n\n<h2>\n  \n  \n  Tuples: Your Unchangeable Appointment Schedule\n</h2>\n\n<p>Now, let's consider <strong>tuples</strong>. Imagine your <strong>appointment schedule</strong> for the week. Once you've set a doctor's appointment for Tuesday at 10 AM, that's usually fixed, isn't it? You wouldn't typically change the time or day of that specific appointment on the fly without making a whole new arrangement.</p>\n\n<p>Tuples are like that fixed schedule:</p>\n\n<ul>\n<li>\n<strong>Ordered:</strong> Just like lists, items in a tuple maintain their order.</li>\n<li>\n<strong>Immutable:</strong> This is the key difference! Once a tuple is created, you cannot change its contents ‚Äì you can't add, remove, or modify elements.</li>\n</ul>\n\n<p>Here's an example contrasting lists and tuples:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># A fixed appointment (tuple)\n</span><span class=\"n\">my_appointment</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">2025-07-01</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">10:00 AM</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Doctor</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">23.8103</span><span class=\"p\">,</span> <span class=\"mf\">90.4125</span><span class=\"p\">)</span>  <span class=\"c1\"># Dhaka, Bangladesh\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">My fixed appointment:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">my_appointment</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># A list of daily tasks (mutable)\n</span><span class=\"n\">daily_tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">check emails</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">attend meeting</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">lunch</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">My daily tasks list:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">daily_tasks</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Try to change an element in the tuple (this will cause an error!)\n# my_appointment[0] = \"Hairdresser\"\n</span>\n<span class=\"c1\"># But you can easily change an element in the list\n</span><span class=\"n\">daily_tasks</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">respond to urgent emails</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Updated daily tasks list:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">daily_tasks</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>So, when would you use a tuple over a list? If you have a collection of items that should <em>not</em> change, like coordinates (latitude, longitude), or, as in our example, fixed appointments or you want to improve performance (tuples are slightly faster), tuples are the perfect choice. They provide a sense of security that your data won't be accidentally altered.</p>\n\n<h2>\n  \n  \n  Sets: Like Your Unique Friend Group\n</h2>\n\n<p>Imagine you're putting together a list of your friends. You wouldn‚Äôt write the same person‚Äôs name twice, right? And the order in which you list them doesn‚Äôt really matter‚Äîit‚Äôs just important who is on the list, not where they are.</p>\n\n<p>That‚Äôs exactly how sets work in Python.</p>\n\n<p><strong>Key Set Features:</strong></p>\n\n<ul>\n<li>\n<strong>Unordered:</strong> Items have no specific order.</li>\n<li>\n<strong>Mutable:</strong> You can add or remove items.</li>\n<li>\n<strong>Unique Only:</strong> Duplicates are automatically removed.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># My friend group\n</span><span class=\"n\">my_friends</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">Ahnaf</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Bashar</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Hamid</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">My friends:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">my_friends</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Oops, I tried to add 'Ahnaf' again\n</span><span class=\"n\">my_friends</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Ahnaf</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">After trying to add a duplicate:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">my_friends</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adding a new friend\n</span><span class=\"n\">my_friends</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Nasim</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">After adding a new friend:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">my_friends</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Another friend group\n</span><span class=\"n\">classmates</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">Nasim</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Rajib</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Hamid</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># Who are common in both groups?\n</span><span class=\"n\">common_friends</span> <span class=\"o\">=</span> <span class=\"n\">my_friends</span><span class=\"p\">.</span><span class=\"nf\">intersection</span><span class=\"p\">(</span><span class=\"n\">classmates</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Friends in both groups:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">common_friends</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># All unique people from both groups\n</span><span class=\"n\">all_unique_people</span> <span class=\"o\">=</span> <span class=\"n\">my_friends</span><span class=\"p\">.</span><span class=\"nf\">union</span><span class=\"p\">(</span><span class=\"n\">classmates</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Everyone we know:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">all_unique_people</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>When to Use Sets:</strong></p>\n\n<ul>\n<li>To store unique items.</li>\n<li>To remove duplicates from a list.</li>\n<li>To find similarities or differences between groups.</li>\n</ul>\n\n<p>Sets are brilliant for quickly finding unique items or performing mathematical set operations like finding common elements or combining collections.</p>\n\n<h2>\n  \n  \n  Dictionaries: Your Organised Address Book\n</h2>\n\n<p>Finally, let's explore <strong>dictionaries</strong>. Imagine your old-fashioned <strong>address book</strong> or a contact list on your phone. For each contact, you have a name (the \"key\") and their corresponding phone number, address, or email (the \"value\"). You use the name to look up their details.</p>\n\n<p>Dictionaries in Python work in a very similar way:</p>\n\n<ul>\n<li>\n<strong>Key-Value Pairs:</strong> They store data in pairs, where each \"key\" is unique and maps to a specific \"value.\"</li>\n<li>\n<strong>Unordered (in older Python versions, ordered from Python 3.7+):</strong> While officially ordered in newer Python versions, it's often best to think of them conceptually as unordered for older code or when the order isn't strictly critical for your logic.</li>\n<li>\n<strong>Mutable:</strong> You can add, remove, and modify key-value pairs.</li>\n</ul>\n\n<p>Dictionaries are incredibly powerful when you need to store and retrieve information based on a unique identifier.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># My address book (dictionary)\n</span><span class=\"n\">my_address_book</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Hasan</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">123-456-7890</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Mitu</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">098-765-4321</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Rafi</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">555-123-4567</span><span class=\"sh\">\"</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">My address book:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">my_address_book</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Getting Mitu's phone number\n</span><span class=\"n\">mitus_number</span> <span class=\"o\">=</span> <span class=\"n\">my_address_book</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Mitu</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Mitu</span><span class=\"sh\">'</span><span class=\"s\">s phone number:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">mitus_number</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adding a new contact\n</span><span class=\"n\">my_address_book</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Tareq</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">111-222-3333</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">After adding Tareq:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">my_address_book</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Modifying Rafi's number\n</span><span class=\"n\">my_address_book</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Rafi</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">555-987-6543</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">After updating Rafi</span><span class=\"sh\">'</span><span class=\"s\">s number:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">my_address_book</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Removing a contact\n</span><span class=\"k\">del</span> <span class=\"n\">my_address_book</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Hasan</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">After removing Hasan:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">my_address_book</span><span class=\"p\">)</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>Dictionaries are super handy when you want to connect one piece of information to another. For example, linking a person's name to their phone number, a product ID to its price, or a country's name to its capital city‚Äîjust like how you use labels to quickly find what something means.</p>\n\n\n\n\n<h2>\n  \n  \n  Comparative Analysis: When to Use What\n</h2>\n\n<p>Now that we've covered each data structure individually, let's put them side-by-side to clarify when each one shines. Choosing the right data structure for your task is a mark of a good engineer, just like a carpenter picking the right tool from their toolbox.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Lists</th>\n<th>Tuples</th>\n<th>Sets</th>\n<th>Dictionaries</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Order</strong></td>\n<td>Ordered (elements have an index)</td>\n<td>Ordered (elements have an index)</td>\n<td>Unordered</td>\n<td>Ordered (from Python 3.7+)</td>\n</tr>\n<tr>\n<td><strong>Mutability</strong></td>\n<td>Mutable (can be changed)</td>\n<td>Immutable (cannot be changed)</td>\n<td>Mutable (can add/remove elements)</td>\n<td>Mutable (can add/modify/remove pairs)</td>\n</tr>\n<tr>\n<td><strong>Duplicates</strong></td>\n<td>Allows duplicates</td>\n<td>Allows duplicates</td>\n<td>No duplicates (elements are unique)</td>\n<td>Keys must be unique, values can be duplicated</td>\n</tr>\n<tr>\n<td><strong>Use Case Example</strong></td>\n<td>Collection of items that change (e.g., shopping list, tasks to do)</td>\n<td>Fixed collections of related items (e.g., coordinates, record of a fixed event)</td>\n<td>Collection of unique items (e.g., tags, unique visitor IDs)</td>\n<td>Storing data as key-value pairs (e.g., address book, configuration settings)</td>\n</tr>\n<tr>\n<td><strong>Best For</strong></td>\n<td>Dynamic collections where order matters</td>\n<td>Fixed, unchangeable data groups</td>\n<td>Checking for presence, removing duplicates, mathematical set operations</td>\n<td>Quick lookups by a unique key, associating data</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n<h2>\n  \n  \n  Conclusion: Your Journey to Mastery\n</h2>\n\n<p>Congratulations! You've just taken a significant step in understanding Python's core data structures. We've compared them to everyday scenarios, from shopping lists to address books, and explored their unique characteristics and best use cases.</p>\n\n<p>The key to truly mastering these concepts isn't just reading about them; it's about <strong>practising</strong>. Try creating your own lists, tuples, sets, and dictionaries. Experiment with adding, removing, and modifying elements. Think about real-world problems and consider which data structure would be the most suitable to solve them.</p>\n\n<p>Just like learning to drive, theoretical knowledge is important, but hands-on experience is what makes you a confident and capable driver. Keep experimenting, keep coding, and you'll soon find yourself effortlessly navigating the landscape of Python programming!</p>\n\n<h3>\n  \n  \n  ‚úÖ Ready to Practice?\n</h3>\n\n<p>What kind of real-world problem do you think you could solve first using one of these data structures?<br>\nTry reading from other different sources.</p>\n\n<p>üí¨ <strong>Got questions or ideas?</strong> Leave a comment ‚Äî I‚Äôd love to hear from you!</p>\n\n<p>üìå <strong>Follow me</strong> for beginner-friendly coding tutorials every week:</p>\n\n<ul>\n<li>üèÜ <a href=\"https://dev.to/abuhorairatarif\">Checkout other Articles</a>\n</li>\n<li>üîó <a href=\"https://www.linkedin.com/in/abu-horaira-tarif/\" rel=\"noopener noreferrer\">Connect on LinkedIn</a>\n</li>\n<li>üëâ <a href=\"https://github.com/AbuHorairaTarif/\" rel=\"noopener noreferrer\">Check out my GitHub profile</a>\n</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Crazy Life Increase Men Enlargement Oil in Attock - 0335-8875990","url":"https://dev.to/buy_now_ee1fd312fabd274ab/crazy-life-increase-men-enlargement-oil-in-attock-0335-8875990-3hcc","date":1751091923,"author":"Buy Now","guid":174216,"unread":true,"content":"<p>Crazy Life Increase Men Enlargement Oil in Pakistan Crazy Life Increase Men Enlargement Oil is a powerful, all-natural formula designed to help men achieve a thicker, longer penis, stronger erections, and unstoppable sexual stamina. <br>\n<a href=\"https://smartshopii.pk/products/crazy-life-increase-men-enlargement-oil-in-pakistan\" rel=\"noopener noreferrer\">https://smartshopii.pk/products/crazy-life-increase-men-enlargement-oil-in-pakistan</a><br>\n0335-8875990</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python UV: The Fastest Python Package Manager","url":"https://dev.to/nikeasyanzi/python-uv-the-fastest-python-package-manager-440i","date":1751091121,"author":"nikeasyanzi","guid":174215,"unread":true,"content":"<p>It's been a headache to manage Python packages. But I feel I am saved from that when I meet <a href=\"https://github.com/astral-sh/uv\" rel=\"noopener noreferrer\">UV</a>.</p>\n\n<h2>\n  \n  \n  Introduction\n</h2>\n\n<p>There are two main concerns related to the Python package management problem.</p>\n\n<ul>\n<li><p>Python version: Different projects may need different Python interpreters. No one wants to mix them with the system default Python interpreters.</p></li>\n<li><p>The packages/libraries needed by the project: Intuitively, different projects have different library dependencies. Even if they all rely on a popular library such as OpenSSL, they may depend on different library versions. </p></li>\n</ul>\n\n<p>Some tools are trying to solve the problem. <br>\nFor example, </p>\n\n<ul>\n<li><p><a href=\"https://docs.python.org/3/library/venv.html\" rel=\"noopener noreferrer\">venv</a> and <a href=\"https://github.com/pypa/pip\" rel=\"noopener noreferrer\">pip</a> provide package management but are unable to switch between different versions of Python.</p></li>\n<li><p><a href=\"https://github.com/pyenv/pyenv\" rel=\"noopener noreferrer\">Pyenv</a> solves the Python version switching problem but does not support package management.</p></li>\n</ul>\n\n<p><a href=\"https://github.com/astral-sh/uv\" rel=\"noopener noreferrer\">UV</a> is developed and aimed at solving the aforementioned issues.</p>\n\n<p>Here, I walk through how to use <strong>uv</strong> to manage your project.</p>\n<h2>\n  \n  \n  Walkthrough\n</h2>\n<h4>\n  \n  \n  Installation\n</h4>\n\n<p>For macOS and Linux. I would use<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>\n\n</div>\n\n\n\n<p>or through <strong>brew</strong> for macOS<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>brew install uv\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Important files\n</h4>\n\n<p>The are some key files for UV to manage the project dependency.<br>\nIn addition, the good news is UV automatically generates and updates these files. Let's take a quick look.</p>\n\n<ul>\n<li><p>.python-version: contains the Python version used for the project</p></li>\n<li><p>pyproject.toml: serves as the main configuration file for project metadata and dependencies.</p></li>\n<li><p>uv.lock: Lock files for dependency management in UV. </p></li>\n</ul>\n<h4>\n  \n  \n  Initialization\n</h4>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>$ uv init my-uv\nInitialized project `my-uv` at `/Users/craigyang/workplace/my-uv`\n\n$ cd my-uv\n\n$ tree -a -L 1\n.\n‚îú‚îÄ‚îÄ .git\n‚îú‚îÄ‚îÄ .gitignore\n‚îú‚îÄ‚îÄ .python-version\n‚îú‚îÄ‚îÄ main.py\n‚îú‚îÄ‚îÄ pyproject.toml\n‚îî‚îÄ‚îÄ README.md\n\n2 directories, 5 files\n</code></pre>\n\n</div>\n\n<h4>\n  \n  \n  Running Python scripts with UV\n</h4>\n\n<p>Let's take a look on the main.py<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>$ cat main.py\ndef main():\n    print(\"Hello from my-uv!\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n\n</div>\n\n\n\n<p>While executing the main.py, a virtual environment is created automatically.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>$ uv run main.py\nUsing CPython 3.13.4\nCreating virtual environment at: .venv\nHello from my-uv!\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Updating dependencies\n</h4>\n\n<p>Here, we use requests as a new library to be added. We can see the content pyproject.toml is also updated.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>$ uv add requests\nResolved 6 packages in 605ms\nPrepared 2 packages in 223ms\nInstalled 5 packages in 10ms\n + certifi==2025.4.26\n + charset-normalizer==3.4.2\n + idna==3.10\n + requests==2.32.4\n + urllib3==2.4.0\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>$ cat pyproject.toml\n[project]\nname = \"my-uv\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.13\"\ndependencies = [\n    \"requests&gt;=2.32.4\",\n]\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Managing Python Versions in UV\n</h4>\n\n<p>In the following prompt, we see that for the my-uv project, Python3.13 is the default option, while in the system, it is installed with Python3.9.6<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>$ uv python list\ncpython-3.14.0b1-macos-aarch64-none                 &lt;download available&gt;\ncpython-3.14.0b1+freethreaded-macos-aarch64-none    &lt;download available&gt;\ncpython-3.13.4-macos-aarch64-none                   /opt/homebrew/bin/python3.13 -&gt; ../Cellar/python@3.13/3.13.4/bin/python3.13\ncpython-3.13.4-macos-aarch64-none                   /opt/homebrew/bin/python3 -&gt; ../Cellar/python@3.13/3.13.4/bin/python3\ncpython-3.13.4-macos-aarch64-none                   /Users/craigyang/.local/share/uv/python/cpython-3.13.4-macos-aarch64-none/bin/python3.13\ncpython-3.13.4+freethreaded-macos-aarch64-none      &lt;download available&gt;\ncpython-3.12.11-macos-aarch64-none                  &lt;download available&gt;\ncpython-3.11.13-macos-aarch64-none                  &lt;download available&gt;\ncpython-3.10.18-macos-aarch64-none                  &lt;download available&gt;\ncpython-3.9.23-macos-aarch64-none                   &lt;download available&gt;\ncpython-3.9.6-macos-aarch64-none                    /usr/bin/python3\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Export requirements in UV\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code> uv export -o requirements.txt\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>We have shown how to use uv to start a new project.<br>\nI also recommend <a href=\"https://www.datacamp.com/tutorial/python-uv\" rel=\"noopener noreferrer\">a comprehensive article about uv</a> for people interest in this topic.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"New first post","url":"https://dev.to/ankitravione/new-first-post-220h","date":1751087210,"author":"ankit ravi","guid":174190,"unread":true,"content":"<p>Hi there! I am new here and I know this is just a welcome post, so it might get overlooked. But if you happen to read this I am a beginner, but hardworking and eager to learn. I am currently looking for a mentor and job (around $500/month). If you're interested, please feel free to contact me. I am confident I can do great work!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to use python pixi with ruff in vscode?","url":"https://dev.to/nl_p_/how-to-use-python-pixi-with-ruff-in-vscode-15bc","date":1751082592,"author":"Nor","guid":174152,"unread":true,"content":"<ul>\n<li>\n<p>procedure:</p>\n\n<ul>\n<li>\n<p>set up pixi venv in vscode</p>\n<pre class=\"highlight plaintext\"><code>select python interpreter location `.pixi/envs/default/python.exe`\n</code></pre>\n</li>\n<li>\n<p>install ruff in venv</p>\n<pre class=\"highlight plaintext\"><code>- vv\n</code></pre>\n\n<pre class=\"highlight plaintext\"><code>      ```shell\n      pixi add ruff\n      ```\n</code></pre>\n\n<pre class=\"highlight plaintext\"><code>- vv\n</code></pre>\n\n<pre class=\"highlight plaintext\"><code>      ```toml\n      [dependencies]\n      ruff = \"&gt;=0.12.0,&lt;0.13\"\n      ```\n</code></pre>\n\n</li>\n<li><p>install the vscode extension <code>charliermarsh.ruff</code> </p></li>\n<li>\n<p>vscode setting</p>\n<pre class=\"highlight plaintext\"><code>- vv\n</code></pre>\n\n<pre class=\"highlight plaintext\"><code>      ```json\n        \"ruff.interpreter\": [\n          \"${workspaceFolder}/.pixi/envs/default/python.exe\",\n          // not_working \"${workspaceFolder}/.pixi/envs/default/Scripts/ruff.exe\"\n        ],\n      ```\n</code></pre>\n\n</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<p>success output:</p>\n\n<ul>\n<li>\n<p>vscode ruff output</p>\n<pre class=\"highlight plaintext\"><code>- vv\n</code></pre>\n\n<pre class=\"highlight plaintext\"><code>      ```shell\n      2025-06-28 11:23:21.636 [info] Name: Ruff\n      2025-06-28 11:23:21.636 [info] Module: ruff\n      2025-06-28 11:23:21.636 [info] Using interpreter: d:\\usp\\uhpsj\\proj\\redfrog-context-aware-translator/.pixi/envs/default/python.exe\n      2025-06-28 11:23:21.636 [info] Workspace settings for d:\\usp\\uhpsj\\proj\\redfrog-context-aware-translator: {\n          \"nativeServer\": \"auto\",\n          \"cwd\": \"d:\\\\usp\\\\uhpsj\\\\proj\\\\redfrog-context-aware-translator\",\n          \"workspace\": \"file:///d%3A/usp/uhpsj/proj/redfrog-context-aware-translator\",\n          \"path\": [],\n          \"ignoreStandardLibrary\": true,\n          \"interpreter\": [\n              \"d:\\\\usp\\\\uhpsj\\\\proj\\\\redfrog-context-aware-translator/.pixi/envs/default/python.exe\"\n          ],\n          \"configuration\": null,\n          \"importStrategy\": \"fromEnvironment\",\n          \"codeAction\": {\n              \"fixViolation\": {\n                  \"enable\": true\n              },\n              \"disableRuleComment\": {\n                  \"enable\": true\n              }\n          },\n          \"lint\": {\n              \"enable\": true,\n              \"run\": \"onType\",\n              \"args\": [],\n              \"preview\": null,\n              \"select\": null,\n              \"extendSelect\": null,\n              \"ignore\": null\n          },\n          \"format\": {\n              \"args\": [],\n              \"preview\": null\n          },\n          \"enable\": true,\n          \"organizeImports\": true,\n          \"fixAll\": true,\n          \"showNotifications\": \"off\",\n          \"exclude\": null,\n          \"lineLength\": null,\n          \"configurationPreference\": \"editorFirst\",\n          \"showSyntaxErrors\": true,\n          \"logLevel\": null,\n          \"logFile\": null\n      }\n      2025-06-28 11:23:21.636 [info] Global settings: {\n          \"nativeServer\": \"auto\",\n          \"cwd\": \"C:\\\\usp\\\\progsware\\\\cursor\",\n          \"workspace\": \"C:\\\\usp\\\\progsware\\\\cursor\",\n          \"path\": [],\n          \"ignoreStandardLibrary\": true,\n          \"interpreter\": [],\n          \"configuration\": null,\n          \"importStrategy\": \"fromEnvironment\",\n          \"codeAction\": {\n              \"fixViolation\": {\n                  \"enable\": true\n              },\n              \"disableRuleComment\": {\n                  \"enable\": true\n              }\n          },\n          \"lint\": {\n              \"enable\": true,\n              \"run\": \"onType\",\n              \"args\": []\n          },\n          \"format\": {\n              \"args\": []\n          },\n          \"enable\": true,\n          \"organizeImports\": true,\n          \"fixAll\": true,\n          \"showNotifications\": \"off\",\n          \"configurationPreference\": \"editorFirst\",\n          \"showSyntaxErrors\": true\n      }\n      2025-06-28 11:23:21.636 [info] Using the Ruff binary: d:\\usp\\uhpsj\\proj\\redfrog-context-aware-translator\\.pixi\\envs\\default\\Scripts\\ruff.exe\n      2025-06-28 11:23:21.701 [info] Resolved 'ruff.nativeServer: auto' to use the native server\n      2025-06-28 11:23:21.707 [info] Found Ruff 0.12.1 at d:\\usp\\uhpsj\\proj\\redfrog-context-aware-translator\\.pixi\\envs\\default\\Scripts\\ruff.exe\n      2025-06-28 11:23:21.707 [info] Server run command: d:\\usp\\uhpsj\\proj\\redfrog-context-aware-translator\\.pixi\\envs\\default\\Scripts\\ruff.exe server\n      2025-06-28 11:23:21.709 [info] Server: Start requested.\n      ```\n</code></pre>\n\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n\n\n\n<p>PS:</p>\n\n<ul>\n<li>\n<p>I have to use weird hacks in order to make the markdown works. </p>\n\n<ul>\n<li>\n<strong><em>Update</em></strong> (OK never mind I give up this weird markdown parsing)</li>\n<li>Devto markdown seems using a different parsing rule? \\\nGithub, Stackoverflow, both have markdown support.</li>\n<li>The list item must be <strong>indented by an extra 4 spaces</strong>? \n\n<ul>\n<li>(this is such a pain to write.)</li>\n<li>not able to parse code blocks in list items?</li>\n</ul>\n\n\n</li>\n\n<li>not able to recognize the <strong>linebreaks</strong>?\n\n<ul>\n<li>what num of newlines it need to parse as a paragraph? </li>\n</ul>\n\n\n</li>\n\n</ul>\n\n</li>\n\n<li><p>The editor is unable to scroll with a height limit?</p></li>\n\n<li><p>There is no predefined tags like stackoverflow? &lt;/p&gt;</p></li>\n\n</ul>\n\n<p>no hypen allowed?</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (2)","url":"https://dev.to/hyperkai/string-in-python-2-1jhk","date":1751082052,"author":"Super Kai (Kazuya Ito)","guid":174151,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*<a href=\"https://dev.to/hyperkai/string-in-python-1-3hg7\">My post</a> explains a string.</p>\n\n<p><a href=\"https://docs.python.org/3/library/functions.html#func-str\" rel=\"noopener noreferrer\">str()</a> can create a string with or without many kinds of objects or can decode a <a href=\"https://docs.python.org/3/glossary.html#term-bytes-like-object\" rel=\"noopener noreferrer\">bytes-like object</a> as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>object</code>(Optional-Default:<code>''</code> or <code>b''</code>):\n*Memos:\n\n<ul>\n<li>If <code>encoding</code> and/or <code>errors</code> are/is set, it must be a <a href=\"https://docs.python.org/3/glossary.html#term-bytes-like-object\" rel=\"noopener noreferrer\">bytes-like object</a> to decode it and its default value is <code>b''</code>.</li>\n<li>\n<code>b\"\"</code>, <code>B''</code> or <code>B\"\"</code> can be used.</li>\n</ul>\n\n\n</li>\n\n<li>The 2nd argument is <code>encoding</code>(Optional-Default:<code>'utf-8'</code>):\n*Memos:\n\n<ul>\n<li>\n<code>'utf-8'</code>, <code>'utf-7'</code>, <code>'utf-16'</code>, <code>'big5'</code>, <code>'ascii'</code>, etc can be set to it.</li>\n<li>You can see <a href=\"https://docs.python.org/3/library/codecs.html#standard-encodings\" rel=\"noopener noreferrer\">Standard Encodings</a> for more possible values.</li>\n</ul>\n\n\n</li>\n\n<li>The 3rd argument is <code>errors</code>(Optional-Default:<code>'strict'</code>):\n*Memos:\n\n<ul>\n<li>It controls decoding error with the error handlers, <code>'strict'</code>, <code>'ignore'</code>, <code>'replace'</code>, <code>'xmlcharrefreplace'</code>, <code>'backslashreplace'</code>, etc.</li>\n<li>\n<code>'strict'</code> raises <a href=\"https://docs.python.org/3/library/exceptions.html#UnicodeError\" rel=\"noopener noreferrer\">UnicodeError</a> if the character, which cannot be decoded, exists.</li>\n<li>\n<code>'ignore'</code> ignores the character which cannot be decoded.</li>\n<li>\n<code>'replace'</code> replaces the character, which cannot be decoded, with <code>ÔøΩ</code> e.g. .</li>\n<li>\n<code>'xmlcharrefreplace'</code> replaces the character, which cannot be decoded, with a XML character e.g. <code>&amp;#1105;</code>.</li>\n<li>\n<code>'backslashreplace'</code> replaces the character, which cannot be decoded, with <code>\\uxxxx</code> e.g. <code>\\u0451</code>.</li>\n<li>You can see more <a href=\"https://docs.python.org/3/library/codecs.html#error-handlers\" rel=\"noopener noreferrer\">error handlers</a>.</li>\n<li>You can create your own error handler with <a href=\"https://docs.python.org/3/library/codecs.html#codecs.register_error\" rel=\"noopener noreferrer\">codecs.register_error()</a>.\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">()</span> <span class=\"c1\"># Empty string\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">12</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"c1\"># String\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"c1\"># Integer\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"p\">)</span> <span class=\"c1\"># Floating-point number\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"o\">+</span><span class=\"mf\">3.4j</span><span class=\"p\">)</span> <span class=\"c1\"># Complex number\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"c1\"># List\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"c1\"># Tuple\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">})</span> <span class=\"c1\"># Set\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">})</span> <span class=\"c1\"># Dictionary\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span> <span class=\"c1\"># Iterator\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\"># Function\n# No errors\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">()</span> <span class=\"c1\"># Empty string\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Nothing\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">12</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"c1\"># String\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"c1\"># 12 1 2\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"c1\"># Integer\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"c1\"># 12 1 2\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"p\">)</span> <span class=\"c1\"># Floating-point number\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># 1.2 1 . 2\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"o\">+</span><span class=\"mf\">3.4j</span><span class=\"p\">)</span> <span class=\"c1\"># Complex number\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"c1\"># (1.2+3.4j) ( 1 . 2 + 3 . 4 j )\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"c1\"># List\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"c1\"># [1, 2, 3] [ 1 ,   2 ,   3 ]\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"c1\"># Tuple\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"c1\"># (1, 2, 3) ( 1 ,   2 ,   3 )\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">})</span> <span class=\"c1\"># Set\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"c1\"># {1, 2, 3} { 1 ,   2 ,   3 }\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">})</span> <span class=\"c1\"># Dictionary\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"c1\"># {'name': 'John'} { ' n a m e ' :   '\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span> <span class=\"c1\"># Iterator\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"c1\"># &lt;list_iterator object at 0x00000200F4715930&gt; &lt; l i s t _ i t e r\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"c1\"># &lt;function &lt;lambda&gt; at 0x00000200F3EA8E00&gt; &lt; f u n c t i o n  \n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"se\">\\xd1\\x91</span><span class=\"s\">ll</span><span class=\"se\">\\xcf\\x86</span><span class=\"s\">!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">strict</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">strict</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H—ëllœÜ!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">H+BFE-ll+A8Y!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-7</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H—ëllœÜ!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"se\">\\xff\\xfe</span><span class=\"s\">H</span><span class=\"se\">\\x00</span><span class=\"s\">Q</span><span class=\"se\">\\x04</span><span class=\"s\">l</span><span class=\"se\">\\x00</span><span class=\"s\">l</span><span class=\"se\">\\x00\\xc6\\x03</span><span class=\"s\">!</span><span class=\"se\">\\x00</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-16</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H—ëllœÜ!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"se\">\\xc7\\xce</span><span class=\"s\">ll</span><span class=\"se\">\\xa3</span><span class=\"s\">p!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">big5</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H—ëllœÜ!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">codecs</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">hashreplace_handler</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"nf\">return </span><span class=\"p\">((</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"sh\">'</span><span class=\"s\">#</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">)</span>\n\n<span class=\"n\">codecs</span><span class=\"p\">.</span><span class=\"nf\">register_error</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">hashreplace</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">hashreplace_handler</span><span class=\"p\">)</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"se\">\\xd1\\x91</span><span class=\"s\">ll</span><span class=\"se\">\\xcf\\x86</span><span class=\"s\">!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ignore</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># Hll!\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">replace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># HÔøΩÔøΩllÔøΩÔøΩ!\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">hashreplace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H##ll##!\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">strict</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># UnicodeDecodeError: 'ascii' codec can't decode byte 0xd1\n# in position 1: ordinal not in range(128)\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">H&amp;#1105;ll&amp;#966;!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">xmlcharrefreplace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H&amp;#1105;ll&amp;#966;!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"se\">\\\\</span><span class=\"s\">u0451ll</span><span class=\"se\">\\\\</span><span class=\"s\">u03c6!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">backslashreplace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H\\u0451ll\\u03c6!\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (1)","url":"https://dev.to/hyperkai/string-in-python-1-3hg7","date":1751081966,"author":"Super Kai (Kazuya Ito)","guid":174150,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*<a href=\"https://dev.to/hyperkai/string-in-python-2-1jhk\">My post</a> explains <a href=\"https://docs.python.org/3/library/functions.html#func-str\" rel=\"noopener noreferrer\">str()</a>.</p>\n\n<p>A string:</p>\n\n<ul>\n<li>is a sequence of zero or more characters.</li>\n<li>is immutable so it cannot be changed.</li>\n<li>can be created with <code>''</code> or <code>\"\"</code> or <a href=\"https://docs.python.org/3/library/functions.html#func-str\" rel=\"noopener noreferrer\">str()</a> with or without many kinds of objects.</li>\n<li>can be enlarged with <code>*</code> and a number.</li>\n<li>can be accessed but cannot be changed by indexing or slicing.</li>\n</ul>\n\n\n\n<h1>\n  \n  \n  <em>Be careful, a huge string gets <code>I/O error</code>.</em>\n</h1>\n\n\n\n\n<p><code>''</code> or <code>\"\"</code> can create a string as shown below. *<code>\\'</code> is the escape sequence to output <code>'</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">''</span> <span class=\"c1\"># Empty string\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"</span> <span class=\"c1\"># Empty string\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Hello</span><span class=\"sh\">'</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Hello</span><span class=\"sh\">\"</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">I</span><span class=\"se\">\\'</span><span class=\"s\">m John.</span><span class=\"sh\">'</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">I</span><span class=\"sh\">'</span><span class=\"s\">m John.</span><span class=\"sh\">\"</span>\n<span class=\"c1\"># No error\n</span></code></pre>\n\n</div>\n\n\n\n<p>A string is a sequence of zero or more characters as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcde</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># abcde\n</span></code></pre>\n\n</div>\n\n\n\n<p>A string can be enlarged with <code>*</code> and a number as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abc</span><span class=\"sh\">'</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># abcabcabc\n</span></code></pre>\n\n</div>\n\n\n\n<p>Be careful, a huge string gets <code>I/O error</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abc</span><span class=\"sh\">'</span> <span class=\"o\">*</span> <span class=\"mi\">100000000</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># line 3, in OSError: [Errno 29] I/O error\n</span></code></pre>\n\n</div>\n\n\n\n<p>You can access a string by indexing or slicing as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdefgh</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># abcdefgh\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"c1\"># a b c d e f g h\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdefgh</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[::])</span>\n<span class=\"c1\"># abcdefgh\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># aceg\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># hfdb\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">:])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">::])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">::])</span>\n<span class=\"c1\"># cdefgh\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># ceg\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">::</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">::</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># ca\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"mi\">6</span><span class=\"p\">:])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n<span class=\"c1\"># abcdef\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># ace\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># h\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n<span class=\"c1\"># cdef\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># ce\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># Empty string\n</span></code></pre>\n\n</div>\n\n\n\n<p>You cannot change a string because it's immutable as shown below. *A <a href=\"https://docs.python.org/3/tutorial/datastructures.html#the-del-statement\" rel=\"noopener noreferrer\">del statement</a> can still be used to remove a variable itself:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdef</span><span class=\"sh\">'</span>\n\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">X</span><span class=\"sh\">'</span>\n<span class=\"c1\"># v[-6] = 'X'\n</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Z</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"c1\"># TypeError: 'str' object does not support item assignment\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdef</span><span class=\"sh\">'</span>\n\n<span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># del v[-6]\n</span><span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"c1\"># TypeError: 'str' object does not support item deletion\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdef</span><span class=\"sh\">'</span>\n\n<span class=\"k\">del</span> <span class=\"n\">v</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># NameError: name 'v' is not defined\n</span></code></pre>\n\n</div>\n\n\n\n<p>If you really want to change a string, use <a href=\"https://docs.python.org/3/library/functions.html#func-list\" rel=\"noopener noreferrer\">list()</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#str.join\" rel=\"noopener noreferrer\">join()</a> as shown below. *<code>join()</code> can concatenate the zero or more strings in an iterable.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdef</span><span class=\"sh\">'</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Here\n</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">X</span><span class=\"sh\">'</span>\n<span class=\"c1\"># v[-6] = 'X'\n</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Z</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">''</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Here\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># XbYZ\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdef</span><span class=\"sh\">'</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Here\n</span>\n<span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># del v[-6]\n</span><span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">''</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Here\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># bcd\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"FastAPI: A Python Web Framework for NodeJS Developers","url":"https://dev.to/raffycastillo/fastapi-a-python-web-framework-for-nodejs-developers-4klj","date":1751078899,"author":"Raffy Castillo","guid":174130,"unread":true,"content":"<h1>\n  \n  \n  FastAPI: A Python Web Framework for NodeJS Developers\n</h1>\n\n<p>By Raffy Castillo</p>\n\n<h2>\n  \n  \n  Introduction\n</h2>\n\n<p>My journey with FastAPI started with the same skepticism most Node.js developers have about learning new frameworks. But here's what got me excited: FastAPI comes pre-packaged with everything we painstakingly add to Express.js. No more adding express-validator for data checks, no more setting up swagger-ui-express for API docs, no more crafting error handling middleware. It's all there.</p>\n\n<p>What really clicked for me was how FastAPI just works. FastAPI isn't just trying to replicate Express.js in Python. It's a modern framework built for today's development challenges.</p>\n\n<p>So what makes FastAPI stand out? It comes loaded with features that would normally require multiple npm packages in Express. The speed matches and sometimes surpasses Express.js performance. It catches errors before they hit production, and your API documentation stays current automatically. No more maintaining separate docs that inevitably get out of sync with your code.</p>\n\n<p>Why should you consider FastAPI?</p>\n\n<ul>\n<li>\n<strong>Built-in Features</strong>: What takes multiple npm packages in Express comes ready to use in FastAPI</li>\n<li>\n<strong>Speed</strong>: Just as fast as Express.js, sometimes even faster!</li>\n<li>\n<strong>Error Prevention</strong>: Catches common API errors before your code runs (like when someone sends text where a number should be)</li>\n<li>\n<strong>Auto Documentation</strong>: Your API docs stay up-to-date automatically: no more maintaining separate documentation</li>\n</ul>\n\n<h2>\n  \n  \n  Core Features and Syntax\n</h2>\n\n<h3>\n  \n  \n  Basic Setup\n</h3>\n\n<p>Let me walk you through creating your first API. If you're like me and have built Express servers before, this will feel familiar yet refreshingly different. We'll create a simple endpoint that sends back some JSON data:</p>\n\n<p><strong>Express.js:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// This is like your typical app.js or server.js file</span>\n<span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">express</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nf\">express</span><span class=\"p\">();</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">());</span>  <span class=\"c1\">// To handle JSON requests</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Hello, World!</span><span class=\"dl\">\"</span> <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`Server running at http://localhost:</span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>FastAPI:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># This is your main.py file\n</span><span class=\"kn\">from</span> <span class=\"n\">fastapi</span> <span class=\"kn\">import</span> <span class=\"n\">FastAPI</span>\n<span class=\"kn\">import</span> <span class=\"n\">uvicorn</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">FastAPI</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">read_root</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">message</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Hello, World!</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">uvicorn</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">0.0.0.0</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8000</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Save this as <code>main.py</code> and run it. Just like how you visit <a href=\"http://localhost:3000\" rel=\"noopener noreferrer\">http://localhost:3000</a> in Express, you'll visit <a href=\"http://localhost:8000\" rel=\"noopener noreferrer\">http://localhost:8000</a> here. The cool part? Remember all those times you had to manually document your API endpoints or set up Swagger? Just visit <a href=\"http://localhost:8000/docs\" rel=\"noopener noreferrer\">http://localhost:8000/docs</a> after running your FastAPI server. You'll find your API documentation automatically generated. You don't get that in Express!</p>\n\n<h3>\n  \n  \n  Request Handling and Path Parameters\n</h3>\n\n<p>Here's where FastAPI really shines. Remember those tedious validation checks we write in Express? The ones where we meticulously verify if an ID is actually a number, or if a request body contains all required fields? Let me show you how FastAPI handles this elegantly:</p>\n\n<p><strong>Express.js:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// In Express, you need to validate data yourself</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/products/:id</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">productId</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n  <span class=\"c1\">// You'd probably add validation like this:</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nf\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">productId</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"mi\">400</span><span class=\"p\">).</span><span class=\"nf\">json</span><span class=\"p\">({</span> <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Product ID must be a number</span><span class=\"dl\">\"</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n  <span class=\"c1\">// Then handle the request</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span> \n    <span class=\"na\">productId</span><span class=\"p\">:</span> <span class=\"nc\">Number</span><span class=\"p\">(</span><span class=\"nx\">productId</span><span class=\"p\">),</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Sample Product</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">price</span><span class=\"p\">:</span> <span class=\"mf\">29.99</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/products</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">price</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Manual validation - you often see this in Express</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">name</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span> <span class=\"nx\">name</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">string</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"mi\">400</span><span class=\"p\">).</span><span class=\"nf\">json</span><span class=\"p\">({</span> <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Name is required and must be text</span><span class=\"dl\">\"</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">price</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span> <span class=\"nx\">price</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">number</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"mi\">400</span><span class=\"p\">).</span><span class=\"nf\">json</span><span class=\"p\">({</span> <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Price is required and must be a number</span><span class=\"dl\">\"</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span>\n    <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Product created!</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">product</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">price</span> <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>FastAPI:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">fastapi</span> <span class=\"kn\">import</span> <span class=\"n\">FastAPI</span><span class=\"p\">,</span> <span class=\"n\">HTTPException</span>\n<span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">FastAPI</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># This is like creating a schema for your data\n</span><span class=\"k\">class</span> <span class=\"nc\">Product</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">price</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n\n<span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/products/{product_id}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_product</span><span class=\"p\">(</span><span class=\"n\">product_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>  <span class=\"c1\"># FastAPI handles the number validation automatically!\n</span>    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">product_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">product_id</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Sample Product</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">price</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">29.99</span>\n    <span class=\"p\">}</span>\n\n<span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/products</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">create_product</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">:</span> <span class=\"n\">Product</span><span class=\"p\">):</span>  <span class=\"c1\"># FastAPI validates the JSON automatically!\n</span>    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">message</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Product created!</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">product</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">product</span>\n    <span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Notice how FastAPI handles all the validation automatically? A lot of trivial checks are already baked into it! When someone sends invalid data (like text where a number should be), FastAPI will automatically send back a helpful error message.</p>\n\n<h3>\n  \n  \n  Async Support\n</h3>\n\n<p>The async story in FastAPI feels like coming home for a Node.js developer. Remember how natural it felt the first time you used <code>async/await</code> in Express? FastAPI brings that same elegance to Python. Let's pretend that we are building endpoints for a typical e-commerce site:</p>\n\n<p><strong>Express.js:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// Imagine this function gets orders from a database</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getOrdersFromDB</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">userId</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Simulate database delay</span>\n  <span class=\"k\">await</span> <span class=\"k\">new</span> <span class=\"nc\">Promise</span><span class=\"p\">(</span><span class=\"nx\">resolve</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">setTimeout</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">));</span>\n  <span class=\"k\">return</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Laptop</span><span class=\"dl\">\"</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Mouse</span><span class=\"dl\">\"</span> <span class=\"p\">}</span>\n  <span class=\"p\">];</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/users/:userId/orders</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async </span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">userId</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">userId</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">orders</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">getOrdersFromDB</span><span class=\"p\">(</span><span class=\"nx\">userId</span><span class=\"p\">);</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">({</span> <span class=\"nx\">userId</span><span class=\"p\">,</span> <span class=\"nx\">orders</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch </span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nf\">json</span><span class=\"p\">({</span> \n      <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Could not fetch orders</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">details</span><span class=\"p\">:</span> <span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">message</span> \n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>FastAPI:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_orders_from_db</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Simulate database delay\n</span>    <span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">item</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Laptop</span><span class=\"sh\">\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">item</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Mouse</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n\n<span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users/{user_id}/orders</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_user_orders</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">get_orders_from_db</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">user_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">orders</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">orders</span><span class=\"p\">}</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span>\n            <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span>\n            <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Could not fetch orders</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Both frameworks handle async operations in a similar way. If you're comfortable with <code>async/await</code> in JavaScript, you'll feel right at home with FastAPI's async support!</p>\n\n<h2>\n  \n  \n  Compare and Contrast\n</h2>\n\n<h3>\n  \n  \n  FastAPI vs Express.js\n</h3>\n\n<ol>\n<li>\n<p><strong>Type System</strong></p>\n\n<ul>\n<li>Express.js: Relies on TypeScript for type safety (optional)</li>\n<li>FastAPI: Built-in type validation with Pydantic</li>\n</ul>\n</li>\n<li>\n<p><strong>Documentation</strong></p>\n\n<ul>\n<li>Express.js: Manual documentation or third-party tools</li>\n<li>FastAPI: Automatic interactive API documentation</li>\n</ul>\n</li>\n<li>\n<p><strong>Performance</strong></p>\n\n<ul>\n<li>Express.js: Known for its speed and lightweight nature</li>\n<li>FastAPI: One of the fastest Python frameworks, comparable to Node.js</li>\n</ul>\n</li>\n<li>\n<p><strong>Middleware</strong></p>\n\n<ul>\n<li>Express.js: Uses <code>.use()</code> for middleware</li>\n<li>FastAPI: Uses \"dependencies\" and middleware with more structured approach</li>\n</ul>\n</li>\n<li>\n<p><strong>Learning Curve</strong></p>\n\n<ul>\n<li>Express.js: Minimal, very flexible but requires more boilerplate</li>\n<li>FastAPI: Slightly steeper due to Python typing, but more features out of the box</li>\n</ul>\n</li>\n</ol>\n\n<h2>\n  \n  \n  Tips for Learning FastAPI as a Node.js Developer\n</h2>\n\n<p>I want to share some insights from my own transition from Node.js to FastAPI. These are the things I wish someone had told me when I started:</p>\n\n<ol>\n<li><p><strong>Embrace Python Types</strong><br>\nDon't fight the type system. It's actually trying to help you catch bugs before they happen. Coming from JavaScript, I was initially resistant to all the type hints, but it makes a whole lot more sense when you think of all the hours you could potentially saved by catching small mistakes before committing to them.</p></li>\n<li><p><strong>The Async World is Different, But Better</strong><br>\nPython's async ecosystem might feel a bit strange at first. Where's the event loop? Why can't I use <code>await</code> everywhere? But once you understand the \"async all the way down\" principle, you'll appreciate how Python handles concurrency.</p></li>\n<li><p><strong>Your Development Environment Matters</strong><br>\n</p></li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   <span class=\"c\"># Here's my go-to setup that's never failed me</span>\n   python <span class=\"nt\">-m</span> venv venv\n   <span class=\"nb\">source </span>venv/bin/activate  <span class=\"c\"># On Windows: venv\\Scripts\\activate</span>\n\n   <span class=\"c\"># The essentials you'll need</span>\n   pip <span class=\"nb\">install </span>fastapi uvicorn\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>\n<strong>Key Resources That Helped Me</strong>\n\n<ul>\n<li>FastAPI's docs are a goldmine: <a href=\"https://fastapi.tiangolo.com/\" rel=\"noopener noreferrer\">https://fastapi.tiangolo.com/</a>\n</li>\n<li>When you're stuck on types: <a href=\"https://docs.python.org/3/library/typing.html\" rel=\"noopener noreferrer\">https://docs.python.org/3/library/typing.html</a>\n</li>\n<li>For really understanding async: <a href=\"https://realpython.com/async-io-python/\" rel=\"noopener noreferrer\">https://realpython.com/async-io-python/</a>\n</li>\n</ul>\n</li>\n</ol>\n\n<p>Here's what I've learned: FastAPI isn't just Express with Python syntax. It's what happens when you take everything we love about Express, add modern features we wish we had out of the box, and wrap it all in a framework that catches our mistakes before they become problems.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Automating Persistent AI On the Fly","url":"https://dev.to/jmoncayopursuit/automating-persistent-ai-on-the-fly-1i0d","date":1751078431,"author":"Jean","guid":174129,"unread":true,"content":"<p>Most developers stop when their AI assistant says \"I cant do that.\" I didn't.</p>\n\n<p>Check out the full repo at<br><br>\n<a href=\"https://github.com/jmoncayo-pursuit/market-data-api\" rel=\"noopener noreferrer\">https://github.com/jmoncayo-pursuit/market-data-api</a>. </p>\n\n<p>For a recent take home assignment I built a financial market data microservice with FastAPI, Docker Compose, PostgreSQL, Redis, Kafka and pytest. The real engineering happened in agent mode with Cursor AI, where I taught the tool to recover from CI failures and document each fix.</p>\n<h2>\n  \n  \n  Purpose-Driven AI Orchestration\n</h2>\n\n<p>This was not casual \"vibe coding.\" It was intentional:</p>\n\n<ul>\n<li>Drafted a PRD from the assignment requirements and referred to it in every session\n</li>\n<li>Defined project rules before writing code\n</li>\n<li>Fed Cursor AI official GitHub Actions docs like\n<a href=\"https://docs.github.com/en/actions/reference/accessing-contextual-information-about-workflow-runs\" rel=\"noopener noreferrer\">Accessing workflow context</a>\n</li>\n<li>Vigilantly tracked file creation to avoid duplicate filenames\n</li>\n<li>Reviewed and validated every AI generated fix\n</li>\n</ul>\n\n<p>Each prompt had a clear goal. Each response was reviewed. No autopilot.</p>\n<h2>\n  \n  \n  Project Overview\n</h2>\n\n<ul>\n<li>\n<p><strong>Stack</strong>  </p>\n\n<ul>\n<li>FastAPI with dependency injection\n</li>\n<li>PostgreSQL via SQLAlchemy ORM\n</li>\n<li>Redis caching and job status store\n</li>\n<li>Apache Kafka with confluent-kafka-python\n</li>\n<li>Docker Compose orchestrating all services\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Testing</strong>  </p>\n\n<ul>\n<li>278+ comprehensive tests with full integration coverage\n</li>\n<li>Endpoint tests covering authentication flows\n</li>\n<li>Service layer tests for Kafka producer and consumer patterns\n</li>\n</ul>\n</li>\n<li>\n<p><strong>CI/CD</strong>  </p>\n\n<ul>\n<li>GitHub Actions workflow with dynamic retry logic\n</li>\n<li>Solved rate limiter initialization failures in CI\n</li>\n<li>Handled API authentication mismatches 401 and 403 errors\n</li>\n<li>Added Redis connection timeout handling\n</li>\n<li>Mocked Kafka services to avoid external dependencies\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Observability</strong>  </p>\n\n<ul>\n<li>Prometheus metrics integration for request rates and error counts\n</li>\n<li>Grafana dashboard showcasing service health and throughput\n</li>\n<li>Structured logging formatted for ELK consumption\n</li>\n<li>Health check endpoints for service readiness\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Docs &amp; Deliverables</strong>  </p>\n\n<ul>\n<li>Swagger UI and OpenAPI spec\n</li>\n<li>Complete Postman collection with environment configs\n</li>\n<li>Alembic migrations for schema management\n</li>\n<li>GitHub Actions workflows with health check steps\n</li>\n</ul>\n</li>\n</ul>\n<h2>\n  \n  \n  Architecture\n</h2>\n\n<p><a href=\"https://mermaid.live/edit#pako:eNpNkU9z2yAQxb8Kw9n2yMi2gg6dUeR_aeyOm-ZUlAMj1hJjCTQIPG09_u7BWElzg_d7u_sWLrjUAnCKK8O7Gr0-FgqhjK15b7PDE8q67g2Nx9_QIzvo3lYGfv3cvQVPkHP2AkL2KOdlDV_0JXvmxxNHB6OFK8EEtAxoNaBX3ckyRZ2RJYzhDMr2wbUKrvXgyrXqXTs0WAe0YXt9lqpC2RkMr8APb0rXcKvvrs098P8wW-ZjtGBrcPcR2yA_sY3hR674l9zfWeaEtGinq2oYegfP7IVbQDvZSjuAPIAdC7ujvW_0UbJnW-CNrVFeQ3nyYnBmN_SDrYzRBm25Es0nwSP__lLg1BoHI-z3bfntii-3mgL76C0UOPVHwc2pwIW6-pqOq99atx9lRruqxumRN72_uU74xEvJ_c-2n6oBJcDk2imLUxqFHji94D84JfPZhCxIMptOo4eIEpqM8F8vk8k0ojSOY0riaEEpuY7wvzA2mlAync-TaPEwm8fJLCHXd7mPtAU\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmermaid.ink%2Fimg%2Fpako%3AeNpNkU9z2yAQxb8Kw9n2yMi2gg6dUeR_aeyOm-ZUlAMj1hJjCTQIPG09_u7BWElzg_d7u_sWLrjUAnCKK8O7Gr0-FgqhjK15b7PDE8q67g2Nx9_QIzvo3lYGfv3cvQVPkHP2AkL2KOdlDV_0JXvmxxNHB6OFK8EEtAxoNaBX3ckyRZ2RJYzhDMr2wbUKrvXgyrXqXTs0WAe0YXt9lqpC2RkMr8APb0rXcKvvrs098P8wW-ZjtGBrcPcR2yA_sY3hR674l9zfWeaEtGinq2oYegfP7IVbQDvZSjuAPIAdC7ujvW_0UbJnW-CNrVFeQ3nyYnBmN_SDrYzRBm25Es0nwSP__lLg1BoHI-z3bfntii-3mgL76C0UOPVHwc2pwIW6-pqOq99atx9lRruqxumRN72_uU74xEvJ_c-2n6oBJcDk2imLUxqFHji94D84JfPZhCxIMptOo4eIEpqM8F8vk8k0ojSOY0riaEEpuY7wvzA2mlAync-TaPEwm8fJLCHXd7mPtAU%3Ftype%3Dpng\" alt=\"Architecture\" width=\"1056\" height=\"694\"></a></p>\n<h2>\n  \n  \n  Data Flow\n</h2>\n\n<p><a href=\"https://mermaid.live/edit#pako:eNptUl1zmzAQ_Cs3eiYO4E8003Qcu9OvpHHi9qXDiwIX0BgkKglPXY__e4WA0CF9g7vd2709nUkiUySUaPxVo0hwy1mmWBkLgIopwxNeMWFgU3AUZlxd7z6_AbIkx3FxezuufGUvB_aGK4WuS1Tj-r0U3Ehbbhqtk6ubGytO4eOH73BdKZ6gvi6YQW3e61P5LIt36_XursFbmAU7WxQ2OSYHSHqPrOgMwyfuloP296of_4SmVqIlpOB0GhgWGjviPde6ZbZC21sKjzWqE7R2BhLYGMaDXRNSZti_Mzqze7szAheDXxTpsFKXCoU7mUGJxo7SfbcZ4nKi8GX_8A0U6sqGi_-LcPewHzKsZFEMEu5KFlE_F1znnVs8di_BdRul7my0P-AA6VtdMBtWJHWTCzCRgnb7lfLIRQbsiIplOCK97vijShtatybxSKZ4SqhRNXrEYkvW_JJzw4-JybHEmFD7mTJ1iEksLpZjH9NPKcuepmSd5YS-MHtNj9ROoXv-r1VlI0e1kbUwhEYzN4PQM_lNaDifTcJFuJwFgb_yozBaeuRky-Ek8KNoOp1G4dRfRFF48cgfJ-tPojCYz5f-YrUKZ8vFKrj8BWXAJl0\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmermaid.ink%2Fimg%2Fpako%3AeNptUl1zmzAQ_Cs3eiYO4E8003Qcu9OvpHHi9qXDiwIX0BgkKglPXY__e4WA0CF9g7vd2709nUkiUySUaPxVo0hwy1mmWBkLgIopwxNeMWFgU3AUZlxd7z6_AbIkx3FxezuufGUvB_aGK4WuS1Tj-r0U3Ehbbhqtk6ubGytO4eOH73BdKZ6gvi6YQW3e61P5LIt36_XursFbmAU7WxQ2OSYHSHqPrOgMwyfuloP296of_4SmVqIlpOB0GhgWGjviPde6ZbZC21sKjzWqE7R2BhLYGMaDXRNSZti_Mzqze7szAheDXxTpsFKXCoU7mUGJxo7SfbcZ4nKi8GX_8A0U6sqGi_-LcPewHzKsZFEMEu5KFlE_F1znnVs8di_BdRul7my0P-AA6VtdMBtWJHWTCzCRgnb7lfLIRQbsiIplOCK97vijShtatybxSKZ4SqhRNXrEYkvW_JJzw4-JybHEmFD7mTJ1iEksLpZjH9NPKcuepmSd5YS-MHtNj9ROoXv-r1VlI0e1kbUwhEYzN4PQM_lNaDifTcJFuJwFgb_yozBaeuRky-Ek8KNoOp1G4dRfRFF48cgfJ-tPojCYz5f-YrUKZ8vFKrj8BWXAJl0%3Ftype%3Dpng\" alt=\"Data Flow\" width=\"1541\" height=\"863\"></a></p>\n<h2>\n  \n  \n  Troubleshooting CI Failures\n</h2>\n\n<p>To give Cursor AI the context it needed, I added this snippet to my internal docs so it could extrapolate our custom monitoring flow:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># 1. List the most recent failed run</span>\ngh run list <span class=\"nt\">--status</span> failure <span class=\"nt\">--limit</span> 1 <span class=\"se\">\\</span>\n  <span class=\"nt\">--json</span> databaseId,status,conclusion,createdAt,url <span class=\"o\">&gt;</span> last_run.json <span class=\"se\">\\</span>\n  <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cat </span>last_run.json\n\n<span class=\"c\"># 2. View logs of the failed run</span>\ngh run view &lt;RUN_ID&gt; <span class=\"nt\">--log-failed</span> <span class=\"o\">&gt;</span> last_run.log <span class=\"se\">\\</span>\n  <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">tail</span> <span class=\"nt\">-100</span> last_run.log\n\n<span class=\"c\"># 3. Compute sleep duration based on last job timing</span>\n<span class=\"nv\">last_duration</span><span class=\"o\">=</span><span class=\"si\">$(</span>gh run view &lt;RUN_ID&gt; <span class=\"nt\">--json</span> timing <span class=\"se\">\\</span>\n  | jq .timing.totalDuration<span class=\"si\">)</span>\n<span class=\"nb\">sleep</span> <span class=\"k\">$((</span> last_duration <span class=\"o\">/</span> <span class=\"m\">2</span> <span class=\"k\">))</span>\n\n<span class=\"c\"># 4. Rerun only the failed jobs</span>\ngh run rerun &lt;RUN_ID&gt; <span class=\"nt\">--failed</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Cursor AI learned to watch logs, wait intelligently, retry failures, and avoid wasted prompts. It even adapted when the Redis connection timed out or the rate limiter threw event loop errors.</p>\n\n<h2>\n  \n  \n  Timeline and Complexity\n</h2>\n\n<ul>\n<li>Built a production grade microservice with streaming data pipeline</li>\n<li>Implemented full CI/CD with health checks and self healing retries</li>\n<li>Created a 278+ test suite covering all service layers</li>\n<li>Integrated observability, docs and migrations in under two weeks</li>\n</ul>\n\n<h2>\n  \n  \n  Real Learning Outcomes\n</h2>\n\n<ul>\n<li>Learned to handle Redis connection failures with retry backoff</li>\n<li>Mastered Kafka consumer group management and mocking techniques</li>\n<li>Implemented async await patterns for high throughput</li>\n<li>Built robust error handling for external API dependencies</li>\n</ul>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>It is time to rethink what an AI native builder can deliver. By defining clear goals, keeping a living PRD, feeding the right documentation, and guiding each AI step, you can ship production level code with AI as your teammate. Demand more of your tools and hold them to your standards, and you will build resilient systems that keep moving forward, no matter what.</p>\n\n<p><a href=\"https://github.com/jmoncayo-pursuit/market-data-api/actions/workflows/ci.yml\" rel=\"noopener noreferrer\"><img src=\"https://github.com/jmoncayo-pursuit/market-data-api/actions/workflows/ci.yml/badge.svg\" alt=\"CI/CD Pipeline\" width=\"157\" height=\"20\"></a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Alternative of 'for' in Python","url":"https://dev.to/akuad/alternative-of-for-in-python-3537","date":1751078306,"author":"aKuad","guid":174128,"unread":true,"content":"<p>JavaScript version:</p>\n\n<p><a href=\"https://dev.to/akuad/alternative-of-for-in-javascript-3p71/edit\">https://dev.to/akuad/alternative-of-for-in-javascript-3p71/edit</a></p>\n\n<h2>\n  \n  \n  Introduction\n</h2>\n\n<p>There are some cases of processing elements in <code>list</code>. Basically solution is process with <code>for</code>.</p>\n\n<p>Actually, there are other solutions without using <code>for</code>. Them can reduce code and keep code in simple.</p>\n\n<p>Note: In some cases, <code>for</code> can be the best solution.</p>\n\n<h2>\n  \n  \n  Tutorial: <code>lambda</code> expression\n</h2>\n\n<p>These codes will be take same behavior.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">e</span><span class=\"o\">*</span><span class=\"mi\">2</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">e</span><span class=\"o\">*</span><span class=\"mi\">2</span>\n</code></pre>\n\n</div>\n\n\n\n<p>By using <code>lambda:</code>, you can omit <code>def</code>, function name and <code>return</code>.</p>\n\n<h2>\n  \n  \n  Make an <code>Array</code> what elements processed\n</h2>\n\n<p>E.g. multiplex x2<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">in_list</span>  <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">out_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">in_list</span><span class=\"p\">:</span>\n  <span class=\"n\">out_list</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">e</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"c1\"># out_list: [2, 4, 6, 8]\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">in_list</span>  <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">out_list</span> <span class=\"o\">=</span> <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">e</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">in_list</span><span class=\"p\">)</span>\n<span class=\"c1\"># out_list: [2, 4, 6, 8]\n</span></code></pre>\n\n</div>\n\n\n\n<p>Reference: <a href=\"https://docs.python.org/3/library/functions.html#map\" rel=\"noopener noreferrer\"><code>map()</code></a></p>\n\n<p>If you good for <a href=\"https://docs.python.org/3.13/tutorial/datastructures.html#list-comprehensions\" rel=\"noopener noreferrer\">list comprehensions</a>, it can be more few code.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">in_list</span>  <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">out_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"o\">*</span><span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">in_list</span><span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Extract elements what match to a condition\n</h2>\n\n<p>E.g. Extract even numbers from <code>Array</code><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">array</span>      <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">array_even</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">array</span><span class=\"p\">:</span>\n  <span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">array_even</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"c1\"># array_even: [2, 4]\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">array</span>      <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">array_even</span> <span class=\"o\">=</span> <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">e</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">array</span><span class=\"p\">)</span>\n<span class=\"c1\"># array_even: [2, 4]\n</span></code></pre>\n\n</div>\n\n\n\n<p>Reference: <a href=\"https://docs.python.org/3/library/functions.html#filter\" rel=\"noopener noreferrer\"><code>filter()</code></a></p>\n\n<h2>\n  \n  \n  Check is a value in <code>Array</code>\n</h2>\n\n<p>E.g. Check is input string day-name<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">in_text</span>   <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">mon</span><span class=\"sh\">\"</span>\n<span class=\"n\">day_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">sun</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">mon</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">tue</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">wed</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">thu</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">fri</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">sat</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">is_input_true</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">day_names</span><span class=\"p\">:</span>\n  <span class=\"k\">if</span> <span class=\"n\">in_text</span> <span class=\"o\">==</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"n\">is_input_true</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n    <span class=\"k\">break</span>\n<span class=\"c1\"># is_input_true: True\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">in_text</span>   <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">mon</span><span class=\"sh\">\"</span>\n<span class=\"n\">day_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">sun</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">mon</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">tue</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">wed</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">thu</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">fri</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">sat</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">is_input_true</span> <span class=\"o\">=</span> <span class=\"n\">in_text</span> <span class=\"ow\">in</span> <span class=\"n\">day_names</span>\n<span class=\"c1\"># is_input_true: true\n</span></code></pre>\n\n</div>\n\n\n\n<p>Reference: <a href=\"https://docs.python.org/3/reference/expressions.html#in\" rel=\"noopener noreferrer\">Membership test operations</a></p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Sometimes let‚Äôs see document (language reference, command help and so on).</p>\n\n<p>You can find good functions, methods or options.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üåç Build My Own Telegram Translator Bot with Python","url":"https://dev.to/jeancarje/build-my-own-telegram-translator-bot-with-python-23n7","date":1751077181,"author":"Jean Estevez","guid":174108,"unread":true,"content":"<p>‚öôÔ∏è *This article is part of my practice and reinforcement: in this post you will see ‚Äúwhat‚Äù I have done, also ‚Äúwhy‚Äù and ‚Äúhow‚Äù each part works, it is ideal for advanced and intermediate beginners.</p>\n\n<p>Hey devs! üëã I'm Jean, and I've launched <strong>LinguaTranslateSpark</strong>: a Telegram bot that instantly translates text in 100+ languages. </p>\n\n\n\n\n<h2>\n  \n  \n  üöÄ What Is LinguaTranslateSpark?\n</h2>\n\n<p>A lightweight real-time translation bot for Telegram, built in Python. With it you can:</p>\n\n<p>‚úÖ Translate instantly.<br><br>\n‚úÖ Change target languages.<br><br>\n‚úÖ Save preferences<br><br>\n‚úÖ Deploy in minutes  </p>\n\n<p><a href=\"https://t.me/LinguaTranslateSparkBot\" rel=\"noopener noreferrer\">üëâ Test now</a></p>\n\n\n<h2>\n  \n  \n  üõ†Ô∏è Why I Built This\n</h2>\n\n<p>I converse daily with friends (some of us don't speak the same language) and I thought, what better exercise or practice than a telegram bot to translate, practice and at the same time have some fun, biting code üòÑ</p>\n\n\n<h3>\n  \n  \n  üîß Under the Hood: Code and Concepts\n</h3>\n\n<p>Dependencies and Setup<br>\npython-telegram-bot: abstracts Telegram API with handlers and callbacks.</p>\n\n<p>deep-translator: lightweight client for Google Translate (without using the official API, plus googletrans flags many errors).</p>\n\n<p>Async I/O with async def: avoids crashes and improves real-time experience.</p>\n\n<p>context.user_data: per-user dict to remember preferences without database.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">logging</span>\n<span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"n\">telegram</span> <span class=\"kn\">import</span> <span class=\"n\">Update</span><span class=\"p\">,</span> <span class=\"n\">InlineKeyboardButton</span><span class=\"p\">,</span> <span class=\"n\">InlineKeyboardMarkup</span>\n<span class=\"kn\">from</span> <span class=\"n\">telegram.ext</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Application</span><span class=\"p\">,</span>\n    <span class=\"n\">CommandHandler</span><span class=\"p\">,</span>\n    <span class=\"n\">MessageHandler</span><span class=\"p\">,</span>\n    <span class=\"n\">filters</span><span class=\"p\">,</span>\n    <span class=\"n\">CallbackContext</span><span class=\"p\">,</span>\n    <span class=\"n\">CallbackQueryHandler</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"n\">deep_translator</span> <span class=\"kn\">import</span> <span class=\"n\">GoogleTranslator</span>\n</code></pre>\n\n</div>\n\n\n\n<p>We import key classes from python-telegram-bot.</p>\n\n<p>ApplicationBuilder creates the bot, and the handlers are the ‚Äúroutes‚Äù that execute functions according to commands or responses.</p>\n\n\n\n\n<h2>\n  \n  \n  Translation Function\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">translate_message</span><span class=\"p\">(</span><span class=\"n\">update</span><span class=\"p\">:</span> <span class=\"n\">Update</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">CallbackContext</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">user_text</span> <span class=\"o\">=</span> <span class=\"n\">update</span><span class=\"p\">.</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">text</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">update</span><span class=\"p\">.</span><span class=\"n\">effective_user</span><span class=\"p\">.</span><span class=\"nb\">id</span>\n\n    <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">User </span><span class=\"si\">{</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"s\"> sent text: </span><span class=\"si\">{</span><span class=\"n\">user_text</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">target_language</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">user_data</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">target_language</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">en</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">get_running_loop</span><span class=\"p\">()</span>\n        <span class=\"n\">translated_text</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">loop</span><span class=\"p\">.</span><span class=\"nf\">run_in_executor</span><span class=\"p\">(</span>\n            <span class=\"bp\">None</span><span class=\"p\">,</span>\n            <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nc\">GoogleTranslator</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">target_language</span><span class=\"p\">).</span><span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"n\">user_text</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">&lt;b&gt;Original:&lt;/b&gt;</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">user_text</span><span class=\"si\">}</span><span class=\"se\">\\n\\n</span><span class=\"sh\">\"</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">&lt;b&gt;Translation (</span><span class=\"si\">{</span><span class=\"n\">target_language</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s\">):&lt;/b&gt;</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">translated_text</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">update</span><span class=\"p\">.</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">reply_text</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">parse_mode</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">HTML</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Successful translation for </span><span class=\"si\">{</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"s\"> to </span><span class=\"si\">{</span><span class=\"n\">target_language</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n        <span class=\"n\">error_message</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Translation error. Please try again.</span><span class=\"sh\">'</span>\n        <span class=\"k\">await</span> <span class=\"n\">update</span><span class=\"p\">.</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">reply_text</span><span class=\"p\">(</span><span class=\"n\">error_message</span><span class=\"p\">)</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Translation error: </span><span class=\"si\">{</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Explanation:</p>\n\n<p>async def declares a coroutine, which allows await (although we use synchronous library here; in real projects it is convenient to use an asynchronous client).</p>\n\n\n\n\n<h2>\n  \n  \n  üß™ Try It Out in 60 Seconds\n</h2>\n\n<p><code><br>\ngit clone https://github.com/Jean-EstevezT/LinguaTranslateSpark<br>\ncd LinguaTranslateSpark<br>\npip install python-telegram-bot deep-translator<br>\n</code></p>\n\n<ul>\n<li><p>Put your token in config.py (or environment variable).</p></li>\n<li><p>Run: python bot.py</p></li>\n<li><p>Chat with your bot: @LinguaTranslateSparkBot</p></li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  üí° What I Learned\n</h2>\n\n<p>Callback Queries: how to capture clicks on inline buttons.</p>\n\n<p>Session State: using context.user_data without external database.</p>\n\n<p>Async vs Sync: when and why to use coroutines in bots.</p>\n\n<p>Error Handling: wrapping translations in try/except to control network failures or API limits.</p>\n\n\n\n\n<h2>\n  \n  \n  üì¶ Project Links\n</h2>\n\n<p>üîó GitHub: <a href=\"https://github.com/Jean-EstevezT/=\" rel=\"noopener noreferrer\">https://github.com/Jean-EstevezT/=</a><br>\nü§ñ Telegram: @LinguaTranslateSparkBot<br>\nüê¶ Twitter: <a href=\"https://x.com/jeantvz\" rel=\"noopener noreferrer\">https://x.com/jeantvz</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Configure an inverse proxy with NGINX for 3 microservices using Docker Compose and Docker Swarm.","url":"https://dev.to/rhonalchirinos/configure-an-inverse-proxy-with-nginx-for-3-microservices-using-docker-compose-and-docker-swarm-2c26","date":1751074819,"author":"Rhonal Chirinos","guid":174107,"unread":true,"content":"<h1>\n  \n  \n  ‚úÖ Task\n</h1>\n\n<p>Configure an inverse proxy with NGINX for 3 microservices using Docker Compose and Docker Swarm.</p>\n\n\n\n\n<h2>\n  \n  \n  üê≥ Initialize Docker Swarm\n</h2>\n\n<p>Initialize Docker Swarm on your manager node:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>docker swarm init \n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  ‚ûï Add Worker Nodes to the Swarm\n</h2>\n\n<p>To add worker nodes to your Swarm, run the following command on each worker node (replace the token and IP with your actual values):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>docker swarm <span class=\"nb\">join</span> <span class=\"nt\">--token</span> &lt;WORKER_TOKEN&gt; &lt;MANAGER_IP&gt;:2377\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p><strong>Tip:</strong> Retrieve the worker join token with:</p>\n\n\n<pre class=\"highlight shell\"><code>docker swarm join-token worker\n</code></pre>\n\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  üè∑Ô∏è Label Your Nodes\n</h2>\n\n<p>Label your nodes to specify their roles (e.g., database or worker):</p>\n\n<ol>\n<li>\n<p>List all nodes:<br>\n</p>\n<pre class=\"highlight shell\"><code>docker node <span class=\"nb\">ls</span> \n</code></pre>\n\n</li>\n<li>\n<p>Add a label to a node (replace <code>NODE_ID</code> as needed):<br>\n</p>\n<pre class=\"highlight shell\"><code>docker node update <span class=\"nt\">--label-add</span> <span class=\"nv\">db</span><span class=\"o\">=</span><span class=\"nb\">true </span>NODE_ID\ndocker node update <span class=\"nt\">--label-add</span> <span class=\"nv\">worker</span><span class=\"o\">=</span><span class=\"nb\">true </span>NODE_ID\n</code></pre>\n\n</li>\n</ol>\n\n\n\n\n<h2>\n  \n  \n  üìù Example <code>docker-compose.yml</code>\n</h2>\n\n<p>Below is an example <code>docker-compose.yml</code> file for your stack:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">version</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">3.8'</span>\n\n<span class=\"na\">services</span><span class=\"pi\">:</span>\n  <span class=\"na\">db</span><span class=\"pi\">:</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">mongo:latest</span>\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">27017:27017</span>\n    <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">db-data:/data/db</span>\n    <span class=\"na\">deploy</span><span class=\"pi\">:</span>\n      <span class=\"na\">placement</span><span class=\"pi\">:</span>\n        <span class=\"na\">constraints</span><span class=\"pi\">:</span>\n          <span class=\"pi\">-</span> <span class=\"s\">node.labels.db == </span><span class=\"kc\">true</span>\n      <span class=\"na\">resources</span><span class=\"pi\">:</span>\n        <span class=\"na\">limits</span><span class=\"pi\">:</span>\n          <span class=\"na\">cpus</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">8.0'</span>\n          <span class=\"na\">memory</span><span class=\"pi\">:</span> <span class=\"s\">8G</span>\n\n  <span class=\"na\">survey</span><span class=\"pi\">:</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">rhonalchirinos/exec04-survey:latest</span>\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">3000:3000</span>\n    <span class=\"na\">command</span><span class=\"pi\">:</span> <span class=\"s\">sh -c \"node /app/src/main.js\"</span>\n    <span class=\"na\">depends_on</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">db</span>\n    <span class=\"na\">deploy</span><span class=\"pi\">:</span>\n      <span class=\"na\">replicas</span><span class=\"pi\">:</span> <span class=\"m\">3</span>\n      <span class=\"na\">resources</span><span class=\"pi\">:</span>\n        <span class=\"na\">limits</span><span class=\"pi\">:</span>\n          <span class=\"na\">cpus</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">1.0'</span>\n          <span class=\"na\">memory</span><span class=\"pi\">:</span> <span class=\"s\">1G</span>\n      <span class=\"na\">placement</span><span class=\"pi\">:</span>\n        <span class=\"na\">constraints</span><span class=\"pi\">:</span> <span class=\"pi\">[</span> <span class=\"nv\">node.labels.worker == true</span> <span class=\"pi\">]</span>\n\n  <span class=\"na\">auth</span><span class=\"pi\">:</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">rhonalchirinos/exec04-auth:latest</span>\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">3001:3001</span>\n    <span class=\"na\">command</span><span class=\"pi\">:</span> <span class=\"s\">sh -c \"node /app/src/main.js\"</span>\n    <span class=\"na\">depends_on</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">db</span>\n    <span class=\"na\">deploy</span><span class=\"pi\">:</span>\n      <span class=\"na\">replicas</span><span class=\"pi\">:</span> <span class=\"m\">3</span>\n      <span class=\"na\">resources</span><span class=\"pi\">:</span>\n        <span class=\"na\">limits</span><span class=\"pi\">:</span>\n          <span class=\"na\">cpus</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">1.0'</span>\n          <span class=\"na\">memory</span><span class=\"pi\">:</span> <span class=\"s\">1G</span>\n      <span class=\"na\">placement</span><span class=\"pi\">:</span>\n        <span class=\"na\">constraints</span><span class=\"pi\">:</span> <span class=\"pi\">[</span> <span class=\"nv\">node.labels.worker == true</span> <span class=\"pi\">]</span>\n    <span class=\"na\">environment</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">MONGO_DB=mongodb://db:27017/app</span>\n      <span class=\"pi\">-</span> <span class=\"s\">PORT=3001</span>\n\n  <span class=\"na\">stats</span><span class=\"pi\">:</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">rhonalchirinos/exec04-stats:latest</span>\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">3002:3002</span>\n    <span class=\"na\">depends_on</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">db</span>\n    <span class=\"na\">deploy</span><span class=\"pi\">:</span>\n      <span class=\"na\">replicas</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n      <span class=\"na\">resources</span><span class=\"pi\">:</span>\n        <span class=\"na\">limits</span><span class=\"pi\">:</span>\n          <span class=\"na\">cpus</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">1.0'</span>\n          <span class=\"na\">memory</span><span class=\"pi\">:</span> <span class=\"s\">1G</span>\n      <span class=\"na\">placement</span><span class=\"pi\">:</span>\n        <span class=\"na\">constraints</span><span class=\"pi\">:</span> <span class=\"pi\">[</span> <span class=\"nv\">node.labels.worker == true</span> <span class=\"pi\">]</span>\n\n  <span class=\"na\">haproxy</span><span class=\"pi\">:</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">rhonalchirinos/exec04-haproxy:latest</span>\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">80:8080\"</span>\n    <span class=\"na\">depends_on</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">stats</span>\n      <span class=\"pi\">-</span> <span class=\"s\">auth</span>\n      <span class=\"pi\">-</span> <span class=\"s\">survey</span>\n    <span class=\"na\">deploy</span><span class=\"pi\">:</span>\n      <span class=\"na\">placement</span><span class=\"pi\">:</span>\n        <span class=\"na\">constraints</span><span class=\"pi\">:</span> <span class=\"pi\">[</span> <span class=\"nv\">node.role == manager</span> <span class=\"pi\">]</span>\n\n  <span class=\"na\">visualizer</span><span class=\"pi\">:</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">dockersamples/visualizer:latest</span>\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">8080:8080\"</span>\n    <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">/var/run/docker.sock:/var/run/docker.sock:ro\"</span>\n    <span class=\"na\">deploy</span><span class=\"pi\">:</span>\n      <span class=\"na\">placement</span><span class=\"pi\">:</span>\n        <span class=\"na\">constraints</span><span class=\"pi\">:</span> <span class=\"pi\">[</span> <span class=\"nv\">node.role == manager</span> <span class=\"pi\">]</span>\n      <span class=\"na\">replicas</span><span class=\"pi\">:</span> <span class=\"m\">1</span>\n\n<span class=\"na\">volumes</span><span class=\"pi\">:</span>\n  <span class=\"na\">db-data</span><span class=\"pi\">:</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üöÄ Deploy the Stack\n</h2>\n\n<p>Deploy your stack using the following command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>docker stack deploy <span class=\"nt\">-c</span> docker-compose.yml mystack\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üìå Notes\n</h2>\n\n<ul>\n<li>Ensure all images are built and available (locally or on a registry) before deploying.</li>\n<li>The <code>haproxy</code> service acts as a reverse proxy for your microservices.</li>\n<li>The <code>visualizer</code> service provides a UI to visualize your Docker Swarm cluster.</li>\n<li>Adjust resource limits and replica counts as needed for your environment.</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Memes only a DEV can relate to. (part 2)","url":"https://dev.to/contractorx/memes-only-a-dev-can-relate-to-part-2-328c","date":1751072368,"author":"Collins Dada","guid":174079,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fy30w4ylp4gbbbkmt84pf.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fy30w4ylp4gbbbkmt84pf.jpg\" alt=\"Image description\" width=\"681\" height=\"503\"></a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python flet tutorial","url":"https://dev.to/tinyabdu/python-flet-tutorial-1ihf","date":1751071729,"author":"Abdullahi Haruna","guid":174078,"unread":true,"content":"<p>Hello everyone I successful make a good video that explain python flet this videos can help you to start building mobile apps with python<br>\n<a href=\"https://youtu.be/gcnpjeue-Tw?si=txMWCvHLwlvHT4Cb\" rel=\"noopener noreferrer\">https://youtu.be/gcnpjeue-Tw?si=txMWCvHLwlvHT4Cb</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üç∏ Selecting the Largest Sum Subsequence of Length K ‚Äì LeetCode 2099 (C++ | JavaScript | Python )","url":"https://dev.to/om_shree_0709/selecting-the-largest-sum-subsequence-of-length-k-leetcode-2099-c-javascript-python--gcg","date":1751070457,"author":"Om Shree","guid":174077,"unread":true,"content":"<p>Hey, algorithm enthusiasts! üöÄ</p>\n\n<p>Today, we explore a clean and greedy approach to one of LeetCode's simpler but clever problems: <strong>\"2099. Find Subsequence of Length K With the Largest Sum.\"</strong></p>\n\n<p>At first glance, it feels like a straightforward sorting challenge, but what makes this interesting is how we maintain the <em>original order</em> of the subsequence while still capturing the top <code>k</code> values. Let's break it down methodically.</p>\n\n\n\n\n<h3>\n  \n  \n  üß† Problem Summary\n</h3>\n\n<p><strong>Input:</strong></p>\n\n<ul>\n<li>An integer array <code>nums</code>\n</li>\n<li>An integer <code>k</code>\n</li>\n</ul>\n\n<p><strong>Goal:</strong></p>\n\n<ul>\n<li>Find a <strong>subsequence</strong> of length <code>k</code> with the <strong>largest sum</strong>.</li>\n<li>The subsequence must preserve the relative ordering of the original array.</li>\n</ul>\n\n<p><strong>Definition:</strong></p>\n\n<ul>\n<li>A <strong>subsequence</strong> is formed by deleting zero or more elements without changing the order of the remaining elements.</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  üß© Intuition\n</h3>\n\n<p>To maximize the sum of the subsequence:</p>\n\n<ul>\n<li>We want the <strong>k largest elements</strong> from the array.</li>\n<li>But since <strong>relative order matters</strong>, we can't just sort and slice.</li>\n</ul>\n\n<p><strong>Key Insight:</strong></p>\n\n<ul>\n<li>Track the indices of the k largest values.</li>\n<li>Reconstruct the result by scanning the original array and selecting only those values.</li>\n</ul>\n\n<p>This is a classic case where combining a min-heap selection (or <code>nth_element</code>) with sorting by indices lets us optimize both for value and order.</p>\n\n\n\n\n<h3>\n  \n  \n  ‚öôÔ∏è Approach\n</h3>\n\n<ol>\n<li>\n<strong>Find the Threshold:</strong> Use <code>nth_element</code> (or min-heap) to determine the smallest number in the top <code>k</code> values.</li>\n<li>\n<strong>Count Frequency:</strong> Count how many values are strictly greater than the threshold and how many equal to it can still be selected.</li>\n<li>\n<strong>Reconstruct Subsequence:</strong> Traverse the original array and greedily add eligible values.</li>\n</ol>\n\n\n\n\n<h3>\n  \n  \n  üßÆ C++ Code\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight cpp\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n <span class=\"nl\">public:</span>\n  <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">maxSubsequence</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">);</span>\n    <span class=\"n\">nth_element</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">];</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">larger</span> <span class=\"o\">=</span>\n        <span class=\"n\">ranges</span><span class=\"o\">::</span><span class=\"n\">count_if</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"p\">](</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"n\">threshold</span><span class=\"p\">;</span> <span class=\"p\">});</span>\n    <span class=\"kt\">int</span> <span class=\"n\">equal</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">larger</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"n\">threshold</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"n\">threshold</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">equal</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">);</span>\n        <span class=\"o\">--</span><span class=\"n\">equal</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  üíª JavaScript Code\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">maxSubsequence</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">nums</span><span class=\"p\">].</span><span class=\"nf\">sort</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">b</span> <span class=\"o\">-</span> <span class=\"nx\">a</span><span class=\"p\">).</span><span class=\"nf\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">freq</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Map</span><span class=\"p\">();</span>\n\n    <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">num</span> <span class=\"k\">of</span> <span class=\"nx\">arr</span><span class=\"p\">)</span>\n        <span class=\"nx\">freq</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">freq</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">num</span> <span class=\"k\">of</span> <span class=\"nx\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">freq</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">);</span>\n            <span class=\"nx\">freq</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">,</span> <span class=\"nx\">freq</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"nx\">k</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  üêç Python Code\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">maxSubsequence</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"n\">heapq</span>\n    <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">heapq</span><span class=\"p\">.</span><span class=\"nf\">nlargest</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">collections</span><span class=\"p\">.</span><span class=\"nc\">Counter</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]:</span>\n            <span class=\"n\">res</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n            <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">res</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  üìù Key Notes\n</h3>\n\n<ul>\n<li>\n<strong>Time Complexity:</strong> O(n) for selection + O(n) for reconstruction</li>\n<li>\n<strong>Space Complexity:</strong> O(n) for auxiliary arrays/counters</li>\n<li>Carefully manage duplicates at the threshold value.</li>\n<li>Preserve order during reconstruction by processing original input.</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  ‚úÖ Final Thoughts\n</h3>\n\n<p>This is a great example of blending greedy logic with practical selection techniques like <code>nth_element</code> or heap manipulation. Although it‚Äôs categorized as \"Easy\", managing the edge cases (like duplicate threshold elements) adds depth to the problem.</p>\n\n<p>Keep learning and stay sharp! üíª‚ú®</p>\n\n<p>Happy coding! üß†üî•</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"This algorithm provides a strong evidence that P = NP.","url":"https://dev.to/frank_vega_987689489099bf/this-algorithm-provides-a-strong-evidence-that-p-np-19h2","date":1751066224,"author":"Frank Vega","guid":174051,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/frank_vega_987689489099bf\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F2948544%2F3700e162-24cb-433d-8327-219f70a95c37.jpg\" alt=\"frank_vega_987689489099bf\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/frank_vega_987689489099bf/the-furones-algorithm-15lp\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>The Furones Algorithm</h2>\n      <h3>Frank Vega „Éª Jun 27</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#programming</span>\n        <span class=\"ltag__link__tag\">#algorithms</span>\n        <span class=\"ltag__link__tag\">#computerscience</span>\n        <span class=\"ltag__link__tag\">#python</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Please take 5 minutes to comment","url":"https://dev.to/setrathexx/-4h26","date":1751062229,"author":"SetraTheX","guid":174021,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/setrathexx\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F3278123%2F62ec0628-4a1c-4f96-8447-ecb24af00e4f.jpeg\" alt=\"setrathexx\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/setrathexx/how-i-built-a-smarter-zip-engine-with-ai-my-day-9-10-journey-pagonic-project-262m\" class=\"ltag__link__link\" rel=\"noopener noreferrer\">\n    <div class=\"ltag__link__content\">\n      <h2>How I Built a Smarter ZIP Engine with AI: My Day 9 &amp; 10 Journey (Pagonic Project)</h2>\n      <h3>SetraTheX „Éª Jun 26</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#ai</span>\n        <span class=\"ltag__link__tag\">#opensource</span>\n        <span class=\"ltag__link__tag\">#softwareengineering</span>\n        <span class=\"ltag__link__tag\">#python</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Creando un drag and drop con javascript y css y algo de python.","url":"https://dev.to/hpollack/creando-un-drag-and-drop-con-javascript-y-css-y-algo-de-python-507b","date":1751060585,"author":"Hermann Pollack (hpollack95)","guid":173987,"unread":true,"content":"<p>Las aplicaciones web han evolucionado tanto que hoy no solo tenemos, herramientas y frameworks e distintos lenguajes, si no que adem√°s, se han hecho mas amigables con el usuario, si lo comparamos como era en los 2000.</p>\n\n<p>Pues bien, una herramienta √∫til, es el \"arrastrar y soltar\". Este concepto no es nuevo, y han existido librer√≠as Javascript para crear el efecto. Sin embargo, desde las especificaciones de Ecmascript 6, el usar Javascript puro (<em>Vanilla Javascript para los conocedores</em>), no solo se ha vuelto m√°s f√°cil, si no que no necesitas depender de extensiones o librer√≠as externas, como lo fue por ejemplo <a href=\"https://desdelaotravereda.wordpress.com/2023/08/28/cosas-de-programacion-jquery-conceptos-su-uso-y-vigencia-en-nuestros-dias/\" rel=\"noopener noreferrer\"><strong>JQuery</strong></a>.</p>\n\n<p>Como ejemplo, usar√© un proyecto personal que he estado desarrollando este tiempo. Sin embargo, el concepto en general, se puede aplicar a cualquier aplicaci√≥n web que est√©n desarrollando.</p>\n\n<h2>\n  \n  \n  Estructura base.\n</h2>\n\n<h3>\n  \n  \n  HTML.\n</h3>\n\n<p>Vamos a crear el campo donde arrastraremos el archivo, en este caso, la imagen.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"drop-zone\"</span> <span class=\"na\">id=</span><span class=\"s\">\"fotoperfil\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"fa fa-upload\"</span><span class=\"nt\">&gt;</span> Arrastre la foto o haga click para seleccionar archivos<span class=\"nt\">&lt;/span&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"file\"</span> <span class=\"na\">name=</span><span class=\"s\">\"imagen\"</span> <span class=\"na\">id=</span><span class=\"s\">\"imagen\"</span> <span class=\"na\">class=</span><span class=\"s\">\"form-control\"</span><span class=\"nt\">&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>El c√≥digo de arriba, crea un <code>&lt;div&gt;</code> con la clase <code>.drop-zone</code> y el id <code>fotoperfil</code>, que es la que manejar√° el evento de arastre. Fuera de este, colocaremos el <code>&lt;input&gt;</code> con la propiedad <code>file</code>, el cual tendra el id <code>imagen</code>.  Teniendo definido esto, le damos estilo con CSS.</p>\n\n<p>En la zona donde se ver√° la imagen una vez cargada, al ser <a href=\"https://dev.to/hpollack/flask-y-mvc-conceptos-e-instalacion-46j5\"><strong>Flask</strong></a>, nuestro backend, usamos el motor <strong>Jinja2</strong>, para renderizar. Esto debe quedar asi<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"card-body profile-card pt-4 d-flex flex-column align-items-center\"</span><span class=\"nt\">&gt;</span>\n    {% for user in datausuario %}\n    <span class=\"c\">&lt;!-- Aqu√≠ validamos si existe la url de la imagen. Si es el caso, se muestra  --&gt;</span>\n        {% if user[13] %}\n            <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"{{ url_for('static', filename='img/profile/' ~ user[13]) }}\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"Profile\"</span> <span class=\"na\">class=</span><span class=\"s\">\"rounded-5 img-fluid profile-image\"</span><span class=\"nt\">&gt;</span>\n        {% else %}\n            <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"{{ url_for('static', filename='img/profile/avatar.png') }}\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"Profile\"</span> <span class=\"na\">class=</span><span class=\"s\">\"rounded-5 img-fluid\"</span><span class=\"nt\">&gt;</span>\n        {% endif %}\n\n        <span class=\"nt\">&lt;h2&gt;</span>{{ user[1] }} {{ user[2] }}<span class=\"nt\">&lt;/h2&gt;</span>\n        <span class=\"nt\">&lt;h3&gt;</span>{{ user[3] }} <span class=\"nt\">&lt;/h3&gt;</span>\n        {% if user[13]  %}                        \n            <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-danger mb-4\"</span> <span class=\"na\">id=</span><span class=\"s\">\"quitaimagen\"</span><span class=\"nt\">&gt;&lt;i</span> <span class=\"na\">class=</span><span class=\"s\">\"fa fa-times\"</span><span class=\"nt\">&gt;&lt;/i&gt;</span>  Eliminar imagen<span class=\"nt\">&lt;/button&gt;</span>\n        {% endif %}\n        <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-primary\"</span> <span class=\"na\">data-bs-toggle=</span><span class=\"s\">\"modal\"</span> <span class=\"na\">data-bs-target=</span><span class=\"s\">\"#nuevaimagen\"</span><span class=\"nt\">&gt;&lt;i</span> <span class=\"na\">class=</span><span class=\"s\">\"fa fa-upload\"</span><span class=\"nt\">&gt;&lt;/i&gt;</span>  Cargar Nueva Imagen<span class=\"nt\">&lt;/button&gt;</span>\n    {% endfor %}\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  CSS.\n</h3>\n\n<p>Procedemos a darle estilo.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight css\"><code><span class=\"nc\">.drop-zone</span> <span class=\"p\">{</span>\n    <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">150px</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">2px</span> <span class=\"nb\">dashed</span> <span class=\"m\">#aaa</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n    <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">flex</span><span class=\"p\">;</span>\n    <span class=\"nl\">align-items</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span>\n    <span class=\"nl\">justify-content</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#666</span><span class=\"p\">;</span>\n    <span class=\"nl\">cursor</span><span class=\"p\">:</span> <span class=\"nb\">pointer</span><span class=\"p\">;</span>\n    <span class=\"nl\">transition</span><span class=\"p\">:</span> <span class=\"m\">0.2s</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.drop-zone.draggable</span> <span class=\"p\">{</span>\n    <span class=\"nl\">border-color</span><span class=\"p\">:</span> <span class=\"m\">#333</span><span class=\"p\">;</span>\n    <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#fff</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* Si solo quieres que sea un campo y no todos en el proyecto,\npuedes utilizar el id del campo */</span>\n<span class=\"nt\">input</span><span class=\"o\">[</span><span class=\"nt\">type</span><span class=\"o\">=</span><span class=\"s1\">\"file\"</span><span class=\"o\">]</span> <span class=\"p\">{</span>\n    <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>En <code>.drop-zone</code> definimos el alto que tendr√° el campo -el ancho lo dejamos a criterio-. con un borde segmentado de dos pixeles y un color gris. Le a√±adimos el cursor pointer -üëÜ- para darle la visualizaci√≥n de que el campo es mas grande.</p>\n\n<p>El truco de esto es que ocultamos el campo tipo \"file\", que es el que recibe la imagen. En este caso, el campo va dentro de un Modal de Bootstrap 5</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fkwejrb33d801v5mcuorp.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fkwejrb33d801v5mcuorp.png\" alt=\"modal con drop zone\" width=\"633\" height=\"409\"></a></p>\n\n<h3>\n  \n  \n  Javascript.\n</h3>\n\n<p>Ahora, hay que programar el evento. Lo primero es definir los selectores html.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">zonaFoto</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nf\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">#fotoperfil</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">campoFoto</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nf\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">#imagen</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Con estas constantes, escogemos <code>#fotoperfil</code> del div de la zona de arrastre vista mas arriba e <code>#imagen</code>, del campo tipo \"file\".</p>\n\n<p>Lo siguiente es definir la funci√≥n que tomara los archivos. Esto se puede hacer al final de script.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nf\">tomaArchivos</span><span class=\"p\">(</span><span class=\"nx\">archivos</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">transfer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DataTransfer</span><span class=\"p\">()</span>\n    <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">archivo</span> <span class=\"k\">of</span> <span class=\"nx\">archivos</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">archivo</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">.</span><span class=\"nf\">startsWith</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">image/</span><span class=\"dl\">'</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">lector</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FileReader</span><span class=\"p\">()</span>\n            <span class=\"nx\">lector</span><span class=\"p\">.</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">zonaFoto</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundImage</span> <span class=\"o\">=</span> <span class=\"s2\">`url(</span><span class=\"p\">${</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">}</span><span class=\"s2\">)`</span>\n                <span class=\"nx\">zonaFoto</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">bacgroundSize</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">contain</span><span class=\"dl\">'</span>\n                <span class=\"nx\">zonaFoto</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">bacgroundPosition</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">center</span><span class=\"dl\">'</span>\n                <span class=\"nx\">zonaFoto</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">bacgroundRepeat</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">no-repeat</span><span class=\"dl\">'</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"nx\">lector</span><span class=\"p\">.</span><span class=\"nf\">readAsDataURL</span><span class=\"p\">(</span><span class=\"nx\">archivo</span><span class=\"p\">)</span>\n            <span class=\"nx\">transfer</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"nx\">archivo</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nf\">alerta</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Solo se permiten imagenes</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">campoFoto</span><span class=\"p\">.</span><span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"nx\">transfer</span><span class=\"p\">.</span><span class=\"nx\">files</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">campoFoto</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>La funci√≥n <code>tomaArchivos()</code> es la que evaluar√° y procesar√° la imagen, usando el m√©todo <code>startsWith()</code> con el tipo mime <code>image/</code>. Este solo dejar√° pasar los archivos que sean tipo imagen (<em>se puede incluso definir la extensi√≥n de esta forma <code>image/png</code> si solo quieres de ese tipo</em>).</p>\n\n<p>El <code>FileReader()</code>, nos mostrar√° la imagen cargada en el campo de arrastre. Fuera del bucle <code>for</code> le pasamos la informaci√≥n con <code>DataTransfer()</code> al campo oculto.</p>\n\n<p>Por √∫ltimo, nos queda definir los eventos.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// Creamos el evento click para el div drop-zone</span>\n<span class=\"nx\">zonaFoto</span><span class=\"p\">.</span><span class=\"nf\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">campoFoto</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">()</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// Los dos eventos siguientes crean y deshacen el arrastrar</span>\n<span class=\"nx\">zonaFoto</span><span class=\"p\">.</span><span class=\"nf\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">dragover</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nf\">preventDefault</span><span class=\"p\">()</span>\n    <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nf\">stopPropagation</span><span class=\"p\">()</span>\n    <span class=\"nx\">zonaFoto</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">draggable</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">zonaFoto</span><span class=\"p\">.</span><span class=\"nf\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">dragleave</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span><span class=\"p\">{</span>\n    <span class=\"nx\">zonaFoto</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">draggable</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// Una vez que la imagen se deposita en la zona, se remueve la clase que genera el drag, toma el archivo y lo deja en el campo tipo file</span>\n<span class=\"nx\">zonaFoto</span><span class=\"p\">.</span><span class=\"nf\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">drop</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nf\">preventDefault</span><span class=\"p\">()</span>\n    <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nf\">stopPropagation</span><span class=\"p\">()</span>\n    <span class=\"nx\">zonaFoto</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">draggable</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">foto</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">files</span>\n    <span class=\"nf\">tomaArchivos</span><span class=\"p\">(</span><span class=\"nx\">foto</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// Por √∫ltimo, el campo file, detecta si hubo un cambio y toma la imagen guard√°ndola.</span>\n<span class=\"nx\">campoFoto</span><span class=\"p\">.</span><span class=\"nf\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">change</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">tomaArchivos</span><span class=\"p\">(</span><span class=\"nx\">campoFoto</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Estos eventos, son <code>dragover</code>, que crea el \"arrastrar\" y <code>dragleave</code> que lo quita, esto moviendo la clase <code>.dragabble</code>, sea el caso. El siguiente, <code>drop</code>, desactiva el arrastrar, dejando el archivo depositado en la zona y transfiri√©ndolo al campo tipo file, que detecta el cambio y lo guarda.</p>\n\n<p>Con esto, ahora creamos el evento para subirlo.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"cm\">/* En este evento, invocaremos al m√©todo fetch API que subir√° la imagen mas un dato adicional, esto para que el backend lo tome y procese */</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nf\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">uploadimagen</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nf\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">submit</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nf\">preventDefault</span><span class=\"p\">()</span>\n    <span class=\"nf\">cargaLoader</span><span class=\"p\">()</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FormData</span><span class=\"p\">()</span>\n    <span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">file</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nf\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">input[type=\"file\"]</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">files</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">idusuario</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">usuario</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/subirimagen</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">method</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">POST</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n        <span class=\"na\">body</span> <span class=\"p\">:</span> <span class=\"nx\">form</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nf\">then</span><span class=\"p\">(</span><span class=\"nx\">response</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">())</span>\n    <span class=\"p\">.</span><span class=\"nf\">then</span><span class=\"p\">(</span><span class=\"nx\">data</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">modal</span><span class=\"p\">.</span><span class=\"nf\">hide</span><span class=\"p\">()</span>\n        <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">resp</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nf\">cierraLoader</span><span class=\"p\">()</span>\n            <span class=\"nf\">jconfirm</span><span class=\"p\">({</span>\n                <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Realizado</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n                <span class=\"na\">content</span> <span class=\"p\">:</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">msg</span><span class=\"p\">,</span>\n                <span class=\"na\">type</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">green</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n                <span class=\"na\">buttons</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"na\">aceptar</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"na\">btnClass</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">btn-success ripple</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n                        <span class=\"na\">action</span> <span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                            <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nf\">reload</span><span class=\"p\">()</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">})</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span>  <span class=\"p\">{</span>\n            <span class=\"nf\">cierraLoader</span><span class=\"p\">()</span>\n            <span class=\"nf\">alerta</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">msg</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">error</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Con este evento en el bot√≥n, el formulario donde se encuentra el drag and drop, subir√° la imagen al backend.</p>\n\n<h2>\n  \n  \n  Backend Python Flask.\n</h2>\n\n<p>Ahora iremos por el lado del backend. Ya definidos los eventos en el front, ahora debemos procesar la imagen que esta ya cargada en buffer.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@user.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/subirimagen</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">POST</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">upload_image</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">POST</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">idusuario</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">idusuario</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n        <span class=\"n\">nombrearchivo</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n\n        <span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"s\">file</span><span class=\"sh\">'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">files</span> <span class=\"ow\">and</span> <span class=\"sh\">'</span><span class=\"s\">idusuario</span><span class=\"sh\">'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">form</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">resp</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">msg</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">No se encontraron datos</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nb\">file</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">files</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">file</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">filename</span> <span class=\"o\">==</span> <span class=\"sh\">''</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">resp</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">msg</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">No se ha seleccionado ningun archivo</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Esta esa funcion aparte, que se describe mas abajo.\n</span>                <span class=\"n\">extension</span> <span class=\"o\">=</span> <span class=\"n\">Utils</span><span class=\"p\">.</span><span class=\"nf\">validar_extension</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">extension</span><span class=\"p\">:</span>               \n                    <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">resp</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">msg</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">El archivo no es permitido</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">extension</span> <span class=\"o\">=</span> <span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">filename</span><span class=\"p\">.</span><span class=\"nf\">rsplit</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nf\">lower</span><span class=\"p\">()</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">extension</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">png</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">jpg</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">jpeg</span><span class=\"sh\">'</span><span class=\"p\">}:</span>\n                        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">resp</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">msg</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">Este archivo no es una imagen valida</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n            <span class=\"n\">directorio</span> <span class=\"o\">=</span> <span class=\"n\">UPLOAD_PROFILE_IMAGE</span>\n            <span class=\"n\">upload</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">directorio</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">upload</span><span class=\"p\">)</span>\n                <span class=\"n\">nombrearchivo</span> <span class=\"o\">=</span> <span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">filename</span>\n                <span class=\"c1\"># Una vez arriba el archivo, se procede a guardar su nombre y extensi√≥n.\n</span>                <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">usuarioModel</span><span class=\"p\">.</span><span class=\"nf\">update_url_img_profile</span><span class=\"p\">(</span><span class=\"n\">idusuario</span><span class=\"p\">,</span> <span class=\"n\">nombrearchivo</span><span class=\"p\">)</span>                \n\n                <span class=\"k\">if</span> <span class=\"n\">resp</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"n\">Utils</span><span class=\"p\">.</span><span class=\"nf\">set_history</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">usuario</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"sh\">'</span><span class=\"s\">paginausuario</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Se subio foto de perfil para usuario  </span><span class=\"si\">{</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">idusuario</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">resp</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">msg</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">Imagen subida correctamente</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">resp</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">msg</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">Ocurrio un error al intentar subir el archivo</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n            <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">Utils</span><span class=\"p\">.</span><span class=\"nf\">errorLog</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Error al guardar el archivo </span><span class=\"si\">{</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">resp</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">msg</span><span class=\"sh\">'</span> <span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Error al guardar el archivo</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n<p>En este controlador, validamos la imagen y el par√°metro asociado, para entregarselo al model que ingresara la url a la base de datos.</p>\n\n<p>Definimos una constante <code>UPLOAD_PROFILE_IMAGE</code>, que guarda la url donde quedara.  Se pone por lo general en el encabezado antes de las funciones o en caso de ser OPP, fuera de la clase.  Para este caso, usaremos una ruta est√°tica definida en el backend.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">UPLOAD_PROFILE_IMAGE</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">static/img/profile/</span><span class=\"sh\">'</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Lo otro a considerar es <code>Utils.validar_extension(file.filename)</code> que es una funci√≥n parte de una librer√≠a interna para validar las extensiones almacenadas en un diccionario. Se detalla a continuaci√≥n.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\">#Utils.py\n# Aqui se definen las extensiones permitidas. \n</span><span class=\"n\">ALLOWED_EXTENSIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">xslx</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">png</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">jpg</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">jpeg</span><span class=\"sh\">'</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># Funcion que valida si la extensi√≥n est√° dentro del diccionario.\n</span><span class=\"k\">def</span> <span class=\"nf\">validar_extension</span><span class=\"p\">(</span><span class=\"n\">archivo</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sh\">'</span><span class=\"s\">.</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">archivo</span> <span class=\"ow\">and</span> <span class=\"n\">archivo</span><span class=\"p\">.</span><span class=\"nf\">rsplit</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nf\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">ALLOWED_EXTENSIONS</span>\n</code></pre>\n\n</div>\n\n\n\n<p>En cuanto al modelo, el m√©todo ser√° de actualizaci√≥n del campo en espec√≠fico, donde el par√°metro <code>idusuario</code> es el identificador.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">update_url_img_profile</span><span class=\"p\">(</span><span class=\"n\">idusuario</span><span class=\"p\">,</span> <span class=\"n\">ruta</span><span class=\"p\">):</span>\n    <span class=\"n\">conexion</span> <span class=\"o\">=</span> <span class=\"nf\">conn</span><span class=\"p\">()</span>\n    <span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">update public.usuarios set imagenperfil = %s where id = %s;</span><span class=\"sh\">\"</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"n\">conexion</span><span class=\"p\">.</span><span class=\"nf\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">sql</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">ruta</span><span class=\"p\">,</span> <span class=\"n\">idusuario</span><span class=\"p\">))</span>\n        <span class=\"n\">sql</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n        <span class=\"n\">conexion</span><span class=\"p\">.</span><span class=\"nf\">commit</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">except</span> <span class=\"n\">psycopg2</span><span class=\"p\">.</span><span class=\"n\">DatabaseError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">conexion</span><span class=\"p\">.</span><span class=\"nf\">rollback</span><span class=\"p\">()</span>\n        <span class=\"n\">Utils</span><span class=\"p\">.</span><span class=\"nf\">errorLog</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">conexion</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>El resultado final ser√°:</p>\n\n<ol>\n<li>Se podr√° arrastrar y soltar una imagen dentro del recuadro.</li>\n<li>Se subir√° al backend, guardando la imagen y mostr√°ndola en la zona donde va el avatar.</li>\n</ol>\n\n<p>El resultado, pueden verlo en el siguiente video.</p>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/ga7UGYSpPiY\">\n</iframe>\n</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Creating AI Agents That Use Your MCP Server (Part 4/5)","url":"https://dev.to/bredmond1019/creating-ai-agents-that-use-your-mcp-server-part-45-3baf","date":1751056727,"author":"bredmond1019","guid":173965,"unread":true,"content":"<p>Now comes the magic! In Part 3, we built an MCP server that can collect and analyze feedback. Today, we'll create an AI agent that uses this server to intelligently handle customer interactions. By the end, you'll have a working AI system!</p>\n\n<h2>\n  \n  \n  What We're Building\n</h2>\n\n<p>We'll create an AI agent that:</p>\n\n<ul>\n<li>Connects to our MCP server</li>\n<li>Uses an LLM to understand customer needs</li>\n<li>Automatically collects and analyzes feedback</li>\n<li>Generates intelligent reports</li>\n<li>Suggests business improvements</li>\n</ul>\n\n<h2>\n  \n  \n  Step 1: Setting Up LLM Integration\n</h2>\n\n<p>First, let's install what we need:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Make sure your virtual environment is activated</span>\npip <span class=\"nb\">install </span>openai python-dotenv aiohttp\n</code></pre>\n\n</div>\n\n\n\n<p>Create a <code>.env</code> file for your API keys:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># .env file</span>\n<span class=\"nv\">OPENAI_API_KEY</span><span class=\"o\">=</span>your-api-key-here\n<span class=\"c\"># Get your key from: https://platform.openai.com/api-keys</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Step 2: Building Our AI Agent\n</h2>\n\n<p>Create <code>feedback_agent.py</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\">#!/usr/bin/env python3\n</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\nAI Agent for Customer Feedback System\nIntelligently handles feedback collection and analysis\n</span><span class=\"sh\">\"\"\"</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">json</span>\n<span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">List</span>\n<span class=\"kn\">from</span> <span class=\"n\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"n\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span>\n\n<span class=\"c1\"># Load environment variables\n</span><span class=\"nf\">load_dotenv</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># For LLM integration\n</span><span class=\"kn\">from</span> <span class=\"n\">openai</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncOpenAI</span>\n\n<span class=\"c1\"># For MCP client\n</span><span class=\"kn\">from</span> <span class=\"n\">mcp</span> <span class=\"kn\">import</span> <span class=\"n\">ClientSession</span><span class=\"p\">,</span> <span class=\"n\">StdioServerParameters</span>\n<span class=\"kn\">from</span> <span class=\"n\">mcp.client.stdio</span> <span class=\"kn\">import</span> <span class=\"n\">stdio_client</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FeedbackAgent</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Feedback Assistant</span><span class=\"sh\">\"</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">llm</span> <span class=\"o\">=</span> <span class=\"nc\">AsyncOpenAI</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">OPENAI_API_KEY</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">mcp_session</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">server_params</span> <span class=\"o\">=</span> <span class=\"nc\">StdioServerParameters</span><span class=\"p\">(</span>\n            <span class=\"n\">command</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">python</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">feedback_server.py</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">connect_to_server</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Connect to our MCP server</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">üîå Connecting to feedback server...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nf\">stdio_client</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">server_params</span><span class=\"p\">)</span> <span class=\"nf\">as </span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"p\">,</span> <span class=\"n\">write</span><span class=\"p\">):</span>\n            <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">ClientSession</span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"p\">,</span> <span class=\"n\">write</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n                <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">mcp_session</span> <span class=\"o\">=</span> <span class=\"n\">session</span>\n\n                <span class=\"c1\"># Initialize connection\n</span>                <span class=\"k\">await</span> <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">initialize</span><span class=\"p\">()</span>\n\n                <span class=\"c1\"># Get available tools and resources\n</span>                <span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">list_tools</span><span class=\"p\">()</span>\n                <span class=\"n\">resources</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">list_resources</span><span class=\"p\">()</span>\n\n                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">‚úÖ Connected! Found </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">tools</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> tools and </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">resources</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> resources</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># Keep the session active\n</span>                <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">run_agent_loop</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">think</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Use LLM to understand and plan actions</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">llm</span><span class=\"p\">.</span><span class=\"n\">chat</span><span class=\"p\">.</span><span class=\"n\">completions</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gpt-3.5-turbo</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">system</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"\"\"</span><span class=\"s\">You are </span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">, an AI assistant for a caf√©.\n                    You help collect and analyze customer feedback.\n                    Be friendly, professional, and insightful.</span><span class=\"sh\">\"\"\"</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">task</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n            <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mf\">0.7</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">collect_customer_feedback</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">conversation</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Intelligently extract feedback from conversation</span><span class=\"sh\">\"\"\"</span>\n\n        <span class=\"c1\"># Use LLM to extract information\n</span>        <span class=\"n\">extraction_prompt</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\n        Extract the following from this customer conversation:\n        1. Customer name (if mentioned)\n        2. The main feedback points\n        3. Overall rating (1-5)\n        4. Key topics mentioned\n\n        Conversation:\n        </span><span class=\"si\">{</span><span class=\"n\">conversation</span><span class=\"si\">}</span><span class=\"s\">\n\n        Return as JSON format.\n        </span><span class=\"sh\">\"\"\"</span>\n\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">llm</span><span class=\"p\">.</span><span class=\"n\">chat</span><span class=\"p\">.</span><span class=\"n\">completions</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gpt-3.5-turbo</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">system</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Extract information and return valid JSON only.</span><span class=\"sh\">\"</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">extraction_prompt</span><span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n            <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span>\n            <span class=\"n\">response_format</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">json_object</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">extracted</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Use MCP tool to collect feedback\n</span>        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">mcp_session</span><span class=\"p\">.</span><span class=\"nf\">call_tool</span><span class=\"p\">(</span>\n            <span class=\"sh\">\"</span><span class=\"s\">collect_feedback</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">customer_name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">extracted</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">customer_name</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Anonymous</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n                <span class=\"sh\">\"</span><span class=\"s\">feedback</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">extracted</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">feedback</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">conversation</span><span class=\"p\">),</span>\n                <span class=\"sh\">\"</span><span class=\"s\">rating</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">extracted</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">rating</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">status</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">collected</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">details</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">extracted</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">server_response</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">result</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">analyze_feedback_trends</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Analyze all feedback and generate insights</span><span class=\"sh\">\"\"\"</span>\n\n        <span class=\"c1\"># Get recent feedback from MCP server\n</span>        <span class=\"n\">recent_feedback</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">mcp_session</span><span class=\"p\">.</span><span class=\"nf\">read_resource</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">feedback://recent</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">summary_data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">mcp_session</span><span class=\"p\">.</span><span class=\"nf\">read_resource</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">feedback://summary</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Use LLM to generate insights\n</span>        <span class=\"n\">analysis_prompt</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\n        Analyze this customer feedback data and provide:\n        1. Key themes and patterns\n        2. Areas needing immediate attention\n        3. Positive aspects to maintain\n        4. Specific recommendations for improvement\n\n        Recent Feedback:\n        </span><span class=\"si\">{</span><span class=\"n\">recent_feedback</span><span class=\"si\">}</span><span class=\"s\">\n\n        Summary Statistics:\n        </span><span class=\"si\">{</span><span class=\"n\">summary_data</span><span class=\"si\">}</span><span class=\"s\">\n        </span><span class=\"sh\">\"\"\"</span>\n\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">llm</span><span class=\"p\">.</span><span class=\"n\">chat</span><span class=\"p\">.</span><span class=\"n\">completions</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gpt-3.5-turbo</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">system</span><span class=\"sh\">\"</span><span class=\"p\">,</span> \n                    <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">You are a business analyst. Provide actionable insights.</span><span class=\"sh\">\"</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">analysis_prompt</span><span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n            <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_customer_interaction</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Main interaction handler</span><span class=\"sh\">\"\"\"</span>\n\n        <span class=\"c1\"># Determine intent\n</span>        <span class=\"n\">intent_prompt</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\n        Classify this message intent:\n        - </span><span class=\"sh\">'</span><span class=\"s\">give_feedback</span><span class=\"sh\">'</span><span class=\"s\">: Customer wants to share feedback\n        - </span><span class=\"sh\">'</span><span class=\"s\">check_status</span><span class=\"sh\">'</span><span class=\"s\">: Customer asking about their previous feedback\n        - </span><span class=\"sh\">'</span><span class=\"s\">general_question</span><span class=\"sh\">'</span><span class=\"s\">: Other questions\n\n        Message: </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s\">\n\n        Return only the intent classification.\n        </span><span class=\"sh\">\"\"\"</span>\n\n        <span class=\"n\">intent_response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">llm</span><span class=\"p\">.</span><span class=\"n\">chat</span><span class=\"p\">.</span><span class=\"n\">completions</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gpt-3.5-turbo</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">system</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Classify intent. Return only the classification.</span><span class=\"sh\">\"</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">intent_prompt</span><span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n            <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">intent</span> <span class=\"o\">=</span> <span class=\"n\">intent_response</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">().</span><span class=\"nf\">lower</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">give_feedback</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">intent</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Collect feedback\n</span>            <span class=\"n\">feedback_result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">collect_customer_feedback</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Generate friendly response\n</span>            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Customer gave feedback. Details: </span><span class=\"si\">{</span><span class=\"n\">feedback_result</span><span class=\"si\">}</span><span class=\"s\">. </span><span class=\"sh\">\"</span>\n                <span class=\"sh\">\"</span><span class=\"s\">Thank them and mention any immediate actions we</span><span class=\"sh\">'</span><span class=\"s\">ll take.</span><span class=\"sh\">\"</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n        <span class=\"k\">elif</span> <span class=\"sh\">\"</span><span class=\"s\">check_status</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">intent</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Get feedback summary\n</span>            <span class=\"n\">summary</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">mcp_session</span><span class=\"p\">.</span><span class=\"nf\">read_resource</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">feedback://summary</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Customer asking about feedback status. Our summary: </span><span class=\"si\">{</span><span class=\"n\">summary</span><span class=\"si\">}</span><span class=\"s\">. </span><span class=\"sh\">\"</span>\n                <span class=\"sh\">\"</span><span class=\"s\">Provide a helpful update.</span><span class=\"sh\">\"</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># General response\n</span>            <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Respond helpfully to: </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_agent_loop</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Main agent loop for demo purposes</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">ü§ñ Feedback Agent is ready!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Commands: </span><span class=\"sh\">'</span><span class=\"s\">analyze</span><span class=\"sh\">'</span><span class=\"s\"> for trends, </span><span class=\"sh\">'</span><span class=\"s\">quit</span><span class=\"sh\">'</span><span class=\"s\"> to exit, or chat naturally</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">user_input</span> <span class=\"o\">=</span> <span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">You: </span><span class=\"sh\">\"</span><span class=\"p\">).</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">user_input</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">quit</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n                    <span class=\"k\">break</span>\n\n                <span class=\"k\">elif</span> <span class=\"n\">user_input</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">analyze</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n                    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">üìä Analyzing feedback trends...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n                    <span class=\"n\">analysis</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">analyze_feedback_trends</span><span class=\"p\">()</span>\n                    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Analysis:</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">analysis</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Handle as customer interaction\n</span>                    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">handle_customer_interaction</span><span class=\"p\">(</span><span class=\"n\">user_input</span><span class=\"p\">)</span>\n                    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Agent: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">-</span><span class=\"sh\">\"</span><span class=\"o\">*</span><span class=\"mi\">50</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n            <span class=\"k\">except</span> <span class=\"nb\">KeyboardInterrupt</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">‚ùå Error: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Main entry point\n</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"nc\">FeedbackAgent</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">connect_to_server</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">üöÄ Starting Feedback Agent...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Step 3: Creating Intelligent Workflows\n</h2>\n\n<p>Now let's add automated workflows. Create <code>workflow_engine.py</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\">#!/usr/bin/env python3\n</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\nWorkflow Engine for Automated Feedback Processing\n</span><span class=\"sh\">\"\"\"</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"n\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Any</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FeedbackWorkflow</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">agent</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"n\">agent</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">workflows</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">daily_analysis</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">daily_analysis_workflow</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">negative_feedback_alert</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">negative_feedback_workflow</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">weekly_report</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">weekly_report_workflow</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">daily_analysis_workflow</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Run daily analysis of feedback</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">üìÖ Running daily analysis - </span><span class=\"si\">{</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">().</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">%Y-%m-%d %H</span><span class=\"si\">:</span><span class=\"o\">%</span><span class=\"n\">M</span><span class=\"sh\">'</span><span class=\"s\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Get and analyze feedback\n</span>        <span class=\"n\">analysis</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">analyze_feedback_trends</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Check for critical issues\n</span>        <span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">immediate attention</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">analysis</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">():</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">üö® Critical issues detected!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"c1\"># In production: send alerts, create tickets, etc.\n</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">‚úÖ Daily analysis complete</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">analysis</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">negative_feedback_workflow</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">feedback_data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Handle negative feedback immediately</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">‚ö†Ô∏è Negative feedback detected from </span><span class=\"si\">{</span><span class=\"n\">feedback_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">customer_name</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Generate personalized response plan\n</span>        <span class=\"n\">response_plan</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Create action plan for this negative feedback: </span><span class=\"si\">{</span><span class=\"n\">feedback_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">feedback</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">. </span><span class=\"sh\">\"</span>\n            <span class=\"sh\">\"</span><span class=\"s\">Include: immediate response, follow-up actions, and prevention measures.</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">üìã Action Plan:</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">response_plan</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># In production: \n</span>        <span class=\"c1\"># - Send alert to manager\n</span>        <span class=\"c1\"># - Create follow-up task\n</span>        <span class=\"c1\"># - Track resolution\n</span>\n        <span class=\"k\">return</span> <span class=\"n\">response_plan</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">weekly_report_workflow</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Generate comprehensive weekly report</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">üìä Generating weekly report...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Get all data\n</span>        <span class=\"n\">summary</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"n\">mcp_session</span><span class=\"p\">.</span><span class=\"nf\">read_resource</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">feedback://summary</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">recent</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"n\">mcp_session</span><span class=\"p\">.</span><span class=\"nf\">read_resource</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">feedback://recent</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Generate executive summary\n</span>        <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Create executive summary for this week</span><span class=\"sh\">'</span><span class=\"s\">s feedback. </span><span class=\"sh\">\"</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Data: </span><span class=\"si\">{</span><span class=\"n\">summary</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s\">Recent examples: </span><span class=\"si\">{</span><span class=\"n\">recent</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span>\n            <span class=\"sh\">\"</span><span class=\"s\">Include: key metrics, trends, recommendations, and success stories.</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">üìÑ Weekly Report:</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">report</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">report</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_workflow</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">workflow_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Execute a specific workflow</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">workflow_name</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">workflows</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">workflows</span><span class=\"p\">[</span><span class=\"n\">workflow_name</span><span class=\"p\">](</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Unknown workflow: </span><span class=\"si\">{</span><span class=\"n\">workflow_name</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">WorkflowScheduler</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">workflow_engine</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">workflow_engine</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">scheduled_tasks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">schedule_daily</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">hour</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">minute</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">workflow</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Schedule daily workflow</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">scheduled_tasks</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span>\n            <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">daily</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">time</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">hour</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">hour</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">minute</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">minute</span><span class=\"p\">},</span>\n            <span class=\"sh\">\"</span><span class=\"s\">workflow</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">workflow</span>\n        <span class=\"p\">})</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">schedule_on_event</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">event_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">workflow</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Schedule event-triggered workflow</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">scheduled_tasks</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span>\n            <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">event</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">trigger</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">event_type</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">workflow</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">workflow</span>\n        <span class=\"p\">})</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Run the scheduler</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">‚è∞ Workflow scheduler started</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># For demo: simulate some workflows\n</span>        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"nf\">run_workflow</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">daily_analysis</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Simulate negative feedback\n</span>        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"nf\">run_workflow</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">negative_feedback_alert</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">customer_name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Demo User</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">feedback</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">The coffee was cold and service was slow</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">rating</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n        <span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Step 4: Putting It All Together\n</h2>\n\n<p>Create <code>run_system.py</code> to run the complete system:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\">#!/usr/bin/env python3\n</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\nRun the Complete AI Feedback System\n</span><span class=\"sh\">\"\"\"</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">subprocess</span>\n<span class=\"kn\">import</span> <span class=\"n\">time</span>\n<span class=\"kn\">from</span> <span class=\"n\">feedback_agent</span> <span class=\"kn\">import</span> <span class=\"n\">FeedbackAgent</span>\n<span class=\"kn\">from</span> <span class=\"n\">workflow_engine</span> <span class=\"kn\">import</span> <span class=\"n\">FeedbackWorkflow</span><span class=\"p\">,</span> <span class=\"n\">WorkflowScheduler</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_complete_system</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Run server and agent together</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"c1\"># Start the MCP server in background\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">üöÄ Starting MCP Feedback Server...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">server_process</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"nc\">Popen</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">python</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">feedback_server.py</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n        <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span>\n        <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"n\">PIPE</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Give server time to start\n</span>    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Create and connect agent\n</span>        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">ü§ñ Starting AI Agent...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"nc\">FeedbackAgent</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Create workflow engine\n</span>        <span class=\"n\">workflow</span> <span class=\"o\">=</span> <span class=\"nc\">FeedbackWorkflow</span><span class=\"p\">(</span><span class=\"n\">agent</span><span class=\"p\">)</span>\n        <span class=\"n\">scheduler</span> <span class=\"o\">=</span> <span class=\"nc\">WorkflowScheduler</span><span class=\"p\">(</span><span class=\"n\">workflow</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Schedule some workflows\n</span>        <span class=\"n\">scheduler</span><span class=\"p\">.</span><span class=\"nf\">schedule_daily</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">daily_analysis</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">scheduler</span><span class=\"p\">.</span><span class=\"nf\">schedule_on_event</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">negative_feedback</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">negative_feedback_alert</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">scheduler</span><span class=\"p\">.</span><span class=\"nf\">schedule_daily</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">weekly_report</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Run the agent\n</span>        <span class=\"k\">await</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">connect_to_server</span><span class=\"p\">()</span>\n\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Clean up\n</span>        <span class=\"n\">server_process</span><span class=\"p\">.</span><span class=\"nf\">terminate</span><span class=\"p\">()</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">üëã System shutdown complete</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">üéØ Complete AI Feedback System Starting...</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">run_complete_system</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Step 5: Testing Your AI System\n</h2>\n\n<p>Let's test the complete system:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Make sure your .env file has your OpenAI API key</span>\npython run_system.py\n</code></pre>\n\n</div>\n\n\n\n<p>Try these interactions:</p>\n\n<ol>\n<li>\n<p><strong>Give feedback:</strong></p>\n\n<ul>\n<li>\"Hi, I'm Sarah. I loved the new latte recipe! 5 stars!\"</li>\n<li>\"The service was terrible today. My order took 30 minutes.\"</li>\n</ul>\n</li>\n<li>\n<p><strong>Check analytics:</strong></p>\n\n<ul>\n<li>Type: <code>analyze</code>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Ask questions:</strong></p>\n\n<ul>\n<li>\"What's the overall feedback trend?\"</li>\n<li>\"How many people gave feedback today?\"</li>\n</ul>\n</li>\n</ol>\n\n<h2>\n  \n  \n  Key Concepts We've Implemented\n</h2>\n\n<h3>\n  \n  \n  1. <strong>Agent-Server Communication</strong>\n</h3>\n\n<p>The agent connects to the MCP server and can:</p>\n\n<ul>\n<li>Read resources (feedback data)</li>\n<li>Call tools (collect feedback, analyze sentiment)</li>\n<li>Process results intelligently</li>\n</ul>\n\n<h3>\n  \n  \n  2. <strong>LLM Integration</strong>\n</h3>\n\n<p>We use GPT-3.5 to:</p>\n\n<ul>\n<li>Understand natural language</li>\n<li>Extract information from conversations</li>\n<li>Generate insights and recommendations</li>\n<li>Create personalized responses</li>\n</ul>\n\n<h3>\n  \n  \n  3. <strong>Automated Workflows</strong>\n</h3>\n\n<p>Our system can:</p>\n\n<ul>\n<li>Run scheduled analyses</li>\n<li>Respond to events (negative feedback)</li>\n<li>Generate reports automatically</li>\n</ul>\n\n<h3>\n  \n  \n  4. <strong>Intelligent Decision Making</strong>\n</h3>\n\n<p>The agent:</p>\n\n<ul>\n<li>Classifies user intent</li>\n<li>Chooses appropriate actions</li>\n<li>Provides contextual responses</li>\n</ul>\n\n<h2>\n  \n  \n  What's Next?\n</h2>\n\n<p>In our final part (Part 5), we'll:</p>\n\n<ul>\n<li>Add data persistence with a real database</li>\n<li>Implement advanced features (multi-language support, voice input)</li>\n<li>Deploy the system for production use</li>\n<li>Explore scaling strategies</li>\n</ul>\n\n<p>You've now built a functional AI system! How would you extend this for your business needs? What other workflows would be helpful?</p>\n\n<h2>\n  \n  \n  Challenge: Extend Your System\n</h2>\n\n<p>Try adding these features:</p>\n\n<ol>\n<li>Email notifications for negative feedback</li>\n<li>Sentiment trend visualization</li>\n<li>Customer response templates</li>\n<li>Multi-location support</li>\n</ol>\n\n<p>Share your extensions in the comments!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Setting Up Your First MCP Server with Python (Part 3/5)","url":"https://dev.to/bredmond1019/setting-up-your-first-mcp-server-with-python-part-35-3758","date":1751056719,"author":"bredmond1019","guid":173964,"unread":true,"content":"<p>It's time to get our hands dirty! In this part, we'll set up our development environment and create our first MCP server. Don't worry if you've never coded before - we'll go step by step.</p>\n\n<h2>\n  \n  \n  What We're Building\n</h2>\n\n<p>Remember Maria's caf√© from Part 1? We're creating a feedback collection system that:</p>\n\n<ul>\n<li>Stores customer feedback</li>\n<li>Analyzes sentiment (happy, neutral, unhappy)</li>\n<li>Generates summary reports</li>\n<li>Identifies improvement areas</li>\n</ul>\n\n<h2>\n  \n  \n  Step 1: Setting Up Your Environment\n</h2>\n\n<h3>\n  \n  \n  Installing Python\n</h3>\n\n<p>First, we need Python (version 3.8 or higher):</p>\n\n<p><strong>Windows:</strong></p>\n\n<ol>\n<li>Visit <a href=\"https://python.org\" rel=\"noopener noreferrer\">python.org</a>\n</li>\n<li>Download the installer</li>\n<li>\n<strong>Important</strong>: Check \"Add Python to PATH\"</li>\n<li>Click Install</li>\n</ol>\n\n<p><strong>Mac:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># If you have Homebrew</span>\nbrew <span class=\"nb\">install </span>python3\n\n<span class=\"c\"># Or download from python.org</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Linux:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">sudo </span>apt update\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>python3 python3-pip\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Creating Your Project\n</h3>\n\n<p>Open your terminal (Command Prompt on Windows) and run:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Create a new directory</span>\n<span class=\"nb\">mkdir </span>mcp-feedback-system\n<span class=\"nb\">cd </span>mcp-feedback-system\n\n<span class=\"c\"># Create a virtual environment</span>\npython <span class=\"nt\">-m</span> venv venv\n\n<span class=\"c\"># Activate it</span>\n<span class=\"c\"># On Windows:</span>\nvenv<span class=\"se\">\\S</span>cripts<span class=\"se\">\\a</span>ctivate\n<span class=\"c\"># On Mac/Linux:</span>\n<span class=\"nb\">source </span>venv/bin/activate\n\n<span class=\"c\"># Install the MCP SDK</span>\npip <span class=\"nb\">install </span>mcp\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Step 2: Understanding MCP Server Basics\n</h2>\n\n<p>An MCP server has three main parts:</p>\n\n<h3>\n  \n  \n  Resources (What data do we have?)\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Like items on a menu\n</span><span class=\"o\">-</span> <span class=\"sh\">\"</span><span class=\"s\">Recent feedback from customers</span><span class=\"sh\">\"</span>\n<span class=\"o\">-</span> <span class=\"sh\">\"</span><span class=\"s\">Summary of this week</span><span class=\"sh\">'</span><span class=\"s\">s feedback</span><span class=\"sh\">\"</span>\n<span class=\"o\">-</span> <span class=\"sh\">\"</span><span class=\"s\">List of improvement suggestions</span><span class=\"sh\">\"</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Tools (What can we do?)\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Like kitchen equipment\n</span><span class=\"o\">-</span> <span class=\"sh\">\"</span><span class=\"s\">Collect new feedback</span><span class=\"sh\">\"</span>\n<span class=\"o\">-</span> <span class=\"sh\">\"</span><span class=\"s\">Analyze sentiment</span><span class=\"sh\">\"</span>\n<span class=\"o\">-</span> <span class=\"sh\">\"</span><span class=\"s\">Generate report</span><span class=\"sh\">\"</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Server (How do we serve it?)\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Like the restaurant itself\n</span><span class=\"o\">-</span> <span class=\"n\">Handles</span> <span class=\"n\">requests</span>\n<span class=\"o\">-</span> <span class=\"n\">Manages</span> <span class=\"n\">connections</span>\n<span class=\"o\">-</span> <span class=\"n\">Provides</span> <span class=\"n\">the</span> <span class=\"n\">interface</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Step 3: Building Our First MCP Server\n</h2>\n\n<p>Create a file called <code>feedback_server.py</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\">#!/usr/bin/env python3\n</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\nCustomer Feedback MCP Server\nA simple server for collecting and analyzing customer feedback\n</span><span class=\"sh\">\"\"\"</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">json</span>\n<span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"n\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span>\n\n<span class=\"c1\"># MCP SDK imports\n</span><span class=\"kn\">from</span> <span class=\"n\">mcp.server.models</span> <span class=\"kn\">import</span> <span class=\"n\">InitializationOptions</span>\n<span class=\"kn\">from</span> <span class=\"n\">mcp.server</span> <span class=\"kn\">import</span> <span class=\"n\">NotificationOptions</span><span class=\"p\">,</span> <span class=\"n\">Server</span>\n<span class=\"kn\">from</span> <span class=\"n\">mcp.server.stdio</span> <span class=\"kn\">import</span> <span class=\"n\">stdio_server</span>\n<span class=\"kn\">from</span> <span class=\"n\">mcp.types</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span><span class=\"p\">,</span> <span class=\"n\">Tool</span><span class=\"p\">,</span> <span class=\"n\">TextContent</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FeedbackServer</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"nc\">Server</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">customer-feedback</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">feedback_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">setup_handlers</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup_handlers</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Set up all the server handlers</span><span class=\"sh\">\"\"\"</span>\n\n        <span class=\"nd\">@self.server.list_resources</span><span class=\"p\">()</span>\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_list_resources</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Resource</span><span class=\"p\">]:</span>\n            <span class=\"sh\">\"\"\"</span><span class=\"s\">List available resources</span><span class=\"sh\">\"\"\"</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span>\n                <span class=\"nc\">Resource</span><span class=\"p\">(</span>\n                    <span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">feedback://recent</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Recent Feedback</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">View recent customer feedback</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">mimeType</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">application/json</span><span class=\"sh\">\"</span>\n                <span class=\"p\">),</span>\n                <span class=\"nc\">Resource</span><span class=\"p\">(</span>\n                    <span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">feedback://summary</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Feedback Summary</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Get a summary of all feedback</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">mimeType</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">text/plain</span><span class=\"sh\">\"</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n\n        <span class=\"nd\">@self.server.read_resource</span><span class=\"p\">()</span>\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_read_resource</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n            <span class=\"sh\">\"\"\"</span><span class=\"s\">Read a specific resource</span><span class=\"sh\">\"\"\"</span>\n            <span class=\"k\">if</span> <span class=\"n\">uri</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">feedback://recent</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Return last 5 feedback entries\n</span>                <span class=\"n\">recent</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">feedback_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">:]</span> <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">feedback_list</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n                <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">recent</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n            <span class=\"k\">elif</span> <span class=\"n\">uri</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">feedback://summary</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Generate summary\n</span>                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">feedback_list</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">No feedback collected yet.</span><span class=\"sh\">\"</span>\n\n                <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">feedback_list</span><span class=\"p\">)</span>\n                <span class=\"n\">sentiments</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">positive</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">neutral</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">negative</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n\n                <span class=\"k\">for</span> <span class=\"n\">feedback</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">feedback_list</span><span class=\"p\">:</span>\n                    <span class=\"n\">sentiments</span><span class=\"p\">[</span><span class=\"n\">feedback</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">sentiment</span><span class=\"sh\">\"</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n                <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\nFeedback Summary\n================\nTotal Feedback: </span><span class=\"si\">{</span><span class=\"n\">total</span><span class=\"si\">}</span><span class=\"s\">\nPositive: </span><span class=\"si\">{</span><span class=\"n\">sentiments</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">positive</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\"> (</span><span class=\"si\">{</span><span class=\"n\">sentiments</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">positive</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">total</span><span class=\"o\">*</span><span class=\"mi\">100</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">%)\nNeutral: </span><span class=\"si\">{</span><span class=\"n\">sentiments</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">neutral</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\"> (</span><span class=\"si\">{</span><span class=\"n\">sentiments</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">neutral</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">total</span><span class=\"o\">*</span><span class=\"mi\">100</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">%)  \nNegative: </span><span class=\"si\">{</span><span class=\"n\">sentiments</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">negative</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\"> (</span><span class=\"si\">{</span><span class=\"n\">sentiments</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">negative</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">total</span><span class=\"o\">*</span><span class=\"mi\">100</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">%)\n</span><span class=\"sh\">\"\"\"</span>\n\n            <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Unknown resource: </span><span class=\"si\">{</span><span class=\"n\">uri</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"nd\">@self.server.list_tools</span><span class=\"p\">()</span>\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_list_tools</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tool</span><span class=\"p\">]:</span>\n            <span class=\"sh\">\"\"\"</span><span class=\"s\">List available tools</span><span class=\"sh\">\"\"\"</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span>\n                <span class=\"nc\">Tool</span><span class=\"p\">(</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">collect_feedback</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Collect new customer feedback</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">inputSchema</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">object</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">properties</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                            <span class=\"sh\">\"</span><span class=\"s\">customer_name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                                <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">string</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                                <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Name of the customer</span><span class=\"sh\">\"</span>\n                            <span class=\"p\">},</span>\n                            <span class=\"sh\">\"</span><span class=\"s\">feedback</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                                <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">string</span><span class=\"sh\">\"</span><span class=\"p\">,</span> \n                                <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">The feedback text</span><span class=\"sh\">\"</span>\n                            <span class=\"p\">},</span>\n                            <span class=\"sh\">\"</span><span class=\"s\">rating</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                                <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">integer</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                                <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Rating from 1-5</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                                <span class=\"sh\">\"</span><span class=\"s\">minimum</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                                <span class=\"sh\">\"</span><span class=\"s\">maximum</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">},</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">required</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">customer_name</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">feedback</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">rating</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">),</span>\n                <span class=\"nc\">Tool</span><span class=\"p\">(</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">analyze_sentiment</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Analyze sentiment of feedback text</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">inputSchema</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">object</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">properties</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                            <span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                                <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">string</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                                <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Text to analyze</span><span class=\"sh\">\"</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">},</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">required</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n\n        <span class=\"nd\">@self.server.call_tool</span><span class=\"p\">()</span>\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_call_tool</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> \n            <span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">TextContent</span><span class=\"p\">]:</span>\n            <span class=\"sh\">\"\"\"</span><span class=\"s\">Handle tool calls</span><span class=\"sh\">\"\"\"</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">collect_feedback</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Analyze sentiment based on rating\n</span>                <span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">rating</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">rating</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n                    <span class=\"n\">sentiment</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">positive</span><span class=\"sh\">\"</span>\n                <span class=\"k\">elif</span> <span class=\"n\">rating</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n                    <span class=\"n\">sentiment</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">neutral</span><span class=\"sh\">\"</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">sentiment</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">negative</span><span class=\"sh\">\"</span>\n\n                <span class=\"c1\"># Store feedback\n</span>                <span class=\"n\">feedback_entry</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">feedback_list</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">timestamp</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">().</span><span class=\"nf\">isoformat</span><span class=\"p\">(),</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">customer_name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">arguments</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">customer_name</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">feedback</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">arguments</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">feedback</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">rating</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">rating</span><span class=\"p\">,</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">sentiment</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">sentiment</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">feedback_list</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">feedback_entry</span><span class=\"p\">)</span>\n\n                <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nc\">TextContent</span><span class=\"p\">(</span>\n                    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Feedback collected successfully! ID: </span><span class=\"si\">{</span><span class=\"n\">feedback_entry</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n                <span class=\"p\">)]</span>\n\n            <span class=\"k\">elif</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">analyze_sentiment</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n                <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"nf\">lower</span><span class=\"p\">()</span>\n\n                <span class=\"c1\"># Simple sentiment analysis\n</span>                <span class=\"n\">positive_words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">great</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">excellent</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">love</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">amazing</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">wonderful</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n                <span class=\"n\">negative_words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">bad</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">terrible</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">hate</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">awful</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">horrible</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n                <span class=\"n\">positive_count</span> <span class=\"o\">=</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">positive_words</span> <span class=\"k\">if</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n                <span class=\"n\">negative_count</span> <span class=\"o\">=</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">negative_words</span> <span class=\"k\">if</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">positive_count</span> <span class=\"o\">&gt;</span> <span class=\"n\">negative_count</span><span class=\"p\">:</span>\n                    <span class=\"n\">sentiment</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">positive</span><span class=\"sh\">\"</span>\n                <span class=\"k\">elif</span> <span class=\"n\">negative_count</span> <span class=\"o\">&gt;</span> <span class=\"n\">positive_count</span><span class=\"p\">:</span>\n                    <span class=\"n\">sentiment</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">negative</span><span class=\"sh\">\"</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">sentiment</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">neutral</span><span class=\"sh\">\"</span>\n\n                <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nc\">TextContent</span><span class=\"p\">(</span>\n                    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Sentiment: </span><span class=\"si\">{</span><span class=\"n\">sentiment</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n                <span class=\"p\">)]</span>\n\n            <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Unknown tool: </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Run the server</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nf\">stdio_server</span><span class=\"p\">()</span> <span class=\"nf\">as </span><span class=\"p\">(</span><span class=\"n\">read_stream</span><span class=\"p\">,</span> <span class=\"n\">write_stream</span><span class=\"p\">):</span>\n            <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">server</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span>\n                <span class=\"n\">read_stream</span><span class=\"p\">,</span>\n                <span class=\"n\">write_stream</span><span class=\"p\">,</span>\n                <span class=\"nc\">InitializationOptions</span><span class=\"p\">(</span>\n                    <span class=\"n\">server_name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">customer-feedback</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">server_version</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">0.1.0</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">capabilities</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">server</span><span class=\"p\">.</span><span class=\"nf\">get_capabilities</span><span class=\"p\">(</span>\n                        <span class=\"n\">notification_options</span><span class=\"o\">=</span><span class=\"nc\">NotificationOptions</span><span class=\"p\">(),</span>\n                        <span class=\"n\">experimental_capabilities</span><span class=\"o\">=</span><span class=\"p\">{}</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n<span class=\"c1\"># Main entry point\n</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"nc\">FeedbackServer</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Step 4: Testing Your Server\n</h2>\n\n<p>Let's make sure everything works! First, make the script executable:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># On Mac/Linux:</span>\n<span class=\"nb\">chmod</span> +x feedback_server.py\n\n<span class=\"c\"># On Windows, you can skip this step</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Now test it with the MCP inspector:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Install the MCP inspector tool</span>\npip <span class=\"nb\">install </span>mcp-inspector\n\n<span class=\"c\"># Run your server with the inspector</span>\nmcp-inspector feedback_server.py\n</code></pre>\n\n</div>\n\n\n\n<p>You should see:</p>\n\n<ul>\n<li>Your server starting up</li>\n<li>Available resources (Recent Feedback, Feedback Summary)</li>\n<li>Available tools (collect_feedback, analyze_sentiment)</li>\n</ul>\n\n<p>Try these commands in the inspector:</p>\n\n<ol>\n<li>Call <code>collect_feedback</code> with some test data</li>\n<li>Read the <code>feedback://recent</code> resource</li>\n<li>Read the <code>feedback://summary</code> resource</li>\n</ol>\n\n<h2>\n  \n  \n  Step 5: Understanding What We Built\n</h2>\n\n<p>Let's break down the key parts:</p>\n\n<h3>\n  \n  \n  Resources\n</h3>\n\n<p>We created two resources that agents can read:</p>\n\n<ul>\n<li>\n<code>feedback://recent</code>: Shows the last 5 feedback entries</li>\n<li>\n<code>feedback://summary</code>: Provides statistics about all feedback</li>\n</ul>\n\n<h3>\n  \n  \n  Tools\n</h3>\n\n<p>We implemented two tools that agents can use:</p>\n\n<ul>\n<li>\n<code>collect_feedback</code>: Saves new feedback with automatic sentiment based on rating</li>\n<li>\n<code>analyze_sentiment</code>: Simple sentiment analysis based on keywords</li>\n</ul>\n\n<h3>\n  \n  \n  The Server\n</h3>\n\n<p>Our server:</p>\n\n<ul>\n<li>Stores feedback in memory (we'll add persistence later)</li>\n<li>Provides a standard MCP interface</li>\n<li>Can be used by any MCP-compatible AI agent</li>\n</ul>\n\n<h2>\n  \n  \n  Common Issues and Solutions\n</h2>\n\n<p><strong>\"Python not found\"</strong></p>\n\n<ul>\n<li>Make sure Python is in your PATH</li>\n<li>Try <code>python3</code> instead of <code>python</code>\n</li>\n</ul>\n\n<p><strong>\"Module not found\"</strong></p>\n\n<ul>\n<li>Ensure your virtual environment is activated</li>\n<li>Reinstall: <code>pip install mcp</code>\n</li>\n</ul>\n\n<p><strong>\"Permission denied\"</strong></p>\n\n<ul>\n<li>On Mac/Linux: Use <code>chmod +x feedback_server.py</code>\n</li>\n<li>On Windows: Run as administrator if needed</li>\n</ul>\n\n<h2>\n  \n  \n  What's Next?\n</h2>\n\n<p>Congratulations! You've built your first MCP server. In Part 4, we'll:</p>\n\n<ul>\n<li>Create an AI agent that uses our server</li>\n<li>Connect it to an LLM for intelligent responses</li>\n<li>Build automated workflows</li>\n<li>Add data persistence</li>\n</ul>\n\n<p>Your server is now ready to be used by AI agents. How would you extend this to handle your specific use case? Share your ideas in the comments!</p>\n\n<p>Ready for more? The complete tutorial with additional examples is available at <a href=\"https://brandonredmond.com/learn/paths/ai-systems-intro\" rel=\"noopener noreferrer\">brandonredmond.com/learn/paths/ai-systems-intro</a>.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Building Blocks - Understanding MCP, Agents, and LLMs (Part 2/5)","url":"https://dev.to/bredmond1019/the-building-blocks-understanding-mcp-agents-and-llms-part-25-1758","date":1751056669,"author":"bredmond1019","guid":173963,"unread":true,"content":"<p>In Part 1, we learned that AI systems are like smart orchestra conductors. Now, let's meet the musicians in our orchestra and understand how they work together. By the end of this article, you'll understand the core components we'll use to build our AI system.</p>\n\n<h2>\n  \n  \n  The Four Essential Components\n</h2>\n\n<h3>\n  \n  \n  1. <strong>Workflow Engines: The Conductor</strong>\n</h3>\n\n<p>A workflow engine orchestrates the entire process. Think of it as a recipe that says:</p>\n\n<ol>\n<li>First, collect the customer feedback</li>\n<li>Then, analyze the sentiment</li>\n<li>Next, categorize the issues</li>\n<li>Finally, generate a summary report</li>\n</ol>\n\n<p>Popular workflow engines include:</p>\n\n<ul>\n<li>\n<strong>n8n</strong>: Visual workflow automation</li>\n<li>\n<strong>Temporal</strong>: Code-based workflows</li>\n<li>\n<strong>Apache Airflow</strong>: Data pipeline orchestration</li>\n</ul>\n\n<h3>\n  \n  \n  2. <strong>AI Agents: The Specialized Workers</strong>\n</h3>\n\n<p>AI agents are like skilled employees, each with a specific job:</p>\n\n<ul>\n<li>\n<strong>Research Agent</strong>: Gathers information from various sources</li>\n<li>\n<strong>Analysis Agent</strong>: Processes and understands data</li>\n<li>\n<strong>Writing Agent</strong>: Creates reports and summaries</li>\n<li>\n<strong>Action Agent</strong>: Performs tasks like sending emails</li>\n</ul>\n\n<p>Here's a simple conceptual example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">FeedbackAnalysisAgent</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">llm</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">llm</span> <span class=\"o\">=</span> <span class=\"n\">llm</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Feedback Analyzer</span><span class=\"sh\">\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">analyze</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">feedback_text</span><span class=\"p\">):</span>\n        <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Analyze this feedback and identify key themes: </span><span class=\"si\">{</span><span class=\"n\">feedback_text</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">llm</span><span class=\"p\">.</span><span class=\"nf\">complete</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  3. <strong>Large Language Models: The Brains</strong>\n</h3>\n\n<p>LLMs are the intelligence behind AI agents. They:</p>\n\n<ul>\n<li>Understand natural language</li>\n<li>Generate human-like responses</li>\n<li>Analyze patterns and sentiment</li>\n<li>Make contextual decisions</li>\n</ul>\n\n<p>Popular options:</p>\n\n<ul>\n<li>\n<strong>OpenAI GPT-4</strong>: Powerful and versatile</li>\n<li>\n<strong>Anthropic Claude</strong>: Great for analysis and coding</li>\n<li>\n<strong>Local models</strong>: Privacy-focused alternatives</li>\n</ul>\n\n<h3>\n  \n  \n  4. <strong>MCP Servers: The Universal Connectors</strong>\n</h3>\n\n<p>Here's where things get exciting. Model Context Protocol (MCP) is like a universal adapter that lets AI systems connect to any tool or service.</p>\n\n<p>Imagine you have:</p>\n\n<ul>\n<li>A filing cabinet (your database)</li>\n<li>A telephone (communication system)</li>\n<li>A calculator (processing tool)</li>\n</ul>\n\n<p>MCP creates a standard way for AI to use all these tools, regardless of their original design.</p>\n\n<h2>\n  \n  \n  How MCP Works: A Simple Analogy\n</h2>\n\n<p>Think of MCP like a restaurant menu:</p>\n\n<ol>\n<li>\n<p><strong>Resources</strong> = Menu Sections</p>\n\n<ul>\n<li>\"Today's Specials\" (dynamic data)</li>\n<li>\"Regular Menu\" (static information)</li>\n</ul>\n</li>\n<li>\n<p><strong>Tools</strong> = Things You Can Order</p>\n\n<ul>\n<li>\"Get me the soup of the day\"</li>\n<li>\"I'll have the daily special\"</li>\n<li>\"Can you modify this dish?\"</li>\n</ul>\n</li>\n<li>\n<p><strong>Server</strong> = The Waiter</p>\n\n<ul>\n<li>Takes your requests</li>\n<li>Communicates with the kitchen</li>\n<li>Brings back results</li>\n</ul>\n</li>\n</ol>\n\n<h2>\n  \n  \n  Why MCP Changes Everything\n</h2>\n\n<p>Before MCP, connecting AI to different tools was like needing a different translator for each country you visit. With MCP, it's like everyone suddenly speaks the same language.</p>\n\n<p>Benefits:</p>\n\n<ul>\n<li>\n<strong>Standardization</strong>: One protocol for all integrations</li>\n<li>\n<strong>Flexibility</strong>: Easy to add new capabilities</li>\n<li>\n<strong>Security</strong>: Clear boundaries and permissions</li>\n<li>\n<strong>Simplicity</strong>: Less code, more functionality</li>\n</ul>\n\n<h2>\n  \n  \n  A Sneak Peek: Our MCP Server Structure\n</h2>\n\n<p>Here's what we'll build in the upcoming parts:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">mcp.server</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">,</span> <span class=\"n\">Tool</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomerFeedbackServer</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"nc\">Server</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">feedback-analyzer</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">feedback_store</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Define what data we expose\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">server</span><span class=\"p\">.</span><span class=\"nf\">add_resource</span><span class=\"p\">(</span><span class=\"nc\">Resource</span><span class=\"p\">(</span>\n            <span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">feedback://recent</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Recent Feedback</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Last 10 customer feedback entries</span><span class=\"sh\">\"</span>\n        <span class=\"p\">))</span>\n\n        <span class=\"c1\"># Define what actions we can take\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">server</span><span class=\"p\">.</span><span class=\"nf\">add_tool</span><span class=\"p\">(</span><span class=\"nc\">Tool</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">analyze_sentiment</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Analyze emotional tone of feedback</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">input_schema</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">object</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">properties</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">string</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Putting It All Together\n</h2>\n\n<p>When these components work together:</p>\n\n<ol>\n<li>\n<strong>Workflow Engine</strong> says: \"Time to analyze today's feedback\"</li>\n<li>\n<strong>AI Agent</strong> receives the task and thinks: \"I need to get the feedback first\"</li>\n<li>\n<strong>MCP Server</strong> provides access to the feedback data</li>\n<li>\n<strong>LLM</strong> analyzes the sentiment and extracts insights</li>\n<li>\n<strong>Results</strong> flow back through the system to generate reports</li>\n</ol>\n\n<h2>\n  \n  \n  What's Next?\n</h2>\n\n<p>In Part 3, we'll roll up our sleeves and set up our development environment. You'll:</p>\n\n<ul>\n<li>Install Python and the MCP SDK</li>\n<li>Set up your first MCP server</li>\n<li>Test basic connectivity</li>\n<li>Prepare for building our feedback analysis system</li>\n</ul>\n\n<p>The exciting part? Once you understand these building blocks, you can apply them to ANY business problem.</p>\n\n<p>What tools or services would you want to connect to an AI system? Drop a comment below - your idea might become our next example!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Understanding AI Systems - More Than Just Chatbots (Part 1/5)","url":"https://dev.to/bredmond1019/understanding-ai-systems-more-than-just-chatbots-part-15-1ah3","date":1751056663,"author":"bredmond1019","guid":173962,"unread":true,"content":"<p>When most people think of AI, they imagine chatbots or sci-fi robots. But modern AI systems are far more practical and accessible than you might think. In this 5-part series, we'll demystify AI systems and actually build one together using Python and the Model Context Protocol (MCP).</p>\n\n<h2>\n  \n  \n  What Are AI Systems, Really?\n</h2>\n\n<p>Think of an AI system as a smart orchestra conductor. Just as a conductor coordinates musicians to create beautiful music, an AI system orchestrates different components to solve complex problems.</p>\n\n<p>An AI system consists of four key parts:</p>\n\n<h3>\n  \n  \n  1. <strong>The Brain (Intelligence)</strong>\n</h3>\n\n<p>This is typically a Large Language Model (LLM) like GPT-4 or Claude. It understands context, makes decisions, and generates responses.</p>\n\n<h3>\n  \n  \n  2. <strong>The Hands (Actions)</strong>\n</h3>\n\n<p>These are tools and integrations that let the AI interact with the real world - sending emails, updating databases, or analyzing data.</p>\n\n<h3>\n  \n  \n  3. <strong>The Nervous System (Coordination)</strong>\n</h3>\n\n<p>The workflow engine that manages the flow of information and tasks between components.</p>\n\n<h3>\n  \n  \n  4. <strong>The Memory (Knowledge)</strong>\n</h3>\n\n<p>Stored information, context, and learning from past interactions.</p>\n\n<h2>\n  \n  \n  Real-World Example: The Smart Caf√©\n</h2>\n\n<p>Let me share a story about Maria, who owns a small caf√©. She was drowning in repetitive tasks:</p>\n\n<ul>\n<li>Manually collecting customer feedback</li>\n<li>Analyzing reviews one by one</li>\n<li>Struggling to identify improvement areas</li>\n<li>Missing important customer insights</li>\n</ul>\n\n<p>An AI system transformed her business by:</p>\n\n<ol>\n<li>\n<strong>Automatically collecting</strong> feedback from multiple channels</li>\n<li>\n<strong>Analyzing sentiment</strong> to identify happy and unhappy customers</li>\n<li>\n<strong>Generating summaries</strong> of key improvement areas</li>\n<li>\n<strong>Suggesting actions</strong> based on patterns</li>\n</ol>\n\n<p>The best part? Maria didn't need to become a programmer. She just needed to understand how the pieces fit together.</p>\n\n<h2>\n  \n  \n  Why Should You Care?\n</h2>\n\n<p>AI systems aren't just for tech giants. They're becoming essential tools for:</p>\n\n<ul>\n<li>\n<strong>Small business owners</strong> automating repetitive tasks</li>\n<li>\n<strong>Freelancers</strong> managing client communications</li>\n<li>\n<strong>Teams</strong> coordinating complex projects</li>\n<li>\n<strong>Individuals</strong> organizing personal workflows</li>\n</ul>\n\n<h2>\n  \n  \n  What We'll Build Together\n</h2>\n\n<p>Over the next four articles, we'll create a functional AI system that:</p>\n\n<ul>\n<li>Collects and processes information</li>\n<li>Uses AI to analyze and understand data</li>\n<li>Takes automated actions based on insights</li>\n<li>Scales to handle real-world scenarios</li>\n</ul>\n\n<p>No prior programming experience? No problem. We'll start from scratch and build up step by step.</p>\n\n<h2>\n  \n  \n  What's Next?\n</h2>\n\n<p>In Part 2, we'll dive into the building blocks of AI systems. You'll learn about:</p>\n\n<ul>\n<li>Workflow engines (the conductors)</li>\n<li>AI agents (the specialized workers)</li>\n<li>LLMs (the brains)</li>\n<li>MCP servers (the universal connectors)</li>\n</ul>\n\n<p>Ready to start building? Follow along with the complete tutorial at <a href=\"https://brandonredmond.com/learn/paths/ai-systems-intro\" rel=\"noopener noreferrer\">brandonredmond.com/learn/paths/ai-systems-intro</a>.</p>\n\n<p>What repetitive tasks would you love to automate with AI? Share your ideas in the comments!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dealing with Nothing: What SAS Taught Me About Missing Values in Python (as a Beginner)","url":"https://dev.to/brigita/dealing-with-nothing-what-sas-taught-me-about-missing-values-in-python-as-a-beginner-103k","date":1751056147,"author":"Brigita Jon","guid":173961,"unread":true,"content":"<p><em>After a long break from data analysis, I‚Äôm #back-at-It! Currently, I‚Äôm working on a SAS-to-Python migration project, and as I dive back into the world of data, I‚Äôm documenting what I learn ‚Äî especially the unexpected things.</em></p>\n\n<p>This post is all about one such surprise: <strong>missing values</strong>.</p>\n\n\n\n\n<p>Funny how much time data analysts spend handling... nothing. That‚Äôs a rhetorical question I found myself thinking the other day.</p>\n\n<p>I‚Äôm talking about missing values, which, if handled improperly, can break logic, skew results, or silently wipe out rows during analysis.</p>\n\n<p>As I‚Äôve been working through the SAS-to-Python conversion over the past couple of months, I‚Äôve started noticing differences in how each handles missing data. Here‚Äôs a summary of what I found ‚Äî plus a few practical examples at the end.</p>\n\n\n\n\n<h2>\n  \n  \n  Different Languages, Different \"Nothings\"\n</h2>\n\n<p>Missing values may look the same across tools, but their behavior varies depending on the language, data type, and operation (comparison, filtering, grouping, etc.).</p>\n\n<p>Below is a high-level overview comparing how SAS, Python, and pandas represent and work with missing values:</p>\n\n<p><strong>Missing Values Representations in Most Common Data Types</strong></p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th><strong>Data Type</strong></th>\n<th><strong>SAS Missing Value</strong></th>\n<th><strong>Python Core</strong></th>\n<th><strong>pandas Missing Value</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Numeric</td>\n<td>\n<code>.</code> (dot), <code>.A‚Äì.Z</code> (specials with sort order)</td>\n<td>\n<code>float('nan')</code>, <code>None</code> (but <code>None</code> breaks math)</td>\n<td>\n<code>np.nan</code>, <code>pd.NA</code> (nullable <code>Int64</code>, <code>Float64</code>)</td>\n</tr>\n<tr>\n<td>Character</td>\n<td>\n<code>''</code> (empty string)</td>\n<td><code>None</code></td>\n<td>\n<code>None</code>, <code>np.nan</code>, <code>pd.NA</code> (used with <code>string</code> dtype)</td>\n</tr>\n<tr>\n<td>Dates/Times</td>\n<td>\n<code>.</code> (still numeric, formatted as date)</td>\n<td>\n<code>None</code> (not valid in datetime ops)</td>\n<td>\n<code>pd.NaT</code>, <code>None</code>, <code>pd.NA</code> (used with <code>datetime64[ns]</code>)</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>N/A (SAS has no native boolean type)</td>\n<td><code>None</code></td>\n<td>\n<code>pd.NA</code>, <code>None</code> (nullable Boolean dtype in pandas)</td>\n</tr>\n</tbody>\n</table></div>\n\n<p><strong>References</strong></p>\n\n<ul>\n<li>\n<a href=\"https://pandas.pydata.org/docs/user_guide/missing_data.html#missing-data\" rel=\"noopener noreferrer\">pandas documentation ‚Äì Working with missing data</a>\n</li>\n<li><a href=\"https://support.sas.com/documentation/cdl/en/lrcon/62955/HTML/default/viewer.htm#a001292604.htm\" rel=\"noopener noreferrer\">SAS documentation ‚Äì Missing Values</a></li>\n</ul>\n\n<p><strong>SAS</strong></p>\n\n<p>The dot (<code>.</code>) is the universal marker for missing numeric values‚Äîincluding dates and booleans, which are stored as numerics under the hood. SAS also supports 27 special missing values (<code>.A‚Äì.Z</code>, <code>._</code>) for nuanced data situations when you need to categorize the missing values.</p>\n\n<p><strong>pandas</strong></p>\n\n<p>pandas uses different missing value markers depending on the data type:</p>\n\n<ul>\n<li>\n<code>np.nan</code> for floating-point numbers\n</li>\n<li>\n<code>pd.NaT</code> for datetime types\n</li>\n<li>\n<code>pd.NA</code> for the newer, more consistent nullable types (such as <code>Int64</code>, <code>string</code>, and nullable Boolean)\n</li>\n<li>For object or string columns, <code>None</code> and <code>np.nan</code> can also appear as missing values.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Sorting Behavior: SAS vs Python\n</h2>\n\n<p>In SAS, while sorting numeric values, the missing values will always appear first.</p>\n\n<p>Interestingly, SAS supports special missing values that even have their own rank when sorting:</p>\n\n<p>The standard numeric missing value (<code>.</code>) is sorted before <code>.A</code>, and both are sorted before <code>.Z</code>. The <code>._</code> is the smallest.</p>\n\n<p><strong>Sorting Numerical Values in SAS</strong></p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Sort Order</th>\n<th>Symbol</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>smallest</td>\n<td><code>._</code></td>\n<td>underscore</td>\n</tr>\n<tr>\n<td></td>\n<td><code>.</code></td>\n<td>period</td>\n</tr>\n<tr>\n<td></td>\n<td><code>.A‚Äì.Z</code></td>\n<td>special missing values A (smallest) through Z</td>\n</tr>\n<tr>\n<td></td>\n<td><code>-n</code></td>\n<td>negative numbers</td>\n</tr>\n<tr>\n<td></td>\n<td><code>0</code></td>\n<td>zero</td>\n</tr>\n<tr>\n<td>largest</td>\n<td><code>+n</code></td>\n<td>positive numbers</td>\n</tr>\n</tbody>\n</table></div>\n\n<p><strong>Reference</strong></p>\n\n<ul>\n<li><a href=\"https://support.sas.com/documentation/cdl/en/lrcon/62955/HTML/default/viewer.htm#a000989180.htm\" rel=\"noopener noreferrer\">SAS Documentation ‚Äì Sorting Missing Values</a></li>\n</ul>\n\n<p>In pandas, on the other hand, missing values go to the end by default‚Äîbut you can change this behavior using a parameter:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">sort_values</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">x</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">na_position</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">first</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  Detecting Missing Values\n</h2>\n\n<p>One of the first steps in working with missing values is detecting them.</p>\n\n<p>In SAS, you typically check for missing values using:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sas\"><code><span class=\"k\">if</span> <span class=\"k\">missing</span><span class=\"p\">(</span><span class=\"k\">x</span><span class=\"p\">)</span>      <span class=\"cm\">/* universal */</span>\n<span class=\"k\">if</span> <span class=\"k\">x</span> <span class=\"o\">=</span> <span class=\"p\">.</span>           <span class=\"cm\">/* numeric */</span>\n<span class=\"k\">if</span> <span class=\"k\">x</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>          <span class=\"cm\">/* character */</span>\n</code></pre>\n\n</div>\n\n\n\n<p>In Python, you can use:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">isna</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">isnull</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>   <span class=\"c1\"># (These are aliases)\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  Filling Missing Values in Python: Doing Something with Nothing\n</h2>\n\n<p>Once you've detected missing values, the next step is deciding how to fill them. There are several ways to handle missing values in pandas. Here's an overview of the most common methods:</p>\n\n<ol>\n<li>\n<p>Fill with a Constant Value</p>\n\n<p>You can replace all missing values with a specific value, like <code>0</code> or <code>'unknown'</code>:<br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">fillna</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">fillna</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">unknown</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre>\n\n</li>\n<li>\n<p>Fill Using Another Column</p>\n\n<p>You can use the values from another column to fill missing entries. This is especially useful when you want to fill a column with values from a related one.<br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col_a</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">fillna</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col_b</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n</code></pre>\n\n\n<p>Alternatively, you can use the <code>combine_first()</code> method, which behaves like a SQL <code>COALESCE</code> operation. It fills missing values in one column using values from another:<br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col_a</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">combine_first</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col_b</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n</code></pre>\n\n</li>\n<li>\n<p>Forward and Backward Fill</p>\n\n<p>If your data has an inherent order (like time series data), you can use forward fill or backward fill to propagate non-missing values forward or backward to fill gaps:<br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">fillna</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ffill</span><span class=\"sh\">'</span><span class=\"p\">)</span>   <span class=\"c1\"># Forward fill (pad)\n</span><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">fillna</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">bfill</span><span class=\"sh\">'</span><span class=\"p\">)</span>   <span class=\"c1\"># Backward fill\n</span></code></pre>\n\n\n<p>You can also limit how far to propagate with the <code>limit</code> parameter:<br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">fillna</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ffill</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n\n</li>\n<li>\n<p>Interpolation</p>\n\n<p>For numeric columns, you can use interpolation to estimate missing values based on surrounding data points. By default, pandas uses linear interpolation:<br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">interpolate</span><span class=\"p\">()</span>\n</code></pre>\n\n</li>\n<li>\n<p>Group-Based Filling</p>\n\n<p>If you want to fill missing values within specific groups (e.g., per id), you can use <code>groupby()</code> in combination with a fill method. For example, filling missing values within each group using forward fill:<br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">)[</span><span class=\"sh\">'</span><span class=\"s\">value</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">fillna</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ffill</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre>\n\n</li>\n<li>\n<p>Statistical Filling</p>\n\n<p>Another approach is to fill missing values based on statistical measures like the mean, median, or mode of the column:<br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">fillna</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">mean</span><span class=\"p\">())</span>\n<span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">fillna</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">median</span><span class=\"p\">())</span>\n<span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">fillna</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">mode</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre>\n\n\n<p>To perform statistical filling within groups:<br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">group</span><span class=\"sh\">'</span><span class=\"p\">)[</span><span class=\"sh\">'</span><span class=\"s\">col</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">fillna</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">mean</span><span class=\"p\">()))</span>\n</code></pre>\n\n</li>\n</ol>\n\n<p><strong>Inplace Updates</strong></p>\n\n<p>If you want to modify the original DataFrame without creating a copy, you can use the <code>inplace=True</code> parameter:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">col</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">fillna</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  How Did Python Get Me?\n</h2>\n\n<h3>\n  \n  \n  And How I Made It Act Like SAS\n</h3>\n\n<p>I've heard a joke online that stuck with me:  </p>\n\n<blockquote>\n<p><strong>Why does pandas treat NaN == NaN as False?</strong><br><br>\n<em>Because even missing values have trust issues.</em></p>\n</blockquote>\n\n<p>Turns out it‚Äôs funny because it‚Äôs true. While converting SAS code to Python/pandas, I ran into several moments where things didn‚Äôt behave quite the way I expected.</p>\n\n<p>Here are a few practical examples where translating from SAS to Python didn‚Äôt go as expected ‚Äî and how to make pandas behave more like SAS.</p>\n\n\n\n\n<h3>\n  \n  \n  1. <code>x &lt; 0</code>: SAS Includes Missing, pandas Excludes\n</h3>\n\n<p><strong>In SAS:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sas\"><code><span class=\"k\">data</span> <span class=\"nv\">filtered</span><span class=\"p\">;</span>\n  <span class=\"k\">set</span> <span class=\"n\">test</span><span class=\"p\">;</span>\n  <span class=\"k\">where</span> <span class=\"k\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">run</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This will include standard missing values (<code>.</code>), because SAS treats <code>.</code> as less than any number.</p>\n\n<p><strong>In pandas:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This excludes missing values, because comparisons with <code>NaN</code>, <code>pd.NA</code>, or <code>NaT</code> always return False.</p>\n\n<p><strong>To mimic SAS:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">[(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">isna</span><span class=\"p\">())]</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  2. <code>NaN == NaN</code> is False, but <code>. == .</code> is True\n</h3>\n\n<p><strong>In SAS:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sas\"><code><span class=\"k\">if</span> <span class=\"p\">.</span> <span class=\"o\">=</span> <span class=\"p\">.</span> <span class=\"k\">then</span> <span class=\"k\">put</span> <span class=\"s2\">\"Equal\"</span><span class=\"p\">;</span>\n<span class=\"cm\">/* Outputs: Equal */</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>In Python:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">nan</span> <span class=\"o\">==</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">nan</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The above returns <code>False</code>.</p>\n\n<p><strong>How to match SAS logic:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">equal_or_missing</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">isna</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">isna</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">b</span>\n\n<span class=\"nf\">equal_or_missing</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">nan</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The above returns <code>True</code> now.</p>\n\n\n\n\n<h3>\n  \n  \n  3. Grouping with Missing Values: pandas Excludes Them\n</h3>\n\n<p>In SAS, <code>PROC SQL</code> treats <code>.</code> as a valid group and includes it in <code>GROUP BY</code>.</p>\n\n<p>In pandas, <code>groupby()</code> excludes missing values in the grouping column by default.</p>\n\n<p><strong>To include them:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">x</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">).</span><span class=\"nf\">mean</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  Final Thoughts\n</h2>\n\n<p>It‚Äôs ironic ‚Äî some of the trickiest bugs come from values that don‚Äôt even exist.<br>\nIn SAS, missing values are consistent and predictable.<br>\nIn Python/pandas, you get flexibility ‚Äî but also more room for surprises.</p>\n\n<p>If you're also transitioning from SAS to Python or have your own gotchas around missing values, I'd love to hear your experience!</p>\n\n<p><code>#Back-at-It</code> <code>#Buggy-but-getting-there</code></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I Scraped 500+ Real Gemini CLI Searches ‚Äî Here‚Äôs What Devs Want","url":"https://dev.to/abubakersiddique771/i-scraped-500-real-gemini-cli-searches-heres-what-devs-want-2b5g","date":1751055857,"author":"Abubakersiddique771","guid":173960,"unread":true,"content":"<h2>\n  \n  \n  What Are People Really Searching About Gemini CLI? I Pulled 500+ Real Queries Using a Local Scraper\n</h2>\n\n<p>If you‚Äôre curious about how the tech/dev world is reacting to Google‚Äôs <strong>Gemini CLI</strong>, you‚Äôre not alone.</p>\n\n<p>Instead of guessing, I used a fast offline keyword scraper to extract <strong>real autocomplete queries from Google</strong> ‚Äî things people are literally searching in real time.</p>\n\n<p>The results gave me an insider look into what developers want to know about Gemini CLI right now ‚Äî and it might help you too if you're:</p>\n\n<ul>\n<li>Writing a blog post/tutorial</li>\n<li>Building an AI tool</li>\n<li>Doing dev-focused SEO</li>\n<li>Researching AI command-line workflows</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  üîç What Is Gemini CLI?\n</h3>\n\n<p>Gemini CLI is part of Google‚Äôs push to make its Gemini AI models accessible from the terminal ‚Äî letting you run AI prompts and agents straight from your command line.</p>\n\n<p>It‚Äôs a fresh take on productivity, especially for devs who don‚Äôt want to leave the terminal just to use ChatGPT-like tools.</p>\n\n<p>But how much buzz is there really?</p>\n\n\n\n\n<h3>\n  \n  \n  üìä I Scraped 500+ Related Keywords for ‚ÄúGemini CLI‚Äù\n</h3>\n\n<p>Using a tool called <strong><a href=\"https://theinternetcafe.gumroad.com/l/ohvsty\" rel=\"noopener noreferrer\">KeywordJet</a></strong> ‚Äî a fast, local CLI scraper ‚Äî I pulled hundreds of suggestions from Google‚Äôs autocomplete.</p>\n\n<p>Here‚Äôs a peek at what came up:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Trending Query</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gemini cli install</td>\n</tr>\n<tr>\n<td>gemini cli vs chatgpt</td>\n</tr>\n<tr>\n<td>gemini cli for python developers</td>\n</tr>\n<tr>\n<td>gemini cli commands list</td>\n</tr>\n<tr>\n<td>how to use gemini cli for code generation</td>\n</tr>\n<tr>\n<td>gemini cli prompt examples</td>\n</tr>\n<tr>\n<td>gemini cli agent framework</td>\n</tr>\n<tr>\n<td>gemini cli vs bard terminal use</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>These are not from some generic tool ‚Äî these are live queries people are typing into Google right now.</p>\n\n\n\n\n<h3>\n  \n  \n  üõ†Ô∏è Why I Used a Local CLI Tool (Not SaaS)\n</h3>\n\n<p>Most keyword tools:</p>\n\n<ul>\n<li>Limit how many queries you can run</li>\n<li>Need API keys or login</li>\n<li>Are designed for marketers, not devs</li>\n</ul>\n\n<p>So instead, I used <strong>KeywordJet</strong>, which:</p>\n\n<ul>\n<li>Runs locally (no API)</li>\n<li>Outputs CSVs instantly</li>\n<li>Works great for niche dev topics like ‚ÄúGemini CLI,‚Äù ‚ÄúLLM agents,‚Äù ‚ÄúAI workflows,‚Äù etc.</li>\n</ul>\n\n<p>üëâ You can <a href=\"https://theinternetcafe.gumroad.com/l/ohvsty\" rel=\"noopener noreferrer\">download KeywordJet here</a> if you want to scrape your own ideas without hitting a paywall.</p>\n\n\n\n\n<h3>\n  \n  \n  ‚úçÔ∏è How I‚Äôm Using This Data\n</h3>\n\n<ul>\n<li>\n<strong>SEO Blogging</strong>: Writing posts around ‚ÄúGemini CLI use cases,‚Äù ‚ÄúGemini vs ChatGPT CLI,‚Äù etc.</li>\n<li>\n<strong>GitHub Projects</strong>: Naming repos using trending keywords</li>\n<li>\n<strong>Tutorial Planning</strong>: Targeting what devs are <em>actually</em> trying to do with Gemini</li>\n<li>\n<strong>Side Project Validation</strong>: Is there interest in a GUI wrapper? Or Gemini CLI extensions?</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  ‚ö° Gemini CLI Is Just Getting Started\n</h3>\n\n<p>The CLI space for AI is exploding ‚Äî from OpenAI‚Äôs command-line agents to Google‚Äôs Gemini.</p>\n\n<p>Whether you‚Äôre building tools, writing docs, or just exploring trends, keeping an eye on real-world searches gives you a massive edge.</p>\n\n<p>Try pulling your own keywords using your niche ‚Äî it might surprise you.</p>\n\n\n\n\n<h3>\n  \n  \n  üì• Grab KeywordJet (No Login, Works Offline)\n</h3>\n\n<p>If you want the same tool I used:</p>\n\n<ul>\n<li>No login, no API key</li>\n<li>Just a <code>.zip</code> or <code>.exe</code>, run in your terminal</li>\n<li><a href=\"https://theinternetcafe.gumroad.com/l/ohvsty\" rel=\"noopener noreferrer\">Download KeywordJet here</a></li>\n</ul>\n\n<p>Let me know what you find ‚Äî and if you create something with Gemini CLI, drop the link in the comments!</p>\n\n\n\n\n\n<div class=\"crayons-card c-embed text-styles text-styles--secondary\">\n      <div class=\"c-embed__cover\">\n        <a href=\"https://youtube-courses.site/\" class=\"c-link s:max-w-50 align-middle\" rel=\"noopener noreferrer\">\n          <img alt=\"\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fimages.unsplash.com%2Fphoto-1614624532983-4ce03382d63d%3Fq%3D80%26w%3D2631%26auto%3Dformat%26fit%3Dcrop%26ixlib%3Drb-4.1.0%26ixid%3DM3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%253D%253D\" height=\"1480\" class=\"m-0\" width=\"2631\">\n        </a>\n      </div>\n    <div class=\"c-embed__body\">\n      <h2 class=\"fs-xl lh-tight\">\n        <a href=\"https://youtube-courses.site/\" rel=\"noopener noreferrer\" class=\"c-link\">\n          YouTube Courses - Learn Smarter\n        </a>\n      </h2>\n        <p class=\"truncate-at-3\">\n          YouTube Courses - Learn Smarter\n        </p>\n      <div class=\"color-secondary fs-s flex items-center\">\n          <img alt=\"favicon\" class=\"c-embed__favicon m-0 mr-2 radius-0\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fyoutube-courses.site%2Ficon-circle.png\" width=\"600\" height=\"600\">\n        youtube-courses.site\n      </div>\n    </div>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hugo van Kemenade: Run coverage on tests","url":"https://hugovk.dev/blog/2025/run-coverage-on-tests/","date":1751046060,"author":"","guid":173918,"unread":true,"content":"<p>Here‚Äôs a couple of reasons why, from the past couple of months.</p><p>When writing tests, it‚Äôs common to copy and paste test functions, but sometimes you\nforget to rename the new one (see also: the\n<a href=\"https://pvs-studio.com/en/blog/posts/cpp/0260/\">Last Line Effect</a>).</p><div><pre tabindex=\"0\"><code></code></pre></div><p>The tests pass, but the first one is never run because its name is redefined. This\nclearly shows up as a non-run test in the coverage report. In this\n<a href=\"https://github.com/python/pymanager/pull/17\">case</a>, we only need to rename one of them,\nand both are covered and pass.</p><p>But <a href=\"https://github.com/python/cpython/pull/109139\">sometimes</a> there‚Äôs a bug in the test\nwhich would cause it to fail, but we just don‚Äôt know because it‚Äôs not run.</p><div><pre tabindex=\"0\"><code></code></pre></div><p>It‚Äôs not so obvious when looking at the code, but Codecov highlights a problem:</p><p>The  generator is being consumed inside , so we have nothing\nto iterate over in the  loop ‚Äì hence no coverage. The\n<a href=\"https://github.com/python-pillow/Pillow/pull/8979#discussion_r2172250301\">fix</a> is to\nuse a list instead of a generator.</p>","contentLength":797,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"7 Python Caching Strategies That Boost Application Performance by 70%","url":"https://dev.to/aaravjoshi/7-python-caching-strategies-that-boost-application-performance-by-70-4d3","date":1751043934,"author":"Aarav Joshi","guid":173863,"unread":true,"content":"<blockquote>\n<p>As a best-selling author, I invite you to explore my books on <a href=\"https://www.amazon.com/stores/Aarav-Joshi/author/B0DQYNVXZ7?ref=ap_rdr&amp;isDramIntegrated=true&amp;shoppingPortalEnabled=true&amp;ccs_id=738636bd-0ca1-4d7b-8efa-481bfc222571\" rel=\"noopener noreferrer\">Amazon</a>. Don't forget to follow me on <a href=\"https://medium.com/@aarav-joshi\" rel=\"noopener noreferrer\">Medium</a> and show your support. Thank you! Your support means the world! </p>\n</blockquote>\n\n<p>Caching significantly boosts application performance by keeping frequently used data in quick-access storage. This approach cuts latency, lessens database strain, and creates smoother user experiences. I've implemented various caching strategies across projects, each with distinct trade-offs between speed, freshness, and complexity.  </p>\n\n<p>Python's <code>functools.lru_cache</code> handles in-memory memoization effortlessly. This decorator automatically caches function outputs and evicts least recently used items when limits are reached. During a recent optimization project, I used it to avoid recalculating resource-intensive transformations:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">lru_cache</span>\n<span class=\"kn\">import</span> <span class=\"n\">hashlib</span>\n\n<span class=\"nd\">@lru_cache</span><span class=\"p\">(</span><span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">generate_content_hash</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Processing large content batch...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">hashlib</span><span class=\"p\">.</span><span class=\"nf\">sha256</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">()).</span><span class=\"nf\">hexdigest</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Initial processing\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">generate_content_hash</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">PythonCachingStrategies</span><span class=\"sh\">\"</span><span class=\"p\">))</span>  \n\n<span class=\"c1\"># Subsequent identical calls skip computation\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">generate_content_hash</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">PythonCachingStrategies</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Time-based expiration ensures cached data stays relevant. By pairing values with timestamps, we automatically refresh stale entries. I often use this for API data that updates periodically:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n\n<span class=\"n\">stock_cache</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">CACHE_TTL</span> <span class=\"o\">=</span> <span class=\"nf\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_live_stock_price</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">):</span>\n    <span class=\"n\">cached_entry</span> <span class=\"o\">=</span> <span class=\"n\">stock_cache</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n    <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cached_entry</span> <span class=\"ow\">and</span> <span class=\"n\">now</span> <span class=\"o\">-</span> <span class=\"n\">cached_entry</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">timestamp</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">CACHE_TTL</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">cached_entry</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">value</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Simulate API call\n</span>    <span class=\"n\">live_price</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">$</span><span class=\"si\">{</span><span class=\"mi\">75</span> <span class=\"o\">+</span> <span class=\"nf\">hash</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"si\">}</span><span class=\"sh\">\"</span>  \n    <span class=\"n\">stock_cache</span><span class=\"p\">[</span><span class=\"n\">symbol</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">value</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">live_price</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">timestamp</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">now</span><span class=\"p\">}</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Fetched fresh price for </span><span class=\"si\">{</span><span class=\"n\">symbol</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">live_price</span>\n\n<span class=\"c1\"># First call hits API\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">get_live_stock_price</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">PYPL</span><span class=\"sh\">\"</span><span class=\"p\">))</span>  \n\n<span class=\"c1\"># Subsequent calls within 30 seconds use cache\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">get_live_stock_price</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">PYPL</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Redis enables distributed caching across multiple application instances. Its key-value store with expiration works well for shared data. In a microservices project, we reduced database hits by 70% using this pattern:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">redis</span>\n<span class=\"kn\">import</span> <span class=\"n\">json</span>\n\n<span class=\"n\">redis_client</span> <span class=\"o\">=</span> <span class=\"n\">redis</span><span class=\"p\">.</span><span class=\"nc\">Redis</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">redis-host</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">6379</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cache_user_profile</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">profile_data</span><span class=\"p\">):</span>\n    <span class=\"n\">redis_client</span><span class=\"p\">.</span><span class=\"nf\">setex</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">user:</span><span class=\"si\">{</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> \n        <span class=\"nf\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n        <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">profile_data</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_cached_profile</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">):</span>\n    <span class=\"n\">cached</span> <span class=\"o\">=</span> <span class=\"n\">redis_client</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">user:</span><span class=\"si\">{</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"n\">cached</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">cached</span> <span class=\"k\">else</span> <span class=\"bp\">None</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Cache stampedes occur when multiple requests miss simultaneously, causing redundant heavy computations. Locking mechanisms prevent this. I implemented thread locks for a high-traffic web service:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">threading</span>\n\n<span class=\"n\">price_cache</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">cache_lock</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"p\">.</span><span class=\"nc\">Lock</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_product_price</span><span class=\"p\">(</span><span class=\"n\">product_id</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Check cache without lock first\n</span>    <span class=\"k\">if</span> <span class=\"n\">product_id</span> <span class=\"ow\">in</span> <span class=\"n\">price_cache</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">price_cache</span><span class=\"p\">[</span><span class=\"n\">product_id</span><span class=\"p\">]</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">cache_lock</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Double-check after acquiring lock\n</span>        <span class=\"k\">if</span> <span class=\"n\">product_id</span> <span class=\"ow\">in</span> <span class=\"n\">price_cache</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">price_cache</span><span class=\"p\">[</span><span class=\"n\">product_id</span><span class=\"p\">]</span>\n\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Computing price for </span><span class=\"si\">{</span><span class=\"n\">product_id</span><span class=\"si\">}</span><span class=\"s\">...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nf\">complex_pricing_calc</span><span class=\"p\">(</span><span class=\"n\">product_id</span><span class=\"p\">)</span>\n        <span class=\"n\">price_cache</span><span class=\"p\">[</span><span class=\"n\">product_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">result</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Database caching stores query results to avoid repetitive SQL execution. SQLAlchemy plugins simplify this. For an e-commerce platform, we cached product listings:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">sqlalchemy_cache</span> <span class=\"kn\">import</span> <span class=\"n\">CachedQuery</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductService</span><span class=\"p\">:</span>\n    <span class=\"nd\">@CachedQuery</span><span class=\"p\">(</span><span class=\"n\">cache_time</span><span class=\"o\">=</span><span class=\"mi\">600</span><span class=\"p\">)</span>  <span class=\"c1\"># 10 minutes\n</span>    <span class=\"k\">def</span> <span class=\"nf\">get_featured_products</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"n\">Product</span><span class=\"p\">).</span><span class=\"nf\">filter</span><span class=\"p\">(</span>\n            <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">featured</span> <span class=\"o\">==</span> <span class=\"bp\">True</span>\n        <span class=\"p\">).</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>CDNs accelerate static content delivery globally. Automated cache purging keeps content fresh after updates. Our deployment pipeline includes this CDN refresh step:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">invalidate_cdn_paths</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span>\n        <span class=\"sh\">\"</span><span class=\"s\">https://api.cdn.example/purge</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">API-Key</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">CDN_KEY</span><span class=\"sh\">\"</span><span class=\"p\">)},</span>\n        <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">paths</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">paths</span><span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">raise_for_status</span><span class=\"p\">()</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Invalidated </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> CDN paths</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># After updating CSS\n</span><span class=\"nf\">invalidate_cdn_paths</span><span class=\"p\">([</span><span class=\"sh\">\"</span><span class=\"s\">/static/main.css</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Cache warming preloads anticipated data during off-peak hours. Scheduled jobs populate caches before traffic spikes. We use this for morning rush-hour preparation:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">apscheduler.schedulers.blocking</span> <span class=\"kn\">import</span> <span class=\"n\">BlockingScheduler</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">warm_popular_caches</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">product_id</span> <span class=\"ow\">in</span> <span class=\"nf\">get_trending_products</span><span class=\"p\">():</span>\n        <span class=\"nf\">get_product_details</span><span class=\"p\">(</span><span class=\"n\">product_id</span><span class=\"p\">)</span>  <span class=\"c1\"># Caches results\n</span>\n<span class=\"n\">scheduler</span> <span class=\"o\">=</span> <span class=\"nc\">BlockingScheduler</span><span class=\"p\">()</span>\n<span class=\"n\">scheduler</span><span class=\"p\">.</span><span class=\"nf\">add_job</span><span class=\"p\">(</span><span class=\"n\">warm_popular_caches</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">cron</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">hour</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>  <span class=\"c1\"># 4 AM daily\n</span><span class=\"n\">scheduler</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Each technique requires balancing factors like data volatility and access frequency. Simple in-memory caching works for single-process applications, while Redis scales horizontally. Time-based expiration suits predictable data cycles, whereas locking mechanisms protect against thundering herds. CDNs excel for static assets but demand explicit cache invalidation. Warming strategies optimize startup performance but need accurate usage prediction.  </p>\n\n<h2>\n  \n  \n  During implementation, monitor hit ratios and latency metrics. I use Redis' <code>INFO stats</code> command and Python's <code>cachetools</code> statistics to measure effectiveness. Adjust cache sizes and durations based on actual usage patterns rather than assumptions. Remember that caching introduces consistency challenges‚Äîestablish clear invalidation workflows for critical data.\n</h2>\n\n<p>üìò <strong>Checkout my <a href=\"https://youtu.be/WpR6F4ky4uM\" rel=\"noopener noreferrer\">latest ebook</a> for free on my channel!</strong><br><br>\nBe sure to <strong>like</strong>, <strong>share</strong>, <strong>comment</strong>, and <strong>subscribe</strong> to the channel!</p>\n\n\n\n\n<h2>\n  \n  \n  101 Books\n</h2>\n\n<p><strong>101 Books</strong> is an AI-driven publishing company co-founded by author <strong>Aarav Joshi</strong>. By leveraging advanced AI technology, we keep our publishing costs incredibly low‚Äîsome books are priced as low as <strong>$4</strong>‚Äîmaking quality knowledge accessible to everyone.</p>\n\n<p>Check out our book <strong><a href=\"https://www.amazon.com/dp/B0DQQF9K3Z\" rel=\"noopener noreferrer\">Golang Clean Code</a></strong> available on Amazon. </p>\n\n<p>Stay tuned for updates and exciting news. When shopping for books, search for <strong>Aarav Joshi</strong> to find more of our titles. Use the provided link to enjoy <strong>special discounts</strong>!</p>\n\n<h2>\n  \n  \n  Our Creations\n</h2>\n\n<p>Be sure to check out our creations:</p>\n\n<p><strong><a href=\"https://www.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Investor Central</a></strong> | <strong><a href=\"https://spanish.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Investor Central Spanish</a></strong> | <strong><a href=\"https://german.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Investor Central German</a></strong> | <strong><a href=\"https://smartliving.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Smart Living</a></strong> | <strong><a href=\"https://epochsandechoes.com/\" rel=\"noopener noreferrer\">Epochs &amp; Echoes</a></strong> | <strong><a href=\"https://www.puzzlingmysteries.com/\" rel=\"noopener noreferrer\">Puzzling Mysteries</a></strong> | <strong><a href=\"http://hindutva.epochsandechoes.com/\" rel=\"noopener noreferrer\">Hindutva</a></strong> | <strong><a href=\"https://elitedev.in/\" rel=\"noopener noreferrer\">Elite Dev</a></strong> | <strong><a href=\"https://jsschools.com/\" rel=\"noopener noreferrer\">JS Schools</a></strong></p>\n\n\n\n\n<h3>\n  \n  \n  We are on Medium\n</h3>\n\n<p><strong><a href=\"https://techkoalainsights.com/\" rel=\"noopener noreferrer\">Tech Koala Insights</a></strong> | <strong><a href=\"https://world.epochsandechoes.com/\" rel=\"noopener noreferrer\">Epochs &amp; Echoes World</a></strong> | <strong><a href=\"https://medium.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Investor Central Medium</a></strong> | <strong><a href=\"https://medium.com/puzzling-mysteries\" rel=\"noopener noreferrer\">Puzzling Mysteries Medium</a></strong> | <strong><a href=\"https://science.epochsandechoes.com/\" rel=\"noopener noreferrer\">Science &amp; Epochs Medium</a></strong> | <strong><a href=\"https://modernhindutva.substack.com/\" rel=\"noopener noreferrer\">Modern Hindutva</a></strong></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ŸÖŸáÿ±ÿ±ÿßÿØ€åŸÜ","url":"https://dev.to/amehrradin/mhrrdyn-2pmn","date":1751040134,"author":"Mehrradin","guid":173824,"unread":true,"content":"<p>üéØ ŸÖÿπÿ±ŸÅ€å ŸæŸÑÿ™ŸÅÿ±ŸÖ ÿ™ÿÆÿµÿµ€å ÿ®ÿ±ŸÜÿßŸÖŸá‚ÄåŸÜŸà€åÿ≥€å ŸÖŸáÿ±ÿ±ÿßÿØ€åŸÜ<br>\nÿß⁄Øÿ± ÿ®Ÿá ÿØŸÜÿ®ÿßŸÑ €å⁄© ŸÅÿ∂ÿß€å ÿ™ŸÖ€åÿ≤ÿå ÿ≥ÿßÿÆÿ™ÿßÿ±ŸÖŸÜÿØ Ÿà ÿ™Ÿàÿ≥ÿπŸá‚ÄåŸæÿ∞€åÿ± ÿ®ÿ±ÿß€å ŸÖ€åÿ≤ÿ®ÿßŸÜ€åÿå ŸÖÿØ€åÿ±€åÿ™ Ÿà ÿßŸÜÿ™ÿ¥ÿßÿ± Ÿæÿ±Ÿà⁄òŸá‚ÄåŸáÿß€å ŸÜÿ±ŸÖ‚ÄåÿßŸÅÿ≤ÿßÿ±€å Ÿáÿ≥ÿ™€åÿØÿå<br>\nÿ≥ÿß€åÿ™ mehrradin.pythonanywhere.com ÿØŸÇ€åŸÇÿßŸã ŸáŸÖŸàŸÜ ÿ¨ÿß€å€åŸá ⁄©Ÿá ÿ®ÿß€åÿØ ÿ®ÿßÿ¥€å.</p>\n\n<p>üîß ŸÇÿßÿ®ŸÑ€åÿ™‚ÄåŸáÿß€å ⁄©ŸÑ€åÿØ€å ŸÖŸáÿ±ÿ±ÿßÿØ€åŸÜ:<br>\n‚úÖ Authentication-based Admin Panel<br>\n⁄©ŸÜÿ™ÿ±ŸÑ ⁄©ÿßŸÖŸÑ ŸÖÿ≠ÿ™Ÿàÿß ÿ®ÿß Ÿàÿ±ŸàÿØ ÿßŸÖŸÜ: ÿßŸÅÿ≤ŸàÿØŸÜÿå Ÿà€åÿ±ÿß€åÿ¥ Ÿà ÿ≠ÿ∞ŸÅ Ÿæÿ≥ÿ™‚ÄåŸáÿßÿå ŸÖÿØ€åÿ±€åÿ™ ÿπ⁄©ÿ≥‚ÄåŸáÿß Ÿà ÿ¢ŸæŸÑŸàÿØ ÿØ€åÿ™ÿß ‚Äî ŸáŸÖŸá ÿßÿ≤ ÿ∑ÿ±€åŸÇ ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ ÿ®ÿß ÿ≥ÿ∑ÿ≠ ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿÆÿßÿµ.</p>\n\n<p>‚úÖ Dynamic Project Listing<br>\nŸÅÿ±€åŸÖ Ÿàÿ±⁄©‚ÄåŸáÿßÿå ÿßÿ®ÿ≤ÿßÿ±Ÿáÿßÿå ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá‚ÄåŸáÿß Ÿà ŸÜŸÖŸàŸÜŸá‚Äå⁄©ÿØŸáÿß ÿ±Ÿà ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å Ÿà ŸÅ€åŸÑÿ™ÿ± ⁄©ŸÜÿå Ÿà ÿßÿ¨ÿßÿ≤Ÿá ÿ®ÿØŸá ÿØ€å⁄Øÿ±ÿßŸÜ ÿ±ÿßÿ≠ÿ™ Ÿæ€åÿØÿßÿ¥ŸàŸÜ ⁄©ŸÜŸÜ.</p>\n\n<p>‚úÖ Clean Front-end + Backend Architecture<br>\nÿ∑ÿ±ÿßÿ≠€å responsive ÿ®ÿß CSS modular Ÿà ÿ≥ÿßÿÆÿ™ÿßÿ± back-end ÿ®ÿ± Ÿæÿß€åŸá‚Äå€å Python + Flask/PHP (ŸÇÿßÿ®ŸÑ ÿ™Ÿàÿ≥ÿπŸá ÿØÿ± ŸÜÿ≥ÿÆŸá‚ÄåŸáÿß€å ÿ¢€åŸÜÿØŸá).</p>\n\n<p>‚úÖ SEO-ready ÿ®ÿ±ÿß€å Index ÿ¥ÿØŸÜ ÿ≥ÿ±€åÿπ ÿØÿ± ⁄ØŸà⁄ØŸÑ<br>\nÿ≥ÿßÿÆÿ™ÿßÿ± ⁄©ÿØ ÿ®Ÿá€åŸÜŸá ÿ®ÿ±ÿß€å crawlerŸáÿß Ÿà meta tagŸáÿß€å ŸÖŸÜÿßÿ≥ÿ® ÿ¨Ÿáÿ™ ŸÇÿ±ÿßÿ±⁄Ø€åÿ±€å ÿØÿ± ŸÜÿ™ÿß€åÿ¨ ÿ≥ÿ±⁄Ü ÿ™Ÿàÿ≥ÿπŸá‚ÄåÿØŸáŸÜÿØ⁄ØÿßŸÜ.</p>\n\n<p>‚úÖ Content-based Platform ÿ®ÿ±ÿß€å ÿ™Ÿàÿ≥ÿπŸá‚ÄåÿØŸáŸÜÿØ⁄ØÿßŸÜ ŸàÿßŸÇÿπ€å<br>\nŸÖŸÜÿ™ÿ¥ÿ± ⁄©ŸÜ: ÿ¢ŸÖŸàÿ≤ÿ¥ÿå ŸÖŸÇÿßŸÑŸáÿå ÿ™ÿ¨ÿ±ÿ®€åÿßÿ™ ÿØ€åÿ®ÿß⁄Øÿå ŸÖŸÇÿß€åÿ≥Ÿá ÿßÿ®ÿ≤ÿßÿ±Ÿáÿßÿå ÿ≠ÿ™€å walkthrough Ÿæÿ±Ÿà⁄òŸá‚ÄåŸáÿßÿ™ ÿ±Ÿà.</p>\n\n<p>üéØ ŸáÿØŸÅ ŸÖÿßÿü<br>\nÿ≥ÿßÿÆÿ™ €å⁄© ÿ≤€åÿ≥ÿ™‚Äåÿ®ŸàŸÖ ÿ™ÿÆÿµÿµ€å ÿ®ÿ±ÿß€å ÿ™Ÿàÿ≥ÿπŸá‚ÄåÿØŸáŸÜÿØ⁄ØÿßŸÜ ŸÅÿßÿ±ÿ≥€å‚Äåÿ≤ÿ®ÿßŸÜÿå ÿ®ÿß ÿ™ŸÖÿ±⁄©ÿ≤ ÿ±Ÿà€å ⁄©ÿØ ÿ™ŸÖ€åÿ≤ÿå ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿØÿßŸÜÿ¥ÿå Ÿà ÿßÿ®ÿ≤ÿßÿ±Ÿáÿß€å ŸàÿßŸÇÿπ€å ÿ™Ÿàÿ≥ÿπŸá ŸÜÿ±ŸÖ‚ÄåÿßŸÅÿ≤ÿßÿ±.</p>\n\n<p>üìå ŸÑ€åŸÜ⁄© ÿØÿ≥ÿ™ÿ±ÿ≥€å:<br>\nüåê <a href=\"https://mehrradin.pythonanywhere.com\" rel=\"noopener noreferrer\">https://mehrradin.pythonanywhere.com</a></p>\n\n<p>üß© ŸÖŸÜÿßÿ≥ÿ® ÿ®ÿ±ÿß€å:<br>\nDevs, Freelancers, CS Students</p>\n\n<p>Python/Django Backenders</p>\n\n<p>Frontenders with React/Vanilla</p>\n\n<p>Ÿáÿ± ⁄©ÿ≥€å ⁄©Ÿá Ÿæÿ±Ÿà⁄òŸá‚Äåÿß€å ÿ®ÿ±ÿß€å ŸÜŸÖÿß€åÿ¥ÿå ÿ¢ŸÖŸàÿ≤ÿ¥ €åÿß ÿ™Ÿàÿ≤€åÿπ ÿØÿßÿ±Ÿá!</p>\n\n<p>üìà ÿßÿ≤ ŸÖÿß ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜÿå ÿß⁄Øÿ± ÿØŸÜÿ®ÿßŸÑ:<br>\nÿßŸÜÿ™ÿ¥ÿßÿ± Ÿæ⁄©€åÿ¨ €åÿß ÿ¢ŸÖŸàÿ≤ÿ¥ ÿ¥ÿÆÿµ€å‚Äåÿ≥ÿßÿ≤€å‚Äåÿ¥ÿØŸá Ÿáÿ≥ÿ™€å</p>\n\n<p>ŸæŸàÿ±ÿ™ŸÅŸàŸÑ€åŸà ŸÖ€å‚Äåÿ≥ÿßÿ≤€å</p>\n\n<p>Ÿæÿ±Ÿà⁄òŸá ŸÖ€å‚ÄåÿÆŸàÿß€å ÿØÿ± ŸÖÿπÿ±ÿ∂ ÿØ€åÿØ ÿ®ÿ∞ÿßÿ±€å</p>\n\n<p>ÿßÿ®ÿ≤ÿßÿ± ÿÆÿßÿµ€å ÿ≥ÿßÿÆÿ™€å Ÿà ŸÖ€å‚ÄåÿÆŸàÿß€å devŸáÿß ÿ™ÿ≥ÿ™ ⁄©ŸÜŸÜ</p>\n\n<p>üß† ÿØÿ± €å⁄© ÿ¨ŸÖŸÑŸá:<br>\nŸÖŸáÿ±ÿ±ÿßÿØ€åŸÜ ÿ¨ÿß€å€åŸá ⁄©Ÿá Dev ÿ®ŸàÿØŸÜ ÿ™Ÿàÿå ŸÖÿπŸÜÿß Ÿæ€åÿØÿß ŸÖ€å‚Äå⁄©ŸÜŸá.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ŸÖŸáÿ±ÿ±ÿßÿØ€åŸÜ","url":"https://dev.to/mehrradin/mhrrdyn-2pmn","date":1751040134,"author":"Mehrradin","guid":173893,"unread":true,"content":"<p>üéØ ŸÖÿπÿ±ŸÅ€å ŸæŸÑÿ™ŸÅÿ±ŸÖ ÿ™ÿÆÿµÿµ€å ÿ®ÿ±ŸÜÿßŸÖŸá‚ÄåŸÜŸà€åÿ≥€å ŸÖŸáÿ±ÿ±ÿßÿØ€åŸÜ<br>\nÿß⁄Øÿ± ÿ®Ÿá ÿØŸÜÿ®ÿßŸÑ €å⁄© ŸÅÿ∂ÿß€å ÿ™ŸÖ€åÿ≤ÿå ÿ≥ÿßÿÆÿ™ÿßÿ±ŸÖŸÜÿØ Ÿà ÿ™Ÿàÿ≥ÿπŸá‚ÄåŸæÿ∞€åÿ± ÿ®ÿ±ÿß€å ŸÖ€åÿ≤ÿ®ÿßŸÜ€åÿå ŸÖÿØ€åÿ±€åÿ™ Ÿà ÿßŸÜÿ™ÿ¥ÿßÿ± Ÿæÿ±Ÿà⁄òŸá‚ÄåŸáÿß€å ŸÜÿ±ŸÖ‚ÄåÿßŸÅÿ≤ÿßÿ±€å Ÿáÿ≥ÿ™€åÿØÿå<br>\nÿ≥ÿß€åÿ™ mehrradin.pythonanywhere.com ÿØŸÇ€åŸÇÿßŸã ŸáŸÖŸàŸÜ ÿ¨ÿß€å€åŸá ⁄©Ÿá ÿ®ÿß€åÿØ ÿ®ÿßÿ¥€å.</p>\n\n<p>üîß ŸÇÿßÿ®ŸÑ€åÿ™‚ÄåŸáÿß€å ⁄©ŸÑ€åÿØ€å ŸÖŸáÿ±ÿ±ÿßÿØ€åŸÜ:<br>\n‚úÖ Authentication-based Admin Panel<br>\n⁄©ŸÜÿ™ÿ±ŸÑ ⁄©ÿßŸÖŸÑ ŸÖÿ≠ÿ™Ÿàÿß ÿ®ÿß Ÿàÿ±ŸàÿØ ÿßŸÖŸÜ: ÿßŸÅÿ≤ŸàÿØŸÜÿå Ÿà€åÿ±ÿß€åÿ¥ Ÿà ÿ≠ÿ∞ŸÅ Ÿæÿ≥ÿ™‚ÄåŸáÿßÿå ŸÖÿØ€åÿ±€åÿ™ ÿπ⁄©ÿ≥‚ÄåŸáÿß Ÿà ÿ¢ŸæŸÑŸàÿØ ÿØ€åÿ™ÿß ‚Äî ŸáŸÖŸá ÿßÿ≤ ÿ∑ÿ±€åŸÇ ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ ÿ®ÿß ÿ≥ÿ∑ÿ≠ ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿÆÿßÿµ.</p>\n\n<p>‚úÖ Dynamic Project Listing<br>\nŸÅÿ±€åŸÖ Ÿàÿ±⁄©‚ÄåŸáÿßÿå ÿßÿ®ÿ≤ÿßÿ±Ÿáÿßÿå ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá‚ÄåŸáÿß Ÿà ŸÜŸÖŸàŸÜŸá‚Äå⁄©ÿØŸáÿß ÿ±Ÿà ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å Ÿà ŸÅ€åŸÑÿ™ÿ± ⁄©ŸÜÿå Ÿà ÿßÿ¨ÿßÿ≤Ÿá ÿ®ÿØŸá ÿØ€å⁄Øÿ±ÿßŸÜ ÿ±ÿßÿ≠ÿ™ Ÿæ€åÿØÿßÿ¥ŸàŸÜ ⁄©ŸÜŸÜ.</p>\n\n<p>‚úÖ Clean Front-end + Backend Architecture<br>\nÿ∑ÿ±ÿßÿ≠€å responsive ÿ®ÿß CSS modular Ÿà ÿ≥ÿßÿÆÿ™ÿßÿ± back-end ÿ®ÿ± Ÿæÿß€åŸá‚Äå€å Python + Flask/PHP (ŸÇÿßÿ®ŸÑ ÿ™Ÿàÿ≥ÿπŸá ÿØÿ± ŸÜÿ≥ÿÆŸá‚ÄåŸáÿß€å ÿ¢€åŸÜÿØŸá).</p>\n\n<p>‚úÖ SEO-ready ÿ®ÿ±ÿß€å Index ÿ¥ÿØŸÜ ÿ≥ÿ±€åÿπ ÿØÿ± ⁄ØŸà⁄ØŸÑ<br>\nÿ≥ÿßÿÆÿ™ÿßÿ± ⁄©ÿØ ÿ®Ÿá€åŸÜŸá ÿ®ÿ±ÿß€å crawlerŸáÿß Ÿà meta tagŸáÿß€å ŸÖŸÜÿßÿ≥ÿ® ÿ¨Ÿáÿ™ ŸÇÿ±ÿßÿ±⁄Ø€åÿ±€å ÿØÿ± ŸÜÿ™ÿß€åÿ¨ ÿ≥ÿ±⁄Ü ÿ™Ÿàÿ≥ÿπŸá‚ÄåÿØŸáŸÜÿØ⁄ØÿßŸÜ.</p>\n\n<p>‚úÖ Content-based Platform ÿ®ÿ±ÿß€å ÿ™Ÿàÿ≥ÿπŸá‚ÄåÿØŸáŸÜÿØ⁄ØÿßŸÜ ŸàÿßŸÇÿπ€å<br>\nŸÖŸÜÿ™ÿ¥ÿ± ⁄©ŸÜ: ÿ¢ŸÖŸàÿ≤ÿ¥ÿå ŸÖŸÇÿßŸÑŸáÿå ÿ™ÿ¨ÿ±ÿ®€åÿßÿ™ ÿØ€åÿ®ÿß⁄Øÿå ŸÖŸÇÿß€åÿ≥Ÿá ÿßÿ®ÿ≤ÿßÿ±Ÿáÿßÿå ÿ≠ÿ™€å walkthrough Ÿæÿ±Ÿà⁄òŸá‚ÄåŸáÿßÿ™ ÿ±Ÿà.</p>\n\n<p>üéØ ŸáÿØŸÅ ŸÖÿßÿü<br>\nÿ≥ÿßÿÆÿ™ €å⁄© ÿ≤€åÿ≥ÿ™‚Äåÿ®ŸàŸÖ ÿ™ÿÆÿµÿµ€å ÿ®ÿ±ÿß€å ÿ™Ÿàÿ≥ÿπŸá‚ÄåÿØŸáŸÜÿØ⁄ØÿßŸÜ ŸÅÿßÿ±ÿ≥€å‚Äåÿ≤ÿ®ÿßŸÜÿå ÿ®ÿß ÿ™ŸÖÿ±⁄©ÿ≤ ÿ±Ÿà€å ⁄©ÿØ ÿ™ŸÖ€åÿ≤ÿå ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿØÿßŸÜÿ¥ÿå Ÿà ÿßÿ®ÿ≤ÿßÿ±Ÿáÿß€å ŸàÿßŸÇÿπ€å ÿ™Ÿàÿ≥ÿπŸá ŸÜÿ±ŸÖ‚ÄåÿßŸÅÿ≤ÿßÿ±.</p>\n\n<p>üìå ŸÑ€åŸÜ⁄© ÿØÿ≥ÿ™ÿ±ÿ≥€å:<br>\nüåê <a href=\"https://mehrradin.pythonanywhere.com\" rel=\"noopener noreferrer\">https://mehrradin.pythonanywhere.com</a></p>\n\n<p>üß© ŸÖŸÜÿßÿ≥ÿ® ÿ®ÿ±ÿß€å:<br>\nDevs, Freelancers, CS Students</p>\n\n<p>Python/Django Backenders</p>\n\n<p>Frontenders with React/Vanilla</p>\n\n<p>Ÿáÿ± ⁄©ÿ≥€å ⁄©Ÿá Ÿæÿ±Ÿà⁄òŸá‚Äåÿß€å ÿ®ÿ±ÿß€å ŸÜŸÖÿß€åÿ¥ÿå ÿ¢ŸÖŸàÿ≤ÿ¥ €åÿß ÿ™Ÿàÿ≤€åÿπ ÿØÿßÿ±Ÿá!</p>\n\n<p>üìà ÿßÿ≤ ŸÖÿß ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜÿå ÿß⁄Øÿ± ÿØŸÜÿ®ÿßŸÑ:<br>\nÿßŸÜÿ™ÿ¥ÿßÿ± Ÿæ⁄©€åÿ¨ €åÿß ÿ¢ŸÖŸàÿ≤ÿ¥ ÿ¥ÿÆÿµ€å‚Äåÿ≥ÿßÿ≤€å‚Äåÿ¥ÿØŸá Ÿáÿ≥ÿ™€å</p>\n\n<p>ŸæŸàÿ±ÿ™ŸÅŸàŸÑ€åŸà ŸÖ€å‚Äåÿ≥ÿßÿ≤€å</p>\n\n<p>Ÿæÿ±Ÿà⁄òŸá ŸÖ€å‚ÄåÿÆŸàÿß€å ÿØÿ± ŸÖÿπÿ±ÿ∂ ÿØ€åÿØ ÿ®ÿ∞ÿßÿ±€å</p>\n\n<p>ÿßÿ®ÿ≤ÿßÿ± ÿÆÿßÿµ€å ÿ≥ÿßÿÆÿ™€å Ÿà ŸÖ€å‚ÄåÿÆŸàÿß€å devŸáÿß ÿ™ÿ≥ÿ™ ⁄©ŸÜŸÜ</p>\n\n<p>üß† ÿØÿ± €å⁄© ÿ¨ŸÖŸÑŸá:<br>\nŸÖŸáÿ±ÿ±ÿßÿØ€åŸÜ ÿ¨ÿß€å€åŸá ⁄©Ÿá Dev ÿ®ŸàÿØŸÜ ÿ™Ÿàÿå ŸÖÿπŸÜÿß Ÿæ€åÿØÿß ŸÖ€å‚Äå⁄©ŸÜŸá.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[veld-fm] I Built a Terminal File Manager with Tiling Panels Because I'm Obsessed with Keyboard Shortcuts","url":"https://dev.to/branbushes/veld-fm-i-built-a-terminal-file-manager-with-tiling-panels-because-im-obsessed-with-keyboard-4o72","date":1751036889,"author":"Angshu Roy","guid":173784,"unread":true,"content":"<p>Hey dev community! üëã</p>\n\n<p>Like a lot of you, I live in my terminal. It's fast, it's clean, and with the right tools, it‚Äôs the most productive environment on Earth. I'm a huge fan of keyboard-driven file managers like <code>ranger</code> and <code>nnn</code>‚Äîthey feel like superpowers.</p>\n\n<p>But I always had this one little itch I couldn't scratch: I wanted true, out-of-the-box tiling panels. I love my tiling window manager, and I wanted that same side-by-side workflow for my files without having to write a complex script.</p>\n\n<p>So, I decided to build my own solution. I'm excited to introduce <strong>veld</strong>!</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fy1yli7ky9bjdaj0hp9u1.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fy1yli7ky9bjdaj0hp9u1.png\" alt=\"A screenshot of the veld file manager in action.\" width=\"800\" height=\"426\"></a></p>\n\n<p>It‚Äôs a modern, terminal-based file manager built from the ground up with the incredible <a href=\"https://github.com/Textualize/textual\" rel=\"noopener noreferrer\">Textual</a> framework for Python.</p>\n\n<h3>\n  \n  \n  So, What's the Big Deal?\n</h3>\n\n<p><code>veld</code> is my take on what a simple but powerful TUI file manager should be. The goal was to create something that‚Äôs easy to use, easy to configure, and makes you feel like a keyboard wizard.</p>\n\n<p>Here‚Äôs what you get:</p>\n\n<p>üóÇÔ∏è <strong>First-Class Tiling Panels:</strong> This is the core feature. Press <code>o</code> to open a new panel, give it a path, and boom‚Äîyou have a side-by-side view. Close the active panel with <code>w</code>. Navigate between them with <code>Tab</code>. It just works.</p>\n\n<p>‚å®Ô∏è <strong>A Keyboard-First Workflow:</strong> No mouse needed. All the essential file operations are at your fingertips:</p>\n\n<ul>\n<li>  <strong>Copy (<code>c</code>), Move (<code>m</code>), Rename (<code>n</code>), Delete (<code>r</code>)</strong>\n</li>\n<li>  <strong>Archive (<code>a</code>)</strong> and <strong>Extract (<code>x</code>)</strong> zip/tar files directly.</li>\n<li>  <strong>Select</strong> files with <code>spacebar</code>.</li>\n</ul>\n\n<p>üé® <strong>Super Simple Configuration:</strong> I didn‚Äôt want to mess with complex scripting languages just to change a keybinding. <code>veld</code> creates a simple <code>config.toml</code> file for you on its first run. Want to change a key? Just edit a single line.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight toml\"><code><span class=\"c\"># Your config is at ~/.config/veld-fm/config.toml</span>\n<span class=\"nn\">[keybindings]</span>\n<span class=\"py\">quit</span> <span class=\"p\">=</span> <span class=\"s\">\"q\"</span>\n<span class=\"py\">add_panel</span> <span class=\"p\">=</span> <span class=\"s\">\"o\"</span> \n<span class=\"py\">close_panel</span> <span class=\"p\">=</span> <span class=\"s\">\"w\"</span> \n<span class=\"c\"># ...and so on</span>\n</code></pre>\n\n</div>\n\n\n\n<p>‚ú® <strong>Built with Modern Tech:</strong> Textual makes building TUIs in Python an absolute joy. It‚Äôs responsive, looks great, and makes features like path autocompletion easy to implement. Plus, since it‚Äôs all Python, it‚Äôs cross-platform and easy for anyone to hack on.</p>\n\n<h3>\n  \n  \n  Target Audience\n</h3>\n\n<p>This project is for people who:</p>\n\n<ul>\n<li>  <strong>Love tiling</strong>, but want it to work instantly without extra setup.</li>\n<li>  <strong>Prefer a simple config file</strong> over writing shell scripts.</li>\n<li>  Are curious about what‚Äôs possible with <strong>modern TUI libraries like Textual</strong>.</li>\n<li>  Just want to try something <strong>new and fun</strong>!</li>\n</ul>\n\n<h3>\n  \n  \n  Comparison\n</h3>\n\n<p>I want to be clear: similar tools like range those tools are incredible, and <code>veld</code> stands on the shoulders of giants. This project isn‚Äôt trying to replace them, but to offer a different flavor for people who:</p>\n\n<h3>\n  \n  \n  üöÄ Give It a Spin!\n</h3>\n\n<p><code>veld</code> is open-source (MIT license), and I would be absolutely thrilled if you checked it out. The best projects are built with community feedback, so I'm hungry for your thoughts, feature ideas, and bug reports.</p>\n\n<p><strong>You can find the project on GitHub:</strong><br>\n‚û°Ô∏è <strong><a href=\"https://github.com/BranBushes/veld-fm\" rel=\"noopener noreferrer\">https://github.com/BranBushes/veld-fm</a></strong></p>\n<h4>\n  \n  \n  Installation\n</h4>\n\n<p>You'll need Python 3.9+ and <code>pip</code>. You can install the latest version directly from GitHub:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>git+https://github.com/BranBushes/veld-fm.git\n</code></pre>\n\n</div>\n\n\n\n<p><em>(You can also use <code>uv pip install ...</code> if you're on the <code>uv</code> train!)</em></p>\n\n<p>This will install the <code>veld</code> command on your system. Just run it from your terminal:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Start in your home directory</span>\nveld\n\n<span class=\"c\"># Or start in a specific directory</span>\nveld ~/Projects\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  What's Next?\n</h3>\n\n<p>I have a few ideas, like adding file previews and improving performance, but I'm most excited to hear what the community wants. What's a must-have feature for you in a file manager? Have you found a bug I missed?</p>\n\n<p>Let me know in the comments below or open an issue on GitHub. Thanks for reading, and happy hacking!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 6/100: Numbers, Arithmetic, and Type Conversion","url":"https://dev.to/therahul_gupta/day-6100-numbers-arithmetic-and-type-conversion-ojf","date":1751033564,"author":"Rahul Gupta","guid":173749,"unread":true,"content":"<p>Welcome to <strong>Day 6</strong> of the <strong>100 Days of Python</strong> series!<br>\nToday we dive into how Python handles <strong>numbers</strong>, performs <strong>math operations</strong>, and lets you switch between <strong>data types</strong>. Whether you're building a calculator, processing data, or doing game development, these are must-know concepts.</p>\n\n\n<h2>\n  \n  \n  üì¶ What You'll Learn Today\n</h2>\n\n<ul>\n<li>Numeric types in Python: <code>int</code>, <code>float</code>, <code>complex</code>\n</li>\n<li>Basic arithmetic operations</li>\n<li>Useful math functions and the <code>math</code> module</li>\n<li>Type conversion between strings and numbers</li>\n</ul>\n\n\n<h2>\n  \n  \n  üî¢ 1. Python Number Types\n</h2>\n\n<p>Python supports several types of numbers:</p>\n<h3>\n  \n  \n  üîπ Integer (<code>int</code>)\n</h3>\n\n<p>Whole numbers, positive or negative:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">3</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  üîπ Floating Point (<code>float</code>)\n</h3>\n\n<p>Numbers with decimals:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.1415</span>\n<span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"mf\">99.99</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  üîπ Complex Numbers (<code>complex</code>)\n</h3>\n\n<p>Less common, used in scientific applications:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mf\">3j</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  ‚ûï 2. Basic Arithmetic Operators\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Description</th>\n<th>Example</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>+</code></td>\n<td>Addition</td>\n<td><code>3 + 2</code></td>\n<td><code>5</code></td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td>Subtraction</td>\n<td><code>5 - 3</code></td>\n<td><code>2</code></td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>Multiplication</td>\n<td><code>4 * 2</code></td>\n<td><code>8</code></td>\n</tr>\n<tr>\n<td><code>/</code></td>\n<td>Division (float)</td>\n<td><code>10 / 4</code></td>\n<td><code>2.5</code></td>\n</tr>\n<tr>\n<td><code>//</code></td>\n<td>Floor Division</td>\n<td><code>10 // 4</code></td>\n<td><code>2</code></td>\n</tr>\n<tr>\n<td><code>%</code></td>\n<td>Modulus (remainder)</td>\n<td><code>10 % 4</code></td>\n<td><code>2</code></td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>Exponentiation</td>\n<td><code>2 ** 3</code></td>\n<td><code>8</code></td>\n</tr>\n</tbody>\n</table></div>\n\n<h3>\n  \n  \n  üß™ Example:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span>  <span class=\"c1\"># 9\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">)</span>  <span class=\"c1\"># 5\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">)</span>  <span class=\"c1\"># 14\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">/</span> <span class=\"n\">b</span><span class=\"p\">)</span>  <span class=\"c1\"># 3.5\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">//</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"c1\"># 3\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">b</span><span class=\"p\">)</span>  <span class=\"c1\"># 1\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">**</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"c1\"># 49\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üìö 3. Useful Built-in Functions\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">)</span>      <span class=\"c1\"># 10 ‚Üí Absolute value\n</span><span class=\"nf\">round</span><span class=\"p\">(</span><span class=\"mf\">3.1415</span><span class=\"p\">)</span> <span class=\"c1\"># 3   ‚Üí Rounds to nearest whole\n</span><span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>     <span class=\"c1\"># 16  ‚Üí Same as 2**4\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üìê 4. Using the <code>math</code> Module\n</h2>\n\n<p>For more advanced math operations, import Python‚Äôs built-in <code>math</code> module:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">math</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">))</span>     <span class=\"c1\"># 4.0\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">ceil</span><span class=\"p\">(</span><span class=\"mf\">3.2</span><span class=\"p\">))</span>    <span class=\"c1\"># 4\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">floor</span><span class=\"p\">(</span><span class=\"mf\">3.9</span><span class=\"p\">))</span>   <span class=\"c1\"># 3\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span>           <span class=\"c1\"># 3.1415926535...\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">pi</span><span class=\"p\">))</span> <span class=\"c1\"># Very close to 0\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üîÅ 5. Type Conversion\n</h2>\n\n<p>Python allows you to convert between different data types using built-in functions:</p>\n\n<h3>\n  \n  \n  Convert <code>int</code> ‚Üî <code>float</code>:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>  <span class=\"c1\"># 5.0\n</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mf\">3.14</span>\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>    <span class=\"c1\"># 3 (decimal part removed)\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Convert <code>str</code> ‚Üî <code>int</code> or <code>float</code>:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">age_str</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">25</span><span class=\"sh\">\"</span>\n<span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">age_str</span><span class=\"p\">)</span>  <span class=\"c1\"># 25\n</span>\n<span class=\"n\">height_str</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">5.9</span><span class=\"sh\">\"</span>\n<span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">height_str</span><span class=\"p\">)</span>  <span class=\"c1\"># 5.9\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  ‚ö†Ô∏è Be Careful:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">abc</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># ‚ùå Error: invalid literal for int()\n</span></code></pre>\n\n</div>\n\n\n\n<p>Always validate or check input before conversion in real-world apps.</p>\n\n\n\n\n<h2>\n  \n  \n  ‚úÖ Real-World Example\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Enter price: </span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">price</span><span class=\"p\">)</span>\n<span class=\"n\">tax</span> <span class=\"o\">=</span> <span class=\"n\">price</span> <span class=\"o\">*</span> <span class=\"mf\">0.18</span>\n<span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">price</span> <span class=\"o\">+</span> <span class=\"n\">tax</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Total after 18% tax: ‚Çπ</span><span class=\"si\">{</span><span class=\"nf\">round</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üöÄ Recap\n</h2>\n\n<p>Today you learned:</p>\n\n<ul>\n<li>Python number types: <code>int</code>, <code>float</code>, <code>complex</code>\n</li>\n<li>Arithmetic operations and math functions</li>\n<li>How to use the <code>math</code> module</li>\n<li>Type conversion between strings and numbers</li>\n</ul>\n\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Run Command on Terminal using #Pythonüêç","url":"https://dev.to/umairshakoor/run-command-on-terminal-using-python-433m","date":1751030849,"author":"Umair Shakoor üõ°Ô∏è","guid":173719,"unread":true,"content":"<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>import os\nos.system<span class=\"o\">(</span><span class=\"s1\">'whoami'</span><span class=\"o\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Description :\n</h2>\n\n<p>Simple <em>program</em> of two lines of <em>python</em> to run any command directly in terminal . I always thinking how we can install an external module like <strong>PyJokes</strong> in others PC when sharing code . Therefore, to <em>automate</em><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>pyjokes\n</code></pre>\n\n</div>\n\n\n\n<p>I have searched and <em>build</em> this. </p>\n\n<p>What you think about this program ?<br>\nYour suggestions will be appreciated üíØ</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Build a Search Engine from Scratch in Python (No External Packages)","url":"https://dev.to/leapcell/how-to-build-a-search-engine-from-scratch-in-python-no-external-packages-a41","date":1751027999,"author":"Leapcell","guid":173681,"unread":true,"content":"<p><a href=\"https://leapcell.io/\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F35f58vnddzfh8mv823d3.png\" alt=\"Image description\" width=\"800\" height=\"502\"></a></p>\n\n<p><strong><a href=\"https://leapcell.io/\" rel=\"noopener noreferrer\">Leapcell: The Best of Serverless Web Hosting</a></strong></p>\n\n<h1>\n  \n  \n  Implementing a TF-IDF Based English Search Engine in Pure Python: Building a Dependency-Free Retrieval System from Scratch\n</h1>\n\n<p>In today's era of information explosion, search engines have become the primary way for people to access information. While commercial search engines like Google and Bing have complex technical architectures behind them, their core principles can be understood through basic information retrieval technologies. This article will guide you through building a TF-IDF algorithm-based English search engine from scratch, using only Python's standard library without any third-party dependencies, and storing the key inverted index structure in CSV format. Through this practice, you'll gain a deep understanding of how search engines work and master core technologies in text processing, index construction, and relevance calculation.</p>\n\n<h2>\n  \n  \n  Core Components of a Search Engine\n</h2>\n\n<p>A complete search engine typically consists of four core modules: document processing module, index construction module, query processing module, and ranking module. Unlike implementations that rely on third-party libraries, a pure Python implementation requires us to handle the details of eachÁéØËäÇ manually, allowing for a deeper understanding of the principles behind each step.</p>\n\n<p>The document processing module converts raw text into structured data suitable for computation, including operations such as tokenization, noise removal (e.g., punctuation), and normalization (e.g., case conversion). The index construction module is the core of the search engine, enabling fast queries through the establishment of an inverted index, which records in which documents each term appears and their positions. The query processing module receives user input queries and performs the same normalization operations as document processing to match terms in the index. The ranking module calculates the relevance score between the query terms and each document using the TF-IDF algorithm and returns results sorted by score.</p>\n\n<h2>\n  \n  \n  Principles of the TF-IDF Algorithm\n</h2>\n\n<p>TF-IDF (Term Frequency-Inverse Document Frequency) is a statistical method used to evaluate the importance of a term in a document collection. Its core idea is: the importance of a term is proportional to its frequency in a particular document and inversely proportional to its frequency across the entire document collection.</p>\n\n<h3>\n  \n  \n  Calculation of Term Frequency (TF)\n</h3>\n\n<p>Term frequency refers to the number of times a term appears in a specific document. To avoid the influence of document length on results, normalization is usually applied:</p>\n\n<p>TF(t,d) = Number of occurrences of term t in document d / Total number of terms in document d</p>\n\n<p>For example, in a document containing 100 terms, if \"learning\" appears 5 times, its term frequency is 5/100 = 0.05.</p>\n\n<h3>\n  \n  \n  Calculation of Inverse Document Frequency (IDF)\n</h3>\n\n<p>Inverse document frequency measures the discriminative power of a term, calculated as:</p>\n\n<p>IDF(t) = log(Total number of documents / Number of documents containing term t)</p>\n\n<p>If a term appears in most documents, its IDF value is low, indicating weak discriminative power; conversely, if a term appears in only a few documents, its IDF value is high, indicating strong discriminative power. For example, assuming there are 10 documents in total, and \"machine\" appears in 3 of them, its IDF value is log(10/3) ‚âà 1.20397.</p>\n\n<h3>\n  \n  \n  Calculation of TF-IDF Value\n</h3>\n\n<p>The TF-IDF value is the product of term frequency and inverse document frequency:</p>\n\n<p>TF-IDF(t,d) = TF(t,d) √ó IDF(t)</p>\n\n<p>This value comprehensively reflects the importance of term t in document d and is an important indicator for measuring the relevance between a document and a query.</p>\n\n<h2>\n  \n  \n  Design of the Inverted Index\n</h2>\n\n<p>The inverted index is a key data structure for fast querying in search engines, recording each term and the documents and positions where it appears. In a pure Python implementation, we need to design a reasonable inverted index structure and store it in CSV format for persistence.</p>\n\n<p>The basic structure of an inverted index includes three parts: term, document ID (doc_id), and positions. The position information records the specific locations where the term appears in the document, facilitating subsequent phrase queries and proximity queries.</p>\n\n<p>The CSV file format is designed as follows:</p>\n\n<p>term,doc_id,positions<br>\nmachine,0,\"[1,5]\"<br>\nlearning,0,\"[2,8]\"<br>\n...</p>\n\n<p>This format allows us to use Python's standard csv module for reading and writing operations. Each occurrence of a term in different documents is recorded as a row, with the positions field storing the position list as a string.</p>\n<h2>\n  \n  \n  Steps for Pure Python Implementation\n</h2>\n\n<p>Next, we'll detail how to implement a TF-IDF based English search engine from scratch using pure Python, including document preprocessing, inverted index construction, TF-IDF calculation, query processing, and result ranking.</p>\n<h3>\n  \n  \n  Step 1: Document Preprocessing\n</h3>\n\n<p>Document preprocessing converts raw text into structured data, mainly including the following operations:</p>\n\n<ul>\n<li>Case conversion: Convert all text to lowercase to avoid treating \"Machine\" and \"machine\" as different terms.</li>\n<li>Punctuation removal: Remove punctuation from text to reduce noise.</li>\n<li>Tokenization: Split continuous text into individual terms.</li>\n<li>Stop word removal: Filter out high-frequency words with no practical meaning such as \"the\" and \"and\".</li>\n<li>Simple stemming: Reduce terms to their root form (simplified implementation).</li>\n</ul>\n\n<p>Here's the implementation code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">string</span>\n\n<span class=\"c1\"># Define English stop words set\n</span><span class=\"n\">STOP_WORDS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">an</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">and</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">the</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">or</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">of</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">to</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">in</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">for</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">on</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">with</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">at</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">by</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">i</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">you</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">he</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">she</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">it</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">we</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">they</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">me</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">him</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">her</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">us</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">them</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">my</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">your</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">his</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">its</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">our</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">their</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">this</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">that</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">these</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">those</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">is</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">are</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">was</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">were</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">be</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">been</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">being</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">have</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">has</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">had</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">do</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">does</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">did</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">will</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">would</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">shall</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">should</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">may</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">might</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">must</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">can</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">could</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">as</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">but</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">if</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">or</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">because</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">until</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">while</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">of</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">at</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">by</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">for</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">with</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">about</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">against</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">between</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">into</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">through</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">during</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">before</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">after</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">above</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">below</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">from</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">up</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">down</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">in</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">out</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">on</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">off</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">over</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">under</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">again</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">further</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">then</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">once</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">here</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">there</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">when</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">where</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">why</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">how</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">all</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">any</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">both</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">each</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">few</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">more</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">most</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">other</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">some</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">such</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">no</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">nor</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">not</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">only</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">own</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">same</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">so</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">than</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">too</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">very</span><span class=\"sh\">'</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">preprocess_text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Preprocess text: case conversion, punctuation removal, tokenization, stop word removal</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"c1\"># Convert to lowercase\n</span>    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Remove punctuation\n</span>    <span class=\"n\">translator</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">.</span><span class=\"nf\">maketrans</span><span class=\"p\">(</span><span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">punctuation</span><span class=\"p\">)</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"n\">translator</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Tokenization (simple space splitting; more complex logic can be used in practical applications)\n</span>    <span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Remove stop words and empty strings\n</span>    <span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">token</span> <span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">tokens</span> <span class=\"k\">if</span> <span class=\"n\">token</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">STOP_WORDS</span> <span class=\"ow\">and</span> <span class=\"n\">token</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"sh\">''</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Simple stemming (simplified version)\n</span>    <span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nf\">stem_token</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">tokens</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">tokens</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">stem_token</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Simple stemming function (more complex algorithms can be used in practical applications)</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"c1\"># Handle common suffixes\n</span>    <span class=\"n\">suffixes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">ing</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ly</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ed</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">es</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">s</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">suffix</span> <span class=\"ow\">in</span> <span class=\"n\">suffixes</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">token</span><span class=\"p\">.</span><span class=\"nf\">endswith</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">token</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"n\">token</span>\n\n<span class=\"c1\"># Test the preprocessing function\n</span><span class=\"n\">sample_text</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Machine learning is a subset of artificial intelligence focused on developing algorithms that learn from data.</span><span class=\"sh\">\"</span>\n<span class=\"n\">processed_tokens</span> <span class=\"o\">=</span> <span class=\"nf\">preprocess_text</span><span class=\"p\">(</span><span class=\"n\">sample_text</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Preprocessed terms:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">processed_tokens</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This preprocessing function implements basic text cleaning and normalization, laying the foundation for subsequent index construction and TF-IDF calculation. It should be noted that the tokenization and stemming here are simplified implementations; more complex algorithms can be used in practical applications to improve accuracy.</p>\n\n<h3>\n  \n  \n  Step 2: Build Inverted Index and Store as CSV\n</h3>\n\n<p>The process of building an inverted index involves iterating through all documents, recording the document IDs and position information where each term appears, and storing the results as a CSV file.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">csv</span>\n<span class=\"kn\">from</span> <span class=\"n\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">defaultdict</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">build_inverted_index</span><span class=\"p\">(</span><span class=\"n\">documents</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Build inverted index and store as CSV file</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">inverted_index</span> <span class=\"o\">=</span> <span class=\"nf\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>  <span class=\"c1\"># Structure: {term: [(doc_id, positions), ...]}\n</span>\n    <span class=\"k\">for</span> <span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"n\">doc</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">documents</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Preprocess the document\n</span>        <span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"nf\">preprocess_text</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Record positions of each term in the current document\n</span>        <span class=\"n\">term_positions</span> <span class=\"o\">=</span> <span class=\"nf\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">term</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">):</span>\n            <span class=\"n\">term_positions</span><span class=\"p\">[</span><span class=\"n\">term</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Update inverted index\n</span>        <span class=\"k\">for</span> <span class=\"n\">term</span><span class=\"p\">,</span> <span class=\"n\">positions</span> <span class=\"ow\">in</span> <span class=\"n\">term_positions</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">inverted_index</span><span class=\"p\">[</span><span class=\"n\">term</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"n\">positions</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Store inverted index as CSV file\n</span>    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">inverted_index.csv</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"o\">=</span><span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"p\">.</span><span class=\"nf\">writer</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n        <span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"nf\">writerow</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">term</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">doc_id</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">positions</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">term</span><span class=\"p\">,</span> <span class=\"n\">doc_info</span> <span class=\"ow\">in</span> <span class=\"n\">inverted_index</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">for</span> <span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"n\">positions</span> <span class=\"ow\">in</span> <span class=\"n\">doc_info</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Convert position list to string for storage\n</span>                <span class=\"n\">positions_str</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">positions</span><span class=\"p\">)</span>\n                <span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"nf\">writerow</span><span class=\"p\">([</span><span class=\"n\">term</span><span class=\"p\">,</span> <span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"n\">positions_str</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">inverted_index</span>\n\n<span class=\"c1\"># Sample document collection\n</span><span class=\"n\">documents</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Machine learning is a subset of artificial intelligence focused on developing algorithms that learn from data.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Artificial intelligence involves creating systems that can perform tasks requiring human intelligence.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Deep learning is a type of machine learning based on artificial neural networks with multiple layers.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Natural language processing allows computers to understand and generate human language.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Computer vision enables machines to interpret and understand the visual world.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Reinforcement learning is an area of machine learning concerned with how agents take actions in an environment.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Supervised learning algorithms learn from labeled training data to make predictions on new data.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Unsupervised learning deals with unlabeled data, finding patterns and structures within it.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">A neural network is a computational model inspired by the human brain</span><span class=\"sh\">'</span><span class=\"s\">s structure and function.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Big data refers to large and complex data sets that require advanced processing techniques.</span><span class=\"sh\">\"</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Build inverted index\n</span><span class=\"n\">inverted_index</span> <span class=\"o\">=</span> <span class=\"nf\">build_inverted_index</span><span class=\"p\">(</span><span class=\"n\">documents</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Inverted index built, containing </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">inverted_index</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> terms</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This code first iterates through each document, preprocesses it, records the positions of each term in the document, organizes this information into an inverted index, and stores it as a CSV file. The inverted index is structured as a dictionary where keys are terms and values are lists of tuples containing document IDs and position lists.</p>\n\n<h3>\n  \n  \n  Step 3: Calculate TF-IDF Values\n</h3>\n\n<p>Calculating TF-IDF values requires first counting term frequencies and inverse document frequencies, then computing their product. In a pure Python implementation, we need to perform these calculations manually.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate_tfidf</span><span class=\"p\">(</span><span class=\"n\">documents</span><span class=\"p\">,</span> <span class=\"n\">inverted_index</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Calculate TF-IDF values for each term in each document</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">num_docs</span> <span class=\"o\">=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">documents</span><span class=\"p\">)</span>\n    <span class=\"n\">tfidf</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>  <span class=\"c1\"># Structure: {doc_id: {term: tfidf_value, ...}, ...}\n</span>\n    <span class=\"c1\"># Calculate total number of terms for each document\n</span>    <span class=\"n\">doc_lengths</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">doc</span> <span class=\"ow\">in</span> <span class=\"n\">documents</span><span class=\"p\">:</span>\n        <span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"nf\">preprocess_text</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">)</span>\n        <span class=\"n\">doc_lengths</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Calculate document frequency for each term (number of documents containing the term)\n</span>    <span class=\"n\">doc_freq</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">term</span><span class=\"p\">:</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">term</span><span class=\"p\">,</span> <span class=\"n\">entries</span> <span class=\"ow\">in</span> <span class=\"n\">inverted_index</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">()}</span>\n\n    <span class=\"c1\"># Calculate TF-IDF\n</span>    <span class=\"k\">for</span> <span class=\"n\">term</span><span class=\"p\">,</span> <span class=\"n\">entries</span> <span class=\"ow\">in</span> <span class=\"n\">inverted_index</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n        <span class=\"c1\"># Calculate IDF\n</span>        <span class=\"n\">idf</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"n\">num_docs</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">doc_freq</span><span class=\"p\">[</span><span class=\"n\">term</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>  <span class=\"c1\"># +1 to avoid division by zero\n</span>\n        <span class=\"k\">for</span> <span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"n\">positions</span> <span class=\"ow\">in</span> <span class=\"n\">entries</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Calculate TF\n</span>            <span class=\"n\">tf</span> <span class=\"o\">=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">positions</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">doc_lengths</span><span class=\"p\">[</span><span class=\"n\">doc_id</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">doc_lengths</span><span class=\"p\">[</span><span class=\"n\">doc_id</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n            <span class=\"c1\"># Calculate TF-IDF\n</span>            <span class=\"n\">tfidf_value</span> <span class=\"o\">=</span> <span class=\"n\">tf</span> <span class=\"o\">*</span> <span class=\"n\">idf</span>\n\n            <span class=\"c1\"># Store results\n</span>            <span class=\"k\">if</span> <span class=\"n\">doc_id</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">tfidf</span><span class=\"p\">:</span>\n                <span class=\"n\">tfidf</span><span class=\"p\">[</span><span class=\"n\">doc_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"n\">tfidf</span><span class=\"p\">[</span><span class=\"n\">doc_id</span><span class=\"p\">][</span><span class=\"n\">term</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tfidf_value</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">tfidf</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">math</span>  <span class=\"c1\"># Import math library for logarithm calculation\n</span>\n<span class=\"c1\"># Calculate TF-IDF values\n</span><span class=\"n\">tfidf_scores</span> <span class=\"o\">=</span> <span class=\"nf\">calculate_tfidf</span><span class=\"p\">(</span><span class=\"n\">documents</span><span class=\"p\">,</span> <span class=\"n\">inverted_index</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">TF-IDF calculation completed</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This code first calculates the length of each document (total number of terms after preprocessing) and the document frequency of each term, then calculates term frequency and inverse document frequency respectively, and finally computes their product to get the TF-IDF value. The calculation results are stored in a nested dictionary for easy use in subsequent queries.</p>\n\n<h3>\n  \n  \n  Step 4: Process Queries and Return Results\n</h3>\n\n<p>The query processing module needs to preprocess user input queries, find documents containing the query terms based on the inverted index, calculate the relevance score between the query and each document, and return results sorted by score.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">documents</span><span class=\"p\">,</span> <span class=\"n\">inverted_index</span><span class=\"p\">,</span> <span class=\"n\">tfidf_scores</span><span class=\"p\">,</span> <span class=\"n\">top_n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Process query and return most relevant documents</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"c1\"># Preprocess query\n</span>    <span class=\"n\">query_terms</span> <span class=\"o\">=</span> <span class=\"nf\">preprocess_text</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">query_terms</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"c1\"># Get documents containing at least one query term\n</span>    <span class=\"n\">relevant_docs</span> <span class=\"o\">=</span> <span class=\"nf\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">term</span> <span class=\"ow\">in</span> <span class=\"n\">query_terms</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">term</span> <span class=\"ow\">in</span> <span class=\"n\">inverted_index</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">inverted_index</span><span class=\"p\">[</span><span class=\"n\">term</span><span class=\"p\">]:</span>\n                <span class=\"n\">relevant_docs</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">doc_id</span><span class=\"p\">)</span>\n    <span class=\"n\">relevant_docs</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">relevant_docs</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Calculate relevance scores between query and each relevant document\n</span>    <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">doc_id</span> <span class=\"ow\">in</span> <span class=\"n\">relevant_docs</span><span class=\"p\">:</span>\n        <span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"k\">for</span> <span class=\"n\">term</span> <span class=\"ow\">in</span> <span class=\"n\">query_terms</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">term</span> <span class=\"ow\">in</span> <span class=\"n\">tfidf_scores</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"p\">{}):</span>\n                <span class=\"n\">score</span> <span class=\"o\">+=</span> <span class=\"n\">tfidf_scores</span><span class=\"p\">[</span><span class=\"n\">doc_id</span><span class=\"p\">][</span><span class=\"n\">term</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Normalize score (divide by number of query terms)\n</span>        <span class=\"n\">score</span> <span class=\"o\">/=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">query_terms</span><span class=\"p\">)</span>\n        <span class=\"n\">scores</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"n\">score</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Sort by score\n</span>    <span class=\"n\">scores</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Return top N results\n</span>    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"n\">score</span> <span class=\"ow\">in</span> <span class=\"n\">scores</span><span class=\"p\">[:</span><span class=\"n\">top_n</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"n\">score</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">results</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span>\n                <span class=\"sh\">'</span><span class=\"s\">document</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">documents</span><span class=\"p\">[</span><span class=\"n\">doc_id</span><span class=\"p\">],</span>\n                <span class=\"sh\">'</span><span class=\"s\">score</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">score</span><span class=\"p\">,</span>\n                <span class=\"sh\">'</span><span class=\"s\">doc_id</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">doc_id</span>\n            <span class=\"p\">})</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">results</span>\n\n<span class=\"c1\"># Test search functionality\n</span><span class=\"kn\">import</span> <span class=\"n\">math</span>  <span class=\"c1\"># Ensure math library is imported\n</span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">machine learning</span><span class=\"sh\">\"</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">documents</span><span class=\"p\">,</span> <span class=\"n\">inverted_index</span><span class=\"p\">,</span> <span class=\"n\">tfidf_scores</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Query: </span><span class=\"si\">{</span><span class=\"n\">query</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\"> Result </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\"> (Score: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">score</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">):</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">document</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This code first preprocesses the query terms, then finds all documents containing the query terms, calculates the relevance score between each document and the query (using a simple summation method here), and finally returns the results sorted by score.</p>\n\n<h3>\n  \n  \n  Step 5: Load Inverted Index from CSV\n</h3>\n\n<p>To persistency, we need to be able to load the inverted index from a CSV file.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">load_inverted_index_from_csv</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Load inverted index from CSV file</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">inverted_index</span> <span class=\"o\">=</span> <span class=\"nf\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"p\">.</span><span class=\"nf\">reader</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n        <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>  <span class=\"c1\"># Skip header\n</span>\n        <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n            <span class=\"n\">term</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">doc_id</span> <span class=\"o\">=</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n            <span class=\"c1\"># Convert position string back to list\n</span>            <span class=\"n\">positions</span> <span class=\"o\">=</span> <span class=\"nf\">eval</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>  <span class=\"c1\"># Note: eval has security risks; use safer methods in practical applications\n</span>\n            <span class=\"n\">inverted_index</span><span class=\"p\">[</span><span class=\"n\">term</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"n\">positions</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">inverted_index</span>\n\n<span class=\"c1\"># Test loading inverted index\n</span><span class=\"n\">loaded_index</span> <span class=\"o\">=</span> <span class=\"nf\">load_inverted_index_from_csv</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">inverted_index.csv</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Inverted index loaded from CSV contains </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">loaded_index</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> terms</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This code reads inverted index data from a CSV file, converts the position information from a string back to a list, and reconstructs the inverted index structure. It should be noted that using the eval function poses security risks; in practical applications, safer methods (such as regular expression parsing) can be used to convert the position string.</p>\n\n<h2>\n  \n  \n  Performance Optimization and Extension\n</h2>\n\n<p>A search engine implemented in pure Python may encounter performance issues when processing large-scale documents. Here are some optimization suggestions:</p>\n\n<ul>\n<li>Index compression: Position information in the inverted index can be compressed using methods such as delta encoding to reduce storage space and memory usage.</li>\n<li>Caching mechanism: Cache frequently accessed parts of the index in memory to reduce disk I/O operations.</li>\n<li>Parallel computing: Use Python's multiprocessing module for parallel computing when performing time-consuming operations like TF-IDF calculation.</li>\n<li>Query optimization: For multi-term queries, first find documents containing all query terms (intersection) before calculating relevance to reduce computation.</li>\n</ul>\n\n<p>In addition, the functionality of the search engine can be extended to support phrase queries, proximity queries, boolean queries, etc., improving retrieval accuracy and flexibility.</p>\n\n<h2>\n  \n  \n  Challenges in Practical Applications\n</h2>\n\n<p>In practical applications, a search engine implemented in pure Python may face the following challenges:</p>\n\n<ul>\n<li>Performance limitations: Compared to compiled languages like C++, Python has lower execution efficiency and may have bottlenecks when processing large-scale data.</li>\n<li>Functional limitations: A pure Python implementation struggles with complex natural language processing tasks such as word sense disambiguation and entity recognition.</li>\n<li>Scalability: As the number of documents and vocabulary grows, the index structure expands rapidly, requiring more complex distributed storage and computing architectures.</li>\n</ul>\n\n<p>Therefore, in actual search engine development, the ease of use of Python is usually combined with the advantages of other high-performance languages to build systems with hybrid architectures.</p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Through this article, we've built a TF-IDF-based English search engine from scratch without relying on any third-party libraries, and stored the key inverted index in CSV format. This process has allowed us to gain an in-depth understanding of the core principles and implementation details of search engines, including key steps such as document preprocessing, inverted index construction, TF-IDF calculation, and query processing.</p>\n\n<p>While this implementation is relatively simple, it covers the basic framework of modern search engines. On this foundation, you can further expand the functionality and optimize performance to build a more powerful retrieval system. Whether for academic research or practical applications, understanding these basic principles is an important step in deepening your knowledge of information retrieval technology.</p>\n\n<p>We hope this article has opened the door to the field of information retrieval for you, inspiring your interest and desire to explore search engine technology. In this era of information explosion, mastering information retrieval technology not only helps us obtain information more efficiently but also provides a solid foundation for research in fields such as data mining and artificial intelligence.</p>\n\n<h1>\n  \n  \n  <a href=\"https://leapcell.io/\" rel=\"noopener noreferrer\">Leapcell: The Best of Serverless Web Hosting</a>\n</h1>\n\n<p>Finally, we recommend an excellent platform for deploying Python services: <strong><a href=\"https://leapcell.io/\" rel=\"noopener noreferrer\">Leapcell</a></strong></p>\n\n<p><a href=\"https://leapcell.io/\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fln5oeb6tkf5uklx4je9r.png\" alt=\"Image description\" width=\"800\" height=\"181\"></a></p>\n\n<h3>\n  \n  \n  üöÄ Build with Your Favorite Language\n</h3>\n\n<p>Develop effortlessly in JavaScript, Python, Go, or Rust.  </p>\n\n<h3>\n  \n  \n  üåç Deploy Unlimited Projects for Free\n</h3>\n\n<p>Only pay for what you use‚Äîno requests, no charges.  </p>\n\n<h3>\n  \n  \n  ‚ö° Pay-as-You-Go, No Hidden Costs\n</h3>\n\n<p>No idle fees, just seamless scalability.  </p>\n\n<p><a href=\"https://leapcell.io/\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxawycpnns277ksilc52f.png\" alt=\"Image description\" width=\"800\" height=\"187\"></a></p>\n\n<p><a href=\"https://docs.leapcell.io/\" rel=\"noopener noreferrer\">üìñ Explore Our Documentation</a>  </p>\n\n<p>üîπ Follow us on Twitter: <a href=\"https://x.com/LeapcellHQ\" rel=\"noopener noreferrer\">@LeapcellHQ</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Fundamentals: asyncpg","url":"https://dev.to/devopsfundamentals/python-fundamentals-asyncpg-57en","date":1751027072,"author":"DevOps Fundamental","guid":173680,"unread":true,"content":"<h2>\n  \n  \n  asyncpg: Production-Grade PostgreSQL Interaction in Python\n</h2>\n\n<h3>\n  \n  \n  Introduction\n</h3>\n\n<p>In late 2022, a critical performance regression surfaced in our core recommendation service. We‚Äôd migrated a legacy SQLAlchemy-based component to FastAPI with asyncpg for improved concurrency. Initially, benchmarks looked promising. However, under sustained load in production, we observed increasing latency and, eventually, connection exhaustion. The root cause wasn‚Äôt asyncpg itself, but a subtle interaction between connection pooling, long-running queries, and a lack of proper error handling in our application logic. This incident underscored the need for a deep understanding of asyncpg‚Äôs internals and how to architect resilient systems around it. This post details our learnings, focusing on practical considerations for building production-grade Python applications leveraging asyncpg.</p>\n\n<h3>\n  \n  \n  What is \"asyncpg\" in Python?\n</h3>\n\n<p>asyncpg is a fast, feature-rich PostgreSQL client library for Python built on top of asyncio. Unlike <code>psycopg2</code>, which is largely synchronous and requires workarounds for asynchronous operation, asyncpg is designed from the ground up for asynchronous I/O. It leverages Cython for performance and provides a clean, Pythonic API.  It directly implements the PostgreSQL frontend/backend protocol, bypassing the GIL for most operations.  </p>\n\n<p>From a typing perspective, asyncpg integrates seamlessly with Python‚Äôs type hinting system (PEP 484).  It provides type annotations for all its functions and classes, enabling static analysis with tools like mypy.  The <code>asyncpg.Connection</code> object, for example, is context-managed, ensuring proper resource cleanup.  asyncpg‚Äôs design aligns with PEP 657 (Asynchronous Iterators), allowing for efficient streaming of query results.</p>\n\n<h3>\n  \n  \n  Real-World Use Cases\n</h3>\n\n<ol>\n<li>\n<strong>FastAPI Request Handling:</strong>  Our recommendation service uses asyncpg to fetch user preferences, item metadata, and collaborative filtering data.  The asynchronous nature of asyncpg allows us to handle thousands of concurrent requests without blocking, significantly improving throughput.</li>\n<li>\n<strong>Async Job Queues:</strong> We utilize a Celery worker with an asyncpg backend for processing computationally intensive tasks like model retraining.  The worker pulls tasks from the database asynchronously, minimizing latency and maximizing resource utilization.</li>\n<li>\n<strong>Type-Safe Data Models:</strong>  We define Pydantic models that directly map to database tables. asyncpg‚Äôs ability to return results as dictionaries simplifies data serialization and deserialization, ensuring type safety throughout the application.</li>\n<li>\n<strong>CLI Tools for Data Export:</strong> A data engineering tool uses asyncpg to efficiently export large datasets from PostgreSQL to cloud storage. Asynchronous streaming of results prevents memory exhaustion when dealing with multi-gigabyte tables.</li>\n<li>\n<strong>ML Preprocessing Pipelines:</strong>  A feature store uses asyncpg to retrieve features for machine learning models.  The low latency of asyncpg is critical for real-time inference.</li>\n</ol>\n\n<h3>\n  \n  \n  Integration with Python Tooling\n</h3>\n\n<p>Our <code>pyproject.toml</code> reflects our commitment to static analysis and type safety:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight toml\"><code><span class=\"nn\">[tool.mypy]</span>\n<span class=\"py\">python_version</span> <span class=\"p\">=</span> <span class=\"s\">\"3.11\"</span>\n<span class=\"py\">strict</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n<span class=\"py\">ignore_missing_imports</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n\n<span class=\"nn\">[tool.pytest]</span>\n<span class=\"py\">asyncio_mode</span> <span class=\"p\">=</span> <span class=\"s\">\"strict\"</span>\n\n<span class=\"nn\">[tool.pydantic]</span>\n<span class=\"py\">enable_schema_cache</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n</code></pre>\n\n</div>\n\n\n\n<p>We use <code>asyncpg</code> with Pydantic for data validation and serialization.  Connection pooling is managed using <code>asyncpg.create_pool</code>, configured with sensible defaults (min/max connections, timeout).  Logging is crucial; we wrap all database interactions with structured logging using <code>structlog</code>, including query execution times and error details.  We also leverage <code>dataclasses</code> to represent database records, enhancing code readability.</p>\n\n<h3>\n  \n  \n  Code Examples &amp; Patterns\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">asyncpg</span>\n<span class=\"kn\">import</span> <span class=\"n\">pydantic</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">pydantic</span><span class=\"p\">.</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_users</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">:</span> <span class=\"n\">asyncpg</span><span class=\"p\">.</span><span class=\"n\">Pool</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">]:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"nf\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n        <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">SELECT id, name, email FROM users</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">rows</span><span class=\"p\">]</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncpg</span><span class=\"p\">.</span><span class=\"nf\">create_pool</span><span class=\"p\">(</span>\n        <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">user</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">password</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">mydb</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">localhost</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"n\">min_size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">20</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">get_users</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This example demonstrates a common pattern: acquiring a connection from the pool, executing a query, and mapping the results to a Pydantic model.  The <code>async with pool.acquire() as conn:</code> ensures the connection is returned to the pool even if exceptions occur.  We favor parameterized queries to prevent SQL injection vulnerabilities.</p>\n\n<h3>\n  \n  \n  Failure Scenarios &amp; Debugging\n</h3>\n\n<p>A common issue is connection exhaustion. This often occurs when queries take longer than expected, tying up connections in the pool.  We‚Äôve encountered scenarios where a poorly indexed query caused a full table scan, leading to timeouts and connection starvation.  </p>\n\n<p>Debugging involves several steps:</p>\n\n<ol>\n<li>\n<strong>Logging:</strong>  Detailed logging of query execution times and connection pool statistics.</li>\n<li>\n<strong><code>cProfile</code>:</strong>  Profiling the application to identify performance bottlenecks.</li>\n<li>\n<strong><code>asyncio.get_event_loop().set_debug(True)</code>:</strong>  Enabling asyncio debugging to track task scheduling and identify potential race conditions.</li>\n<li>\n<strong>PostgreSQL Monitoring:</strong>  Using tools like <code>pg_stat_activity</code> to monitor query execution on the database server.</li>\n</ol>\n\n<p>An example traceback from a connection exhaustion error:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>asyncpg.exceptions.PoolEmptyError: Pool is empty.  Maximum pool size reached.\n</code></pre>\n\n</div>\n\n\n\n<p>This indicates the need to increase the <code>max_size</code> of the connection pool or optimize the queries to reduce connection hold times.</p>\n\n<h3>\n  \n  \n  Performance &amp; Scalability\n</h3>\n\n<p>Benchmarking is crucial. We use <code>timeit</code> to measure the performance of individual queries and <code>cProfile</code> to identify performance bottlenecks in our application code.  We‚Äôve found that minimizing data transfer between the database and the application is key.  Using <code>SELECT</code> statements that only retrieve the necessary columns and leveraging PostgreSQL‚Äôs indexing capabilities can significantly improve performance.</p>\n\n<p>Avoiding global state and unnecessary allocations is also important.  We‚Äôve observed performance improvements by reusing connection pools across multiple requests and avoiding the creation of temporary objects within critical code paths.  We also utilize PostgreSQL‚Äôs <code>COPY</code> command for bulk data loading and exporting, which is significantly faster than inserting or selecting data row by row.</p>\n\n<h3>\n  \n  \n  Security Considerations\n</h3>\n\n<p>asyncpg, like any database client, is susceptible to SQL injection vulnerabilities if not used carefully.  <strong>Always use parameterized queries.</strong>  Never concatenate user input directly into SQL statements.  We also enforce strict input validation on all user-provided data to prevent malicious input from reaching the database.  </p>\n\n<p>Furthermore, we restrict database user privileges to the minimum necessary to perform their tasks.  We avoid using the <code>postgres</code> superuser account in our application code.  We also regularly audit our database security configuration to identify and address potential vulnerabilities.</p>\n\n<h3>\n  \n  \n  Testing, CI &amp; Validation\n</h3>\n\n<p>Our testing strategy includes:</p>\n\n<ol>\n<li>\n<strong>Unit Tests:</strong>  Testing individual functions and classes in isolation using <code>pytest</code>.</li>\n<li>\n<strong>Integration Tests:</strong>  Testing the interaction between our application and the database using a dedicated test database.</li>\n<li>\n<strong>Property-Based Tests (Hypothesis):</strong>  Generating random test data to uncover edge cases and potential bugs.</li>\n<li>\n<strong>Type Validation (mypy):</strong>  Ensuring that our code adheres to our type annotations.</li>\n</ol>\n\n<p>Our CI/CD pipeline uses <code>tox</code> to run our tests against multiple Python versions.  GitHub Actions automatically runs our tests and type checks on every pull request.  We also use pre-commit hooks to enforce code style and linting rules.</p>\n\n<h3>\n  \n  \n  Common Pitfalls &amp; Anti-Patterns\n</h3>\n\n<ol>\n<li>\n<strong>Blocking Operations in Async Functions:</strong>  Using synchronous code within an async function will block the event loop.</li>\n<li>\n<strong>Ignoring Connection Pool Limits:</strong>  Failing to configure the connection pool appropriately can lead to connection exhaustion.</li>\n<li>\n<strong>Not Handling Database Errors:</strong>  Ignoring database errors can lead to unexpected behavior and data corruption.</li>\n<li>\n<strong>Using Raw SQL Queries:</strong>  Using raw SQL queries instead of parameterized queries introduces SQL injection vulnerabilities.</li>\n<li>\n<strong>Leaking Connections:</strong>  Failing to release connections back to the pool can lead to connection starvation.</li>\n</ol>\n\n<h3>\n  \n  \n  Best Practices &amp; Architecture\n</h3>\n\n<ul>\n<li>\n<strong>Type Safety:</strong>  Embrace Python‚Äôs type hinting system and use tools like mypy to enforce type correctness.</li>\n<li>\n<strong>Separation of Concerns:</strong>  Separate database access logic from business logic.</li>\n<li>\n<strong>Defensive Coding:</strong>  Handle database errors gracefully and validate all user input.</li>\n<li>\n<strong>Modularity:</strong>  Break down your application into small, reusable modules.</li>\n<li>\n<strong>Configuration Layering:</strong>  Use a layered configuration approach to manage environment-specific settings.</li>\n<li>\n<strong>Dependency Injection:</strong>  Use dependency injection to improve testability and maintainability.</li>\n<li>\n<strong>Automation:</strong>  Automate your build, test, and deployment processes.</li>\n</ul>\n\n<h3>\n  \n  \n  Conclusion\n</h3>\n\n<p>asyncpg is a powerful tool for building high-performance, scalable, and reliable Python applications that interact with PostgreSQL. However, it requires a deep understanding of its internals and careful attention to detail. By following the best practices outlined in this post, you can avoid common pitfalls and build robust systems that can handle the demands of production environments.  Refactor legacy SQLAlchemy code to asyncpg, measure performance improvements, write comprehensive tests, and enforce type checking to unlock the full potential of asynchronous PostgreSQL interaction in Python.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I Built an ML-Powered War Prediction App with Python & Streamlit ‚Äì Here's How It Works","url":"https://dev.to/naveen_kumar_64b131ab0bca/i-built-an-ml-powered-war-prediction-app-with-python-streamlit-heres-how-it-works-3d24","date":1751025898,"author":"Naveen Kumar","guid":173679,"unread":true,"content":"<p>I‚Äôve built and deployed <strong>WarPredictor.com</strong> ‚Äî a machine learning-powered web app that predicts the likely winner in a hypothetical war between any two countries, based on historical and current military data.</p>\n\n<p><strong>Live Demo:</strong> <a href=\"https://warpredictor.com\" rel=\"noopener noreferrer\">WarPredictor.com</a></p>\n\n<ul>\n<li>Predicts the likely winner between two selected countries using Logistic Regression and Random Forest.</li>\n<li>Compares military, economic, and geopolitical indicators (like GDP, military budget, nuclear capability, alliances, etc.).</li>\n<li>Visualizes historical events and border conflicts (e.g., Pulwama, Crimea, etc.).</li>\n<li>Includes a news headline generator based on selected countries.</li>\n</ul>\n\n<p><strong>TechStack Used:</strong></p>\n\n<ul>\n<li>\n<strong>Frontend</strong>: Streamlit (Python)</li>\n<li>\n<strong>Backend/ML Models</strong>: Logistic Regression, Random Forest</li>\n<li>\n<strong>Deployment</strong>: AWS EC2</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: The Real Python Podcast ‚Äì Episode #255: Structuring Python Scripts &amp; Exciting Non-LLM Software Trends","url":"https://realpython.com/podcasts/rpp/255/","date":1751025600,"author":"","guid":173665,"unread":true,"content":"<p>What goes into crafting an effective Python script? How do you organize your code, manage dependencies with PEP 723, and handle command-line arguments for the best results? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>","contentLength":289,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Supervised Machine Learning: Concepts I Finally Understand","url":"https://dev.to/anshika_1f2941065e4fa7a77/supervised-machine-learning-concepts-i-finally-understand-3d1","date":1751025000,"author":"Anshika","guid":173648,"unread":true,"content":"<p>Hi, I'm Anshika ‚Äî a B.Tech student diving into the world of AI and Machine Learning.</p>\n\n<p>I just completed <strong>Andrew Ng‚Äôs Supervised Machine Learning course</strong> on Coursera (the first in the ML Specialization by DeepLearning.AI), and I wanted to document my learnings, struggles, and next steps as I begin my ML journey.</p>\n\n\n\n\n<h2>\n  \n  \n  üéØ What is Supervised Machine Learning?\n</h2>\n\n<p>Supervised ML is about <strong>teaching machines using labeled data</strong>.</p>\n\n<p>You provide inputs (features) along with the correct outputs (labels), and the model learns to predict outputs for new, unseen inputs.</p>\n\n<p>There are two key types:</p>\n\n<ul>\n<li>\n<strong>Regression</strong> ‚Üí Predict continuous values (e.g., house price, traffic speed)</li>\n<li>\n<strong>Classification</strong> ‚Üí Predict categories (e.g., spam vs. not spam)</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  üß† Key Concepts I Learned\n</h2>\n\n<ul>\n<li><strong>Linear Regression (with one and multiple variables)</strong></li>\n<li>\n<strong>Gradient Descent</strong> ‚Äì how the model \"learns\"</li>\n<li>\n<strong>Cost Function (Mean Squared Error)</strong> ‚Äì measuring how wrong the model is</li>\n<li>\n<strong>Logistic Regression</strong> ‚Äì used for binary classification problems</li>\n<li>\n<strong>Overfitting vs. Underfitting</strong> ‚Äì finding the balance between simplicity and accuracy</li>\n<li>\n<strong>Regularization (L2)</strong> ‚Äì prevents the model from overfitting the training data</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  üõ†Ô∏è Tools I Used\n</h2>\n\n<ul>\n<li><strong>Python</strong></li>\n<li><strong>NumPy</strong></li>\n<li>Jupyter Notebook (for practice exercises)</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  üí° What Helped Me Understand Better\n</h2>\n\n<ul>\n<li>Visualizing gradient descent and cost function graphs</li>\n<li>Coding linear regression <strong>from scratch</strong> before using libraries</li>\n<li>Reading discussion forums whenever I got stuck</li>\n<li>Taking handwritten notes to simplify complex terms</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  üöÄ What‚Äôs Next?\n</h2>\n\n<p>Now that I‚Äôve finished the Supervised Learning course, I plan to:</p>\n\n<ul>\n<li>Continue the specialization: <strong>Next up ‚Üí Unsupervised Learning</strong>\n</li>\n<li>Apply regression to a real-world dataset (maybe traffic or energy!)</li>\n<li>Start writing beginner-friendly tutorials alongside learning</li>\n</ul>\n\n\n\n\n<p>If you‚Äôre on a similar journey or just starting out ‚Äî feel free to reach out! Let‚Äôs learn and build together.</p>\n\n<p>Thanks for reading! üòä</p>\n\n\n\n\n<p>üîó <strong>Connect with me:</strong></p>\n\n<ul>\n<li>GitHub: <a href=\"https://github.com/anshikalohan\" rel=\"noopener noreferrer\">https://github.com/anshikalohan</a>\n</li>\n<li>LinkedIn: <a href=\"https://www.linkedin.com/in/anshika-lohan-570484273/\" rel=\"noopener noreferrer\">https://www.linkedin.com/in/anshika-lohan-570484273/</a>\n</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Multi-Tool: Introduction to Python","url":"https://dev.to/ajenec/the-multi-tool-introduction-to-python-3262","date":1751024071,"author":"ajenec","guid":173647,"unread":true,"content":"<p>As a coder who‚Äôs just mastered JavaScript, you're probably hungry for your next challenge, or maybe you're just starting you're coding journey. Either way, Python is a great language to have in your toolkit. It is easy to read, beginner-friendly, and one of the most popular programming languages in the world, currently <strong>ranked #1</strong> on the <a href=\"https://www.tiobe.com/tiobe-index/\" rel=\"noopener noreferrer\">TIOBE</a> index. <strong>Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.</strong> In simpler terms, it is <em>versatile</em> and <strong>doesn't require compiling</strong> your code to run it. Developers use it for everything from websites and task automation to machine learning, and even powering applications like Netflix.</p>\n\n<p>One reason it's so widely loved is that its syntax reads almost like plain English, making it <em>easier to maintain</em>, write, and debug. While reading this, I'll walk you through what makes Python a great tool for developers, how it compares to JavaScript, and show you syntax and features to get you started.</p>\n\n<h2>\n  \n  \n  The Set-Up: Getting Started with Python\n</h2>\n\n<ol>\n<li><strong>Install Python</strong></li>\n</ol>\n\n<p>Go to <a href=\"//python.org\">python.org</a>, and download the latest version for your operating system. On Windows, ensure that you check the box labeled \"Add Python to PATH\" during installation.</p>\n\n<ol>\n<li><strong>Check installation</strong></li>\n</ol>\n\n<p>Open a terminal and type:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   python3 <span class=\"nt\">--version</span>\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li><strong>Run your first Python script</strong></li>\n</ol>\n\n<p>Create a new file:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   <span class=\"nb\">touch </span>hello.py\n</code></pre>\n\n</div>\n\n\n\n<p>To run your file:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   python hello.py\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Why Learn Python?\n</h2>\n\n<p>Learning Python gives you access to a completely different side of the development world. While JavaScript is good for building great interactive web applications, Python is the go-to language for solving problems <em>behind the scenes</em>. Unlike JavaScript, which originated from the browser and was later adapted for back-end development, Python was designed from the beginning to be <strong>general-purpose and expressive</strong>. Engineers at companies like Google and NASA use it because it's powerful, readable, and well-supported.</p>\n\n<p>Python is the most versatile computer programming language, allowing developers to use it for:</p>\n\n<ul>\n<li>Data Mining</li>\n<li>Data Analytics</li>\n<li>Data Visualization</li>\n<li>AI and machine learning <em>(like training an AI model to write poetry or detect cancer cells)</em>\n</li>\n<li>Building apps</li>\n<li>Web Development and Web Application Development</li>\n<li>Developing games</li>\n<li>Quantitative and Qualitative Analysis</li>\n<li>Data Engineering</li>\n</ul>\n\n<p>There are a few other capabilities of Python, which is why it is being used more across more industries. Think of Python as a Swiss Army knife for developers.</p>\n\n<h2>\n  \n  \n  Python in Practice\n</h2>\n\n<h3>\n  \n  \n  Variables &amp; Data Types\n</h3>\n\n<p>In Python, you don't use <code>let</code>, <code>const</code>, or <code>var</code> to define a variable. You just write the variable name and assign it a value.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Janice</span><span class=\"sh\">'</span>  <span class=\"c1\"># STRING\n</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">23</span>         <span class=\"c1\"># INTEGER\n</span><span class=\"n\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.14</span>        <span class=\"c1\"># FLOAT\n</span><span class=\"n\">has_job</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>  <span class=\"c1\"># BOOLEAN\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Functions &amp; Code Blocks\n</h3>\n\n<p>Use <code>def</code> to define a function.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">call_me</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Hi </span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"nf\">call_me</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Jason</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"c1\"># This is how you execute a function\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Conditionals\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n\n<span class=\"k\">if</span> <span class=\"n\">balance</span> <span class=\"o\">&gt;</span> <span class=\"mi\">20</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Congrats Your Rich!</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">balance</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Back to Work...</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Keep Grinding!</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Lists and Dictionaries\n</h3>\n\n<p>Lists are like arrays, and dictionaries are like objects in JavaScript.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">dinner</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Greens</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Beans</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Tomatoes</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Ham</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"c1\"># List\n</span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">Sam</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">seat</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">is_eating</span><span class=\"p\">:</span> <span class=\"bp\">True</span> <span class=\"p\">}</span> <span class=\"c1\"># Dictionary\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Iteration\n</h3>\n\n<p>Loops in Python are extremely simple!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">dinner</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Greens</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Beans</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Tomatoes</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Ham</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">serving_size</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># For Loop\n</span><span class=\"k\">for</span> <span class=\"n\">plate</span> <span class=\"ow\">in</span> <span class=\"n\">dinner</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Eating</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">plate</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#While Loop\n</span><span class=\"k\">while</span> <span class=\"n\">serving_size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Still eating</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">serving_size</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Python vs JavaScript\n</h2>\n\n<p>While both are very useful, they each shine in different areas. JavaScript is the best for building a web interface, but Python <strong>excels in data-heavy tasks, automation, and fast development</strong>. If programming languages were tools in a workshop, JavaScript would be<br>\na power drill; fast and focused. Python would be a multi-tool that folds out to whatever you need.</p>\n\n<p><strong>Key Differences:</strong></p>\n\n<ul>\n<li>\n<strong>Syntax:</strong> Python uses indentation instead of curly braces, which forces you to write clean and readable code.</li>\n<li>\n<strong>Typing:</strong> Python leans more toward clarity and consistency, to allow the developer to focus on problem-solving.</li>\n<li>\n<strong>Use Cases:</strong> Python dominates AI, data science, automation, and scripting.</li>\n</ul>\n\n<p><strong>Commonalities:</strong></p>\n\n<ul>\n<li>Both support object-oriented and functional programming.</li>\n<li>Both have large, supportive communities. Giving you opportunities for feedback.</li>\n<li>You can build a full-stack application using either.</li>\n</ul>\n\n<h2>\n  \n  \n  Conclusion &amp; Tips For Learning Python\n</h2>\n\n<p>Learning Python has made me a better developer. It's helped me improve my problem-solving skills without having to worry about syntax. If you already know JavaScript, you'll be able to pick up on it quickly. JavaScript taught me web development, but Python helped solidify my coding and problem-solving skills.</p>\n\n<p><strong>Tips:</strong></p>\n\n<ul>\n<li>Start building small projects</li>\n<li>Read Documentation <a href=\"https://automatetheboringstuff.com/\" rel=\"noopener noreferrer\">(Free Book!)</a>\n</li>\n<li>Try Online coding platforms like CodeAcademy</li>\n<li>Follow YouTube Tutorials\n\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=K5KVEU3aaeQ&amp;t=56s\" rel=\"noopener noreferrer\">Programming with Mosh</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=rfscVS0vtbw\" rel=\"noopener noreferrer\">freeCodeCamp Tutorial</a></li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<h3>\n  \n  \n  Resources\n</h3>\n\n<ul>\n<li><a href=\"https://www.fdmgroup.com/news-insights/why-learn-python/\" rel=\"noopener noreferrer\">Why Learn Python? (FDM Group)</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/difference-between-python-and-javascript/\" rel=\"noopener noreferrer\">Difference Between Python and JavaScript (GeeksforGeeks)</a></li>\n<li><a href=\"https://leapcell.io/blog/python-cheat-sheet-a-quick-guide-to-core-syntax-and-features\" rel=\"noopener noreferrer\">Python Cheat Sheet (Leapcell)</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/learn-python-for-javascript-developers-handbook/\" rel=\"noopener noreferrer\">Learn Python for JavaScript Developers (freeCodeCamp)</a></li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"True or False Game by AmazonQ","url":"https://dev.to/mi_na_0b18b16b0558ca0fd81/true-or-false-game-by-amazonq-15g8","date":1751023796,"author":"Lodi","guid":173646,"unread":true,"content":"<p>I chose to develop a True or False game because it is a simple, accessible game suitable for all ages. The idea was to create a fast-paced quiz game where players answer random questions to test their general knowledge. Amazon Q, with its code generation and programming support capabilities, was the ideal tool to bring this idea to life. This game is not only fun but also a great way to explore the potential of AI in game development.</p>\n\n<p>Effective Prompting Techniques<br>\nWhile working with Amazon Q, I realized that the way prompts are written plays a crucial role. Here are some effective techniques I discovered:</p>\n\n<p>Specific and Clear: Instead of vague requests like \"create a game,\" I wrote detailed prompts, for example: \"Write Python code for a True or False game with 10 random questions, a console interface, and score tracking.\"<br>\nProvide Context: I described the goal, such as \"The game must have a simple, user-friendly interface and save the highest score.\"<br>\nStep-by-Step Requests: When fixing bugs or optimizing, I broke down requests, like \"Check for errors in the score calculation function and suggest fixes.\" These prompts helped Amazon Q understand the requirements and generate more accurate code.<br>\nAI Handling Programming Challenges<br>\nDeveloping the True or False game came with its share of programming challenges, and Amazon Q handled them impressively:</p>\n\n<p>Game Logic Management: Amazon Q automatically generated code to manage the game flow, such as displaying random questions, checking answers, and updating the score.<br>\nDevelopment Automation That Saved Time<br>\nAmazon Q significantly saved time through automation:</p>\n\n<p>Generating Question Lists: Instead of manually writing 50 questions, I asked Amazon Q to create a JSON file containing questions and answers. With a single prompt, I got a diverse question list.<br>\nCreating Console Interface: Amazon Q automatically built a simple console interface with messages and a scoreboard.<br>\nTesting and Debugging: Amazon Q detected syntax and logic errors in the code, providing instant fix suggestions, which reduced debugging time.</p>\n\n<p>Link Demo Video:<br>\n<a href=\"https://drive.google.com/file/d/1TYKfy4xulGLweMHWjCc33FwxAgz1Afd3/view?usp=sharing\" rel=\"noopener noreferrer\">https://drive.google.com/file/d/1TYKfy4xulGLweMHWjCc33FwxAgz1Afd3/view?usp=sharing</a></p>\n\n<p>Link Github:<br>\n<a href=\"https://github.com/lodi-bui/TrueFalseGame_AmazonQ\" rel=\"noopener noreferrer\">https://github.com/lodi-bui/TrueFalseGame_AmazonQ</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Furones Algorithm","url":"https://dev.to/frank_vega_987689489099bf/the-furones-algorithm-15lp","date":1751022518,"author":"Frank Vega","guid":173645,"unread":true,"content":"<h2>\n  \n  \n  A \n\n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">n\\sqrt{n}</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"><span class=\"svg-align\"><span class=\"pstrut\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span><span><span class=\"pstrut\"></span><span class=\"hide-tail\"></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\"><span></span></span></span></span></span></span></span></span>\n</span>\n-Approximation for Independent Sets: The Furones Algorithm\n</h2>\n\n<p>Frank Vega<br>\n<em>Information Physics Institute, 840 W 67th St, Hialeah, FL 33012, USA</em><br>\n<a href=\"mailto:vega.frank@gmail.com\">vega.frank@gmail.com</a></p>\n<h2>\n  \n  \n  Introduction\n</h2>\n\n<p>The Maximum Independent Set (MIS) problem is a core problem in graph theory and computer science. Given an undirected graph \n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">G=(V,E)G = (V, E)</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\"></span><span class=\"mord mathnormal\">E</span><span class=\"mclose\">)</span></span></span></span>\n</span>\n, where \n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">VV</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">V</span></span></span></span>\n</span>\n is the set of vertices and \n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">EE</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">E</span></span></span></span>\n</span>\n is the set of edges, an <strong>independent set</strong> is a subset \n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">S‚äÜVS \\subseteq V</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">S</span><span class=\"mspace\"></span><span class=\"mrel\">‚äÜ</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">V</span></span></span></span>\n</span>\n such that no two vertices in \n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">SS</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">S</span></span></span></span>\n</span>\n are adjacent (i.e., no edge exists between any pair of vertices in \n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">SS</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">S</span></span></span></span>\n</span>\n). The objective is to find an independent set of maximum cardinality, denoted OPT, the size of the largest independent set in \n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">GG</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">G</span></span></span></span>\n</span>\n.</p>\n<h3>\n  \n  \n  Key Characteristics\n</h3>\n\n<ul>\n<li>\n<strong>NP-Hard</strong>: MIS is NP-hard for general graphs, implying no known polynomial-time algorithm solves it exactly unless P = NP.</li>\n<li>\n<strong>Applications</strong>: Used in scheduling, network design, coding theory, and resource allocation, where selecting non-conflicting entities is essential.</li>\n<li>\n<strong>Approximation Challenge</strong>: Achieving a good approximation ratio is difficult, with the best polynomial-time algorithms often yielding ratios like \n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">O(n/log‚Å°n)O(n / \\log n)</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mspace\"></span><span class=\"mop\">lo<span>g</span></span><span class=\"mspace\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>\n</span>\n or worse due to the problem‚Äôs complexity. An approximation algorithm for the Maximum Independent Set problem with an approximation factor of \n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">n\\sqrt{n}</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"><span class=\"svg-align\"><span class=\"pstrut\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span><span><span class=\"pstrut\"></span><span class=\"hide-tail\"></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\"><span></span></span></span></span></span></span></span></span>\n</span>\n would imply P = NP.  This is because the Maximum Independent Set problem is known to be NP-hard, and it is hard to approximate within a factor of \n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">n1‚àíœµn^{1-\\epsilon }</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"><span><span class=\"pstrut\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">‚àí</span><span class=\"mord mathnormal mtight\">œµ</span></span></span></span></span></span></span></span></span></span></span></span>\n</span>\n for any \n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">œµ&gt;0\\epsilon &gt;0</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">œµ</span><span class=\"mspace\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">0</span></span></span></span>\n</span>\n unless P=NP</li>\n</ul>\n<h2>\n  \n  \n  Algorithm Description\n</h2>\n\n<p>The algorithm computes an approximate independent set for an undirected graph using a NetworkX graph object. It handles both bipartite and non-bipartite graphs, using the bipartite nature of trees to iteratively refine a candidate set until it is independent, followed by a greedy extension for maximality. Below is the updated algorithm:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">networkx</span> <span class=\"k\">as</span> <span class=\"n\">nx</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_independent_set</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Compute an approximate independent set for an undirected graph by transforming it into a chordal graph.\n\n    Args:\n        graph (nx.Graph): A NetworkX Graph object representing the input graph.\n\n    Returns:\n        set: A set of vertex indices representing the independent set.\n             Returns an empty set if the graph is empty or has no edges.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">iset_bipartite</span><span class=\"p\">(</span><span class=\"n\">bipartite_graph</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Initialize an empty set to store the independent set\n</span>        <span class=\"n\">independent_set</span> <span class=\"o\">=</span> <span class=\"nf\">set</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Iterate over each connected component in the bipartite graph\n</span>        <span class=\"k\">for</span> <span class=\"n\">component</span> <span class=\"ow\">in</span> <span class=\"n\">nx</span><span class=\"p\">.</span><span class=\"nf\">connected_components</span><span class=\"p\">(</span><span class=\"n\">bipartite_graph</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Extract the subgraph for the current component\n</span>            <span class=\"n\">bipartite_subgraph</span> <span class=\"o\">=</span> <span class=\"n\">bipartite_graph</span><span class=\"p\">.</span><span class=\"nf\">subgraph</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Compute the maximum matching in the bipartite subgraph\n</span>            <span class=\"n\">maximum_matching</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"p\">.</span><span class=\"n\">bipartite</span><span class=\"p\">.</span><span class=\"nf\">hopcroft_karp_matching</span><span class=\"p\">(</span><span class=\"n\">bipartite_subgraph</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Derive the vertex cover from the maximum matching\n</span>            <span class=\"n\">component_vertex_cover</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"p\">.</span><span class=\"n\">bipartite</span><span class=\"p\">.</span><span class=\"nf\">to_vertex_cover</span><span class=\"p\">(</span><span class=\"n\">bipartite_subgraph</span><span class=\"p\">,</span> <span class=\"n\">maximum_matching</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Add nodes not in the vertex cover to the independent set\n</span>            <span class=\"n\">independent_set</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">bipartite_subgraph</span><span class=\"p\">.</span><span class=\"nf\">nodes</span><span class=\"p\">())</span> <span class=\"o\">-</span> <span class=\"n\">component_vertex_cover</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">independent_set</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_independent_set</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">independent_set</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">\n        Verifies if a given set of vertices is a valid Independent Set for the graph.\n\n        Args:\n            graph (nx.Graph): The input graph.\n            independent_set (set): A set of vertices to check.\n\n        Returns:\n            bool: True if the set is a valid Independent Set, False otherwise.\n        </span><span class=\"sh\">\"\"\"</span>\n        <span class=\"c1\"># Check if any edge has both endpoints in the independent set\n</span>        <span class=\"k\">for</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">graph</span><span class=\"p\">.</span><span class=\"nf\">edges</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">u</span> <span class=\"ow\">in</span> <span class=\"n\">independent_set</span> <span class=\"ow\">and</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">independent_set</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">False</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n    <span class=\"c1\"># Validate input is a NetworkX graph\n</span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">.</span><span class=\"n\">Graph</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Input must be an undirected NetworkX Graph.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Handle trivial cases\n</span>    <span class=\"k\">if</span> <span class=\"n\">graph</span><span class=\"p\">.</span><span class=\"nf\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">graph</span><span class=\"p\">.</span><span class=\"nf\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nf\">set</span><span class=\"p\">()</span>  <span class=\"c1\"># Empty graph or no edges means empty Independent Set\n</span>\n    <span class=\"c1\"># Create a working copy of the graph to avoid modifying the original\n</span>    <span class=\"n\">working_graph</span> <span class=\"o\">=</span> <span class=\"n\">graph</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Clean the graph: remove self-loops since they're not valid in a simple graph\n</span>    <span class=\"n\">working_graph</span><span class=\"p\">.</span><span class=\"nf\">remove_edges_from</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">.</span><span class=\"nf\">selfloop_edges</span><span class=\"p\">(</span><span class=\"n\">working_graph</span><span class=\"p\">)))</span>\n\n    <span class=\"c1\"># Initialize the isolates set with nodes of degree 0\n</span>    <span class=\"n\">isolates</span> <span class=\"o\">=</span> <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">.</span><span class=\"nf\">isolates</span><span class=\"p\">(</span><span class=\"n\">working_graph</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Remove isolated nodes from the working graph\n</span>    <span class=\"n\">working_graph</span><span class=\"p\">.</span><span class=\"nf\">remove_nodes_from</span><span class=\"p\">(</span><span class=\"n\">isolates</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># If the cleaned graph is empty, return the set of isolated nodes\n</span>    <span class=\"k\">if</span> <span class=\"n\">working_graph</span><span class=\"p\">.</span><span class=\"nf\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">isolates</span>\n\n    <span class=\"c1\"># Check if the working graph is bipartite\n</span>    <span class=\"k\">if</span> <span class=\"n\">nx</span><span class=\"p\">.</span><span class=\"n\">bipartite</span><span class=\"p\">.</span><span class=\"nf\">is_bipartite</span><span class=\"p\">(</span><span class=\"n\">working_graph</span><span class=\"p\">):</span>\n        <span class=\"c1\"># If bipartite, compute the independent set directly\n</span>        <span class=\"n\">approximate_independent_set</span> <span class=\"o\">=</span> <span class=\"nf\">iset_bipartite</span><span class=\"p\">(</span><span class=\"n\">working_graph</span><span class=\"p\">)</span>\n\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Start with all nodes as a candidate independent set\n</span>        <span class=\"n\">approximate_independent_set</span> <span class=\"o\">=</span> <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">working_graph</span><span class=\"p\">.</span><span class=\"nf\">nodes</span><span class=\"p\">())</span>\n        <span class=\"c1\"># Iteratively refine the set until it is a valid independent set\n</span>        <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"nf\">is_independent_set</span><span class=\"p\">(</span><span class=\"n\">working_graph</span><span class=\"p\">,</span> <span class=\"n\">approximate_independent_set</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Create a maximum spanning tree from the current candidate set\n</span>            <span class=\"n\">bipartite_graph</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"p\">.</span><span class=\"nf\">maximum_spanning_tree</span><span class=\"p\">(</span><span class=\"n\">working_graph</span><span class=\"p\">.</span><span class=\"nf\">subgraph</span><span class=\"p\">(</span><span class=\"n\">approximate_independent_set</span><span class=\"p\">))</span>\n            <span class=\"c1\"># Compute an independent set for the spanning tree\n</span>            <span class=\"n\">approximate_independent_set</span> <span class=\"o\">=</span> <span class=\"nf\">iset_bipartite</span><span class=\"p\">(</span><span class=\"n\">bipartite_graph</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Greedily add nodes to maximize the independent set\n</span>        <span class=\"k\">for</span> <span class=\"n\">u</span> <span class=\"ow\">in</span> <span class=\"n\">working_graph</span><span class=\"p\">.</span><span class=\"nf\">nodes</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"nf\">is_independent_set</span><span class=\"p\">(</span><span class=\"n\">working_graph</span><span class=\"p\">,</span> <span class=\"n\">approximate_independent_set</span><span class=\"p\">.</span><span class=\"nf\">union</span><span class=\"p\">({</span><span class=\"n\">u</span><span class=\"p\">})):</span>\n                <span class=\"n\">approximate_independent_set</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Include isolated nodes in the final independent set\n</span>    <span class=\"n\">approximate_independent_set</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">isolates</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">approximate_independent_set</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Algorithm Steps\n</h3>\n\n<ol>\n<li>\n<strong>Input Validation</strong>: Checks if the input is a valid NetworkX graph and handles trivial cases (empty graph or no edges).</li>\n<li>\n<strong>Preprocessing</strong>: Removes self-loops and isolated nodes, storing isolates for the final set.</li>\n<li>\n<strong>Bipartite Case</strong>: If the graph is bipartite, computes the maximum independent set using Hopcroft-Karp matching and K√∂nig‚Äôs theorem.</li>\n<li>\n<strong>Non-Bipartite Case</strong>:\n\n<ul>\n<li>Starts with all vertices as the candidate set.</li>\n<li>Iteratively constructs a maximum spanning tree of the subgraph induced by the current set, computes its maximum independent set, and updates the candidate set until it is independent in the original graph.</li>\n</ul>\n</li>\n<li>\n<strong>Greedy Extension</strong>: Adds vertices greedily to ensure the output is a maximal independent set.</li>\n<li>\n<strong>Output</strong>: Returns the independent set, including isolated nodes.</li>\n</ol>\n\n<h2>\n  \n  \n  Why It Has a ‚àön-Approximation Ratio\n</h2>\n\n<p>The algorithm achieves a ‚àön-approximation ratio, meaning the size of the independent set it produces, |S|, satisfies |S| ‚â• OPT / ‚àön, or equivalently, OPT / |S| ‚â§ ‚àön, where OPT is the size of the maximum independent set and n is the number of vertices.</p>\n\n<h3>\n  \n  \n  Analysis\n</h3>\n\n<ul>\n<li>\n<strong>Mechanism</strong>: The algorithm iteratively refines a candidate set by constructing a maximum spanning tree (bipartite) and selecting its maximum independent set, which is at least ‚åà|S_k| / 2‚åâ for a set S_k. The loop stops when the set is independent in G, and the greedy step ensures maximality.</li>\n<li>\n<strong>Worst-Case Graph</strong>:\n\n<ul>\n<li>\n<strong>Structure</strong>: A clique C of size n - ‚àön + 1, an independent set I of size ‚àön - 1, with all vertices in I adjacent to all in C.</li>\n<li>\n<strong>OPT</strong>: The maximum independent set is I, so OPT = ‚àön - 1 ‚âà ‚àön, as including a vertex from C excludes all of I.</li>\n<li>\n<strong>Algorithm Behavior</strong>:</li>\n<li>Starts with S_0 = V, |S_0| = n.</li>\n<li>Iterations may select a star tree centered in C, reducing the set size by 1 per iteration (e.g., S_1 = V \\ {center}, |S_1| = n - 1).</li>\n<li>Continues until possibly |S| = 1 (a single vertex in C), as the greedy step adds no vertices due to high connectivity.</li>\n<li>Ratio: OPT / |S| = (‚àön - 1) / 1 ‚âà ‚àön.</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<strong>Tightness</strong>: This graph demonstrates the ratio reaches ‚âà ‚àön in the worst case. In bipartite graphs, the algorithm finds OPT exactly, but the worst-case ratio is ‚àön.</li>\n\n</ul>\n\n<h3>\n  \n  \n  Intuition\n</h3>\n\n<p>The ‚àön ratio occurs because, in dense graphs with large cliques, the algorithm may reduce the candidate set to a small size (e.g., 1) before achieving independence, and the greedy step cannot recover a large set due to the clique‚Äôs connectivity.</p>\n\n<h2>\n  \n  \n  Runtime Analysis\n</h2>\n\n<p>With the optimized <code>is_independent_set</code> running in O(m), we analyze the time complexity, where n = |V| and m = |E|.</p>\n\n<ul>\n<li>\n<strong>Input Validation</strong>: O(1).</li>\n<li>\n<strong>Preprocessing</strong>:\n\n<ul>\n<li>Graph copy: O(n + m).</li>\n<li>Self-loop removal: O(m).</li>\n<li>Isolated nodes: O(n).</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<strong>Bipartite Check</strong>: O(n + m).</li>\n\n<li>\n\n<strong>Bipartite Case</strong>:\n\n<ul>\n<li>\n<code>iset_bipartite</code>:</li>\n<li>Connected components: O(n + m).</li>\n<li>Per component (total n vertices, m edges):\n\n<ul>\n<li>Subgraph extraction: O(n + m).</li>\n<li>Hopcroft-Karp matching: O(‚àön ¬∑ m).</li>\n<li>Vertex cover: O(n).</li>\n</ul>\n\n\n</li>\n\n<li>Total: O(n + m + ‚àön ¬∑ m).</li>\n\n</ul>\n\n</li>\n\n<li>\n\n<strong>Non-Bipartite Case</strong>:\n\n<ul>\n<li>\n<strong>While Loop</strong>:</li>\n<li>\n<code>is_independent_set</code>: O(m) per call, checking edges.</li>\n<li>Maximum spanning tree: O(m log n) via Kruskal‚Äôs algorithm.</li>\n<li>\n<code>iset_bipartite</code> on tree: O(n), as tree has &lt; n edges.</li>\n<li>Iterations: Up to O(n) in worst case (reducing by 1 per iteration).</li>\n<li>Total: O(n ¬∑ (m + m log n + n)) = O(n m log n).</li>\n<li>\n<strong>Greedy Extension</strong>: O(n ¬∑ m), as each of n vertices requires an O(m) check.</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<strong>Overall</strong>: Dominated by non-bipartite case, O(n m log n). For dense graphs (m ‚âà n¬≤), this is O(n¬≥ log n).</li>\n\n</ul>\n\n<h3>\n  \n  \n  Summary\n</h3>\n\n<ul>\n<li>\n<strong>Time Complexity</strong>: O(n m log n).</li>\n<li>\n<strong>Space Complexity</strong>: O(n + m) for graph and set storage.</li>\n</ul>\n\n<h2>\n  \n  \n  Impact of the Algorithm\n</h2>\n\n<h3>\n  \n  \n  Strengths\n</h3>\n\n<ul>\n<li>\n<strong>Theoretical Breakthrough</strong>: This algorithm provides a strong evidence that P = NP.</li>\n<li>\n<strong>Versatility</strong>: Optimal for bipartite graphs and handles general graphs with a guaranteed maximal independent set.</li>\n<li>\n<strong>Practicality</strong>: Suitable for small-to-medium graphs in applications like scheduling or network partitioning.</li>\n</ul>\n\n<h3>\n  \n  \n  Limitations\n</h3>\n\n<ul>\n<li>\n<strong>Approximation Ratio</strong>: The ‚àön ratio is weak for large n (e.g., |S| = 1 when OPT = ‚àön). Algorithms like greedy minimum-degree selection achieve O(n / log n).</li>\n<li>\n<strong>Runtime</strong>: O(n m log n) is still costly for dense graphs (O(n¬≥ log n)). Faster heuristics exist for large-scale problems.</li>\n<li>\n<strong>Worst-Case Performance</strong>: Poor on graphs with large cliques connected to independent sets.</li>\n</ul>\n\n<h3>\n  \n  \n  Practical Impact\n</h3>\n\n<ul>\n<li>\n<strong>Deployment</strong>: The tool is deployed via <code>furones</code> (available on <a href=\"https://pypi.org/project/furones/\" rel=\"noopener noreferrer\">PyPI</a>), making it readily accessible for real-world applications.</li>\n<li>\n<strong>Applications</strong>: Useful for quick approximations in scheduling, resource allocation, or network design where exact solutions are infeasible.</li>\n<li>\n<strong>Scalability</strong>: Better suited for sparse graphs due to the m factor in the runtime. Dense graphs require faster alternatives.</li>\n<li>\n<strong>Research</strong>: Serves as a teaching tool for approximation algorithms, illustrating trade-offs between simplicity and performance.</li>\n</ul>\n\n<h3>\n  \n  \n  Future Improvements\n</h3>\n\n<ul>\n<li>\n<strong>Tree Selection</strong>: Heuristics for better spanning trees could reduce iterations.</li>\n<li>\n<strong>Hybrid Methods</strong>: Combine with greedy or local search algorithms for better ratios.</li>\n<li>\n<strong>Parallelization</strong>: Leverage parallel edge checks in <code>is_independent_set</code> for further speedup.</li>\n</ul>\n\n<p>This algorithm, with the optimized subroutine, balances simplicity and improved runtime, but its ‚àön-approximation ratio limits its use in applications requiring near-optimal solutions.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"tkinter messagebox","url":"https://dev.to/vova_dev/tkinter-messagebox-5b4m","date":1751019732,"author":"Usmanbek-Vladimir Ahtirskiy","guid":173618,"unread":true,"content":"<p>from tkinter import *<br>\nfrom tkinter import ttk<br>\nfrom tkinter.messagebox import showerror, showwarning, showinfo</p>\n\n<p>root = Tk()<br>\nroot.title(\"METANIT.COM\")<br>\nroot.geometry(\"250x200\")</p>\n\n<p>def open_info(): <br>\n    showinfo(title=\"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\", message=\"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\")</p>\n\n<p>def open_warning(): <br>\n    showwarning(title=\"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\", message=\"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏\")</p>\n\n<p>def open_error(): <br>\n    showerror(title=\"–û—à–∏–±–∫–∞\", message=\"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ\")</p>\n\n<p>info_button = ttk.Button(text=\"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\", command=open_info)<br>\ninfo_button.pack(anchor=\"center\", expand=1)</p>\n\n<p>warning_button = ttk.Button(text=\"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\", command=open_warning)<br>\nwarning_button.pack(anchor=\"center\", expand=1)</p>\n\n<p>error_button = ttk.Button(text=\"–û—à–∏–±–∫–∞\", command=open_error)<br>\nerror_button.pack(anchor=\"center\", expand=1)</p>\n\n<p>root.mainloop()</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Luke Plant: Statically checking Python dicts for completeness","url":"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/","date":1751018943,"author":"","guid":173706,"unread":true,"content":"<p>In Python, I often have the situation where I create a dictionary, and want to ensure that it is  ‚Äì it has an entry for every valid key.</p><p>Let‚Äôs say for my (currently hypothetical) automatic squirrel-deterring water gun system, I have a number of different states the water tank can be in, defined using an enum:</p><div><pre><a name=\"rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-1\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-1\"></a><a name=\"rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-2\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-2\"></a><a name=\"rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-3\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-3\"></a><a name=\"rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-4\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-4\"></a><a name=\"rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-5\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-5\"></a><a name=\"rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-6\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-6\"></a><a name=\"rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-7\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_7b829c9cd46d473ca46a199d6f9f1ef5-7\"></a></pre></div><p>In a separate bit of code, I define an RGB colour for each of these states, using a simple dict.</p><div><pre><a name=\"rest_code_d4934103a1b846d9b6061713275bbd4d-1\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_d4934103a1b846d9b6061713275bbd4d-1\"></a><a name=\"rest_code_d4934103a1b846d9b6061713275bbd4d-2\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_d4934103a1b846d9b6061713275bbd4d-2\"></a><a name=\"rest_code_d4934103a1b846d9b6061713275bbd4d-3\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_d4934103a1b846d9b6061713275bbd4d-3\"></a><a name=\"rest_code_d4934103a1b846d9b6061713275bbd4d-4\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_d4934103a1b846d9b6061713275bbd4d-4\"></a><a name=\"rest_code_d4934103a1b846d9b6061713275bbd4d-5\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_d4934103a1b846d9b6061713275bbd4d-5\"></a><a name=\"rest_code_d4934103a1b846d9b6061713275bbd4d-6\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_d4934103a1b846d9b6061713275bbd4d-6\"></a></pre></div><p>This is deliberately distinct from my  code and related definitions, because it relates to a different part of the project - the user interface. The UI concerns shouldn‚Äôt be mixed up with the core logic.</p><p>This dict is fine, and currently complete. But I‚Äôd like to ensure that if I add a new item to , I don‚Äôt forget to update the  dict.</p><p>But the better question is ‚Äúhow can we (somehow) ensure we don‚Äôt forget?‚Äù It doesn‚Äôt have to be a static type check, as long as it‚Äôs very hard to forget, and if it preferably runs as early as possible.</p><p>Instead of shoe-horning everything into static type checks, let‚Äôs just make use of the fact that this is Python and we can write any code we want at module level. All we need to do is this:</p><div><pre><a name=\"rest_code_d60bd58451b34f7eaeabe5511a60b6f3-1\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_d60bd58451b34f7eaeabe5511a60b6f3-1\"></a><a name=\"rest_code_d60bd58451b34f7eaeabe5511a60b6f3-2\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_d60bd58451b34f7eaeabe5511a60b6f3-2\"></a><a name=\"rest_code_d60bd58451b34f7eaeabe5511a60b6f3-3\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_d60bd58451b34f7eaeabe5511a60b6f3-3\"></a><a name=\"rest_code_d60bd58451b34f7eaeabe5511a60b6f3-4\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_d60bd58451b34f7eaeabe5511a60b6f3-4\"></a><a name=\"rest_code_d60bd58451b34f7eaeabe5511a60b6f3-5\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_d60bd58451b34f7eaeabe5511a60b6f3-5\"></a></pre></div><p>That‚Äôs it, that‚Äôs the whole technique. I‚Äôd argue that this is a pretty much optimal, Pythonic solution to the problem. No clever type tricks to debug later, just 2 lines of plain simple code, and it‚Äôs impossible to import your code until you fix the problem, which means you get the early checking you want.\nPlus you get <strong>exactly the error message you want</strong>, not some obscure compiler output, which is also really important.</p><p>It can also be extended if you want to do something more fancy (e.g. allow some values of the enum to be missing), and if it does get in your way, you can turn it off temporarily by just commenting out a couple of lines.</p><p>OK, in a project where I‚Äôm using this , I did eventually get bored of this small bit of boilerplate. So, as a Pythonic extension of this Pythonic solution, I now do this:</p><div><pre><a name=\"rest_code_1f7b60c1b14e486e818219efbcba9298-1\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_1f7b60c1b14e486e818219efbcba9298-1\"></a><a name=\"rest_code_1f7b60c1b14e486e818219efbcba9298-2\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_1f7b60c1b14e486e818219efbcba9298-2\"></a><a name=\"rest_code_1f7b60c1b14e486e818219efbcba9298-3\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_1f7b60c1b14e486e818219efbcba9298-3\"></a><a name=\"rest_code_1f7b60c1b14e486e818219efbcba9298-4\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_1f7b60c1b14e486e818219efbcba9298-4\"></a><a name=\"rest_code_1f7b60c1b14e486e818219efbcba9298-5\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_1f7b60c1b14e486e818219efbcba9298-5\"></a><a name=\"rest_code_1f7b60c1b14e486e818219efbcba9298-6\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_1f7b60c1b14e486e818219efbcba9298-6\"></a><a name=\"rest_code_1f7b60c1b14e486e818219efbcba9298-7\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_1f7b60c1b14e486e818219efbcba9298-7\"></a></pre></div><p>Specifically, I‚Äôm adding:</p><ul><li><p>a type hint on the constant</p></li><li><p>a call to a clever utility function that does just the right amount of Python magic.</p></li></ul><p>This function needs to be ‚Äúmagical‚Äù because we want it to produce good error messages, like we had before. This means it needs to get hold of the name of the dict in the calling module, but functions don‚Äôt usually have access to that.</p><p>In addition, it wants to get hold of the type hint (although there would be other ways to infer it without a type hint, there are advantages this way), for which we also need the name.</p><p>The specific magic we need is:</p><ul><li><p>the clever function needs to get hold of the module that </p></li><li><p>it then looks through the module dictionary to get the name of the object that has been passed in</p></li><li><p>then it can find type hints, and do the checking.</p></li></ul><p>So, because you don‚Äôt want to write all that yourself, the code is below. It also supports:</p><ul><li><p>having a tuple of  types as the key</p></li><li><p>allowing some items to be missing</p></li><li><p>using  as the key. So you can do things like this:</p><div><pre><a name=\"rest_code_743d7ec75dbf4233b54b496c4e11f083-1\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_743d7ec75dbf4233b54b496c4e11f083-1\"></a><a name=\"rest_code_743d7ec75dbf4233b54b496c4e11f083-2\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_743d7ec75dbf4233b54b496c4e11f083-2\"></a><a name=\"rest_code_743d7ec75dbf4233b54b496c4e11f083-3\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_743d7ec75dbf4233b54b496c4e11f083-3\"></a><a name=\"rest_code_743d7ec75dbf4233b54b496c4e11f083-4\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_743d7ec75dbf4233b54b496c4e11f083-4\"></a><a name=\"rest_code_743d7ec75dbf4233b54b496c4e11f083-5\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_743d7ec75dbf4233b54b496c4e11f083-5\"></a><a name=\"rest_code_743d7ec75dbf4233b54b496c4e11f083-6\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_743d7ec75dbf4233b54b496c4e11f083-6\"></a></pre></div></li></ul><p>It‚Äôs got a ton of error checking, because once you get magical then you really don‚Äôt want to be debugging obscure messages.</p><div><pre><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-1\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-1\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-2\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-2\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-3\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-3\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-4\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-4\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-5\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-5\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-6\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-6\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-7\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-7\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-8\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-8\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-9\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-9\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-10\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-10\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-11\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-11\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-12\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-12\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-13\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-13\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-14\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-14\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-15\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-15\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-16\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-16\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-17\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-17\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-18\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-18\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-19\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-19\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-20\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-20\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-21\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-21\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-22\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-22\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-23\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-23\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-24\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-24\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-25\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-25\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-26\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-26\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-27\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-27\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-28\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-28\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-29\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-29\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-30\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-30\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-31\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-31\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-32\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-32\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-33\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-33\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-34\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-34\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-35\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-35\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-36\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-36\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-37\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-37\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-38\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-38\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-39\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-39\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-40\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-40\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-41\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-41\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-42\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-42\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-43\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-43\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-44\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-44\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-45\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-45\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-46\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-46\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-47\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-47\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-48\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-48\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-49\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-49\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-50\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-50\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-51\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-51\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-52\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-52\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-53\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-53\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-54\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-54\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-55\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-55\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-56\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-56\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-57\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-57\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-58\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-58\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-59\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-59\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-60\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-60\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-61\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-61\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-62\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-62\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-63\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-63\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-64\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-64\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-65\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-65\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-66\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-66\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-67\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-67\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-68\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-68\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-69\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-69\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-70\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-70\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-71\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-71\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-72\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-72\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-73\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-73\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-74\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-74\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-75\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-75\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-76\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-76\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-77\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-77\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-78\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-78\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-79\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-79\"></a><a name=\"rest_code_64505b1072684f84b9dc801407e0d02b-80\" href=\"https://lukeplant.me.uk/blog/posts/statically-checking-python-dicts-for-completeness/#rest_code_64505b1072684f84b9dc801407e0d02b-80\"></a></pre></div>","contentLength":3106,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"pac-man with python, pygame","url":"https://dev.to/vova_dev/pac-man-with-python-pygame-14e5","date":1751015615,"author":"Usmanbek-Vladimir Ahtirskiy","guid":173566,"unread":true,"content":"<p>from random import choice<br>\nfrom turtle import *</p>\n\n<p>from freegames import floor, vector</p>\n\n<p>state = {'score': 0}<br>\npath = Turtle(visible=False)<br>\nwriter = Turtle(visible=False)<br>\naim = vector(5, 0)<br>\npacman = vector(-40, -80)<br>\nghosts = [<br>\n    [vector(-180, 160), vector(5, 0)],<br>\n    [vector(-180, -160), vector(0, 5)],<br>\n    [vector(100, 160), vector(0, -5)],<br>\n    [vector(100, -160), vector(-5, 0)],<br>\n]</p>\n\n<h1>\n  \n  \n  fmt: off\n</h1>\n\n<p>tiles = [<br>\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,<br>\n    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,<br>\n    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,<br>\n    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,<br>\n    0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,<br>\n    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,<br>\n    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,<br>\n    0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,<br>\n    0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,<br>\n    0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,<br>\n    0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,<br>\n    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,<br>\n    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,<br>\n    0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0,<br>\n    0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,<br>\n    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,<br>\n    0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,<br>\n    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,<br>\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,<br>\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,<br>\n]</p>\n\n<h1>\n  \n  \n  fmt: on\n</h1>\n\n<p>def square(x, y):<br>\n    \"\"\"Draw square using path at (x, y).\"\"\"<br>\n    path.up()<br>\n    path.goto(x, y)<br>\n    path.down()<br>\n    path.begin_fill()</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>for count in range(4):\n    path.forward(20)\n    path.left(90)\n\npath.end_fill()\n</code></pre>\n\n</div>\n\n<p>def offset(point):<br>\n    \"\"\"Return offset of point in tiles.\"\"\"<br>\n    x = (floor(point.x, 20) + 200) / 20<br>\n    y = (180 - floor(point.y, 20)) / 20<br>\n    index = int(x + y * 20)<br>\n    return index</p>\n\n<p>def valid(point):<br>\n    \"\"\"Return True if point is valid in tiles.\"\"\"<br>\n    index = offset(point)</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>if tiles[index] == 0:\n    return False\n\nindex = offset(point + 19)\n\nif tiles[index] == 0:\n    return False\n\nreturn point.x % 20 == 0 or point.y % 20 == 0\n</code></pre>\n\n</div>\n\n<p>def world():<br>\n    \"\"\"Draw world using path.\"\"\"<br>\n    bgcolor('black')<br>\n    path.color('blue')</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>for index in range(len(tiles)):\n    tile = tiles[index]\n\n    if tile &gt; 0:\n        x = (index % 20) * 20 - 200\n        y = 180 - (index // 20) * 20\n        square(x, y)\n\n        if tile == 1:\n            path.up()\n            path.goto(x + 10, y + 10)\n            path.dot(2, 'white')\n</code></pre>\n\n</div>\n\n<p>def move():<br>\n    \"\"\"Move pacman and all ghosts.\"\"\"<br>\n    writer.undo()<br>\n    writer.write(state['score'])</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>clear()\n\nif valid(pacman + aim):\n    pacman.move(aim)\n\nindex = offset(pacman)\n\nif tiles[index] == 1:\n    tiles[index] = 2\n    state['score'] += 1\n    x = (index % 20) * 20 - 200\n    y = 180 - (index // 20) * 20\n    square(x, y)\n\nup()\ngoto(pacman.x + 10, pacman.y + 10)\ndot(20, 'yellow')\n\nfor point, course in ghosts:\n    if valid(point + course):\n        point.move(course)\n    else:\n        options = [\n            vector(5, 0),\n            vector(-5, 0),\n            vector(0, 5),\n            vector(0, -5),\n        ]\n        plan = choice(options)\n        course.x = plan.x\n        course.y = plan.y\n\n    up()\n    goto(point.x + 10, point.y + 10)\n    dot(20, 'red')\n\nupdate()\n\nfor point, course in ghosts:\n    if abs(pacman - point) &lt; 20:\n        return\n\nontimer(move, 100)\n</code></pre>\n\n</div>\n\n<p>def change(x, y):<br>\n    \"\"\"Change pacman aim if valid.\"\"\"<br>\n    if valid(pacman + vector(x, y)):<br>\n        aim.x = x<br>\n        aim.y = y</p>\n\n<p>setup(420, 420, 370, 0)<br>\nhideturtle()<br>\ntracer(False)<br>\nwriter.goto(160, 160)<br>\nwriter.color('white')<br>\nwriter.write(state['score'])<br>\nlisten()<br>\nonkey(lambda: change(5, 0), 'Right')<br>\nonkey(lambda: change(-5, 0), 'Left')<br>\nonkey(lambda: change(0, 5), 'Up')<br>\nonkey(lambda: change(0, -5), 'Down')<br>\nworld()<br>\nmove()<br>\ndone()</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Data Types","url":"https://dev.to/almasiy/python-data-types-53ii","date":1751015273,"author":"almasi-y","guid":173565,"unread":true,"content":"<h2>\n  \n  \n  <strong>PYTHON DATA TYPESüòÑ</strong>\n</h2>\n\n<p><strong>Types of data types</strong></p>\n\n<p>1Ô∏è‚É£ <strong>Numeric data types</strong><br>\n  int</p>\n\n<ul>\n<li>An integer, is a whole number, positive or negative, without decimals, of unlimited length.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code> <span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>float</p>\n\n<ul>\n<li>A float is a number, positive or negative, containing one or more decimals.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code> <span class=\"n\">my_float</span> <span class=\"o\">=</span> <span class=\"mf\">20.5</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>complex</p>\n\n<ul>\n<li>A complex is a number made up of some parts that are unknown\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code> <span class=\"n\">my_complex</span> <span class=\"o\">=</span> <span class=\"mf\">1j</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_complex</span><span class=\"p\">)</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">my_complex</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>2Ô∏è‚É£ <strong>Sequence Types</strong><br>\n  lists</p>\n\n<ul>\n<li>Lists are used to store multiple items in a single variable.</li>\n<li>Take note of the square brackets</li>\n<li>Unlike a set, a list can allow duplicate values</li>\n<li>They can contain different data types\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code> <span class=\"n\">fruits</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">apple</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">banana</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">cherry</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">fruits</span><span class=\"p\">)</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">fruits</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>tuple</p>\n\n<ul>\n<li>Tuples are used to store multiple items in a single variable.</li>\n<li>Take note of the round brackets</li>\n<li>Unlike lists, tuples are unchangeable. </li>\n<li>Allows duplicate members.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code> <span class=\"n\">cars</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">toyota</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">porsche</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">mercedes</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">cars</span><span class=\"p\">)</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">cars</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>range</p>\n\n<ul>\n<li>A range is a sequence of numbers starting from 0 by default and increments by one\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code> <span class=\"n\">my_range</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_range</span><span class=\"p\">)</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">my_range</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>3Ô∏è‚É£ <strong>Mapping types</strong><br><br>\n dict</p>\n\n<ul>\n<li>Dictionaries are used to store data values in key:value pairs.</li>\n<li>Dictionaries are ordered and changeable</li>\n<li>Like sets they do not allow duplication of items\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code> <span class=\"n\">my_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span> <span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">John</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">age</span><span class=\"sh\">\"</span> <span class=\"p\">:</span> <span class=\"mi\">36</span><span class=\"p\">}</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_dict</span><span class=\"p\">)</span>\n <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">my_dict</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>4Ô∏è‚É£ <strong>Set types</strong><br>\n  set</p>\n\n<ul>\n<li>Sets are used to store multiple items in a single variable.</li>\n<li>Sets are unindexed, unordered and unchangeable however you can add or remove items from a set</li>\n<li>Sets also do not allow duplicates</li>\n<li>Take note of the curly braces\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">my_set</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">gold</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">silver</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">titanium</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_set</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">my_set</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>frozen set</p>\n\n<ul>\n<li>Similar to a set but completely immutable; you cannot add or remove items\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">my_frozenset</span> <span class=\"o\">=</span> <span class=\"nf\">frozenset</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">apple</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">banana</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">cherry</span><span class=\"sh\">\"</span><span class=\"p\">})</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_frozenset</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">my_frozenset</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>5Ô∏è‚É£ <strong>Boolean types</strong><br>\n  boolean</p>\n\n<ul>\n<li>A boolean is a value that can be true or false\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">my_bool</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_bool</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">my_bool</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>6Ô∏è‚É£ Binary types<br>\n  bytes</p>\n\n<ul>\n<li> Bytes represent an immutable sequence of 8-bit values\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">\"</span><span class=\"s\">Hello</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>bytesarray</p>\n\n<ul>\n<li>Bytesarray represents a mutable sequence of 8-bit values.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">my_bytearray</span> <span class=\"o\">=</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_bytearray</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">my_bytearray</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>memoryview</p>\n\n<ul>\n<li> A memoryview object provides a view into the memory of a bytes-like object (like bytes or bytearray) without copying the underlying data.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">my_memoryviews</span> <span class=\"o\">=</span> <span class=\"nf\">memoryview</span><span class=\"p\">(</span><span class=\"nf\">bytes</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_memoryviews</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">my_memoryviews</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>7Ô∏è‚É£ <strong>None types</strong><br>\n  NoneTypes</p>\n\n<ul>\n<li>This is simply a data type that represents an absence of value\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n<p>8Ô∏è‚É£ <strong>Text types</strong><br>\n  string</p>\n\n<ul>\n<li>A string is a collection of characters\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">greetings</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Hello World</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">greetings</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">greetings</span><span class=\"p\">))</span> \n</code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PyPodcats: Episode 9: With Tamara Atanasoska","url":"https://pypodcats.live/episodes/ep-9/","date":1751014800,"author":"","guid":173607,"unread":true,"content":"Learn about Tamara's journey. Tamara has been contributing to open source projects since 2012. She participated in Google Summer of Code to contribute to projects like Gnome and e-cidadania.Learn about Tamara's journey. Tamara has been contributing to open source projects since 2012. She participated in Google Summer of Code to contribute to projects like Gnome and e-cidadania.<p>We interviewed Tamara Atanasoska.</p><p>Tamara has been contributing to open source projects since 2012. She participated in Google Summer of Code to\ncontribute to projects like Gnome and e-cidadania.</p><p>She is now a maintainer of Fairlearn, an open-source, community-driven project to help data scientists improve fairness\nof AI systems.</p><p>Hear how Django helps her feel empowered, and how the PyLadies Berlin community has helped her feel welcomed as a new\nimmigrant in Germany.</p><p>In this episode, Tamara shares perspective about open source contributions, maintain, mentorship, and her experience\nin running beginner-friendly sprints.</p><p>Be sure to listen to the episode to learn all about Tamara‚Äôs inspiring story!</p><ul><li>Her role as an open source maintainer for Fairlearn</li><li>What is Fairlearn and discussion about fairness in AI</li><li>The challenges in getting feedback from the users about the Fairlearn project</li><li>How she get started with Python and Django</li><li>Her political participation that led her to contributing to civic engagement open source project during Google Summer of Code</li><li>How Django helps her feel empowered</li><li>Her experience with hacker spaces</li><li>How the Python and PyLadies Berlin community helps her feel welcomed as a new immigrant in Berlin</li><li>How she gives back to the community by speaking, mentoring, and leading sprints</li><li>How she approaches mentorship, and why it is part of her core values.</li><li>Her ideas about leading beginner-friendly sprints</li></ul><div><div><p>This episode was recorded in March 2025.\nTamara is still a software engineer, but no longer works at probabl.</p></div></div>","contentLength":1898,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Uber Eats Reviews in Singapore | What Impacts Customer Retention","url":"https://dev.to/datazivot1/uber-eats-reviews-in-singapore-what-impacts-customer-retention-2016","date":1751013774,"author":"DataZivot","guid":173536,"unread":true,"content":"<h2>\n  \n  \n  Singapore‚Äôs Uber Eats Reviews: What Influences Customer Retention?\n</h2>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fvi5l73bbaj7f1ow80qu5.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fvi5l73bbaj7f1ow80qu5.jpg\" alt=\"Image description\" width=\"800\" height=\"512\"></a><br>\nIntroduction<br>\nIn Singapore‚Äôs Food Delivery Race, Reviews Decide Loyalty :</p>\n\n<p>With a dense urban population, digitally savvy users, and intense competition from GrabFood, Foodpanda, and Deliveroo‚ÄîUber Eats (rebranded in parts of Southeast Asia but still referenced by users) remains a strong signal for consumer feedback in the region.</p>\n\n<p>For brands, cloud kitchens, and QSR chains in Singapore, customer retention isn‚Äôt just about price or convenience‚Äîit‚Äôs about consistent satisfaction. And where is that satisfaction‚Äîor dissatisfaction‚Äîloudest?</p>\n\n<p><strong>Uber Eats reviews</strong></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fbxktn82elley1enp7kc1.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fbxktn82elley1enp7kc1.jpg\" alt=\"Image description\" width=\"800\" height=\"455\"></a><br>\nAt Datazivot, we mine reviews from Uber Eats (and affiliated delivery platforms in Singapore) to help food brands and restaurants uncover:</p>\n\n<ul>\n<li>Why customers don‚Äôt return</li>\n<li>Which issues repeat in feedback</li>\n<li>What dishes or outlets maintain loyalty</li>\n<li>How operational fixes can improve retention rates</li>\n</ul>\n\n<p>*<em>Why Review Scraping Matters for Retention Analysis<br>\n*</em><br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fe62o5m92ulfpvayq655u.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fe62o5m92ulfpvayq655u.jpg\" alt=\"Image description\" width=\"800\" height=\"455\"></a><br>\nSingapore‚Äôs food delivery customers are vocal, quality-sensitive, and fast to switch platforms.</p>\n\n<p>Google and Yelp reviews show long-term perception, but Uber Eats reviews reflect real-time frustration or delight‚Äîand what triggered it.</p>\n\n<p>Common retention factors found in reviews:</p>\n\n<ul>\n<li>Packaging hygiene</li>\n<li>Timeliness of delivery</li>\n<li>Food freshness &amp; portion size</li>\n<li>Dish consistency across orders</li>\n<li>Accurate order fulfillment</li>\n</ul>\n\n<p>*<em>What Datazivot Extracts from Uber Eats Reviews in Singapore<br>\n*</em><br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F1mfls5yzwz7n2181nc11.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F1mfls5yzwz7n2181nc11.jpg\" alt=\"Image description\" width=\"800\" height=\"219\"></a><br>\n*<em>Sample Data Extracted from Singapore Uber Eats<br>\n*</em><br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fuk7lfx9f4zkznnslkw1j.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fuk7lfx9f4zkznnslkw1j.jpg\" alt=\"Image description\" width=\"800\" height=\"177\"></a><br>\n*<em>Key Findings from Review Mining in Singapore<br>\n*</em><br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frtu7yokqdyz3q4e9b7xb.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frtu7yokqdyz3q4e9b7xb.jpg\" alt=\"Image description\" width=\"800\" height=\"455\"></a></p>\n\n<ol>\n<li><p>Food Temperature Is a Top Loyalty Driver<br>\n‚ÄúCold,‚Äù ‚Äúnot warm,‚Äù and ‚Äústale‚Äù keywords appear in 24% of negative reviews<br>\nHigh return order rate from CBD and Bukit Timah zones due to this issue</p></li>\n<li><p>Dish Consistency Drives Trust<br>\nCustomers switch if orders are frequently inconsistent<br>\n‚ÄúWas great last time, not this time‚Äù is a red flag phrase</p></li>\n<li><p>Portion Size Feedback Ties to Value Perception<br>\n‚ÄúSmall portion for the price‚Äù impacts mid-tier brands<br>\nPremium outlets get leeway if packaging and service impress</p></li>\n<li><p>Repeat Offenders Get Blacklisted<br>\nReviews with phrases like ‚Äúthis happened before‚Äù or ‚Äúnot again‚Äù indicate final churn moments</p></li>\n</ol>\n\n<p>*<em>Use Case<br>\n*</em><br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F263pk3bik0mt0rgwgn4k.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F263pk3bik0mt0rgwgn4k.jpg\" alt=\"Image description\" width=\"800\" height=\"455\"></a><br>\nChain Restaurant Identifies Churn Zones in Singapore :</p>\n\n<p>Use-Case-Chain-Restaurant-Identifies-Churn-Zones-in-Singapore<br>\nClient: YumGo (7-location pan-Asian fusion brand)<br>\nChallenge: Retention rate dropped from 61% to 42% in 3 months</p>\n\n<p>Datazivot Review Analysis:<br>\n10,000+ Uber Eats reviews scraped<br>\n2 outlets in Bugis and Serangoon triggered majority of poor reviews<br>\nRepeated complaints: ‚Äúmissing rice,‚Äù ‚Äúdelivered cold,‚Äù ‚Äútoo spicy‚Äù</p>\n\n<p>Actions Taken:<br>\nAdjusted spice levels for northern outlets<br>\nIntroduced thermal packaging for high-churn dishes<br>\nAdded order-verification checkpoints in kitchens</p>\n\n<p>Results:<br>\nChurn rate dropped by 29%<br>\nMonthly retention returned to 58%<br>\nPositive review mentions for ‚Äúimprovement‚Äù and ‚Äúnow always fresh‚Äù</p>\n\n<p>*<em>Most Common Retention-Impacting Keywords (2025, Singapore)<br>\n*</em><br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftpy86u3qjajvr47m1iig.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftpy86u3qjajvr47m1iig.jpg\" alt=\"Image description\" width=\"800\" height=\"218\"></a></p>\n\n<p>*<em>Why Uber Eats Review Mining Beats Traditional Loyalty Surveys<br>\n*</em><br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fsqbaksq9l9t48rfg3sqd.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fsqbaksq9l9t48rfg3sqd.jpg\" alt=\"Image description\" width=\"800\" height=\"145\"></a></p>\n\n<p>*<em>Datazivot's Retention Intelligence Toolkit<br>\n*</em></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F19pm3mtrdb6ikcr0rjuq.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F19pm3mtrdb6ikcr0rjuq.jpg\" alt=\"Image description\" width=\"800\" height=\"218\"></a></p>\n\n<p>*<em>Competitive Benchmarking Example: CBD Outlets<br>\n*</em><br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9kpxnw1xf7j9khdo225k.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9kpxnw1xf7j9khdo225k.jpg\" alt=\"Image description\" width=\"800\" height=\"145\"></a></p>\n\n<p><strong>Conclusion</strong><br>\nRetention Begins with Reviews :</p>\n\n<p>In Singapore‚Äôs delivery ecosystem, retention isn‚Äôt just about promos‚Äîit‚Äôs about predictability. When customers can count on their food to arrive warm, accurate, and tasty‚Äîthey come back.</p>\n\n<p>Mining reviews from Uber Eats lets brands:</p>\n\n<ul>\n<li>Spot recurring operational issues</li>\n<li>Track sentiment changes across outlets</li>\n<li>Map loyalty down to the dish level</li>\n<li>Fix retention before it becomes revenue loss</li>\n</ul>\n\n<p>Want to Know Why Customers Don‚Äôt Reorder from Your Uber Eats Outlet?</p>\n\n<p>Contact Datazivot for a free churn-risk report powered by real-time Uber Eats reviews in Singapore‚Äîand start rebuilding loyalty today.</p>\n\n<p>Originally published at <a href=\"https://www.datazivot.com/singapore-uber-eats-reviews-customer-retention-factors.php\" rel=\"noopener noreferrer\">https://www.datazivot.com/singapore-uber-eats-reviews-customer-retention-factors.php</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Apple‚Äôs Journey to Dominating the Tech World ‚Äì Innovation, Branding, and Customer Loyalty","url":"https://dev.to/visonaryvoguesmagazine/apples-journey-to-dominating-the-tech-world-innovation-branding-and-customer-loyalty-4c64","date":1751013533,"author":"visionary vogues magazine","guid":173535,"unread":true,"content":"<p>Apple‚Äôs Journey to Dominating the Tech World ‚Äì Innovation, Branding, and Customer Loyalty</p>\n\n<p>Apple Inc. stands as one of the most influential brands globally, known not only for its groundbreaking products like the iPhone, iPad, and <a href=\"https://www.visionaryvogues.com/\" rel=\"noopener noreferrer\">MacBook</a>, but also for its mastery in branding, marketing, and customer loyalty. From its humble beginnings in a garage in Cupertino, California, to becoming the world‚Äôs most valuable company, Apple has revolutionized technology, business, and consumer experiences.<br>\nThis case study delves into the strategies that Apple has utilized over the years to maintain its dominance in the tech industry. It focuses on innovation, branding, customer loyalty, and the unique ecosystem of products and services. We will also examine how Apple continues to evolve and remain relevant in an increasingly competitive market.</p>\n\n<p>Apple‚Äôs Core Strategy: Innovation at Its Heart<br>\nDisrupting the Status Quo<br>\nAt the core of Apple‚Äôs business strategy is its unwavering commitment to innovation. Unlike many of its competitors, Apple has consistently set trends instead of following them. From the personal computer revolution of the 1970s to the smartphone revolution of the 2000s, Apple has been at the forefront of major technological shifts. Co-founder Steve Jobs was a visionary who understood that technology was more than just hardware and software‚Äîit was about creating experiences that captivated consumers.</p>\n\n<p>Personal Computing<br>\nApple‚Äôs first significant product, the Apple I (1976), marked the company‚Äôs entry into the tech world as one of the first personal computers. However, it was the release of the Macintosh in 1984, with its user-friendly graphical interface, that made Apple a household name in personal computing.</p>\n\n<p>The Smartphone Revolution<br>\nThe launch of the iPhone in 2007 was a transformative moment in tech history. Combining a mobile phone, iPod, and internet device into one sleek package, the iPhone fundamentally changed how consumers interacted with technology. Apple‚Äôs seamless blend of hardware, software, and design created an ecosystem that would shape the future of smartphones.</p>\n\n<p>The Apple Ecosystem<br>\nOne of Apple‚Äôs most compelling advantages is its ecosystem of interconnected products and services. By integrating devices such as the iPhone, iPad, Mac, and Apple Watch with services like iCloud, Apple Music, and the App Store, Apple has developed a seamless user experience that encourages customer retention. This ecosystem makes it difficult for customers to leave once they are entrenched in the Apple world.</p>\n\n<p>Branding and Marketing: Cultivating an Iconic Brand Image<br>\nBuilding a Cult Following<br>\nApple‚Äôs marketing strategy is one of the most studied in the business world. The brand has crafted an identity that resonates with consumers on an emotional level. Here are some of the key elements contributing to Apple‚Äôs branding success:</p>\n\n<p>Simplicity and Minimalism<br>\nApple‚Äôs branding is synonymous with simplicity, not only in its products but also in its marketing. The clean design of Apple stores, product packaging, and advertisements all emphasize minimalism, standing in stark contrast to the cluttered and complex designs of many competitors.</p>\n\n<p>Premium Pricing Strategy<br>\nApple has consistently positioned its products as premium, often charging higher prices than competitors for similar hardware. This premium pricing reinforces the brand‚Äôs image of exclusivity and quality. Customers are willing to pay more for the perceived superior experience that comes with owning an Apple product.</p>\n\n<p>‚ÄúThink Different‚Äù Campaign<br>\nThe ‚ÄúThink Different‚Äù campaign was one of Apple‚Äôs most iconic branding efforts. Featuring influential figures like Albert Einstein, Bob Dylan, and Martin Luther King Jr., the campaign cemented Apple‚Äôs identity as a brand for innovators and non-conformists, associating it with creativity, intelligence, and individuality.</p>\n\n<p>Celebrity Endorsements and Product Placement<br>\nApple has effectively utilized celebrity endorsements and product placement to strengthen its brand. From musicians to actors, these endorsements have helped Apple connect with a younger, trend-conscious demographic.</p>\n\n<p>Customer Loyalty: The Apple Cult<br>\nTurning Customers into Lifelong Advocates<br>\nApple‚Äôs unparalleled customer loyalty is one of its greatest achievements. Customers are not just consumers; they become brand advocates who willingly pay a premium for Apple products, queue up overnight for the latest releases, and spread the word. What drives this loyalty?</p>\n\n<p>Emotional Connection<br>\nApple has created an emotional connection with its customers by focusing on user experience. The seamless integration of hardware and software and the intuitive user interface make customers feel as if Apple products are an extension of themselves.</p>\n\n<p>Retail Experience<br>\nApple‚Äôs retail stores are more than just points of purchase; they offer a unique experience. The stores emphasize customer interaction and education, with staff trained to help customers set up and understand their devices. This personalized service fosters a sense of community around the brand.</p>\n\n<p>Brand Evangelism<br>\nApple‚Äôs loyal customers often become brand evangelists, promoting products to friends and family. This word-of-mouth marketing is one of Apple‚Äôs most powerful tools. People trust their Apple-loving peers, creating a cycle of brand advocacy.</p>\n\n<p>After-Sales Support<br>\nApple‚Äôs customer service is renowned, with the Genius Bar in Apple Stores being a prime example. Apple invests heavily in customer support and after-sales service, ensuring customer satisfaction even after the purchase.</p>\n\n<p>Apple‚Äôs Expansion and Adaptation: Navigating a Competitive Market<br>\nMaintaining Dominance in a Crowded Market<br>\nDespite its early success, Apple has faced numerous challenges in maintaining its competitive edge in a dynamic market. Competitors like Google, Samsung, and Microsoft constantly innovate and vie for market share. How has Apple managed to stay ahead?</p>\n\n<p>Strategic Acquisitions<br>\nApple‚Äôs strategic acquisitions have bolstered its market position. In 2014, the company acquired Beats to enhance its music streaming capabilities, leading to the creation of Apple Music. Acquiring Shazam, a music discovery app, further integrated Apple‚Äôs services.</p>\n\n<p>Expansion into New Product Categories<br>\nApple‚Äôs venture into new product categories has been a key strategy for growth. From its successful launch of the iPhone, iPad, and Mac, Apple has expanded into wearables like the Apple Watch, smart home devices with the HomePod, and health and fitness tools such as the Apple Health app. This diversification ensures relevance in a fast-evolving market.</p>\n\n<p>Focus on Sustainability<br>\nApple has made significant efforts to align with growing consumer interest in sustainability. The company has pledged to become carbon-neutral across its entire supply chain by 2030. This focus on environmental responsibility resonates with eco-conscious consumers, further solidifying its brand image.</p>\n\n<p>Innovation in Services<br>\nApple‚Äôs services division has seen significant growth, encompassing iCloud, Apple Music, the App Store, and Apple TV+. These services have become substantial revenue streams, contributing to Apple‚Äôs financial stability and growth.</p>\n\n<p>Conclusion: The Future of Apple</p>\n\n<p>Staying Ahead of the Curve<br>\nAs Apple looks to the future, the company continues to invest in emerging technologies such as artificial intelligence, virtual reality, and augmented reality. The rumored launch of AR glasses positions Apple at the forefront of the next major technological shift, potentially tied to the metaverse.<br>\nIn summary, Apple‚Äôs success is rooted in its relentless focus on innovation, robust branding strategy, and unwavering customer loyalty. By continually adapting to market trends, enhancing user experiences, and maintaining a premium brand image, Apple has secured its status as a leader in the tech industry. Its ability to stay ahead of the curve will be critical as competitors continue to challenge its position.</p>\n\n<p>Key Takeaways<br>\nInnovation Strategy: Apple‚Äôs commitment to innovation has allowed it to continuously disrupt the market.<br>\nBranding Success: Effective branding and emotional connections with customers contribute to Apple‚Äôs loyal customer base.<br>\nEcosystem and Services: Apple‚Äôs integration of products and services fosters user retention.<br>\nAdaptation: Strategic acquisitions, diversification, and a focus on sustainability have helped Apple maintain its competitive edge.<br>\nFuture Outlook: Investments in cutting-edge technology position Apple for continued growth.<br>\nBy studying Apple‚Äôs journey, businesses can learn valuable lessons in branding, customer loyalty, and innovation that can be applied across industries.</p>\n\n<p>Uncover the latest trends and insights with our articles on Visionary Vogues</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üîç Understanding Python Data Types","url":"https://dev.to/lilocreator/understanding-python-data-types-37gd","date":1751013099,"author":"lilo-creator","guid":173534,"unread":true,"content":"<p>Python is a popular programming language known for its simplicity and readability. But before you dive deep into coding, one of the most important concepts to grasp is data types.<br>\nThink of data types like different kinds of boxes you can use to store information. Each box (data type) holds a specific kind of value ‚Äî like numbers, words, lists of things, etc.<br>\nBelow are some of the data types that are common;</p>\n\n<p>**</p>\n<h2>\n  \n  \n  1Ô∏è‚É£ Numbers\n</h2>\n\n<p>**<br>\nThese are used to store numeric values.<br>\nIntegers (int): Whole numbers ‚Äî e.g., 3, 0, -5<br>\nFloats (float): Decimal numbers ‚Äî e.g., 3.14, -0.5<br>\nComplex (complex): Numbers with real and imaginary parts ‚Äî e.g., 2 + 3j<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">21</span>        <span class=\"c1\"># int\n</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"mf\">5.6</span>    <span class=\"c1\"># float\n</span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mf\">3j</span>      <span class=\"c1\"># complex\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  <strong>2Ô∏è‚É£ Strings (str)</strong>\n</h2>\n\n<p>A string is a sequence of characters ‚Äî usually used to represent text.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Lilian</span><span class=\"sh\">\"</span>\n<span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Hello, world!</span><span class=\"sh\">'</span>\n</code></pre>\n\n</div>\n\n\n\n<p>**</p>\n\n<h2>\n  \n  \n  3Ô∏è‚É£ Booleans (bool)\n</h2>\n\n<p>**<br>\nBooleans represent True or False values ‚Äî great for decisions and logic.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">is_logged_in</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n<span class=\"n\">has_passed</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n</code></pre>\n\n</div>\n\n\n\n<p>**</p>\n\n<h2>\n  \n  \n  4Ô∏è‚É£ Lists (list)\n</h2>\n\n<p>**<br>\nLists are ordered collections of items ‚Äî like a shopping list üõí.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">fruits</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">apple</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">banana</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">mango</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n\n<p>**</p>\n\n<h2>\n  \n  \n  5Ô∏è‚É£ Tuples (tuple)\n</h2>\n\n<p>**<br>\nA tuple is just like a list ‚Äî but it cannot be changed after creation.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">It</span><span class=\"sh\">'</span><span class=\"s\">s immutable.\ncoordinates = (10, 20)\n</span></code></pre>\n\n</div>\n\n\n\n<p>**</p>\n\n<h2>\n  \n  \n  6Ô∏è‚É£ Dictionaries (dict)\n</h2>\n\n<p>**<br>\nDictionaries store key-value pairs ‚Äî like an ID and its name.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Lilian</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">age</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">is_active</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>**</p>\n\n<h2>\n  \n  \n  7Ô∏è‚É£ Sets (set)\n</h2>\n\n<p>**<br>\nA set is a collection of unique items, no duplicates allowed.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">red</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">blue</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">green</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">red</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">colors</span><span class=\"p\">)</span>  <span class=\"c1\"># {'red', 'blue', 'green'}\n</span>\n\n</code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"This Free Python Workflow Replaces Freelancers for 90% of Blog Content ‚Äì Suhaib Bin Younis","url":"https://dev.to/suhaibbinyounis/this-free-python-workflow-replaces-freelancers-for-90-of-blog-content-suhaib-bin-younis-2fj1","date":1751011158,"author":"Suhaib Bin Younis","guid":173533,"unread":true,"content":"<p>Discover how a powerful, open-source Python workflow, leveraging cutting-edge AI and automation tools, can replace the need for freelance writers for most of your blog content, saving you thousands and scaling your output.</p>\n\n<p>üëâ <a href=\"https://notes.suhaib.in/writing/this-free-python-workflow-replaces-freelancers-for-90-of-blog-content/\" rel=\"noopener noreferrer\">Read full article here</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Scrape Trending Keywords, Auto-Write Posts, Earn Traffic‚ÄîThis System Works ‚Äì Suhaib Bin Younis","url":"https://dev.to/suhaibbinyounis/scrape-trending-keywords-auto-write-posts-earn-traffic-this-system-works-suhaib-bin-younis-ogg","date":1751010219,"author":"Suhaib Bin Younis","guid":173508,"unread":true,"content":"<p>Discover a practical, step-by-step system for solo content creators and developers to automate content creation from trending keyword discovery to automated publishing, leveraging AI and Python for consistent traffic and monetization.</p>\n\n<p>üëâ <a href=\"https://notes.suhaib.in/writing/scrape-trending-keywords-auto-write-posts-earn-trafficthis-system-works/\" rel=\"noopener noreferrer\">Read full article here</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How I Finally \"Got\" Python Data Types!","url":"https://dev.to/obonyodorice/how-i-finally-got-python-data-types-10eh","date":1751009700,"author":"obonyodorice","guid":173507,"unread":true,"content":"<h1>\n  \n  \n  Hey Everyone! Learning Python's Basic \"Building Blocks\"#\n</h1>\n\n<p>When I started learning Python, I just wanted to make my computer do cool things. But sometimes, my code didn't work right. I wondered: How does the computer know if \"5\" is a number or just a word?</p>\n\n<p>Then, I learned about Python Data Types. This was a big moment for me! It's how Python understands what kind of \"stuff\" you're giving it. Like, is it text? Is it a number? Is it a list of things?</p>\n\n<p>In this story, I'll share how I learned about these basic types of \"stuff\" in Python. I'll use super easy examples to show you what clicked for me.</p>\n\n<p><strong>My Secret Trick: Asking Python \"What Are You?\" (<code>type()</code> function)</strong><br>\nFirst, I found a cool trick: the <code>type()</code> tool. It lets you ask Python directly, \"What kind of data is this?\"<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>my_age = 30 \nmy_name = \"Dorice\"   \nis_happy = True      \n\nprint(type(my_age))\nprint(type(my_name))\nprint(type(is_happy))\n</code></pre>\n\n</div>\n\n\n\n<p><strong>What you'd see:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;class 'int'&gt;    # Python says:  This is a WHOLE NUMBER.\"\n&lt;class 'str'&gt;    # Python says: \"This is TEXT.\"\n&lt;class 'bool'&gt;   # Python says: \"This is a TRUE/FALSE.\"\n</code></pre>\n\n</div>\n\n\n\n<p>This simple trick showed me that Python always knows what type of \"stuff\" it has. This is key to making your code work right!</p>\n\n<h1>\n  \n  \n  The Main Types of \"Stuff\" in Python (What I Learned!)\n</h1>\n\n<p>Let's look at the basic types and my simple take on them:</p>\n\n<p><strong>1. Numbers (<code>int</code> and <code>float</code>): For Counting and Math</strong><br>\nNumbers are for math. Python has two main kinds:</p>\n\n<ul>\n<li> <strong>Whole Numbers (<code>int</code>): Numbers without decimals.</strong>\n</li>\n</ul>\n\n<blockquote>\n<p>Like: 5, 100<br>\n   I use them for: Counting things (apples, people).<br>\n</p>\n\n\n</blockquote>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>apples = 5\nprint(f\"I have {apples} apples.\")\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li><strong>Decimal Numbers (float): Numbers with decimals.</strong></li>\n</ul>\n\n<blockquote>\n<p>Like: 3.14, 19.99<br>\n   I use them for: Prices, measurements (like temperature).<br>\n</p>\n</blockquote>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>price = 19.99\nprint(f\"The price is ${price}.\")\n</code></pre>\n\n</div>\n\n\n\n<p><strong>2. Text (<code>str</code>): For Words and Sentences</strong><br>\nStrings are for any words or sentences. Put them in quotes (<code>\"...\"</code> or <code>'...'</code>).</p>\n\n<ul>\n<li>Like: <code>\"Hello\"</code>, <code>'My name is Dorice'</code>\n</li>\n<li>I use them for: Names, messages, anything you want to read.</li>\n<li>What I learned: You cannot change parts of a string after you    make it. If you add to it, Python makes a new string.\n</li>\n</ul>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>my_greeting = \"Hi!\"\nprint(my_greeting)\n\ngreeting = my_greeting + \" How are you?\"\nprint(greeting)\n</code></pre>\n\n</div>\n\n\n<p><strong>3. True/False (<code>bool</code>): For Yes/No Questions</strong><br>\nBooleans are super simple: they are either <code>True</code> or <code>False.</code> They help your code make choices.</p>\n\n<p>Like: <code>True</code>,<code>False</code> (always starts with a capital letter!)</p>\n\n<p>I use them for: Asking questions like \"Is it sunny?\" or \"Is the game over?\"<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>is_sunny = True\nif is_sunny: \n    print(\"Go play outside!\")\nelse: \n    print(\"Stay inside.\")\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>Lists (<code>list</code>): \nLists are like a shopping basket. They hold items in an order, and you can change them anytime.</li>\n</ol>\n\n<ul>\n<li>\n<strong>Like:</strong> <code>[\"milk\", \"bread\", \"eggs\"]</code>, <code>[1, 2, 3]</code>\n</li>\n<li>\n<strong>I use them for:</strong> Shopping lists, a list of tasks.</li>\n<li>\n<strong>What I learned:</strong> Lists are changeable! I can add, remove, or change items easily.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>my_basket = [\"apple\", \"banana\"]\nprint(f\"My basket: {my_basket}\")\n\nmy_basket.append(\"orange\") # Add an item\nprint(f\"Basket now: {my_basket}\")\n</code></pre>\n\n</div>\n\n\n\n<p><strong>5. Tuples (<code>tuple</code>): The \"Fixed\" Container</strong><br>\nTuples are like lists, but with one big rule: once you make them, you cannot change them. They are set in stone.</p>\n\n<p>Like: <code>(10, 20)</code> (for a map point that shouldn't move)</p>\n\n<p>I use them for: Things that must stay exactly the same.</p>\n\n<p>What I learned: If I want data that stays fixed, I use a tuple. Trying to change it gives an error!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>dorice_birthday = (27, 6, 1996) # Using an example birth year for Dorice\n\nprint(f\"Dorice's birth day is the {dorice_birthday[0]}th.\")   # Get the first item (day)\nprint(f\"Dorice's birth month is {dorice_birthday[1]}.\") \nprint(f\"Dorice's birth year is {dorice_birthday[2]}.\")  \n\nprint(f\"Type of dorice_birthday: {type(dorice_birthday)}\") # Shows &lt;class 'tuple'&gt;\n</code></pre>\n\n</div>\n\n\n\n<p><strong>6. Sets (<code>set</code>): My \"Only Unique Items\" Collector</strong><br>\nSets are cool because they only store unique items. If you try to put a double in, it just ignores it. Also, they don't keep things in order.</p>\n\n<ul>\n<li>\n<strong>Like:</strong> <code>{1, 2, 3}</code>, <code>{\"red\", \"blue\"}</code>\n</li>\n<li>\n<strong>I use them for:</strong> Finding all the different items in a group.</li>\n<li>\n<strong>What I learned:</strong> Great for quickly finding unique things or if I don't care about the order.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>my_numbers = {1, 2, 3, 2, 4} # '2' is repeated\nprint(f\"Unique numbers: {my_numbers}\") # Shows {1, 2, 3, 4} (no repeats!)\n\nmy_numbers.add(5) # Add a new one\nprint(f\"New list: {my_numbers}\")\n</code></pre>\n\n</div>\n\n\n\n<p><strong>7. Dictionaries (<code>dict</code>): The \"Label and Value\" Box</strong><br>\nDictionaries are like a box where you put items with labels. You have a \"label\" (called a key) and the \"item\" itself (called a value).</p>\n\n<ul>\n<li>\n<strong>Like:</strong> <code>{\"name\": \"Dorice\", \"age\": 28}</code>\n</li>\n<li>\n<strong>I use them for:</strong> Storing details about a person (like their name, age, city).</li>\n<li>\n<strong>What I learned:</strong> Super easy to find info using its label, and I can change or add things easily.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>my_details = {\n    \"name\": \"Dorice\",\n    \"age\": 28,\n    \"city\": \"Mombasa\"\n}\nprint(f\"My name is: {my_details['name']}\") # Find 'name'\nprint(f\"My age is: {my_details['age']}\")   # Find 'age'\n\nmy_details[\"age\"] = 29 # Change age\nprint(f\"My new age: {my_details['age']}\")\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  My Big Idea: \"Changeable\" vs. \"Unchangeable\"\n</h2>\n\n<p>This was the trickiest part, but it made everything click:</p>\n\n<ul>\n<li>\n<strong>Changeable</strong> (<code>list</code>, <code>set</code>, <code>dict</code>): You can change them after you make them.</li>\n<li>\n<strong>Unchangeable</strong> (<code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>, <code>tuple</code>): If you try to \"change\" them, Python actually just makes a new one. They stay fixed.</li>\n</ul>\n\n<p>Understanding this helps you avoid confusing problems in your code!</p>\n\n<p><strong>Why This Matters to Me Now: Coding Is Fun!</strong><br>\nLearning these basic \"types of stuff\" made coding much clearer for me. Now, I:</p>\n\n<ul>\n<li> <strong>Pick the right tool:</strong> I know if I need a basket (list) or a label box (dictionary).</li>\n<li> <strong>Write better code:</strong> My code works more smoothly.</li>\n<li> <strong>Fix problems faster:</strong> If something breaks, I can guess what type of \"stuff\" is causing the issue.</li>\n</ul>\n\n<p>It's not just about memorizing names. It's about helping Python understand what you want to do with your information, so it can build awesome things for you!</p>\n\n<p><strong>Keep Learning, Keep Building!</strong><br>\nI hope my simple story helps you with Python's data types. Just keep trying the examples and playing with them! That's how I learn best.</p>\n\n<p>What was your big \"aha!\" moment in coding? Let me know in the comments!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Meet the Bloggers Making Full-Time Incomes Using Just Prompts and Python ‚Äì Suhaib Bin Younis","url":"https://dev.to/suhaibbinyounis/meet-the-bloggers-making-full-time-incomes-using-just-prompts-and-python-suhaib-bin-younis-41fn","date":1751009592,"author":"Suhaib Bin Younis","guid":173506,"unread":true,"content":"<p>Discover how solo content creators are leveraging AI prompts and Python scripting to automate their blogging workflow, scale content production, and achieve full-time incomes in 2025.</p>\n\n<p>üëâ <a href=\"https://notes.suhaib.in/writing/meet-the-bloggers-making-full-time-incomes-using-just-prompts-and-python/\" rel=\"noopener noreferrer\">Read full article here</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"If You‚Äôre Not Using AI for Blogging Yet, You‚Äôre Leaving ‚Çπ on the Table ‚Äì Suhaib Bin Younis","url":"https://dev.to/suhaibbinyounis/if-youre-not-using-ai-for-blogging-yet-youre-leaving-on-the-table-suhaib-bin-younis-1j0j","date":1751009589,"author":"Suhaib Bin Younis","guid":173505,"unread":true,"content":"<p>Discover how solo creators and bloggers can leverage AI tools like GPT-5, LangChain, and Python to automate content creation, optimize for SEO, and significantly boost their monetization efforts in 2025.</p>\n\n<p>üëâ <a href=\"https://notes.suhaib.in/writing/if-youre-not-using-ai-for-blogging-yet-youre-leaving--on-the-table/\" rel=\"noopener noreferrer\">Read full article here</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How To Launch a Blog That Pays You in Your Sleep‚ÄîWith Just GPT + Python ‚Äì Suhaib Bin Younis","url":"https://dev.to/suhaibbinyounis/how-to-launch-a-blog-that-pays-you-in-your-sleep-with-just-gpt-python-suhaib-bin-younis-5epf","date":1751009280,"author":"Suhaib Bin Younis","guid":173504,"unread":true,"content":"<p>Learn to build a fully automated, monetized blog from scratch using GPT-5, Python, and open-source tools. Discover practical steps for keyword research, content generation, auto-publishing, and passive income streams.</p>\n\n<p>üëâ <a href=\"https://notes.suhaib.in/writing/how-to-launch-a-blog-that-pays-you-in-your-sleepwith-just-gpt-+-python/\" rel=\"noopener noreferrer\">Read full article here</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Get GPT to Write 30 Articles a Week‚ÄîWithout Even Opening WordPress ‚Äì Suhaib Bin Younis","url":"https://dev.to/suhaibbinyounis/how-to-get-gpt-to-write-30-articles-a-week-without-even-opening-wordpress-suhaib-bin-younis-d7d","date":1751009276,"author":"Suhaib Bin Younis","guid":173503,"unread":true,"content":"<p>Learn how to build an automated content pipeline using Python, GPT-5, and WordPress's XML-RPC API to generate and publish dozens of articles weekly, boosting your traffic and monetization opportunities, all without manual intervention.</p>\n\n<p>üëâ <a href=\"https://notes.suhaib.in/writing/how-to-get-gpt-to-write-30-articles-a-weekwithout-even-opening-wordpress/\" rel=\"noopener noreferrer\">Read full article here</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How Smart Bloggers Are Letting AI Do 90% of the Work in 2025 ‚Äì Suhaib Bin Younis","url":"https://dev.to/suhaibbinyounis/how-smart-bloggers-are-letting-ai-do-90-of-the-work-in-2025-suhaib-bin-younis-3ban","date":1751008964,"author":"Suhaib Bin Younis","guid":173502,"unread":true,"content":"<p>Discover how solo content creators and developers are leveraging advanced AI, including GPT-5 and Python automation, to handle up to 90% of their blogging workflow in 2025, from idea generation to automated publishing.</p>\n\n<p>üëâ <a href=\"https://notes.suhaib.in/writing/how-smart-bloggers-are-letting-ai-do-90-of-the-work-in-2025/\" rel=\"noopener noreferrer\">Read full article here</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Here‚Äôs the Python Script Indian Bloggers Are Using to Go Viral in 2025 ‚Äì Suhaib Bin Younis","url":"https://dev.to/suhaibbinyounis/heres-the-python-script-indian-bloggers-are-using-to-go-viral-in-2025-suhaib-bin-younis-4aaj","date":1751008650,"author":"Suhaib Bin Younis","guid":173501,"unread":true,"content":"<p>Discover the Python automation strategy that Indian content creators are leveraging in 2025 to identify viral trends, generate high-quality content with GPT-5, and auto-publish, significantly boosting traffic and monetization.</p>\n\n<p>üëâ <a href=\"https://notes.suhaib.in/writing/heres-the-python-script-indian-bloggers-are-using-to-go-viral-in-2025/\" rel=\"noopener noreferrer\">Read full article here</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build an AI Blogging Machine in 3 Steps Scrape, Prompt, Publish ‚Äì Suhaib Bin Younis","url":"https://dev.to/suhaibbinyounis/build-an-ai-blogging-machine-in-3-steps-scrape-prompt-publish-suhaib-bin-younis-4ap6","date":1751008331,"author":"Suhaib Bin Younis","guid":173500,"unread":true,"content":"<p>Learn how to automate your content creation workflow from ideation to publication using Python, AI APIs like GPT-5, and intelligent scraping techniques. Scale your blog and monetize your efforts efficiently.</p>\n\n<p>üëâ <a href=\"https://notes.suhaib.in/writing/build-an-ai-blogging-machine-in-3-steps-scrape-prompt-publish/\" rel=\"noopener noreferrer\">Read full article here</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Google Trends Is a Goldmine for Bloggers‚ÄîHere‚Äôs the AI Script to Tap It ‚Äì Suhaib Bin Younis","url":"https://dev.to/suhaibbinyounis/google-trends-is-a-goldmine-for-bloggers-heres-the-ai-script-to-tap-it-suhaib-bin-younis-odn","date":1751007517,"author":"Suhaib Bin Younis","guid":173480,"unread":true,"content":"<p>Discover how to leverage Google Trends data with AI automation (GPT-5, Python, LangChain) to generate high-traffic blog content and boost your monetization strategies.</p>\n\n<p>üëâ <a href=\"https://notes.suhaib.in/writing/google-trends-is-a-goldmine-for-bloggersheres-the-ai-script-to-tap-it/\" rel=\"noopener noreferrer\">Read full article here</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Django Weblog: Watch the DjangoCon Europe 2025 talks","url":"https://www.djangoproject.com/weblog/2025/jun/27/watch-the-djangocon-europe-2025-talks/","date":1751007081,"author":"","guid":173492,"unread":true,"content":"<p>They‚Äôre now all available to watch on YouTube, with a dedicated playlist ‚≠êÔ∏è <a href=\"https://www.youtube.com/watch?v=6XqVXwsBRCQ&amp;list=PLY_che_OEsX19RNHHqERLODTtYs1YAtMA&amp;index=1\">DjangoCon Europe 2025 Dublin</a>. For more quality Django talks in 2025, check out our next upcoming events!</p><h4>All the DjangoCon Europe talks</h4>","contentLength":216,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Solve a real-world problem with AI","url":"https://dev.to/kwnaidoo/solve-a-real-world-problem-with-ai-4lk3","date":1751005879,"author":"Kevin Naidoo","guid":173470,"unread":true,"content":"<p>I use AI for a lot of stuff, from a coding assistant, sometimes using Claude Code, to complex voice AI agents.</p>\n\n<p>One thing is very clear: the future is a mixture of small and large models, and not all the hype you find on YouTube and other social media sites. In this article, let's look at a real-world problem and how you can use a small model to solve it.</p>\n\n<h2>\n  \n  \n  Problem\n</h2>\n\n<p>I need to match my local categories with those of Google taxonomies to safely import e-commerce products into my system.</p>\n\n<p>We have a large table of 5000+ local categories and merchant products that are categorized using <a href=\"https://www.google.com/basepages/producttype/taxonomy.en-US.txt\" rel=\"noopener noreferrer\">Google Shopping Taxonomies</a>.</p>\n\n<p>Now, obviously, the system is a legacy product and is built around our categories. It's not feasible to just dump the current category trees and replace them with Google's.</p>\n\n<p>I need to still import those products into the system, though; a merchant could have thousands of products, and the total product count collectively ends up in millions.</p>\n\n<p>It's not possible for humans to check and verify each one. Furthermore, asking a big model like Claude or Gemini 2.5 pro is going to get crazy expensive if I have to categorize every single product.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fnsiueehfjbwhrh2g0l19.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fnsiueehfjbwhrh2g0l19.jpg\" alt=\"Don't know what to do\" width=\"800\" height=\"418\"></a></p>\n\n<h2>\n  \n  \n  Solution\n</h2>\n\n<p><strong>Step 1: Vector embedding</strong></p>\n\n<p>Take all the 5000 local categories and index them into a vector store using <code>text-embedding-3-large</code> and build a thin microservice using FastAPI or whatever backend you like.</p>\n\n<p>The service would have 2 endpoints, i.e:</p>\n\n<ol>\n<li><p><code>api/category/vectorize</code> ~ This is the endpoint that will take a category name and calculate the vector embedding, and store it in a vector database like QDrant or Postgres PGVector.</p></li>\n<li><p><code>api/category/search</code> ~ takes a search term, then does a cosine similarity search for the closest matching category with a score of at least 80%.</p></li>\n</ol>\n\n<p>Then you simply need some sort of console job or ETL process that will make an API request when a product comes in, to get back a suggested local category.</p>\n\n<p>You shouldn't update the product immediately; instead, store the results in a queue table.</p>\n\n<p><strong>Step 2: Verification</strong></p>\n\n<p>Use a cheaper model like <code>GPT-4o mini</code> or Ollama models like <code>qwen2.5:7b</code> to verify that the category matched with the vector embeddings was accurate.</p>\n\n<p>A simple prompt<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Task: Verify if the product category match is correct.\n\nProduct: [PRODUCT_TITLE] - [PRODUCT_DESCRIPTION]\nMatched Category: [LOCAL_CATEGORY]\nGoogle Shopping Category: [GOOGLE_SHOPPING_CATEGORY]\n\nDoes the matched category accurately represent this product?\n\nRespond with only: &lt;agree&gt; or &lt;disagree&gt;\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 3: Build a human-verified database</strong></p>\n\n<p>In this step you want to manually audit samples by humans and put the result in a verified database. This will obviously take some time, but once you get to 10k or so of data it should be okay.</p>\n\n<p>It's important to sample across various categories and different product types.</p>\n\n<p>Store a cleaned dataset of this data by vectorizing the product titles and storing them similarly to step one.</p>\n\n<p><strong>Step 4: Audit results</strong></p>\n\n<p>Now add a step before <code>step 1</code>. I.e., first check the verified database to see if the current product title matches more than 80% with something in that database.</p>\n\n<p>If it does, you take that product's category.</p>\n\n<p>You should still run through <code>step 2</code> as well, however, pass through results from the product search such that it's provided as few shot examples to better help the model determine the accuracy.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Decoding the Human Language: An Introduction to Natural Language Processing (NLP) Fundamentals","url":"https://dev.to/dev_patel_35864ca1db6093c/decoding-the-human-language-an-introduction-to-natural-language-processing-nlp-fundamentals-4dam","date":1751004202,"author":"Dev Patel","guid":173448,"unread":true,"content":"<p>Imagine a world where computers understand and respond to human language as effortlessly as we do. This isn't science fiction; it's the promise of Natural Language Processing (NLP). NLP is a branch of artificial intelligence (AI) that bridges the gap between human communication and computer understanding. It's the technology behind virtual assistants like Siri and Alexa, the smart replies in your email inbox, and the increasingly sophisticated chatbots popping up everywhere. But what exactly <em>is</em> NLP, and why does it matter?</p>\n\n<p>At its core, NLP is about enabling computers to process and understand human language in all its messy glory. Unlike programming languages, which follow strict grammatical rules, natural language is fluid, ambiguous, and context-dependent. We use slang, idioms, sarcasm, and nuanced tone ‚Äì all things that make human communication rich but also incredibly challenging for machines to decipher. NLP tackles this challenge by employing various techniques to analyze, understand, and generate human language.</p>\n\n<p><strong>The Building Blocks of NLP:</strong></p>\n\n<p>Several fundamental techniques form the backbone of NLP. Let's explore some key concepts:</p>\n\n<ul>\n<li><p><strong>Tokenization:</strong> This is the first step ‚Äì breaking down a sentence into individual words or units called \"tokens.\"  Think of it like dissecting a sentence into its building blocks.  For example, the sentence \"The quick brown fox jumps over the lazy dog\" would be tokenized into: [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"].</p></li>\n<li><p><strong>Part-of-Speech (POS) Tagging:</strong> This involves assigning grammatical labels (noun, verb, adjective, etc.) to each token. This helps the computer understand the role each word plays in the sentence's structure.  It's like labeling each building block with its function ‚Äì \"The\" is a determiner, \"quick\" is an adjective, and so on.</p></li>\n<li><p><strong>Named Entity Recognition (NER):</strong> This identifies and classifies named entities like people, organizations, locations, and dates.  For instance, in the sentence \"Barack Obama visited the White House in 2010,\" NER would identify \"Barack Obama\" as a person, \"White House\" as a location, and \"2010\" as a date.</p></li>\n<li><p><strong>Sentiment Analysis:</strong> This determines the emotional tone behind a piece of text ‚Äì is it positive, negative, or neutral? This is crucial for understanding customer reviews, social media sentiment, and brand perception.</p></li>\n<li><p><strong>Word Embeddings:</strong> These represent words as numerical vectors in a high-dimensional space, capturing semantic relationships between words.  Words with similar meanings will have vectors closer together.  Think of it as mapping words onto a coordinate system where proximity reflects meaning.  \"King\" and \"Queen\" would be closer than \"King\" and \"Table.\"</p></li>\n</ul>\n\n<p><strong>Why NLP Matters:</strong></p>\n\n<p>NLP's significance stems from its ability to automate tasks that previously required human intervention. It tackles problems related to information overload, inefficient communication, and the need for personalized experiences. By enabling computers to understand and process human language, NLP unlocks a world of possibilities.</p>\n\n<p><strong>Applications and Impact:</strong></p>\n\n<p>The applications of NLP are vast and rapidly expanding:</p>\n\n<ul>\n<li>\n<strong>Customer Service:</strong> Chatbots and virtual assistants provide instant support, answering frequently asked questions and resolving issues.</li>\n<li>\n<strong>Healthcare:</strong> NLP can analyze medical records, research papers, and patient feedback to improve diagnosis, treatment, and drug discovery.</li>\n<li>\n<strong>Finance:</strong> NLP helps detect fraud, analyze market trends, and personalize financial advice.</li>\n<li>\n<strong>Education:</strong> NLP-powered tools can personalize learning experiences, assess student progress, and provide automated feedback.</li>\n<li>\n<strong>Marketing and Advertising:</strong> NLP aids in analyzing customer sentiment, targeting ads effectively, and personalizing marketing campaigns.</li>\n</ul>\n\n<p><strong>Challenges and Ethical Considerations:</strong></p>\n\n<p>Despite its potential, NLP faces several challenges:</p>\n\n<ul>\n<li>\n<strong>Ambiguity and Context:</strong> Human language is inherently ambiguous, and understanding context remains a significant hurdle.</li>\n<li>\n<strong>Data Bias:</strong> NLP models are trained on data, and if this data reflects existing biases, the models will perpetuate and even amplify those biases.</li>\n<li>\n<strong>Privacy Concerns:</strong> NLP applications often process sensitive personal information, raising concerns about data privacy and security.</li>\n<li>\n<strong>Explainability and Transparency:</strong> Understanding how complex NLP models arrive at their conclusions is crucial for building trust and ensuring accountability.</li>\n</ul>\n\n<p><strong>The Future of NLP:</strong></p>\n\n<p>NLP is an evolving field, constantly pushing the boundaries of what's possible. Advancements in deep learning, particularly transformer models like BERT and GPT-3, have led to significant breakthroughs in language understanding and generation. We can expect even more sophisticated applications in the future, including more natural and human-like interactions with machines, improved language translation, and more effective tools for information retrieval and analysis. However, addressing the ethical challenges and ensuring responsible development are crucial to harnessing the full potential of NLP for the benefit of society.</p>\n\n<p>In conclusion, Natural Language Processing is not just a technological advancement; it's a fundamental shift in how humans interact with machines. By enabling computers to understand and respond to human language, NLP is transforming industries, improving efficiency, and opening up new avenues for innovation. While challenges remain, the future of NLP is bright, promising a world where technology seamlessly integrates with human communication.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üèÇ Beginner-Friendly Guide: \"Sum of k-Mirror Numbers\" ‚Äì LeetCode 2081 (python| JavaScript | Python )","url":"https://dev.to/berlin_techs_e93c88bf0a5b/beginner-friendly-guide-sum-of-k-mirror-numbers-leetcode-2081-python-javascript-python--51i4","date":1751001221,"author":"Berlin Techs","guid":173446,"unread":true,"content":"<p>üëã Introduction<br>\nIn the world of programming puzzles, palindrome-based problems always offer a unique challenge‚Äîespecially when they span across multiple number bases. Imagine trying to find numbers that not only look the same forwards and backwards in base-10, but also in base-k. That‚Äôs the crux of the k-mirror number challenge.</p>\n\n<p>Let‚Äôs dive into the formal problem definition to see how this works:</p>\n\n<p>üß† Problem Summary<br>\nYou're given two integers:</p>\n\n<p>k: the base in which we check for palindromes<br>\nn: the number of k-mirror numbers to find<br>\nA k-mirror number is a positive integer that:</p>\n\n<p>Is a palindrome in base-10<br>\nIs also a palindrome in base-k<br>\nYour task: return the sum of the first n such numbers.</p>\n\n<p>üß© Intuition<br>\nThis is a palindrome-generation and filtering problem. The challenge lies in generating candidate numbers efficiently and checking their representations in different bases.</p>\n\n<p>Key Observations:</p>\n\n<p>Not every decimal palindrome is a k-palindrome (i.e., palindrome in base-k)<br>\nInstead of checking all numbers, generate only palindromes in base-10 (which drastically reduces search space)<br>\nFor each generated number, convert it to base-k and check if that string is also a palindrome<br>\nü™Ñ Approach<br>\nStart from the smallest base-10 palindromes: 1-digit numbers.<br>\nUse a helper function to generate the next decimal palindrome.<br>\nFor each candidate:<br>\nConvert it to base-k<br>\nCheck if that base-k representation is a palindrome<br>\nIf it is, add it to the sum and count<br>\nStop when we find n such numbers<br>\nüíª C++ Code<br>\nclass Solution {<br>\npublic:<br>\n    bool isPalindrome(string s) {<br>\n        return s == string(s.rbegin(), s.rend());<br>\n    }</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>string toBaseK(long long num, int k) {\n    string res;\n    while (num &gt; 0) {\n        res += to_string(num % k);\n        num /= k;\n    }\n    reverse(res.begin(), res.end());\n    return res;\n}\n\nlong long kMirror(int k, int n) {\n    long long sum = 0;\n    int len = 1;\n    while (n &gt; 0) {\n        for (int half = pow(10, (len - 1) / 2); half &lt; pow(10, (len + 1) / 2) &amp;&amp; n &gt; 0; ++half) {\n            string h = to_string(half);\n            string r = h;\n            reverse(r.begin(), r.end());\n            string full = h + (len % 2 ? r.substr(1) : r);\n            long long num = stoll(full);\n            if (isPalindrome(toBaseK(num, k))) {\n                sum += num;\n                --n;\n            }\n        }\n        ++len;\n    }\n    return sum;\n}\n</code></pre>\n\n</div>\n\n<p>};<br>\nüíª JavaScript Code<br>\nfunction isPalindrome(s) {<br>\n    return s === s.split('').reverse().join('');<br>\n}</p>\n\n<p>function toBaseK(num, k) {<br>\n    return num.toString(k);<br>\n}</p>\n\n<p>var kMirror = function(k, n) {<br>\n    let sum = 0;<br>\n    let len = 1;<br>\n    while (n &gt; 0) {<br>\n        let lower = Math.pow(10, Math.floor((len - 1) / 2));<br>\n        let upper = Math.pow(10, Math.ceil((len) / 2));<br>\n        for (let half = lower; half &lt; upper &amp;&amp; n &gt; 0; half++) {<br>\n            let h = String(half);<br>\n            let r = h.split('').reverse().join('');<br>\n            let full = h + (len % 2 ? r.slice(1) : r);<br>\n            let num = parseInt(full);<br>\n            if (isPalindrome(toBaseK(num, k))) {<br>\n                sum += num;<br>\n                n--;<br>\n            }<br>\n        }<br>\n        len++;<br>\n    }<br>\n    return sum;<br>\n};<br>\nüêç Python Code<br>\nclass Solution:<br>\n    def kMirror(self, k: int, n: int) -&gt; int:<br>\n        def is_palindrome(s):<br>\n            return s == s[::-1]</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>    def to_base_k(num, k):\n        res = \"\"\n        while num:\n            res = str(num % k) + res\n            num //= k\n        return res\n\n    def generate_palindromes():\n        length = 1\n        while True:\n            for half in range(10 ** ((length - 1) // 2), 10 ** ((length + 1) // 2)):\n                s = str(half)\n                yield int(s + s[-2::-1] if length % 2 else s + s[::-1])\n            length += 1\n\n    ans = 0\n    count = 0\n    for num in generate_palindromes():\n        if is_palindrome(to_base_k(num, k)):\n            ans += num\n            count += 1\n            if count == n:\n                break\n    return ans\n</code></pre>\n\n</div>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Mastering Investment Portfolio Rebalancing with Python and Okama","url":"https://dev.to/chilango74/mastering-investment-portfolio-rebalancing-with-python-and-okama-43bj","date":1751000281,"author":"Sergey Kikevich","guid":173424,"unread":true,"content":"<p>Rebalancing is a crucial part of long-term portfolio management. As asset prices fluctuate, your investment portfolio can drift away from its target allocation, potentially increasing risk or reducing expected returns. </p>\n\n<p>In this article, we‚Äôll explore how to control asset weights within a portfolio using various rebalancing strategies using the <code>okama</code> Python library.</p>\n\n<h2>\n  \n  \n  What is rebalancing?\n</h2>\n\n<p>Rebalancing is the process by which an investor restores their portfolio to its target allocation by selling and buying assets. After rebalancing all the assets have original (target) weights.</p>\n\n<p><code>okama</code> supports several investment portfolio rebalancing strategies. These strategies are divided into two types:</p>\n\n<ul>\n<li>Calendar-based rebalancing</li>\n<li>Rebalancing bands (threshold-based)</li>\n</ul>\n\n<h3>\n  \n  \n  Calendar-based rebalancing\n</h3>\n\n<p>Calendar-based rebalancing is a strategy that involves adjusting the asset allocation of a portfolio at regular intervals, such as monthly, quarterly or annually.</p>\n\n<p>Available periods for calendar-based strategies:</p>\n\n<ul>\n<li>'month'</li>\n<li>'quarter'</li>\n<li>'half-year'</li>\n<li>'year'</li>\n</ul>\n\n<h3>\n  \n  \n  Rebalancing bands (threshold-based)\n</h3>\n\n<p>Rebalancing bands or threshold-based strategy is defined by absolute or relative deviation.</p>\n\n<h4>\n  \n  \n  1. Absolute Deviation\n</h4>\n\n<p>Measures the simple difference (in percentage points) between current and target allocation.</p>\n\n<p><strong>Formula</strong>:<br><br>\n\n\n</p>\n<div class=\"katex-element\">\n  <span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">Absolute¬†Deviation=Current¬†Weight‚àíTarget¬†Weight\n\\text{Absolute Deviation} = \\text{Current Weight} - \\text{Target Weight}\n</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord text\"><span class=\"mord\">Absolute¬†Deviation</span></span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord text\"><span class=\"mord\">Current¬†Weight</span></span><span class=\"mspace\"></span><span class=\"mbin\">‚àí</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord text\"><span class=\"mord\">Target¬†Weight</span></span></span></span></span></span>\n</div>\n\n\n<p><strong>Example</strong>:  </p>\n\n<ul>\n<li>Target: 40% bonds\n</li>\n<li>Current: 45% bonds\n</li>\n<li>\n<strong>Deviation</strong>: +5% (45% - 40%)</li>\n</ul>\n\n<h5>\n  \n  \n  When to Use?\n</h5>\n\n<p>‚úî Best for <strong>fixed rebalancing bands</strong> (e.g., \"rebalance if ¬±5% from target\")<br>\n‚úî Simple for balanced portfolios (e.g., 60/40 stocks/bonds)</p>\n\n\n<h4>\n  \n  \n  2. Relative Deviation\n</h4>\n\n<p>Measures deviation <strong>as a percentage of the target weight</strong>.</p>\n\n<p><strong>Formula</strong>:<br><br>\n\n</p>\n<div class=\"katex-element\">\n  <span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">Relative¬†Deviation=Current¬†Weight¬†-¬†Target¬†WeightTarget¬†Weight√ó100%\n\\text{Relative Deviation} = \\frac{\\text{Current Weight - Target Weight}}{\\text{Target Weight}} \\times 100\\% \n</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord text\"><span class=\"mord\">Relative¬†Deviation</span></span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"><span><span class=\"pstrut\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Target¬†Weight</span></span></span></span><span><span class=\"pstrut\"></span><span class=\"frac-line\"></span></span><span><span class=\"pstrut\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Current¬†Weight¬†-¬†Target¬†Weight</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"></span><span class=\"mbin\">√ó</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">100%</span></span></span></span></span>\n</div>\n\n\n<p><strong>Example</strong>:  </p>\n\n<ul>\n<li>Target: 10% gold\n</li>\n<li>Current: 12% gold\n</li>\n<li>\n<strong>Deviation</strong>: +20% ( \n<span class=\"katex-element\">\n  <span class=\"katex\"><span class=\"katex-mathml\">12%‚àí10%10%\\frac{12\\%-10\\%}{10\\%}</span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"><span><span class=\"pstrut\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">10%</span></span></span></span><span><span class=\"pstrut\"></span><span class=\"frac-line\"></span></span><span><span class=\"pstrut\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">12%</span><span class=\"mbin mtight\">‚àí</span><span class=\"mord mtight\">10%</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>\n</span>\n )</li>\n</ul>\n\n<h5>\n  \n  \n  When to Use?\n</h5>\n\n<p>‚úî Better for <strong>small allocations</strong> (e.g., 2% shift in 10% target = 20% relative change)<br>\n‚úî Common in <strong>tactical allocation</strong> (sector tilts, alternative assets)</p>\n\n\n<h4>\n  \n  \n  Key Comparison\n</h4>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Scenario</th>\n<th>Absolute Deviation</th>\n<th>Relative Deviation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Target 50%, Current 55%</td>\n<td>+5%</td>\n<td><strong>+10%</strong></td>\n</tr>\n<tr>\n<td>Target 10%, Current 12%</td>\n<td>+2%</td>\n<td><strong>+20%</strong></td>\n</tr>\n</tbody>\n</table></div>\n\n<ul>\n<li>\n<strong>Absolute</strong>: Treats all assets equally (5% shift triggers regardless of target weight)\n</li>\n<li>\n<strong>Relative</strong>: More sensitive for small allocations (2% shift in 10% target = 20% signal)</li>\n</ul>\n<h3>\n  \n  \n  No rebalancing (\"Buy &amp; hold\")\n</h3>\n\n<p>If an investment strategy does not include rebalancing, asset weights in the portfolio may drift arbitrarily from their initial targets.</p>\n<h2>\n  \n  \n  Why Use Okama?\n</h2>\n\n<p>Okama is an open-source Python library for investment portfolio analysis. It provides tools for:</p>\n\n<ul>\n<li>Portfolio construction and analysis</li>\n<li>Asset allocation and rebalancing</li>\n<li>Risk and performance metrics</li>\n<li>Visualization</li>\n<li>All approaches comply with CFA guidelines</li>\n</ul>\n\n<p>A detailed description of the Okama library can be found in the <a href=\"https://dev.to/chilango74/open-source-in-finance-okama-project-cp7\">previous article</a>.<br>\nLet‚Äôs dive into a practical example.</p>\n<h2>\n  \n  \n  Setting Up\n</h2>\n\n<p>First, install Okama via pip:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pip install okama\n</code></pre>\n\n</div>\n\n\n\n<p>Import packages:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">warnings</span>\n\n<span class=\"n\">warnings</span><span class=\"p\">.</span><span class=\"nf\">filterwarnings</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">ignore</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">figure.figsize</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">12.0</span><span class=\"p\">,</span> <span class=\"mf\">6.0</span><span class=\"p\">]</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">okama</span> <span class=\"k\">as</span> <span class=\"n\">ok</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n\n<span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">.</span><span class=\"n\">float_format</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">{:,.5f}</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nb\">format</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Setting a rebalancing strategy\n</h2>\n\n<p>The <code>Rebalance</code> class is used to configure rebalancing strategies.<br><br>\nA basic calendar-based portfolio rebalancing strategy (executed annually) can be configured as follows:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\">#  set up a calendar-based rebalancing strategy where the period is 1 year\n</span><span class=\"n\">reb_calendar</span> <span class=\"o\">=</span> <span class=\"n\">ok</span><span class=\"p\">.</span><span class=\"nc\">Rebalance</span><span class=\"p\">(</span><span class=\"n\">period</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">year</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  \n</code></pre>\n\n</div>\n\n\n\n<p>Okama works with montly data series. If the rebalancing period is equal to a month we have the classic Markowitz situation with always rebalanced portfolio where the weights do not deviate from the target.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">reb_calendar_month</span> <span class=\"o\">=</span> <span class=\"n\">ok</span><span class=\"p\">.</span><span class=\"nc\">Rebalance</span><span class=\"p\">(</span>\n    <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">month</span><span class=\"sh\">\"</span><span class=\"p\">,</span>  <span class=\"c1\">#  set up a calendar-based rebalancing strategy where the period is 1 month\n</span>    <span class=\"n\">abs_deviation</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">rel_deviation</span><span class=\"o\">=</span><span class=\"bp\">None</span>\n    <span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The same for a rebalancing bands (threshold-based) strategy with 5% absolute deviation:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\">#  set up a rebalancing bands strategy with allowed absolute deviation 5%\n</span><span class=\"n\">reb_bands_abs</span> <span class=\"o\">=</span> <span class=\"n\">ok</span><span class=\"p\">.</span><span class=\"nc\">Rebalance</span><span class=\"p\">(</span>\n    <span class=\"n\">abs_deviation</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>\n<span class=\"p\">)</span> \n</code></pre>\n\n</div>\n\n\n\n<p>The strategy with relative deviation 10%:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\">#  set up a rebalancing bands strategy with allowed relative deviation 10%\n</span><span class=\"n\">reb_bands_rel</span> <span class=\"o\">=</span> <span class=\"n\">ok</span><span class=\"p\">.</span><span class=\"nc\">Rebalance</span><span class=\"p\">(</span>\n    <span class=\"n\">rel_deviation</span><span class=\"o\">=</span><span class=\"mf\">0.10</span>\n<span class=\"p\">)</span>  \n</code></pre>\n\n</div>\n\n\n\n<p>All rebalancing strategies can be combined:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">reb</span> <span class=\"o\">=</span> <span class=\"n\">ok</span><span class=\"p\">.</span><span class=\"nc\">Rebalance</span><span class=\"p\">(</span><span class=\"n\">period</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">half-year</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">abs_deviation</span><span class=\"o\">=</span><span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"n\">rel_deviation</span><span class=\"o\">=</span><span class=\"mf\">0.10</span><span class=\"p\">)</span>\n<span class=\"n\">reb</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>period           half-year\nabs_deviation      0.15000\nrel_deviation      0.10000\ndtype: object\n</code></pre>\n\n</div>\n\n<p>In hybrid strategies, a calendar principle is applied (for example, once a year). But rebalancing triggers only if the deviation in weight of one of the assets exceeds the condition. This resembles how it happens in real investor life.</p>\n\n<p>To configure a strategy without rebalancing:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">no_reb</span> <span class=\"o\">=</span> <span class=\"n\">ok</span><span class=\"p\">.</span><span class=\"nc\">Rebalance</span><span class=\"p\">(</span><span class=\"n\">period</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">none</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">no_reb</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>period           none\nabs_deviation    None\nrel_deviation    None\ndtype: object\n</code></pre>\n\n</div>\n<h2>\n  \n  \n  Rebalancing strategies in Portfolio\n</h2>\n\n<p>All rebalancing strategies are available in <code>Portfolio</code> class of okama and can be used for backtesting or forecasting. In okama all rebalancings occure in the end of period (the last day of month, last month of year etc.)</p>\n\n<p>The condition for rebalancing bands is verified in the end of every month as okama uses monthly data.</p>\n<h3>\n  \n  \n  60/40 Portfolio\n</h3>\n\n<p>What does the 'ideal portfolio' look like? From the perspective of risk control, in an 'ideal' portfolio, the proportions of the assets should be constants.  </p>\n\n<p>Let's set up a simple 60/40 portfolio with popular bonds and stocks ETFs.<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">target_weights</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.60</span><span class=\"p\">,</span> <span class=\"mf\">0.40</span><span class=\"p\">]</span>\n<span class=\"n\">pf2</span> <span class=\"o\">=</span> <span class=\"n\">ok</span><span class=\"p\">.</span><span class=\"nc\">Portfolio</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">AGG.US</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">SPY.US</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n    <span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"n\">target_weights</span><span class=\"p\">,</span>\n    <span class=\"n\">last_date</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">2025-06</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">ccy</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">USD</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">rebalancing_strategy</span><span class=\"o\">=</span><span class=\"n\">reb_calendar_month</span><span class=\"p\">,</span>  <span class=\"c1\"># always rebalanced\n</span>    <span class=\"n\">inflation</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">pf2</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>symbol                        portfolio_8100.PF\nassets                         [AGG.US, SPY.US]\nweights                              [0.6, 0.4]\nrebalancing_period                         month\nrebalancing_abs_deviation                  None\nrebalancing_rel_deviation                  None\ncurrency                                    USD\ninflation                                  None\nfirst_date                              2003-10\nlast_date                               2025-06\nperiod_length                21 years, 9 months\ndtype: object\n</code></pre>\n\n</div>\n\n<p><code>Portfolio.weights_ts</code> property shows how the portfolio weights changed in the past. For this set of securities, 21 years of historical data are available.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">weights_no_rebalancing</span> <span class=\"o\">=</span> <span class=\"n\">pf2</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span>\n<span class=\"n\">weights_no_rebalancing</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">();</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7ctnqk2avfo70g5crbtf.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7ctnqk2avfo70g5crbtf.png\" alt=\"Assets weights in always rebalanced portfolio\" width=\"800\" height=\"420\"></a></p>\n\n<p>And this is exactly how it has always been presented in the classical Modern Portfolio Theory (MPT) of Markowitz. However, in real live the weights changes.</p>\n\n<p>The opposite case is when the weights change without constraints (not rebalanced portfolio).<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># change the rebalancing strategy\n</span><span class=\"n\">pf2</span><span class=\"p\">.</span><span class=\"n\">rebalancing_strategy</span> <span class=\"o\">=</span> <span class=\"n\">no_reb</span>\n<span class=\"c1\"># plot the weights\n</span><span class=\"n\">pf2</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">();</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fn7uju4ykjmbc3hfu846n.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fn7uju4ykjmbc3hfu846n.png\" alt=\"60/40 portfolio weights time series without rebalancing\" width=\"800\" height=\"428\"></a></p>\n\n<p>Over several years, the conservative portfolio became aggressive as stock allocations grew.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">pf2</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span> <span class=\"o\">-</span> <span class=\"n\">target_weights</span><span class=\"p\">)[</span><span class=\"sh\">\"</span><span class=\"s\">SPY.US</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"nf\">max</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>np.float64(0.36386072210732423)\n</code></pre>\n\n</div>\n\n<p>The weights deviate 36% from the initial allocation.</p>\n\n<p>We can switch the rebalancing strategy in an existing portfolio to calendar-based rebalancing (annual frequency) and try to keep the risk ander control.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">pf2</span><span class=\"p\">.</span><span class=\"n\">rebalancing_strategy</span> <span class=\"o\">=</span> <span class=\"n\">reb_calendar</span>\n<span class=\"n\">pf2</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>symbol                        portfolio_8100.PF\nassets                         [AGG.US, SPY.US]\nweights                              [0.6, 0.4]\nrebalancing_period                         year\nrebalancing_abs_deviation                  None\nrebalancing_rel_deviation                  None\ncurrency                                    USD\ninflation                                  None\nfirst_date                              2003-10\nlast_date                               2025-06\nperiod_length                21 years, 9 months\ndtype: object\n</code></pre>\n\n</div>\n\n<p><code>Portfolio.rebalancing_events</code> property shows the rebalancing events on the historical data:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">pf2</span><span class=\"p\">.</span><span class=\"n\">rebalancing_events</span>\n<span class=\"n\">ev</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>2003-12    calendar\n2004-12    calendar\n2005-12    calendar\n2006-12    calendar\n2007-12    calendar\n2008-12    calendar\n2009-12    calendar\n2010-12    calendar\n2011-12    calendar\n2012-12    calendar\n2013-12    calendar\n2014-12    calendar\n2015-12    calendar\n2016-12    calendar\n2017-12    calendar\n2018-12    calendar\n2019-12    calendar\n2020-12    calendar\n2021-12    calendar\n2022-12    calendar\n2023-12    calendar\n2024-12    calendar\nFreq: M, dtype: object\n</code></pre>\n\n</div>\n\n<p>There were 22 rebalancing events:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"n\">shape</span>  <span class=\"c1\"># 22 rebalancing events\n</span></code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>(22,)\n</code></pre>\n\n</div>\n\n<p>We can plot all of them to see when rebalances occurred.:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">gca</span><span class=\"p\">()</span>\n<span class=\"n\">pf2</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">vlines</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">ev</span><span class=\"p\">[</span><span class=\"n\">ev</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">calendar</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">blue</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">--</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Rebalancing events</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">set_ylim</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">legend</span><span class=\"p\">();</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5l26y8279zcw3wup1hh2.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5l26y8279zcw3wup1hh2.png\" alt=\"60/40 portfolio calendar rebalancing events\" width=\"800\" height=\"416\"></a></p>\n\n<p>Let's see top 5 weights devations:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">pf2</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span> <span class=\"o\">-</span> <span class=\"n\">target_weights</span><span class=\"p\">)[</span><span class=\"sh\">\"</span><span class=\"s\">SPY.US</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"nf\">nlargest</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>2008-12   0.11913\n2008-11   0.10794\n2008-10   0.08644\n2013-12   0.07366\n2021-12   0.06630\nFreq: M, Name: SPY.US, dtype: float64\n</code></pre>\n\n</div>\n\n<p>The maximum asset weight deviation occurred in 2008 during the financial crisis, reaching almost 12%. This was significantly lower than in the non-rebalanced scenario.</p>\n\n<p>Let's see what happens if we set the rebalancing bands with an absolute limit of 5%:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">pf2</span><span class=\"p\">.</span><span class=\"n\">rebalancing_strategy</span> <span class=\"o\">=</span> <span class=\"n\">reb_bands_abs</span>\n<span class=\"n\">pf2</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>symbol                        portfolio_8100.PF\nassets                         [AGG.US, SPY.US]\nweights                              [0.6, 0.4]\nrebalancing_period                         none\nrebalancing_abs_deviation               0.05000\nrebalancing_rel_deviation                  None\ncurrency                                    USD\ninflation                                  None\nfirst_date                              2003-10\nlast_date                               2025-06\nperiod_length                21 years, 9 months\ndtype: object\n</code></pre>\n\n</div>\n\n<p>Now the number of rebalancing events is 13 now.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>ev = pf2.rebalancing_events\nev\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>2005-11    abs\n2008-10    abs\n2009-01    abs\n2009-09    abs\n2011-04    abs\n2011-09    abs\n2012-03    abs\n2013-10    abs\n2016-11    abs\n2018-01    abs\n2021-02    abs\n2021-12    abs\n2024-03    abs\nFreq: M, dtype: object\n</code></pre>\n\n</div>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev</span><span class=\"p\">.</span><span class=\"n\">shape</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>(13,)\n</code></pre>\n\n</div>\n\n<p>13 rebalancings occurred during the historical period - fewer than the 22 required under calendar-based rebalancing. In real-world finance, each rebalancing incurs costs (brokerage commissions, taxes). This represents substantial savings...<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">gca</span><span class=\"p\">()</span>\n<span class=\"n\">pf2</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">vlines</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">ev</span><span class=\"p\">[</span><span class=\"n\">ev</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">abs</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">blue</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">--</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Rebalancing events</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">set_ylim</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">legend</span><span class=\"p\">();</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Filvqjapwpzbzb1a22b4b.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Filvqjapwpzbzb1a22b4b.png\" alt=\"60/40 portfolio rebalancing events for 5% abs deviation\" width=\"800\" height=\"416\"></a><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">pf2</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span> <span class=\"o\">-</span> <span class=\"n\">target_weights</span><span class=\"p\">)[</span><span class=\"sh\">\"</span><span class=\"s\">SPY.US</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"nf\">nlargest</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>2008-10   0.06851\n2018-01   0.06004\n2021-12   0.05638\n2013-10   0.05638\n2024-03   0.05448\nFreq: M, Name: SPY.US, dtype: float64\n</code></pre>\n\n</div>\n\n<p>Weight deviations are now under control. The maximum deviation reached 6.9% - nearly half of what occurred with calendar rebalancing. Interestingly, this still exceeds the strategy's 5% limit. This occurs because okama checks rebalancing conditions at month-end (using monthly data). Within a single month, asset weights can drift beyond the strategy's prescribed limits.</p>\n\n<h3>\n  \n  \n  3 assets Portfolio with small allocation\n</h3>\n\n<p>We can test the same rebalancing strategy with absolute weight deviation limits in a 3-asset portfolio, where one asset (gold) has just a 5% allocation.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># set target weights for the assets\n</span><span class=\"n\">target_weights3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.60</span><span class=\"p\">,</span> <span class=\"mf\">0.35</span><span class=\"p\">,</span> <span class=\"mf\">0.05</span><span class=\"p\">]</span>\n<span class=\"c1\"># set the rebalancing strategy\n</span><span class=\"n\">rs3</span> <span class=\"o\">=</span> <span class=\"n\">ok</span><span class=\"p\">.</span><span class=\"nc\">Rebalance</span><span class=\"p\">(</span>\n    <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">none</span><span class=\"sh\">\"</span><span class=\"p\">,</span> \n    <span class=\"n\">abs_deviation</span><span class=\"o\">=</span><span class=\"mf\">0.10</span><span class=\"p\">,</span> \n    <span class=\"n\">rel_deviation</span><span class=\"o\">=</span><span class=\"bp\">None</span>\n    <span class=\"p\">)</span>\n\n<span class=\"c1\"># make a portfolio with 3 assets\n</span><span class=\"n\">pf3</span> <span class=\"o\">=</span> <span class=\"n\">ok</span><span class=\"p\">.</span><span class=\"nc\">Portfolio</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">SP500TR.INDX</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">VBMFX.US</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">GC.COMM</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n    <span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"n\">target_weights3</span><span class=\"p\">,</span>\n    <span class=\"n\">ccy</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">USD</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">rebalancing_strategy</span><span class=\"o\">=</span><span class=\"n\">rs3</span><span class=\"p\">,</span>\n    <span class=\"n\">inflation</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">pf3</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>symbol                                       portfolio_1335.PF\nassets                       [SP500TR.INDX, VBMFX.US, GC.COMM]\nweights                                      [0.6, 0.35, 0.05]\nrebalancing_period                                        none\nrebalancing_abs_deviation                              0.10000\nrebalancing_rel_deviation                                 None\ncurrency                                                   USD\ninflation                                                 None\nfirst_date                                             1988-02\nlast_date                                              2025-06\nperiod_length                               37 years, 5 months\ndtype: object\n</code></pre>\n\n</div>\n\n<p>During backtesting, the rebalancing condition was triggered 8 times.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev3</span> <span class=\"o\">=</span> <span class=\"n\">pf3</span><span class=\"p\">.</span><span class=\"n\">rebalancing_events</span>\n<span class=\"n\">ev3</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>1995-07    abs\n1997-07    abs\n2002-09    abs\n2007-01    abs\n2008-10    abs\n2013-12    abs\n2018-08    abs\n2023-06    abs\nFreq: M, dtype: object\n</code></pre>\n\n</div>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev3</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>np.int64(8)\n</code></pre>\n\n</div>\n\n<p>We can see these rebalancing events in the chart.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">gca</span><span class=\"p\">()</span>\n<span class=\"n\">pf3</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">vlines</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">ev3</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">blue</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">--</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Rebalancing by abs</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">set_ylim</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">legend</span><span class=\"p\">();</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fkbxqsqdugqa5omsmyk2l.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fkbxqsqdugqa5omsmyk2l.png\" alt=\"3 assets portfolio with absolute deviation rebalancing bands\" width=\"800\" height=\"416\"></a></p>\n\n<p>However there were situations when the deviation for gold was large. The max deviation is 4,3% which is almost double (!) from the target allocation.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">pf3</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span> <span class=\"o\">-</span> <span class=\"n\">target_weights3</span><span class=\"p\">).</span><span class=\"nf\">max</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Symbols\nSP500TR.INDX   0.10438\nVBMFX.US       0.10640\nGC.COMM        0.04257\ndtype: float64\n</code></pre>\n\n</div>\n\n<p>In this case we should add relative deviation band to control better the allocaction for gold.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">pf3</span><span class=\"p\">.</span><span class=\"n\">rebalancing_strategy</span> <span class=\"o\">=</span> <span class=\"n\">ok</span><span class=\"p\">.</span><span class=\"nc\">Rebalance</span><span class=\"p\">(</span>\n    <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">none</span><span class=\"sh\">\"</span><span class=\"p\">,</span> \n    <span class=\"n\">abs_deviation</span><span class=\"o\">=</span><span class=\"mf\">0.10</span><span class=\"p\">,</span> \n    <span class=\"n\">rel_deviation</span><span class=\"o\">=</span><span class=\"mf\">0.30</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The number of rebalancing increased to 14.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev3</span> <span class=\"o\">=</span> <span class=\"n\">pf3</span><span class=\"p\">.</span><span class=\"n\">rebalancing_events</span>\n<span class=\"n\">ev3</span><span class=\"p\">.</span><span class=\"n\">shape</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>(14,)\n</code></pre>\n\n</div>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev3</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>1989-05    rel\n1992-04    rel\n1996-06    rel\n1997-07    rel\n1999-01    rel\n2002-07    abs\n2006-01    rel\n2008-01    rel\n2008-12    abs\n2011-07    rel\n2013-06    rel\n2017-10    abs\n2021-08    abs\n2025-03    rel\nFreq: M, dtype: object\n</code></pre>\n\n</div>\n\n<p>Now we have 10 rebalancings by relative band and only 4 by absolute.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev3</span><span class=\"p\">[</span><span class=\"n\">ev3</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">rel</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"nf\">count</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>np.int64(10)\n</code></pre>\n\n</div>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev3</span><span class=\"p\">[</span><span class=\"n\">ev3</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">abs</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"nf\">count</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>np.int64(4)\n</code></pre>\n\n</div>\n\n<p>New rebalancing events are market with green color in the chart.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">gca</span><span class=\"p\">()</span>\n<span class=\"n\">pf3</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">vlines</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">ev3</span><span class=\"p\">[</span><span class=\"n\">ev3</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">abs</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">blue</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">--</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Rebalancing by abs</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">vlines</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">ev3</span><span class=\"p\">[</span><span class=\"n\">ev3</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">rel</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">green</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">--</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Rebalancing by rel</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">set_ylim</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">legend</span><span class=\"p\">();</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxqdimz8q2nrg8mix8m5b.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxqdimz8q2nrg8mix8m5b.png\" alt=\"3 assets portfolio with absolute and relative deviation rebalancing bands\" width=\"800\" height=\"416\"></a></p>\n\n<p>Now the max deviation of gold is 2,2%. And it looks better.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">pf3</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span> <span class=\"o\">-</span> <span class=\"n\">target_weights3</span><span class=\"p\">).</span><span class=\"nf\">max</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Symbols\nSP500TR.INDX   0.11944\nVBMFX.US       0.11290\nGC.COMM        0.02217\ndtype: float64\n</code></pre>\n\n</div>\n\n<p>We can test an alternative approach: implementing calendar-based rebalancing that only triggers when absolute or relative deviation thresholds are breached. This hybrid method is commonly used in practice, eliminating the need for constant weight monitoring. Instead, investors simply review their allocation once a year (or once a half-year).<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">pf3</span><span class=\"p\">.</span><span class=\"n\">rebalancing_strategy</span> <span class=\"o\">=</span> <span class=\"n\">ok</span><span class=\"p\">.</span><span class=\"nc\">Rebalance</span><span class=\"p\">(</span>\n    <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">year</span><span class=\"sh\">\"</span><span class=\"p\">,</span> \n    <span class=\"n\">abs_deviation</span><span class=\"o\">=</span><span class=\"mf\">0.10</span><span class=\"p\">,</span> \n    <span class=\"n\">rel_deviation</span><span class=\"o\">=</span><span class=\"mf\">0.20</span>\n<span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The number of rebalancing events has increase by 2.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev3</span> <span class=\"o\">=</span> <span class=\"n\">pf3</span><span class=\"p\">.</span><span class=\"n\">rebalancing_events</span>\n<span class=\"n\">ev3</span><span class=\"p\">.</span><span class=\"n\">shape</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>(16,)\n</code></pre>\n\n</div>\n\n<p>In the events table we can see that rebalncings happen only in december.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev3</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>1989-12    rel\n1991-12    rel\n1995-12    rel\n1997-12    rel\n1999-12    rel\n2001-12    rel\n2002-12    rel\n2006-12    rel\n2007-12    rel\n2008-12    abs\n2011-12    rel\n2013-12    abs\n2015-12    rel\n2019-12    rel\n2021-12    rel\n2024-12    rel\nFreq: M, dtype: object\n</code></pre>\n\n</div>\n\n<p>Most of them are triggered by the relative band. If one feel safe with larger deviations the number of events can be reduced by adjusting the <code>rel_deviation</code> parameter.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev3</span><span class=\"p\">[</span><span class=\"n\">ev3</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">rel</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"nf\">count</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>np.int64(14)\n</code></pre>\n\n</div>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">ev3</span><span class=\"p\">[</span><span class=\"n\">ev3</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">abs</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"nf\">count</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>np.int64(2)\n</code></pre>\n\n</div>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">gca</span><span class=\"p\">()</span>\n<span class=\"n\">pf3</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">vlines</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">ev3</span><span class=\"p\">[</span><span class=\"n\">ev3</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">abs</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">blue</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">--</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Rebalancing by abs</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">vlines</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">ev3</span><span class=\"p\">[</span><span class=\"n\">ev3</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">rel</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">green</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">--</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Rebalancing by rel</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">set_ylim</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">legend</span><span class=\"p\">();</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F6fxaux9chgi8xnjvei7z.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F6fxaux9chgi8xnjvei7z.png\" alt=\"3 assets portfolio with hybrid rebalancing strategy\" width=\"800\" height=\"416\"></a></p>\n\n<p>In the chart we can see that there were several long periods without rebalancing.</p>\n\n<p>And the max deviation is still under control.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">pf3</span><span class=\"p\">.</span><span class=\"n\">weights_ts</span> <span class=\"o\">-</span> <span class=\"n\">target_weights3</span><span class=\"p\">).</span><span class=\"nf\">max</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Symbols\nSP500TR.INDX   0.12670\nVBMFX.US       0.11787\nGC.COMM        0.02512\ndtype: float64\n</code></pre>\n\n</div>\n\n\n\n\n<p>For a passive investment approach, where the need for portfolio rebalancing is checked without automation tools, a hybrid approach with long intervals (a year or half a year) is convenient in one sense, as it eliminates the need to constantly monitor weight deviations. On the other hand, deviation bands still prevent the portfolio from straying too far from the intended strategy.</p>\n\n<p>At the same time, the larger the allowed weight deviations, the greater the potential bonus from rebalancing in the form of additional returns.</p>\n\n<h2>\n  \n  \n  The Rebalancing Bonus: Excess Return\n</h2>\n\n<p>According to <a href=\"http://www.efficientfrontier.com/ef/996/rebal.htm\" rel=\"noopener noreferrer\">research by William Bernstein</a>, rebalancing not only provides the obvious benefit of risk control, but can also deliver a considerable excess return. This effect occurs if the portfolio contains assets with low correlation. The okama library allows to study the impact of rebalancing strategies on this excess return and optimize your asset allocation accordingly. If you‚Äôre interested in this topic, let me know‚ÄîI‚Äôll explain how to do this in the next article.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üê≥Longest Subsequence Repeated k Times ‚Äì LeetCode 2014 (C++ | Python | JavaScript)","url":"https://dev.to/om_shree_0709/longest-subsequence-repeated-k-times-leetcode-2014-c-python-javascript-9e3","date":1750995716,"author":"Om Shree","guid":173408,"unread":true,"content":"<p>Hey, algorithm adventurers! üîç‚ú®</p>\n\n<p>Today we‚Äôre unraveling a brain-bending string manipulation puzzle ‚Äî <strong>LeetCode 2014: Longest Subsequence Repeated k Times</strong>. This one's a cocktail of greedy character selection, frequency filtering, and backtracking. If you love recursion, this one will scratch that itch. Let‚Äôs dive in! üí°</p>\n\n\n\n\n<h3>\n  \n  \n  üß† Problem Summary\n</h3>\n\n<p>You're given:</p>\n\n<ul>\n<li>A string <code>s</code>\n</li>\n<li>An integer <code>k</code>\n</li>\n</ul>\n\n<p>You must find the <strong>longest subsequence</strong> that:</p>\n\n<ol>\n<li>Can be repeated <code>k</code> times (i.e., <code>seq * k</code>) and still be a subsequence of <code>s</code>.</li>\n<li>Is lexicographically the <strong>largest</strong> if multiple options exist.</li>\n</ol>\n\n<p>Return the resulting subsequence or an empty string if none exists.</p>\n\n\n\n\n<h3>\n  \n  \n  üß© Intuition\n</h3>\n\n<p>This problem is a combination of:</p>\n\n<ul>\n<li>\n<strong>Character frequency analysis</strong>: If a character appears less than <code>k</code> times, it cannot contribute.</li>\n<li>\n<strong>Backtracking</strong>: Try constructing subsequences in reverse lexicographic order (<code>'z' ‚Üí 'a'</code>).</li>\n<li>\n<strong>Validation</strong>: Check whether a given sequence repeated <code>k</code> times is still a subsequence of <code>s</code>.</li>\n</ul>\n\n<p>By pruning unqualified characters and recursively building candidates, we can search efficiently.</p>\n\n\n\n\n<h3>\n  \n  \n  üõ†Ô∏è Approach\n</h3>\n\n<ol>\n<li>Count the frequency of all characters in <code>s</code>.</li>\n<li>Filter out characters that appear fewer than <code>k</code> times.</li>\n<li>Use backtracking to try adding characters (from <code>'z'</code> to <code>'a'</code>) to form a candidate <code>seq</code>.</li>\n<li>For each <code>seq</code>, check whether <code>seq * k</code> is a valid subsequence of <code>s</code>.</li>\n<li>Track the longest valid result.</li>\n</ol>\n\n\n\n\n<h3>\n  \n  \n  üßÆ C++ Code\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight cpp\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"n\">string</span> <span class=\"n\">longestSubsequenceRepeatedK</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">cnts</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">cnts</span><span class=\"p\">[</span><span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">];</span>\n\n        <span class=\"n\">string</span> <span class=\"n\">new_s</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cnts</span><span class=\"p\">[</span><span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"n\">new_s</span> <span class=\"o\">+=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">string</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">curr</span><span class=\"p\">;</span>\n        <span class=\"n\">backtrack</span><span class=\"p\">(</span><span class=\"n\">new_s</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">curr</span><span class=\"p\">,</span> <span class=\"n\">cnts</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"k\">private</span><span class=\"o\">:</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">backtrack</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">string</span><span class=\"o\">&amp;</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"o\">&amp;</span> <span class=\"n\">curr</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">cnts</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"o\">&amp;</span> <span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">curr</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"p\">;</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"sc\">'z'</span><span class=\"p\">;</span> <span class=\"n\">c</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">'a'</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cnts</span><span class=\"p\">[</span><span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"n\">cnts</span><span class=\"p\">[</span><span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n            <span class=\"n\">curr</span> <span class=\"o\">+=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n            <span class=\"n\">backtrack</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">curr</span><span class=\"p\">,</span> <span class=\"n\">cnts</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">);</span>\n            <span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">pop_back</span><span class=\"p\">();</span>\n            <span class=\"n\">cnts</span><span class=\"p\">[</span><span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">bool</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">string</span><span class=\"o\">&amp;</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">string</span><span class=\"o\">&amp;</span> <span class=\"n\">curr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"n\">curr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n                    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  üíª JavaScript Code\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">longestSubsequenceRepeatedK</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"nc\">Array</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">).</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">ch</span> <span class=\"k\">of</span> <span class=\"nx\">s</span><span class=\"p\">)</span> <span class=\"nx\">count</span><span class=\"p\">[</span><span class=\"nx\">ch</span><span class=\"p\">.</span><span class=\"nf\">charCodeAt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">97</span><span class=\"p\">]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">filtered</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">s</span><span class=\"p\">].</span><span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"nx\">ch</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">count</span><span class=\"p\">[</span><span class=\"nx\">ch</span><span class=\"p\">.</span><span class=\"nf\">charCodeAt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">97</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"nx\">k</span><span class=\"p\">).</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"dl\">\"\"</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">backtrack</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">curr</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nf\">isValid</span><span class=\"p\">(</span><span class=\"nx\">filtered</span><span class=\"p\">,</span> <span class=\"nx\">curr</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">curr</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">curr</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">curr</span> <span class=\"o\">&gt;</span> <span class=\"nx\">result</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">curr</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"mi\">25</span><span class=\"p\">;</span> <span class=\"nx\">c</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">c</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">count</span><span class=\"p\">[</span><span class=\"nx\">c</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"nx\">k</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"nx\">count</span><span class=\"p\">[</span><span class=\"nx\">c</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"nx\">k</span><span class=\"p\">;</span>\n            <span class=\"nf\">backtrack</span><span class=\"p\">(</span><span class=\"nx\">curr</span> <span class=\"o\">+</span> <span class=\"nb\">String</span><span class=\"p\">.</span><span class=\"nf\">fromCharCode</span><span class=\"p\">(</span><span class=\"nx\">c</span> <span class=\"o\">+</span> <span class=\"mi\">97</span><span class=\"p\">));</span>\n            <span class=\"nx\">count</span><span class=\"p\">[</span><span class=\"nx\">c</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"nx\">k</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">isValid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">,</span> <span class=\"nx\">seq</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">seq</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">ch</span> <span class=\"k\">of</span> <span class=\"nx\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">ch</span> <span class=\"o\">===</span> <span class=\"nx\">seq</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">++</span><span class=\"nx\">i</span> <span class=\"o\">===</span> <span class=\"nx\">seq</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">++</span><span class=\"nx\">count</span> <span class=\"o\">===</span> <span class=\"nx\">k</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                    <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"nf\">backtrack</span><span class=\"p\">(</span><span class=\"dl\">\"\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  üêç Python Code\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">longestSubsequenceRepeatedK</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"n\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Counter</span>\n        <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"nc\">Counter</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n        <span class=\"n\">usable</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">c</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">s</span> <span class=\"k\">if</span> <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k</span><span class=\"p\">]</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">isValid</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">):</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">usable</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"n\">seq</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n                    <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">):</span>\n                        <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                        <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n                            <span class=\"k\">return</span> <span class=\"bp\">True</span>\n                        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">backtrack</span><span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"p\">):</span>\n            <span class=\"k\">nonlocal</span> <span class=\"n\">result</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nf\">isValid</span><span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"p\">):</span> <span class=\"k\">return</span>\n            <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">curr</span> <span class=\"o\">&gt;</span> <span class=\"n\">result</span><span class=\"p\">):</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">curr</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">)):</span>\n                <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nf\">chr</span><span class=\"p\">(</span><span class=\"nf\">ord</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n                    <span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"n\">k</span>\n                    <span class=\"nf\">backtrack</span><span class=\"p\">(</span><span class=\"n\">curr</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"p\">)</span>\n                    <span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">k</span>\n\n        <span class=\"nf\">backtrack</span><span class=\"p\">(</span><span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  üìù Key Notes\n</h3>\n\n<ul>\n<li>Uses reverse lexicographic order to prioritize larger strings first.</li>\n<li>Prunes search space by skipping characters with insufficient frequency.</li>\n<li>Efficient despite recursive structure due to aggressive filtering.</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  ‚úÖ Final Thoughts\n</h3>\n\n<p>This problem challenges your mastery over subsequences, string frequency, and recursion. While the brute force space is enormous, the smart use of pruning and backtracking makes this approach efficient and elegant.</p>\n\n<p>Drop a ‚ù§Ô∏è if this clarified the problem, and stay tuned for more deep-dive articles!</p>\n\n<p>Happy coding! üöÄ</p>\n\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (2)","url":"https://dev.to/hyperkai/string-in-python-2-5h49","date":1750995415,"author":"Super Kai (Kazuya Ito)","guid":173407,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*<a href=\"https://dev.to/hyperkai/string-in-python-1-4jmb\">My post</a> explains a string.</p>\n\n<p><a href=\"https://docs.python.org/3/library/functions.html#func-str\" rel=\"noopener noreferrer\">str()</a> can create a string with or without many kinds of objects as shown below. *<code>\\'</code> is the escape sequence to output <code>'</code>:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>object</code>(Optional-Default:<code>''</code> or <code>b''</code>):\n*Memos:\n\n<ul>\n<li>If <code>encoding</code> and/or <code>errors</code> are/is set, it must be a <a href=\"https://docs.python.org/3/glossary.html#term-bytes-like-object\" rel=\"noopener noreferrer\">bytes-like object</a> to decode it and its default value is <code>b''</code>.</li>\n<li>The uppercase <code>B</code> can also be used e.g <code>B''</code>.</li>\n</ul>\n\n\n</li>\n\n<li>The 2nd argument is <code>encoding</code>(Optional-Default:<code>'utf-8'</code>):\n*Memos:\n\n<ul>\n<li>\n<code>'utf-8'</code>, <code>'utf-7'</code>, <code>'utf-16'</code>, <code>'big5'</code>, <code>'ascii'</code>, etc can be set to it.</li>\n<li>You can see <a href=\"https://docs.python.org/3/library/codecs.html#standard-encodings\" rel=\"noopener noreferrer\">Standard Encodings</a> for more possible values.</li>\n</ul>\n\n\n</li>\n\n<li>The 3rd argument is <code>errors</code>(Optional-Default:<code>'strict'</code>):\n*Memos:\n\n<ul>\n<li>It controls encoding error with the error handlers, <code>'strict'</code>, <code>'ignore'</code>, <code>'replace'</code>, <code>'xmlcharrefreplace'</code>, <code>'backslashreplace'</code>, etc.</li>\n<li>\n<code>'strict'</code> raises <a href=\"https://docs.python.org/3/library/exceptions.html#UnicodeError\" rel=\"noopener noreferrer\">UnicodeError</a> if the character, which cannot be encoded, exists.</li>\n<li>\n<code>'ignore'</code> ignores the character which cannot be encoded.</li>\n<li>\n<code>'replace'</code> replaces the character, which cannot be encoded, with <code>ÔøΩ</code> e.g. .</li>\n<li>\n<code>'xmlcharrefreplace'</code> replaces the character, which cannot be encoded, with a XML character e.g. <code>&amp;#1105;</code>.</li>\n<li>\n<code>'backslashreplace'</code> replaces the character, which cannot be encoded, with <code>\\uxxxx</code> e.g. <code>\\u0451</code>.</li>\n<li>You can see more <a href=\"https://docs.python.org/3/library/codecs.html#error-handlers\" rel=\"noopener noreferrer\">error handlers</a>.</li>\n<li>You can create your own error handler with <a href=\"https://docs.python.org/3/library/codecs.html#codecs.register_error\" rel=\"noopener noreferrer\">codecs.register_error()</a>.\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">()</span> <span class=\"c1\"># Empty string\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">12</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"c1\"># String\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"c1\"># Integer\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"p\">)</span> <span class=\"c1\"># Floating-point number\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"o\">+</span><span class=\"mf\">3.4j</span><span class=\"p\">)</span> <span class=\"c1\"># Complex number\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"c1\"># List\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"c1\"># Tuple\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">})</span> <span class=\"c1\"># Set\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">})</span> <span class=\"c1\"># Dictionary\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span> <span class=\"c1\"># Iterator\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\"># Function\n# No errors\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">()</span> <span class=\"c1\"># Empty string\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Nothing\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">12</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"c1\"># String\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"c1\"># 12 1 2\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"c1\"># Integer\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"c1\"># 12 1 2\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"p\">)</span> <span class=\"c1\"># Floating-point number\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># 1.2 1 . 2\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"o\">+</span><span class=\"mf\">3.4j</span><span class=\"p\">)</span> <span class=\"c1\"># Complex number\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"c1\"># (1.2+3.4j) ( 1 . 2 + 3 . 4 j )\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"c1\"># List\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"c1\"># [1, 2, 3] [ 1 ,   2 ,   3 ]\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"c1\"># Tuple\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"c1\"># (1, 2, 3) ( 1 ,   2 ,   3 )\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">})</span> <span class=\"c1\"># Set\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"c1\"># {1, 2, 3} { 1 ,   2 ,   3 }\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">})</span> <span class=\"c1\"># Dictionary\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"c1\"># {'name': 'John'} { ' n a m e ' :   '\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span> <span class=\"c1\"># Iterator\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"c1\"># &lt;list_iterator object at 0x00000200F4715930&gt; &lt; l i s t _ i t e r\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"c1\"># &lt;function &lt;lambda&gt; at 0x00000200F3EA8E00&gt; &lt; f u n c t i o n  \n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"se\">\\xd1\\x91</span><span class=\"s\">ll</span><span class=\"se\">\\xcf\\x86</span><span class=\"s\">!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">strict</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">strict</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H—ëllœÜ!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">H+BFE-ll+A8Y!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-7</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H—ëllœÜ!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"se\">\\xff\\xfe</span><span class=\"s\">H</span><span class=\"se\">\\x00</span><span class=\"s\">Q</span><span class=\"se\">\\x04</span><span class=\"s\">l</span><span class=\"se\">\\x00</span><span class=\"s\">l</span><span class=\"se\">\\x00\\xc6\\x03</span><span class=\"s\">!</span><span class=\"se\">\\x00</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-16</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H—ëllœÜ!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"se\">\\xc7\\xce</span><span class=\"s\">ll</span><span class=\"se\">\\xa3</span><span class=\"s\">p!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">big5</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H—ëllœÜ!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">codecs</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">hashreplace_handler</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"nf\">return </span><span class=\"p\">((</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"sh\">'</span><span class=\"s\">#</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">)</span>\n\n<span class=\"n\">codecs</span><span class=\"p\">.</span><span class=\"nf\">register_error</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">hashreplace</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">hashreplace_handler</span><span class=\"p\">)</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"se\">\\xd1\\x91</span><span class=\"s\">ll</span><span class=\"se\">\\xcf\\x86</span><span class=\"s\">!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ignore</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># Hll!\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">replace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># HÔøΩÔøΩllÔøΩÔøΩ!\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">hashreplace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H##ll##!\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">strict</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># UnicodeDecodeError: 'ascii' codec can't decode byte 0xd1\n# in position 1: ordinal not in range(128)\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">H&amp;#1105;ll&amp;#966;!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">xmlcharrefreplace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H&amp;#1105;ll&amp;#966;!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"se\">\\\\</span><span class=\"s\">u0451ll</span><span class=\"se\">\\\\</span><span class=\"s\">u03c6!</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ascii</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">backslashreplace</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># H\\u0451ll\\u03c6!\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (1)","url":"https://dev.to/hyperkai/string-in-python-1-4jmb","date":1750995364,"author":"Super Kai (Kazuya Ito)","guid":173406,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*<a href=\"https://dev.to/hyperkai/string-in-python-2-5h49\">My post</a> explains <a href=\"https://docs.python.org/3/library/functions.html#func-str\" rel=\"noopener noreferrer\">str()</a>.</p>\n\n<p>A string:</p>\n\n<ul>\n<li>is a sequence of zero or more characters.</li>\n<li>is immutable so it cannot be changed.</li>\n<li>can be created with <code>''</code> or <code>\"\"</code> or <a href=\"https://docs.python.org/3/library/functions.html#func-str\" rel=\"noopener noreferrer\">str()</a> with or without many kinds of objects.</li>\n<li>can be enlarged with <code>*</code> and a number.</li>\n<li>can be accessed but cannot be changed by indexing or slicing.</li>\n</ul>\n\n\n\n<h1>\n  \n  \n  <em>Be careful, a huge string gets <code>I/O error</code>.</em>\n</h1>\n\n\n\n\n<p><code>''</code> or <code>\"\"</code> can create a string as shown below. *<code>\\'</code> is the escape sequence to output <code>'</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">''</span> <span class=\"c1\"># Empty string\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"</span> <span class=\"c1\"># Empty string\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Hello</span><span class=\"sh\">'</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Hello</span><span class=\"sh\">\"</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">I</span><span class=\"se\">\\'</span><span class=\"s\">m John.</span><span class=\"sh\">'</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">I</span><span class=\"sh\">'</span><span class=\"s\">m John.</span><span class=\"sh\">\"</span>\n<span class=\"c1\"># No error\n</span></code></pre>\n\n</div>\n\n\n\n<p>A string is a sequence of zero or more characters as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcde</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># abcde\n</span></code></pre>\n\n</div>\n\n\n\n<p>A string can be enlarged with <code>*</code> and a number as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abc</span><span class=\"sh\">'</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># abcabcabc\n</span></code></pre>\n\n</div>\n\n\n\n<p>Be careful, a huge string gets <code>I/O error</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abc</span><span class=\"sh\">'</span> <span class=\"o\">*</span> <span class=\"mi\">100000000</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># line 3, in OSError: [Errno 29] I/O error\n</span></code></pre>\n\n</div>\n\n\n\n<p>You can access a string by indexing or slicing as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdefgh</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># abcdefgh\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"c1\"># a b c d e f g h\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdefgh</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[::])</span>\n<span class=\"c1\"># abcdefgh\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># aceg\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># hfdb\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">:])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">::])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">::])</span>\n<span class=\"c1\"># cdefgh\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># ceg\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">::</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">::</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># ca\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"mi\">6</span><span class=\"p\">:])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n<span class=\"c1\"># abcdef\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># ace\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># h\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n<span class=\"c1\"># cdef\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># ce\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># Empty string\n</span></code></pre>\n\n</div>\n\n\n\n<p>You cannot change a string because it's immutable as shown below. *A <a href=\"https://docs.python.org/3/tutorial/datastructures.html#the-del-statement\" rel=\"noopener noreferrer\">del statement</a> can still be used to remove a variable itself:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdef</span><span class=\"sh\">'</span>\n\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">X</span><span class=\"sh\">'</span>\n<span class=\"c1\"># v[-6] = 'X'\n</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Z</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"c1\"># TypeError: 'str' object does not support item assignment\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdef</span><span class=\"sh\">'</span>\n\n<span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># del v[-6]\n</span><span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"c1\"># TypeError: 'str' object does not support item deletion\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdef</span><span class=\"sh\">'</span>\n\n<span class=\"k\">del</span> <span class=\"n\">v</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># NameError: name 'v' is not defined\n</span></code></pre>\n\n</div>\n\n\n\n<p>If you really want to change a string, use <a href=\"https://docs.python.org/3/library/functions.html#func-list\" rel=\"noopener noreferrer\">list()</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#str.join\" rel=\"noopener noreferrer\">join()</a> as shown below. *<code>join()</code> can concatenate the zero or more strings in an iterable.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdef</span><span class=\"sh\">'</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Here\n</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">X</span><span class=\"sh\">'</span>\n<span class=\"c1\"># v[-6] = 'X'\n</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Z</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">''</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Here\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># XbYZ\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">abcdef</span><span class=\"sh\">'</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Here\n</span>\n<span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># del v[-6]\n</span><span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">''</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Here\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># bcd\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 3: python data type.","url":"https://dev.to/rebecca254/day-3-python-data-type-2ppk","date":1750973415,"author":"Rebecca-254","guid":172521,"unread":true,"content":"<p>Today i went through something every programmer must understand deeply \"<strong>data types</strong>\". Not just in theory, but to use them practically with arrays (lists) and simple logic.</p>\n\n\n\n\n<h2>\n  \n  \n  so what are data types in python\n</h2>\n\n<p>In Python, I learnt that everything is an object  and every object has a type.<br>\n Data types are just the ‚Äúkind‚Äù of information your code is working with.</p>\n\n<p>Whether it‚Äôs a name, a number, a yes/no response, or even a list of items Python wants to know: ‚ÄúWhat type of data is this?‚Äù</p>\n<h2>\n  \n  \n  common data types in python\n</h2>\n\n<ol>\n<li><strong>Integer 'int'</strong></li>\n</ol>\n\n<p>This are digits. They are whole numbers either negative or positive. For example<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Points=[7][5][8][6][9]  #list of integers.\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li><strong>Float 'float'</strong></li>\n</ol>\n\n<p>This are used to show numbers with decimal points. For example<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Temperature= 36.7\n\n</code></pre>\n\n</div>\n\n\n\n<p>3.<strong>string 'str'</strong></p>\n\n<p>This is used in any text inside a quote. Can be a number, name or even emojis. For example<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Name= \"Rebecca\"\n\n</code></pre>\n\n</div>\n\n\n\n<p>4.<strong>Boolean 'bool'</strong></p>\n\n<p>This used in logic values. Either true or false. Suitable for conditions. For example<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>is-coding-cool=true \n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li><strong>List 'list'</strong></li>\n</ol>\n\n<p>This is just a collection of multiple items in a single  variable. One can mix items too. For example<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>my_list = [10, \"apple\", True, 3.5]\nprint(type(my_list))  # &lt;class 'list'&gt;\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>\n<strong>Tuples 'tuple'</strong>\nThis one is the same as list but in this case can not be changed. For example\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>my_birthdate = (2004, 6, 23)\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>\n<strong>Dictionary 'doct'</strong>\nIs just collection of key-value pairs ‚Äî like mini-databases. For example\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>student = {\"name\": \"Rebecca\", \"age\": 21}\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li><strong>Set 'set'</strong></li>\n</ol>\n\n<p>Is an unordered collection of unique values where duplicates are ignored. For example<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>unique_numbers = {1, 2, 2, 3}\n</code></pre>\n\n</div>\n\n\n\n<p>It gives 1,2,3 as the results.<br>\nFor better understanding. <br>\n<a href=\"https://www.geeksforgeeks.org/python/python-data-types/\" rel=\"noopener noreferrer\">https://www.geeksforgeeks.org/python/python-data-types/</a></p>\n\n<h2>\n  \n  \n  summary\n</h2>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F0jsf0vhhucz6e9f7rswp.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F0jsf0vhhucz6e9f7rswp.jpg\" alt=\"a summary block diagram on data tupes\" width=\"625\" height=\"729\"></a></p>\n\n\n\n\n<h2>\n  \n  \n  What I tried\n</h2>\n\n<p>I opened my VS Code and wrote simple examples for each type.<br>\nThen printed the type using type() and played with changing values. Like</p>\n\n<ol>\n<li>Adding integers and floats</li>\n<li>Joining strings</li>\n<li>Creating a list of my favorite colors\n4.Creating a dictionary for a student profile</li>\n</ol>\n\n<p>It felt great seeing Python understand what I meant just by using the right type.</p>\n\n\n\n\n<p>Thanks for reading<br>\nIf you‚Äôve just started learning Python, feel free to reach out or comment below. Let‚Äôs grow together</p>\n\n<p>GitHub: Rebecca-254</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Programming","url":"https://dev.to/darshil89/python-programming-4i9l","date":1750971200,"author":"Darshil Mahraur","guid":172490,"unread":true,"content":"<p>This is a blog post about Python programming.  Please replace this with your actual content.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üöÄ Introducing MultiMind SDK: Your All-in-One Toolkit for Fine-Tuning, RAG, Agents & More","url":"https://dev.to/multimindsdk/introducing-multimind-sdk-your-all-in-one-toolkit-for-fine-tuning-rag-agents-more-2mh8","date":1750970242,"author":"DK | MultiMind SDK | Open source AI","guid":172489,"unread":true,"content":"<blockquote>\n<p>‚úÖ No-code ready<br>\nüîí Compliance-first (GDPR, HIPAA, SOC2)<br>\nüß† Fine-tune LLMs the right way<br>\nüïπÔ∏è Build AI agents without boilerplate<br>\nüß© Modular, open-source, and production-ready</p>\n</blockquote>\n\n\n\n\n<h3>\n  \n  \n  üí° What Is MultiMind SDK?\n</h3>\n\n<p><strong>MultiMind SDK</strong> is a unified AI development framework that lets you:</p>\n\n<ul>\n<li>üõ†Ô∏è Fine-tune LLMs (LoRA, QLoRA, PEFT) with compliance</li>\n<li>üìö Build Retrieval-Augmented Generation (RAG) pipelines easily</li>\n<li>ü§ñ Create powerful AI agents and workflows‚Äîno LangChain bloat</li>\n<li>üßæ Stay compliant with built-in GDPR/HIPAA templates</li>\n<li>üß∞ Plug-and-play support for Hugging Face, Ollama, OpenAI, and more</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  üì¶ Install &amp; Go!\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>multimind-sdk\n<span class=\"c\"># Or with compliance features</span>\npip <span class=\"nb\">install </span>multimind-sdk[compliance]\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  ‚öôÔ∏è Features That Make MultiMind Shine\n</h3>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>‚úÖ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fine-tune LLMs (LoRA/QLoRA/PEFT)</td>\n<td>‚úÖ</td>\n</tr>\n<tr>\n<td>Dataset preprocessing &amp; PII removal</td>\n<td>üîú</td>\n</tr>\n<tr>\n<td>RAG pipelines in minutes</td>\n<td>‚úÖ</td>\n</tr>\n<tr>\n<td>Agent building (no LangChain needed)</td>\n<td>‚úÖ</td>\n</tr>\n<tr>\n<td>Model deployment support</td>\n<td>üîú</td>\n</tr>\n<tr>\n<td>Azure/AWS/OCI ready</td>\n<td>üîú</td>\n</tr>\n<tr>\n<td>GDPR, HIPAA, SOC2 compliance templates</td>\n<td>‚úÖ</td>\n</tr>\n<tr>\n<td>No-code GUI (coming soon via <a href=\"https://multimind.dev\" rel=\"noopener noreferrer\">MultiMindLab</a>)</td>\n<td>üîú</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n<h3>\n  \n  \n  üß† Why MultiMind SDK?\n</h3>\n\n<p>Unlike bloated or vendor-locked frameworks, <strong>MultiMind SDK</strong> is:</p>\n\n<ul>\n<li>üß© Modular ‚Äî use only what you need</li>\n<li>üîì Open-source ‚Äî community-driven forever</li>\n<li>üîê Privacy-focused ‚Äî built for regulated industries</li>\n<li>ü§ù Compatible ‚Äî supports major cloud &amp; LLM stacks</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  üåç Open-Source. Community-Led. Privacy-First.\n</h3>\n\n<p>We believe in <strong>building in the open</strong>. MultiMind SDK is entirely free to use, improve, and customize.</p>\n\n<p>üëâ Star us on GitHub: <a href=\"https://github.com/multimindlab/multimind-sdk\" rel=\"noopener noreferrer\">github.com/multimindlab/multimind-sdk</a><br>\nüëâ Support the project: <a href=\"https://opencollective.com/multimind-sdk\" rel=\"noopener noreferrer\">opencollective.com/multimind-sdk</a></p>\n\n\n\n\n<h3>\n  \n  \n  üôå Help Us Grow\n</h3>\n\n<p>Your support goes directly into:</p>\n\n<ul>\n<li>üå± Building new adapters, integrations, and tutorials</li>\n<li>üîê Keeping the SDK compliant for real-world use</li>\n<li>üß™ Expanding our open no-code platform ‚Äî <strong>MultiMindLab</strong>\n</li>\n</ul>\n\n<p><strong>Ways to contribute:</strong></p>\n\n<ul>\n<li>‚≠ê Star &amp; share the GitHub repo</li>\n<li>üõ†Ô∏è Submit issues or PRs</li>\n<li>üí∏ Back us on <a href=\"https://opencollective.com/multimind-sdk\" rel=\"noopener noreferrer\">Open Collective</a> ‚Äî even ‚Ç¨5/month helps</li>\n<li>üßë‚Äçü§ù‚Äçüßë Join our dev chats and shape the roadmap</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  üì£ Final Thoughts\n</h3>\n\n<p>MultiMind SDK isn‚Äôt just another AI tool‚Äîit‚Äôs the <strong>open infrastructure</strong> powering privacy-respecting, enterprise-ready AI.</p>\n\n<p>Be part of this movement. Let‚Äôs build AI right.<br>\nLet‚Äôs build <strong>MultiMindSDK</strong>.</p>\n\n<p>üîó <a href=\"https://github.com/multimindlab/multimind-sdk\" rel=\"noopener noreferrer\">GitHub Repo</a><br>\nüíô <a href=\"https://opencollective.com/multimind-sdk\" rel=\"noopener noreferrer\">Support on Open Collective</a><br>\nüåê <a href=\"https://multimind.dev\" rel=\"noopener noreferrer\">Website </a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Free Hugo Autotranslator for Github Pages","url":"https://dev.to/matsch1/free-hugo-autotranslator-for-github-pages-1cf7","date":1750969531,"author":"Matthias Sch√§fer","guid":172488,"unread":true,"content":"<h2>\n  \n  \n  The problem and the idea\n</h2>\n\n<p>I want to write a blog post in english or german, and I don't want translate it<br>\nmanually every time. This is much easier to maintain and obviously much less<br>\nannoying. </p>\n\n<p>So the idea is to automate this translation process. Therefore it should<br>\nautomatically detect if the post is written in german or english and translate<br>\nit to the other language.</p>\n\n<p>I like to use Github Actions to translate before deployment.<br>\nFor this I want to use free translation service.</p>\n<h2>\n  \n  \n  The translation possibilities\n</h2>\n\n<p>There are many possibilities to translate text using code. <br>\nMost of them aren't free, or have a limited length of characters.<br>\nFor example the API interface of known translation services like the <a href=\"https://www.deepl.com/en/pro#developer\" rel=\"noopener noreferrer\">DeepL API</a>, <br>\nor AI services liken OpenAI (which require a payed API key).</p>\n<h3>\n  \n  \n  Googletrans\n</h3>\n\n<p>For the first start I want to go with a free version. To do this I found the<br>\nfree python package googletrans. It is actually deprecated, but does still work<br>\nwith Python 3.12. This is ok in my case, because I can run it in Github Actions<br>\nusing an old environment.</p>\n<h2>\n  \n  \n  Hugo multlingual mode\n</h2>\n\n<p>To realize a multilingual website hugo must be prepared setup in multilingual<br>\nmode.<br>\nThe main setup is done in the <code>hugo.toml</code>.<br>\nIn my case it works best like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight toml\"><code><span class=\"py\">title</span> <span class=\"p\">=</span> <span class=\"s\">'Website title'</span>\n<span class=\"py\">theme</span> <span class=\"p\">=</span> <span class=\"s\">'PaperMod'</span>\n<span class=\"py\">defaultContentLanguage</span> <span class=\"p\">=</span> <span class=\"s\">\"de\"</span>\n<span class=\"py\">defaultContentLanguageInSubdir</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n<span class=\"py\">enableMissingTranslationPlaceholders</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n\n<span class=\"nn\">[languages]</span>\n\n<span class=\"nn\">[languages.de]</span>\n<span class=\"py\">baseURL</span> <span class=\"p\">=</span> <span class=\"s\">'https://&lt;githubUsername&gt;.github.io/&lt;reponame&gt;/de'</span>\n<span class=\"py\">languageName</span> <span class=\"p\">=</span> <span class=\"s\">\"Deutsch\"</span>\n<span class=\"py\">weight</span> <span class=\"p\">=</span> <span class=\"mi\">1</span>\n<span class=\"py\">contentDir</span> <span class=\"p\">=</span> <span class=\"s\">\"content\"</span>\n\n<span class=\"nn\">[languages.en]</span>\n<span class=\"py\">baseURL</span> <span class=\"p\">=</span> <span class=\"s\">'https://&lt;githubUsername&gt;.github.io/&lt;reponame&gt;/en'</span>\n<span class=\"py\">languageName</span> <span class=\"p\">=</span> <span class=\"s\">\"English\"</span>\n<span class=\"py\">weight</span> <span class=\"p\">=</span> <span class=\"mi\">2</span>\n<span class=\"py\">contentDir</span> <span class=\"p\">=</span> <span class=\"s\">\"content\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The markdown files are generated like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>content\n- post1\n-- index.md (original file)\n-- index.en.md\n-- index.de.md\n- post2\n-- index.md (original file)\n-- index.en.md\n-- index.de.md\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  How to translate\n</h2>\n\n<p>Realisation of the auto translation using Github Actions and python</p>\n\n<h3>\n  \n  \n  Setup of translation environment in Github Actions workflow\n</h3>\n\n<p>The first part of the Github Actions job is getting a python 3.12 environment<br>\nand install the required dependencies.<br>\nThe second part is about running the actual translation script in python and<br>\ncommit the new, generated markdown files.</p>\n\n<p>The second job is the deployment to the public directory (which contains the<br>\nhugo html files) to the gh-pages branch which can be used in Github Pages.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">translate</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-24.04</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v4</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Set up Python</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-python@v4</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">python-version</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">3.12'</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Install dependencies</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">pip install requests python-frontmatter langdetect googletrans==4.0.0-rc1</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Translate Markdown files</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">python scripts/translate_markdown.py</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Commit translated files</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">git config user.name \"github-actions\"</span>\n          <span class=\"s\">git config user.email \"github-actions@users.noreply.github.com\"</span>\n          <span class=\"s\">git add content/</span>\n          <span class=\"s\">git diff --cached --quiet || git commit -m \"Auto-translated markdown files\"</span>\n          <span class=\"s\">git push</span>\n        <span class=\"na\">continue-on-error</span><span class=\"pi\">:</span> <span class=\"kc\">true</span>\n  <span class=\"na\">deploy</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-22.04</span>\n    <span class=\"na\">needs</span><span class=\"pi\">:</span> <span class=\"s\">translate</span>\n    <span class=\"na\">env</span><span class=\"pi\">:</span>\n      <span class=\"na\">HUGO_CACHEDIR</span><span class=\"pi\">:</span> <span class=\"s\">/tmp/hugo_cache</span>\n    <span class=\"na\">concurrency</span><span class=\"pi\">:</span>\n      <span class=\"na\">group</span><span class=\"pi\">:</span> <span class=\"s\">${{ github.workflow }}-${{ github.ref }}</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v4</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">submodules</span><span class=\"pi\">:</span> <span class=\"kc\">true</span>  <span class=\"c1\"># Fetch Hugo themes (true OR recursive)</span>\n          <span class=\"na\">fetch-depth</span><span class=\"pi\">:</span> <span class=\"m\">0</span>    <span class=\"c1\"># Fetch all history for .GitInfo and .Lastmod</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Setup Hugo</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">peaceiris/actions-hugo@v3</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">hugo-version</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">latest'</span>\n          <span class=\"na\">extended</span><span class=\"pi\">:</span> <span class=\"kc\">true</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Define cache</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/cache@v4</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">path</span><span class=\"pi\">:</span> <span class=\"s\">${{ env.HUGO_CACHEDIR }}</span>\n          <span class=\"na\">key</span><span class=\"pi\">:</span> <span class=\"s\">${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}</span>\n          <span class=\"na\">restore-keys</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n            <span class=\"s\">${{ runner.os }}-hugomod-</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Build</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">hugo --minify</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Deploy</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">peaceiris/actions-gh-pages@v3</span>\n        <span class=\"na\">if</span><span class=\"pi\">:</span> <span class=\"s\">github.ref == 'refs/heads/main'</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">github_token</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.GITHUB_TOKEN }}</span>\n          <span class=\"na\">publish_dir</span><span class=\"pi\">:</span> <span class=\"s\">./public</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Auto translation\n</h3>\n\n<p>The translation script consists of the following main parts:</p>\n\n<ul>\n<li>Find markdown files</li>\n<li>Check if files changed (hash check)</li>\n<li>Identify language of markdown file</li>\n<li>Replace code blocks, shortcodes, urls, ... with placeholders (masking)</li>\n<li>Translation</li>\n<li>Unmask placeholders</li>\n<li>Save translated text into new files\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">frontmatter</span>\n<span class=\"kn\">import</span> <span class=\"n\">hashlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">re</span>\n<span class=\"kn\">from</span> <span class=\"n\">langdetect</span> <span class=\"kn\">import</span> <span class=\"n\">detect</span>\n<span class=\"kn\">from</span> <span class=\"n\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">import</span> <span class=\"n\">shutil</span>\n<span class=\"kn\">from</span> <span class=\"n\">googletrans</span> <span class=\"kn\">import</span> <span class=\"n\">Translator</span>\n\n<span class=\"n\">LANGS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">de</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">en</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n<span class=\"n\">BASE_PATH</span> <span class=\"o\">=</span> <span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">translator</span> <span class=\"o\">=</span> <span class=\"nc\">Translator</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">hash_text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">hashlib</span><span class=\"p\">.</span><span class=\"nf\">sha256</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">)).</span><span class=\"nf\">hexdigest</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">translator</span><span class=\"p\">.</span><span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"o\">=</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"n\">target</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">text</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Translation failed: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">mask_placeholders</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">placeholders</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">placeholder_id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_placeholder</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n        <span class=\"k\">nonlocal</span> <span class=\"n\">placeholder_id</span>\n        <span class=\"n\">ph</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[[000001100000</span><span class=\"si\">{</span><span class=\"n\">placeholder_id</span><span class=\"si\">}</span><span class=\"s\">]]</span><span class=\"sh\">\"</span>\n        <span class=\"n\">placeholders</span><span class=\"p\">[</span><span class=\"n\">ph</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">.</span><span class=\"nf\">group</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">placeholder_id</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">ph</span>\n\n    <span class=\"c1\"># Mask code blocks\n</span>    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">\"</span><span class=\"s\">```\n\n.*?\n\n```</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">add_placeholder</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"p\">.</span><span class=\"n\">DOTALL</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Mask inline code\n</span>    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">\"</span><span class=\"s\">`[^`]+`</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">add_placeholder</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Mask full markdown links and images\n</span>    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">\"</span><span class=\"s\">!\\[[^\\]]*\\]\\([^)]+\\)</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">add_placeholder</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>  <span class=\"c1\"># images\n</span>    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">\"</span><span class=\"s\">\\[[^\\]]+\\]\\([^)]+\\)</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">add_placeholder</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>  <span class=\"c1\"># links\n</span>\n    <span class=\"c1\"># Mask Hugo shortcodes\n</span>    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">\"</span><span class=\"s\">\\{\\{\\s*[&lt;%].*?[&gt;%]\\s*\\}\\}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">add_placeholder</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"p\">.</span><span class=\"n\">DOTALL</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Mask **_**\n</span>    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">\"</span><span class=\"s\">\\*\\*(.*?)\\*\\*</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">add_placeholder</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"p\">.</span><span class=\"n\">DOTALL</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">placeholders</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">unmask_placeholders</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">placeholders</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">ph</span><span class=\"p\">,</span> <span class=\"n\">original</span> <span class=\"ow\">in</span> <span class=\"n\">placeholders</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"n\">ph</span><span class=\"p\">,</span> <span class=\"n\">original</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">text</span>\n\n\n<span class=\"k\">for</span> <span class=\"n\">md_file</span> <span class=\"ow\">in</span> <span class=\"n\">BASE_PATH</span><span class=\"p\">.</span><span class=\"nf\">rglob</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">*.md</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">md_file</span><span class=\"p\">.</span><span class=\"n\">suffix</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">.md</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">continue</span>\n    <span class=\"k\">elif</span> <span class=\"n\">md_file</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"nf\">endswith</span><span class=\"p\">((</span><span class=\"sh\">\"</span><span class=\"s\">.de.md</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.en.md</span><span class=\"sh\">\"</span><span class=\"p\">)):</span>\n        <span class=\"k\">continue</span>  <span class=\"c1\"># skip already translated files\n</span>    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">file: </span><span class=\"si\">{</span><span class=\"n\">md_file</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Load base file\n</span>    <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">frontmatter</span><span class=\"p\">.</span><span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"n\">md_file</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"p\">.</span><span class=\"n\">content</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">detected_lang</span> <span class=\"o\">=</span> <span class=\"nf\">detect</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Could not detect language for </span><span class=\"si\">{</span><span class=\"n\">md_file</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">continue</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">detected_lang</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">LANGS</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Skipping </span><span class=\"si\">{</span><span class=\"n\">md_file</span><span class=\"si\">}</span><span class=\"s\">: unsupported language (</span><span class=\"si\">{</span><span class=\"n\">detected_lang</span><span class=\"si\">}</span><span class=\"s\">)</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">continue</span>\n\n    <span class=\"n\">other_lang</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">en</span><span class=\"sh\">\"</span> <span class=\"k\">if</span> <span class=\"n\">detected_lang</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">de</span><span class=\"sh\">\"</span> <span class=\"k\">else</span> <span class=\"sh\">\"</span><span class=\"s\">de</span><span class=\"sh\">\"</span>\n    <span class=\"n\">base_name</span> <span class=\"o\">=</span> <span class=\"n\">md_file</span><span class=\"p\">.</span><span class=\"n\">stem</span>\n    <span class=\"n\">parent_dir</span> <span class=\"o\">=</span> <span class=\"n\">md_file</span><span class=\"p\">.</span><span class=\"n\">parent</span>\n\n    <span class=\"n\">source_file</span> <span class=\"o\">=</span> <span class=\"n\">parent_dir</span> <span class=\"o\">/</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">base_name</span><span class=\"si\">}</span><span class=\"s\">.</span><span class=\"si\">{</span><span class=\"n\">detected_lang</span><span class=\"si\">}</span><span class=\"s\">.md</span><span class=\"sh\">\"</span>\n    <span class=\"n\">target_file</span> <span class=\"o\">=</span> <span class=\"n\">parent_dir</span> <span class=\"o\">/</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">base_name</span><span class=\"si\">}</span><span class=\"s\">.</span><span class=\"si\">{</span><span class=\"n\">other_lang</span><span class=\"si\">}</span><span class=\"s\">.md</span><span class=\"sh\">\"</span>\n\n    <span class=\"n\">post_hash</span> <span class=\"o\">=</span> <span class=\"nf\">hash_text</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Skip if translated file exists AND content hash hasn't changed\n</span>    <span class=\"k\">if</span> <span class=\"n\">target_file</span><span class=\"p\">.</span><span class=\"nf\">exists</span><span class=\"p\">():</span>\n        <span class=\"n\">existing_translated</span> <span class=\"o\">=</span> <span class=\"n\">frontmatter</span><span class=\"p\">.</span><span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"n\">target_file</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">existing_translated</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">base_hash</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">post_hash</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">‚úÖ Skipping </span><span class=\"si\">{</span><span class=\"n\">md_file</span><span class=\"si\">}</span><span class=\"s\">: translation up-to-date</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">üîÅ Updating translation for </span><span class=\"si\">{</span><span class=\"n\">md_file</span><span class=\"si\">}</span><span class=\"s\"> ‚Üí </span><span class=\"si\">{</span><span class=\"n\">target_file</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">üåç Translating </span><span class=\"si\">{</span><span class=\"n\">md_file</span><span class=\"si\">}</span><span class=\"s\"> ‚Üí </span><span class=\"si\">{</span><span class=\"n\">target_file</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Copy base file to language-specific name if missing\n</span>    <span class=\"n\">shutil</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">md_file</span><span class=\"p\">,</span> <span class=\"n\">source_file</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">üìÑ Copied </span><span class=\"si\">{</span><span class=\"n\">md_file</span><span class=\"si\">}</span><span class=\"s\"> ‚Üí </span><span class=\"si\">{</span><span class=\"n\">source_file</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Mask placeholders before translation\n</span>    <span class=\"n\">masked_content</span><span class=\"p\">,</span> <span class=\"n\">placeholders</span> <span class=\"o\">=</span> <span class=\"nf\">mask_placeholders</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Translate masked content\n</span>    <span class=\"n\">translated_masked_content</span> <span class=\"o\">=</span> <span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"n\">masked_content</span><span class=\"p\">,</span> <span class=\"n\">detected_lang</span><span class=\"p\">,</span> <span class=\"n\">other_lang</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">translated_masked_content</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">‚ö†Ô∏è Translation failed for </span><span class=\"si\">{</span><span class=\"n\">md_file</span><span class=\"si\">}</span><span class=\"s\"> from </span><span class=\"si\">{</span><span class=\"n\">detected_lang</span><span class=\"si\">}</span><span class=\"s\"> to </span><span class=\"si\">{</span><span class=\"n\">other_lang</span><span class=\"si\">}</span><span class=\"s\">, skipping.</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">continue</span>\n\n    <span class=\"c1\"># Unmask placeholders in translated content\n</span>    <span class=\"n\">translated_content</span> <span class=\"o\">=</span> <span class=\"nf\">unmask_placeholders</span><span class=\"p\">(</span><span class=\"n\">translated_masked_content</span><span class=\"p\">,</span> <span class=\"n\">placeholders</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Prepare translated post with metadata and base_hash\n</span>    <span class=\"n\">translated_post</span> <span class=\"o\">=</span> <span class=\"n\">frontmatter</span><span class=\"p\">.</span><span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">translated_content</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">post</span><span class=\"p\">.</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n    <span class=\"n\">translated_post</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">base_hash</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">post_hash</span>\n\n    <span class=\"c1\"># Translate title if exists\n</span>    <span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">title</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">post</span><span class=\"p\">.</span><span class=\"n\">metadata</span><span class=\"p\">:</span>\n        <span class=\"n\">translated_title</span> <span class=\"o\">=</span> <span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">title</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"n\">detected_lang</span><span class=\"p\">,</span> <span class=\"n\">other_lang</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">translated_title</span><span class=\"p\">:</span>\n            <span class=\"n\">translated_post</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">title</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">translated_title</span>\n\n    <span class=\"c1\"># Save translated file\n</span>    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">target_file</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">w</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">frontmatter</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">translated_post</span><span class=\"p\">))</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">‚úÖ Translated and saved </span><span class=\"si\">{</span><span class=\"n\">target_file</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>After the new files are commited. The push to main triggers a new hugo build.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Mastering URL Slugs: The Developer's Guide to SEO and User Experience","url":"https://dev.to/mycko22/mastering-url-slugs-the-developers-guide-to-seo-and-user-experience-gf3","date":1750967070,"author":"Michael","guid":172443,"unread":true,"content":"<p>As developers, we spend hours perfecting our code, optimizing performance, and crafting pixel-perfect designs. But there‚Äôs one tiny detail that often gets overlooked: <strong>URL slugs</strong>. Those little strings at the end of your URLs (like <code>/mastering-url-slugs</code> in this post) can make or break your site‚Äôs SEO and user experience. In this article, I‚Äôll break down why slugs matter, share practical tips for creating SEO-friendly slugs, and show you how to implement them in your projects. Let‚Äôs dive in!</p>\n\n<h2>\n  \n  \n  Why URL Slugs Matter More Than You Think\n</h2>\n\n<p>Think of a URL slug as the digital handshake between your website and its visitors. It‚Äôs the part of the URL that tells users and search engines what a page is about. A good slug is like a clear signpost: it‚Äôs concise, descriptive, and inviting. A bad slug? It‚Äôs like a cryptic code that confuses everyone.</p>\n\n<p>Here‚Äôs why slugs deserve your attention:</p>\n\n<ul>\n<li>\n<strong>SEO Boost</strong>: Search engines like Google use slugs to understand page content. A slug with relevant keywords (e.g., <code>/best-javascript-frameworks</code>) signals what‚Äôs on the page, improving your chances of ranking higher.</li>\n<li>\n<strong>User Trust</strong>: Clean, readable slugs (e.g., <code>/learn-react-basics</code>) look professional and clickable, while messy ones (e.g., <code>/p=123?cat=4</code>) scream ‚Äúsketchy‚Äù to users.</li>\n<li>\n<strong>Shareability</strong>: Ever tried sharing a URL like <code>example.com/index.php?id=789</code> on social media? Good luck. Short, meaningful slugs are easier to share and remember.</li>\n<li>\n<strong>Analytics Clarity</strong>: When tracking page performance in tools like Google Analytics, descriptive slugs make it easier to spot which content is driving traffic.</li>\n</ul>\n\n<p>When I was building my latest web project, I noticed how inconsistent slugs were slowing down my SEO efforts. Random numbers, underscores, and long strings were cluttering my URLs. That‚Äôs when I decided to get serious about slug optimization‚Äîand the results were game-changing.</p>\n\n<h2>\n  \n  \n  5 Practical Tips for Crafting SEO-Friendly Slugs\n</h2>\n\n<p>Let‚Äôs get to the good stuff: how to create slugs that work for both users and search engines. Here are five actionable tips you can apply to your next project.</p>\n\n<h3>\n  \n  \n  1. Keep It Short and Sweet\n</h3>\n\n<p>Long slugs are hard to read and dilute keyword focus. Aim for 3-5 words max. For example, <code>/optimize-url-slugs</code> is better than <code>/how-to-optimize-your-url-slugs-for-seo-and-better-user-experience</code>. Short slugs are also less likely to get truncated in search results or social shares.</p>\n\n<p><strong>Pro Tip</strong>: Strip out filler words like ‚Äúthe,‚Äù ‚Äúa,‚Äù or ‚Äúand.‚Äù Instead of <code>/the-best-coding-tips</code>, go with <code>/best-coding-tips</code>.</p>\n\n<h3>\n  \n  \n  2. Use Keywords Wisely\n</h3>\n\n<p>Include your primary keyword to signal relevance to search engines, but don‚Äôt overdo it. For a blog post about React hooks, <code>/react-hooks-tutorial</code> is perfect‚Äîclear and focused. Avoid keyword stuffing like <code>/react-hooks-learn-react-hooks-tutorial</code>, which looks spammy and confuses Google.</p>\n\n<p><strong>Pro Tip</strong>: Use tools like Google Keyword Planner or Ahrefs to find high-intent, low-competition keywords for your slugs.</p>\n\n<h3>\n  \n  \n  3. Hyphens Over Underscores\n</h3>\n\n<p>Always use hyphens (<code>-</code>) to separate words. Google treats hyphens as word separators, but underscores (<code>_</code>) are seen as part of a single word. So, <code>/web-dev-tips</code> is SEO-friendly, while <code>/web_dev_tips</code> is not.</p>\n\n<p><strong>Pro Tip</strong>: If you‚Äôre migrating an old site with underscores, set up 301 redirects to hyphenated versions to avoid losing traffic.</p>\n\n<h3>\n  \n  \n  4. Stick to Lowercase\n</h3>\n\n<p>Uppercase letters in slugs can cause duplicate content issues, as some servers treat <code>/About-Us</code> and <code>/about-us</code> as different URLs. Keep it lowercase to stay safe and consistent.</p>\n\n<p><strong>Pro Tip</strong>: In your CMS (like WordPress), double-check that your permalink settings enforce lowercase slugs automatically.</p>\n\n<h3>\n  \n  \n  5. Avoid Dates and Numbers\n</h3>\n\n<p>Slugs with dates (e.g., <code>/blog-2025-06</code>) or random numbers (e.g., <code>/post-1234</code>) can make content feel outdated or generic. Evergreen slugs like <code>/javascript-performance-tips</code> are more timeless and clickable.</p>\n\n<p><strong>Pro Tip</strong>: If your CMS auto-generates slugs with numbers, manually edit them or use a plugin to customize your URL structure.</p>\n\n<h2>\n  \n  \n  Implementing Slugs in Your Code\n</h2>\n\n<p>Now that you know the principles, let‚Äôs talk implementation. Whether you‚Äôre building a static site or a dynamic web app, here‚Äôs how to create clean slugs programmatically.</p>\n\n<h3>\n  \n  \n  Static Sites\n</h3>\n\n<p>For static sites (e.g., Gatsby or Hugo), slugs are often generated from file names or frontmatter. Make sure your file names follow the same rules: short, keyword-focused, and hyphenated. For example, name your Markdown file <code>react-hooks-tutorial.md</code> to generate <code>/react-hooks-tutorial</code>.</p>\n\n<h3>\n  \n  \n  Dynamic Sites\n</h3>\n\n<p>In dynamic apps (e.g., Node.js, Django, or Laravel), you‚Äôll need to slugify titles programmatically. Here‚Äôs a quick JavaScript example using a slugify function:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nf\">slugify</span><span class=\"p\">(</span><span class=\"nx\">text</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">text</span>\n    <span class=\"p\">.</span><span class=\"nf\">toLowerCase</span><span class=\"p\">()</span>\n    <span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sr\">/</span><span class=\"se\">[^</span><span class=\"sr\">a-z0-9</span><span class=\"se\">\\s</span><span class=\"sr\">-</span><span class=\"se\">]</span><span class=\"sr\">/g</span><span class=\"p\">,</span> <span class=\"dl\">''</span><span class=\"p\">)</span> <span class=\"c1\">// Remove special characters</span>\n    <span class=\"p\">.</span><span class=\"nf\">trim</span><span class=\"p\">()</span>\n    <span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sr\">/</span><span class=\"se\">\\s</span><span class=\"sr\">+/g</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">-</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"c1\">// Replace spaces with hyphens</span>\n    <span class=\"p\">.</span><span class=\"nf\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">);</span> <span class=\"c1\">// Keep it short</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nf\">slugify</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Mastering URL Slugs for SEO!</span><span class=\"dl\">\"</span><span class=\"p\">));</span> <span class=\"c1\">// Output: mastering-url-slugs-for-seo</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>This function strips special characters, converts to lowercase, replaces spaces with hyphens, and caps the length. You can integrate it into your CMS or backend to generate slugs from post titles automatically.</p>\n\n<p><strong>Bonus: Automate Slug Creation</strong></p>\n\n<p>If you manage a lot of content, manually creating slugs can be a pain. I built a free tool called <a href=\"https://slugmaker.com\" rel=\"noopener noreferrer\">SlugMaker</a> to automate this process. It takes any text input and spits out a clean, SEO-friendly slug in seconds. For example, pasting ‚ÄúMy Awesome Blog Post!‚Äù gives you <code>/awesome-blog-post</code>. It‚Äôs a lifesaver for keeping my projects consistent without the grunt work.<br>\nCommon Slug Mistakes to Avoid</p>\n\n<p>Even seasoned developers slip up with slugs. Here are three pitfalls to watch out for:</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Dynamic Parameters in Slugs: URLs like `/article?id=123` are terrible for SEO and usability. Always map dynamic content to descriptive slugs (e.g., `/article/mastering-url-slugs`).\nOver-Optimizing: Stuffing too many keywords into a slug can backfire, making it look spammy to Google and users.\nIgnoring Redirects: If you change a slug, set up a 301 redirect from the old URL to avoid broken links and lost traffic.\n</code></pre>\n\n</div>\n\n<p><strong>Testing and Tracking Your Slugs</strong></p>\n\n<p>Once your slugs are live, monitor their performance. Use Google Search Console to check which slugs are driving impressions and clicks. Tools like Ahrefs can help you track keyword rankings tied to your slugs. If a page isn‚Äôt performing, try tweaking the slug to better match user search intent.</p>\n\n<p>For example, I once changed a slug from <code>/coding-tips</code> to /<code>javascript-coding-tips</code> and saw a 20% boost in organic traffic because it better matched what users were searching for. Small tweaks can yield big results.</p>\n\n<p><strong>Your Turn: Slug Like a Pro</strong></p>\n\n<p>URL slugs might seem like a small detail, but they‚Äôre a powerful tool for boosting SEO, improving user experience, and making your site more professional. Start by auditing your existing URLs‚Äîare they short, keyword-focused, and hyphenated? If not, it‚Äôs time for a cleanup.</p>\n\n<p>Try implementing the slugify function above in your next project, or use a tool like SlugMaker to streamline the process. What‚Äôs your go-to strategy for creating slugs? Have you seen SEO wins from optimizing them? Drop your tips in the comments‚ÄîI‚Äôd love to hear how you‚Äôre tackling URLs in your projects!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python course: Functions","url":"https://dev.to/costa86/python-course-functions-4jga","date":1750966684,"author":"Louren√ßo Costa","guid":172442,"unread":true,"content":"<p>The concept of function in programming is derived from the mathematical concept with the same name. In mathematics, a function is a rule that maps a set of input values to a set of outputs.</p>\n\n<p>As a real-world analogy, think of a function as a vending machine. In order to use it, you select the product you want and insert the payment. Both of them can be seen as the inputs. Then the machine processes them and gives you the desired product, which can be seen as the output of the function.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmedia0.giphy.com%2Fmedia%2Fv1.Y2lkPTc5MGI3NjExcW0zc2ZzenNmN2llNjlmMTd0eTN3dHAxYnFhYXR0ZmZ1aTN6ZHQyYiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw%2FXwSKnh6Glv8l7zeX8C%2Fgiphy.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmedia0.giphy.com%2Fmedia%2Fv1.Y2lkPTc5MGI3NjExcW0zc2ZzenNmN2llNjlmMTd0eTN3dHAxYnFhYXR0ZmZ1aTN6ZHQyYiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw%2FXwSKnh6Glv8l7zeX8C%2Fgiphy.gif\" width=\"480\" height=\"400\"></a></p>\n\n<h2>\n  \n  \n  Functions in Mathematics\n</h2>\n\n<p>As a basic example:</p>\n\n<blockquote>\n<p>f(x) = x + 2 <br>\nWhere:<br>\nf: the name of the function<br>\nx: the input<br>\nx + 2: the output</p>\n</blockquote>\n\n<p>In this case, the function <em>f</em> receives a number x and returns this same number plus two (x + 2).</p>\n\n<p>Some examples of how this function can be used:</p>\n\n<blockquote>\n<p>f(1) = 3<br>\nf(2) = 4<br>\nf(10) = 12</p>\n</blockquote>\n\n<h2>\n  \n  \n  Functions in Python\n</h2>\n\n<p>In programming, these input values are known as parameters, and the output is known as return.</p>\n\n<p>This same function previously described can be represented in Python as such:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">add_two</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span> \n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># This also works \n</span><span class=\"k\">def</span> <span class=\"nf\">add_two_v2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">add_two</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>  <span class=\"c1\"># =&gt; 7 \n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">add_two_v2</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>  <span class=\"c1\"># =&gt; 7\n</span></code></pre>\n\n</div>\n\n\n\n<p>Unlike the mathematical example, in programming we usually adopt more descriptive names for functions, so that a reader can infer what the function does just by looking at its name. Using phrasal verbs is a good approach, since functions typically perform some sort of action.</p>\n\n<p>The <code>print()</code> command, that we have been using a lot throughout this series, is actually a function. It's a built-in function, which means it is natively available in any Python program.</p>\n\n<p>In order to execute a function in Python, the function needs to be followed by parentheses enclosing any necessary arguments. This is known as \"calling\" a function:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># here I am calling the print() function with \"hello\" as an argument\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">hello</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Type hints\n</h2>\n\n<p>In the previous example, the <code>add_two_v2()</code> function does the exact same thing as <code>add_two()</code>. The difference is that <code>add_two()</code> provides more explicit information by letting you know that the <code>x</code> parameter is an integer (<code>x: int</code>) and that it returns and integer as well (<code>-&gt; int</code>). This approach of specifying the types of parameters and return values is known as \"type hints\". It improves readability, and is the convention adopted in the series.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python course: Numbers","url":"https://dev.to/costa86/numbers-2i9p","date":1750965106,"author":"Louren√ßo Costa","guid":172441,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmedia3.giphy.com%2Fmedia%2Fv1.Y2lkPTc5MGI3NjExNnFmcmttanluczJjNHQ2eHhkN3ZrODlkeTFyNDdiam5kNXdldjg0NiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw%2FSEWEmCymjv8XDbsb8I%2Fgiphy.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fmedia3.giphy.com%2Fmedia%2Fv1.Y2lkPTc5MGI3NjExNnFmcmttanluczJjNHQ2eHhkN3ZrODlkeTFyNDdiam5kNXdldjg0NiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw%2FSEWEmCymjv8XDbsb8I%2Fgiphy.gif\" width=\"480\" height=\"400\"></a></p>\n\n<p>In Python, numbers can be represented as three different types:</p>\n\n<h2>\n  \n  \n  Int\n</h2>\n\n<p>Short for \"integer\". This type is used to represent whole numbers. Being positive, negative, or zero.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">123456789101112</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">45</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\"># Use type(&lt;some_variable&gt;) to return the type of a variable:\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; &lt;class 'int'&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; &lt;class 'int'&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; &lt;class 'int'&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; &lt;class 'int'&gt;\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Float\n</h2>\n\n<p>Also can be positive, negative or zero. It's used to represent decimal numbers. Floats can also be used to represent scientific notation, adopting \"e\" to indicate the power of 10.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mf\">1.50</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">48.68</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mf\">4e3</span> <span class=\"c1\"># scientific notation, equals to 4000.0 \n</span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"mf\">4e-3</span> <span class=\"c1\"># scientific notation, equals to 0.004\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; &lt;class 'float'&gt; \n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; &lt;class 'float'&gt; \n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; &lt;class 'float'&gt; \n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; &lt;class 'float'&gt; \n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; &lt;class 'float'&gt;\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Complex\n</h2>\n\n<p>A \"complex\" is a number with a real and an imaginary part, where the imaginary part is a multiple of the imaginary unit \"j\".<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mf\">5j</span> \n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mf\">5j</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">5j</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; &lt;class 'complex'&gt; \n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; &lt;class 'complex'&gt; \n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; &lt;class 'complex'&gt;\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<blockquote>\n<p>Be aware that you are eligible get a Wise card or your first international transfer, up to 500 EUR, free! I've been using their service for years and it's a great way to send/receive money abroad, creating disposable virtual cards, and more. <strong>Get it here</strong>: <a href=\"https://wise.com/invite/dic/antoniod535\" rel=\"noopener noreferrer\">Sponsored link</a>.</p>\n\n<p>By now you may have heard of ElevenLabs. Their AI voice cloning service is simply off the charts. <strong>Check them out</strong>: <a href=\"https://try.elevenlabs.io/j4qtfagxd271\" rel=\"noopener noreferrer\">Sponsored link</a>.</p>\n</blockquote>\n\n\n\n\n<p>Follow me around:<br>\n<a href=\"https://www.linkedin.com/in/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">LinkedIn</a>\n <a href=\"https://www.buymeacoffee.com/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">Buy me a coffee</a>\n <a href=\"https://github.com/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">GitHub</a>\n <a href=\"https://dev.to/costa86\" class=\"ltag_cta ltag_cta--branded\">Dev.to</a>\n </p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Create a simple REST API in python using Flask.","url":"https://dev.to/kiani0x01/create-a-simple-rest-api-in-python-using-flask-3abk","date":1750964962,"author":"Mateen Kiani","guid":172440,"unread":true,"content":"<h4>\n  \n  \n  What actually is a Rest API?\n</h4>\n\n<p>REST is an acronym for <strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer. A REST API defines a set of functions which are used to perform requests like GET, POST and PUT and receive responses via HTTP protocol.</p>\n\n<p>This was just a brief intro on what a Rest API is. Let‚Äôs create a very simple rest api in python. For this tutorial we will use flask to create our API and the reason for that is its simplicity.</p>\n\n<h4>\n  \n  \n  Step 1:\n</h4>\n\n<p>Install Flask using pip<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install</span> <span class=\"nt\">-U</span> Flask\n</code></pre>\n\n</div>\n\n\n\n<p>pip is a python package manager and is used to install any python package. To know more about pip follow <a href=\"https://pypi.org/project/pip/\" rel=\"noopener noreferrer\">this link</a>.</p>\n\n<h4>\n  \n  \n  Step 2:\n</h4>\n\n<p>Create a python file (for example file.py), open it in any text editor and write the following code<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>  \n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>  \n\n\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">)</span>  \n<span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">():</span>  \n    <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">This is home</span><span class=\"sh\">\"</span>  \n\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">127.0.0.1</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">5000</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>In this code we have imported flask and defined a function named home. Flask contains a built-in wrapper for generating routes in the form of @app.route(‚Äò/‚Äô), where @app is the name of the object containing our Flask app. With this decorator present, Flask knows that the next line (sharing the same level of indentation) will be a function containing route logic.</p>\n\n<p>Now run your python file using<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>python3 file.py\n</code></pre>\n\n</div>\n\n\n\n<p>or<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>python file.py\n</code></pre>\n\n</div>\n\n\n\n<p>On successful execution you will see a message like this in your terminal</p>\n\n<blockquote>\n<p>Serving Flask app ‚Äúrest‚Äù (lazy loading)<br><br>\nEnvironment: production<br><br>\nWARNING: This is a development server. Do not use it in a production deployment.<br><br>\nUse a production WSGI server instead.<br><br>\nDebug mode: off<br><br>\nRunning on <a href=\"http://127.0.0.1:5000/\" rel=\"noopener noreferrer\">http://127.0.0.1:5000/</a> (Press CTRL+C to quit)</p>\n</blockquote>\n\n<p>Now when you open <a href=\"http://127.0.0.1:5000/\" rel=\"noopener noreferrer\">http://127.0.0.1:5000/</a> in your browser you will see that your rest api is working.</p>\n\n<p>This is a very simple example. Now if you want to make a Post request you will have to do some more work also most of the rest APIs return json response so we will also cover that as we move ahead.</p>\n\n<h4>\n  \n  \n  Rest Api with both GET and POST request\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span>  \n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>  \n\n\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">GET</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">POST</span><span class=\"sh\">'</span><span class=\"p\">])</span>  \n<span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">():</span>  \n    <span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">GET</span><span class=\"sh\">'</span><span class=\"p\">):</span>  \n        <span class=\"k\">return</span> <span class=\"sh\">'</span><span class=\"s\">Recieved GET request at homepage</span><span class=\"sh\">'</span>  \n    <span class=\"k\">else</span><span class=\"p\">:</span>  \n        <span class=\"n\">dataposted</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">data</span>  \n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">recieved a POST request at homepage with </span><span class=\"si\">{</span><span class=\"n\">dataposted</span><span class=\"si\">}</span><span class=\"sh\">'</span>  \n\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">127.0.0.1</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">5000</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>To test whether post requests are working or not create another python file and name it whatever you want. I have named it request.py and written following code to make HTTP Post request.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">requests</span>  \n\n<span class=\"n\">postData</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">post data</span><span class=\"sh\">\"</span>  \n<span class=\"n\">recieve</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">http://127.0.0.1:5000/</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">postData</span><span class=\"p\">)</span>  \n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">recieve</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<p>After execution you should get this output</p>\n\n<blockquote>\n<p>recieved a POST request at homepage with post data</p>\n</blockquote>\n\n<h4>\n  \n  \n  Creating multiple routes\n</h4>\n\n<p>To create another route simply decorate another method with @app.route(‚Äò/[routeAddressHere]‚Äô)<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span>  \n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>  \n\n\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">GET</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">POST</span><span class=\"sh\">'</span><span class=\"p\">])</span>  \n<span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">():</span>  \n    <span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">GET</span><span class=\"sh\">'</span><span class=\"p\">):</span>  \n        <span class=\"k\">return</span> <span class=\"sh\">'</span><span class=\"s\">Recieved GET request at homepage</span><span class=\"sh\">'</span>  \n    <span class=\"k\">else</span><span class=\"p\">:</span>  \n        <span class=\"n\">dataposted</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">data</span>  \n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">recieved a POST request at homepage with </span><span class=\"si\">{</span><span class=\"n\">dataposted</span><span class=\"si\">}</span><span class=\"sh\">'</span>  \n\n\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/about</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">GET</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">POST</span><span class=\"sh\">'</span><span class=\"p\">])</span>  \n<span class=\"k\">def</span> <span class=\"nf\">about</span><span class=\"p\">():</span>  \n    <span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">GET</span><span class=\"sh\">'</span><span class=\"p\">):</span>  \n        <span class=\"k\">return</span> <span class=\"sh\">'</span><span class=\"s\">Recieved GET request at aboutpage.</span><span class=\"sh\">'</span>  \n    <span class=\"k\">else</span><span class=\"p\">:</span>  \n        <span class=\"n\">dataposted</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">data</span>  \n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">recieved a POST request at about page with </span><span class=\"si\">{</span><span class=\"n\">dataposted</span><span class=\"si\">}</span><span class=\"s\">.</span><span class=\"sh\">'</span>  \n\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">127.0.0.1</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">5000</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>you can test for multiple routes by either opening <a href=\"https://127.0.0.1:5000/about\" rel=\"noopener noreferrer\">https://127.0.0.1:5000/about</a> in your browser or by making post request using request.py file as mentioned before.</p>\n\n<h4>\n  \n  \n  Return Json response\n</h4>\n\n<p>We can return json response by using jsonify method included in flask package.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">jsonify</span>  \n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>  \n\n\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">GET</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">POST</span><span class=\"sh\">'</span><span class=\"p\">])</span>  \n<span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">():</span>  \n    <span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">GET</span><span class=\"sh\">'</span><span class=\"p\">):</span>  \n        <span class=\"k\">return</span> <span class=\"nf\">jsonify</span><span class=\"p\">(</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">this is json response</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  \n\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">127.0.0.1</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">5000</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>output:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhi6nfdfpwewlcqktc16v.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhi6nfdfpwewlcqktc16v.png\" alt=\"python json response\" width=\"392\" height=\"207\"></a>json response</p>\n\n<p>The post <a href=\"https://milddev.com/flask/create-a-simple-rest-api-in-python-using-flask/\" rel=\"noopener noreferrer\">Create a simple REST API in python using Flask</a> appeared first on <a href=\"https://milddev.com/\" rel=\"noopener noreferrer\">Mild Dev</a>.</p>\n\n<p>You can mention your queries in the comments section.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python course: Strings","url":"https://dev.to/costa86/python-strings-26c9","date":1750963929,"author":"Louren√ßo Costa","guid":172404,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fi.makeagif.com%2Fmedia%2F3-13-2016%2FGjqZJP.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fi.makeagif.com%2Fmedia%2F3-13-2016%2FGjqZJP.gif\" width=\"245\" height=\"170\"></a></p>\n\n<ol>\n<li>Replicating strings</li>\n<li>Escape sequences</li>\n<li>Raw strings</li>\n<li>Slicing</li>\n<li>Some methods</li>\n</ol>\n\n<p>Strings are used to represent text in Python. Any of these syntaxes are valid strings:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">name_1</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Stanley Hudson</span><span class=\"sh\">'</span>\n<span class=\"n\">name_2</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Stanley Hudson</span><span class=\"sh\">\"</span>\n<span class=\"n\">name_3</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">\nStanley\nHudson\n</span><span class=\"sh\">\"\"\"</span>\n<span class=\"n\">name_4</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">\nStanley Hudson\n</span><span class=\"sh\">\"\"\"</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p><em>name_3</em> and <em>name_4</em>: these are ways of representing multi-line strings.</p>\n</blockquote>\n\n<p>In more realistic scenarios, you are more likely to use strings composed by regular text plus other values obtained from variables. Let's say you want a string to greet someone based on their name:</p>\n\n<blockquote>\n<p>This process is also known as ‚Äústring interpolation‚Äù.<br>\n</p>\n</blockquote>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Angela</span><span class=\"sh\">\"</span>\n<span class=\"n\">animal</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">cat</span><span class=\"sh\">\"</span>\n<span class=\"n\">greeting_1</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Welcome, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n<span class=\"n\">greeting_2</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Welcome, </span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">name</span>\n<span class=\"n\">greeting_3</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Welcome, %s</span><span class=\"sh\">\"</span> <span class=\"o\">%</span> <span class=\"n\">name</span>\n<span class=\"n\">greeting_4</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Welcome, {}. Are you a {} person ?</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span>\n<span class=\"n\">animal</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">greeting_1</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; \"Welcome, Angela\"\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">greeting_2</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; \"Welcome, Angela\"\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">greeting_3</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; \"Welcome, Angela\"\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">greeting_4</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; \"Welcome, Angela. Are you a cat person ?\n</span></code></pre>\n\n</div>\n\n\n\n<p>Some explanation about these string variables:</p>\n\n<p><em>greeting_1</em><br>\nThis is the convention adopted throughout this series of articles, since I Ô¨Ånd it more convenient to use and readable. Also, it‚Äôs the most modern approach. </p>\n\n<blockquote>\n<p>Notice the ‚Äúf‚Äù must be placed right before the beginning of the string.</p>\n</blockquote>\n\n<p><em>greeting_2</em><br>\nNotice the ‚Äú+‚Äù sign. When dealing with strings, it means concatenation (joining). If you use it with numbers, such as integers or Ô¨Çoats, it means a mathematical sum. This ability to perform different actions according to how it‚Äôs used is called polymorphism (poly=many, morph=form). So, in Python, the ‚Äú+‚Äù sign is polymorphic. You will see about numbers in the <em>Numbers</em> article.</p>\n\n<p><em>greeting_3</em><br>\nThe ‚Äú%s‚Äù stands for ‚Äústring‚Äù. If the name variable was an integer, for<br>\ninstance, then ‚Äú%i‚Äù should be used instead of ‚Äú%s‚Äù.</p>\n\n<p><em>greeting_4</em><br>\nThe format method was used here (you‚Äôll learn more about this in the <em>Classes</em> article), and the contents inside the curly brackets ‚Äú{}‚Äù were replaced by the <code>name</code> and <code>animal</code> variables, respectively.</p>\n<h2>\n  \n  \n  Replicating strings <a></a>\n</h2>\n\n<p>An interesting use case for strings is being able to replicate it multiple times by using the <code>*</code> operator, the same one used for multiplying numbers.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">branch</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Buffalo</span><span class=\"sh\">\"</span> \n<span class=\"n\">many_times</span> <span class=\"o\">=</span> <span class=\"n\">branch</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">many_times</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; \"BuffaloBuffaloBuffalo\"\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Escape sequences <a></a>\n</h2>\n\n<p>These are special characters that can be used in strings to provide some additional features. They are denoted by a backslash \" \\ \", followed by the character:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Character</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\n</td>\n<td>Newline character</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>Tab character</td>\n</tr>\n<tr>\n<td>‚Äò</td>\n<td>Single quote</td>\n</tr>\n<tr>\n<td>‚Äú</td>\n<td>Double quote</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>Backspace character</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>Carriage return character</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Examples:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">This is a</span><span class=\"se\">\\t</span><span class=\"s\">tabbed string.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">This is a</span><span class=\"se\">\\n</span><span class=\"s\">string with a new line.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">This is a string with a backslash: </span><span class=\"se\">\\\\</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">This is a string with a single quote: </span><span class=\"se\">\\'</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">This is a string with a double quote: </span><span class=\"se\">\\\"</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>Output seen in the command-line:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight powershell\"><code><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"nx\">is</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\">       </span><span class=\"nx\">tabbed</span><span class=\"w\"> </span><span class=\"nx\">string.</span><span class=\"w\">\n</span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"nx\">is</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\">\n</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"nx\">with</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">new</span><span class=\"w\"> </span><span class=\"nx\">line.</span><span class=\"w\">\n</span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"nx\">is</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">string</span><span class=\"w\"> </span><span class=\"nx\">with</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">backslash:</span><span class=\"w\"> </span><span class=\"nx\">\\</span><span class=\"w\">\n</span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"nx\">is</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">string</span><span class=\"w\"> </span><span class=\"nx\">with</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">single</span><span class=\"w\"> </span><span class=\"nx\">quote:</span><span class=\"w\"> </span><span class=\"s1\">'\nThis is a string with a double quote: \"¬´\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<blockquote>\n<p>üòé Enjoying this series so far? Did you know you can get the whole content as a book, both as digital and paperback formats? Check it out below!</p>\n</blockquote>\n\n<p><a href=\"https://buymeacoffee.com/costa86/e/424861\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F97kfgviyhezekzsuaiwp.png\" alt=\"Alt text\" width=\"800\" height=\"199\"></a></p>\n\n\n\n\n<h2>\n  \n  \n  Raw strings <a></a>\n</h2>\n\n<p>In certain situations, you may want to actually use these escaped characters demonstrated above. A common use case is for Ô¨Åle paths on Windows computers, which include the backslash \"\\\" character. This can be accomplished by appending \"r\" right before the beginning of a string:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">jan_photo</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"sh\">\"</span><span class=\"s\">C:\\Users\\Michael\\princess_of_jamaica.jpg</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">jan_photo</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; C:\\Users\\Michael\\princess_of_jamaica.jpg\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Slicing strings <a></a>\n</h2>\n\n<p>You can get parts of a string by accessing their indexes. In Python, we start counting indexes/positions at 0, and negative indexes are counted backwards, from end to start. The concept of indexes and slicing will be covered in the <em>Lists</em> article.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">RYAN</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; R\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; Y\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; A\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; N\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; N\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; YA\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Some string methods <a></a>\n</h2>\n\n<p>Here are some usages of popular methods available for strings. Check them at <a href=\"https://docs.python.org/3/library/stdtypes.html#str.capitalize\" rel=\"noopener noreferrer\">https://docs.python.org/3/library/stdtypes.html#str.capitalize</a>.  The concept of \"method\" will be explained in the <em>Classes</em> article. For now, keep in mind they are a way of providing extra-capabilities to objects such as strings in this case. For example, turning a string into uppercase or lowercase.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">jim</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">jim</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">())</span>  <span class=\"c1\"># =&gt; JIM\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"nf\">capitalize</span><span class=\"p\">())</span>  <span class=\"c1\"># =&gt; Jim\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">JIM</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">())</span> <span class=\"c1\"># =&gt; jim\n</span>\n<span class=\"c1\"># how many times 'f' is repeated in 'Buffalo'\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Buffalo</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">f</span><span class=\"sh\">\"</span><span class=\"p\">))</span>  <span class=\"c1\"># =&gt; 2\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<blockquote>\n<p>Be aware that you are eligible get a Wise card or your first international transfer, up to 500 EUR, free! I've been using their service for years and it's a great way to send/receive money abroad, creating disposable virtual cards, and more. <strong>Get it here</strong>: <a href=\"https://wise.com/invite/dic/antoniod535\" rel=\"noopener noreferrer\">Sponsored link</a>.</p>\n\n<p>By now you may have heard of ElevenLabs. Their AI voice cloning service is simply off the charts. <strong>Check them out</strong>: <a href=\"https://try.elevenlabs.io/j4qtfagxd271\" rel=\"noopener noreferrer\">Sponsored link</a>.</p>\n</blockquote>\n\n\n\n\n<p>Follow me around:<br>\n<a href=\"https://www.linkedin.com/in/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">LinkedIn</a>\n <a href=\"https://www.buymeacoffee.com/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">Buy me a coffee</a>\n <a href=\"https://github.com/costa86\" class=\"ltag_cta ltag_cta--branded\" rel=\"noopener noreferrer\">GitHub</a>\n <a href=\"https://dev.to/costa86\" class=\"ltag_cta ltag_cta--branded\">Dev.to</a>\n </p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Boost]","url":"https://dev.to/setrathexx/-2g09","date":1750962499,"author":"SetraTheX","guid":172403,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/setrathexx\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F3278123%2F62ec0628-4a1c-4f96-8447-ecb24af00e4f.jpeg\" alt=\"setrathexx\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/setrathexx/-is-100-ai-assisted-software-development-possible-a-real-experience-4l60\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2># Is 100% AI-Assisted Software Development Possible? ‚Äì A Real Experience</h2>\n      <h3>SetraTheX „Éª Jun 20</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#python</span>\n        <span class=\"ltag__link__tag\">#ai</span>\n        <span class=\"ltag__link__tag\">#githubcopilot</span>\n        <span class=\"ltag__link__tag\">#devjournal</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Type Hints: 8 Advanced Techniques for Safer, More Maintainable Code","url":"https://dev.to/aaravjoshi/python-type-hints-8-advanced-techniques-for-safer-more-maintainable-code-1do9","date":1750957353,"author":"Aarav Joshi","guid":172368,"unread":true,"content":"<blockquote>\n<p>As a best-selling author, I invite you to explore my books on <a href=\"https://www.amazon.com/stores/Aarav-Joshi/author/B0DQYNVXZ7?ref=ap_rdr&amp;isDramIntegrated=true&amp;shoppingPortalEnabled=true&amp;ccs_id=738636bd-0ca1-4d7b-8efa-481bfc222571\" rel=\"noopener noreferrer\">Amazon</a>. Don't forget to follow me on <a href=\"https://medium.com/@aarav-joshi\" rel=\"noopener noreferrer\">Medium</a> and show your support. Thank you! Your support means the world! </p>\n</blockquote>\n\n<p>Python's dynamic nature offers flexibility, but large codebases benefit from type hints that catch errors before runtime. I've seen projects transform when adding type annotations‚Äîthey serve as documentation while enabling static analysis tools. These techniques maintain Python's expressiveness while introducing safety nets for complex systems.  </p>\n\n<p>Protocols establish implicit interfaces for objects. Rather than forcing inheritance chains, they verify required methods exist. I frequently use this for database abstractions where different drivers share common methods. Here's how it ensures connection objects behave correctly:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Protocol</span><span class=\"p\">,</span> <span class=\"n\">runtime_checkable</span>\n\n<span class=\"nd\">@runtime_checkable</span>\n<span class=\"k\">class</span> <span class=\"nc\">DataStream</span><span class=\"p\">(</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">:</span> <span class=\"bp\">...</span>\n    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span> <span class=\"bp\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_stream</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">:</span> <span class=\"n\">DataStream</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">DataStream</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Incompatible stream</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">stream</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">S3File</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"sh\">\"</span><span class=\"s\">file content</span><span class=\"sh\">\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">S3 connection closed</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Works with any DataStream implementer\n</span><span class=\"n\">s3_file</span> <span class=\"o\">=</span> <span class=\"nc\">S3File</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">process_stream</span><span class=\"p\">(</span><span class=\"n\">s3_file</span><span class=\"p\">))</span>  <span class=\"c1\"># 12\n</span></code></pre>\n\n</div>\n\n\n\n<p>Generics create type-safe containers that adapt to content. I often wrap API responses in generic containers like this Result pattern. The type parameter ensures consistent handling of success cases:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Generic</span><span class=\"p\">,</span> <span class=\"n\">TypeVar</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nc\">TypeVar</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Result</span><span class=\"p\">(</span><span class=\"n\">Generic</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">status</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">or_default</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">T</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"k\">if</span> <span class=\"mi\">200</span> <span class=\"o\">&lt;=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">&lt;</span> <span class=\"mi\">300</span> <span class=\"k\">else</span> <span class=\"n\">default</span>\n\n<span class=\"c1\"># Enforced typing\n</span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">](</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">.</span><span class=\"nf\">or_default</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># 420\n</span>\n<span class=\"n\">failure</span> <span class=\"o\">=</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">](</span><span class=\"sh\">\"</span><span class=\"s\">Error</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">failure</span><span class=\"p\">.</span><span class=\"nf\">or_default</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">fallback</span><span class=\"sh\">\"</span><span class=\"p\">).</span><span class=\"nf\">upper</span><span class=\"p\">())</span>  <span class=\"c1\"># FALLBACK\n</span></code></pre>\n\n</div>\n\n\n\n<p>Overloads clarify functions with multiple signatures. When building configuration parsers, I use this to differentiate between string and binary inputs. The explicit variants prevent handling mistakes:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">overload</span><span class=\"p\">,</span> <span class=\"n\">Literal</span>\n\n<span class=\"nd\">@overload</span>\n<span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">base64</span><span class=\"sh\">\"</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span> <span class=\"bp\">...</span>\n\n<span class=\"nd\">@overload</span>\n<span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">reverse</span><span class=\"sh\">\"</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span> <span class=\"bp\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">encoding</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">base64</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">encoding</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">reverse</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Type-safe usage\n</span><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">\"</span><span class=\"s\">SGVsbG8=</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">base64</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">reversed</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Python</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">reverse</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Literal types enforce specific value constraints. I apply these to state machines where invalid transitions cause hard-to-debug issues. The type checker catches mismatches during development:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Literal</span>\n\n<span class=\"n\">EnvType</span> <span class=\"o\">=</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">DEV</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">STAGING</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">PROD</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">deploy</span><span class=\"p\">(</span><span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"n\">EnvType</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">environment</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">PROD</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">confirm</span> <span class=\"o\">=</span> <span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Confirm production deploy (y/n): </span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">confirm</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">y</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Deploying to </span><span class=\"si\">{</span><span class=\"n\">environment</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Validated at check time\n</span><span class=\"nf\">deploy</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">STAGING</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Proceeds\n</span><span class=\"nf\">deploy</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">TEST</span><span class=\"sh\">\"</span><span class=\"p\">)</span>     <span class=\"c1\"># Type error before runtime\n</span></code></pre>\n\n</div>\n\n\n\n<p>Type narrowing refines unions through conditionals. Parsing user input benefits from this‚ÄîI eliminate redundant checks by narrowing types early:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Union</span>\n\n<span class=\"n\">InputType</span> <span class=\"o\">=</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_input</span><span class=\"p\">(</span><span class=\"n\">inp</span><span class=\"p\">:</span> <span class=\"n\">InputType</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">inp</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Processing </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">inp</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> items</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">inp</span><span class=\"p\">)</span>  <span class=\"c1\"># Now known as list[int]\n</span>    <span class=\"k\">return</span> <span class=\"n\">inp</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>  <span class=\"c1\"># Known as int here\n</span>\n<span class=\"c1\"># Clearer control flow\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">handle_input</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>    <span class=\"c1\"># 20\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">handle_input</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]))</span> <span class=\"c1\"># 3\n</span></code></pre>\n\n</div>\n\n\n\n<p>ParamSpec preserves signatures in decorators. Middleware layers like this logger maintain original function types. I use this in web frameworks to wrap endpoints without losing parameter context:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">ParamSpec</span><span class=\"p\">,</span> <span class=\"n\">TypeVar</span>\n<span class=\"kn\">from</span> <span class=\"n\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">wraps</span>\n\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"nc\">ParamSpec</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">P</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"nc\">TypeVar</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">R</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">retry</span><span class=\"p\">(</span><span class=\"n\">max_attempts</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">P</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">]],</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">P</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">]]:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">decorator</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">P</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">P</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">]:</span>\n        <span class=\"nd\">@wraps</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">P</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">P</span><span class=\"p\">.</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">R</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">max_attempts</span><span class=\"p\">):</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"nb\">Exception</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">max_attempts</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span>\n            <span class=\"k\">raise</span> <span class=\"nc\">RuntimeError</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Retry exhausted</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n    <span class=\"k\">return</span> <span class=\"n\">decorator</span>\n\n<span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">max_attempts</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">fetch_data</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Simulated network call\n</span>    <span class=\"kn\">import</span> <span class=\"n\">random</span>\n    <span class=\"k\">if</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">random</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.3</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nb\">ConnectionError</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">data</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]}</span>\n\n<span class=\"c1\"># Maintains fetch_data's type signature\n</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"nf\">fetch_data</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://api.example.com</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Custom type guards standardize validation logic. For email processing, I centralize checks in reusable guards. The type system then understands validation outcomes:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TypeGuard</span><span class=\"p\">,</span> <span class=\"n\">assert_never</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_strong_password</span><span class=\"p\">(</span><span class=\"n\">pwd</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TypeGuard</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">pwd</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">8</span> <span class=\"ow\">and</span> <span class=\"nf\">any</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"nf\">isupper</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">pwd</span><span class=\"p\">)</span> \n\n<span class=\"k\">def</span> <span class=\"nf\">register_user</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nf\">is_strong_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Password too weak</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n    <span class=\"c1\"># Password is verified as strong here\n</span>    <span class=\"nf\">store_credentials</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>  \n</code></pre>\n\n</div>\n\n\n\n<p>TypedDict structures dictionary data. Configuration handling became cleaner in my projects after adopting this. It documents expected keys while allowing gradual typing:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TypedDict</span><span class=\"p\">,</span> <span class=\"n\">NotRequired</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserProfile</span><span class=\"p\">(</span><span class=\"n\">TypedDict</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"n\">NotRequired</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_profile</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">UserProfile</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Auto-complete works for keys\n</span>    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Created </span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">username</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\"> &lt;</span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">email</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">&gt;</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># Valid construction\n</span><span class=\"n\">profile</span><span class=\"p\">:</span> <span class=\"n\">UserProfile</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">username</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">alice</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">email</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">alice@domain.com</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">create_profile</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Partial initialization allowed\n</span><span class=\"n\">temp_profile</span><span class=\"p\">:</span> <span class=\"n\">UserProfile</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">username</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">bob</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">email</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">bob@domain.com</span><span class=\"sh\">\"</span><span class=\"p\">}</span> \n</code></pre>\n\n</div>\n\n\n\n<p>These methods integrate with Python's ecosystem through tools like Mypy. They reduce debugging time by surfacing inconsistencies during development. I've witnessed fewer production incidents in systems adopting comprehensive typing. The initial annotation effort pays dividends as code evolves and scales.  </p>\n\n<p>Type hints work alongside tests rather than replacing them. They excel at catching signature mismatches and invalid operations early. For teams maintaining large applications, this becomes indispensable. The techniques complement Python's strengths while addressing its dynamic challenges.  </p>\n\n<p>Start by annotating critical modules and expand gradually. Focus on public interfaces first‚Äîinternal types can follow later. The incremental approach prevents annotation fatigue while delivering immediate benefits. My rule: annotate new code and critical refactors immediately.  </p>\n\n<p>Performance remains unaffected since hints exist for static analysis. Runtime introspection still works as normal. This combination makes Python suitable for both rapid prototyping and enterprise-grade systems. The type system evolves continually‚Äîrecent additions like TypeVarTuple demonstrate ongoing commitment to robust typing.  </p>\n\n<p>Consider integrating type checking into CI pipelines. Catching errors before deployment saves hours of troubleshooting. Most teams adopt this within months of initial type hint adoption. The safety net becomes fundamental to their workflow.  </p>\n\n<p>Common objections fade with experience. \"It's too verbose\" becomes \"It documents my code\" after seeing fewer bugs. \"It slows development\" turns into \"It accelerates refactoring\" when modifying complex systems. The productivity trade-off shifts positive as codebases grow.  </p>\n\n<p>Combine these techniques for maximum effect. Protocols with generics create flexible yet constrained components. Literal types with overloads express complex business rules clearly. Each method solves specific problems while interoperating smoothly.  </p>\n\n<h2>\n  \n  \n  Python's typing journey continues evolving. What began as simple function annotations now supports sophisticated patterns. These eight techniques form a practical foundation for resilient applications. They bridge dynamic flexibility with static safety‚Äîa combination that defines modern Python.\n</h2>\n\n<p>üìò <strong>Checkout my <a href=\"https://youtu.be/WpR6F4ky4uM\" rel=\"noopener noreferrer\">latest ebook</a> for free on my channel!</strong><br><br>\nBe sure to <strong>like</strong>, <strong>share</strong>, <strong>comment</strong>, and <strong>subscribe</strong> to the channel!</p>\n\n\n\n\n<h2>\n  \n  \n  101 Books\n</h2>\n\n<p><strong>101 Books</strong> is an AI-driven publishing company co-founded by author <strong>Aarav Joshi</strong>. By leveraging advanced AI technology, we keep our publishing costs incredibly low‚Äîsome books are priced as low as <strong>$4</strong>‚Äîmaking quality knowledge accessible to everyone.</p>\n\n<p>Check out our book <strong><a href=\"https://www.amazon.com/dp/B0DQQF9K3Z\" rel=\"noopener noreferrer\">Golang Clean Code</a></strong> available on Amazon. </p>\n\n<p>Stay tuned for updates and exciting news. When shopping for books, search for <strong>Aarav Joshi</strong> to find more of our titles. Use the provided link to enjoy <strong>special discounts</strong>!</p>\n\n<h2>\n  \n  \n  Our Creations\n</h2>\n\n<p>Be sure to check out our creations:</p>\n\n<p><strong><a href=\"https://www.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Investor Central</a></strong> | <strong><a href=\"https://spanish.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Investor Central Spanish</a></strong> | <strong><a href=\"https://german.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Investor Central German</a></strong> | <strong><a href=\"https://smartliving.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Smart Living</a></strong> | <strong><a href=\"https://epochsandechoes.com/\" rel=\"noopener noreferrer\">Epochs &amp; Echoes</a></strong> | <strong><a href=\"https://www.puzzlingmysteries.com/\" rel=\"noopener noreferrer\">Puzzling Mysteries</a></strong> | <strong><a href=\"http://hindutva.epochsandechoes.com/\" rel=\"noopener noreferrer\">Hindutva</a></strong> | <strong><a href=\"https://elitedev.in/\" rel=\"noopener noreferrer\">Elite Dev</a></strong> | <strong><a href=\"https://jsschools.com/\" rel=\"noopener noreferrer\">JS Schools</a></strong></p>\n\n\n\n\n<h3>\n  \n  \n  We are on Medium\n</h3>\n\n<p><strong><a href=\"https://techkoalainsights.com/\" rel=\"noopener noreferrer\">Tech Koala Insights</a></strong> | <strong><a href=\"https://world.epochsandechoes.com/\" rel=\"noopener noreferrer\">Epochs &amp; Echoes World</a></strong> | <strong><a href=\"https://medium.investorcentral.co.uk/\" rel=\"noopener noreferrer\">Investor Central Medium</a></strong> | <strong><a href=\"https://medium.com/puzzling-mysteries\" rel=\"noopener noreferrer\">Puzzling Mysteries Medium</a></strong> | <strong><a href=\"https://science.epochsandechoes.com/\" rel=\"noopener noreferrer\">Science &amp; Epochs Medium</a></strong> | <strong><a href=\"https://modernhindutva.substack.com/\" rel=\"noopener noreferrer\">Modern Hindutva</a></strong></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Behind the Underscores EP09: Attribute Access (__getattr__, __getattribute__, __setattr__, __delattr__)","url":"https://dev.to/hevalhazalkurt/behind-the-underscores-ep09-attribute-access-getattr-getattribute-setattr-2lg8","date":1750956111,"author":"Heval Hazal Kurt","guid":172315,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5ikmqwl9bd28eatqwmtj.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5ikmqwl9bd28eatqwmtj.jpg\" alt=\"Behind the Underscores EP09: Attribute Access\" width=\"800\" height=\"533\"></a></p>\n\n<p>If you‚Äôve been working with Python for a while, you‚Äôve probably used objects and attributes all the time:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Alice</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>  <span class=\"c1\"># Accessing the 'name' attribute\n</span></code></pre>\n\n</div>\n\n\n\n<p>Simple enough, right? But under the hood, Python gives you some powerful tools to customize what happens when you access, set, or delete attributes. These tools are special methods like <code>__getattr__</code>, <code>__getattribute__</code>, <code>__setattr__</code>, and <code>__delattr__</code>.</p>\n\n<p>Let‚Äôs dive into what they are, what they do, and when and how to use them with real-world use cases.</p>\n\n<h2>\n  \n  \n  First: What Is an Attribute?\n</h2>\n\n<p>An attribute is just a variable that belongs to an object. When you write <code>obj.x</code>, <code>x</code> is the attribute. In classes, attributes are usually things like <code>name</code>, <code>email</code>, <code>age</code>, etc. You get or set them using dot notation.</p>\n\n<h2>\n  \n  \n  Attribute Access Internals\n</h2>\n\n<p>Python handles attribute access in this order:</p>\n\n<ol>\n<li>Check the instance dictionary (<code>__dict__</code>)</li>\n<li>Look in the class and its base classes</li>\n<li>If not found, call <code>__getattr__</code> if it exists</li>\n</ol>\n\n<p>But when you want to take control over how attribute access behaves, you can override four methods:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th><strong>Method</strong></th>\n<th><strong>When it Runs</strong></th>\n<th><strong>Common Use Cases</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__getattribute__</code></td>\n<td>Always on attribute access</td>\n<td>Logging, access control, wrappers</td>\n</tr>\n<tr>\n<td><code>__getattr__</code></td>\n<td>Only if attribute is missing</td>\n<td>Lazy loading, proxies, fallbacks</td>\n</tr>\n<tr>\n<td><code>__setattr__</code></td>\n<td>On every attribute assignment</td>\n<td>Validation, transformation, logging</td>\n</tr>\n<tr>\n<td><code>__delattr__</code></td>\n<td>On every attribute deletion</td>\n<td>Protection, cleanup, auditing</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Let‚Äôs go through them one by one.</p>\n\n<h2>\n  \n  \n  <code>__getattribute__</code>: Called Every Time You Access an Attribute\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Demo</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Getting attribute: </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This method is always called when you access any attribute on an instance. Even built-in ones like <code>__class__</code>.</p>\n\n<p>Why use it?</p>\n\n<ul>\n<li>Logging or debugging attribute access</li>\n<li>Enforcing rules for access</li>\n<li>Adding dynamic behavior</li>\n</ul>\n\n<p>If you override <code>__getattribute__</code>, you must call <code>super().__getattribute__(name)</code> inside it. Otherwise, you'll get a recursive loop and a <code>RecursionError</code>.</p>\n\n<h2>\n  \n  \n  <code>__getattr__</code>: Called Only If the Attribute Doesn't Exist\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Lazy</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__getattr__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\"> not found. Creating it lazily.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Default for </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This method is called only when the attribute is missing. It‚Äôs great for:</p>\n\n<ul>\n<li>Providing defaults</li>\n<li>Lazy-loading values</li>\n<li>Building proxy/wrapper objects\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"nc\">Lazy</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">anything</span><span class=\"p\">)</span>  <span class=\"c1\"># \"anything\" doesn‚Äôt exist so __getattr__ is triggered\n</span></code></pre>\n\n</div>\n\n\n\n<p>It will not run if the attribute already exists!</p>\n\n<h2>\n  \n  \n  <code>__setattr__</code>: Called When Setting an Attribute\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Strict</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__setattr__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Setting </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\"> = </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__setattr__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>Use <code>__setattr__</code> when you want to:</p>\n\n<ul>\n<li>Validate or transform inputs</li>\n<li>Prevent or limit setting certain attributes</li>\n<li>Automatically log changes\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"nc\">Strict</span><span class=\"p\">()</span>\n<span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>  <span class=\"c1\"># Calls __setattr__\n</span></code></pre>\n\n</div>\n\n\n\n<p>Just like with <code>__getattribute__</code>, you must call <code>super().__setattr__</code> or else the value won't be stored.</p>\n\n<h2>\n  \n  \n  <code>__delattr__</code>: Called When Deleting an Attribute\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Guarded</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__delattr__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Attempting to delete </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"nc\">AttributeError</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">You can</span><span class=\"sh\">'</span><span class=\"s\">t delete </span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'\"</span><span class=\"p\">)</span>\n        <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__delattr__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This method is useful when:</p>\n\n<ul>\n<li>You want to protect certain attributes from being deleted</li>\n<li>You want to log or audit deletions</li>\n<li>You need to keep cleanup logic centralized\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"nc\">Guarded</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">temp</span><span class=\"sh\">\"</span>\n<span class=\"k\">del</span> <span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">name</span>  <span class=\"c1\"># Calls __delattr__\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Example: Lazy Configuration Loader\n</h2>\n\n<p>Let‚Äôs say you want to load some configuration values only when they are needed:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_store</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getattr__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Loading config for </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">default_</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_store</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nc\">Config</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">db_url</span><span class=\"p\">)</span>   <span class=\"c1\"># Loads lazily\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">api_key</span><span class=\"p\">)</span>  <span class=\"c1\"># Loads lazily\n</span></code></pre>\n\n</div>\n\n\n\n<p>No <code>db_url</code> or <code>api_key</code> is defined beforehand. But thanks to <code>__getattr__</code>, they work anyway. Look at the output.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Loading config for db_url\ndefault_db_url\nLoading config for api_key\ndefault_api_key\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Combine Methods for Power\n</h2>\n\n<p>You can combine these magic methods to create powerful behavior:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Magic</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Accessing: </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getattr__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"'</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> not found. Using default.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"mi\">42</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__setattr__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Setting </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\"> = </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__setattr__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__delattr__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Deleting </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__delattr__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This kind of setup is great for:</p>\n\n<ul>\n<li>Wrapping APIs</li>\n<li>Building caching layers</li>\n<li>Creating domain-specific languages</li>\n<li>Validating models like in frameworks</li>\n</ul>\n\n<h2>\n  \n  \n  Final Thoughts\n</h2>\n\n<p>These methods may seem magical at first, but once you understand how they work, they open up a whole new level of control in your classes. Just remember:</p>\n\n<ul>\n<li>Always call <code>super()</code> inside these methods unless you're intentionally breaking behavior.</li>\n<li>Be cautious with <code>__getattribute__</code>, it‚Äôs very powerful and dangerous if misused.</li>\n<li>Use these tools to build smarter, more flexible, and maintainable code.</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building an Automated Script Management System That Makes Open Source Contributions Effortless","url":"https://dev.to/curiousbud/building-an-automated-script-management-system-that-makes-open-source-contributions-effortless-5e3j","date":1750955343,"author":"Khan Areeb Khalid","guid":172314,"unread":true,"content":"<h2>\n  \n  \n  Building an Automated Script Management System That Makes Open Source Contributions Effortless\n</h2>\n\n<p>Have you ever wanted to contribute to an open-source project but got overwhelmed by the complexity of updating websites, documentation, and maintaining consistency across hundreds of scripts? </p>\n\n<p><strong>What if I told you there's now a way to contribute that's as simple as writing a script and running one command?</strong></p>\n\n<h2>\n  \n  \n  üöÄ Meet Nerva: The Future of Script Repositories\n</h2>\n\n<p><a href=\"https://github.com/curiousbud/Nerva\" rel=\"noopener noreferrer\">Nerva</a> is a curated collection of practical automation scripts across multiple programming languages. But here's what makes it revolutionary: <strong>we've built an automated Script Manager that completely eliminates manual website maintenance.</strong></p>\n\n<h2>\n  \n  \n  ü§ñ The Problem We Solved\n</h2>\n\n<p>Traditional open-source script repositories suffer from:</p>\n\n<ul>\n<li>‚ùå <strong>Manual website updates</strong> - Contributors need to edit HTML/React components</li>\n<li>‚ùå <strong>Inconsistent documentation</strong> - No standardized format across scripts</li>\n<li>‚ùå <strong>Broken builds</strong> - One wrong edit can break the entire website</li>\n<li>‚ùå <strong>High barrier to entry</strong> - Need to understand the website codebase</li>\n<li>‚ùå <strong>Maintenance overhead</strong> - Project maintainers spend more time on website than code</li>\n</ul>\n\n<h2>\n  \n  \n  ‚ú® Our Solution: The Magic Workflow\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># 1. Write your script + README</span>\n<span class=\"nb\">mkdir </span>scripts/python/my-awesome-tool\n<span class=\"nb\">echo</span> <span class=\"s2\">\"# My Awesome Tool...\"</span> <span class=\"o\">&gt;</span> scripts/python/my-awesome-tool/README.md\n\n<span class=\"c\"># 2. Run ONE command</span>\npython script_manager.py build\n\n<span class=\"c\"># 3. Your script appears on website with beautiful 3D cards! üé®</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>That's it.</strong> No website knowledge required. No complex setup. No breaking things.</p>\n\n<h2>\n  \n  \n  üõ†Ô∏è How It Works: The Technical Magic\n</h2>\n\n<h3>\n  \n  \n  1. <strong>Smart README Parsing</strong>\n</h3>\n\n<p>Our Script Manager intelligently parses README files to extract:</p>\n\n<ul>\n<li>Script title and description</li>\n<li>Features list (even with emojis! üéâ)</li>\n<li>Requirements and dependencies</li>\n<li>Usage examples and code blocks\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">extract_script_metadata</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">script_dir</span><span class=\"p\">:</span> <span class=\"n\">Path</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Extract metadata from a script directory</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">readme_path</span> <span class=\"o\">=</span> <span class=\"n\">script_dir</span> <span class=\"o\">/</span> <span class=\"sh\">\"</span><span class=\"s\">README.md</span><span class=\"sh\">\"</span>\n\n    <span class=\"c1\"># Parse README for features, requirements, usage\n</span>    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">content</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">current_section</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle emojis in section headers like \"## ‚ú® Features\"\n</span>        <span class=\"k\">if</span> <span class=\"n\">line</span><span class=\"p\">.</span><span class=\"nf\">startswith</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">## </span><span class=\"sh\">'</span><span class=\"p\">):</span>\n            <span class=\"n\">section_title</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">[^\\w\\s]</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:]).</span><span class=\"nf\">strip</span><span class=\"p\">().</span><span class=\"nf\">lower</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"s\">feature</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">section_title</span><span class=\"p\">:</span>\n                <span class=\"n\">current_section</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">features</span><span class=\"sh\">'</span>\n        <span class=\"k\">elif</span> <span class=\"n\">current_section</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">features</span><span class=\"sh\">'</span> <span class=\"ow\">and</span> <span class=\"n\">line</span><span class=\"p\">.</span><span class=\"nf\">startswith</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">- </span><span class=\"sh\">'</span><span class=\"p\">):</span>\n            <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">features</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:].</span><span class=\"nf\">strip</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  2. <strong>Featured Scripts System</strong>\n</h3>\n\n<p>We implemented a curation system that automatically highlights the most important scripts:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Mark important scripts as featured automatically\n</span><span class=\"n\">important_scripts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">script-manager</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">vulnerability-scanner</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ftp-scanner</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"k\">if</span> <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">important_scripts</span><span class=\"p\">:</span>\n    <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">featured</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  3. <strong>Website Integration</strong>\n</h3>\n\n<p>The Script Manager generates a <code>scripts.json</code> file that powers our Next.js website:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"totalScripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"featured\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"script-manager\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"display_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ü§ñ Script Registry Management Tool\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"description\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"An automated tool for managing and organizing scripts...\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"features\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"err\">...</span><span class=\"p\">],</span><span class=\"w\">\n      </span><span class=\"nl\">\"language\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"python\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">],</span><span class=\"w\">\n  </span><span class=\"nl\">\"languages\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"err\">...</span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  üé® The Beautiful Result\n</h2>\n\n<p>The website automatically generates <strong>3D animated cards</strong> for each script with:</p>\n\n<ul>\n<li>\n<strong>Dynamic content</strong> extracted from your README</li>\n<li>\n<strong>Search and filtering</strong> capabilities</li>\n<li>\n<strong>Consistent theming</strong> across all scripts</li>\n<li>\n<strong>Responsive design</strong> that works everywhere</li>\n</ul>\n\n<h2>\n  \n  \n  üåü Current Script Collection\n</h2>\n\n<p>Our system already manages 9+ scripts including:</p>\n\n<ul>\n<li>ü§ñ <strong>Script Manager</strong> - The heart of the system</li>\n<li>üîí <strong>FTP Scanner</strong> - Security testing tool</li>\n<li>üõ°Ô∏è <strong>Vulnerability Scanner</strong> - Web security analysis\n</li>\n<li>üìÅ <strong>File Organizer</strong> - Smart file management with date/type sorting</li>\n<li>üìß <strong>Email Automation</strong> - Automated email workflows</li>\n<li>üîê <strong>Password Generator</strong> - Secure password creation</li>\n<li>üì∂ <strong>WiFi Monitor</strong> - Network connectivity diagnostics</li>\n</ul>\n\n<h2>\n  \n  \n  üöÄ What Makes This Special\n</h2>\n\n<h3>\n  \n  \n  For Contributors:\n</h3>\n\n<ul>\n<li><strong>Zero website coding knowledge needed</strong></li>\n<li>\n<strong>Write once, appears everywhere</strong> - README becomes website content</li>\n<li>\n<strong>Automatic quality assurance</strong> - Consistent formatting guaranteed</li>\n<li>\n<strong>Focus on what matters</strong> - Your awesome scripts, not website maintenance</li>\n</ul>\n\n<h3>\n  \n  \n  For Project Maintainers:\n</h3>\n\n<ul>\n<li>\n<strong>Self-documenting system</strong> - The Script Manager manages itself!</li>\n<li>\n<strong>Scalable architecture</strong> - Handle hundreds of scripts effortlessly</li>\n<li>\n<strong>Quality control</strong> - Automatic validation and error handling</li>\n<li>\n<strong>Beautiful presentation</strong> - Professional website without manual work</li>\n</ul>\n\n<h3>\n  \n  \n  For Users:\n</h3>\n\n<ul>\n<li>\n<strong>Curated content</strong> - Featured scripts highlight the best tools</li>\n<li>\n<strong>Easy discovery</strong> - Search and filter through all scripts</li>\n<li>\n<strong>Consistent documentation</strong> - Every script follows the same format</li>\n<li>\n<strong>Ready-to-use</strong> - Clear usage examples and requirements</li>\n</ul>\n\n<h2>\n  \n  \n  üîß Technical Implementation Highlights\n</h2>\n\n<h3>\n  \n  \n  Smart Parsing Algorithm\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Handle complex README structures\n</span><span class=\"k\">elif</span> <span class=\"n\">current_section</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">requirements</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">line_stripped</span><span class=\"p\">.</span><span class=\"nf\">startswith</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">- </span><span class=\"sh\">'</span><span class=\"p\">):</span>\n        <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">line_stripped</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:].</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"s\">`</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">req</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Extract package names from backticks\n</span>            <span class=\"n\">package_match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">`([^`]+)`</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">package_match</span><span class=\"p\">:</span>\n                <span class=\"n\">package</span> <span class=\"o\">=</span> <span class=\"n\">package_match</span><span class=\"p\">.</span><span class=\"nf\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">package</span><span class=\"si\">}</span><span class=\"s\"> - </span><span class=\"si\">{</span><span class=\"n\">desc_part</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span> <span class=\"k\">if</span> <span class=\"n\">desc_part</span> <span class=\"k\">else</span> <span class=\"n\">package</span>\n        <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">requirements</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  TypeScript Integration\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kr\">interface</span> <span class=\"nx\">Script</span> <span class=\"p\">{</span>\n  <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"nx\">path</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"nx\">description</span><span class=\"p\">:</span> <span class=\"kr\">string</span>\n  <span class=\"nx\">features</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">[]</span>\n  <span class=\"nx\">requirements</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">[]</span>\n  <span class=\"nx\">featured</span><span class=\"p\">?:</span> <span class=\"nx\">boolean</span>\n  <span class=\"nx\">language</span><span class=\"p\">?:</span> <span class=\"kr\">string</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Automated Website Generation\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">generate_website_data</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">registry</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]]):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Generate data file for website consumption</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">website_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">totalScripts</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">scripts</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">scripts</span> <span class=\"ow\">in</span> <span class=\"n\">registry</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">()),</span>\n        <span class=\"sh\">\"</span><span class=\"s\">featured</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">languages</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Collect featured scripts automatically\n</span>    <span class=\"k\">for</span> <span class=\"n\">lang</span><span class=\"p\">,</span> <span class=\"n\">scripts</span> <span class=\"ow\">in</span> <span class=\"n\">registry</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n        <span class=\"k\">for</span> <span class=\"n\">script</span> <span class=\"ow\">in</span> <span class=\"n\">scripts</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">script</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">featured</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">):</span>\n                <span class=\"n\">website_data</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">featured</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">({</span><span class=\"o\">**</span><span class=\"n\">script</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">language</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">lang</span><span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  üéØ The Impact\n</h2>\n\n<p>This system has transformed how we think about open-source contribution:</p>\n\n<ol>\n<li>\n<strong>Lowered the barrier to entry</strong> - Anyone can contribute now</li>\n<li>\n<strong>Increased contribution quality</strong> - Standardized documentation</li>\n<li>\n<strong>Eliminated maintenance overhead</strong> - Self-managing system</li>\n<li>\n<strong>Enhanced user experience</strong> - Beautiful, searchable interface</li>\n<li>\n<strong>Showcased important tools</strong> - Script Manager gets deserved prominence</li>\n</ol>\n\n<h2>\n  \n  \n  üîÆ Future Vision\n</h2>\n\n<p>This is just the beginning. Imagine:</p>\n\n<ul>\n<li>\n<strong>AI-powered script discovery</strong> - Intelligent recommendations</li>\n<li>\n<strong>Automatic testing integration</strong> - Scripts validated before deployment</li>\n<li>\n<strong>Community ratings</strong> - Crowd-sourced script quality metrics</li>\n<li>\n<strong>Cross-language templates</strong> - Unified experience across all languages</li>\n<li>\n<strong>Plugin ecosystem</strong> - Extensible Script Manager architecture</li>\n</ul>\n\n<h2>\n  \n  \n  ü§ù Try It Yourself\n</h2>\n\n<p>Want to contribute to Nerva or implement a similar system?</p>\n\n<ol>\n<li>\n<strong>Check out the repository</strong>: <a href=\"https://github.com/curiousbud/Nerva\" rel=\"noopener noreferrer\">github.com/curiousbud/Nerva</a>\n</li>\n<li>\n<strong>Read the Script Manager guide</strong>: Complete beginner-friendly documentation at <code>scripts/python/script-manager/</code>\n</li>\n<li>\n<strong>Contribute a script</strong>: Write a README, run the command, see the magic!</li>\n</ol>\n\n<p>The Script Manager itself is fully documented and serves as a perfect example of the system in action.</p>\n\n<h2>\n  \n  \n  üí° Key Takeaways\n</h2>\n\n<p>Building automated systems for open-source projects can:</p>\n\n<ul>\n<li><strong>Dramatically reduce contribution friction</strong></li>\n<li><strong>Ensure consistent quality and presentation</strong></li>\n<li><strong>Scale effortlessly as projects grow</strong></li>\n<li><strong>Free maintainers to focus on what matters</strong></li>\n<li><strong>Create better experiences for everyone</strong></li>\n</ul>\n\n<p><strong>The future of open-source is automated, accessible, and beautiful.</strong></p>\n\n\n\n\n<p>What automation challenges are you facing in your projects? Have you built similar systems? Let's discuss in the comments! </p>\n\n<p><em>Follow me for more insights on open-source automation and innovative development practices.</em> üöÄ</p>\n\n<p><strong>Tags:</strong> #OpenSource #Automation #Python #JavaScript #WebDevelopment #DevTools #ScriptManagement #Innovation</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How Decision Trees Work: Real Demo and Simple Explanation","url":"https://dev.to/aibythabasvini/how-decision-trees-work-real-demo-and-simple-explanation-4nd4","date":1750948003,"author":"Thabasvini","guid":172256,"unread":true,"content":"<p>Do you ever ask yourself how machines make decisions like humans?</p>\n\n<p>Let‚Äôs break down one of the most beginner-friendly algorithms in machine learning, </p>\n\n<p>Wanna know what‚Äôs that, ta-da ‚ÄúDecision Tress‚Äù, with a real working demo using Python and scikit-learn.</p>\n\n<h2>\n  \n  \n  What Is a Decision Tree?\n</h2>\n\n<p>A decision tree is a flowchart-like structure where each internal node represents a question based on a feature, each branch represents an answer, and each leaf node represents an outcome or class label.</p>\n\n<blockquote>\n<p>(Deos the definition overwhelm you?)</p>\n</blockquote>\n\n<p>Here is the simplified version,</p>\n\n<p>*<em>Machines ask yes/no questions ----&gt; (just like we do)----&gt; to make decisions. *</em></p>\n\n<h2>\n  \n  \n  Real Life Analogy\n</h2>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fe1meh4ksqthjgllo5xus.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fe1meh4ksqthjgllo5xus.png\" alt=\"Decision Tree Flowchart Example: Should I Go Out\" width=\"800\" height=\"411\"></a></p>\n\n<p>That‚Äôs a decision tree for you to visualize.</p>\n\n<h2>\n  \n  \n  The Sample Use Case\n</h2>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F1zae4nwsvoyy403raz7m.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F1zae4nwsvoyy403raz7m.png\" alt=\"Table showing sample data with columns: Age, Income, Will Buy\" width=\"800\" height=\"411\"></a></p>\n\n<h2>\n  \n  \n  Let's Build It in Python\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Import Libraries\n\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nimport matplotlib.pyplot as plt\n\nPrepare the Data\n\nX = [[25, 50000], [35, 60000], [45, 80000], [22, 30000]]\ny = [0, 1, 1, 0]  # 0 = No Buy, 1 = Buy\n\nTrain the Model\n\nclf = DecisionTreeClassifier()\nclf.fit(X, y)\n\nVisualize the Tree\n\nplt.figure(figsize=(8, 5))\nplot_tree(clf, feature_names=[\"Age\", \"Income\"], class_names=[\"No\", \"Yes\"], filled=True)\nplt.show()\n\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fqzwduo6x3yhh08fmc820.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fqzwduo6x3yhh08fmc820.png\" alt=\"Decision Tree Output Visual\" width=\"800\" height=\"480\"></a></p>\n\n<h2>\n  \n  \n  How Does It Decide?\n</h2>\n\n<p>Well, thats the cool one here,the decision tree uses something called <strong>Gini</strong> Impurity to choose the best split,</p>\n\n<ol>\n<li><p>If a node has all ‚ÄúYes‚Äù or all ‚ÄúNo‚Äù, it‚Äôs pure (Gini = 0).</p></li>\n<li><p>The more mixed it is, the higher the impurity.</p></li>\n</ol>\n\n<p>So, the takeaway algorithm keeps splitting where impurity is lowest.</p>\n\n<h2>\n  \n  \n  Try making a prediction using the above code!\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>print(clf.predict([[40, 70000]]))\n</code></pre>\n\n</div>\n\n\n\n<p>The output will be [1] //means they will buy.</p>\n\n<h2>\n  \n  \n  Where Are Decision Trees Used?\n</h2>\n\n<ul>\n<li><p>Credit card approval</p></li>\n<li><p>Customer churn prediction</p></li>\n<li><p>Recommender systems</p></li>\n<li><p>Medical diagnosis</p></li>\n<li><p>E-commerce decision engines</p></li>\n</ul>\n\n<p>okay so finally, Decision Trees are powerful, visual, and easy to understand. </p>\n\n<p>If you‚Äôre learning ML or just want to understand how AI ‚Äúthinks‚Äù, start with Decision Trees. </p>\n\n<p>And if you want to see a live demo in action,Here's a quick youtube video me explaining How decision tress actually work, <iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/KPjztC7Fe_0\">\n</iframe>\n</p>\n\n<p>üôå Follow me for more beginner-friendly AI &amp; ML breakdowns!<br>\nüöÄ Need help building real AI/ML solutions? Check out <a href=\"https://siteencoders.in/\" rel=\"noopener noreferrer\">SiteEncoders</a>, we build it for you.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"#4 Django Journey: Learn DRF by building an e-commerce APIs","url":"https://dev.to/purnima_chowrasia/4-django-journey-learn-drf-by-building-an-e-commerce-apis-377o","date":1750947544,"author":"Purnima Chowrasia","guid":172255,"unread":true,"content":"<p>Hey dev.to community!</p>\n\n<h2>\n  \n  \n  Update: User authentication Part 1\n</h2>\n\n<p>Here I am to share an update about my progress in this project. As a last update on this project, where I have mentioned about adding Category model and established a relationship between product and category. This time I have worked on user authentication:</p>\n\n<ol>\n<li>Create an <code>accounts</code> app to manage user registration and login.</li>\n<li>Used Token-based API authentication.</li>\n<li>On User registration, token is generated and stored in authtoken_token DB table.</li>\n<li>On Login, token is retrieved.</li>\n<li>API to create product has been restricted only for logged in user.</li>\n<li>Token is now needed to be sent in the header to create product.</li>\n<li>Product can be view by user without login.</li>\n</ol>\n\n<h2>\n  \n  \n  Why I have used Token-based authentication instead of JWT-authentication or session-based authentication?\n</h2>\n\n<p>Token-based authentication is easier to get started and simple to understand. When a new user registers, a token is generated and stored in the database. So every time a user has to access any protected API, they have to send this token in the header. This token never expires and is stateless.</p>\n\n<p>However here are <strong>some disadvantages of Token-based authentication:</strong></p>\n\n<ul>\n<li>Token never expires(security risk)</li>\n<li>If token compromised then, it‚Äôs valid forever</li>\n<li>No refresh mechanism</li>\n<li>One token per user, can‚Äôt track multiple devices login.</li>\n</ul>\n\n<p>In future projects, I would definitely love to explore JWT and session based authentication. Meanwhile, please share your thought and tell me about your projects that you have worked.</p>\n\n<p>See you‚Äôll next time.. bye üëã</p>\n\n<p>Complete code available <a href=\"https://github.com/purnima291/drf_ecommerce_api/tree/phase-3/user-authentication\" rel=\"noopener noreferrer\">here</a>.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Django Interview Questions & Key Concepts ‚Äì Part 6","url":"https://dev.to/vincenttommi/django-interview-questions-key-concepts-part-6-162k","date":1750947138,"author":"Vincent Tommi","guid":172254,"unread":true,"content":"<p><strong>1 üíæ Which Databases Does Django Support?</strong><br>\nDjango supports several databases out of the box, making it easy to integrate with popular systems depending on your project's needs.</p>\n\n<p><strong>‚úÖ Officially Supported Databases</strong><br>\nDjango has built-in support for:</p>\n\n<p>üß© <code>SQLite</code> ‚Äì Great for development and small projects. No setup needed.<br>\n(Simple and fast, perfect for testing or prototypes)</p>\n\n<p>üêò <code>PostgreSQL</code> ‚Äì Django‚Äôs most feature-rich option, ideal for production apps.<br>\n<code>ENGINE: 'django.db.backends.postgresql'</code><br>\n(Supports advanced features like full-text search, JSON fields, GIS, etc.)</p>\n\n<p>üê¨ <code>MySQL</code> ‚Äì Popular for web apps, widely used in many environments.<br>\n<code>ENGINE: 'django.db.backends.mysql'</code><br>\n(Reliable and performant, works well for medium to large apps)</p>\n\n<p>üèõÔ∏è <code>Oracle</code> ‚Äì Used in large enterprise systems.<br>\nENGINE: 'django.db.backends.oracle'<br>\n(Enterprise-grade, suitable for big corporations with Oracle infrastructure)</p>\n\n<p><strong>üîå Third-Party Database Support</strong><br>\nYou can also connect Django to other databases using external packages:</p>\n\n<p>ü™µ CockroachDB</p>\n\n<p>üî• Firebird</p>\n\n<p>üß† IBM DB2</p>\n\n<p>üß™ SAP SQL Anywhere</p>\n\n<p>üíº Microsoft SQL Server / Azure SQL</p>\n\n<p>‚òÅÔ∏è Google Cloud Spanner</p>\n\n<p>These databases are not officially supported by Django, but you can still integrate them using third-party backends.</p>\n\n<p><strong>ü¶† What About MongoDB?</strong><br>\nDjango doesn‚Äôt officially support MongoDB ‚ùå because it's a NoSQL/document-based database, while Django‚Äôs ORM is designed for relational databases.<br>\nHowever, you can still use it through tools like:</p>\n\n<p>üõ†Ô∏è Djongo ‚Äì Allows Django ORM to work with MongoDB.</p>\n\n<p>üîß MongoEngine ‚Äì ODM (Object-Document Mapper) designed for MongoDB.</p>\n\n<p>‚ö†Ô∏è Keep in mind: Using MongoDB with Django may limit some features that rely heavily on relational behavior.</p>\n\n<p>üßæ Summary<br>\nDjango works best with relational databases like:</p>\n\n<p>üß© SQLite (lightweight, for dev)</p>\n\n<p>üêò PostgreSQL (most powerful &amp; full-featured)</p>\n\n<p>üê¨ MySQL (popular &amp; scalable)</p>\n\n<p>üèõÔ∏è Oracle (enterprise-level)</p>\n\n<p>You can also extend Django‚Äôs database support to other systems üß© using third-party tools.<br>\n‚úÖ Choose your database based on your app‚Äôs size, feature needs, and performance requirements.</p>\n\n<p>üõ†Ô∏è Djongo ‚Äì Allows Django ORM to work with MongoDB.</p>\n\n<p>üîß MongoEngine ‚Äì ODM (Object-Document Mapper) designed for MongoDB.</p>\n\n<p>‚ö†Ô∏è Keep in mind: Using MongoDB with Django may limit some <br>\n**<br>\nüîç 2. How do you query all items from a database table in Django?**<br>\nTo get all records from a database table in Django, use the <code>all()</code>method on a model's manager:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>from .models import Car\nall_objects = Car.objects.all()\n</code></pre>\n\n</div>\n\n\n\n<p>üì¶ This returns a <code>QuerySet</code> containing all Car objects from the database ‚Äî it's like saying \"give me everything in the Car table.\"</p>\n\n<p>üì¶ This returns a <code>QuerySet</code> containing <strong>all Car</strong> objects from the database ‚Äî it's like saying \"give me everything in the Car table.\"</p>\n\n<p><strong>üß∞ Other Useful QuerySet Methods:</strong><br>\n<code>filter()</code>‚Äì üîé Retrieves objects that match specific criteria. Great for narrowing down your search.</p>\n\n<p><code>values()</code> ‚Äì üìã Returns dictionaries containing only the fields you specify instead of the full model objects.</p>\n\n<p>üìå Example: Using <code>values()</code> to get only the <code>firstname</code> field from a model<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>from .models import Member\nmydata = Member.objects.values('firstname')\n\n</code></pre>\n\n</div>\n\n\n\n<p>üí° This is useful when you only need certain pieces of information and want to reduce overhead in your queries.</p>\n\n<p><strong>3 Explain Django Response Life-cycle?</strong><br>\nWhen a client üåê‚Äîsuch as a web browser or a mobile app‚Äîsends a request to a Django application, the process begins with URL Routing üß≠. Django looks at the requested URL and compares it against the patterns defined in the urls.py file. If it finds a matching pattern, it directs the request to the corresponding view function. If no match is found, Django immediately returns a 404 Not Found error üö´.</p>\n\n<p>Before the view function is executed, the request goes through a series of middleware üõ°Ô∏è. Middleware are components that act like filters, sitting between the incoming request and the view logic. During this request phase, middleware can modify the request, enforce authentication üîê, log activity üìä, or even halt the request entirely and return a response early. They are useful for applying cross-cutting features across the whole application without writing repetitive code.</p>\n\n<p>Once the request passes through the middleware, Django calls the view function or class-based view üß†. This is where the main business logic of the application lives. The view might retrieve data from the database üóÉÔ∏è, handle user input, perform calculations, or prepare context data to be passed to a template. In some cases, the view may directly return an HttpResponse üì¶, such as a plain text or JSON response for an API.</p>\n\n<p>If the view is rendering an HTML page, it uses Django‚Äôs template engine üñºÔ∏è. This engine takes a template file (which is just an HTML file with special Django tags) and combines it with dynamic data to produce the final HTML output. This allows the application to display dynamic content‚Äîlike user information or database records‚Äîembedded directly into the webpage üé®.</p>\n\n<p>After the view finishes its work, Django constructs an HttpResponse object üì¨. This object includes the final content (like HTML or JSON), an HTTP status code (such as 200 OK ‚úÖ or 403 Forbidden üö´), and any necessary headers (like content type or cookies üç™). This is the package that will eventually be delivered to the client.</p>\n\n<p>Before being sent out, the response passes back through the middleware again üîÅ‚Äîthis time in reverse order. During this response phase, middleware can make final modifications such as setting cookies, compressing the response data üì¶, adding custom HTTP headers, or logging response info. These tasks help improve security, performance, and debugging.</p>\n\n<p>Finally, Django sends the response back to the client üì§. If the client is a browser, it renders the HTML and displays the webpage üñ•Ô∏è. If it‚Äôs an API client, it might process the data further, such as rendering it in a dashboard or using it in a mobile app.</p>\n\n<p>Throughout this process, Django relies on two main objects: the HttpRequest üì•, which holds details about the incoming request like the method, path, headers, and data; and the HttpResponse üì§, which carries the response content, status code, and headers back to the client. Understanding this lifecycle is essential for Django developers, as it helps with debugging, performance tuning, and extending application behavior with middleware or custom responses.</p>\n\n<p>4  How to filter items in the Model?<br>\nIn Django, when we want to retrieve specific records from the database, we use a QuerySet, which is essentially a collection of database queries built using Django's ORM (Object Relational Mapper). One of the most commonly used QuerySet methods is .filter(). This method allows us to filter data based on certain conditions, such as matching a field's value, checking if a field contains a substring, comparing numbers, or even filtering by dates.</p>\n\n<p><code>üõ†Ô∏è The filter()</code> Method<br>\nThe <code>.filter()</code> method returns a new QuerySet containing only the rows that match the given condition(s). It doesn't modify the data‚Äîit just lets you query and retrieve exactly what you need.</p>\n\n<p><strong>üåç Real-World Example</strong><br>\nLet‚Äôs say we‚Äôre building an online bookstore and we have a Book model like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>from django.db import models\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.CharField(max_length=50)\n    genre = models.CharField(max_length=30)\n    price = models.DecimalField(max_digits=5, decimal_places=2)\n    published_year = models.IntegerField()\n</code></pre>\n\n</div>\n\n\n\n<p>Now imagine our database has hundreds of books, but we only want to:<br>\n<strong>üìå Example 1: Get all books by a specific author</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>books = Book.objects.filter(author=\"J.K. Rowling\")\n</code></pre>\n\n</div>\n\n\n\n<p>üîç This will return a QuerySet of all books written by J.K. Rowling.</p>\n\n<p>üìå Example 2: Get all books under $20<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>affordable_books = Book.objects.filter(price__lt=20.00)\n\n</code></pre>\n\n</div>\n\n\n\n<p>üîç The __lt means \"less than\". You can also use<code>__lte, __gt, __gte</code>, etc.</p>\n\n<p>üìå Example 3: Find books that contain a keyword in the title<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>keyword_books = Book.objects.filter(title__icontains=\"magic\")\n</code></pre>\n\n</div>\n\n\n\n<p>üîç <code>__icontains</code> allows case-insensitive searching for a substring in a field.</p>\n\n<p>üìå Example 4: Get all fiction books published after 2015<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>recent_fiction = Book.objects.filter(genre=\"Fiction\", published_year__gt=2015)\n</code></pre>\n\n</div>\n\n\n\n<p>üîç You can combine multiple filters by separating them with commas.</p>\n\n<p>üß† Summary<br>\nUsing <code>.filter()</code> is a powerful and readable way to retrieve only the data you need. Whether you're building a bookstore, blog, or social media app, <code>QuerySets</code> make it easy to query your data without writing raw SQL.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"itertools in Python (7)","url":"https://dev.to/hyperkai/itertools-in-python-7-2j02","date":1750946694,"author":"Super Kai (Kazuya Ito)","guid":172253,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-1-2b65\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.count\" rel=\"noopener noreferrer\">count()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.cycle\" rel=\"noopener noreferrer\">cycle()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.repeat\" rel=\"noopener noreferrer\">repeat()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-2-3l58\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.accumulate\" rel=\"noopener noreferrer\">accumulate()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.batched\" rel=\"noopener noreferrer\">batched()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain\" rel=\"noopener noreferrer\">chain()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable\" rel=\"noopener noreferrer\">chain.from_iterable()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-3-4kca\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.compress\" rel=\"noopener noreferrer\">compress()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.filterfalse\" rel=\"noopener noreferrer\">filterfalse()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.takewhile\" rel=\"noopener noreferrer\">takewhile()</a> and \n<a href=\"https://docs.python.org/3/library/itertools.html#itertools.dropwhile\" rel=\"noopener noreferrer\">dropwhile()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-4-2293\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.groupby\" rel=\"noopener noreferrer\">groupby()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.islice\" rel=\"noopener noreferrer\">islice()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-5-2cm1\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.pairwise\" rel=\"noopener noreferrer\">pairwise()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.starmap\" rel=\"noopener noreferrer\">starmap()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.tee\" rel=\"noopener noreferrer\">tee()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.zip_longest\" rel=\"noopener noreferrer\">zip_longest()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-6-28gf\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.product\" rel=\"noopener noreferrer\">product()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.permutations\" rel=\"noopener noreferrer\">permutations()</a>.</li>\n</ul>\n\n\n\n<h2>\n  \n  \n  <em><a href=\"https://docs.python.org/3/library/itertools.html\" rel=\"noopener noreferrer\">itertools</a> has the functions to create iterators.</em>\n</h2>\n\n<p>*<a href=\"https://more-itertools.readthedocs.io/en/stable/api.html\" rel=\"noopener noreferrer\">more-itertools</a> has more functions by installing with <code>pip install more-itertools</code>.</p>\n\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations\" rel=\"noopener noreferrer\">combinations()</a> can return the iterator which uniquely combines the elements of <code>iterable</code> one by one to return a tuple of zero or more elements one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Required-Type:<code>iterable</code>).</li>\n<li>The 2nd argument is <code>r</code>(Required-Type:<code>int</code>):\n*Memos:\n\n<ul>\n<li>It's the length of the returned tuple.</li>\n<li>It must be <code>0 &lt;= x</code>.\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.combinations object at 0x0000026906D95CB0&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ()\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">combinations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('A', 'B', 'C')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">combinations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># Nothing\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement\" rel=\"noopener noreferrer\">combinations_with_replacement()</a> can return the iterator which non-uniquely combines the elements of <code>iterable</code> one by one to return a tuple of zero or more elements one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Required-Type:<code>iterable</code>).</li>\n<li>The 2nd argument is <code>r</code>(Required-Type:<code>int</code>):\n*Memos:\n\n<ul>\n<li>It's the length of the returned tuple.</li>\n<li>It must be <code>0 &lt;= x</code>.\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations_with_replacement</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations_with_replacement</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations_with_replacement</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.combinations_with_replacement object at 0x0000026906DAAED0&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ()\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations_with_replacement</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations_with_replacement</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations_with_replacement</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations_with_replacement</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations_with_replacement</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'A')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations_with_replacement</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations_with_replacement</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'A', 'A')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'A', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'A', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'C', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'B', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'C', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'C', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations_with_replacement</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">combinations_with_replacement</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('A', 'A', 'A')\n# ('A', 'A', 'B')\n# ('A', 'A', 'C')\n# ('A', 'B', 'B')\n# ('A', 'B', 'C')\n# ('A', 'C', 'C')\n# ('B', 'B', 'B')\n# ('B', 'B', 'C')\n# ('B', 'C', 'C')\n# ('C', 'C', 'C')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations_with_replacement</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">combinations_with_replacement</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('A', 'A', 'A', 'A')\n# ('A', 'A', 'A', 'B')\n# ('A', 'A', 'A', 'C')\n# ('A', 'A', 'B', 'B')\n# ('A', 'A', 'B', 'C')\n# ('A', 'A', 'C', 'C')\n# ('A', 'B', 'B', 'B')\n# ('A', 'B', 'B', 'C')\n# ('A', 'B', 'C', 'C')\n# ('A', 'C', 'C', 'C')\n# ('B', 'B', 'B', 'B')\n# ('B', 'B', 'B', 'C')\n# ('B', 'B', 'C', 'C')\n# ('B', 'C', 'C', 'C')\n# ('C', 'C', 'C', 'C')\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"itertools in Python (6)","url":"https://dev.to/hyperkai/itertools-in-python-6-28gf","date":1750946613,"author":"Super Kai (Kazuya Ito)","guid":172252,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-1-2b65\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.count\" rel=\"noopener noreferrer\">count()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.cycle\" rel=\"noopener noreferrer\">cycle()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.repeat\" rel=\"noopener noreferrer\">repeat()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-2-3l58\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.accumulate\" rel=\"noopener noreferrer\">accumulate()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.batched\" rel=\"noopener noreferrer\">batched()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain\" rel=\"noopener noreferrer\">chain()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable\" rel=\"noopener noreferrer\">chain.from_iterable()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-3-4kca\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.compress\" rel=\"noopener noreferrer\">compress()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.filterfalse\" rel=\"noopener noreferrer\">filterfalse()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.takewhile\" rel=\"noopener noreferrer\">takewhile()</a> and \n<a href=\"https://docs.python.org/3/library/itertools.html#itertools.dropwhile\" rel=\"noopener noreferrer\">dropwhile()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-4-2293\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.groupby\" rel=\"noopener noreferrer\">groupby()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.islice\" rel=\"noopener noreferrer\">islice()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-5-2cm1\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.pairwise\" rel=\"noopener noreferrer\">pairwise()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.starmap\" rel=\"noopener noreferrer\">starmap()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.tee\" rel=\"noopener noreferrer\">tee()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.zip_longest\" rel=\"noopener noreferrer\">zip_longest()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-7-2j02\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations\" rel=\"noopener noreferrer\">combinations()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement\" rel=\"noopener noreferrer\">combinations_with_replacement()</a>.</li>\n</ul>\n\n\n\n<h2>\n  \n  \n  <em><a href=\"https://docs.python.org/3/library/itertools.html\" rel=\"noopener noreferrer\">itertools</a> has the functions to create iterators.</em>\n</h2>\n\n<p>*<a href=\"https://more-itertools.readthedocs.io/en/stable/api.html\" rel=\"noopener noreferrer\">more-itertools</a> has more functions by installing with <code>pip install more-itertools</code>.</p>\n\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.product\" rel=\"noopener noreferrer\">product()</a> can return the iterator which does cartesian product with the elements of <code>*iterables</code> one by one to return a tuple of zero or more elements one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st or the later arguments are <code>*iterables</code>(Optional-Type:<code>iterable</code>). *Don't use any keywords like <code>*iterables=</code>, <code>iterables=</code>, <code>*iterable=</code>, <code>iterable=</code>, etc.</li>\n<li>The 2nd argument is <code>repeat</code>(Optional-Default:<code>1</code>-Type:<code>int</code>):\n*Memos:\n\n<ul>\n<li>It's the length of the returned tuple.</li>\n<li>It must be <code>0 &lt;= x</code>.</li>\n<li>\n<code>repeat=</code> must be used.\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">product</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">product</span><span class=\"p\">()</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.product object at 0x000001BE99723500&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ()\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">product</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">product</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">product</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'A')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'A')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'A')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">product</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('A', 'A')\n# ('A', 'B')\n# ('A', 'C')\n# ('B', 'A')\n# ('B', 'B')\n# ('B', 'C')\n# ('C', 'A')\n# ('C', 'B')\n# ('C', 'C')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">product</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('A', 'A', 'A')\n# ('A', 'A', 'B')\n# ('A', 'A', 'C')\n# ('A', 'B', 'A')\n# ('A', 'B', 'B')\n# ('A', 'B', 'C')\n# ('A', 'C', 'A')\n# ('A', 'C', 'B')\n# ('A', 'C', 'C')\n# ('B', 'A', 'A')\n# ('B', 'A', 'B')\n# ('B', 'A', 'C')\n# ('B', 'B', 'A')\n# ('B', 'B', 'B')\n# ('B', 'B', 'C')\n# ('B', 'C', 'A')\n# ('B', 'C', 'B')\n# ('B', 'C', 'C')\n# ('C', 'A', 'A')\n# ('C', 'A', 'B')\n# ('C', 'A', 'C')\n# ('C', 'B', 'A')\n# ('C', 'B', 'B')\n# ('C', 'B', 'C')\n# ('C', 'C', 'A')\n# ('C', 'C', 'B')\n# ('C', 'C', 'C')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">product</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('A', 'A', 'A', 'A')\n# ('A', 'A', 'A', 'B')\n# ('A', 'A', 'A', 'C')\n# ('A', 'A', 'B', 'A')\n# ('A', 'A', 'B', 'B')\n# ...\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.permutations\" rel=\"noopener noreferrer\">permutations()</a> can return the iterator which permutates the elements of <code>iterable</code> one by one to return a tuple of zero or more elements one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Required-Type:<code>iterable</code>).</li>\n<li>The 2nd argument is <code>r</code>(Optional-Default:<code>None</code>-Type:<code>int</code>):\n*Memos:\n\n<ul>\n<li>It's the length of the returned tuple.</li>\n<li>If it's <code>None</code> or not set, the length of <code>iterable</code> is used.</li>\n<li>It must be <code>0 &lt;= x</code>.\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">permutations</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">''</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.permutations object at 0x000001BE9908AE30&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ()\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration: \n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">permutations</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">permutations</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">AB</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">AB</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'A')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">permutations</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'C', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'A', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'C', 'A')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'A', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'B', 'A')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">permutations</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'A')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'A')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">permutations</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('A', 'B')\n# ('A', 'C')\n# ('B', 'A')\n# ('B', 'C')\n# ('C', 'A')\n# ('C', 'B')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">permutations</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('A', 'B', 'C')\n# ('A', 'C', 'B')\n# ('B', 'A', 'C')\n# ('B', 'C', 'A')\n# ('C', 'A', 'B')\n# ('C', 'B', 'A')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">permutations</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># Nothing\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"itertools in Python (5)","url":"https://dev.to/hyperkai/itertools-in-python-5-2cm1","date":1750946538,"author":"Super Kai (Kazuya Ito)","guid":172251,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-1-2b65\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.count\" rel=\"noopener noreferrer\">count()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.cycle\" rel=\"noopener noreferrer\">cycle()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.repeat\" rel=\"noopener noreferrer\">repeat()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-2-3l58\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.accumulate\" rel=\"noopener noreferrer\">accumulate()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.batched\" rel=\"noopener noreferrer\">batched()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain\" rel=\"noopener noreferrer\">chain()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable\" rel=\"noopener noreferrer\">chain.from_iterable()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-3-4kca\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.compress\" rel=\"noopener noreferrer\">compress()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.filterfalse\" rel=\"noopener noreferrer\">filterfalse()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.takewhile\" rel=\"noopener noreferrer\">takewhile()</a> and \n<a href=\"https://docs.python.org/3/library/itertools.html#itertools.dropwhile\" rel=\"noopener noreferrer\">dropwhile()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-4-2293\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.groupby\" rel=\"noopener noreferrer\">groupby()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.islice\" rel=\"noopener noreferrer\">islice()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-6-28gf\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.product\" rel=\"noopener noreferrer\">product()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.permutations\" rel=\"noopener noreferrer\">permutations()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-7-2j02\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations\" rel=\"noopener noreferrer\">combinations()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement\" rel=\"noopener noreferrer\">combinations_with_replacement()</a>.</li>\n</ul>\n\n\n\n<h2>\n  \n  \n  <em><a href=\"https://docs.python.org/3/library/itertools.html\" rel=\"noopener noreferrer\">itertools</a> has the functions to create iterators.</em>\n</h2>\n\n<p>*<a href=\"https://more-itertools.readthedocs.io/en/stable/api.html\" rel=\"noopener noreferrer\">more-itertools</a> has more functions by installing with <code>pip install more-itertools</code>.</p>\n\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.pairwise\" rel=\"noopener noreferrer\">pairwise()</a> can return the iterator which returns a tuple of the two elements of <code>iterable</code> one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Required-Type:<code>iterable</code>).</li>\n<li>Don't use <code>iterable=</code>.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">pairwise</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">pairwise</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">pairwise</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.pairwise object at 0x000001BE9A1ABF70&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'D')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">pairwise</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">pairwise</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('A', 'B')\n# ('B', 'C')\n# ('C', 'D')\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.starmap\" rel=\"noopener noreferrer\">starmap()</a> can return the iterator which does <code>function</code> with the zero or more elements of <code>iterable</code> one by one to return the result one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>function</code>(Required-Type:<code>callable</code>). *Don't use <code>function=</code>.</li>\n<li>The 2nd argument is <code>iterable</code>(Required-Type:<code>iterable</code>). *Don't use <code>iterable=</code>.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">starmap</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nf\">starmap</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.starmap object at 0x000001BE9A289CF0&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">starmap</span>\n<span class=\"kn\">from</span> <span class=\"n\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">add</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nf\">starmap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)])</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nf\">starmap</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"c1\"># 7\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"c1\"># 5\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"c1\"># 13\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">starmap</span>\n<span class=\"kn\">from</span> <span class=\"n\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">add</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">starmap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># 7\n# 5\n# 13\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">starmap</span>\n<span class=\"kn\">from</span> <span class=\"n\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">mul</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">starmap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]):</span>\n<span class=\"c1\"># for x in starmap(mul, [(2, 5), (3, 2), (10, 3)]):\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># 10\n# 6\n# 30\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">starmap</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">starmap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">**</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]):</span>\n<span class=\"c1\"># for x in starmap(pow, [(2, 5), (3, 2), (10, 3)]):\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># 32\n# 9\n# 1000\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.tee\" rel=\"noopener noreferrer\">tee()</a> can return the zero or more iterators in a tuple which create the zero or more copies of <code>iterable</code> to return the element one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Required-Type:<code>iterable</code>). *Don't use <code>iterable=</code>.</li>\n<li>The 2nd argument is <code>n</code>(Optional-Default:<code>2</code>-Type:<code>int</code>):\n*Memos:\n\n<ul>\n<li>It's the number of the copies of <code>iterable</code>.</li>\n<li>It must be <code>0 &lt;= x</code>.</li>\n<li>Don't use <code>n=</code>.\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">tee</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">tee</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">tee</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">tee</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">tee</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># (&lt;itertools._tee object at 0x000001BE99D6E3C0&gt;,\n#  &lt;itertools._tee object at 0x000001BE99F85440&gt;)\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span> <span class=\"c1\"># A\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span> <span class=\"c1\"># B\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span> <span class=\"c1\"># C\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"c1\"># A\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"c1\"># B\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"c1\"># C\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">tee</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">tee</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"c1\"># A\n# B\n# C\n# A\n# B\n# C\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">tee</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">tee</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"c1\"># A\n# B\n# C\n# A\n# B\n# C\n# A\n# B\n# C\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.zip_longest\" rel=\"noopener noreferrer\">zip_longest()</a> can return the iterator which creates and returns a tuple of one or more elements one by one by zipping <code>*iterables</code> as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st or the later arguments are <code>*iterables</code>(Optional-Type:<code>iterable</code>). *Don't use any keywords like <code>*iterables=</code>, <code>iterables=</code>, <code>*iterable=</code>, <code>iterable=</code>, etc.</li>\n<li>The 2nd argument is <code>fillvalue</code>(Optional-Default:<code>None</code>-Type:<code>object</code>):\n*Memos:\n\n<ul>\n<li>It's the value to fill the zero or more missing elements of a returned tuple.</li>\n<li>\n<code>fillvalue=</code> must be used.\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">zip_longest</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">zip_longest</span><span class=\"p\">()</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">zip_longest</span><span class=\"p\">(</span><span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.zip_longest object at 0x000001BE99F29FD0&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">zip_longest</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">zip_longest</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">zip_longest</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">zip_longest</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">zip_longest</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C',)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">zip_longest</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">zip_longest</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">vwxyz</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'v')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'w')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'x')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># (None, 'y')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># (None, 'z')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">zip_longest</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">zip_longest</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">vwxyz</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Abscent</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'v', 10)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'w', 20)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'x', 'Abscent')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('Abscent', 'y', 'Abscent')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('Abscent', 'z', 'Abscent')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">zip_longest</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">zip_longest</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">vwxyz</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Abscent</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('A', 'v', 10)\n# ('B', 'w', 20)\n# ('C', 'x', 'Abscent')\n# ('Abscent', 'y', 'Abscent')\n# ('Abscent', 'z', 'Abscent')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">zip_longest</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">zip_longest</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">vwxyz</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Abscent</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"c1\"># A\n# v\n# 10\n# B\n# w\n# 20\n# C\n# x\n# Abscent\n# Abscent\n# y\n# Abscent\n# Abscent\n# z\n# Abscent\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"itertools in Python (4)","url":"https://dev.to/hyperkai/itertools-in-python-4-2293","date":1750946458,"author":"Super Kai (Kazuya Ito)","guid":172250,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-1-2b65\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.count\" rel=\"noopener noreferrer\">count()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.cycle\" rel=\"noopener noreferrer\">cycle()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.repeat\" rel=\"noopener noreferrer\">repeat()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-2-3l58\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.accumulate\" rel=\"noopener noreferrer\">accumulate()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.batched\" rel=\"noopener noreferrer\">batched()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain\" rel=\"noopener noreferrer\">chain()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable\" rel=\"noopener noreferrer\">chain.from_iterable()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-3-4kca\">My post</a> explains  <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.compress\" rel=\"noopener noreferrer\">compress()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.filterfalse\" rel=\"noopener noreferrer\">filterfalse()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.takewhile\" rel=\"noopener noreferrer\">takewhile()</a> and \n<a href=\"https://docs.python.org/3/library/itertools.html#itertools.dropwhile\" rel=\"noopener noreferrer\">dropwhile()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-5-2cm1\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.pairwise\" rel=\"noopener noreferrer\">pairwise()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.starmap\" rel=\"noopener noreferrer\">starmap()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.tee\" rel=\"noopener noreferrer\">tee()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.zip_longest\" rel=\"noopener noreferrer\">zip_longest()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-6-28gf\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.product\" rel=\"noopener noreferrer\">product()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.permutations\" rel=\"noopener noreferrer\">permutations()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-7-2j02\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations\" rel=\"noopener noreferrer\">combinations()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement\" rel=\"noopener noreferrer\">combinations_with_replacement()</a>.</li>\n</ul>\n\n\n\n<h2>\n  \n  \n  <em><a href=\"https://docs.python.org/3/library/itertools.html\" rel=\"noopener noreferrer\">itertools</a> has the functions to create iterators.</em>\n</h2>\n\n<p>*<a href=\"https://more-itertools.readthedocs.io/en/stable/api.html\" rel=\"noopener noreferrer\">more-itertools</a> has more functions by installing with <code>pip install more-itertools</code>.</p>\n\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.groupby\" rel=\"noopener noreferrer\">groupby()</a> can return the iterator which groups the elements of <code>iterable</code> by <code>key</code> one by one to return a set of the key and element one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Required-Type:<code>iterable</code>).</li>\n<li>The 2nd argument is <code>key</code>(Optional-Default:<code>None</code>-Type:<code>callable</code>).\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">groupby</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">AB</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CDE</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">FG</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">IJK</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">AB</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CDE</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">FG</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">IJK</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.groupby object at 0x0000026906F60B20&gt;\n</span>\n<span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"c1\"># AB AB\n</span>\n<span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"c1\"># CDE CDE\n</span>\n<span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"c1\"># FG FG\n</span>\n<span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"c1\"># H H\n</span>\n<span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"c1\"># IJK IJK\n</span>\n<span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">groupby</span>\n\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">AB</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CDE</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">FG</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">IJK</span><span class=\"sh\">'</span><span class=\"p\">]):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"c1\"># AB AB\n# CDE CDE\n# FG FG\n# H H\n# IJK IJK\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">groupby</span>\n\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">AB</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CDE</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">FG</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">IJK</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"c1\"># 2 AB\n# 3 CDE\n# 2 FG\n# 1 H\n# 3 IJK\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">groupby</span>\n\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">AB</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CDE</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">FG</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">IJK</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">:</span>\n        <span class=\"n\">d</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">({</span><span class=\"n\">key</span><span class=\"p\">:[]})</span>\n    <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"c1\"># {2: ['AB', 'FG'], 3: ['CDE', 'IJK'], 1: ['H']}\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.islice\" rel=\"noopener noreferrer\">islice()</a> can return the iterator which returns the selected elements of <code>iterable</code> one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Required-Type:<code>iterable</code>).</li>\n<li>The 2nd argument is <code>start</code>(Required-Type:<code>int</code>):\n*Memos:\n\n<ul>\n<li>It must be <code>0 &lt;= x</code>.</li>\n<li>If it's <code>None</code> or not set, it's <code>0</code>.</li>\n</ul>\n\n\n</li>\n\n<li>The 2nd(Required) or 3rd(Optional) argument is <code>stop</code>(Type:<code>int</code>):\n*Memos:\n\n<ul>\n<li>It must be <code>0 &lt;= x</code>.</li>\n<li>If it's <code>None</code> or not set, <code>iterable</code> can be read to the end.</li>\n</ul>\n\n\n</li>\n\n<li>The 4th argument is <code>step</code>(Optional-Type:<code>int</code>):\n*Memos:\n\n<ul>\n<li>It must be <code>1 &lt;= x</code>.</li>\n<li>If it's <code>None</code> or not set, it's <code>1</code>.</li>\n</ul>\n\n\n</li>\n\n<li>Only if two arguments are set, the 2nd argument is <code>stop</code>.\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">islice</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">islice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">islice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">islice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">islice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">islice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">islice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">islice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">islice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">islice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.islice object at 0x0000026906E7BD30&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># -4\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># -3\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># -2\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># -1\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 0\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 1\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 2\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 3\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 4\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">islice</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">islice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">4</span><span class=\"p\">):</span>\n<span class=\"c1\"># for x in islice([-4, -3, -2, -1, 0, 1, 2, 3, 4], 0, 4):\n# for x in islice([-4, -3, -2, -1, 0, 1, 2, 3, 4], 0, 4, 1):\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># -4\n# -3\n# -2\n# -1\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">islice</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">islice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">):</span>\n<span class=\"c1\"># for x in islice([-4, -3, -2, -1, 0, 1, 2, 3, 4], 3, 7, 1):\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># -1\n# 0\n# 1\n# 2\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">islice</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">islice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># -3\n# -1\n# 1\n# 3\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"itertools in Python (3)","url":"https://dev.to/hyperkai/itertools-in-python-3-4kca","date":1750946372,"author":"Super Kai (Kazuya Ito)","guid":172198,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-1-2b65\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.count\" rel=\"noopener noreferrer\">count()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.cycle\" rel=\"noopener noreferrer\">cycle()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.repeat\" rel=\"noopener noreferrer\">repeat()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-2-3l58\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.accumulate\" rel=\"noopener noreferrer\">accumulate()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.batched\" rel=\"noopener noreferrer\">batched()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain\" rel=\"noopener noreferrer\">chain()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable\" rel=\"noopener noreferrer\">chain.from_iterable()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-4-2293\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.groupby\" rel=\"noopener noreferrer\">groupby()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.islice\" rel=\"noopener noreferrer\">islice()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-5-2cm1\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.pairwise\" rel=\"noopener noreferrer\">pairwise()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.starmap\" rel=\"noopener noreferrer\">starmap()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.tee\" rel=\"noopener noreferrer\">tee()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.zip_longest\" rel=\"noopener noreferrer\">zip_longest()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-6-28gf\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.product\" rel=\"noopener noreferrer\">product()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.permutations\" rel=\"noopener noreferrer\">permutations()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-7-2j02\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations\" rel=\"noopener noreferrer\">combinations()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement\" rel=\"noopener noreferrer\">combinations_with_replacement()</a>.</li>\n</ul>\n\n\n\n<h2>\n  \n  \n  <em><a href=\"https://docs.python.org/3/library/itertools.html\" rel=\"noopener noreferrer\">itertools</a> has the functions to create iterators.</em>\n</h2>\n\n<p>*<a href=\"https://more-itertools.readthedocs.io/en/stable/api.html\" rel=\"noopener noreferrer\">more-itertools</a> has more functions by installing with <code>pip install more-itertools</code>.</p>\n\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.compress\" rel=\"noopener noreferrer\">compress()</a> can return the iterator which returns the elements of <code>data</code> one by one if the corresponding elements of <code>selectors</code> are <code>True</code> as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>data</code>(Required-Type:<code>iterable</code>).</li>\n<li>The 2nd argument is <code>selectors</code>(Required-Type:<code>iterable</code>).\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">compress</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">compress</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">selectors</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">compress</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">selectors</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.compress object at 0x0000026905F8CF10&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">compress</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">compress</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABCDE</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">selectors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">compress</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">selectors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># A\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># C\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># D\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">compress</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">compress</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABCDE</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">selectors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># A\n# C\n# D\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">compress</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">compress</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABCDE</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">selectors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># A\n# C\n# D\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">compress</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">compress</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABCDE</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">selectors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># A\n# C\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.filterfalse\" rel=\"noopener noreferrer\">filterfalse()</a> can return the iterator which returns the elements of <code>iterable</code> one by one if <code>predicate</code> is <code>True</code> as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>predicate</code>(Required-Type:<code>iterable</code>). *Don't use <code>predicate=</code>.</li>\n<li>The 2nd argument is <code>iterable</code>(Required-Type:<code>iterable</code>). *Don't use <code>iterable=</code>.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">filterfalse</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">filterfalse</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.filterfalse object at 0x0000026906CE8910&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 6\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 8\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">filterfalse</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">filterfalse</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 6\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 8\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.takewhile\" rel=\"noopener noreferrer\">takewhile()</a> can return the iterator which takes(returns) the elements of <code>iterable</code> one by one while <code>predicate</code> is <code>True</code>, then drops the rest of elements of <code>iterable</code> once <code>predicate</code> gets <code>False</code> as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>predicate</code>(Required-Type:<code>iterable</code>). *Don't use <code>predicate=</code>.</li>\n<li>The 2nd argument is <code>iterable</code>(Required-Type:<code>iterable</code>). *Don't use <code>iterable=</code>.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">takewhile</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">takewhile</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.takewhile object at 0x0000026906F68C40&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 1\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 4\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">takewhile</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">takewhile</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 1\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 4\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.dropwhile\" rel=\"noopener noreferrer\">dropwhile()</a> can return the iterator which drops the elements of <code>iterable</code> while <code>predicate</code> is <code>True</code>, then returns the rest of elements of <code>iterable</code> one by one once <code>predicate</code> gets <code>False</code> as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>predicate</code>(Required-Type:<code>iterable</code>). *Don't use <code>predicate=</code>.</li>\n<li>The 2nd argument is <code>iterable</code>(Required-Type:<code>iterable</code>). *Don't use <code>iterable=</code>.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">dropwhile</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">dropwhile</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.dropwhile object at 0x0000026906F696C0&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 6\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 3\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 8\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">dropwhile</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">dropwhile</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 6\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 3\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 8\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"itertools in Python (2)","url":"https://dev.to/hyperkai/itertools-in-python-2-3l58","date":1750946298,"author":"Super Kai (Kazuya Ito)","guid":172197,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-1-2b65\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.count\" rel=\"noopener noreferrer\">count()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.cycle\" rel=\"noopener noreferrer\">cycle()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.repeat\" rel=\"noopener noreferrer\">repeat()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-3-4kca\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.compress\" rel=\"noopener noreferrer\">compress()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.filterfalse\" rel=\"noopener noreferrer\">filterfalse()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.takewhile\" rel=\"noopener noreferrer\">takewhile()</a> and \n<a href=\"https://docs.python.org/3/library/itertools.html#itertools.dropwhile\" rel=\"noopener noreferrer\">dropwhile()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-4-2293\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.groupby\" rel=\"noopener noreferrer\">groupby()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.islice\" rel=\"noopener noreferrer\">islice()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-5-2cm1\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.pairwise\" rel=\"noopener noreferrer\">pairwise()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.starmap\" rel=\"noopener noreferrer\">starmap()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.tee\" rel=\"noopener noreferrer\">tee()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.zip_longest\" rel=\"noopener noreferrer\">zip_longest()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-6-28gf\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.product\" rel=\"noopener noreferrer\">product()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.permutations\" rel=\"noopener noreferrer\">permutations()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-7-2j02\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations\" rel=\"noopener noreferrer\">combinations()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement\" rel=\"noopener noreferrer\">combinations_with_replacement()</a>.</li>\n</ul>\n\n\n\n<h2>\n  \n  \n  <em><a href=\"https://docs.python.org/3/library/itertools.html\" rel=\"noopener noreferrer\">itertools</a> has the functions to create iterators.</em>\n</h2>\n\n<p>*<a href=\"https://more-itertools.readthedocs.io/en/stable/api.html\" rel=\"noopener noreferrer\">more-itertools</a> has more functions by installing with <code>pip install more-itertools</code>.</p>\n\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.accumulate\" rel=\"noopener noreferrer\">accumulate()</a> can return the iterator which accumulates the elements of <code>iterable</code> one by one to return the accumulated elements one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Required-Type:<code>iterable</code>).</li>\n<li>The 2nd argument is <code>func</code>(Optional-Default:<code>None</code>-Type:<code>callable</code>). *It can be <a href=\"https://docs.python.org/3/library/operator.html\" rel=\"noopener noreferrer\">operator</a>.</li>\n<li>The 3rd argument is <code>initial</code>(Optional-Default:<code>None</code>-Type:<code>object</code>).\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">accumulate</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">accumulate</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.accumulate object at 0x0000026906CF9850&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">accumulate</span>\n<span class=\"kn\">from</span> <span class=\"n\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">add</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">accumulate</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">accumulate</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">accumulate</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">add</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">accumulate</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">accumulate</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 1\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 3\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 6\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 10\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 15\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">accumulate</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">accumulate</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 1\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 3\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 6\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 10\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 15\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">accumulate</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">accumulate</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n<span class=\"c1\"># for x in accumulate([10, 1, 2, 3, 4, 5]):\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># 10\n# 11\n# 13\n# 16\n# 20\n# 25\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">accumulate</span>\n<span class=\"kn\">from</span> <span class=\"n\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">mul</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">accumulate</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">mul</span><span class=\"p\">):</span>\n<span class=\"c1\"># for x in accumulate([1, 2, 3, 4, 5], func=lambda a, b: a*b):\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1\n# 2\n# 6\n# 24\n# 120\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.batched\" rel=\"noopener noreferrer\">batched()</a> can return the iterator which batches the one or more elements of <code>iterable</code> one by one to return the batches one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Required-Type:<code>iterable</code>).</li>\n<li>The 2nd argument is <code>n</code>(Required-Type:<code>int</code>). *It's the number of batches. *It must be <code>1 &lt;= x</code>.</li>\n<li>The 3rd argument is <code>strict</code>(Optional-Default:<code>False</code>):\n*Memos:\n\n<ul>\n<li>If it's <code>True</code>, error occurs if the final batch is shorter than <code>n</code>.</li>\n<li>\n<code>strict=</code> must be used.\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">batched</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">batched</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">batched</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.batched object at 0x0000026905D0CE80&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">batched</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">batched</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABCDEFGH</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">batched</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABCDEFGH</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">batched</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">F</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('D', 'E', 'F')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('G', 'H')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">batched</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">batched</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABCDEFGH</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('D', 'E', 'F')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ValueError: batched(): incomplete batch\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">batched</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">batched</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABCDEFGH</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('A', 'B', 'C')\n# ('D', 'E', 'F')\n# ('G', 'H')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">batched</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">batched</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABCDEFGH</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('A', 'B', 'C')\n# ('D', 'E', 'F')\n# ValueError: batched(): incomplete batch\n</span></code></pre>\n\n</div>\n\n\n\n<p>You can use <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain\" rel=\"noopener noreferrer\">chain()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable\" rel=\"noopener noreferrer\">chain.from_iterable()</a> as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<code>chain()</code> can return the iterator which chains <code>*iterables</code> to return the elements one by one:\n*Memos:\n\n<ul>\n<li>The 1st or the later arguments are <code>*iterables</code>(Optional-Type:<code>iterable</code>).</li>\n<li>Don't use any keywords like <code>*iterables=</code>, <code>iterables=</code>, <code>*iterable=</code>, <code>iterable=</code>, etc.</li>\n</ul>\n\n\n</li>\n\n<li>\n<code>chain.from_iterable()</code> can return the iterator which returns the elements of <code>iterable</code> one by one:\n*Memos:\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Required-Type:<code>iterable</code>).</li>\n<li>Don't use <code>iterable=</code>.\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">chain</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">chain</span><span class=\"p\">()</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">chain</span><span class=\"p\">(</span><span class=\"sh\">''</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">chain</span><span class=\"p\">([])</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">chain</span><span class=\"p\">.</span><span class=\"nf\">from_iterable</span><span class=\"p\">(</span><span class=\"sh\">''</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">chain</span><span class=\"p\">.</span><span class=\"nf\">from_iterable</span><span class=\"p\">([])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.chain object at 0x0000026906CEAD70&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">chain</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">chain</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">chain</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">chain</span><span class=\"p\">.</span><span class=\"nf\">from_iterable</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">chain</span><span class=\"p\">.</span><span class=\"nf\">from_iterable</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># A\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># B\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># C\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">chain</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">chain</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">DE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">chain</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">chain</span><span class=\"p\">.</span><span class=\"nf\">from_iterable</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABCDE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">chain</span><span class=\"p\">.</span><span class=\"nf\">from_iterable</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># A\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># B\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># C\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># D\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># E\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">chain</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">chain</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">DE</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">F</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">chain</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">F</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">chain</span><span class=\"p\">.</span><span class=\"nf\">from_iterable</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABCDEF</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">chain</span><span class=\"p\">.</span><span class=\"nf\">from_iterable</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">F</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># A\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># B\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># C\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># D\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># E\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># F\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">chain</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">DE</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">F</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n<span class=\"c1\"># for x in chain.from_iterable('ABCDEF'):\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># A\n# B\n# C\n# D\n# E\n# F\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"itertools in Python (1)","url":"https://dev.to/hyperkai/itertools-in-python-1-2b65","date":1750946224,"author":"Super Kai (Kazuya Ito)","guid":172196,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-2-3l58\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.accumulate\" rel=\"noopener noreferrer\">accumulate()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.batched\" rel=\"noopener noreferrer\">batched()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain\" rel=\"noopener noreferrer\">chain()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable\" rel=\"noopener noreferrer\">chain.from_iterable()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-3-4kca\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.compress\" rel=\"noopener noreferrer\">compress()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.filterfalse\" rel=\"noopener noreferrer\">filterfalse()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.takewhile\" rel=\"noopener noreferrer\">takewhile()</a> and \n<a href=\"https://docs.python.org/3/library/itertools.html#itertools.dropwhile\" rel=\"noopener noreferrer\">dropwhile()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-4-2293\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.groupby\" rel=\"noopener noreferrer\">groupby()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.islice\" rel=\"noopener noreferrer\">islice()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-5-2cm1\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.pairwise\" rel=\"noopener noreferrer\">pairwise()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.starmap\" rel=\"noopener noreferrer\">starmap()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.tee\" rel=\"noopener noreferrer\">tee()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.zip_longest\" rel=\"noopener noreferrer\">zip_longest()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-6-28gf\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.product\" rel=\"noopener noreferrer\">product()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.permutations\" rel=\"noopener noreferrer\">permutations()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-7-2j02\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations\" rel=\"noopener noreferrer\">combinations()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement\" rel=\"noopener noreferrer\">combinations_with_replacement()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-1-3341\">My post</a> explains an iterator (1).</li>\n</ul>\n\n\n\n<h2>\n  \n  \n  <em><a href=\"https://docs.python.org/3/library/itertools.html\" rel=\"noopener noreferrer\">itertools</a> has the functions to create iterators.</em>\n</h2>\n\n<p>*<a href=\"https://more-itertools.readthedocs.io/en/stable/api.html\" rel=\"noopener noreferrer\">more-itertools</a> has more functions by installing with <code>pip install more-itertools</code>.</p>\n\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.count\" rel=\"noopener noreferrer\">count()</a> can return the iterator which endlessly generates a number one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>start</code>(Optional-Default:<code>0</code>-Type:<code>int</code>, <code>float</code>, <code>complex</code> or <code>bool</code>).</li>\n<li>The 2nd argument is <code>step</code>(Optional-Default:<code>1</code>-Type:<code>int</code>, <code>float</code>, <code>complex</code> or <code>bool</code>).\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">count</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">count</span><span class=\"p\">()</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;class 'itertools.count'&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 0\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 1\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 2\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 3\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 4\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">count</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">count</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># count(0)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># count(0)\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 0\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># count(1)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># count(1)\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 1\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 2\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 3\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># 4\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">count</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">count</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0\n# 1\n# 2\n# 3\n# 4\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">count</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># -5\n# -2\n# 1\n# 4\n# 7\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">count</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=-</span><span class=\"mf\">5.0</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mf\">3.0</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># -5.0\n# -2.0\n# 1.0\n# 4.0\n# 7.0\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">count</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=-</span><span class=\"mf\">5.0</span><span class=\"o\">+</span><span class=\"mf\">0.0j</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mf\">3.0</span><span class=\"o\">+</span><span class=\"mf\">0.0j</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># (-5+0j)\n# (-2+0j)\n# (1+0j)\n# (4+0j)\n# (7+0j)\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">count</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=-</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># 5\n# 2\n# -1\n# -4\n# -7\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.cycle\" rel=\"noopener noreferrer\">cycle()</a> can return the iterator which endlessly repeats the elements of <code>iterable</code> one by one as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Required-Type:<code>iterable</code>).</li>\n<li>Don't use <code>iterable=</code>.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">cycle</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">cycle</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">cycle</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.cycle object at 0x0000026906F4EA00&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># A\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># B\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># C\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># A\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># B\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># C\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># A\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># B\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">cycle</span>\n\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">cycle</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">8</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"c1\"># A\n# B\n# C\n# A\n# B\n# C\n# A\n# B\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#itertools.repeat\" rel=\"noopener noreferrer\">repeat()</a> can return the iterator which endlessly or limitedly repeats <code>object</code> as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>object</code>(Required-Type:<code>object</code>).</li>\n<li>The 2nd argument is <code>times</code>(Optional-Type:<code>int</code>). *If it's set, <code>object</code> is limitedly repeated otherwise <code>object</code> is endlessly repeated.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">repeat</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">repeat</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Hello</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># repeat('Hello')\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;class 'itertools.repeat'&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># Hello\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># Hello\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># Hello\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># Hello\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># Hello\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">repeat</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">repeat</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Hello</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">times</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># Hello\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># Hello\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># Hello\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">repeat</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">repeat</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Hello</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">times</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># Hello\n# Hello\n# Hello\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"pykaggle","url":"https://dev.to/codewizard123/pykaggle-3ifh","date":1750945617,"author":"james","guid":172195,"unread":true,"content":"<p>pykaggle, a python cli tool to load kaggle dataset csv files from the cli using python and argparse. </p>\n\n<p>you can load what every kaggle dataset you want just enter -a  and -d  </p>\n\n<p>kaggle website: <a href=\"https://www.kaggle.com/datasets\" rel=\"noopener noreferrer\">https://www.kaggle.com/datasets</a> happy dataseting</p>\n\n<p>github repo: <a href=\"https://github.com/Jamcha123/pykaggle\" rel=\"noopener noreferrer\">https://github.com/Jamcha123/pykaggle</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Can you read this article and tell me what you think? Your advice is very valuable to me","url":"https://dev.to/setrathexx/can-you-read-this-article-and-tell-me-what-you-think-your-advice-is-very-valuable-to-me-4g63","date":1750945574,"author":"SetraTheX","guid":172194,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/setrathexx\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F3278123%2F62ec0628-4a1c-4f96-8447-ecb24af00e4f.jpeg\" alt=\"setrathexx\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/setrathexx/-is-100-ai-assisted-software-development-possible-a-real-experience-4l60\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2># Is 100% AI-Assisted Software Development Possible? ‚Äì A Real Experience</h2>\n      <h3>SetraTheX „Éª Jun 20</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#python</span>\n        <span class=\"ltag__link__tag\">#ai</span>\n        <span class=\"ltag__link__tag\">#githubcopilot</span>\n        <span class=\"ltag__link__tag\">#devjournal</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Lazyeat: Control Your World with Hand Gestures!","url":"https://dev.to/githubopensource/lazyeat-control-your-world-with-hand-gestures-50e6","date":1750944626,"author":"GitHubOpenSource","guid":172189,"unread":true,"content":"<h2>\n  \n  \n  Quick Summary: üìù\n</h2>\n\n<p>Lazyeat is a hands-free controller that uses gesture recognition to allow users to control their devices while eating. It supports various gestures for cursor control, clicks, scrolling, and key presses, as well as voice input. The primary use case is to avoid touching devices with greasy hands during meals.</p>\n\n<h2>\n  \n  \n  Key Takeaways: üí°\n</h2>\n\n<ul>\n<li><p>‚úÖ Gesture-based control of media players and web browsers.</p></li>\n<li><p>‚úÖ Cross-platform compatibility (Windows, macOS, with Linux, Android, and iOS in development).</p></li>\n<li><p>‚úÖ Combination of Python and Rust for efficient and portable development.</p></li>\n<li><p>‚úÖ Well-documented and open-source, making it easy to contribute and learn.</p></li>\n<li><p>‚úÖ Intuitive and user-friendly interface.</p></li>\n</ul>\n\n<h2>\n  \n  \n  Project Statistics: üìä\n</h2>\n\n<ul>\n<li>‚≠ê <strong>Stars:</strong> 762</li>\n<li>üç¥ <strong>Forks:</strong> 31</li>\n<li>‚ùó <strong>Open Issues:</strong> 9</li>\n</ul>\n\n<h2>\n  \n  \n  Tech Stack: üíª\n</h2>\n\n<ul>\n<li>‚úÖ Vue</li>\n</ul>\n\n<p>Ever wished you could control your media player or web browser without lifting a finger, literally?  Meet Lazyeat, a revolutionary project that lets you do just that using hand gestures!  Imagine watching a movie, browsing the web, and effortlessly pausing, scrolling, or switching videos with simple hand movements. No more sticky fingers interrupting your binge-watching sessions! Lazyeat uses computer vision to recognize your gestures and translate them into commands, making multitasking a breeze.</p>\n\n<p>Lazyeat's architecture is surprisingly simple. It combines the power of Python for backend processing and Rust with Tauri for the cross-platform frontend. The Python backend handles the core gesture recognition logic, leveraging machine learning models to accurately interpret your hand movements.  The Rust/Tauri frontend provides a sleek and responsive interface, ensuring a smooth user experience across different operating systems. This clever combination ensures efficiency and portability, something many similar projects struggle with.</p>\n\n<p>But what are the real benefits for developers? First, it's a fantastic example of how to combine different technologies to achieve a seamless user experience. The project is well-documented, making it an excellent resource for learning how to integrate Python and Rust effectively. It's also a great case study in using computer vision in a practical application.  Furthermore, Lazyeat's open-source nature allows developers to contribute, learn, and adapt the code to their own needs, fostering a collaborative learning environment.  The project's modular design makes it easy to extend its functionality or integrate it into other projects, opening up possibilities for creating custom gesture-controlled applications.</p>\n\n<p>The project currently supports Windows and macOS, with Linux, Android, and iOS versions in development.  The project's README provides detailed instructions on setting up the development environment and building the application.  Whether you're a seasoned developer or a curious beginner, Lazyeat offers something for everyone.  It's a chance to learn from a well-structured, efficient project while contributing to a fun and useful application.  The community is active and welcoming, ready to assist with any questions or challenges you might encounter.  Get involved and contribute to the future of gesture-based computing!</p>\n\n<p>Beyond the technical aspects, Lazyeat's user-friendliness is a significant advantage. The intuitive interface requires minimal learning curve, making it accessible to a wide range of users.  This focus on usability is a testament to the project's commitment to creating a truly useful and enjoyable tool.</p>\n\n<h2>\n  \n  \n  Learn More: üîó\n</h2>\n\n<p><a href=\"https://github.com/lanxiuyun/lazyeat\" rel=\"noopener noreferrer\">View the Project on GitHub</a></p>\n\n\n\n\n<h2>\n  \n  \n  üåü Stay Connected with GitHub Open Source!\n</h2>\n\n<blockquote>\n<p>üì± <strong>Join us on Telegram</strong><br><br>\nGet daily updates on the best open-source projects<br><br>\n<a href=\"https://t.me/GitHub_Open_Source\" rel=\"noopener noreferrer\">GitHub Open Source</a></p>\n\n<p>üë• <strong>Follow us on Facebook</strong><br><br>\nConnect with our community and never miss a discovery<br><br>\n<a href=\"https://www.facebook.com/people/GitHub-Open-Source/61571925474856/\" rel=\"noopener noreferrer\">GitHub Open Source</a></p>\n</blockquote>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"2nd day as a developer:","url":"https://dev.to/rebecca254/2nd-day-as-a-developer-2pdn","date":1750941439,"author":"Rebecca-254","guid":172163,"unread":true,"content":"<p><strong>undestanding version control with git ang git hub</strong></p>\n\n<p>the second day i went a step ahead into something I had heard about a lot but never really understood: version control.</p>\n\n<p>At first, it sounded like a scary technical thing. But once I read more about it, I realized‚Ä¶ it‚Äôs basically just a smart way to save and track your work.</p>\n\n<p><strong>So what is version control</strong><br>\n I understood version control as a system that helps developers keep track of changes in their code over time.  It helps in;</p>\n\n<ol>\n<li>Save every change you make</li>\n<li>Go back to older versions if something breaks</li>\n<li>Work on projects without messing up the main one</li>\n<li>Collaborate with other developers safely</li>\n</ol>\n\n<p><strong>Tools Learned</strong></p>\n\n<p><strong>Git</strong><br>\nGit tracks your changes locally and is installed in  computer as i did in my previous article. </p>\n\n<p><strong>GitHub</strong></p>\n\n<p>Tis is the cloud platform where your Git-tracked projects can be uploaded, shared, and collaborated on with others. </p>\n\n<p>in other words <br>\nGit = Your notebook<br>\nGitHub = The cloud where you back it up and share with friends</p>\n\n<p><strong>Basic Git terms</strong></p>\n\n<p><em>Repo</em>: A Git folder/project<br>\n<em>Commit</em>: A saved change with a message<br>\n<em>Branch</em>: A copy of your code to test new things<br>\n<em>Push</em>: Upload to GitHub<br>\n<em>Pull</em>: Download from GitHub</p>\n\n<p><strong>This is what i did</strong></p>\n\n<p>-Created a test project folder using git bash by running the following command</p>\n\n<p>mkdir my-besquat-project<br>\ncd my-besquat-project</p>\n\n<p>then created a ripo named besquat in GitHub by clicking 'new repository'</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fvh8r9ju205712d8p2pu2.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fvh8r9ju205712d8p2pu2.png\" alt=\"Image description\" width=\"800\" height=\"450\"></a></p>\n\n<p>then ran this following on git</p>\n\n<p>git init<br>\ncode .<br><br>\ngit add .<br>\ngit commit -m \"Initial commit\"<br>\ngit remote add origin <a href=\"https://github.com/Rebecca-254/my-besquat-project.git\" rel=\"noopener noreferrer\">https://github.com/Rebecca-254/my-besquat-project.git</a><br>\ngit branch -M main<br>\ngit push -u origin main</p>\n\n<p>It took a few tries, but when I saw my code on GitHub, I was proud</p>\n\n<p>struggles<br>\n-confused between Git and GitHubüòÇ<br>\n-My push failed because I hadn‚Äôt set up the remote URL correctly</p>\n\n<p><strong>What i learned</strong></p>\n\n<ol>\n<li>Git is like ‚ÄúSave with notes‚Äù</li>\n<li>GitHub is where your saved work lives online</li>\n<li>Version control isn‚Äôt hard ‚Äî it just takes practice</li>\n</ol>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Fundamentals: asyncio","url":"https://dev.to/devopsfundamentals/python-fundamentals-asyncio-1d3m","date":1750940726,"author":"DevOps Fundamental","guid":172162,"unread":true,"content":"<h2>\n  \n  \n  Mastering asyncio: From Production Incidents to Scalable Systems\n</h2>\n\n<h3>\n  \n  \n  Introduction\n</h3>\n\n<p>In late 2022, a critical production incident brought the limitations of our legacy synchronous data ingestion pipeline into sharp focus. We were processing a rapidly increasing stream of events from a third-party API, and the pipeline, built on <code>requests</code> and blocking database operations, choked under the load. Response times ballooned, leading to timeouts and data loss. The root cause wasn‚Äôt a lack of resources, but inefficient I/O handling.  A complete rewrite using <code>asyncio</code> and <code>aiohttp</code> not only resolved the immediate crisis but also reduced infrastructure costs by 40% and improved throughput by an order of magnitude. This experience underscored the necessity of deeply understanding <code>asyncio</code> for building modern, scalable Python applications.  It‚Äôs no longer a ‚Äúnice-to-have‚Äù ‚Äì it‚Äôs fundamental for cloud-native services, data pipelines, and any application dealing with concurrent I/O.</p>\n\n<h3>\n  \n  \n  What is \"asyncio\" in Python?\n</h3>\n\n<p><code>asyncio</code> is Python‚Äôs library for writing concurrent code using the <code>async/await</code> syntax.  Defined in PEP 525, it provides a framework for event loop-based concurrency, enabling single-threaded, asynchronous execution of coroutines.  Crucially, it‚Äôs <em>not</em> true parallelism (unless combined with multiprocessing).  Instead, it‚Äôs cooperative multitasking where coroutines voluntarily yield control back to the event loop when waiting for I/O operations.</p>\n\n<p>At the CPython level, <code>asyncio</code> leverages generators and the <code>yield from</code> construct (now superseded by <code>await</code>) to implement coroutines.  The event loop manages the execution of these coroutines, switching between them when one is blocked on I/O.  Type hints, introduced in PEP 484 and refined in subsequent PEPs, are essential for working with <code>asyncio</code> effectively, allowing static analysis tools like <code>mypy</code> to verify the correct usage of <code>async</code> and <code>await</code>.  The standard library‚Äôs <code>asyncio</code> module provides the core primitives, while libraries like <code>aiohttp</code>, <code>aiopg</code>, and <code>asyncpg</code> offer asynchronous versions of common I/O operations.</p>\n\n<h3>\n  \n  \n  Real-World Use Cases\n</h3>\n\n<ol>\n<li><p><strong>FastAPI Request Handling:</strong>  We extensively use FastAPI for building REST APIs.  FastAPI is built on top of <code>asyncio</code> and Starlette, allowing us to handle thousands of concurrent requests with minimal overhead.  The asynchronous nature of request handling prevents blocking, maximizing throughput.</p></li>\n<li><p><strong>Async Job Queues (Celery with Redis):</strong>  Our background task processing relies on Celery, configured to use an <code>asyncio</code> worker pool with Redis as the broker. This allows us to offload long-running tasks (e.g., image processing, report generation) without blocking the main application thread.</p></li>\n<li><p><strong>Type-Safe Data Models with Pydantic:</strong>  Pydantic‚Äôs asynchronous validation capabilities are crucial for ensuring data integrity in our API endpoints.  We define Pydantic models with type annotations and use <code>pydantic.validate_call</code> to validate request bodies and responses asynchronously.</p></li>\n<li><p><strong>CLI Tools with AnyIO:</strong>  For command-line tools that perform network operations, we‚Äôve adopted AnyIO.  AnyIO provides a consistent API for asynchronous I/O across different event loop implementations (e.g., <code>asyncio</code>, <code>trio</code>, <code>uvloop</code>), making our CLI tools more portable and testable.</p></li>\n<li><p><strong>ML Preprocessing Pipelines:</strong>  In our machine learning infrastructure, we use <code>asyncio</code> to parallelize data preprocessing steps like feature extraction and data augmentation.  This significantly reduces the time required to prepare data for model training.</p></li>\n</ol>\n\n<h3>\n  \n  \n  Integration with Python Tooling\n</h3>\n\n<p><code>asyncio</code>‚Äôs effectiveness is greatly enhanced by integration with modern Python tooling.</p>\n\n<p><strong><code>pyproject.toml</code> Configuration:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight toml\"><code><span class=\"nn\">[tool.mypy]</span>\n<span class=\"py\">python_version</span> <span class=\"p\">=</span> <span class=\"s\">\"3.11\"</span>\n<span class=\"py\">warn_unused_configs</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n<span class=\"py\">disallow_untyped_defs</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n<span class=\"py\">check_untyped_defs</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n<span class=\"py\">ignore_missing_imports</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n\n<span class=\"nn\">[tool.pytest]</span>\n<span class=\"py\">asyncio_mode</span> <span class=\"p\">=</span> <span class=\"s\">\"strict\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This configuration enables strict type checking with <code>mypy</code> and ensures that <code>pytest</code> correctly handles asynchronous tests.  The <code>asyncio_mode = \"strict\"</code> setting forces all tests to be asynchronous, preventing accidental blocking operations.</p>\n\n<p><strong>Runtime Hooks:</strong>  We use a custom <code>asyncio</code> event loop policy to inject tracing and monitoring hooks. This allows us to capture detailed performance metrics and debug issues in production.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">logging</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomEventLoopPolicy</span><span class=\"p\">(</span><span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"n\">DefaultEventLoopPolicy</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Using custom asyncio event loop policy</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">set_event_loop_policy</span><span class=\"p\">(</span><span class=\"nc\">CustomEventLoopPolicy</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Code Examples &amp; Patterns\n</h3>\n\n<p><strong>Asynchronous Database Interaction (using <code>asyncpg</code>):</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncpg</span>\n<span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_user</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">:</span> <span class=\"n\">asyncpg</span><span class=\"p\">.</span><span class=\"n\">Pool</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"nf\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"nf\">fetchrow</span><span class=\"p\">(</span>\n            <span class=\"sh\">\"</span><span class=\"s\">SELECT id, username FROM users WHERE id = $1</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">user_id</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"sh\">\"</span><span class=\"s\">username</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">username</span><span class=\"sh\">\"</span><span class=\"p\">]}</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncpg</span><span class=\"p\">.</span><span class=\"nf\">create_pool</span><span class=\"p\">(</span>\n        <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">postgres</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">password</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">mydatabase</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">localhost</span><span class=\"sh\">\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">fetch_user</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This example demonstrates a common pattern: using an asynchronous connection pool to efficiently manage database connections.  The <code>async with</code> statement ensures that connections are properly released back to the pool.</p>\n\n<p><strong>Configuration Layering (using <code>pydantic</code> and <code>settings</code>):</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseSettings</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Settings</span><span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n    <span class=\"n\">database_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">:</span>\n        <span class=\"n\">env_file</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">.env</span><span class=\"sh\">\"</span>\n        <span class=\"n\">env_file_encoding</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span>\n\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"nc\">Settings</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This pattern allows us to manage configuration settings in a structured and type-safe manner.  The <code>BaseSettings</code> class automatically loads settings from environment variables and a <code>.env</code> file.</p>\n\n<h3>\n  \n  \n  Failure Scenarios &amp; Debugging\n</h3>\n\n<p>A common pitfall is accidentally blocking the event loop with synchronous operations.  This can lead to performance degradation and even deadlocks.  We encountered this when a third-party library, used for image resizing, performed synchronous I/O operations within an <code>asyncio</code> coroutine.</p>\n\n<p><strong>Debugging Strategy:</strong></p>\n\n<ol>\n<li>\n<strong>Logging:</strong>  Extensive logging with timestamps and correlation IDs is crucial for tracing the flow of execution.</li>\n<li>\n<strong><code>pdb</code> (Python Debugger):</strong>  Use <code>pdb</code> within an <code>asyncio</code> coroutine to step through the code and inspect variables.  However, be aware that <code>pdb</code> can block the event loop, so use it sparingly in production.</li>\n<li>\n<strong><code>cProfile</code>:</strong>  Use <code>cProfile</code> to identify performance bottlenecks.  Pay attention to functions that consume a significant amount of time.</li>\n<li>\n<strong>Runtime Assertions:</strong>  Add assertions to verify assumptions about the state of the application.</li>\n</ol>\n\n<p><strong>Example Exception Trace:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Traceback (most recent call last):\n  File \"app.py\", line 25, in main\n    result = await some_async_function()\n  File \"app.py\", line 15, in some_async_function\n    resized_image = sync_image_resize(image_data) # Blocking call!\n\n  File \"/path/to/third_party_library.py\", line 10, in sync_image_resize\n    # ... synchronous I/O operations ...\n\nRuntimeError: Event loop was blocked for longer than 100ms\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Performance &amp; Scalability\n</h3>\n\n<p>Benchmarking <code>asyncio</code> applications requires careful consideration.  <code>timeit</code> is useful for microbenchmarks, but it doesn‚Äôt accurately reflect the performance of concurrent I/O operations.  We use <code>async benchmarks</code> (a pytest plugin) to measure the throughput and latency of our asynchronous endpoints.</p>\n\n<p><strong>Tuning Techniques:</strong></p>\n\n<ol>\n<li>\n<strong>Avoid Global State:</strong>  Global state can introduce race conditions and make it difficult to reason about the behavior of concurrent code.</li>\n<li>\n<strong>Reduce Allocations:</strong>  Excessive memory allocations can lead to garbage collection pauses and performance degradation.  Use object pooling and reuse existing objects whenever possible.</li>\n<li>\n<strong>Control Concurrency:</strong>  Limit the number of concurrent tasks to prevent resource exhaustion.  Use <code>asyncio.Semaphore</code> to control access to shared resources.</li>\n<li>\n<strong>C Extensions:</strong>  For performance-critical operations, consider using C extensions to offload work to native code.</li>\n</ol>\n\n<h3>\n  \n  \n  Security Considerations\n</h3>\n\n<p><code>asyncio</code> introduces new security risks, particularly related to deserialization of untrusted data.  If you‚Äôre using <code>asyncio</code> to handle network requests, be careful about deserializing data from untrusted sources.  Insecure deserialization can lead to code injection and privilege escalation.</p>\n\n<p><strong>Mitigations:</strong></p>\n\n<ol>\n<li>\n<strong>Input Validation:</strong>  Thoroughly validate all input data before deserializing it.</li>\n<li>\n<strong>Trusted Sources:</strong>  Only deserialize data from trusted sources.</li>\n<li>\n<strong>Defensive Coding:</strong>  Use defensive coding techniques to prevent unexpected behavior.</li>\n</ol>\n\n<h3>\n  \n  \n  Testing, CI &amp; Validation\n</h3>\n\n<p>We employ a multi-layered testing strategy:</p>\n\n<ol>\n<li>\n<strong>Unit Tests:</strong>  Test individual functions and classes in isolation.</li>\n<li>\n<strong>Integration Tests:</strong>  Test the interaction between different components.</li>\n<li>\n<strong>Property-Based Tests (Hypothesis):</strong>  Generate random inputs to test the robustness of our code.</li>\n<li>\n<strong>Type Validation (mypy):</strong>  Enforce type safety and prevent runtime errors.</li>\n</ol>\n\n<p><strong>CI/CD Pipeline:</strong></p>\n\n<ul>\n<li>\n<strong><code>pytest</code>:</strong>  Run unit and integration tests.</li>\n<li>\n<strong><code>mypy</code>:</strong>  Perform static type checking.</li>\n<li>\n<strong><code>tox</code>/<code>nox</code>:</strong>  Test against multiple Python versions.</li>\n<li>\n<strong>GitHub Actions:</strong>  Automate the CI/CD pipeline.</li>\n<li>\n<strong>Pre-commit:</strong>  Enforce code style and linting.</li>\n</ul>\n\n<h3>\n  \n  \n  Common Pitfalls &amp; Anti-Patterns\n</h3>\n\n<ol>\n<li>\n<strong>Blocking the Event Loop:</strong>  Performing synchronous operations within an <code>asyncio</code> coroutine.</li>\n<li>\n<strong>Ignoring <code>await</code>:</strong>  Forgetting to <code>await</code> asynchronous calls.</li>\n<li>\n<strong>Using Global State:</strong>  Introducing race conditions and making it difficult to reason about concurrent code.</li>\n<li>\n<strong>Over-Concurrency:</strong>  Creating too many concurrent tasks, leading to resource exhaustion.</li>\n<li>\n<strong>Incorrect Error Handling:</strong>  Not properly handling exceptions in asynchronous code.</li>\n</ol>\n\n<h3>\n  \n  \n  Best Practices &amp; Architecture\n</h3>\n\n<ul>\n<li>\n<strong>Type-Safety:</strong>  Use type hints extensively to improve code readability and prevent runtime errors.</li>\n<li>\n<strong>Separation of Concerns:</strong>  Design modular components with well-defined interfaces.</li>\n<li>\n<strong>Defensive Coding:</strong>  Add assertions and error handling to prevent unexpected behavior.</li>\n<li>\n<strong>Configuration Layering:</strong>  Manage configuration settings in a structured and type-safe manner.</li>\n<li>\n<strong>Dependency Injection:</strong>  Use dependency injection to improve testability and maintainability.</li>\n<li>\n<strong>Automation:</strong>  Automate testing, linting, and deployment.</li>\n</ul>\n\n<h3>\n  \n  \n  Conclusion\n</h3>\n\n<p>Mastering <code>asyncio</code> is essential for building robust, scalable, and maintainable Python systems.  It requires a deep understanding of the underlying concepts, careful attention to detail, and a commitment to best practices.  Don‚Äôt hesitate to refactor legacy code to embrace asynchronous patterns, measure performance to identify bottlenecks, write comprehensive tests to ensure correctness, and enforce type checking to prevent runtime errors.  The investment will pay dividends in the long run.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 1: 100 Days of Python","url":"https://dev.to/sohmkaviskar/day-1-100-days-of-python-2d4d","date":1750938730,"author":"Soham Kaviskar","guid":172124,"unread":true,"content":"<h2>\n  \n  \n  <strong>Day 1 of Learning Python from Udemy</strong>\n</h2>\n\n<p>Today in Python I learnt from <strong>Print *<em>to Generating a *</em><em>Folks Name Generateor</em></strong><br>\nSo it all started from writing simple code which everyone knows<br>\n<code>print(\"Hello World\")</code> but theirs a twist you can't add <strong>space **between <code>print</code> and <code>(\"Hello World\")</code> and also the (\"\") is known as **Strings</strong></p>\n\n<p>Next comes the { <code>\\n</code> } which continues code in second line</p>\n\n<p>Also for merging use \" + \" itconnects a words or sentence</p>\n\n<p>Using the len(<a class=\"mentioned-user\" href=\"https://dev.to/sohmkaviskar\">@sohmkaviskar</a>) inside this len you can add any text and output <br>\nwill the characters it contains<br>\nEx: sohmkaviskar<br>\n    12</p>\n\n<p>Mostly the Hard to come up with understanding is the<br>\n<strong>Variable</strong> : It use to name a code which can be in strings, print, input etc.Also it can be use has tag <br>\nEx:<br>\nHere the Word before the equal is string has it next used in 2nd line</p>\n\n<blockquote>\n<p>Username=input(\"What is your name?\")<br>\nLength= len(Username)<br>\nprint(Length)   </p>\n</blockquote>\n\n<p>There's Question for you:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fm0tu2khq4tlzp5h19he2.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fm0tu2khq4tlzp5h19he2.png\" alt=\"Image description\" width=\"475\" height=\"202\"></a></p>\n\n<p>glass1 = \"milk\"<br>\nglass2 = \"juice\"</p>\n\n<p>Thank You.</p>\n\n<p>You can't replace the glass with each other like <br>\n`glass1----&gt;glass2</p>\n\n<p>glass2=\"milk\"<br>\nglass1=\"juice\"`</p>\n\n<p>This is <strong>Incorrect</strong></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Auto-Generate requirements.txt for Python Projects: Complete Guide to pipreqs and pigar","url":"https://dev.to/livingdevops/how-to-auto-generate-requirementstxt-for-python-projects-complete-guide-to-pipreqs-and-pigar-19p0","date":1750937360,"author":"Akhilesh Mishra","guid":172123,"unread":true,"content":"<p><em>Stop manually hunting for Python dependencies - automate requirements.txt generation with these powerful tools</em></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fimages.unsplash.com%2Fphoto-1516259762381-22954d7d3ad2%3Fixlib%3Drb-4.0.3%26ixid%3DM3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%253D%253D%26auto%3Dformat%26fit%3Dcrop%26w%3D2089%26q%3D80\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fimages.unsplash.com%2Fphoto-1516259762381-22954d7d3ad2%3Fixlib%3Drb-4.0.3%26ixid%3DM3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%253D%253D%26auto%3Dformat%26fit%3Dcrop%26w%3D2089%26q%3D80\" alt=\"Python dependency management tools\" width=\"800\" height=\"522\"></a></p>\n\n<p>As a DevOps engineer, I frequently collaborate with multiple teams, diving into various projects and repositories. One common challenge I face is encountering Python code without a <code>requirements.txt</code> file.</p>\n\n<p>Every time I run such code, I need to figure out and manually install the necessary dependencies. I found it a waste of time and effort. I am sure you guys also feel the same way.</p>\n\n<p>So I dug around, did some Google searches, experimented with a few tools, and found many good ones. My favorites are <strong>pipreqs</strong> and <strong>pigar</strong>. </p>\n\n<p>In this comprehensive guide, I'll show you how to use these Python dependency management tools to generate <code>requirements.txt</code> files automatically for any Python project.</p>\n\n<h2>\n  \n  \n  Table of Contents\n</h2>\n\n<ul>\n<li>Why Not Use pip freeze?</li>\n<li>Method 1: Using pipreqs</li>\n<li>Method 2: Using pigar</li>\n<li>Comparison and Best Practices</li>\n</ul>\n\n<h2>\n  \n  \n  Why Not Use pip freeze?\n</h2>\n\n<p>Before diving into the solutions, let's address why <code>pip freeze</code> isn't always the best choice for generating <code>requirements.txt</code>:</p>\n\n<p>‚ùå <strong>pip freeze problems:</strong></p>\n\n<ul>\n<li>Only saves packages installed with <code>pip install</code> in your current environment</li>\n<li>Includes ALL packages in the environment, even those not used in your project (if you don't use virtualenv)</li>\n<li>Sometimes you need to create <code>requirements.txt</code> for a new project without installing modules first</li>\n<li>Can include system-wide packages that aren't relevant to your project</li>\n</ul>\n\n<p>‚úÖ <strong>What we need instead:</strong></p>\n\n<ul>\n<li>Tools that analyze your actual Python code</li>\n<li>Generate requirements based on import statements</li>\n<li>Create clean, project-specific dependency lists</li>\n</ul>\n\n<h2>\n  \n  \n  Method 1: Using pipreqs - The Import-Based Analyzer\n</h2>\n\n<h3>\n  \n  \n  What is pipreqs?\n</h3>\n\n<p><code>pipreqs</code> is a Python tool that analyzes your Python files and generates <code>requirements.txt</code> based on the actual imports in your code. It's smart, fast, and doesn't require installing packages beforehand.</p>\n\n<h3>\n  \n  \n  Setting Up Your Environment\n</h3>\n\n<p>I recommend working with isolated Python virtual environments for better dependency management:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Create a project directory</span>\n<span class=\"nb\">mkdir </span>python-requirements-demo\n<span class=\"nb\">cd </span>python-requirements-demo\n\n<span class=\"c\"># Create and activate virtual environment</span>\npython3 <span class=\"nt\">-m</span> venv venv\n<span class=\"nb\">source </span>venv/bin/activate  <span class=\"c\"># On Windows: venv\\Scripts\\activate</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Installing pipreqs\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>pipreqs\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Practical Example: Word Cloud Generator\n</h3>\n\n<p>Let's create a real Python project to demonstrate pipreqs. Create a directory and file:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">mkdir </span>project\n<span class=\"nb\">cd </span>project\n</code></pre>\n\n</div>\n\n\n\n<p>Create <code>word_cloud_generator.py</code> with the following code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"kn\">from</span> <span class=\"n\">wordcloud</span> <span class=\"kn\">import</span> <span class=\"n\">WordCloud</span>\n<span class=\"kn\">from</span> <span class=\"n\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Counter</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">from</span> <span class=\"n\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"kn\">import</span> <span class=\"n\">argparse</span>\n<span class=\"kn\">from</span> <span class=\"n\">io</span> <span class=\"kn\">import</span> <span class=\"n\">BytesIO</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_mask_image</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Download and process mask image from URL</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"nc\">BytesIO</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_word_cloud</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">mask_url</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Generate word cloud from text with optional mask</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">mask_url</span><span class=\"p\">:</span>\n        <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"nf\">get_mask_image</span><span class=\"p\">(</span><span class=\"n\">mask_url</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"n\">wordcloud</span> <span class=\"o\">=</span> <span class=\"nc\">WordCloud</span><span class=\"p\">(</span>\n        <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">800</span><span class=\"p\">,</span> \n        <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span> \n        <span class=\"n\">background_color</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">white</span><span class=\"sh\">'</span><span class=\"p\">,</span> \n        <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span> \n        <span class=\"n\">contour_width</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n        <span class=\"n\">contour_color</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">black</span><span class=\"sh\">'</span>\n    <span class=\"p\">).</span><span class=\"nf\">generate</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">imshow</span><span class=\"p\">(</span><span class=\"n\">wordcloud</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">bilinear</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">axis</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">off</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">show</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_arguments</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Parse command line arguments</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"p\">.</span><span class=\"nc\">ArgumentParser</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Generate a word cloud from input text</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">--text</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">-t</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Input text for word cloud</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">--mask_url</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">-m</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">URL of mask image for word cloud shape</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"nf\">parse_args</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"nf\">parse_arguments</span><span class=\"p\">()</span>\n    <span class=\"nf\">create_word_cloud</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">mask_url</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Generating requirements.txt with pipreqs\n</h3>\n\n<p>Now comes the magic! Instead of manually figuring out dependencies, run:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Generate requirements.txt for the project directory</span>\npipreqs project\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Output in <code>requirements.txt</code>:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>matplotlib==3.9.1\nnumpy==2.0.0\nPillow==10.4.0\nRequests==2.32.3\nwordcloud==1.9.3\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Installing and Testing Dependencies\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Install all dependencies at once</span>\npip <span class=\"nb\">install</span> <span class=\"nt\">-r</span> project/requirements.txt\n\n<span class=\"c\"># Test the script</span>\npython project/word_cloud_generator.py <span class=\"nt\">--text</span> <span class=\"s2\">\"Python dependency management made easy\"</span>\n\n<span class=\"c\"># With mask image</span>\npython project/word_cloud_generator.py <span class=\"nt\">--text</span> <span class=\"s2\">\"pipreqs is awesome\"</span> <span class=\"nt\">--mask_url</span> <span class=\"s2\">\"https://example.com/mask.jpg\"</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Advanced pipreqs Options\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Generate requirements for specific directory</span>\npipreqs /path/to/your/project\n\n<span class=\"c\"># Specify output file name</span>\npipreqs <span class=\"nb\">.</span> <span class=\"nt\">--savepath</span> requirements-dev.txt\n\n<span class=\"c\"># Force overwrite existing requirements.txt</span>\npipreqs <span class=\"nb\">.</span> <span class=\"nt\">--force</span>\n\n<span class=\"c\"># Use local database for package names</span>\npipreqs <span class=\"nb\">.</span> <span class=\"nt\">--use-local</span>\n\n<span class=\"c\"># Debug mode for troubleshooting</span>\npipreqs <span class=\"nb\">.</span> <span class=\"nt\">--debug</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Method 2: Using pigar - The Advanced Dependency Scanner\n</h2>\n\n<h3>\n  \n  \n  What is pigar?\n</h3>\n\n<p><code>pigar</code> is another excellent tool for generating Python requirements. It offers more advanced features and better handling of complex projects.</p>\n\n<h3>\n  \n  \n  Installing pigar\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Using pip</span>\npip <span class=\"nb\">install </span>pigar\n\n<span class=\"c\"># From source (latest features)</span>\npip <span class=\"nb\">install </span>git+https://github.com/damnever/pigar.git@main <span class=\"nt\">--upgrade</span>\n\n<span class=\"c\"># Using conda</span>\nconda <span class=\"nb\">install</span> <span class=\"nt\">-c</span> conda-forge pigar\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Real-World Example: Flask Application\n</h3>\n\n<p>Let's test pigar with a Flask application:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Clone a sample Flask project</span>\ngit clone https://github.com/akhileshmishrabiz/Devops-zero-to-hero\n<span class=\"nb\">cd </span>Devops-zero-to-hero/project5\n\n<span class=\"c\"># Remove existing requirements.txt for demo</span>\n<span class=\"nb\">rm </span>requirements.txt\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Generating requirements with pigar\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Generate requirements.txt for current directory</span>\npigar generate\n\n<span class=\"c\"># Check the generated file</span>\n<span class=\"nb\">cat </span>requirements.txt\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Output:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code># Automatically generated by https://github.com/damnever/pigar.\n\nFlask==3.0.3\nFlask-SQLAlchemy==3.1.1\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Advanced pigar Usage\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Generate requirements for specific directory with custom filename</span>\npigar gen <span class=\"nt\">-f</span> custom-requirements.txt /path/to/project\n\n<span class=\"c\"># Example with Python Lambda project</span>\npigar gen <span class=\"nt\">-f</span> python-lambda-requirements.txt python-for-devops/python-lambda-runtime/\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Output for Lambda project:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code># Automatically generated by https://github.com/damnever/pigar.\n\nboto3==1.34.142\ncolorlog==6.8.2\npackaging==24.1\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  pigar Advanced Features\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Check for outdated packages</span>\npigar check\n\n<span class=\"c\"># Search for packages</span>\npigar search numpy\n\n<span class=\"c\"># Show package information</span>\npigar show requests\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Comparison: pipreqs vs pigar\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>pipreqs</th>\n<th>pigar</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Speed</strong></td>\n<td>‚ö° Very Fast</td>\n<td>üîÑ Moderate</td>\n</tr>\n<tr>\n<td><strong>Accuracy</strong></td>\n<td>‚úÖ High</td>\n<td>‚úÖ Very High</td>\n</tr>\n<tr>\n<td><strong>Local imports</strong></td>\n<td>‚ùå Limited</td>\n<td>‚úÖ Excellent</td>\n</tr>\n<tr>\n<td><strong>Complex projects</strong></td>\n<td>‚úÖ Good</td>\n<td>‚úÖ Excellent</td>\n</tr>\n<tr>\n<td><strong>Additional features</strong></td>\n<td>‚ùå Basic</td>\n<td>‚úÖ Package search, outdated checks</td>\n</tr>\n<tr>\n<td><strong>File size</strong></td>\n<td>üì¶ Lightweight</td>\n<td>üì¶ Slightly larger</td>\n</tr>\n</tbody>\n</table></div>\n\n<h2>\n  \n  \n  Best Practices for Python Dependency Management\n</h2>\n\n<h3>\n  \n  \n  1. Use Virtual Environments\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Always create isolated environments</span>\npython <span class=\"nt\">-m</span> venv project-env\n<span class=\"nb\">source </span>project-env/bin/activate\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  2. Pin Exact Versions\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code># Good - specific versions\nrequests==2.32.3\nnumpy==2.0.0\n\n# Avoid - unpinned versions\nrequests\nnumpy\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  3. Separate Development Dependencies\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Create different requirement files</span>\npigar gen <span class=\"nt\">-f</span> requirements.txt <span class=\"nb\">.</span>           <span class=\"c\"># Production</span>\npigar gen <span class=\"nt\">-f</span> requirements-dev.txt <span class=\"nb\">.</span>       <span class=\"c\"># Development</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  4. Regular Dependency Audits\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Check for security vulnerabilities</span>\npip-audit <span class=\"nt\">-r</span> requirements.txt\n\n<span class=\"c\"># Update outdated packages</span>\npip list <span class=\"nt\">--outdated</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Troubleshooting Common Issues\n</h2>\n\n<h3>\n  \n  \n  pipreqs Not Finding All Imports\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Use debug mode</span>\npipreqs <span class=\"nb\">.</span> <span class=\"nt\">--debug</span>\n\n<span class=\"c\"># Force scan all files</span>\npipreqs <span class=\"nb\">.</span> <span class=\"nt\">--scan-notebooks</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  pigar Missing Local Modules\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Include local packages</span>\npigar gen <span class=\"nt\">--with-referenced-comments</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Version Conflicts\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Generate without version pins</span>\npipreqs <span class=\"nb\">.</span> <span class=\"nt\">--no-version</span>\n\n<span class=\"c\"># Then manually specify versions</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Automation with CI/CD\n</h2>\n\n<h3>\n  \n  \n  GitHub Actions Example\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Check Requirements</span>\n<span class=\"na\">on</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"nv\">push</span><span class=\"pi\">,</span> <span class=\"nv\">pull_request</span><span class=\"pi\">]</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">check-deps</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v2</span>\n    <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Generate requirements</span>\n      <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n        <span class=\"s\">pip install pipreqs</span>\n        <span class=\"s\">pipreqs . --force</span>\n        <span class=\"s\">git diff --exit-code requirements.txt</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Both <code>pipreqs</code> and <code>pigar</code> are excellent tools for automating Python dependency management:</p>\n\n<ul>\n<li>\n<strong>Choose pipreqs</strong> for: Simple projects, fast generation, lightweight solution</li>\n<li>\n<strong>Choose pigar</strong> for: Complex projects, advanced features, comprehensive analysis</li>\n</ul>\n\n<p>Stop wasting time manually managing Python dependencies. These tools will save you hours and reduce deployment errors significantly.</p>\n\n<h2>\n  \n  \n  Next Steps\n</h2>\n\n<ol>\n<li>Try both tools on your existing Python projects</li>\n<li>Integrate dependency generation into your development workflow</li>\n<li>Set up automated checks in your CI/CD pipeline</li>\n<li>Share this guide with your team to standardize dependency management</li>\n</ol>\n\n<h2>\n  \n  \n  Related Python Articles\n</h2>\n\n<ul>\n<li><a href=\"https://dev.to/example\">Complete Guide to Python Virtual Environments</a></li>\n<li><a href=\"https://dev.to/livingdevops/i-ditched-python-built-in-logging-for-loguru-you-should-too-514m\">Python Logging with Loguru - Advanced Tutorial</a></li>\n</ul>\n\n<h2>\n  \n  \n  Tags\n</h2>\n\n<p><code>#python</code> <code>#devops</code> <code>#dependencies</code> <code>#automation</code> <code>#pip</code> <code>#requirements</code> <code>#development</code> <code>#productivity</code> <code>#tools</code> <code>#tutorial</code></p>\n\n<p><em>Found this helpful? Follow for more Python and DevOps tutorials!</em></p>\n\n<p><strong>Connect with the author:</strong></p>\n\n<ul>\n<li><a href=\"https://www.linkedin.com/in/akhilesh-mishra-0ab886124/\" rel=\"noopener noreferrer\">LinkedIn</a></li>\n<li><a href=\"https://github.com/akhileshmishrabiz\" rel=\"noopener noreferrer\">GitHub</a></li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Future of Automation: From Challenges to Competitive Advantage","url":"https://dev.to/alabs_seo_3fbfa048f35c27d/the-future-of-automation-from-challenges-to-competitive-advantage-1i4c","date":1750937248,"author":"Alabs SEO","guid":172122,"unread":true,"content":"<blockquote>\n<p>In today's fast-changing corporate world, automation is no longer a luxury; it's a must-have for staying ahead of the competition. This is especially true for AI, ML, and Data Science. But putting these strong technologies together is sometimes quite hard. Some of the biggest problems include the hefty upfront costs, being locked into a vendor, and the fact that technology is moving so quickly. At Argos Labs, we think that the future of automation depends on getting past these problems and turning them into strategic opportunities with low-code solutions that are easy to use, adaptable, and powerful. </p>\n</blockquote>\n\n<p>**</p>\n\n<h2>\n  \n  \n  The Roadblocks to Intelligent Automation\n</h2>\n\n<p>When trying to use or grow AI and automation, a lot of businesses run into the same problems. One big worry is the high upfront cost and long-term commitment that come with traditional solution integration. This can be a very risky move, especially since technology changes so quickly, which could make big, long-term expenditures useless sooner than expected. </p>\n\n<p>Another big problem is that decisions and deployments take a long time to make, which is a problem because technology is moving so quickly. With traditional methods, the technology that a solution uses has often moved on by the time it is fully integrated, which makes it less competitive. Also, organizations often run into vendor lock-in, which makes them less flexible, hurts their return on investment (ROI), and makes it harder for them to meet changing needs. The necessity for specialized programming skills can also be a problem, making it hard for Subject Matter Experts (SMEs) to actively contribute to and manage automation projects. This can cause problems with communication between business and IT teams. </p>\n\n<p>**Argos Low-Code Python: A Paradigm Shift <br>\n**We built our Low-Code Python (LCPy) platform at Argos Labs to directly solve these integration problems and let people make \"No Risk IT Decisions.\" Speed, ease, and cheap cost are the most important parts of our concept. This is why Argos cheap-code Python is the first low-code platform that works with major programming languages, especially Python.   You can't say enough good things about Python's power. Python is the programming language with the most users‚Äîover 10 million coders‚Äîand it has a huge ecosystem of open and pre-built commercial solutions. This means that it has the best resources and will always be able to adapt to new needs. This rich environment lets us help businesses save time and money in all five stages of the solution integration lifecycle: Evaluation, Development, Deployment, Maintenance, and Updates. </p>\n\n<p>**Empowering Innovation with ARGOS STU and POT SDK <br>\n**Our platform lets Subject Matter Experts (SMEs) work closely with IT teams, which speeds up the whole process of learning, designing, testing, deploying, and monitoring Intelligent Automation. Our development tools, ARGOS STU (Smart Process Automation tools), makes it easy for everyone to work together. ARGOS STU is made to automate corporate processes, and it lets users make automation for both PC and mobile situations. One of the best things about STU is that you don't need to know how to code to use it. It uses a simple \"Play &amp; Rec\" mechanism to construct automation. It also works with top AI, machine learning, and optical character recognition (OCR) engines for smart automation. It also has more than 200 official tools for smart process automation. You can get STU for free. </p>\n\n<p>Our Python-to-Operations Toolset (POT) SDK is a big reason why Argos Labs stands apart. With this SDK, partners and users can make their own \"plugins\" and low-code building blocks from any Python solution. This lets them fully customise the Low-code Python platform. This avoids vendor lock-in, so your investment will always give you a return on investment and grow with your demands. </p>\n\n<p>**Operational Excellence with ARGOS PAM and ARGOS Supervisor <br>\n**Our system offers enterprise-grade administration and orchestration features at no extra expense, in addition to development. ARGOS PAMs (Process Automation Modules) are the bots that actually do business automation. ARGOS PAM works on Windows, Android, Linux, and iOS devices, so it can run on many different types of computers. PAM can work with any target applications and can do so in \"Attended,\" \"Unattended,\" or \"Hybrid Automation Modes.\" These bots can handle a lot of transactions and can run all day, every day. PAMs are a good deal because their licenses are cheap, and you can also get PAM for free. </p>\n\n<p>ARGOS Supervisor, our bot management dashboard, makes it easier to keep track of these bots. Its main jobs are to plan, manage, and keep an eye on how bots run. ARGOS Supervisor comes with enterprise-level management and orchestration tools at no extra cost. These tools help with governance, scalability, and auditability of automation processes. This complete ecosystem makes sure that decisions can be made as quickly as technology changes, which gives firms an edge in being flexible. </p>\n\n<p>**From Challenges to Unbeatable Competitive Advantage <br>\n**Businesses can get rid of the usual problems that come with integrating AI by using Argos Low-Code Python. You can avoid making big initial investments and long-term commitments. Instead, you can make decisions and put solutions into action as quickly as new technologies come out. Our small-start/SMB-friendly license model and low prices make sure that Argos Low-code licenses are a good deal. They are the best value on the market.   With the flexibility to quickly add AI, machine learning, and data science, as well as comprehensive customisation options and strong management tools, automation goes from being a problem to a long-term competitive edge. It gives your staff more power, frees up your resources, and puts your organisation in a position to keep coming up with new ideas and changing. </p>\n\n<p>Are you ready to change the way you automate? <br>\nDon't let the difficulties of traditional integration stop you. With Argos Low-Code Python, you can see what automation will be like in the future. Get our FREE 60-day trial by downloading it and signing up today. You can also obtain our development tools (STU and PAM) for free. Please get in touch with your local implementation partners for a personalised price or to find out more about how our solutions may help you. Join the automation revolution at Argos Labs, where new ideas and easy-to-use tools come together.</p>\n\n<p>Find more: <a href=\"https://www.argos-labs.com/insights/\" rel=\"noopener noreferrer\">https://www.argos-labs.com/insights/</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"drissionpageÊï∞ÊçÆÁõëÂê¨ÁöÑ‰∏§ÁßçÊñπÂºè","url":"https://dev.to/dragon72463399/drissionpageshu-ju-jian-ting-de-liang-chong-fang-shi-37on","date":1750932804,"author":"drake","guid":172081,"unread":true,"content":"<ul>\n<li>Âçï‰∏™Ê†áÁ≠æÈ°µÔºö\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">tab</span><span class=\"p\">.</span><span class=\"nf\">data_listener</span><span class=\"p\">()</span> \n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>ÂÖ®ÊµèËßàÂô®\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">browser</span><span class=\"p\">.</span><span class=\"nf\">data_listener</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Josephus Problem well explained for beginner","url":"https://dev.to/thedeepseeker/josephus-problem-well-explained-for-beginner-22f5","date":1750932228,"author":"Anna kowoski","guid":172025,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/om_shree_0709\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F2900392%2F78ad1723-16ab-4e46-b39c-7f3feb416d23.jpg\" alt=\"om_shree_0709\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/om_shree_0709/the-josephus-problem-explained-constant-time-solution-for-k-2-5e83\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>‚öîÔ∏è The Josephus Problem Explained: Constant-Time Solution for k = 2</h2>\n      <h3>Om Shree „Éª Jun 26</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#programming</span>\n        <span class=\"ltag__link__tag\">#cpp</span>\n        <span class=\"ltag__link__tag\">#javascript</span>\n        <span class=\"ltag__link__tag\">#python</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Leetcode 2311","url":"https://dev.to/thedeepseeker/leetcode-2311-3mbd","date":1750932096,"author":"Anna kowoski","guid":172024,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/om_shree_0709\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F2900392%2F78ad1723-16ab-4e46-b39c-7f3feb416d23.jpg\" alt=\"om_shree_0709\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/om_shree_0709/longest-binary-subsequence-k-leetcode-2311-c-python-javascript-2c23\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>üëπ Longest Binary Subsequence K ‚Äì LeetCode 2311 (C++ | JavaScript | Python )</h2>\n      <h3>Om Shree „Éª Jun 26</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#cpp</span>\n        <span class=\"ltag__link__tag\">#javascript</span>\n        <span class=\"ltag__link__tag\">#python</span>\n        <span class=\"ltag__link__tag\">#leetcode</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"‚öîÔ∏è The Josephus Problem Explained: Constant-Time Solution for k = 2","url":"https://dev.to/om_shree_0709/the-josephus-problem-explained-constant-time-solution-for-k-2-5e83","date":1750931789,"author":"Om Shree","guid":172023,"unread":true,"content":"<h2>\n  \n  \n  üß† Problem Summary\n</h2>\n\n<p>The <strong>Josephus problem</strong> is a classic theoretical problem in computer science and mathematics. It is stated as follows:</p>\n\n<blockquote>\n<p>Given <strong>n</strong> people standing in a circle, every <strong>k-th</strong> person is eliminated in a round-robin fashion. After each removal, counting resumes from the next person. The process continues until only one person remains. The problem is to find the position (1-based or 0-based) of the <strong>last remaining person</strong>.</p>\n</blockquote>\n\n<p>For example, with <code>n = 7</code> and <code>k = 3</code>, the order of elimination is:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Eliminated: 3 ‚Üí 6 ‚Üí 2 ‚Üí 7 ‚Üí 5 ‚Üí 1 ‚Üí Survivor: 4\n</code></pre>\n\n</div>\n\n\n\n<p>This general problem can be solved recursively in O(n), but in a <strong>special case</strong> when <code>k = 2</code>, it admits an <strong>O(1) time</strong> closed-form solution.</p>\n\n\n\n\n<h2>\n  \n  \n  üß© Intuition (k = 2)\n</h2>\n\n<p>When <code>k = 2</code>, the Josephus problem has a beautiful binary pattern. Here‚Äôs what happens:</p>\n\n<ul>\n<li>People are eliminated in powers of two: the 2nd, 4th, 6th, etc.</li>\n<li>The safe position follows a pattern that can be expressed with binary shifts.</li>\n</ul>\n\n<h3>\n  \n  \n  Key Insight:\n</h3>\n\n<p>If <code>n</code> is the total number of people, and <code>L</code> is the <strong>largest power of 2 ‚â§ n</strong>, then:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Josephus(n) = 2 √ó (n - L)\n</code></pre>\n\n</div>\n\n\n\n<p>This gives the position of the last remaining person (1-based index).</p>\n\n\n\n\n<h2>\n  \n  \n  üßÆ C++ Code (O(1) for k = 2)\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight cpp\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">josephus</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"mi\">31</span> <span class=\"o\">-</span> <span class=\"n\">__builtin_clz</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">));</span> <span class=\"c1\">// Largest power of 2 &lt;= n</span>\n        <span class=\"k\">return</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Explanation:\n</h3>\n\n<ul>\n<li>\n<code>__builtin_clz(n)</code> returns the number of leading zeroes in <code>n</code>.</li>\n<li>\n<code>1 &lt;&lt; (31 - __builtin_clz(n))</code> computes the largest power of 2 ‚â§ <code>n</code>.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  üíª JavaScript Code\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nf\">josephus</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">highestPower</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"mi\">31</span> <span class=\"o\">-</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nf\">clz32</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">));</span>\n    <span class=\"k\">return</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">n</span> <span class=\"o\">-</span> <span class=\"nx\">highestPower</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üêç Python Code\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">josephus</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"nf\">bit_length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  ‚úÖ Final Thoughts\n</h2>\n\n<ul>\n<li>This elegant O(1) formula only works when <code>k = 2</code>.</li>\n<li>For general <code>k</code>, you need simulation (O(n)) or recurrence (O(n log k)).</li>\n<li>The Josephus problem is a great blend of <strong>bit manipulation</strong>, <strong>recursion</strong>, and <strong>mathematical pattern recognition</strong>.</li>\n</ul>\n\n\n\n\n<p>If you found this helpful, drop a ‚ù§Ô∏è and follow for more deep dives into classic CS problems!</p>\n\n<p>Happy problem-solving! üß†‚ú®</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ISOBUS Plug-and-Play: Why This Standard Is Mandatory for EU Ag Machinery","url":"https://dev.to/beidou/isobus-plug-and-play-why-this-standard-is-mandatory-for-eu-ag-machinery-5hmn","date":1750927964,"author":"zly","guid":171999,"unread":true,"content":"<h1>\n  \n  \n  ISOBUS Plug-and-Play: Why This Standard Is Mandatory for EU Ag Machinery\n</h1>\n\n<p>In today‚Äôs fast-evolving agtech landscape, simplicity and compatibility are king. If you‚Äôre a dealer of agricultural navigation systems, understanding why the <strong><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a></strong> must support ISOBUS plug-and-play isn‚Äôt just advantageous‚Äìit‚Äôs essential. This standard is reshaping how precision agriculture gear integrates, improving efficiency, reducing errors, and future-proofing your portfolio.</p>\n\n<h2>\n  \n  \n  What Is ISOBUS Plug-and-Play?\n</h2>\n\n<p>ISOBUS is an international communication protocol (ISO 11783) designed to standardize data exchange between tractors, implements, and smart devices. Its plug-and-play feature means you can connect hardware like auto-steering systems, rate controllers, and monitors without complex configurations or compatibility issues.</p>\n\n<p>For the <strong><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a></strong>, this interoperability translates into seamless installation, reduced setup time, and immediate operational readiness, crucial for end-users who demand plug-and-play convenience.</p>\n\n<h2>\n  \n  \n  Why ISOBUS Compliance Is Mandatory in the EU\n</h2>\n\n<p>The European Union is driving harmonization of precision agriculture technology to foster sustainable farming practices and optimize machinery uptime. As part of this strategy:</p>\n\n<ul>\n<li>\n<strong>Regulatory Compliance:</strong> EU legislation increasingly mandates ISOBUS conformity for agricultural machinery to ensure cross-brand compatibility and safety.</li>\n<li>\n<strong>Market Demand:</strong> Farmers prioritize systems that ‚Äújust work,‚Äù eliminating headaches caused by proprietary connections or software mismatches.</li>\n<li>\n<strong>Future-Proofing:</strong> With ongoing advancements in automated guidance and data analytics, ISOBUS compliance guarantees that your navigation systems stay relevant as farms modernize.</li>\n</ul>\n\n<p>Failing to offer ISOBUS-enabled <strong><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering Systems</a></strong> can place your dealership at a competitive disadvantage in this rapidly standardizing market.</p>\n\n<h2>\n  \n  \n  Technical Insights: What Dealers Should Know\n</h2>\n\n<p>The latest GNSS auto-steering units incorporate advanced features supported by ISOBUS standards:</p>\n\n<ul>\n<li>\n<strong>Plug-and-Play CAN Bus Integration:</strong> Utilizes the Controller Area Network (CAN) bus for robust, error-resistant communication between tractor and implement.</li>\n<li>\n<strong>Universal Terminal (UT) Compatibility:</strong> Allows the dashboard monitor to control all ISOBUS-compatible devices without multiple interfaces.</li>\n<li>\n<strong>Precision Accuracy:</strong> Systems achieve sub-centimeter positioning by integrating RTK correction signals, optimized through ISOBUS data exchange protocols.</li>\n<li>\n<strong>Real-Time Monitoring:</strong> Data on vehicle position, steering performance, and implement status is instantly available within the tractor‚Äôs control system.</li>\n</ul>\n\n<p>By mastering these technical parameters, dealers can confidently demonstrate the reliability and ease of installation that ISOBUS-compliant GNSS systems bring to clients.</p>\n\n<h2>\n  \n  \n  How This Benefits Your Customers\n</h2>\n\n<ul>\n<li>\n<strong>Reduced Installation Complexity:</strong> No need for multiple control boxes or adapters.</li>\n<li>\n<strong>Lower Training Time:</strong> Intuitive, standardized interfaces minimize user errors.</li>\n<li>\n<strong>Enhanced Efficiency:</strong> Automatic implement recognition and guidance reduce overlap, saving time and inputs.</li>\n<li>\n<strong>Future Scalability:</strong> Support for software updates and additional precision tools guarantees ongoing value.</li>\n</ul>\n\n<h2>\n  \n  \n  Final Thoughts\n</h2>\n\n<p>As agricultural machinery evolves, the <strong><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a></strong> aligned with ISOBUS plug-and-play standards is no longer a luxury‚Äîit‚Äôs a necessity. Dealers who embrace and promote this compliance will not only meet regulatory requirements but will also deliver tangible benefits that growers actively seek.</p>\n\n<p><strong>Are your navigation systems ready for the ISOBUS revolution?</strong> Share your experiences or ask how to make your portfolio fully compliant in the comments below.</p>\n\n\n\n\n<p><em>Equip your dealership with knowledge and products while advancing EU's precision agriculture standards. ISOBUS plug-and-play is here to stay‚Äîmake sure you are, too.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"18% Fuel Savings: Why Auto-Steering Outperforms Manual Driving Efficiency","url":"https://dev.to/beidou/18-fuel-savings-why-auto-steering-outperforms-manual-driving-efficiency-2bfk","date":1750927928,"author":"zly","guid":171998,"unread":true,"content":"<h1>\n  \n  \n  18% Fuel Savings: Why <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> Outperforms Manual Driving Efficiency\n</h1>\n\n<p>In modern agriculture, precision and efficiency are no longer optional‚Äîthey‚Äôre critical to staying competitive. As dealers of agricultural navigation systems, you know the difference cutting-edge technology can make for farmers. One innovation driving this change is the <strong>GNSS Auto-Steering System</strong>. Beyond accuracy and convenience, it delivers a remarkable benefit: up to <strong>18% fuel savings</strong> compared to manual driving.</p>\n\n<p>This post explores how the GNSS Auto-Steering System achieves such efficiency gains and why auto-steering is quickly becoming the new standard on farms worldwide.</p>\n\n\n\n\n<h2>\n  \n  \n  What Makes GNSS Auto-Steering Fuel Efficient?\n</h2>\n\n<p>At its core, the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> uses precise satellite positioning coupled with advanced algorithms to guide farm machinery along optimal paths. Unlike manual driving, where human error leads to overlapping passes or missed spots, auto-steering ensures every inch of land is covered exactly once.</p>\n\n<ul>\n<li>\n<strong>Minimized Overlaps and Gaps:</strong> Accurate path adherence eliminates redundant passes, reducing the total engine run-time.</li>\n<li>\n<strong>Constant Speed Maintenance:</strong> Smooth steering enables machines to maintain consistent speeds, optimizing fuel burn.</li>\n<li>\n<strong>Reduced Driver Fatigue:</strong> Less manual input means operators can focus on monitoring yields and terrain, reducing mistakes that waste fuel.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Technical Edge: Precision and Reliability\n</h2>\n\n<p>The system leverages real-time kinematic (RTK) GNSS technology, offering centimeter-level positional accuracy. This precision:</p>\n\n<ul>\n<li>Enables tight pass-to-pass accuracy, cutting wasted fuel from overlapping.</li>\n<li>Works consistently even in challenging environments (e.g., hilly terrain or irregular fields).</li>\n<li>Integrates seamlessly with various tractor models via CAN bus and ISOBUS protocols, protecting dealer integration investments.</li>\n</ul>\n\n<p>Additionally, the system‚Äôs auto-steering controller includes intelligent compensation for tractor mechanical play and ground slope, ensuring smooth turns and reducing unnecessary acceleration or braking.</p>\n\n\n\n\n<h2>\n  \n  \n  Impact on Operational Costs\n</h2>\n\n<p>Fuel is one of the largest variable expenses in farming. An <strong>18% reduction</strong> directly translates into significant savings over time. For example, a typical tractor consuming 20 liters/hour running 500 hours annually can save approximately 1,800 liters, reducing operational costs substantially.</p>\n\n<p>Other benefits compound these savings:</p>\n\n<ul>\n<li>\n<strong>Lower Maintenance:</strong> Less wear from erratic steering reduces tire and drivetrain stress.</li>\n<li>\n<strong>Increased Productivity:</strong> Faster field coverage with fewer mistakes saves labor costs.</li>\n<li>\n<strong>Environmental Impact:</strong> Reduced fuel burn also cuts greenhouse gas emissions, aligning with growing sustainability demands.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Positioning GNSS Auto-Steering with Your Customers\n</h2>\n\n<p>As a dealer, highlighting fuel savings helps you make a compelling value case beyond just technical specs. Focus on:</p>\n\n<ul>\n<li>\n<strong>Return on Investment:</strong> Savings on fuel and maintenance often cover system costs in just a few seasons.</li>\n<li>\n<strong>Ease of Use:</strong> Simplify training by showcasing the intuitive interface and driver-assist features.</li>\n<li>\n<strong>Future-Proofing:</strong> Emphasize compatibility with evolving precision agriculture tools, preparing customers for automation trends.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Final Thoughts\n</h2>\n\n<p>The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> is more than a navigation aid‚Äîit‚Äôs a strategic advantage that drives fuel efficiency and operational excellence. For dealers, understanding and communicating these benefits turns technology into tangible value.</p>\n\n<p>Are your customers ready to cut costs and boost productivity with auto-steering? Share your experiences or questions below‚Äîlet‚Äôs redefine agricultural efficiency together.</p>\n\n\n\n\n<p><em>Unlock the full potential of precision farming. Embrace GNSS auto-steering to save fuel, time, and money.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"5-Min Quick Calibration: Novices Independently Complete Farmland Coordinate Setup","url":"https://dev.to/beidou/5-min-quick-calibration-novices-independently-complete-farmland-coordinate-setup-1cni","date":1750927920,"author":"zly","guid":171997,"unread":true,"content":"<h1>\n  \n  \n  5-Min Quick Calibration: How Novices Independently Complete Farmland Coordinate Setup with GNSS Auto-Steering System\n</h1>\n\n<p>Precision agriculture is transforming farming ‚Äî and at the heart of this revolution is smooth, accurate machinery control. For dealers of agricultural navigation systems, helping customers succeed depends on ease of use and swift setup. That‚Äôs where the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> shines, enabling even novices to complete farmland coordinate setup in just 5 minutes.</p>\n\n<p>In this post, we‚Äôll explore why quick calibration matters, how the GNSS Auto-Steering System simplifies this crucial step, and what dealers can communicate to customers to build confidence and trust.</p>\n\n\n\n\n<h2>\n  \n  \n  Why Quick Calibration Makes a Difference\n</h2>\n\n<p>Traditionally, setting up a GNSS auto-steering system involves complex coordinate mapping ‚Äî a tedious, error-prone process especially for users new to agricultural navigation. Slow or inaccurate calibration impacts field efficiency, crop yields, and operator confidence.</p>\n\n<p>By enabling a <strong>5-minute quick calibration</strong>, the GNSS Auto-Steering System drastically reduces downtime and technical frustration. This means farmers can:</p>\n\n<ul>\n<li>Start work faster with minimal expert intervention</li>\n<li>Reduce errors tied to manual coordinate input</li>\n<li>Achieve better alignment of machinery paths across varying terrains</li>\n</ul>\n\n<p>For dealers, it‚Äôs a significant selling point that combines usability with precision.</p>\n\n\n\n\n<h2>\n  \n  \n  The Technology Behind Quick Calibration\n</h2>\n\n<p>At the core of the GNSS Auto-Steering System‚Äôs quick calibration feature is intelligent satellite positioning paired with patented coordinate alignment algorithms. Here‚Äôs how it works:</p>\n\n<ol>\n<li>\n<strong>Automatic Satellite Lock</strong>: The system instantly locks onto GPS, GLONASS, or BeiDou satellites, offering centimeter-level accuracy.</li>\n<li>\n<strong>Self-Guided Coordinate Mapping</strong>: Instead of manual waypoint input, the system automatically scans farmland boundaries during initial runs.</li>\n<li>\n<strong>Real-Time Data Processing</strong>: Onboard processors calculate coordinate corrections continuously, adapting to topographic variances.</li>\n<li>\n<strong>User-Friendly Interface</strong>: A clear touchscreen guides operators step-by-step, minimizing errors and eliminating technical jargon.</li>\n</ol>\n\n<p>This combination allows even beginners to finalize farmland coordinate setup confidently and swiftly, without constant specialist support.</p>\n\n\n\n\n<h2>\n  \n  \n  What Dealers Need to Know\n</h2>\n\n<p>Understanding the GNSS Auto-Steering System‚Äôs quick calibration capabilities empowers dealers to:</p>\n\n<ul>\n<li>\n<strong>Educate customers effectively</strong>: Highlight how minimal time investment yields maximum accuracy.</li>\n<li>\n<strong>Reduce support requests</strong>: Confident users rarely need repeated technical support.</li>\n<li>\n<strong>Increase sales conversion</strong>: Less technical complexity broadens your target customer base.</li>\n<li>\n<strong>Demonstrate product reliability</strong>: Share real-world success stories where novices completed setups effortlessly.</li>\n</ul>\n\n<p>Incorporate demos showcasing the 5-minute calibration process in your sales pitches and training sessions. Visual proof accelerates trust-building and product adoption.</p>\n\n\n\n\n<h2>\n  \n  \n  Key Technical Parameters to Share\n</h2>\n\n<ul>\n<li>\n<strong>Positioning Accuracy</strong>: ¬±2‚Äì5 cm with real-time kinematic (RTK) correction</li>\n<li>\n<strong>Satellite Compatibility</strong>: Multi-constellation support for uninterrupted signal</li>\n<li>\n<strong>Setup Time</strong>: Under 5 minutes for coordinate calibration</li>\n<li>\n<strong>User Interface</strong>: Intuitive touchscreen with stepwise guidance</li>\n<li>\n<strong>Compatibility</strong>: Supports a wide range of agricultural machinery brands and models</li>\n</ul>\n\n<p>Providing these specs clarifies the system‚Äôs cutting-edge precision and ease of integration.</p>\n\n\n\n\n<h2>\n  \n  \n  Final Thoughts: Empower Your Customers with Confidence\n</h2>\n\n<p>The true power of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> lies in making professional-grade navigation accessible to all farmers‚Äînovices and experts alike. The 5-minute quick calibration isn‚Äôt just a feature; it‚Äôs a gateway to efficiency, precision, and peace of mind.</p>\n\n<p>As a dealer, your role is pivotal in communicating how this technology liberates users from calibration headaches‚Äîencourage your customers to experience firsthand how simple setup can lead to smarter, more productive farming.</p>\n\n<p><strong>What challenges have you faced helping customers with GNSS auto-steering setups?</strong> Share your insights or questions below ‚Äî let‚Äôs tackle smarter agriculture together.</p>\n\n\n\n\n<p><em>Ready to demo or learn more? Explore the full product details and support materials at</em> <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Expert Farmer‚Äôs Perspective: Key Configuration Tips for the GNSS Auto-Steering System","url":"https://dev.to/beidou/expert-farmers-perspective-key-configuration-tips-for-the-gnss-auto-steering-system-l2c","date":1750927878,"author":"zly","guid":171996,"unread":true,"content":"<h1>\n  \n  \n  Expert Farmer‚Äôs Perspective: Key Configuration Tips for the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>\n</h1>\n\n<p>In today‚Äôs rapidly evolving agricultural landscape, precision is everything. For dealers of agricultural navigation systems, understanding how to optimize the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> can make all the difference in helping farmers boost efficiency and reduce overlaps. As an expert farmer who has worked extensively with these advanced technologies, I‚Äôm sharing essential configuration tips that will elevate your clients‚Äô experience and maximize productivity in the field.</p>\n\n<h2>\n  \n  \n  Understanding the Basics of the GNSS Auto-Steering System\n</h2>\n\n<p>The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> combines satellite navigation with precise motor controls to automate tractor steering. With sub-decimeter accuracy, the system enables farmers to maintain straight lines and uniform passes, crucial for efficient seeding, spraying, and harvesting.</p>\n\n<p>Key components include:</p>\n\n<ul>\n<li>\n<strong>GNSS Receiver:</strong> Acquires signals from multiple satellites for position accuracy.</li>\n<li>\n<strong>Steering Controller:</strong> Translates positional data into mechanical adjustments.</li>\n<li>\n<strong>Display Unit:</strong> Interfaces with the operator for monitoring and adjustments.</li>\n</ul>\n\n<p>For dealers, emphasizing the reliability of these components can help farmers overcome hesitations about adopting new tech.</p>\n\n<h2>\n  \n  \n  Calibration Is Crucial: Aligning for Peak Performance\n</h2>\n\n<p>One of the most overlooked aspects is the proper calibration of the system. The GNSS receiver alignment and the vehicle offset settings must be meticulously configured to ensure accuracy within the desired tolerance, often as tight as ¬±2 cm.</p>\n\n<p><strong>Configuration Tip:</strong><br><br>\nBefore allowing farmers to start using the system, conduct a thorough calibration session outdoors. Use the built-in calibration tools to account for:</p>\n\n<ul>\n<li>Vehicle wheel base measurements</li>\n<li>Steering linkage offsets</li>\n<li>Antenna placement height and orientation</li>\n</ul>\n\n<p>This setup ensures the system‚Äôs guidance corresponds perfectly to actual machine movements, reducing steering errors and fatigue.</p>\n\n<h2>\n  \n  \n  Optimize Correction Signal Choice Based on Operational Area\n</h2>\n\n<p>The precision of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> largely depends on the correction signals used. Dealers should advise farmers on selecting the appropriate Real-Time Kinematic (RTK) or Satellite-Based Augmentation System (SBAS) corrections:</p>\n\n<ul>\n<li>\n<strong>RTK Correction:</strong> Offers centimeter-level accuracy, ideal for large farms with RTK base station coverage or CORS networks.</li>\n<li>\n<strong>SBAS Correction:</strong> Provides meter-level precision, suitable for small farms or areas without RTK infrastructure.</li>\n</ul>\n\n<p>Understanding these options helps tailor solutions that align with the farmer‚Äôs field size and budget constraints.</p>\n\n<h2>\n  \n  \n  Regular Firmware Updates and Diagnostic Checks\n</h2>\n\n<p>Maintaining the system‚Äôs software up to date is vital for ensuring compatibility with the latest satellite constellations and GPS signal enhancements. Dealers should encourage farmers to install firmware updates promptly.</p>\n\n<p>Additionally, leveraging the system‚Äôs diagnostic tools helps detect sensor faults, signal interruptions, or calibration drift early, reducing downtime and costly errors in critical operations.</p>\n\n<h2>\n  \n  \n  Enhancing User Experience with Customizable Settings\n</h2>\n\n<p>The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> allows for adjustable parameters such as steering sensitivity, headland turning speed, and guidance line patterns (straight, curve, or custom AB lines). Dealers should guide farmers in experimenting with these settings to find what best fits their equipment and field conditions.</p>\n\n<p>For instance, fine-tuning steering responsiveness can help reduce wheel scrubbing on uneven terrain, preserving equipment longevity and soil health.</p>\n\n\n\n\n<h3>\n  \n  \n  Final Thoughts\n</h3>\n\n<p>For dealers, mastering the intricate configuration details of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> not only positions you as a trusted advisor but also directly contributes to farmers‚Äô operational success. The smarter the setup, the greater the yield and resource savings.</p>\n\n<p>Are you ready to elevate your expertise on GNSS-guided precision agriculture? What configuration challenges have you or your clients faced, and which solutions worked best? Share your insights or ask questions below ‚Äî let‚Äôs improve farming technology together!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"1.28kg Lightweight: Over-Cab Mounting Without Obstructing Operator View","url":"https://dev.to/beidou/128kg-lightweight-over-cab-mounting-without-obstructing-operator-view-352k","date":1750927864,"author":"zly","guid":171995,"unread":true,"content":"<h1>\n  \n  \n  GNSS Auto-Steering System: The 1.28kg Lightweight Solution for Over-Cab Mounting Without Obstructing Operator View\n</h1>\n\n<p>In the fast-evolving world of agricultural navigation, precision and operator comfort are paramount. Dealers of agricultural navigation systems continuously seek solutions that combine accuracy, ease of use, and unobtrusive design. The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> with its groundbreaking 1.28kg lightweight design revolutionizes these expectations‚Äîoffering over-cab mounting that does not block the operator's view.</p>\n\n\n\n\n<h2>\n  \n  \n  Why Weight Matters: The Advantage of a 1.28kg Lightweight System\n</h2>\n\n<p>Traditional auto-steering systems tend to be bulky, adding significant weight to vehicle roofs or cabins. This can complicate installation, increase mechanical stress, and sometimes interfere with the operator‚Äôs field of vision. The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> addresses these pain points by weighing just 1.28kg.</p>\n\n<p>This low weight means:</p>\n\n<ul>\n<li>\n<strong>Simplified Installation:</strong> No heavy lifting or complex mounts.</li>\n<li>\n<strong>Enhanced Vehicle Stability:</strong> Reduced strain on mounting points.</li>\n<li>\n<strong>Operator Comfort:</strong> Less vibration and sway during operation.</li>\n</ul>\n\n<p>Lightweight design translates directly into better operational efficiency and longevity of both the system and the vehicle.</p>\n\n\n\n\n<h2>\n  \n  \n  Over-Cab Mounting: Combining Safety with Unobstructed Vision\n</h2>\n\n<p>Visibility is critical on the farm. Operators need a clear, panoramic view to monitor machinery, field conditions, and surroundings. Mounting the GNSS receiver over the cab is a tried-and-true method for optimal signal reception, but it often creates blind spots or obstructed views.</p>\n\n<p>Thanks to its featherlight 1.28kg frame, the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> enables dealers to offer a solution that fits snugly without blocking sightlines. The system‚Äôs compact form factor ensures:</p>\n\n<ul>\n<li>\n<strong>Maximum Signal Reception:</strong> Elevated positioning without compromise.</li>\n<li>\n<strong>Full Operator Visibility:</strong> Crucial for safety and precision farming.</li>\n<li>\n<strong>Streamlined Aesthetics:</strong> Keeping machinery sleek and professional-looking.</li>\n</ul>\n\n<p>Installing over the cab has never been this seamless or operator-friendly.</p>\n\n\n\n\n<h2>\n  \n  \n  Technical Excellence Behind the Lightweight Champion\n</h2>\n\n<p>This <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> isn‚Äôt just about being light‚Äîit‚Äôs built with cutting-edge components and thoughtful engineering:</p>\n\n<ul>\n<li>\n<strong>High-precision GNSS chipset:</strong> Ensures accuracy within centimeters.</li>\n<li>\n<strong>Robust weatherproof casing:</strong> IP67-rated protection against dust and water.</li>\n<li>\n<strong>Low power consumption:</strong> Extends operational hours, especially vital in remote fields.</li>\n<li>\n<strong>Universal mounting compatibility:</strong> Fits a wide range of agricultural vehicles with minimal adaptation.</li>\n</ul>\n\n<p>These features make it a versatile choice that future-proofs your dealership offerings.</p>\n\n\n\n\n<h2>\n  \n  \n  Meeting Dealer Needs: Efficiency, Reliability, and Customer Satisfaction\n</h2>\n\n<p>For dealers of agricultural navigation systems, presenting a product that balances precision with user comfort is a game-changer. The lightweight over-cab <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> effortlessly meets farmer expectations for easy-to-install, durable, and high-performance technology.</p>\n\n<p>By stocking this system, dealers can:</p>\n\n<ul>\n<li>Reduce support requests related to installation complexity.</li>\n<li>Offer a product that enhances operator safety and productivity.</li>\n<li>Stand out in a competitive market with technology that‚Äôs both advanced and user-centric.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Final Thoughts: Transform Your Product Line with a Sight-Saving Innovation\n</h2>\n\n<p>A 1.28kg lightweight design paired with unobstructed over-cab mounting transforms the GNSS auto-steering landscape. For dealers eager to partner with innovation, this system offers a perfect balance of precision, practicality, and operator-friendly design.</p>\n\n<p>Are you ready to upgrade your inventory with a system that‚Äôs as lightweight as it is powerful? Explore the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> today and give your customers the technology they deserve.</p>\n\n\n\n\n<p><em>What challenges have you faced with bulky GNSS systems? Share your experiences or questions below‚Äîlet‚Äôs discuss how lightweight solutions can reshape the future of agricultural navigation.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Anti-EMI Design: Avoiding Signal Crosstalk in Urban-Edge Farmland","url":"https://dev.to/beidou/anti-emi-design-avoiding-signal-crosstalk-in-urban-edge-farmland-lmc","date":1750927854,"author":"zly","guid":171994,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fag71csg4ohnc6f6alvrd.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fag71csg4ohnc6f6alvrd.jpg\" alt=\"Anti-EMI Design: Avoiding Signal Crosstalk in Urban-Edge Farmland\" width=\"800\" height=\"600\"></a></p>\n\n<h1>\n  \n  \n  Mastering Anti-EMI Design: Avoiding Signal Crosstalk in Urban-Edge Farmland With GNSS Auto-Steering System\n</h1>\n\n<p>As agricultural dealers, you understand how precision matters‚Äîespecially in urban-edge farmland, where complex electromagnetic environments challenge navigation accuracy. The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> offers revolutionary automation for modern farms, but without proper <strong>Anti-EMI design</strong>, signal crosstalk can degrade guidance performance, leading to costly errors.</p>\n\n<p>This post dives into the crucial role of Anti-EMI (Electromagnetic Interference) design strategies in preventing signal crosstalk and maintaining pinpoint accuracy on the fringes of urban and rural areas. If your clients need reliable navigation where farmlands meet the city, understanding these principles will set you‚Äîand your product recommendations‚Äîa cut above the rest.</p>\n\n\n\n\n<h2>\n  \n  \n  Why Urban-Edge Farmland is a Hotspot for EMI Challenges\n</h2>\n\n<p>Urban-edge farmlands are at the crossroads of two very different worlds. Proximity to power lines, radio towers, and industrial equipment increases ambient electromagnetic noise. This environment disrupts GNSS signals, which are inherently weak by the time they reach farm machinery.</p>\n\n<p><strong>Signal crosstalk</strong> occurs when electromagnetic signals interfere with each other, causing inaccuracies or delays in satellite data processing. For a GNSS Auto-Steering System, even minor positioning errors translate into inefficient planting, spraying, or harvesting paths‚Äîwasting both time and resources.</p>\n\n\n\n\n<h2>\n  \n  \n  Key Anti-EMI Design Techniques for GNSS Auto-Steering Systems\n</h2>\n\n<p>To deliver flawless performance, system designers must incorporate measures that shield, filter, and isolate electromagnetic interference. Here are some proven methods:</p>\n\n<ul>\n<li>\n<strong>Shielded Cables &amp; Connectors</strong>: Using braided or foil shielding minimizes external electromagnetic waves from infiltrating signal lines.</li>\n<li>\n<strong>Ferrite Beads and Chokes</strong>: These components suppress high-frequency noise on power and signal lines, improving signal purity.</li>\n<li>\n<strong>Grounding and Isolation</strong>: Establishing dedicated ground paths and isolating sensitive electronics prevent EMI-induced current loops.</li>\n<li>\n<strong>Robust PCB Layout</strong>: Segregating analog and digital circuits, along with layered ground planes, helps minimize cross-interference inside the device.</li>\n<li>\n<strong>Frequency Filtering</strong>: Applying low-pass and band-pass filters refines the GNSS receiver‚Äôs input, blocking out-of-band frequency noise typical in urban-edge settings.</li>\n</ul>\n\n<p>By combining these techniques, the GNSS Auto-Steering System can sustain consistent and precise satellite signal reception, even amidst electromagnetic noise.</p>\n\n\n\n\n<h2>\n  \n  \n  How Hi-Target‚Äôs GNSS Auto-Steering System Tackles EMI Challenges\n</h2>\n\n<p>Hi-Target integrates advanced <strong>Anti-EMI design</strong> directly into its GNSS Auto-Steering System, tailored for the demanding conditions of urban-edge farmland:</p>\n\n<ul>\n<li>Precision shielding around critical sensor modules.</li>\n<li>Multi-stage filtering circuits to handle diverse noise sources.</li>\n<li>Robust firmware algorithms that compensate for transient signal disturbances.</li>\n<li>Easy-to-install grounding kits that ensure system stability.</li>\n</ul>\n\n<p>The result? Your clients experience uninterrupted steering precision, enhanced operational efficiency, and reduced downtime due to navigation errors.</p>\n\n\n\n\n<h2>\n  \n  \n  What This Means for You as a Dealer\n</h2>\n\n<p>Understanding these technical details empowers you to <strong>confidently address customer concerns</strong> about navigation reliability in challenging environments. Sharing insights about Anti-EMI design not only builds trust but positions you as a knowledgeable partner in next-level agricultural technology.</p>\n\n<p>When you recommend a <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>, highlight not just its automation perks but also its resilience against electromagnetic interference‚Äîa must-have for farms bordering urban infrastructure.</p>\n\n\n\n\n<h2>\n  \n  \n  Final Thoughts\n</h2>\n\n<p>Anti-EMI design isn‚Äôt just a technical checkbox‚Äîit‚Äôs fundamental to making GNSS Auto-Steering Systems viable in the increasingly complex electromagnetic landscapes of urban-edge farmland. As dealers, your grasp of this concept can turn hesitant clients into enthusiastic adopters of precision ag tech.</p>\n\n<p><strong>How do you currently tackle EMI-related concerns with your clients?</strong> Share your strategies or challenges in the comments‚Äîwe‚Äôd love to hear your experiences.</p>\n\n\n\n\n<p><em>Equip your customers with technology smart enough to rise above interference. The future of precision agriculture starts here.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"20-Nation Practices: Why Smart Ag 4.0 Needs Sky-Ground Data Chaining","url":"https://dev.to/beidou/20-nation-practices-why-smart-ag-40-needs-sky-ground-data-chaining-37e3","date":1750927841,"author":"zly","guid":171993,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fsrmslo695qc256yfgyq9.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fsrmslo695qc256yfgyq9.jpg\" alt=\"20-Nation Practices: Why Smart Ag 4.0 Needs Sky-Ground Data Chaining\" width=\"800\" height=\"600\"></a></p>\n\n<h1>\n  \n  \n  Why Dealers Should Embrace the GNSS Auto-Steering System for Smart Ag 4.0‚Äôs Sky-Ground Data Revolution\n</h1>\n\n<p>In the fast-evolving world of Smart Agriculture 4.0, precision is power. For dealers specializing in agricultural navigation systems, understanding how the <strong><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a></strong> integrates sky-ground data chaining is crucial. This fusion transforms farming from art to science, optimizing yield while reducing waste. But what makes this system indispensable across 20 nations adapting to Smart Ag 4.0? Let‚Äôs dig in.</p>\n\n\n\n\n<h2>\n  \n  \n  Unlocking Precision: The Role of GNSS Auto-Steering in Smart Agriculture\n</h2>\n\n<p>At its core, the <strong>GNSS Auto-Steering System</strong> uses satellite signals to guide agricultural machinery with centimeter-level accuracy. By automating steering, it reduces operator fatigue and overlapping passes‚Äîkey factors in enhancing efficiency. More than just a guidance tool, it is a critical enabler of data-driven farming, syncing satellite (sky) and sensor (ground) inputs for real-time decision-making.</p>\n\n<p>For dealers, this means a prime opportunity to offer clients a solution that not only boosts productivity but also integrates seamlessly with evolving farm management platforms.</p>\n\n\n\n\n<h2>\n  \n  \n  Sky-Ground Data Chaining: The Next Step in Agricultural Precision\n</h2>\n\n<p>Smart Ag 4.0 isn‚Äôt just about GPS or auto-steering in isolation‚Äîit‚Äôs about harnessing multiple data streams from sky-based satellites and ground sensors. This ‚Äúchaining‚Äù of data sources improves positioning accuracy and operational adaptability under varying conditions like dense canopy or challenging terrain.</p>\n\n<p>Technical highlights include:</p>\n\n<ul>\n<li>\n<strong>Multi-constellation GNSS reception</strong> (GPS, GLONASS, BeiDou, Galileo) for redundancy and coverage.</li>\n<li>\n<strong>RTK correction support</strong> delivering positioning precision down to 2 cm.</li>\n<li>Robust real-time kinematic solutions synced with on-ground sensors monitoring soil, moisture, and crop health.</li>\n</ul>\n\n<p>Such integration empowers farmers and dealerships alike to anticipate issues before they impact productivity‚Äîa decisive advantage in competitive markets.</p>\n\n\n\n\n<h2>\n  \n  \n  Global Trends: Lessons from 20 Nations Leading the Smart Ag 4.0 Wave\n</h2>\n\n<p>Across diverse agricultural regions‚Äîfrom the vast fields of Brazil to the innovative farms in Germany‚ÄîGNSS Auto-Steering Systems paired with sky-ground data are becoming standard. This global adoption reflects how data connectivity enhances both crop planning and machinery operation.</p>\n\n<p>Dealers who understand local challenges and link them with these global innovations can better tailor their offerings. Whether it‚Äôs customizing guidance for contour farming or variable-rate fertilizer application, the depth of data integration elevates client trust and satisfaction.</p>\n\n\n\n\n<h2>\n  \n  \n  Why Dealers Must Champion GNSS Auto-Steering Systems Today\n</h2>\n\n<p>The true value of the <strong><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a></strong> lies not only in technology but in its ability to solve real-world farming challenges:</p>\n\n<ul>\n<li>Minimizing overlapping routes saves fuel and soil compaction.</li>\n<li>Automating complex steering reduces operator errors and labor costs.</li>\n<li>Enabling seamless data exchange positions farms for future upgrades like autonomous machinery.</li>\n</ul>\n\n<p>For dealers, this translates into a stronger value proposition. Offering products that fit into the smart ecosystems farmers aspire to builds long-term partnerships instead of one-time sales.</p>\n\n\n\n\n<h2>\n  \n  \n  Final Thoughts: Is Your Dealership Ready to Lead the Sky-Ground Data Revolution?\n</h2>\n\n<p>As Smart Agriculture 4.0 accelerates, dealers play a pivotal role in bridging cutting-edge technology with on-the-ground farming realities. The <strong><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a></strong> is more than a navigation tool‚Äîit‚Äôs a gateway to a future where data from satellites and sensors converge to drive smarter decisions.</p>\n\n<p>Are you prepared to guide your clients into this new era? How will integrating these technologies reshape your dealership value chain? Share your experiences or questions below‚Äîwe‚Äôd love to hear how you‚Äôre making precision farming smarter and more connected.</p>\n\n\n\n\n<p><em>Explore more about the latest in precision agriculture and elevate your dealership‚Äôs expertise with the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"15% Yield Uplift Secret: How Precise Row Spacing Boosts Crop Photosynthesis","url":"https://dev.to/beidou/15-yield-uplift-secret-how-precise-row-spacing-boosts-crop-photosynthesis-3p9c","date":1750927829,"author":"zly","guid":171992,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fm0qe9dghso8pppmpuycj.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fm0qe9dghso8pppmpuycj.jpg\" alt=\"15% Yield Uplift Secret: How Precise Row Spacing Boosts Crop Photosynthesis\" width=\"800\" height=\"600\"></a># 15% Yield Uplift Secret: How Precise Row Spacing Boosts Crop Photosynthesis with GNSS Auto-Steering System</p>\n\n<p>In modern agriculture, precision isn‚Äôt just a luxury‚Äîit‚Äôs a necessity. Dealers of agricultural navigation systems constantly seek ways to offer farmers measurable advantages. One little-known game-changer is how <strong>precise row spacing</strong>, enabled by technologies like the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>, can boost crop photosynthesis and drive up to a <strong>15% yield uplift</strong>.</p>\n\n<p>This post explores the science behind row spacing and how integrating advanced GNSS-assisted auto-steering can transform planting accuracy, crop health, and ultimately, farmers' bottom lines.</p>\n\n\n\n\n<h2>\n  \n  \n  Why Row Spacing Matters for Crop Photosynthesis\n</h2>\n\n<p>Plants rely on sunlight for photosynthesis, turning light into the energy necessary for growth. However, uneven or wide row spacing creates shadow gaps, exposing plants to irregular light and reducing their photosynthetic efficiency.</p>\n\n<p>Research shows that <strong>consistent, narrow row spacing increases light interception</strong>, maximizing leaf area exposure. This directly influences photosynthesis rates and plant vigor, leading to higher biomass and better yields.</p>\n\n<p>In practice, getting perfect row spacing by manual driving or standard GPS guidance is challenging. Tractors may drift, and rows overlap, doubling seed costs without increasing yield.</p>\n\n\n\n\n<h2>\n  \n  \n  How GNSS Auto-Steering System Delivers Precision\n</h2>\n\n<p>Enter the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>: a technology that leverages satellite signals and real-time kinematic (RTK) positioning to maintain sub-2cm accuracy in vehicle guidance.</p>\n\n<p>Key technical features include:</p>\n\n<ul>\n<li>\n<strong>RTK Positioning Accuracy</strong>: Achieves centimeter-level accuracy to keep planting lines razor-sharp.</li>\n<li>\n<strong>Automatic Steering Control</strong>: Minimizes driver error and fatigue by maintaining exact row trajectories.</li>\n<li>\n<strong>Integrated Compatibility</strong>: Works seamlessly with existing tractor systems and precision planters.</li>\n</ul>\n\n<p>By consistently maintaining ideal row spacing, this system cuts overlap and seed waste, ensuring each plant receives optimal light, water, and nutrients.</p>\n\n\n\n\n<h2>\n  \n  \n  The Yield Impact: A Closer Look\n</h2>\n\n<p>Farmers adopting <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> report yield improvements averaging 10-15%. This boost isn‚Äôt just luck but stems from:</p>\n\n<ul>\n<li>\n<strong>Enhanced Photosynthetic Efficiency</strong>: Uniform rows enable better light distribution across the crop canopy.</li>\n<li>\n<strong>Reduced Plant Stress</strong>: Less competition for resources as plants aren‚Äôt overcrowded.</li>\n<li>\n<strong>Optimized Input Usage</strong>: Seeds, fertilizers, and water are placed with maximal effectiveness.</li>\n</ul>\n\n<p>For dealers, this means a strong value proposition to offer customers. Precision in planting translates directly into profitability and sustainability‚Äîan unbeatable selling point.</p>\n\n\n\n\n<h2>\n  \n  \n  Practical Tips for Dealers: How to Highlight GNSS Auto-Steering‚Äôs Value\n</h2>\n\n<ol>\n<li>\n<strong>Demonstrate the Tech</strong>: Use live demos showing the accuracy difference between manual and auto-steered planting.</li>\n<li>\n<strong>Share Data</strong>: Present case studies quantifying yield increases and input savings from precise row spacing.</li>\n<li>\n<strong>Emphasize ROI</strong>: Calculate cost savings on seeds plus projected revenue from higher yields to build a compelling business case.</li>\n<li>\n<strong>Train Farmers</strong>: Educate buyers on pairing the system with suitable planter attachments for maximal effectiveness.</li>\n</ol>\n\n\n\n\n<h2>\n  \n  \n  Final Thoughts: Precision Planting Is the Future of Agriculture\n</h2>\n\n<p>The synergy between <strong>precise row spacing</strong> and <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> represents a powerful leverage point in modern farming. For dealers committed to delivering high-impact agricultural navigation solutions, understanding and promoting this link is critical.</p>\n\n<p>Are your customers ready to unlock the hidden 15% yield gain through precision planting? How will you help them navigate this transformative shift?</p>\n\n\n\n\n<p><em>Curious to learn more or want to see the system in action? Reach out and let‚Äôs explore how integrating GNSS auto-steering can elevate your agricultural offerings.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"9-30V Wide Voltage Protection: Old Tractor Power Fluctuations Won‚Äôt Disrupt Sys","url":"https://dev.to/beidou/9-30v-wide-voltage-protection-old-tractor-power-fluctuations-wont-disrupt-sys-5hi3","date":1750927823,"author":"zly","guid":171991,"unread":true,"content":"<h1>\n  \n  \n  Why 9-30V Wide Voltage Protection in GNSS Auto-Steering Systems Matters for Old Tractors\n</h1>\n\n<p>In agriculture, precision is everything. But what happens when your trusted tractor struggles with unstable power during critical navigation tasks? For dealers of agricultural navigation systems, one key challenge is ensuring that equipment performs reliably‚Äîeven on older machinery with fluctuating voltage. Enter the <strong><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a></strong> equipped with 9-30V wide voltage protection‚Äîa game-changer for managing old tractor power fluctuations without disruptions.</p>\n\n\n\n\n<h2>\n  \n  \n  Understanding Power Challenges in Older Tractors\n</h2>\n\n<p>Older tractors often suffer from inconsistent voltage supplies. Factors like worn alternators, corroded wiring, and battery degradation cause voltage dips or spikes between engine startups and during operation. These irregularities can wreak havoc on sensitive navigation electronics, leading to inaccurate guidance or system resets.</p>\n\n<p>For dealers, selling auto-steering systems that can't handle these fluctuations leads to service headaches and dissatisfied customers. This is why voltage protection isn't just a nice-to-have; it's essential.</p>\n\n\n\n\n<h2>\n  \n  \n  What Is 9-30V Wide Voltage Protection?\n</h2>\n\n<p>Simply put, 9-30V wide voltage protection means the auto-steering system is engineered to operate stably across a wide voltage range‚Äîfrom as low as 9 volts up to 30 volts. This design accommodates:</p>\n\n<ul>\n<li>Voltage dips caused by aging batteries or cold starts\n</li>\n<li>Spikes from alternator output during engine load changes\n</li>\n<li>Power surges when auxiliary equipment is running\n</li>\n</ul>\n\n<p>This robust protection ensures that even when your tractor‚Äôs electrical system is less than perfect, the navigation system stays online and accurate.</p>\n\n\n\n\n<h2>\n  \n  \n  How Wide Voltage Protection Enhances GNSS Auto-Steering Reliability\n</h2>\n\n<ol>\n<li>\n<strong>Uninterrupted Guidance:</strong> No sudden reboots or signal drops due to voltage lags‚Äîcritical for maintaining precise rows and minimizing overlap.\n</li>\n<li>\n<strong>Extended Equipment Lifespan:</strong> Stable power reduces wear on internal components such as controllers and sensors.\n</li>\n<li>\n<strong>Simplified Installation:</strong> Dealers don‚Äôt need to recommend expensive voltage stabilizers or battery upgrades every time.\n</li>\n<li>\n<strong>Broader Vehicle Compatibility:</strong> Supports a range of tractors, including vintage and utility models often used by smaller farms.\n</li>\n</ol>\n\n<p>By integrating 9-30V wide voltage protection, the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> becomes a versatile solution for diverse fleet needs.</p>\n\n\n\n\n<h2>\n  \n  \n  Key Technical Features That Dealers Should Highlight\n</h2>\n\n<ul>\n<li>\n<strong>Over Voltage Protection:</strong> Safeguards system circuits from spikes above 30V.\n</li>\n<li>\n<strong>Under Voltage Cut-off:</strong> Prevents system damage if voltage drops below safe operating thresholds.\n</li>\n<li>\n<strong>EMC Compliance:</strong> Ensures resistance to electromagnetic interference common in agricultural environments.\n</li>\n<li>\n<strong>Power Efficiency:</strong> Optimized circuitry minimizes power consumption, preserving tractor battery health.\n</li>\n</ul>\n\n<p>These features combine to create a rugged system that withstands real-world agricultural conditions.</p>\n\n\n\n\n<h2>\n  \n  \n  Why Dealers Should Prioritize This Technology\n</h2>\n\n<p>For dealers, equipping clients with navigation systems that handle unstable power solves a frequent pain point. This reduces returns, boosts customer satisfaction, and builds trust. Plus, it expands your market by appealing to owners of older tractors who often feel left behind by modern precision tech.</p>\n\n\n\n\n<h2>\n  \n  \n  Final Thoughts: Embrace Stability in Agricultural Navigation\n</h2>\n\n<p>Electrical inconsistencies in old tractors no longer have to derail precision farming goals. The 9-30V wide voltage protection in the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> ensures reliable, accurate guidance, empowering farmers to optimize every pass.  </p>\n\n<p><strong>Are you ready to offer your customers auto-steering technology that keeps pace‚Äîno matter the tractor's age or condition?</strong> Let‚Äôs talk about how integrating wide voltage protection can transform your sales and support experience today.</p>\n\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"10.1/12 Sun-Readable Screens: Why Touch Ops Don‚Äôt Stutter in Noon Sun","url":"https://dev.to/beidou/10112-sun-readable-screens-why-touch-ops-dont-stutter-in-noon-sun-3g3","date":1750927815,"author":"zly","guid":171990,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fanzqgvhp3n7tkyuqih3e.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fanzqgvhp3n7tkyuqih3e.jpg\" alt=\"10.1/12 Sun-Readable Screens: Why Touch Ops Don‚Äôt Stutter in Noon Sun\" width=\"800\" height=\"600\"></a></p>\n\n<h1>\n  \n  \n  GNSS Auto-Steering System: Why 10.1/12 Sun-Readable Screens Ensure Touch Ops Don‚Äôt Stutter in Noon Sun\n</h1>\n\n<p>In modern agriculture, precision and reliability define success. For dealers of agricultural navigation systems, recommending equipment that performs flawlessly under the harshest conditions is non-negotiable. One critical yet often overlooked feature is the display screen ‚Äî the operator‚Äôs direct interface with the technology. Enter the <strong>GNSS Auto-Steering System</strong> equipped with advanced <strong>10.1/12 sun-readable screens</strong>, engineered to keep touch operations smooth and responsive even under the glaring midday sun. But why does this matter, and how does it impact daily farming operations? Let‚Äôs dive in.</p>\n\n<h2>\n  \n  \n  The Challenge: Visibility in Harsh Sunlight\n</h2>\n\n<p>Imagine a tractor operator trying to monitor precision farming data at noon on a sunny field. Ordinary screens reflect sunlight, wash out colors, and make touch inputs unreliable. This leads to frustrating delays, errors in steering corrections, and wasted time. For dealers, this translates into support tickets and dissatisfied customers. The solution? A display engineered to thrive in direct sunlight.</p>\n\n<h2>\n  \n  \n  What Makes 10.1/12 Sun-Readable Screens Unique?\n</h2>\n\n<p>Sun-readable screens are not just brighter. They combine several technologies:</p>\n\n<ul>\n<li>\n<strong>High Brightness:</strong> Typically exceeding 1000 nits, these displays shine brightly enough to overcome the sun‚Äôs intense glare.</li>\n<li>\n<strong>Anti-Reflective Coatings:</strong> Specialized layers minimize reflections and improve contrast, ensuring data remains crisp.</li>\n<li>\n<strong>Optical Bonding:</strong> This technique fuses the touchscreen layer directly to the display, reducing internal reflections and boosting visibility.</li>\n<li>\n<strong>Capacitive Touch Sensitivity:</strong> Ensures touch operation remains responsive even when wearing gloves or under direct sunlight.</li>\n</ul>\n\n<p>Together, these features guarantee that the screen is visible, clear, and responsive ‚Äî crucial for precise navigation adjustments.</p>\n\n<h2>\n  \n  \n  Impact on GNSS Auto-Steering System Performance\n</h2>\n\n<p>The <strong>GNSS Auto-Steering System</strong> relies heavily on real-time data inputs displayed accurately for the operator to monitor and adjust. With sun-readable screens:</p>\n\n<ul>\n<li>Operators can maintain concentration without struggling to interpret information.</li>\n<li>Touch inputs register instantly, preventing delays in course corrections.</li>\n<li>Reduced eye strain and frustration improve user experience during long hours in the field.</li>\n</ul>\n\n<p>This streamlined interaction boosts productivity and ensures the system delivers on its promise of precision agriculture.</p>\n\n<h2>\n  \n  \n  Technical Highlights from Leading Sun-Readable Displays\n</h2>\n\n<p>For dealers comparing products, technical specs are key. The 10.1‚Äù and 12‚Äù sun-readable screens integrated into top-tier GNSS Auto-Steering Systems typically feature:</p>\n\n<ul>\n<li>\n<strong>Brightness:</strong> 1000‚Äì1500 cd/m¬≤ (nits) for unparalleled daylight visibility.</li>\n<li>\n<strong>Resolution:</strong> HD or better to present detailed maps and guidance lines crisply.</li>\n<li>\n<strong>Operating Temperature:</strong> -30¬∞C to 70¬∞C, built for extreme agricultural environments.</li>\n<li>\n<strong>Multi-Touch Support:</strong> Enables intuitive pinch, zoom, and swipe operations without lag.</li>\n</ul>\n\n<p>These parameters ensure that equipment is rugged, reliable, and user-friendly in any condition.</p>\n\n<h2>\n  \n  \n  Why Dealers Should Prioritize Sun-Readable Screens\n</h2>\n\n<p>Agricultural operators demand technology that just works‚Äîno compromises. As a dealer, championing GNSS Auto-Steering Systems with <strong>10.1/12 sun-readable screens</strong> positions you as a trusted advisor capable of solving real field problems. Improved visibility means:</p>\n\n<ul>\n<li>Smoother user adoption and higher customer satisfaction.</li>\n<li>Fewer service calls related to user interface frustrations.</li>\n<li>A clear competitive edge by promoting durable, thoughtful technology.</li>\n</ul>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>In agricultural navigation, precision matters‚Äîbut so does usability. The next time you showcase a <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> to your clients, emphasize the power of 10.1/12 sun-readable screens. This feature guarantees reliable, lag-free touch operation even at the peak of the day‚Äôs sun, improving on-field performance and operator confidence.</p>\n\n<p><strong>How have your customers responded to sun-readable displays? Could upgrading to these screens be your next sales advantage? Share your experiences or questions below!</strong></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"HiFarm 4-in-1 Software: Integrating Auto-Driving, Farm Mgmt & Image Monitoring","url":"https://dev.to/beidou/hifarm-4-in-1-software-integrating-auto-driving-farm-mgmt-image-monitoring-4d24","date":1750927807,"author":"zly","guid":171989,"unread":true,"content":"<h1>\n  \n  \n  Unlocking Precision Agriculture with the GNSS Auto-Steering System and HiFarm 4-in-1 Software\n</h1>\n\n<p>In today‚Äôs agricultural landscape, efficiency and accuracy aren‚Äôt just goals‚Äîthey‚Äôre necessities. For dealers of agricultural navigation systems, offering solutions that enhance productivity can make all the difference. The <strong><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a></strong> paired with <strong>HiFarm 4-in-1 software</strong> is transforming how modern farms operate by seamlessly integrating auto-driving, farm management, and image monitoring into one powerhouse platform.</p>\n\n\n\n\n<h2>\n  \n  \n  What Makes the GNSS Auto-Steering System a Game-Changer?\n</h2>\n\n<p>At its core, the GNSS Auto-Steering System leverages satellite positioning technology to guide agricultural machinery with centimeter-level precision. This drastically reduces overlap, minimizes soil compaction, and optimizes fuel use‚Äîkey benefits that dealers can confidently present to potential customers.</p>\n\n<p>Technical highlights include:</p>\n\n<ul>\n<li>Multi-constellation support (GPS, GLONASS, BeiDou) ensures robust satellite coverage, even in challenging environments.</li>\n<li>Real-time kinematic (RTK) positioning offers accuracy within 2 cm, essential for precise row guidance.</li>\n<li>Compatibility with a wide range of tractors and implements enhances versatility.</li>\n</ul>\n\n<p>These features empower farmers to maintain straight, consistent trajectories in the field, improving yield quality and operational efficiency.</p>\n\n\n\n\n<h2>\n  \n  \n  How HiFarm 4-in-1 Software Enhances Farming Operations\n</h2>\n\n<p>The <strong>HiFarm 4-in-1 software</strong> complements the GNSS Auto-Steering System by bundling four critical functions:</p>\n\n<ol>\n<li>\n<strong>Auto-Driving Control:</strong> Integrates with GNSS tech to automate steering, allowing operators to focus on monitoring rather than manual driving.</li>\n<li>\n<strong>Farm Management:</strong> A centralized dashboard tracks field progress, machinery status, and work schedules, streamlining farm operations.</li>\n<li>\n<strong>Image Monitoring:</strong> Real-time camera feeds enable remote supervision, reducing the need for onsite presence and quickening response times to issues.</li>\n<li>\n<strong>Data Analysis:</strong> Gathered data supports informed decision-making by analyzing crop health, soil conditions, and machine efficiency.</li>\n</ol>\n\n<p>For dealers, offering this integrated solution means you‚Äôre not just selling hardware‚Äîyou‚Äôre delivering a comprehensive productivity suite tailored for modern agribusiness challenges.</p>\n\n\n\n\n<h2>\n  \n  \n  Why Dealers Should Prioritize This Integrated Approach\n</h2>\n\n<p>Combining the GNSS Auto-Steering System with HiFarm 4-in-1 software resonates deeply with today‚Äôs farmers who demand precision, ease, and efficiency. Dealers become trusted partners by offering:</p>\n\n<ul>\n<li>\n<strong>Simplification:</strong> One platform reduces the complexity of managing disparate systems.</li>\n<li>\n<strong>Cost-effectiveness:</strong> Bundled solutions maximize ROI for both farmers and dealers.</li>\n<li>\n<strong>Future-readiness:</strong> Continuous software updates guarantee compatibility with emerging tech and evolving farming practices.</li>\n</ul>\n\n<p>By positioning this solution as a smart investment, dealers attract more informed customers and build long-term relationships grounded in trust and value.</p>\n\n\n\n\n<h2>\n  \n  \n  Final Thoughts: Elevate Your Portfolio with Cutting-Edge Precision Agriculture\n</h2>\n\n<p>The agriculture sector is evolving, and so should the tools you offer. Integrating the <strong><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a></strong> with HiFarm 4-in-1 software provides a turnkey solution that meets the exacting demands of modern farms. This synergy empowers dealers to stand out in a competitive market by delivering innovation that truly drives results.</p>\n\n<p>Are you ready to give your customers the edge they need with a smarter, more integrated agricultural navigation system? Share your experience or questions below‚Äîlet‚Äôs cultivate success together.</p>\n\n\n\n\n<p><em>Explore the full capabilities of the GNSS Auto-Steering System and discover how HiFarm 4-in-1 software can transform your dealership‚Äôs offerings today.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pioneering Agriculture 4.0: The GNSS Auto-Steering System Ecosystem","url":"https://dev.to/beidou/pioneering-agriculture-40-the-gnss-auto-steering-system-ecosystem-lia","date":1750924360,"author":"zly","guid":171946,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fmif4l0qn90qjqkfys06x.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fmif4l0qn90qjqkfys06x.jpg\" alt=\"Pioneering Agriculture 4.0: The GNSS Auto-Steering System Ecosystem\" width=\"800\" height=\"600\"></a></p>\n\n<h1>\n  \n  \n  Pioneering Agriculture 4.0: The GNSS Auto-Steering System Ecosystem\n</h1>\n\n<p>In the rapidly evolving world of precision agriculture, efficiency and accuracy are no longer optional‚Äîthey're vital. For dealers of agricultural navigation systems, staying ahead means embracing technologies that transform traditional farming into smart farming. One such game-changer is the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>, a core component of Agriculture 4.0 that‚Äôs redefining how farms operate around the globe.</p>\n\n\n\n\n<h2>\n  \n  \n  What is the GNSS Auto-Steering System?\n</h2>\n\n<p>At its core, the GNSS Auto-Steering System leverages Global Navigation Satellite System (GNSS) technology to guide agricultural machinery with sub-inch precision. By integrating satellite signals, on-board sensors, and advanced control algorithms, this system autonomously steers tractors and other equipment along optimized paths.</p>\n\n<p>The outcome? Reduced overlaps, minimized soil compaction, and maximized field productivity. For dealers, this means offering clients a solution that speaks directly to the needs of modern farming: accuracy, cost-savings, and ease of use.</p>\n\n\n\n\n<h2>\n  \n  \n  Key Technical Features That Drive Performance\n</h2>\n\n<p>Understanding the technical prowess behind the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> is essential for dealers to communicate value effectively.</p>\n\n<ul>\n<li>\n<strong>Satellite Compatibility:</strong> Supports GPS, GLONASS, BeiDou, and Galileo systems, ensuring global reliability.</li>\n<li>\n<strong>Real-time Kinematic (RTK) Positioning:</strong> Achieves centimeter-level precision by correcting satellite signal errors.</li>\n<li>\n<strong>Steering Control Modes:</strong> Offers both automatic and manual override modes, providing flexibility based on terrain and user preference.</li>\n<li>\n<strong>User Interface:</strong> Intuitive touchscreen displays with customizable guidance lines facilitate easy setup and operation.</li>\n<li>\n<strong>Durability:</strong> Designed for rugged farm environments with IP67-rated enclosures and weather-resistant components.</li>\n</ul>\n\n<p>These features collectively empower operators to maintain consistent speed and steering accuracy, even in challenging field conditions.</p>\n\n\n\n\n<h2>\n  \n  \n  Why Dealers Should Champion the GNSS Auto-Steering System\n</h2>\n\n<p>For dealers specializing in agricultural navigation systems, introducing the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> opens doors to multiple benefits:</p>\n\n<ol>\n<li>\n<strong>Expanded Product Portfolio:</strong> Distinguish your offerings with cutting-edge technology that aligns with Industry 4.0 expectations.</li>\n<li>\n<strong>Enhanced Client ROI:</strong> Help farmers reduce input costs (seed, fertilizer, fuel) by optimizing fieldwork.</li>\n<li>\n<strong>After-Sales Opportunities:</strong> Provide installation, calibration, and maintenance services that build long-term client relationships.</li>\n<li>\n<strong>Education &amp; Support:</strong> Equip end-users with training and troubleshooting expertise to ensure adoption and satisfaction.</li>\n</ol>\n\n<p>Understanding these advantages allows dealers to position themselves as trusted advisors in a competitive market.</p>\n\n\n\n\n<h2>\n  \n  \n  Integrating the GNSS Auto-Steering System into the Agriculture 4.0 Ecosystem\n</h2>\n\n<p>The future of farming lies in connected technology. The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> seamlessly integrates with other smart farming tools:</p>\n\n<ul>\n<li>\n<strong>Variable Rate Technology (VRT):</strong> Automate precise application of inputs based on real-time data.</li>\n<li>\n<strong>Crop Monitoring Sensors:</strong> Combine steering accuracy with crop health insights for maximized yield.</li>\n<li>\n<strong>Farm Management Software:</strong> Sync guidance data for comprehensive operation analytics.</li>\n</ul>\n\n<p>By guiding machinery accurately, the auto-steering system becomes the backbone of a data-driven, automated farm ‚Äî a necessity for Agriculture 4.0‚Äôs vision of sustainability and productivity.</p>\n\n\n\n\n<h2>\n  \n  \n  Final Thoughts: Driving Precision with Purpose\n</h2>\n\n<p>As dealers, you have the unique opportunity to be catalysts for change within the agricultural industry. The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> is more than a navigation tool‚Äîit‚Äôs a precision farming enabler that addresses economic and environmental challenges head-on.</p>\n\n<p>Is your dealership ready to lead the Agriculture 4.0 revolution by offering a solution that farmers truly need? Exploring how the GNSS auto-steering ecosystem can transform your customers‚Äô operations could be the next strategic move.</p>\n\n\n\n\n<p><em>How are you preparing your dealership to meet the demands of smart farming? Share your experiences or questions below!</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Complete Step-by-Step Installation and Calibration Guide for the GNSS Auto-Steering System","url":"https://dev.to/beidou/the-complete-step-by-step-installation-and-calibration-guide-for-the-gnss-auto-steering-system-4eic","date":1750924348,"author":"zly","guid":171945,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Flkjup1tuuc1fqq32haua.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Flkjup1tuuc1fqq32haua.jpg\" alt=\"The Complete Step-by-Step Installation and Calibration Guide for the GNSS Auto-Steering System\" width=\"800\" height=\"600\"></a># The Complete Step-by-Step Installation and Calibration Guide for the GNSS Auto-Steering System</p>\n\n<p>In today‚Äôs precision agriculture landscape, efficiency and accuracy are no longer optional‚Äîthey‚Äôre critical. For dealers of agricultural navigation systems, understanding how to install and calibrate a <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> is fundamental to delivering value to end-users. This post walks you through a detailed, step-by-step guide on setting up and fine-tuning this cutting-edge technology, ensuring optimal performance in the field.</p>\n\n\n\n\n<h2>\n  \n  \n  Understanding the GNSS Auto-Steering System\n</h2>\n\n<p>The GNSS Auto-Steering System leverages Global Navigation Satellite System technology to automate tractor steering with pinpoint accuracy. Its core components include a high-precision GNSS receiver, a control unit, hydraulic or electric steering actuator, and the user interface.</p>\n\n<p>Key technical parameters to note:</p>\n\n<ul>\n<li>\n<strong>Position accuracy:</strong> Up to ¬±2 cm RTK precision</li>\n<li>\n<strong>Signal support:</strong> GPS, GLONASS, BeiDou multi-constellation capable</li>\n<li>\n<strong>Update rate:</strong> 10 Hz for real-time responsiveness</li>\n<li>\n<strong>Compatibility:</strong> Supports CAN bus and RS232 interfaces for integration with various tractor models</li>\n</ul>\n\n<p>Familiarity with these specs helps diagnose installation issues and tailor solutions for different farm equipment.</p>\n\n\n\n\n<h2>\n  \n  \n  Step 1: Pre-Installation Checks\n</h2>\n\n<p>Before installation, verify tractor compatibility and inspect all system components. Ensure the GNSS antenna mount is secure with a clear view of the sky‚Äîobstructions can impair signal quality. Confirm power supply availability (typically 12-24V DC) and prepare necessary wiring harnesses.</p>\n\n\n\n\n<h2>\n  \n  \n  Step 2: Mounting the GNSS Antenna\n</h2>\n\n<p>Position the antenna on the tractor‚Äôs highest point, ideally the roof or cab top, to maximize satellite signal reception. Use the included magnetic or fixed mount per product guidelines. Proper grounding and cable routing avoid signal interference and physical damage.</p>\n\n\n\n\n<h2>\n  \n  \n  Step 3: Installing the Control Box and Steering Actuator\n</h2>\n\n<p>Mount the control box inside the cab, within easy reach of the operator. Connect the control unit to the actuator responsible for physical steering input‚Äîeither hydraulic or electric depending on the tractor model. Ensure all connectors are fully seated to prevent loose contacts.</p>\n\n\n\n\n<h2>\n  \n  \n  Step 4: Wiring and Power Connections\n</h2>\n\n<p>Run wiring harnesses carefully, keeping them away from moving parts or heat sources. Connect power, ground, and communication lines following the manufacturer‚Äôs pinout diagrams. Double-check polarity and fuse protection to avoid electrical faults.</p>\n\n\n\n\n<h2>\n  \n  \n  Step 5: System Initialization and Software Setup\n</h2>\n\n<p>Power on the system and launch the onboard interface or compatible configuration software. Input basic tractor parameters such as wheelbase and steering ratio to tailor the system‚Äôs control algorithms. Update firmware if prompted.</p>\n\n\n\n\n<h2>\n  \n  \n  Step 6: Calibration Procedures\n</h2>\n\n<p>Calibration is crucial for precise steering. Follow these three key steps:</p>\n\n<ol>\n<li>\n<strong>Steering Calibration:</strong> Perform a full steering range test. The system measures response times and angle limits.</li>\n<li>\n<strong>GNSS Calibration:</strong> Confirm satellite signal quality and perform a base station or NTRIP setup for RTK corrections.</li>\n<li>\n<strong>Steering Offset Adjustment:</strong> Fine-tune the neutral steering point to ensure the tractor drives straight without operator input.</li>\n</ol>\n\n<p>Each calibration step typically takes less than 15 minutes but yields significant accuracy gains.</p>\n\n\n\n\n<h2>\n  \n  \n  Maintenance and Troubleshooting Tips\n</h2>\n\n<p>Routine system checks include inspecting antenna integrity and connection tightness, verifying firmware versions, and running diagnostic tests available in the user interface. Common issues such as signal dropout often stem from antenna obstructions or cable damage.</p>\n\n\n\n\n<h2>\n  \n  \n  Conclusion: Empower Your Customers with Precision\n</h2>\n\n<p>Mastering the installation and calibration of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> equips you as a dealer to offer top-tier precision farming solutions. Your ability to deliver reliable setup and ongoing support directly boosts farmer productivity and operational accuracy.</p>\n\n<p>Are you ready to take your agricultural navigation offerings to the next level? Share your installation experiences or questions below‚Äîwe‚Äôre here to help you succeed!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Leveraging AI in Your GNSS Auto-Steering System for Smarter Fields","url":"https://dev.to/beidou/leveraging-ai-in-your-gnss-auto-steering-system-for-smarter-fields-5geh","date":1750924337,"author":"zly","guid":171944,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fkwfczhl7nyvqn70fqxbp.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fkwfczhl7nyvqn70fqxbp.jpg\" alt=\"Leveraging AI in Your GNSS Auto-Steering System for Smarter Fields\" width=\"800\" height=\"600\"></a># Leveraging AI in Your GNSS Auto-Steering System for Smarter Fields</p>\n\n<p>In today‚Äôs rapidly evolving agricultural landscape, precision and efficiency aren‚Äôt just buzzwords‚Äîthey‚Äôre a necessity. As a dealer of agricultural navigation systems, understanding how to empower farmers with smarter technology is key to staying competitive. The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> is at the forefront of this revolution, especially when combined with cutting-edge AI capabilities. This fusion is transforming how fields are managed, enabling higher yields, reduced labor, and optimized resource use.</p>\n\n<h2>\n  \n  \n  What Is a GNSS Auto-Steering System?\n</h2>\n\n<p>A <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> uses satellite signals to guide agricultural machinery with pinpoint accuracy. By reducing human error and overlap during fieldwork, it maximizes efficiency and saves fuel, seed, and fertilizer costs. Typical features include centimeter-level positioning, automatic heading control, and integration with various machine types.</p>\n\n<p>For dealers, it‚Äôs important to highlight these system specs:</p>\n\n<ul>\n<li>\n<strong>High-precision GPS/GLONASS/Galileo support</strong> for signal redundancy and reliability</li>\n<li>\n<strong>Real-time kinematic (RTK) corrections</strong> enabling 2-3cm accuracy</li>\n<li>\n<strong>User-friendly interface</strong> compatible with multiple tractor models</li>\n<li>\n<strong>Modular design</strong> for easy maintenance and upgrades</li>\n</ul>\n\n<h2>\n  \n  \n  Enhancing GNSS Auto-Steering with AI\n</h2>\n\n<p>Integrating AI technologies into the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> takes automated farming to a new level. AI algorithms can analyze field topography, soil conditions, and crop data to continuously optimize routes and adjust machine behavior for maximum productivity.</p>\n\n<p>Some key AI-driven benefits include:</p>\n\n<ul>\n<li>\n<strong>Adaptive Path Planning:</strong> AI dynamically recalculates steering paths in real time, avoiding obstacles and minimizing soil compaction.</li>\n<li>\n<strong>Predictive Maintenance:</strong> Sensor data combined with machine learning predicts component wear and alerts farmers before failures occur.</li>\n<li>\n<strong>Variable Rate Application:</strong> AI determines the precise amount of fertilizer or pesticides needed, reducing waste and environmental impact.</li>\n</ul>\n\n<p>By emphasizing these AI capabilities, dealers can demonstrate how the system evolves beyond automation into intelligent decision-making.</p>\n\n<h2>\n  \n  \n  Why AI-Enhanced GNSS Systems Matter to Farmers\n</h2>\n\n<p>Farmers face tight margins and unpredictable weather patterns. The ability to make data-driven decisions while reducing manual labor can mean the difference between profit and loss. AI-enabled <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering Systems</a> offer:</p>\n\n<ul>\n<li>\n<strong>Increased operational efficiency:</strong> Less overlap and downtime save fuel and reduce costs.</li>\n<li>\n<strong>Improved crop yields:</strong> Precise navigation combined with AI-guided variable inputs leads to healthier crops.</li>\n<li>\n<strong>Lower environmental footprint:</strong> Optimized machine operation limits soil degradation and chemical overuse.</li>\n</ul>\n\n<p>As a dealer, positioning these benefits alongside product specifications builds trust and drives purchase decisions.</p>\n\n<h2>\n  \n  \n  Positioning Yourself as a Trusted Advisor\n</h2>\n\n<p>Dealers who understand both GNSS technology and its AI enhancements become indispensable partners for farmers. Providing comprehensive demos, troubleshooting support, and updates about software enhancements reinforces client relationships. Additionally, offering tailored recommendations‚Äîsuch as combining the GNSS system with AI-powered farm management software‚Äîshows holistic expertise.</p>\n\n\n\n\n<p>As agricultural landscapes grow more complex, how will you leverage AI-powered solutions like the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> to empower your customers toward smarter, more sustainable farming? Share your thoughts or experiences below‚Äîlet‚Äôs drive innovation together!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Collaborative Optimization of the GNSS Auto-Steering System with RTK Networks","url":"https://dev.to/beidou/collaborative-optimization-of-the-gnss-auto-steering-system-with-rtk-networks-32c5","date":1750924331,"author":"zly","guid":171943,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fgh5p7zf58fk0bpwrfvrm.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fgh5p7zf58fk0bpwrfvrm.jpg\" alt=\"Collaborative Optimization of the GNSS Auto-Steering System with RTK Networks\" width=\"800\" height=\"600\"></a></p>\n\n<h1>\n  \n  \n  Collaborative Optimization of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> with RTK Networks\n</h1>\n\n<p>Precision agriculture has transformed modern farming, elevating productivity and efficiency to unprecedented levels. At the core of this revolution lies the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>, a sophisticated technology that automates vehicle navigation on agricultural fields with centimeter-level accuracy. For dealers of agricultural navigation systems, understanding how to collaboratively optimize this system with RTK networks unlocks new opportunities for enhanced performance and customer satisfaction.</p>\n\n<h2>\n  \n  \n  Understanding the GNSS Auto-Steering System\n</h2>\n\n<p>The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> uses satellite signals from Global Navigation Satellite Systems (GNSS) combined with real-time corrections from RTK (Real-Time Kinematic) networks. This integration ensures unparalleled accuracy in guiding tractors and other machinery along precise paths. Key benefits include reducing overlap in field coverage, minimizing soil compaction, lowering fuel usage, and improving crop yields.</p>\n\n<p>Designed with modular sensors and intelligent algorithms, the system can adapt to various terrains and farming operations. It processes multi-frequency GNSS data and utilizes inertial measurement units (IMUs) to maintain stable positioning, even under signal interference or partial obstruction ‚Äì a critical feature for maintaining efficiency in complex field environments.</p>\n\n<h2>\n  \n  \n  The Role of RTK Networks in Precision\n</h2>\n\n<p>RTK networks provide real-time correction data that refines the raw GNSS signals. This correction enhances positional accuracy from meter-level down to centimeter-level precision. These networks are typically composed of a series of base stations strategically located throughout farming regions, transmitting correction data via mobile or radio communication.</p>\n\n<p>For high-value agricultural tasks such as planting, spraying, and harvesting, this level of accuracy reduces overlaps and gaps in field coverage, saving resources and time. Dealers should emphasize the importance of reliable RTK connectivity when presenting GNSS auto-steering solutions, as consistent network availability directly impacts system performance.</p>\n\n<h2>\n  \n  \n  Collaborative Optimization Strategies for Dealers\n</h2>\n\n<p>Optimization isn't a one-time setup‚Äîit‚Äôs a collaborative process involving the GNSS system, RTK networks, and end-users. Dealers can play a vital role by:</p>\n\n<ul>\n<li>\n<strong>Customizing System Configurations</strong> to fit specific crop types, terrain, and operational workflows. Tailoring parameters in the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> ensures maximal alignment with farmers‚Äô needs.</li>\n<li>\n<strong>Ensuring RTK Network Compatibility</strong> by supporting various communication protocols such as NTRIP over cellular or radio. Advising customers on optimal network providers improves data reliability.</li>\n<li>\n<strong>Offering Ongoing Calibration and Support</strong>, including sensor alignments and software updates. This helps prevent drift and maintain centimeter-level accuracy over time.</li>\n<li>\n<strong>Providing Training</strong> on how to interpret system diagnostics and troubleshoot common connectivity issues, empowering farmers to maximize uptime and precision.</li>\n</ul>\n\n<h2>\n  \n  \n  Technical Highlights to Communicate\n</h2>\n\n<p>When engaging with customers, highlight these core technical details of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>:</p>\n\n<ul>\n<li>\n<strong>Positioning Accuracy:</strong> Achieves ¬±2cm accuracy with RTK corrections and multi-frequency GNSS receivers.</li>\n<li>\n<strong>Compatibility:</strong> Supports GPS, GLONASS, BeiDou, and Galileo constellations.</li>\n<li>\n<strong>Robust Communication:</strong> Firmware supports NTRIP, radio modems, and 4G cellular for versatile RTK data delivery.</li>\n<li>\n<strong>Ease of Integration:</strong> Interfaces with popular tractor CAN bus systems for seamless machine control.</li>\n<li>\n<strong>Environmental Durability:</strong> IP67-rated hardware ensures reliability in harsh agricultural environments.</li>\n</ul>\n\n<h2>\n  \n  \n  Why Dealers Must Embrace Collaborative Optimization\n</h2>\n\n<p>As the agriculture industry moves toward fully autonomous and smart farming, dealers who invest effort into optimizing GNSS auto-steering systems with RTK network infrastructure will gain a crucial competitive edge. This collaborative approach ensures customers enjoy the highest levels of accuracy, efficiency, and operational uptime, ultimately translating into stronger dealer-client relationships and recurring revenue streams.</p>\n\n\n\n\n<p>Are you ready to elevate your agricultural navigation offerings by deepening your expertise in the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> and RTK networks? How are you currently supporting your customers in optimizing these systems? Share your experiences or questions below ‚Äî let‚Äôs innovate precision farming together.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A New Tool for Energy Saving and Emission Reduction‚ÄîGNSS Auto-Steering System Practice Report","url":"https://dev.to/beidou/a-new-tool-for-energy-saving-and-emission-reduction-gnss-auto-steering-system-practice-report-35bg","date":1750924325,"author":"zly","guid":171942,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fpycyetkivpvtin9av9qx.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fpycyetkivpvtin9av9qx.jpg\" alt=\"A New Tool for Energy Saving and Emission Reduction‚ÄîGNSS Auto-Steering System Practice Report\" width=\"800\" height=\"600\"></a></p>\n\n<h1>\n  \n  \n  A New Tool for Energy Saving and Emission Reduction‚ÄîGNSS Auto-Steering System Practice Report\n</h1>\n\n<p>In today‚Äôs agriculture landscape, efficiency and sustainability are no longer optional‚Äîthey‚Äôre essentials. For dealers of agricultural navigation systems, introducing cutting-edge technologies that enable energy saving and emission reduction is a pathway to future growth. One such breakthrough is the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>, a technology that significantly improves precision in field operations while minimizing fuel consumption and environmental impact.</p>\n\n<h2>\n  \n  \n  What Makes the GNSS Auto-Steering System a Game-Changer?\n</h2>\n\n<p>The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> uses Global Navigation Satellite System (GNSS) technology to automate steering in tractors and agricultural machinery. Unlike manual steering, this system provides centimeter-level accuracy in path following, ensuring optimal overlap and reduced operator fatigue.</p>\n\n<p>By enabling more precise control over vehicle movements, the system substantially decreases unnecessary fuel expenditures caused by overlapping passes or human error. Dealers can highlight this key benefit to farmers who want to reduce operational costs while minimizing their carbon footprint.</p>\n\n<h2>\n  \n  \n  Technical Highlights and Key Parameters\n</h2>\n\n<p>At the core of this auto-steering solution lies high-precision GNSS receivers compatible with multiple satellite constellations (GPS, GLONASS, BeiDou). This multi-constellation support ensures reliable positioning even in challenging environments such as hilly terrain or heavy canopy cover.</p>\n\n<p>Typical technical specs include:</p>\n\n<ul>\n<li>\n<strong>Positioning accuracy:</strong> Within 2‚Äì5 cm (RTK mode)</li>\n<li>\n<strong>Update rate:</strong> 10 Hz or higher, allowing real-time corrections</li>\n<li>\n<strong>Compatibility:</strong> Integration with popular tractor brands and various agricultural implements</li>\n<li>\n<strong>User interface:</strong> Intuitive touch-screen controls for easy calibration and operation</li>\n</ul>\n\n<p>These parameters translate into seamless field operations with reduced manual intervention and better resource management.</p>\n\n<h2>\n  \n  \n  Energy Saving Through Precision and Automation\n</h2>\n\n<p>Manual steering often leads to inefficient routes, unnecessary fuel usage, and overlap in field passes. The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> overcomes these by maintaining straight, optimal lines regardless of operator skill or fatigue.</p>\n\n<p>Fewer overlaps mean less fuel burned and reduced wear and tear on equipment ‚Äî directly impacting both expenses and emissions. This is particularly critical in large-scale farming, where small efficiencies compound into significant savings annually.</p>\n\n<p>Moreover, the system‚Äôs automation frees operators to focus on other critical tasks, enhancing overall productivity and reducing operational stress.</p>\n\n<h2>\n  \n  \n  Environmental Impact and Emission Reduction\n</h2>\n\n<p>Reducing fuel consumption inherently lowers greenhouse gas emissions. The precision guidance enabled by the auto-steering system supports sustainable farming practices by:</p>\n\n<ul>\n<li>Minimizing redundant field passes</li>\n<li>Enabling precise application of fertilizers and pesticides via coordinated equipment</li>\n<li>Reducing soil compaction and crop damage through consistent, controlled movements</li>\n</ul>\n\n<p>Dealers can position the product as a vital tool for eco-conscious farmers aiming to comply with environmental regulations or improve their sustainability credentials.</p>\n\n<h2>\n  \n  \n  How Dealers Can Leverage This Technology\n</h2>\n\n<p>As a dealer of agricultural navigation systems, introducing the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> to your product portfolio offers a competitive edge. Educate your clients on:</p>\n\n<ul>\n<li>The cost-saving advantages through fuel efficiency</li>\n<li>The environmental benefits that align with modern farming values</li>\n<li>The ease of adoption due to compatibility and user-friendly interfaces</li>\n</ul>\n\n<p>Providing demonstrations or trial opportunities can accelerate acceptance and build trust among farmers evaluating precision farming tools.</p>\n\n\n\n\n<p>The shift towards energy saving and emission reduction in agriculture is undeniable. The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> is more than a navigation aid‚Äîit‚Äôs a transformative solution that merges technology with sustainability. Are you ready to help your clients navigate this new era? </p>\n\n<p><strong>How do you see precision agriculture tools like GNSS auto-steering shaping the future of farming in your region? Share your thoughts and experiences below!</strong></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pioneering Agriculture 4.0: The GNSS Auto-Steering System Ecosystem","url":"https://dev.to/beidou/pioneering-agriculture-40-the-gnss-auto-steering-system-ecosystem-3fn2","date":1750924316,"author":"zly","guid":171941,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhbm28p5x68gbwt4atiw2.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhbm28p5x68gbwt4atiw2.jpg\" alt=\"Pioneering Agriculture 4.0: The GNSS Auto-Steering System Ecosystem\" width=\"800\" height=\"600\"></a></p>\n\n<h1>\n  \n  \n  Pioneering Agriculture 4.0: The GNSS Auto-Steering System Ecosystem\n</h1>\n\n<p>The agriculture industry is experiencing a seismic shift driven by smart technologies, and the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> is at the forefront of this transformation. For dealers of agricultural navigation systems, understanding this ecosystem is crucial. It not only highlights how technological advancements are reshaping farming but also presents new business opportunities in the precision agriculture market.</p>\n\n<h2>\n  \n  \n  What Is the GNSS Auto-Steering System?\n</h2>\n\n<p>At its core, the <strong>GNSS Auto-Steering System</strong> combines Global Navigation Satellite System (GNSS) signals with advanced steering algorithms to automate the guidance of agricultural machinery. This automation reduces operator fatigue, increases tractor efficiency, and ensures centimeter-level accuracy in field tasks.</p>\n\n<p>Unlike traditional GPS-based guidance, the GNSS Auto-Steering System uses correction signals such as RTK (Real-Time Kinematic) to improve positional accuracy to within 2-3 cm. This precision allows farmers to execute straight, overlapping-free passes, optimizing seed placement, fertilizer application, and pesticide spraying.</p>\n\n<h2>\n  \n  \n  Key Technical Features and Benefits\n</h2>\n\n<p>Dealers will appreciate some standout specifications that enhance system performance:</p>\n\n<ul>\n<li>\n<strong>High-Precision GNSS Module:</strong> Supports multi-constellation systems (GPS, GLONASS, BeiDou, Galileo) for uninterrupted satellite signals.</li>\n<li>\n<strong>Robust RTK Correction:</strong> Integral for real-time accuracy enabling consistent sub-decimeter positioning.</li>\n<li>\n<strong>Adaptive Steering Control:</strong> Works seamlessly with various tractor models, offering smooth command transfers and quick response to terrain challenges.</li>\n<li>\n<strong>User-Friendly Interface:</strong> Touchscreen control units with intuitive maps and customizable settings increase operator adoption.</li>\n</ul>\n\n<p>These features not only improve operational efficiency but also reduce input costs and environmental impact by minimizing overlaps and gaps during field operations.</p>\n\n<h2>\n  \n  \n  Why the GNSS Auto-Steering System Matters for Dealers\n</h2>\n\n<p>As agriculture moves towards Industry 4.0, dealers play a pivotal role linking innovative solutions to end-users. Offering the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> means providing customers with a tool that:</p>\n\n<ul>\n<li>\n<strong>Boosts Productivity:</strong> Automated steering enables longer working hours with precision, resulting in better yield outcomes.</li>\n<li>\n<strong>Simplifies Operation:</strong> Even less experienced operators can achieve consistent results, broadening the market scope.</li>\n<li>\n<strong>Enhances Equipment Value:</strong> Integrating smart technologies makes machinery more appealing, supporting upselling opportunities.</li>\n</ul>\n\n<p>Understanding these benefits allows dealers to better communicate product value, tailor demos, and provide comprehensive after-sales support.</p>\n\n<h2>\n  \n  \n  Integrating the System Into the Precision Agriculture Ecosystem\n</h2>\n\n<p>Beyond standalone functionality, the GNSS Auto-Steering System fits into a larger ecosystem of connected farm technologies. Dealers should highlight compatibility with:</p>\n\n<ul>\n<li>\n<strong>Yield Monitoring Systems</strong> to track output in real-time.</li>\n<li>\n<strong>Variable Rate Application Tools</strong> for site-specific input management.</li>\n<li>\n<strong>Farm Management Software</strong> for data-driven decision-making.</li>\n</ul>\n\n<p>This interconnected approach boosts operational insights, helping farmers optimize every aspect of their workflow.</p>\n\n\n\n\n<p>The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> is more than just a navigation tool‚Äîit‚Äôs a gateway to the future of smart farming. For dealers, embracing this ecosystem means equipping their customers with precision, efficiency, and innovation.</p>\n\n<p><strong>How are you preparing your dealership to meet the rising demand for Agriculture 4.0 solutions?</strong> Share your strategies or questions below and join the precision farming revolution.</p>\n\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Top Ten Innovative Features of the GNSS Auto-Steering System This Year","url":"https://dev.to/beidou/top-ten-innovative-features-of-the-gnss-auto-steering-system-this-year-55k7","date":1750924308,"author":"zly","guid":171940,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fi2g9fg0qo38zsatfjuda.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fi2g9fg0qo38zsatfjuda.jpg\" alt=\"Top Ten Innovative Features of the GNSS Auto-Steering System This Year\" width=\"800\" height=\"600\"></a></p>\n\n<h1>\n  \n  \n  Top Ten Innovative Features of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> This Year\n</h1>\n\n<p>In the competitive world of agricultural navigation, delivering precision and efficiency isn‚Äôt just an advantage‚Äîit‚Äôs a necessity. Dealers of agricultural navigation systems must stay ahead by understanding the latest breakthroughs that make products stand out. The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> has introduced several innovative features this year, redefining how farmers operate their machinery with greater accuracy and less fatigue.</p>\n\n<p>Let‚Äôs dive into the top ten features that make this system a game-changer for your clients and your business.</p>\n\n<h2>\n  \n  \n  1. Centimeter-Level Positioning Accuracy\n</h2>\n\n<p>At the core of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> lies unparalleled positioning precision. Utilizing advanced RTK (Real-Time Kinematic) technology, it delivers centimeter-level accuracy, ensuring that tractors follow exact paths without overlap or gaps. This accuracy translates to reduced input costs and maximized land use‚Äîkey selling points for dealers aiming to boost customer satisfaction.</p>\n\n<h2>\n  \n  \n  2. Seamless Multi-Constellation Support\n</h2>\n\n<p>The system supports multiple satellite constellations, including GPS, GLONASS, Galileo, and BeiDou. This enhances signal availability and stability, especially in challenging terrains or adverse weather. The expanded satellite support ensures uninterrupted guidance, minimizing downtime‚Äîa crucial feature for efficient farm operations.</p>\n\n<h2>\n  \n  \n  3. Intuitive Touchscreen Interface\n</h2>\n\n<p>A user-friendly 8-inch touchscreen provides operators with clear, real-time data. The interface‚Äôs simplicity reduces the learning curve and allows easy customization of steering paths and precision settings. Dealers can confidently demonstrate this aspect, highlighting how it empowers farmers to optimize their workflows quickly.</p>\n\n<h2>\n  \n  \n  4. Automatic Headland Turn Functionality\n</h2>\n\n<p>Turning at field edges often requires skill and time. The auto-steering system‚Äôs automatic headland turn function computes optimal paths for smooth maneuvering, reducing operator strain and improving turnaround efficiency. This feature is especially beneficial for large farms and hilly terrains, where manual control can be tricky.</p>\n\n<h2>\n  \n  \n  5. Real-Time Error Detection and Alerts\n</h2>\n\n<p>The system continuously monitors signal integrity and steering performance. If deviations or errors occur, it promptly alerts the operator to make corrections, preventing crop damage and operational errors. This proactive approach reduces risks and enhances productivity‚Äîvalues your customers will appreciate.</p>\n\n<h2>\n  \n  \n  6. Compatibility with Diverse Equipment\n</h2>\n\n<p>Designed with versatility in mind, the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> seamlessly integrates with various tractor brands and models. This broad compatibility simplifies dealers‚Äô installation process and expands market reach.</p>\n\n<h2>\n  \n  \n  7. Enhanced Signal Shielding for Harsh Environments\n</h2>\n\n<p>Agricultural machinery often operates in dusty, humid, or electrically noisy environments. The system boasts reinforced shielding technology to maintain signal integrity and device longevity, delivering reliable performance regardless of conditions.</p>\n\n<h2>\n  \n  \n  8. Software Update Over-the-Air (OTA)\n</h2>\n\n<p>Staying current with technological advancements is easier than ever with OTA updates. Dealers can assure customers that their systems will improve over time without complex manual installations‚Äîensuring consistent value and future-proofing.</p>\n\n<h2>\n  \n  \n  9. Energy-Efficient Design\n</h2>\n\n<p>A low power consumption profile means longer operation time without frequent battery swaps or draining vehicle power. This feature supports uninterrupted workdays and reduces maintenance hassles‚Äîanother compelling advantage to communicate effectively.</p>\n\n<h2>\n  \n  \n  10. Comprehensive Support and Training Resources\n</h2>\n\n<p>Final but not least, the manufacturer provides dealers with detailed manuals, training modules, and responsive technical support. These resources help you deliver seamless customer onboarding, increasing trust and satisfaction.</p>\n\n\n\n\n<h3>\n  \n  \n  Conclusion\n</h3>\n\n<p>The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> is more than just a navigation aid‚Äîit‚Äôs a precision agriculture enabler packed with cutting-edge technology that transforms farming operations. As a dealer, understanding and showcasing these top ten innovative features empowers you to address farmers' challenges efficiently, boost sales, and solidify long-term partnerships.</p>\n\n<p><strong>Are you ready to elevate your product offerings with the latest in GNSS technology?</strong> Explore how these innovations can meet your customers' evolving needs and drive agricultural success.</p>\n\n\n\n\n<p><em>For more detailed specifications and demo opportunities, connect with your regional reps or visit the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">official product page</a>.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Collaborative Optimization of the GNSS Auto-Steering System with RTK Networks","url":"https://dev.to/beidou/collaborative-optimization-of-the-gnss-auto-steering-system-with-rtk-networks-58kc","date":1750924295,"author":"zly","guid":171939,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fju1jqglxop6hd4ix1lwg.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fju1jqglxop6hd4ix1lwg.jpg\" alt=\"Collaborative Optimization of the GNSS Auto-Steering System with RTK Networks\" width=\"800\" height=\"600\"></a></p>\n\n<h1>\n  \n  \n  Collaborative Optimization of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> with RTK Networks: A Guide for Agricultural Navigation Dealers\n</h1>\n\n<p>Precision agriculture has transformed farming with technologies that deliver unmatched accuracy and efficiency. Among these innovations, the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> stands out as a critical solution for modern agricultural navigation. For dealers of agricultural navigation systems, understanding how to collaboratively optimize this system with Real-Time Kinematic (RTK) networks is key to offering superior performance and value to your clients.</p>\n\n<h2>\n  \n  \n  What is the GNSS Auto-Steering System?\n</h2>\n\n<p>The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> leverages satellite-based positioning to guide agricultural machinery with centimeter-level precision. By automating steering, it reduces operator fatigue and overlap, improving fuel efficiency and crop yields. High-precision GNSS receivers combined with intelligent control units form the backbone of these systems, enabling smooth path tracking and increased productivity.</p>\n\n<h2>\n  \n  \n  Why Integrate RTK Networks?\n</h2>\n\n<p>RTK technology enhances GNSS positioning by correcting satellite signal errors in real time. RTK networks broadcast fixed reference data via radio or internet, refining location accuracy to within 2‚Äì3 centimeters. For dealers, partnering RTK networks with the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> means offering clients reliability even in challenging environments like hilly terrain or near tree lines.</p>\n\n<h3>\n  \n  \n  Key Benefits of RTK-Enabled Auto-Steering Systems\n</h3>\n\n<ul>\n<li>\n<strong>Precision</strong>: RTK reduces GPS drift, which translates to fewer overlaps and missed areas during fieldwork.</li>\n<li>\n<strong>Consistency</strong>: Continuous correction signals ensure stable machine guidance throughout the day.</li>\n<li>\n<strong>Cost Savings</strong>: Less fuel consumption, optimized seed and fertilizer use, and lower labor costs.</li>\n</ul>\n\n<h2>\n  \n  \n  Collaborative Strategies for Dealers\n</h2>\n\n<p>To maximize the benefits of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> paired with RTK, dealers should:</p>\n\n<ol>\n<li>\n<strong>Leverage Local RTK Networks:</strong> Encourage farmers to subscribe to regional RTK services for continuous correction data, optimizing system reliability.</li>\n<li>\n<strong>Provide Comprehensive Training:</strong> Equip clients with knowledge on setting up RTK base stations, antenna placement, and troubleshooting common signal issues.</li>\n<li>\n<strong>Integrate with Vehicle Systems:</strong> Ensure auto-steering units are calibrated with vehicle hydraulic and control systems for seamless operation.</li>\n<li>\n<strong>Offer After-Sales Support:</strong> Real-time assistance can help farmers get the most out of their systems under varying field conditions.</li>\n</ol>\n\n<h2>\n  \n  \n  Technical Considerations\n</h2>\n\n<p>When recommending a <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>, highlight these specs critical for RTK integration:</p>\n\n<ul>\n<li>\n<strong>Multi-frequency GNSS Receiver:</strong> Supports GPS, GLONASS, BeiDou, or Galileo satellites for improved satellite availability.</li>\n<li>\n<strong>Correction Signal Compatibility:</strong> Ensure the system supports NTRIP protocols and standard RTK corrections.</li>\n<li>\n<strong>Low-Latency Data Processing:</strong> Essential for real-time steering adjustments and smooth machine control.</li>\n<li>\n<strong>Robust Anti-Interference Design:</strong> Minimizes signal degradation from machinery or external sources.</li>\n</ul>\n\n<h2>\n  \n  \n  The Road Ahead for Agricultural Dealers\n</h2>\n\n<p>The alliance between <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering Systems</a> and RTK networks is a game-changer in agricultural navigation. Dealers who embrace collaborative optimization strategies not only elevate their product offerings but also empower farmers with tools that enhance productivity and sustainability.</p>\n\n<p>Are you ready to upgrade your portfolio with RTK-optimized auto-steering solutions? Invest in building these capabilities‚Äîyour customers and crops will thank you. Share your experiences or questions below and let‚Äôs drive the future of precision agriculture together!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Smart Ag 4.0 Imperative: Farm Upgrades When Beidou+GPS+Galileo Converge","url":"https://dev.to/beidou/smart-ag-40-imperative-farm-upgrades-when-beidougpsgalileo-converge-5hg0","date":1750924285,"author":"zly","guid":171938,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fomgfmyzp5rt065mpgozm.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fomgfmyzp5rt065mpgozm.jpg\" alt=\"Smart Ag 4.0 Imperative: Farm Upgrades When Beidou+GPS+Galileo Converge\" width=\"800\" height=\"600\"></a></p>\n\n<h1>\n  \n  \n  Smart Ag 4.0 Imperative: Farm Upgrades When Beidou+GPS+Galileo Converge\n</h1>\n\n<p>In today‚Äôs rapidly evolving agricultural landscape, precision and efficiency are no longer luxuries‚Äîthey‚Äôre necessities. For dealers of agricultural navigation systems, understanding the transformative potential behind the <strong><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a></strong> powered by Beidou, GPS, and Galileo convergence is key to unlocking new growth opportunities. This synergy marks a pivotal upgrade in smart farming technology, boosting productivity, reducing overlaps, and ensuring cleaner fieldwork.</p>\n\n<h2>\n  \n  \n  Why Multi-Constellation GNSS Matters for Precision Farming\n</h2>\n\n<p>Traditional auto-steering systems rely heavily on a single satellite constellation like GPS. However, integrating multiple systems‚ÄîBeidou, GPS, and Galileo‚Äîdramatically enhances positioning precision and reliability. This multi-constellation approach means fewer signal dropouts, increased accuracy down to centimeter levels, and resilience against interference.</p>\n\n<p>For agricultural dealers, this translates into offering customers robust <strong><a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering Systems</a></strong> that stand strong under diverse weather conditions and complex terrains. Farmers experience seamless guidance and improved operational efficiency‚Äîcritical for tasks demanding high precision such as planting, fertilizing, and harvesting.</p>\n\n<h2>\n  \n  \n  Technical Edge: Key Features of GNSS Auto-Steering Systems\n</h2>\n\n<p>Modern systems leverage advanced RTK (Real-Time Kinematic) correction with support for multi-frequency bands from each satellite constellation. This fusion reduces latency and errors inherent in single-source GNSS devices.</p>\n\n<p>Some standout technical parameters include:</p>\n\n<ul>\n<li>\n<strong>Centimeter-level accuracy</strong> with multi-frequency Beidou B1, B2, GPS L1, L2, and Galileo E1 bands\n</li>\n<li>\n<strong>Fast initializations</strong> typically under 10 seconds improving field uptime\n</li>\n<li>\n<strong>Multi-path mitigation technology</strong> for reliable navigation near obstacles\n</li>\n<li>\n<strong>Seamless switching</strong> between satellite constellations to maintain signal integrity\n</li>\n<li>Compatibility with widely used farm management software for better data integration</li>\n</ul>\n\n<p>These features empower dealers to present tech-forward solutions that meet stringent precision agriculture demands, enhancing user trust and fostering business growth.</p>\n\n<h2>\n  \n  \n  The Dealer‚Äôs Role: Empowering Farmers with Smart Ag 4.0 Solutions\n</h2>\n\n<p>As farms scale up digital transformation efforts, dealers must focus on educating clients about the tangible benefits of upgrading to GNSS-powered auto-steering. Highlight how the convergence of Beidou, GPS, and Galileo:</p>\n\n<ul>\n<li>Cuts input costs by reducing overlap in spraying or fertilization\n</li>\n<li>Optimizes machine routes and fuel consumption\n</li>\n<li>Enables multi-tasking with automated path corrections\n</li>\n<li>Facilitates compliance with increasingly strict sustainability goals</li>\n</ul>\n\n<p>Positioning these auto-steering systems as essentials in the transition towards Smart Ag 4.0 elevates dealers from suppliers to trusted innovation partners.</p>\n\n\n\n\n<p>The convergence of Beidou, GPS, and Galileo constellations defines a new era for GNSS auto-steering‚Äîone that delivers higher precision, reliability, and operational efficiency. As a dealer, capitalizing on this multi-constellation synergy is not just an upgrade; it‚Äôs your gateway to leading farm modernization.</p>\n\n<p>Are you ready to bring these next-level <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering Systems</a> to your customers and drive the future of smart agriculture? Share your thoughts or experiences with multi-constellation navigation ‚Äì let‚Äôs elevate precision farming together.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dust- and Water-Resistance Tests of the GNSS Auto-Steering System in Harsh Environments","url":"https://dev.to/beidou/dust-and-water-resistance-tests-of-the-gnss-auto-steering-system-in-harsh-environments-5535","date":1750924239,"author":"zly","guid":171937,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F78zqo3v18zqn2fe9dazo.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F78zqo3v18zqn2fe9dazo.jpg\" alt=\"Dust- and Water-Resistance Tests of the GNSS Auto-Steering System in Harsh Environments\" width=\"800\" height=\"600\"></a></p>\n\n<h1>\n  \n  \n  Dust- and Water-Resistance Tests of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>: Ensuring Reliability in Harsh Agricultural Environments\n</h1>\n\n<p>Precision agriculture is transforming how farmers optimize yields and reduce labor ‚Äî and at the heart of this revolution lies the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>. For dealers of agricultural navigation systems, understanding how these advanced systems perform under challenging conditions is critical. This post explores the rigorous dust- and water-resistance tests that ensure the system‚Äôs durability and reliability in real-world farming environments.</p>\n\n<h2>\n  \n  \n  Why Dust and Water Resistance Matter in GNSS Auto-Steering\n</h2>\n\n<p>Agricultural fields are often an extreme working environment. Operating in dusty, muddy, and wet conditions is a daily norm ‚Äî not an exception. Dust can block sensors and degrade electronic components, while water exposure from rain or irrigation can cause system failures if not properly sealed.</p>\n\n<p>The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> is designed to withstand these harsh elements, guaranteeing uninterrupted navigation and accurate guidance, crucial for automated machinery in precision farming.</p>\n\n<h2>\n  \n  \n  Rigorous Testing Protocols for Dust Resistance\n</h2>\n\n<p>To validate dust resistance, the system undergoes standardized testing following IP6x (Ingress Protection standard) guidelines. This means exposure to fine dust particles, replicating the conditions of a dry, dusty field during plowing or harvesting.</p>\n\n<p>During tests:</p>\n\n<ul>\n<li>The hardware casing is sealed to prevent dust ingress.</li>\n<li>Internal components, including the GNSS receiver and IMU (Inertial Measurement Unit), are monitored for signal integrity.</li>\n<li>The system maintains its performance without signal dropout or mechanical wear.</li>\n</ul>\n\n<p>The result? Dealers can trust that the auto-steering system will operate flawlessly even amid thick dust storms, preserving signal accuracy essential for centimeter-level precision.</p>\n\n<h2>\n  \n  \n  Water Resistance: Protecting Against Rain and Splash\n</h2>\n\n<p>Water resistance tests push the system to meet IPx7 standards, involving simulated heavy rain and water splashes typical of wet agricultural environments.</p>\n\n<p>Key highlights include:</p>\n\n<ul>\n<li>Waterproof connectors and fully sealed casing prevent water ingress.</li>\n<li>Critical electronics withstand immersion up to 1 meter for 30 minutes without malfunction.</li>\n<li>The system‚Äôs display and control units remain fully operational, enabling farmers to maintain steering accuracy regardless of weather.</li>\n</ul>\n\n<p>These features reduce downtime and maintenance costs, empowering dealers to offer a robust solution suited for all climates.</p>\n\n<h2>\n  \n  \n  Technical Parameters Reinforcing Durability\n</h2>\n\n<p>The <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> integrates industrial-grade materials and protective coatings, contributing to a rugged design with a shock rating of up to 25G and operating temperature ranges from -40¬∞C to +85¬∞C. This ensures continuous performance from freezing winters to scorching summers.</p>\n\n<p>Additionally, the system employs advanced antenna technology that resists signal degradation caused by environmental interference, further enhancing reliability.</p>\n\n<h2>\n  \n  \n  What This Means for Dealers and End Users\n</h2>\n\n<p>Understanding these dust- and water-resistance capabilities empowers dealers to confidently recommend the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> as a premium choice for customers facing extreme farming conditions.</p>\n\n<p>In a market where operational uptime and precision matter most, offering a navigation system validated by stringent environmental testing is a strong competitive advantage.</p>\n\n\n\n\n<p>Are you ready to enhance your agricultural navigation portfolio with solutions built to last? Explore how the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> can deliver unmatched durability and precise guidance in the toughest environments. How have environmental challenges impacted your customers‚Äô equipment choices? Share your experiences below!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Top Ten Innovative Features of the GNSS Auto-Steering System This Year","url":"https://dev.to/beidou/top-ten-innovative-features-of-the-gnss-auto-steering-system-this-year-5cha","date":1750924232,"author":"zly","guid":171936,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fubmdfu9bfr6vmph2m3fs.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fubmdfu9bfr6vmph2m3fs.jpg\" alt=\"Top Ten Innovative Features of the GNSS Auto-Steering System This Year\" width=\"800\" height=\"600\"></a></p>\n\n<h1>\n  \n  \n  Top Ten Innovative Features of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> This Year\n</h1>\n\n<p>In the fast-evolving landscape of precision agriculture, staying ahead means embracing cutting-edge technology that enhances efficiency and accuracy. For dealers of agricultural navigation systems, understanding the <strong>GNSS Auto-Steering System</strong> and its latest innovations is crucial to offering farmers the best tools for optimizing their operations.</p>\n\n<p>This year, the GNSS Auto-Steering System has introduced a powerhouse of features that make fieldwork smarter, faster, and more cost-effective. Let's explore the top ten innovations redefining precision farming navigation.</p>\n\n<h2>\n  \n  \n  1. Centimeter-Level Positioning Accuracy\n</h2>\n\n<p>One of the biggest advancements lies in its enhanced positioning accuracy. Utilizing multi-constellation GNSS signals, the system achieves centimeter-level precision ‚Äî essential for tasks like seeding, spraying, and fertilizing where every centimeter counts.</p>\n\n<h2>\n  \n  \n  2. Real-Time Kinematic (RTK) Correction Integration\n</h2>\n\n<p>The system integrates RTK correction seamlessly, minimizing signal delays and errors. This feature ensures consistent accuracy even in challenging environments with signal obstructions, enabling farmers to trust their machinery in every field condition.</p>\n\n<h2>\n  \n  \n  3. Automated Steering Control with Reduced Overlaps\n</h2>\n\n<p>The GNSS Auto-Steering System now offers highly responsive control algorithms that minimize overlaps in field passes. Reduced overlaps mean less seed, fertilizer, and pesticide waste, directly impacting operating costs and environmental sustainability.</p>\n\n<h2>\n  \n  \n  4. User-Friendly Touchscreen Interface\n</h2>\n\n<p>An upgraded touchscreen interface makes operation intuitive for any user. Clear menus, customizable views, and quick-access shortcuts speed up setup times and reduce operator fatigue, enabling dealers to market a system that appeals to both novices and experts.</p>\n\n<h2>\n  \n  \n  5. Wide Compatibility Across Equipment Brands\n</h2>\n\n<p>Recognizing a diverse market, the system supports integration with major tractor brands and implement types. This flexibility allows dealers to serve a broader client base without being confined to one manufacturer ecosystem.</p>\n\n<h2>\n  \n  \n  6. Advanced Sensor Fusion Technology\n</h2>\n\n<p>Beyond GNSS signals, the system fuses input from gyroscopes, accelerometers, and wheel sensors. This fusion delivers better responsiveness and smooth steering, particularly on uneven terrain or slopes, stabilizing machine control in real-world conditions.</p>\n\n<h2>\n  \n  \n  7. Remote Diagnostics and Firmware Updates\n</h2>\n\n<p>Dealers can appreciate the remote monitoring capability, which facilitates quick diagnostics, troubleshooting, and firmware updates without the need for on-site visits. This feature helps maintain system reliability and reduces downtime for end users.</p>\n\n<h2>\n  \n  \n  8. Multi-Driver Profiles and Data Logging\n</h2>\n\n<p>The ability to store multiple driver profiles and detailed operation logs helps farms with multiple operators keep consistent performance and easily track field activities ‚Äî a powerful tool for operational auditing and improving future plans.</p>\n\n<h2>\n  \n  \n  9. Integration with Precision Agriculture Platforms\n</h2>\n\n<p>The GNSS Auto-Steering System connects smoothly with leading farm management software and data platforms. This interoperability ensures that collected positional data seamlessly integrates into broader decision-making frameworks, boosting productivity insights.</p>\n\n<h2>\n  \n  \n  10. Enhanced Environmental Resistance\n</h2>\n\n<p>Designed for harsh agricultural environments, the system boasts IP67-rated water and dust resistance, along with robust shockproof construction. This durability ensures long-term reliable operation even in the toughest field conditions.</p>\n\n\n\n\n<p>For dealers of agricultural navigation systems, presenting the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> with these innovations highlights its practical value to growers focusing on efficiency, cost savings, and sustainable farming.</p>\n\n<p>What feature do you think will drive the most impact for your customers this season? Share your thoughts or reach out to explore how this system fits your dealership‚Äôs portfolio.</p>\n\n\n\n\n<p><em>Empower farms with precision that pays ‚Äì the future of agriculture is smart steering.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why Farms Worldwide Are Adopting the GNSS Auto-Steering System","url":"https://dev.to/beidou/why-farms-worldwide-are-adopting-the-gnss-auto-steering-system-e2h","date":1750924225,"author":"zly","guid":171935,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fahg9ojgm71i8z2ol4d2d.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fahg9ojgm71i8z2ol4d2d.jpg\" alt=\"Why Farms Worldwide Are Adopting the GNSS Auto-Steering System\" width=\"800\" height=\"600\"></a># Why Farms Worldwide Are Adopting the GNSS Auto-Steering System</p>\n\n<p>Precision agriculture is rapidly transforming farming practices across the globe. Among the innovations driving this evolution is the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>, a technology that empowers farmers to increase efficiency, reduce overlap, and improve crop yields. For dealers of agricultural navigation systems, understanding why farms are embracing this tool is key to meeting market demands and expanding business opportunities.</p>\n\n<h2>\n  \n  \n  What Is a GNSS Auto-Steering System?\n</h2>\n\n<p>A GNSS (Global Navigation Satellite System) Auto-Steering System utilizes satellite signals to guide agricultural machinery with centimeter-level accuracy. Unlike manual steering, this system automatically controls tractors and combines, ensuring precise paths without human error. This reduces operator fatigue and allows for longer working hours, especially in challenging conditions like low visibility or uneven terrain.</p>\n\n<p>Key features typically include:</p>\n\n<ul>\n<li>RTK (Real-Time Kinematic) positioning delivering accuracy within 2-5 cm</li>\n<li>Seamless integration with existing machinery</li>\n<li>User-friendly interfaces with automatic path correction</li>\n</ul>\n\n<p>These technical strengths make the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> an indispensable tool for modern farms aiming to optimize resources and time.</p>\n\n<h2>\n  \n  \n  The Benefits Driving Global Adoption\n</h2>\n\n<h3>\n  \n  \n  Increased Efficiency and Productivity\n</h3>\n\n<p>One of the primary reasons farms are switching to GNSS auto-steering is the significant reduction of overlap and gaps in coverage during field operations. This leads to:</p>\n\n<ul>\n<li>Lower fuel consumption</li>\n<li>Reduced seed and fertilizer waste</li>\n<li>Consistent field work, unhampered by operator fatigue</li>\n</ul>\n\n<p>In many large-scale farms, the ability to maintain straight, repeatable paths translates directly to higher yields and better land use.</p>\n\n<h3>\n  \n  \n  Cost Savings and Resource Optimization\n</h3>\n\n<p>The precision offered by these systems allows farms to use inputs such as fertilizers and pesticides more judiciously. Dealers should emphasize how clients can expect:</p>\n\n<ul>\n<li>Decreased chemical runoff due to precise application</li>\n<li>Lower operational costs from fewer passes over the field</li>\n<li>Extended equipment lifespan by minimizing unnecessary wear</li>\n</ul>\n\n<h3>\n  \n  \n  Easy Integration and Scalability\n</h3>\n\n<p>Modern GNSS auto-steering solutions are designed to be compatible with a variety of agricultural vehicles and implements. This adaptability:</p>\n\n<ul>\n<li>Facilitates upgrade paths for older equipment</li>\n<li>Supports farms diversifying crops or scaling operations</li>\n<li>Simplifies installation and reduces downtime</li>\n</ul>\n\n<h2>\n  \n  \n  What Dealers Should Highlight to Customers\n</h2>\n\n<p>Dealers play a critical role in demonstrating the advantages of the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a>. Sharing product knowledge such as:</p>\n\n<ul>\n<li>Real-Time Kinematic (RTK) base station compatibility</li>\n<li>Auto-guidance modes available (straight, curved, contour)</li>\n<li>How the system handles different satellite constellations (GPS, GLONASS, BeiDou)</li>\n</ul>\n\n<p>can influence buying decisions significantly.</p>\n\n<p>Additionally, dealers can emphasize post-sale support including system calibration, software updates, and user training to build confidence and foster long-term client relationships.</p>\n\n<h2>\n  \n  \n  Conclusion: Meeting the Future of Farming with GNSS Auto-Steering\n</h2>\n\n<p>The shift toward precision agriculture is inevitable, and the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> stands at the forefront of this change. For dealers of agricultural navigation systems, positioning these solutions effectively means aligning with farmers‚Äô evolving needs for accuracy, efficiency, and sustainability.</p>\n\n<p>Is your dealership ready to capitalize on this growing trend by offering cutting-edge GNSS auto-steering solutions that truly transform farm operations?</p>\n\n\n\n\n<p><em>Explore more about how the <a href=\"https://en.hi-target.com.cn/products/Precision_Agriculture/\" rel=\"noopener noreferrer\">GNSS Auto-Steering System</a> can revolutionize your agricultural offerings and empower your customers to farm smarter.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üßæ KY Invoice Generator ‚Äì Simple Invoice Maker for Freelancers & Small Businesses","url":"https://dev.to/krishdevninja/ky-invoice-generator-simple-invoice-maker-for-freelancers-small-businesses-32eh","date":1750920813,"author":"Krishnamohan Yagneswaran","guid":171900,"unread":true,"content":"<p>Create clean, professional invoices in seconds ‚Äî no internet required.<br>\nWhether you're a freelancer, small business owner, or indie creator, KY Invoice Generator helps you save time and look professional when billing clients.</p>\n\n<p>üöÄ Why I Built This<br>\nAs a solo developer, I needed a quick and offline way to generate invoices without relying on clunky web tools or subscription-based platforms.<br>\nThat‚Äôs why I built KY Invoice Generator ‚Äî a lightweight desktop app that works right out of the box, without needing an internet connection.</p>\n\n<p>‚ú® Features<br>\nüë§ Add customer and item details easily</p>\n\n<p>üí∞ Choose your own currency symbol</p>\n\n<p>üñºÔ∏è Upload your logo for custom branding</p>\n\n<p>üìÑ Print-ready PDF invoice generation</p>\n\n<p>üíª Fully offline ‚Äî works without internet</p>\n\n<p>üîí Privacy-respecting ‚Äî no tracking or data collection</p>\n\n<p>üß† Built by Krishnamohan Yagneswaran, indie developer</p>\n\n<p>üì¶ What‚Äôs Included?<br>\n‚úÖ KY Invoice Generator App (.exe for Windows)</p>\n\n<p>‚úÖ Instructions TXT</p>\n\n<p>‚úÖ Terms &amp; Conditions PDF</p>\n\n<p>No installations. No bloat. Just open and use.</p>\n\n<p>üíµ Pricing<br>\nOne-time payment only<br>\nNo subscriptions. No hidden fees. Yours forever.</p>\n\n<p>üëâ Get it now on <a href=\"https://krishnamohany.gumroad.com/l/pcvfo\" rel=\"noopener noreferrer\">Gumroad</a> (replace with your link)</p>\n\n<p>üõ°Ô∏è Antivirus Note<br>\nThis app is packaged using cx_Freeze (Python-based). As with many unsigned .exe apps, your antivirus might show a false-positive warning.</p>\n\n<p>üîê Rest assured:<br>\nNo malware or spyware</p>\n\n<p>No internet access</p>\n\n<p>No ads or background activity</p>\n\n<p>If flagged, you can safely allow the file in your antivirus.<br>\nThis is a common issue with custom tools from solo developers.</p>\n\n<p>üîí Terms of Use<br>\nBy using this app, you agree to the terms outlined in the Terms &amp; Conditions PDF.</p>\n\n<p>The developer is not responsible for misuse or data loss</p>\n\n<p>This is a non-refundable one-time purchase</p>\n\n<p>No personal data is collected</p>\n\n<p>üë®‚Äçüíª About the Creator<br>\nI'm Krishnamohan Yagneswaran, an indie developer creating niche productivity tools for creators, freelancers, and small business owners.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 5/100: Working with Strings ‚Äî Basics to Formatting","url":"https://dev.to/therahul_gupta/day-5100-working-with-strings-basics-to-formatting-2kkn","date":1750917923,"author":"Rahul Gupta","guid":171899,"unread":true,"content":"<p>Welcome to <strong>Day 5</strong> of the <strong>100 Days of Python</strong> series!<br>\nToday we‚Äôre diving deep into one of the most commonly used data types in Python: <strong>strings</strong>.</p>\n\n<p>Whether you‚Äôre building a chatbot, scraping websites, or working with data ‚Äî you'll be using strings all the time. So let‚Äôs master the basics and learn how to format and manipulate strings effectively.</p>\n\n\n<h2>\n  \n  \n  üì¶ What You'll Learn Today\n</h2>\n\n<ul>\n<li>What strings are and how to define them</li>\n<li>String indexing and slicing</li>\n<li>Common string methods</li>\n<li>String concatenation and repetition</li>\n<li>How to format strings cleanly</li>\n</ul>\n\n\n<h2>\n  \n  \n  üî§ What Is a String?\n</h2>\n\n<p>In Python, a <strong>string</strong> is a sequence of characters surrounded by quotes.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Alice</span><span class=\"sh\">\"</span>\n<span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Hello, world!</span><span class=\"sh\">'</span>\n</code></pre>\n\n</div>\n\n\n\n<p>You can use either <strong>single (' ')</strong> or <strong>double (\" \")</strong> quotes.</p>\n\n\n\n\n<h2>\n  \n  \n  üß± String Indexing and Slicing\n</h2>\n\n<h3>\n  \n  \n  Indexing:\n</h3>\n\n<p>Each character in a string has an index number:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Python</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>  <span class=\"c1\"># P\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>  <span class=\"c1\"># n\n</span></code></pre>\n\n</div>\n\n\n\n<p>Python uses <strong>zero-based indexing</strong>, so the first character is at position <code>0</code>.</p>\n\n<h3>\n  \n  \n  Slicing:\n</h3>\n\n<p>You can extract parts of strings using slicing:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">])</span>  <span class=\"c1\"># Pyt\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:])</span>   <span class=\"c1\"># thon\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>   <span class=\"c1\"># n (last character)\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üîÅ String Concatenation and Repetition\n</h2>\n\n<h3>\n  \n  \n  Concatenation:\n</h3>\n\n<p>Use <code>+</code> to join strings:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Good</span><span class=\"sh\">\"</span>\n<span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Morning</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">first</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\"> </span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">second</span><span class=\"p\">)</span>  <span class=\"c1\"># Good Morning\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Repetition:\n</h3>\n\n<p>Use <code>*</code> to repeat a string:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Ha</span><span class=\"sh\">\"</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># HaHaHa\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üßΩ Common String Methods\n</h2>\n\n<p>Python strings come with lots of built-in methods:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">  Hello, Python!  </span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">())</span>       <span class=\"c1\"># Remove whitespace: \"Hello, Python!\"\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">())</span>       <span class=\"c1\"># Convert to lowercase\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">())</span>       <span class=\"c1\"># Convert to uppercase\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Python</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">World</span><span class=\"sh\">\"</span><span class=\"p\">))</span>  <span class=\"c1\"># Replace text\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Python</span><span class=\"sh\">\"</span><span class=\"p\">))</span>  <span class=\"c1\"># Find substring index\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Some Useful String Methods:\n</h3>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.strip()</code></td>\n<td>Removes leading/trailing whitespace</td>\n</tr>\n<tr>\n<td><code>.lower()</code></td>\n<td>Converts to lowercase</td>\n</tr>\n<tr>\n<td><code>.upper()</code></td>\n<td>Converts to uppercase</td>\n</tr>\n<tr>\n<td><code>.replace()</code></td>\n<td>Replaces one substring with another</td>\n</tr>\n<tr>\n<td><code>.find()</code></td>\n<td>Finds the first index of a substring</td>\n</tr>\n<tr>\n<td><code>.split()</code></td>\n<td>Splits string into a list</td>\n</tr>\n<tr>\n<td><code>.join()</code></td>\n<td>Joins list into a string</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n<h2>\n  \n  \n  üß† String Formatting\n</h2>\n\n<p>Let‚Äôs say you want to include variables in a sentence. Here are 3 ways to format strings:</p>\n\n<h3>\n  \n  \n  1Ô∏è‚É£ Concatenation (not ideal):\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Alice</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hello </span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  2Ô∏è‚É£ <code>str.format()</code>:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hello, {}!</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  3Ô∏è‚É£ f-Strings (Best Practice in Python 3.6+):\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Hello, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>f-strings are readable, fast, and the most modern way to format strings.</p>\n\n<p>You can even do expressions inside them:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">25</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">In 5 years, you‚Äôll be </span><span class=\"si\">{</span><span class=\"n\">age</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"si\">}</span><span class=\"s\"> years old.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üìå Bonus: Multiline Strings\n</h2>\n\n<p>Use triple quotes for multiline strings:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">Hello,\nThis is a multi-line\nstring in Python.</span><span class=\"sh\">\"\"\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üöÄ Recap\n</h2>\n\n<p>Today you learned:</p>\n\n<ul>\n<li>How to define, access, and slice strings</li>\n<li>How to join and repeat strings</li>\n<li>Common string methods</li>\n<li>Best practices for string formatting using f-strings</li>\n</ul>\n\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Best Web Development Company for Custom Digital Solutions","url":"https://dev.to/thecodetechnologies/best-web-development-company-for-custom-digital-solutions-3g63","date":1750915777,"author":"The Code Technologies","guid":171869,"unread":true,"content":"<p>Looking to elevate your online presence with a high-performing, custom-built website? Partner with The Code Technologies, the <a href=\"https://thecodetechnologies.com/web-development/\" rel=\"noopener noreferrer\"><strong>best web development company in Mohali</strong></a>, known for delivering innovative and reliable solutions tailored to your business goals.</p>\n\n<p>As a leading web development agency in Mohali, we specialize in end-to-end digital transformation through modern, scalable, and user-centric websites. Whether you're a startup, SME, or enterprise, our web development services in Mohali are designed to deliver maximum impact with minimal complexity.</p>\n\n<p><strong>Here‚Äôs what makes us the best website development company in Mohali:</strong></p>\n\n<p><strong>Custom Website Development</strong><br>\nEvery brand is unique‚Äîand your website should be too. We build fully customized, responsive websites that reflect your brand identity and serve your specific business needs.</p>\n\n<p><strong>E-commerce Solutions</strong><br>\nBoost your online sales with dynamic e-commerce platforms built on Shopify, WooCommerce, or custom solutions. We create intuitive shopping experiences that convert visitors into loyal customers.</p>\n\n<p><strong>Content Management Systems (CMS)</strong><br>\nEasily manage your content with flexible CMS solutions like WordPress, Drupal, or custom-built platforms. We empower you with control and efficiency.</p>\n\n<p><strong>Web Application Development</strong><br>\nLooking to build complex web apps? We design and develop scalable web applications that are secure, performance-optimized, and tailored to your users.</p>\n\n<p><strong>API Integration</strong><br>\nWe connect your site to essential third-party platforms‚ÄîCRMs, payment gateways, social tools, or analytics‚Äîusing secure and seamless API integration.</p>\n\n<p><strong>Maintenance and Support</strong><br>\nOur relationship doesn‚Äôt end at launch. We provide continuous maintenance, updates, and tech support to ensure your website runs smoothly at all times.</p>\n\n<p><strong><a href=\"https://thecodetechnologies.com/\" rel=\"noopener noreferrer\">The Code Technologies</a></strong> stands apart as the website development company in Mohali that businesses trust for quality, transparency, and results. With a proven track record of delivering high-performing websites across various industries, we‚Äôre proud to be recognized as a top website development company Mohali has to offer.</p>\n\n<p>Whether you need a simple landing page or a robust enterprise-grade solution, our team of experts is here to bring your vision to life. Choose the best web development company in Mohali and take your digital presence to the next level.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How I Mapped the Entire City of Chicago Using Python","url":"https://dev.to/neil_brown/how-i-mapped-the-entire-city-of-chicago-using-python-4co2","date":1750913178,"author":"Neil Brown","guid":171845,"unread":true,"content":"<p>Ever wondered what it takes to visualize a sprawling city like Chicago on your screen ‚Äî using nothing but code? As someone passionate about data, maps, and automation, I set out to map Chicago using Python. This post breaks down how I did it, tools I used, and how you can replicate this for any city.</p>\n\n<p>Whether you're a Python developer, a data analyst, or just a curious explorer ‚Äî this is for you.</p>\n\n<h2>\n  \n  \n  Tools &amp; Libraries I Used\n</h2>\n\n<p>To keep things open-source and efficient, I used the following Python libraries:</p>\n\n<ul>\n<li>geopandas ‚Äì for spatial data manipulation</li>\n<li>matplotlib ‚Äì for visualizing the map</li>\n<li>contextily ‚Äì for adding background tiles</li>\n<li>osmnx ‚Äì to download and plot street networks from OpenStreetMap</li>\n<li>shapely ‚Äì for geometric operations</li>\n</ul>\n\n<p>You can install all dependencies using pip:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pip install geopandas matplotlib contextily osmnx shapely\n\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Step-by-Step: Mapping Chicago\n</h2>\n\n<p><strong>1. Get the Boundary of Chicago</strong><br>\nUsing OSMnx, I first downloaded the polygon boundary of Chicago.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import osmnx as ox\n\n# Fetch the city boundary\ncity = ox.geocode_to_gdf(\"Chicago, Illinois, USA\")\ncity.plot()\n</code></pre>\n\n</div>\n\n\n\n<p>This gave me an accurate geographic outline of the city ‚Äî ready to be layered with roads, buildings, and other data.</p>\n\n<p><strong>2. Download Chicago‚Äôs Street Network</strong><br>\nI wanted to see the complete street grid, so I pulled data for all drivable roads.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>G = ox.graph_from_place(\"Chicago, Illinois, USA\", network_type=\"drive\")\nox.plot_graph(ox.project_graph(G))\n</code></pre>\n\n</div>\n\n\n\n<p>Want bike paths, footways, or public transport? Just change network_type.</p>\n\n<p><strong>3. Convert to GeoDataFrame</strong><br>\nTo perform analysis or plot on layers, I converted the network to a GeoDataFrame.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>gdf_nodes, gdf_edges = ox.graph_to_gdfs(G)\n</code></pre>\n\n</div>\n\n\n\n<p>Now, I had each road as a line geometry I could filter, color, or export.</p>\n\n<p><strong>4. Add a Basemap for Context</strong><br>\nTo make it visually appealing, I added a tile basemap using contextily.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import contextily as ctx\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12,12))\ngdf_edges.plot(ax=ax, linewidth=0.5, color=\"black\")\nctx.add_basemap(ax, source=ctx.providers.CartoDB.Positron, crs=gdf_edges.crs.to_string())\nplt.title(\"Street Network of Chicago\", fontsize=15)\nplt.axis('off')\nplt.show()\n</code></pre>\n\n</div>\n\n\n\n<p>This resulted in a beautiful, modern-looking map with the road layout of Chicago overlaid on real map tiles.</p>\n\n<p>**Bonus: **Mapping Points of Interest<br>\nI went a step further and fetched places like hospitals, schools, and parks:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>tags = {'amenity': ['school', 'hospital', 'library']}\npois = ox.features_from_place(\"Chicago, Illinois, USA\", tags)\npois.plot(figsize=(10,10), color='green', markersize=5)\n</code></pre>\n\n</div>\n\n\n\n<p>This allowed me to visualize where critical services are concentrated or missing.</p>\n\n<p><strong>Exporting as an Image or GeoJSON</strong><br>\nYou can save your map as a high-res PNG or even a GeoJSON for use in web maps:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>gdf_edges.to_file(\"chicago_streets.geojson\", driver=\"GeoJSON\")\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  What I Learned\n</h2>\n\n<p><strong>Mapping Chicago taught me:</strong></p>\n\n<ul>\n<li>OpenStreetMap + Python = Unlimited Potential</li>\n<li>Python makes geospatial data accessible even without a GIS degree</li>\n<li>Visualizing urban data helps uncover patterns you can‚Äôt see on spreadsheets</li>\n</ul>\n\n<h2>\n  \n  \n  Want to Map Your City?\n</h2>\n\n<p>You can replace \"Chicago, Illinois, USA\" with any city name. Try:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\"New York City, New York, USA\"\n\"Los Angeles, California, USA\"\n\"Delhi, India\"\n</code></pre>\n\n</div>\n\n\n\n<p>This method is universal, free, and incredibly fun.</p>\n\n<h2>\n  \n  \n  Final Thoughts\n</h2>\n\n<p>Mapping the whole of Chicago using Python wasn‚Äôt just a technical challenge ‚Äî it was an eye-opener into how accessible geographic data is today. With just a few lines of Python, you can map, analyze, and visualize entire cities.</p>\n\n<p>I plan to explore more ‚Äî traffic flow, zoning data, green space distribution ‚Äî and if you're into urban data, you should too.</p>\n\n<p>Feel free to fork the code, modify it, and build your own custom city maps! Looking for a <a href=\"https://nubizsol.com/blog/chicago-seo-company\" rel=\"noopener noreferrer\">Top SEO company in chicago for small scale business</a>? Check out Nubiz Solutions.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Taking My Django Portfolio to Production ‚Äì Key Milestones Achieved üöÄ","url":"https://dev.to/nicolasandrescl/taking-my-django-portfolio-to-production-key-milestones-achieved-166f","date":1750909558,"author":"Nicol√°s Andr√©s Cano Leal","guid":171816,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frjrke2qfmacfk79c8ddq.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frjrke2qfmacfk79c8ddq.png\" alt=\"Image description\" width=\"800\" height=\"799\"></a>After weeks of development and iterations, I‚Äôm excited to share the latest progress on my personal portfolio, built with Django and Django REST Framework. Here's a breakdown of the key improvements I've implemented before deploying the project to production.</p>\n\n\n\n\n<p>üîê 1. Fully Functional Contact Form with Secure Email Integration<br>\nOne of the core features I prioritized was enabling visitors to contact me directly from the website. I implemented a working contact form that sends emails securely using a Google App Password, protecting my credentials while ensuring deliverability.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4q3w4nzlo0lviwm3w779.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4q3w4nzlo0lviwm3w779.png\" alt=\"Form\" width=\"800\" height=\"449\"></a></p>\n\n\n\n\n<p>üé® 2. Enhanced UI/UX ‚Äì Visual and Structural Polish<br>\nTo make the user experience smoother and more visually coherent, I refined the CSS styling, improved background color contrast, and reorganized image placements. These changes make the navigation feel more intuitive and professional.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Farurqde14hd7weasz53z.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Farurqde14hd7weasz53z.png\" alt=\"estilo\" width=\"800\" height=\"449\"></a></p>\n\n\n\n\n<p>üìò 3. Embedded API Documentation (Swagger &amp; ReDoc)<br>\nSince the backend is powered by Django REST Framework, I integrated auto-generated API documentation using Swagger UI and ReDoc, accessible directly from the site‚Äôs main interface. This allows other developers to explore all endpoints with ease.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxbwe4msnbcgmtjed63mm.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxbwe4msnbcgmtjed63mm.png\" alt=\"swagger\" width=\"800\" height=\"449\"></a></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftd6oa3lh3nmdwhne0ynj.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftd6oa3lh3nmdwhne0ynj.png\" alt=\"swagger\" width=\"800\" height=\"449\"></a></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdwtngb8289axyzebxa82.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdwtngb8289axyzebxa82.png\" alt=\"redoc\" width=\"800\" height=\"449\"></a></p>\n\n\n\n\n<p>‚öôÔ∏è 4. Production-Ready Configuration<br>\nI‚Äôve fine-tuned the project settings for deployment:</p>\n\n<p>DEBUG=False to secure the environment</p>\n\n<p>Proper configuration of STATICFILES and MEDIA handling</p>\n\n<p>Optimized the settings.py file to separate development and production environments</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F45iwzbqonmjh0852o1u6.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F45iwzbqonmjh0852o1u6.png\" alt=\"Debuf=False\" width=\"800\" height=\"449\"></a></p>\n\n\n\n\n<p>üöÄ 5. Preparing for Deployment on PythonAnywhere<br>\nThe final step is to host both frontend and backend on PythonAnywhere, which will allow seamless access and easier management under one domain. This transition is already in progress.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fq7aj239f5xryrolydzhe.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fq7aj239f5xryrolydzhe.png\" alt=\"project\" width=\"800\" height=\"449\"></a></p>\n\n\n\n\n<p>üîç What‚Äôs Next?<br>\nSoon, I‚Äôll announce the complete deployment and share the final hosted version. Until then, you can preview the current progress and code here:<br>\nüëâ <a href=\"https://nicolasandrescl.github.io\" rel=\"noopener noreferrer\">https://nicolasandrescl.github.io</a></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fe10dep8ljazfhjp6khy7.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fe10dep8ljazfhjp6khy7.png\" alt=\"Image description\" width=\"800\" height=\"449\"></a></p>\n\n\n\n\n<p>Thanks for following along in my journey! If you have feedback, ideas, or just want to connect ‚Äî I‚Äôm always open to learning from the community.</p>\n\n\n\n\n<p>Tags:</p>\n\n<h1>\n  \n  \n  Django #Python #Portfolio #WebDevelopment #APIDocumentation #SoftwareEngineering #PythonAnywhere #FullStack\n</h1>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"üëπ Longest Binary Subsequence K ‚Äì LeetCode 2311 (C++ | JavaScript | Python )","url":"https://dev.to/om_shree_0709/longest-binary-subsequence-k-leetcode-2311-c-python-javascript-2c23","date":1750896661,"author":"Om Shree","guid":171085,"unread":true,"content":"<h2>\n  \n  \n  üëã Hey, binary sleuths! üïµÔ∏è‚Äç‚ôÇÔ∏èüí°\n</h2>\n\n<p>Today, we dive into a clever bit manipulation puzzle ‚Äî LeetCode 2311: <em>Longest Binary Subsequence Less Than or Equal to K</em>. It‚Äôs all about squeezing the longest subsequence out of a binary string that forms a number ‚â§ <code>k</code>. Let's decode this one together! üß†</p>\n\n\n\n\n<h2>\n  \n  \n  üß† Problem Summary\n</h2>\n\n<p>You're given:</p>\n\n<ul>\n<li>A binary string <code>s</code>\n</li>\n<li>An integer <code>k</code>\n</li>\n</ul>\n\n<p>You need to return the length of the <strong>longest subsequence</strong> of <code>s</code> such that:</p>\n\n<ul>\n<li>That subsequence forms a valid binary number ‚â§ <code>k</code>\n</li>\n<li>Leading zeroes are allowed</li>\n<li>Subsequence must respect the original order of characters</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  üß© Intuition\n</h2>\n\n<p>To maximize the length of the subsequence:</p>\n\n<ul>\n<li>\n<strong>Include all '0's</strong> ‚Äî they do not increase the binary value.</li>\n<li>\n<strong>Greedily add '1's from the right side</strong> ‚Äî since binary is weighted from right to left, rightmost '1's have smaller impact.</li>\n<li>Stop adding when the resulting number exceeds <code>k</code>.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  üßÆ C++ Code\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight cpp\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n <span class=\"nl\">public:</span>\n  <span class=\"kt\">int</span> <span class=\"n\">longestSubsequence</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">oneCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">pow</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Take as many 1s as possible from the right.</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"n\">pow</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">'1'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"o\">++</span><span class=\"n\">oneCount</span><span class=\"p\">;</span>\n        <span class=\"n\">num</span> <span class=\"o\">+=</span> <span class=\"n\">pow</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"n\">pow</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ranges</span><span class=\"o\">::</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"sc\">'0'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">oneCount</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üíª JavaScript Code\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">longestSubsequence</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">oneCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">pow</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"nx\">s</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">num</span> <span class=\"o\">+</span> <span class=\"nx\">pow</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">k</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">1</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">oneCount</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"nx\">num</span> <span class=\"o\">+=</span> <span class=\"nx\">pow</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">pow</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">zeroCount</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">s</span><span class=\"p\">].</span><span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"nx\">ch</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">ch</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">0</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">zeroCount</span> <span class=\"o\">+</span> <span class=\"nx\">oneCount</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  üêç Python Code\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">longestSubsequence</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"n\">one_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">pow_</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">1</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"n\">pow_</span> <span class=\"o\">&gt;</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n                    <span class=\"k\">break</span>\n                <span class=\"n\">one_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">num</span> <span class=\"o\">+=</span> <span class=\"n\">pow_</span>\n            <span class=\"n\">pow_</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">0</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">one_count</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  ‚úÖ Final Thoughts\n</h2>\n\n<p>This is a brilliant example of how understanding binary properties helps solve real problems. A few key insights let us:</p>\n\n<ul>\n<li>Avoid brute-force subsequence generation</li>\n<li>Use greedy and bitwise intuition</li>\n<li>Keep things simple and efficient</li>\n</ul>\n\n<p>Drop a ‚ù§Ô∏è if this helped, and keep sharpening your problem-solving toolkit! üíª‚ú®</p>\n\n<p>Happy coding! üöÄ</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Spell Checker - Finding probability distribution-NLP","url":"https://dev.to/datatoinfinity/spell-checker-finding-probability-distribution-nlp-191","date":1750888305,"author":"datatoinfinity","guid":171021,"unread":true,"content":"<h2>\n  \n  \n  Finding Probability Distribution\n</h2>\n\n<p><a href=\"https://www.kaggle.com/datasets/bittlingmayer/spelling?select=big.txt\" rel=\"noopener noreferrer\">Kaggle Dataset for Spelling Corrector</a></p>\n\n<p>You need to download <code>big.txt</code> or <code>Create Notebook</code>.</p>\n\n<pre>\nimport re\nwith open('/kaggle/input/spelling/big.txt','r') as fd:\n    lines=fd.readlines()\n    words=[]\n    for line in lines:\n        words+=line.split(' ')\nlen(words)\n</pre>\n\n<pre>\nOutput:\n1164968\n</pre>\n\n<p>Explanation:</p>\n\n<ol>\n<li>Load the <code>/kaggle/input/spelling/big.txt</code>\n</li>\n<li>\n<code>fd.readlines()</code> readlines read all lines from file and make list of string.\nExample:\nlines = [\n\"I love NLP\",\n\"Spell checkers are helpful\",\n\"Python is powerful\"\n]</li>\n<li>Iterate through that list <code>for line in lines:</code>\n</li>\n<li>Now word+=line.split(' ') split line into words, using space as separator.</li>\n<li>\n<code>len(words)</code> return the length of words in words[] list.</li>\n</ol>\n\n<pre>\nimport re\nwith open('/kaggle/input/spelling/big.txt','r') as fd:\n    lines=fd.readlines()\n    words=[]\n    for line in lines:\n        words+=re.findall('\\w+',line)\nlen(words)\n</pre>\n\n<pre>\nOutput:\n1115585\n</pre>\n\n<blockquote>\n<p>re.findall('\\w+',line) does the same thing split line into word and then make list of those word. Now, question arises whats the difference.</p>\n</blockquote>\n\n<h4>\n  \n  \n  line.split(' ')\n</h4>\n\n<p>This will separate the line with words by spacing but it will add other character also like spacing, '\\','*','.'&amp;' etc.</p>\n\n<pre>\nprint(words[:100])\n</pre>\n\n<pre>\nOutput:\n['The','Project','Gutenberg', 'EBook','of','The','Adventures', 'of','Sherlock','Holmes\\n','by','Sir','Arthur','Conan','Doyle\\n',\n'(#15','in','our','series','by','Sir','Arthur','Conan','Doyle)\\n',\n'\\n','Copyright','laws','are','changing','all','over','the',\n'world.','Be','sure','to','check','the\\n','copyright','laws',\n'for','your','country','before','downloading','or','redistributing\\n','this','or','any','other','Project','Gutenberg','eBook.\\n',\n'\\n','This','header','should','be','the','first','thing','seen',\n'when','viewing','this','Project\\n','Gutenberg','file.','',\n'Please','do','not','remove','it.','','Do','not','change','or',\n'edit','the\\n','header','without','written','permission.\\n',\n'\\n','Please','read','the','\"legal','small','print,\"','and', 'other','information','about','the\\n','eBook','and']\n</pre>\n\n<h4>\n  \n  \n  re.findall('\\w+',line)\n</h4>\n\n<p><code>\\w+</code> matches any word made up of:</p>\n\n<ul>\n<li>Letters (A‚ÄìZ, a‚Äìz)</li>\n<li>Numbers (0‚Äì9)</li>\n<li>Underscore _</li>\n</ul>\n\n<p>It will not take other than these character.</p>\n\n<pre>\nprint(words[:30])\n</pre>\n\n<pre>\nOutput:\n['The','Project','Gutenberg','EBook','of','The','Adventures','of',\n'Sherlock','Holmes','by','Sir','Arthur','Conan','Doyle','15',\n'in','our','series','by','Sir','Arthur','Conan','Doyle','Copyright','laws','are','changing','all','over']\n</pre>\n\n<h4>\n  \n  \n  Lets check how many unique words\n</h4>\n\n<pre>\nprint(len(words))\nvocab=list(set(words))\nprint(len(vocab))\n</pre>\n\n<pre>\nOutput:\n1115585\n38160\n</pre>\n\n<h4>\n  \n  \n  Finding Probability Distribution\n</h4>\n\n<p>It means that how frequently word is repeated,  what is the probability of getting the word.</p>\n\n<pre>\nwords.count('the')\n</pre>\n\n<pre>\nOutput:\n79809\n</pre>\n\n<p>There 79809 'the' word in list. Do remember that use lower() function because it can give 'The' or 'the' different value.<br>\n<code>for line in lines:<br>\n        words+=re.findall('\\w+',line.lower())</code></p>\n\n<p><strong>Probability Distribution</strong></p>\n\n<pre>\nlen(words)/words.count('the')\n</pre>\n\n<pre>\nOutput:\n13.978185417684722\n</pre>\n\n<p><strong>Probability Distribution for first 10 word</strong></p>\n\n<pre>\nword_probability={}\nfor word in vocab[:10]:\n    print(word,words.count(word))\n</pre>\n\n<pre>\nOutput:\nsusan 1\nTillage 1\nshortly 21\nenlivened 2\n1720 1\nvictors 3\nshipments 2\nGo 100\nconstitution 63\nblur 1\n</pre>\n\n<p><strong>If we want probability of all word</strong></p>\n\n<pre>\nword_probability={}\nfor word in vocab[:10]:\n    print(word,words.count(word)/len(words))\n</pre>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Peter Bengtsson: Native connection pooling in Django 5 with PostgreSQL","url":"http://www.peterbe.com/plog/native-connection-pooling-django-5-pg","date":1750887392,"author":"","guid":171831,"unread":true,"content":"<article>Enabling native connection pooling in Django 5 gives me a 5.4x speedup.</article>","contentLength":71,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"AI Powered Honeypot","url":"https://dev.to/apexprogrammer/ai-powered-honeypot-48i4","date":1750886765,"author":"Ryan Casey","guid":171020,"unread":true,"content":"<p><strong>Overview</strong><br>\nHello all, this is my first post and I wanted to share an interesting project I‚Äôve been working on. With the rise of artificial intelligence, I often find myself wondering about useful tools that can be built with it. That curiosity led to the creation of Project Alpha‚Äîan AI-powered honeypot solution.</p>\n\n<p>Honeypots are typically used to gather information about attackers, including their origin, tactics, and more. Since this is the first honeypot I‚Äôve ever built, the implementation is simple‚Äîbut hey, simple‚Äôs better, right?</p>\n\n<p>To give it a bit of an edge, I decided to use the most overused word in our community today: ‚ÄúAI.‚Äù The tool uses clustering (basically grouping similar behavior together) to determine whether a hacker or a normal user is interacting with the honeypot. It also features a slick attack-origin ‚Äúwar map,‚Äù where the IP addresses of identified attackers are pinged and mapped to give geographical insight into where they‚Äôre coming from.</p>\n\n<p>I had a lot of fun building this project, and I hope that one day it could be applied in a real-world setting for businesses. It still needs a bit of polish, but I think it has real potential.</p>\n\n<p>Thanks for reading! - Apex</p>\n\n<p><strong>What Does This Project Accomplish?</strong></p>\n\n<ul>\n<li>Implements an AI-powered honeypot to detect and analyze malicious activity.</li>\n<li>Uses clustering algorithms to distinguish between normal users and potential attackers.</li>\n<li>Visualizes attack origins with a dynamic ‚Äúwar map‚Äù that geolocates IP addresses.</li>\n<li>Provides a lightweight, modular setup using Python and Docker for easy deployment.</li>\n<li>Supports cybersecurity education and research by offering a sandbox for experimentation.</li>\n</ul>\n\n<p><strong>If your interested in contributing or helping with the project please feel free to check out the repo:</strong><br>\n[<a href=\"https://github.com/ApexProgrammer/alpha#:%7E:text=-%20GitHub%20-%20ApexProgrammer%2Falpha%3A%20AI%20powered,honeypot%20for%20cybersecurity%20research%20and%20practical%20use\" rel=\"noopener noreferrer\">https://github.com/ApexProgrammer/alpha#:~:text=-%20GitHub%20-%20ApexProgrammer%2Falpha%3A%20AI%20powered,honeypot%20for%20cybersecurity%20research%20and%20practical%20use</a>.]</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I Ditched Python Built-In Logging For Loguru ‚Äî You Should Too","url":"https://dev.to/livingdevops/i-ditched-python-built-in-logging-for-loguru-you-should-too-514m","date":1750886038,"author":"Akhilesh Mishra","guid":171019,"unread":true,"content":"<p><em>A Complete Guide to better logging in Python with loguru</em></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fimages.unsplash.com%2Fphoto-1551288049-bebda4e38f71%3Fixlib%3Drb-4.0.3%26ixid%3DM3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%253D%253D%26auto%3Dformat%26fit%3Dcrop%26w%3D2070%26q%3D80\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fimages.unsplash.com%2Fphoto-1551288049-bebda4e38f71%3Fixlib%3Drb-4.0.3%26ixid%3DM3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%253D%253D%26auto%3Dformat%26fit%3Dcrop%26w%3D2070%26q%3D80\" alt=\"Photo by bady abbas on Unsplash\" width=\"2070\" height=\"1380\"></a></p>\n\n<p>I have been using Python's built-in logging module for years, I have always found it quite boring. It cannot be customized beyond a point.</p>\n\n<p>I wanted to include some color coding in my log messages, but had to use a third-party package, for it. I wished Python built-in logging module has options to customise logs with ease.</p>\n\n<p>Then I stumbled upon <strong>loguru</strong> and found it interesting. I spent some time with this yesterday and fell in love with it.</p>\n\n<p>By the end of this blog post, you will fall for it too.</p>\n\n<h2>\n  \n  \n  Understanding Log Levels\n</h2>\n\n<p>When talking about logging, loglevel is an important term, they are like a severity scale for your messages. By assigning different levels to log messages, it becomes easier to focus on critical issues while reducing noise from less important events while troubleshooting or monitoring.</p>\n\n<p>While the Python builtin module comes with <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, and <code>CRITICAL</code>, loguru include 2 more log levels, <code>TRACE</code> and <code>SUCCESS</code>.</p>\n\n<p>Here is the table to remember log levels in order of increasing priority:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Level</th>\n<th>Priority</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TRACE</td>\n<td>5</td>\n</tr>\n<tr>\n<td>DEBUG</td>\n<td>10</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td>20</td>\n</tr>\n<tr>\n<td>SUCCESS</td>\n<td>25</td>\n</tr>\n<tr>\n<td>WARNING</td>\n<td>30</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>40</td>\n</tr>\n<tr>\n<td>CRITICAL</td>\n<td>50</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Enough with the talking, let me show you what we can do with <strong>loguru</strong> and why I fell in love with it.</p>\n\n<h2>\n  \n  \n  Installing Loguru\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>loguru\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Basic Usage\n</h2>\n\n<p>To use Loguru, import the logger from loguru module and use it.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">trace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hi, This is Akhilesh Mishra</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">debug</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">I will show how to use loguru for better logging in python</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> I love how the logs look</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">warning</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Different color of each section of log</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Easy to get started with</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">critical</span><span class=\"p\">(</span> <span class=\"sh\">\"</span><span class=\"s\">So many options to choose from</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> You see what i am talking about</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fnjdq6ir2gq7vi56ojq8e.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fnjdq6ir2gq7vi56ojq8e.webp\" alt=\"Image description\" width=\"800\" height=\"106\"></a><br>\n<strong>Output format:</strong> <code>date | level | file location: scope: line number - message</code></p>\n\n<p>You can see that the trace output is not printed. Default log level for loguru is debug.</p>\n<h2>\n  \n  \n  Changing the Default Log Level\n</h2>\n\n<p>We can use logger's <code>add()</code> function to change the default loglevel, update the log's formatting.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">TRACE</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">trace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hi, This is Akhilesh Mishra</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4e1xo1uwefi8zwu96l2o.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4e1xo1uwefi8zwu96l2o.webp\" alt=\"Image description\" width=\"800\" height=\"82\"></a></p>\n\n<h2>\n  \n  \n  Change the Formatting with Loguru\n</h2>\n\n<p>Unlike Python's built-in logging module, you can add a handler, update formatting, and change the log level in just one line ‚Äî with <code>add()</code> function.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">()</span> <span class=\"c1\"># remove the old formatting \n</span><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">{time}::{level} --- {message}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">INFO</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">debug</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> Add a handler, update formatting, and change the loglevel</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> one function to rule them all</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> logger.add()</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F83l5on6vpynilhbynglw.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F83l5on6vpynilhbynglw.webp\" alt=\"Image description\" width=\"800\" height=\"121\"></a></p>\n\n<h2>\n  \n  \n  Pretty Logging with Colors\n</h2>\n\n<p>You can change the color of these output messages by using HTML like syntax.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">()</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span>\n    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\"> &lt;yellow&gt;{time} &lt;/yellow&gt;:: &lt;green&gt; &lt;bold&gt; {level} &lt;/bold&gt; &lt;/green&gt;--- &lt;blue&gt; {message} &lt;/blue&gt;</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Set the colors you want to use for logs</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> How easy it was???</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fgdchg7ep4mik8d9x8qkz.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fgdchg7ep4mik8d9x8qkz.webp\" alt=\"Image description\" width=\"800\" height=\"161\"></a></p>\n\n<h2>\n  \n  \n  Change the Time Formatting\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">()</span>\n<span class=\"c1\"># MMMM D, YYYY &gt; HH:mm:ss!UTC : UTC time\n</span><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">{time:MMMM D, YYYY &gt; HH:mm:ss!UTC} | {level} | &lt;level&gt;{message} &lt;/level&gt;</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">warning</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> Use time format-&gt; {time:MMMM D, YYYY &gt; HH:mm:ss!UTC}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Use the default color from level: &lt;level&gt;{message} &lt;/level&gt;</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>You can use more options with time, check the <a href=\"https://loguru.readthedocs.io/en/stable/api/logger.html#time\" rel=\"noopener noreferrer\">loguru documentation</a> for more time formatting options.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxwlrvenak66j47957uu5.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxwlrvenak66j47957uu5.webp\" alt=\"Image description\" width=\"800\" height=\"84\"></a></p>\n\n<h2>\n  \n  \n  Sending Logs to a File\n</h2>\n\n<p>Loguru sends logs to the console by default, but you can configure it to send logs to a file.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">log_file_demo.log</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Let's use formatted logs:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">()</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">file_{time}.log</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">{time:MMMM D, YYYY &gt; HH:mm:ss} | {level} | &lt;level&gt;{message} &lt;/level&gt;</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">using file logging</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> will send logs to the file</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxkoic5weiyjmn1ou2l0u.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxkoic5weiyjmn1ou2l0u.webp\" alt=\"Image description\" width=\"800\" height=\"189\"></a></p>\n\n<h2>\n  \n  \n  Log Rotation, Retention, and Compression\n</h2>\n\n<p>Loguru also allows you to rotate/retain/compress logs with time and size filters.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">log_rotate.log</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">500 MB</span><span class=\"sh\">\"</span><span class=\"p\">)</span>    <span class=\"c1\"># Automatically rotate too big file\n</span><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">log_rotate2.log</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">12:00</span><span class=\"sh\">\"</span><span class=\"p\">)</span>     <span class=\"c1\"># New file is created each day at noon\n</span><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">log_rotate3.log</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">1 week</span><span class=\"sh\">\"</span><span class=\"p\">)</span>    <span class=\"c1\"># Once the file is too old, it's rotated\n</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">log_retention.log</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">retention</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">10 days</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Cleanup after some time\n</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">log_retention2.log</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">compression</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">zip</span><span class=\"sh\">\"</span><span class=\"p\">)</span>    <span class=\"c1\"># Save some loved space\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  JSON Logging\n</h2>\n\n<p>Loguru supports logging in JSON format with <code>serialize=True</code> option.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span>\n    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">{time:MMMM D: YYYY:: HH:mm:ss!UTC} | {level} | {message}</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">serialize</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">warning</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> Its addictive, use with caution !</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">I know you started liking loguru</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F867ryh8wl1sc1rxrsa90.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F867ryh8wl1sc1rxrsa90.webp\" alt=\"Image description\" width=\"800\" height=\"186\"></a></p>\n\n<h2>\n  \n  \n  Adding Context to Log Messages\n</h2>\n\n<p>Suppose you want to add some additional information to the log message for context, you can use the <code>bind()</code> method.</p>\n\n<p>You can add directive <code>extra</code> to the format in your logger <code>add()</code> method to add custom entries to the logs output.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n\n<span class=\"c1\"># Remove the default logger\n</span><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add a new logger that outputs to sys.stderr\n</span><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span>\n    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\"> {level} | &lt;level&gt;{message}&lt;/level&gt; | {extra} </span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a new logger with some initial context\n</span><span class=\"n\">context_logger</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">bind</span><span class=\"p\">(</span><span class=\"n\">author</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Akhilesh</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">demo</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Log an info message with the current context\n</span><span class=\"n\">context_logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">You can pass context with logs!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F0r0oc6feidsiife8o1ul.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F0r0oc6feidsiife8o1ul.webp\" alt=\"Image description\" width=\"800\" height=\"109\"></a></p>\n\n<p>You can further customize the context:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Bind additional context to the logger and log a warning message\n</span><span class=\"n\">context_logger</span><span class=\"p\">.</span><span class=\"nf\">bind</span><span class=\"p\">(</span><span class=\"n\">blog_type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Tutorial</span><span class=\"sh\">\"</span><span class=\"p\">).</span><span class=\"nf\">warning</span><span class=\"p\">(</span>\n    <span class=\"sh\">\"</span><span class=\"s\">You can use extra attributes to bind context!</span><span class=\"sh\">\"</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Log a success message with additional context provided during formatting\n</span><span class=\"n\">context_logger</span><span class=\"p\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Use kwargs to add context during formatting: {platform}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">platform</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Medium</span><span class=\"sh\">\"</span>\n<span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F75tan8ye04tvqdasiwv0.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F75tan8ye04tvqdasiwv0.webp\" alt=\"Image description\" width=\"800\" height=\"73\"></a></p>\n\n<h2>\n  \n  \n  Using Context Managers\n</h2>\n\n<p>We can also use the Python context manager to modify a context-local state temporarily with <code>contextualize()</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span>\n    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\"> {level} | &lt;level&gt;{message}&lt;/level&gt; | {extra} </span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">context_logger</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">bind</span><span class=\"p\">(</span><span class=\"n\">blog_id</span><span class=\"o\">=</span><span class=\"mi\">45</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">():</span>\n    <span class=\"n\">context_logger</span><span class=\"p\">.</span><span class=\"nf\">debug</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">doing something</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">contextualize</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">From context manager</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n    <span class=\"nf\">do_something</span><span class=\"p\">()</span>\n\n<span class=\"nf\">do_something</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fob86fi5j53yyymzd7446.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fob86fi5j53yyymzd7446.webp\" alt=\"Image description\" width=\"800\" height=\"144\"></a></p>\n\n<h2>\n  \n  \n  Filtering Logs\n</h2>\n\n<p>Combine <code>bind()</code> and filter for fine-grained control over your logs.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">special.log</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">special</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">record</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">extra</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">debug</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">This message is not logged to the file</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">bind</span><span class=\"p\">(</span><span class=\"n\">special</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">).</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">This message, though, is logged to the file!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5ufz66nwse3hd2esgp39.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5ufz66nwse3hd2esgp39.webp\" alt=\"Image description\" width=\"800\" height=\"164\"></a></p>\n\n<h2>\n  \n  \n  Dynamic Values with patch()\n</h2>\n\n<p>The <code>patch()</code> method allows you to attach dynamic values to be attached to each new message:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n<span class=\"kn\">from</span> <span class=\"n\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">{extra[utc]} - {level}- {message}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">patch</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">record</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">extra</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">utc</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">()))</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">using patch method from loguru</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fiw0v5ffcoo0z56lk4wel.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fiw0v5ffcoo0z56lk4wel.webp\" alt=\"Image description\" width=\"800\" height=\"117\"></a></p>\n\n<h2>\n  \n  \n  Create Custom Log Levels\n</h2>\n\n<p>Loguru allows you to create your own log level with <code>level()</code> function.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">m_level</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">level</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Medium</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">no</span><span class=\"o\">=</span><span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">&lt;yellow&gt;&lt;bold&gt;</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">icon</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">/</span><span class=\"se\">\\\\</span><span class=\"s\">/</span><span class=\"se\">\\\\</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">n_level</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">level</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Nedium</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">no</span><span class=\"o\">=</span><span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">&lt;blue&gt;&lt;bold&gt;</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">icon</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">|</span><span class=\"se\">\\\\</span><span class=\"s\">|</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\"> &lt;level&gt; {level.icon} :: {message} &lt;/level&gt;</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Medium</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">This is my custom log level</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Nedium</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">I like having optional log levels</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F64pc7btehedunkxkaank.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F64pc7btehedunkxkaank.webp\" alt=\"Image description\" width=\"800\" height=\"170\"></a></p>\n\n<h2>\n  \n  \n  Logging Exceptions\n</h2>\n\n<p>Logging exceptions is crucial for tracking bugs, but it's not helpful if you don't know the cause. Loguru makes it easier by showing the entire stack trace, including variable values so you can identify the problem.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Caution, \"diagnose=True\" is the default and may leak sensitive data in prod\n</span><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">loguru.log</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">backtrace</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">diagnose</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">/</span> <span class=\"n\">b</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">nested</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">ZeroDivisionError</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">exception</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Did you just??</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">nested</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fj27f2stspj9iveu29t36.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fj27f2stspj9iveu29t36.webp\" alt=\"Image description\" width=\"800\" height=\"476\"></a><br>\nYou can also use it with context manager by using <code>logger.catch()</code> decorator.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n\n<span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Caution, \"diagnose=True\" is the default and may leak sensitive data in prod\n</span><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">loguru.log</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">backtrace</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">diagnose</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@logger.catch</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">/</span> <span class=\"n\">b</span>\n\n<span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F6ln1sdsyfrwvgturoqb2.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F6ln1sdsyfrwvgturoqb2.webp\" alt=\"Image description\" width=\"800\" height=\"124\"></a><br>\nBy default the level you will see <code>ERROR</code> level, but you can customize it to use different levels.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8d17xwtykqh1im9o6tgn.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8d17xwtykqh1im9o6tgn.webp\" alt=\"Image description\" width=\"800\" height=\"208\"></a></p>\n\n<h2>\n  \n  \n  Final Words\n</h2>\n\n<p>If you got to this point, you know how nice loguru is. If you love customization and making things pretty, you will love it.</p>\n\n<p>Let me know what you think about it in the comments. If you found it useful, don't forget to like and follow for more Python tutorials!</p>\n\n<p><em>Connect with the author on <a href=\"https://www.linkedin.com/in/akhilesh-mishra-0ab886124/\" rel=\"noopener noreferrer\">LinkedIn</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Predict Like a Leader Without a Crystal Ball","url":"https://dev.to/diamantino_almeida/predict-like-a-leader-without-a-crystal-ball-44ce","date":1750885633,"author":"DIAMANTINO ALMEIDA","guid":171018,"unread":true,"content":"<p>Remember when ‚Äúgut feel‚Äù was a leadership virtue? Cute. Meanwhile your competitors are spoon-feeding large-language models terabytes of reality and asking, ‚ÄúHey, future‚Äîwhat‚Äôs for breakfast?‚Äù Spoiler: data eats guts for brunch.</p>\n\n<p>But let‚Äôs demystify the buzz. You don‚Äôt need a PhD in Rubik-cube-the-galaxy-math to wield AI like Thor‚Äôs hammer. You need three things: <strong>context</strong>, <strong>curiosity</strong>, and the <strong>courage</strong> to trust a machine that never sleeps or steals your stapler.</p>\n\n<h2>\n  \n  \n  1. Context: know the game you‚Äôre playing\n</h2>\n\n<p>Feeding random spreadsheets into GPT-4o and hoping for prophetic KPIs is the managerial equivalent of throwing alphabet soup at the wall to read your horoscope. Frame a decision question first.</p>\n\n<ul>\n<li>‚ÄúWhich customer segments are decaying fastest?‚Äù</li>\n<li>‚ÄúHow will next quarter‚Äôs hiring freeze bend our delivery roadmap?‚Äù</li>\n</ul>\n\n<p>Context trims the noise, focuses the model, and keeps the output anchored to business reality instead of generating Shakespearean sonnets about quarterly revenue (it will if you let it).</p>\n\n<h2>\n  \n  \n  2. Curiosity: interrogate your data like a detective, not a tourist\n</h2>\n\n<p>Chat with your metrics the way you‚Äôd grill a vendor.</p>\n\n<ul>\n<li>‚ÄúOrders dipped 7% in week 12‚Äîwhy?‚Äù</li>\n</ul>\n\n<p>Feed the model structured slices: transactions, support tickets, ad spend timelines. Ask follow-ups:</p>\n\n<ul>\n<li>What were the top three correlates?</li>\n<li>What happens if we delay feature X?</li>\n</ul>\n\n<p>Modern LLMs can run lightweight causal-inference chains or spin up scenario simulations in seconds. Your job is to keep poking until the story snaps into focus.</p>\n\n<h2>\n  \n  \n  3. Courage: act on probabilistic truth, not nostalgic certainty\n</h2>\n\n<p>Predictions aren‚Äôt commandments; they‚Äôre weather reports with confidence intervals.</p>\n\n<p>Maybe the model says there‚Äôs a 68% chance churn will spike if onboarding latency stays above 5 seconds. That‚Äôs not gospel‚Äîit‚Äôs a strategic nudge.</p>\n\n<p>Great <a href=\"https://diamantinoalmeida.com\" rel=\"noopener noreferrer\">managers </a>translate nudges into action:</p>\n\n<blockquote>\n<p>‚ÄúTeam, we‚Äôve got a two-in-three shot of a churn storm. Let‚Äôs shave latency by 30% this sprint and re-forecast.‚Äù</p>\n</blockquote>\n\n<p>You won‚Äôt always be right, but you‚Äôll always be learning faster than the hero CEO still polishing his intuition.</p>\n\n\n\n\n<h2>\n  \n  \n  Tactical Starter Kit (a.k.a. Zero-Excuse Checklist)\n</h2>\n\n<ul>\n<li>Pipe data from Slack, Jira, and Stripe into a lake or warehouse your model can reach. No data, no divination.</li>\n<li>Pick a foundation model‚ÄîOpenAI GPT-4o, Anthropic Claude 3, Mistral-Large‚Äîthen bolt on domain-fine-tuning if you‚Äôre fancy.</li>\n<li>Automate the loop. Nightly cron jobs push fresh metrics through the LLM, dump narratives into a dashboard, and Slack-DM you a ‚Äúhere‚Äôs what moved‚Äù memo with hyperlinks to drill deeper.</li>\n<li>Ethics &amp; governance. Log prompts, track model versions, keep humans in the feedback loop. Prediction without accountability is just numerically-enhanced astrology.</li>\n</ul>\n\n\n\n\n<p><strong>Bottom line:</strong> AI won‚Äôt replace leaders; it will replace leaders who ignore AI. Embrace the numbers, tango with the probabilities, and let your team witness a new, data-literate flavor of decisiveness. Your future self (and probably your board) will high-five you for seeing around corners‚Äîno crystal ball required, just silicon guts.</p>\n\n<h2>\n  \n  \n  Quick-start: Sentiment Analysis on Slack Messages\n</h2>\n\n<p>Prerequisites:</p>\n\n<ol>\n<li>pip install slack_sdk transformers torch</li>\n<li>Export two environment variables:\n\n<ul>\n<li>SLACK_BOT_TOKEN  = your Bot/User OAuth token</li>\n<li>CHANNEL_ID       = the ID of the channel you want to scan\n</li>\n</ul>\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\"\"\"\nimport os\nfrom slack_sdk import WebClient\nfrom slack_sdk.errors import SlackApiError\nfrom transformers import pipeline\n\n# Set up clients\nslack_client   = WebClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\nsentiment_analyzer = pipeline(\"sentiment-analysis\", model=\"distilbert-base-uncased-finetuned-sst-2-english\")\n\ndef fetch_recent_messages(channel_id: str, limit: int = 100):\n    \"\"\"Pull the most recent *limit* messages from a Slack channel.\"\"\"\n    try:\n        response = slack_client.conversations_history(channel=channel_id, limit=limit)\n        # Only keep the human-written text fields\n        return [m[\"text\"] for m in response[\"messages\"] if \"text\" in m]\n    except SlackApiError as e:\n        print(f\"Slack API error: {e.response['error']}\")\n        return []\n\ndef tag_sentiment(messages):\n    \"\"\"Return each message with its predicted sentiment label + score.\"\"\"\n    return [\n        {\"text\": msg, **sentiment_analyzer(msg)[0]}\n        for msg in messages\n    ]\n\nif __name__ == \"__main__\":\n    msgs = fetch_recent_messages(os.environ[\"CHANNEL_ID\"])\n    results = tag_sentiment(msgs)\n\n    print(\"\\n=== Sentiment snapshot ===\")\n    for r in results:\n\n        label   = r[\"label\"]      # POSITIVE / NEGATIVE\n        score   = f\"{r['score']:.2%}\"\n        snippet = (r['text'][:60] + \"‚Ä¶\") if len(r['text']) &gt; 60 else r['text']\n        print(f\"[{label:&lt;8}] {score} | {snippet}\")\n`\n\n\n</code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Ansible, What and Why?","url":"https://dev.to/mateenzero/ansible-what-and-why-61n","date":1750884721,"author":"Abdul Mateen","guid":170989,"unread":true,"content":"<p>Its a configuration management tool or a deployment tool.<br>\nIt manages servers.<br>\nCan configure files, directories, apt / yum, usr/group, bash, package, services ..<br>\nIts developed in Python by RedHat.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"fortune","url":"https://dev.to/orsenthil/fortune-3ehb","date":1750882781,"author":"Senthil Kumaran","guid":170988,"unread":true,"content":"<p>A minimalist browser extension that displays a new quote in the browser<br>\ntab. For example, when you open a new tab, you will see quotes like<br>\nthis:</p>\n\n\n\n\n<p><em>\"And this is aviation; I give it to the world.\"</em> - <em>Louis Mouillard,<br>\nFrench Inventor/Aeronaut (1834-1897)</em></p>\n\n<p><em>\"We were on the point of abandoning our work when the book of Mouillard<br>\nfell into our hands, and we continued with the results you know.\"</em> -<br>\n<em>Wilbur Wright, American Inventor/Aviator (1867-1921)</em></p>\n\n\n\n\n<p>This extension is named after popular Unix Program {{% wikipedia<br>\narticle=\"Fortune_(Unix)\" %}}, a command line utility which displays<br>\nquotes in the shell. The browser with tabs is a modern shell interface<br>\nof the computer. And this is the fortune program for the browser.</p>\n\n<h1>\n  \n  \n  Technical Details\n</h1>\n\n<p>I developed this with Python hosted on Google App Engine, and the client<br>\nside written using Javascript as a browser addon. In the backend there<br>\nis a database where I keep the quote and author in a table. There is API<br>\ncall that returns the quote and the author in the JSON format. To call<br>\nthe API visit <a href=\"http://quotes-1271.appspot.com/json\" rel=\"noopener noreferrer\">http://quotes-1271.appspot.com/json</a> . This is an<br>\nunauthenticated API as it read-only GET call, and cannot change the<br>\nstate of the system.</p>\n\n<p>The client side is entirely handled by Javascript, and it displays the<br>\nquote using simple {{% wikipedia article=\"Document_Object_Model\" %}}<br>\nmanipulation.</p>\n\n<h1>\n  \n  \n  Get the extension directly from the webstore\n</h1>\n\n<ul>\n<li><a href=\"https://chromewebstore.google.com/detail/fortune/kmcoofcbagjmlfbkoopfohngcnfnaakb\" rel=\"noopener noreferrer\">Google Chrome\nExtension</a></li>\n<li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/fortune-browser-extension/\" rel=\"noopener noreferrer\">Firefox\nAddons</a></li>\n</ul>\n\n<h1>\n  \n  \n  Screenshot\n</h1>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5560uwomgkzqj3de41dz.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5560uwomgkzqj3de41dz.png\" alt=\"screenshot\" width=\"800\" height=\"448\"></a></p>\n\n<h1>\n  \n  \n  Video Demo\n</h1>\n\n<p><a href=\"http://www.youtube.com/watch?v=3S8b3eROxUY\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fp7yhf8z3vpzezx6v8ehi.jpg\" alt=\"Demo\" width=\"480\" height=\"360\"></a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Spelling Checker - NLP","url":"https://dev.to/datatoinfinity/spelling-checker-nlp-h53","date":1750882046,"author":"datatoinfinity","guid":170987,"unread":true,"content":"<h2>\n  \n  \n  Why you need Spell Checker?\n</h2>\n\n<p>A spell checker is a software feature, often integrated into word processors, email clients, or other text-based applications, that identifies potential misspellings in text by comparing the words to a built-in dictionary. It highlights potential errors, often with underlines (red for spelling, green for grammar in some programs), and provides suggestions for corrections.</p>\n\n<h5>\n  \n  \n  Search Engine\n</h5>\n\n<p>User searches:</p>\n\n<blockquote>\n<p>\"restarant near me\"</p>\n</blockquote>\n\n<p>Spell checker in Google understands:</p>\n\n<blockquote>\n<p>\"Did you mean: restaurant near me?\"</p>\n</blockquote>\n\n<p>It corrects the typo silently and gives you correct results.</p>\n\n<h2>\n  \n  \n  Why add spell checker?\n</h2>\n\n<p>Saves Time, building spell checker from scratch requires big dictionary of correct words, rules of grammar, possibly training a model on thousand of example would be better choice.</p>\n\n<p>Before starting this model you must get familiar with <code>String</code>, <code>Regular Expression</code> and <code>nltk library</code>.</p>\n\n<p>I will start in next series with <strong>Finding the probability distribution</strong></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Deep Dive into Databend UDF, implementing your data solutions with python, WASM and beyond","url":"https://dev.to/ksanaka/deep-dive-into-databend-udf-implementing-your-data-solutions-with-python-wasm-and-beyond-231p","date":1750879028,"author":"ksanaka","guid":170958,"unread":true,"content":"<p>\"How do we extract/summarize/complete/validate our data using LLM functions?\"</p>\n\n<p>\"Can we detect anomalies in this time-series data using our existing proprietary functions?\"</p>\n\n<p>\"We need to analyze sentiment in these customer reviews, but there's nothing built-in for that.\"</p>\n\n<p>\"How do we connect our gaming matchmaking system to our analytics pipeline?\"</p>\n\n<p>If these questions sound familiar, you're not alone. As data teams scale their analytics capabilities, they inevitably hit the limitations of built-in database functions. That's where Databend's User-Defined Functions (UDFs) come in ‚Äì and they're transforming how we approach custom data processing.</p>\n\n<h2>\n  \n  \n  Why UDFs Matter for Modern Data Teams\n</h2>\n\n<p>From financial services to e-commerce to gaming, organizations are leveraging UDFs to:</p>\n\n<ul>\n<li>\n<strong>Embed domain expertise and proprietary business logic</strong> directly into data pipelines</li>\n<li>\n<strong>Process data where it lives</strong> by eliminating unnecessary data movement while maintaining security and compliance</li>\n<li>\n<strong>Connect to specialized services</strong> ‚Äì enabling companies to use the same algorithms in both operations and analytics</li>\n<li>\n<strong>Extend analytics capabilities</strong> without waiting for feature requests</li>\n</ul>\n\n<h2>\n  \n  \n  Databend's UDF Ecosystem: Power Meets Flexibility\n</h2>\n\n<p>What makes Databend's approach to UDFs particularly powerful is its multi-language support and deployment options:</p>\n\n<ul>\n<li>\n<strong>Lambda UDFs</strong>: Quick SQL expressions for simple transformations</li>\n<li>\n<strong>Python &amp; JavaScript UDFs</strong>: Familiar languages for complex logic and ML</li>\n<li>\n<strong>WASM UDFs</strong>: Near-native performance for compute-intensive operations</li>\n<li>\n<strong>External UDF Servers</strong>: Scalable microservices for enterprise workloads</li>\n</ul>\n\n<p>In the following sections, we'll explore each approach with practical examples and performance insights to help you choose the right tool for your specific needs.</p>\n\n<h2>\n  \n  \n  Lambda UDFs: SQL-Powered Simplicity\n</h2>\n\n<p>Lambda UDFs are the simplest form of user-defined functions in Databend, allowing you to define custom expressions directly in SQL. Think of them as SQL \"shorthand\" that encapsulates frequently used logic into reusable components.</p>\n\n<h3>\n  \n  \n  When to Use Lambda UDFs\n</h3>\n\n<p>Lambda UDFs excel in scenarios where you need:</p>\n\n<ul>\n<li>Data cleansing and standardization across multiple queries</li>\n<li>Simple calculations that combine several built-in functions</li>\n<li>Text manipulation and pattern matching beyond basic SQL capabilities</li>\n</ul>\n\n<p>For data engineers working with messy data sources or implementing business rules, Lambda UDFs provide a way to define the logic once and reuse it everywhere with lambda expression, ensuring consistency and reducing query complexity.</p>\n\n<h3>\n  \n  \n  Syntax and Examples\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"c1\">-- Simple data cleaning function</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">FUNCTION</span> <span class=\"n\">clean_phone</span> <span class=\"k\">AS</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> \n  <span class=\"n\">regexp_replace</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"s1\">'[^0-9]'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">);</span>\n\n<span class=\"c1\">-- More complex example with multiple parameters and logic</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">FUNCTION</span> <span class=\"n\">calculate_discount</span> <span class=\"k\">AS</span> <span class=\"p\">(</span><span class=\"n\">base_price</span><span class=\"p\">,</span> <span class=\"n\">customer_tier</span><span class=\"p\">,</span> <span class=\"n\">purchase_history</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> \n  <span class=\"k\">CASE</span> \n    <span class=\"k\">WHEN</span> <span class=\"n\">customer_tier</span> <span class=\"o\">=</span> <span class=\"s1\">'premium'</span> <span class=\"k\">AND</span> <span class=\"n\">purchase_history</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10000</span> <span class=\"k\">THEN</span> <span class=\"n\">base_price</span> <span class=\"o\">*</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">85</span>\n    <span class=\"k\">WHEN</span> <span class=\"n\">customer_tier</span> <span class=\"o\">=</span> <span class=\"s1\">'premium'</span> <span class=\"k\">THEN</span> <span class=\"n\">base_price</span> <span class=\"o\">*</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">90</span>\n    <span class=\"k\">WHEN</span> <span class=\"n\">purchase_history</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5000</span> <span class=\"k\">THEN</span> <span class=\"n\">base_price</span> <span class=\"o\">*</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">95</span>\n    <span class=\"k\">ELSE</span> <span class=\"n\">base_price</span>\n  <span class=\"k\">END</span><span class=\"p\">;</span>\n\n<span class=\"c1\">-- Using the functions in a query</span>\n<span class=\"k\">SELECT</span> \n  <span class=\"n\">customer_id</span><span class=\"p\">,</span>\n  <span class=\"n\">clean_phone</span><span class=\"p\">(</span><span class=\"n\">raw_phone_number</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">standardized_phone</span><span class=\"p\">,</span>\n  <span class=\"n\">calculate_discount</span><span class=\"p\">(</span><span class=\"n\">item_price</span><span class=\"p\">,</span> <span class=\"n\">customer_tier</span><span class=\"p\">,</span> <span class=\"n\">ytd_purchases</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">discounted_price</span>\n<span class=\"k\">FROM</span> <span class=\"n\">customer_orders</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  UDF Script: enhancing your data with python, javascript and WASM\n</h2>\n\n<p>While Lambda UDFs are perfect for simple SQL expressions, more complex data processing often requires the full power of programming languages. Databend's UDF Script capability allows you to embed Python, JavaScript, and compile Rust, go, C++  or Zig to WebAssembly code directly into your data pipeline, bringing sophisticated algorithms right to where your data lives.</p>\n\n<h3>\n  \n  \n  Python UDFs: A Taste of Data Science\n</h3>\n\n<p>Python UDFs unlock the vast ecosystem of Python libraries for data science, machine learning, and AI. This is particularly valuable when you need to apply complex algorithms or interact your data natively with external services.</p>\n\n<p><strong>Sample use case: E-Commerce Order Validation</strong></p>\n\n<p>An e-commerce retailer wants to ensure that shipping addresses entered by customers are clean and valid before fulfillment. The data team automates the process of standardizing address strings and flagging obviously invalid entries (such as addresses missing a street number).</p>\n\n<p>To achieve this, the data engineer writes a Python UDF in Databend (using only Python‚Äôs standard library). The UDF receives a raw address string, trims whitespace, converts it to title case, and checks if it contains at least one digit (to indicate a street number). It returns a standardized address if valid, or NULL otherwise.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">CREATE</span> <span class=\"n\">FUNCTION</span> <span class=\"nf\">standardize_address</span><span class=\"p\">(</span> <span class=\"n\">STRING</span><span class=\"p\">)</span>\n<span class=\"n\">RETURNS</span> <span class=\"n\">STRING</span>\n<span class=\"n\">LANGUAGE</span> <span class=\"n\">python</span>\n<span class=\"n\">HANDLER</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">clean_address</span><span class=\"sh\">'</span>\n<span class=\"n\">AS</span> <span class=\"err\">$$</span>\n<span class=\"k\">def</span> <span class=\"nf\">clean_address</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">address</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"n\">cleaned</span> <span class=\"o\">=</span> <span class=\"n\">address</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">().</span><span class=\"nf\">title</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Check for at least one digit (street number)\n</span>    <span class=\"k\">if</span> <span class=\"nf\">any</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">.</span><span class=\"nf\">isdigit</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">cleaned</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">cleaned</span>\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n<span class=\"err\">$$</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"c1\">-- Use the UDF to clean and validate addresses in orders</span>\n<span class=\"k\">SELECT</span>\n  <span class=\"n\">order_id</span><span class=\"p\">,</span>\n  <span class=\"n\">customer_id</span><span class=\"p\">,</span>\n  <span class=\"n\">standardize_address</span><span class=\"p\">(</span><span class=\"n\">shipping_address</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">standardized_address</span>\n<span class=\"k\">FROM</span> <span class=\"n\">orders</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">standardize_address</span><span class=\"p\">(</span><span class=\"n\">shipping_address</span><span class=\"p\">)</span> <span class=\"k\">IS</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  JavaScript UDFs: Lightweight Data Wrangling with Security\n</h3>\n\n<p>JavaScript UDFs in Databend provide a secure, sandboxed environment for data transformations. They are particularly well-suited for handling semi-structured data like JSON, offering a balance of flexibility, security, and performance for common data preparation tasks.</p>\n\n<p><strong>Sample use case: E-commerce Event Log Processing</strong></p>\n\n<p>An e-commerce platform captures raw user interaction events as JSON objects. Before this data can be used for analytics, the data engineering team needs to clean, enrich, and standardize it. Specifically, they need to:</p>\n\n<ol>\n<li> <strong>Redact PII</strong>: Remove sensitive information like IP addresses.</li>\n<li> <strong>Enrich Data</strong>: Add a processing timestamp to each event.</li>\n<li> <strong>Standardize Fields</strong>: Ensure certain fields, like country codes, adhere to a consistent format.</li>\n</ol>\n\n<p>To handle this, they implement a JavaScript UDF in Databend.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"o\">--</span> <span class=\"nx\">This</span> <span class=\"nx\">UDF</span> <span class=\"nx\">processes</span> <span class=\"nx\">a</span> <span class=\"nx\">JSON</span> <span class=\"nx\">event</span> <span class=\"nx\">payload</span><span class=\"p\">:</span> \n<span class=\"o\">--</span> <span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">Deletes</span> <span class=\"nx\">the</span> <span class=\"dl\">'</span><span class=\"s1\">ip_address</span><span class=\"dl\">'</span> <span class=\"nx\">field</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">user_details</span><span class=\"dl\">'</span><span class=\"p\">.</span>\n<span class=\"o\">--</span> <span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"nx\">Adds</span> <span class=\"nx\">a</span> <span class=\"dl\">'</span><span class=\"s1\">processed_at_udf</span><span class=\"dl\">'</span> <span class=\"nx\">timestamp</span> <span class=\"nx\">to</span> <span class=\"dl\">'</span><span class=\"s1\">metadata</span><span class=\"dl\">'</span><span class=\"p\">.</span>\n<span class=\"o\">--</span> <span class=\"mi\">3</span><span class=\"p\">.</span> <span class=\"nx\">Converts</span> <span class=\"dl\">'</span><span class=\"s1\">country_code</span><span class=\"dl\">'</span> <span class=\"k\">in</span> <span class=\"dl\">'</span><span class=\"s1\">location_details</span><span class=\"dl\">'</span> <span class=\"nx\">to</span> <span class=\"nx\">uppercase</span><span class=\"p\">.</span>\n<span class=\"o\">--</span> <span class=\"mi\">4</span><span class=\"p\">.</span> <span class=\"nx\">Adds</span> <span class=\"nx\">a</span> <span class=\"k\">default</span> <span class=\"dl\">'</span><span class=\"s1\">source</span><span class=\"dl\">'</span> <span class=\"k\">if</span> <span class=\"nx\">missing</span> <span class=\"k\">in</span> <span class=\"dl\">'</span><span class=\"s1\">event_properties</span><span class=\"dl\">'</span><span class=\"p\">.</span>\n<span class=\"nx\">CREATE</span> <span class=\"nx\">FUNCTION</span> <span class=\"nf\">process_event_payload</span><span class=\"p\">(</span> <span class=\"nx\">VARIANT</span><span class=\"p\">)</span>\n<span class=\"nx\">RETURNS</span> <span class=\"nx\">VARIANT</span>\n<span class=\"nx\">LANGUAGE</span> <span class=\"nx\">javascript</span>\n<span class=\"nx\">HANDLER</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">transform_event</span><span class=\"dl\">'</span>\n<span class=\"nx\">AS</span> <span class=\"nx\">$$</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nf\">transform_event</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Ensure event is a valid object</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">event</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span> <span class=\"nx\">event</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">object</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// 1. Delete PII (e.g., user's IP address)</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">user_details</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">typeof</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">user_details</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">object</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">delete</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">user_details</span><span class=\"p\">.</span><span class=\"nx\">ip_address</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// 2. Add a new field (e.g., processing timestamp)</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">metadata</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">object</span><span class=\"dl\">'</span> <span class=\"o\">||</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">metadata</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">metadata</span> <span class=\"o\">=</span> <span class=\"p\">{};</span> <span class=\"c1\">// Initialize if not an object or is null</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">metadata</span><span class=\"p\">.</span><span class=\"nx\">processed_at_udf</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Date</span><span class=\"p\">().</span><span class=\"nf\">toISOString</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// 3. Update/Standardize a field (e.g., ensure country code is uppercase)</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">location_details</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">typeof</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">location_details</span><span class=\"p\">.</span><span class=\"nx\">country_code</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">string</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">location_details</span><span class=\"p\">.</span><span class=\"nx\">country_code</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">location_details</span><span class=\"p\">.</span><span class=\"nx\">country_code</span><span class=\"p\">.</span><span class=\"nf\">toUpperCase</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// 4. Add a default value if a field is missing</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">event_properties</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">object</span><span class=\"dl\">'</span> <span class=\"o\">||</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">event_properties</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">event_properties</span> <span class=\"o\">=</span> <span class=\"p\">{};</span> <span class=\"c1\">// Initialize if not an object or is null</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">event_properties</span><span class=\"p\">.</span><span class=\"nx\">source</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">undefined</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">event_properties</span><span class=\"p\">.</span><span class=\"nx\">source</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">unknown_source_js_udf</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">event</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">$$</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"c1\">-- Using the JavaScript UDF to transform raw event data</span>\n<span class=\"k\">WITH</span> <span class=\"n\">raw_events</span> <span class=\"k\">AS</span> <span class=\"p\">(</span>\n  <span class=\"k\">SELECT</span> <span class=\"n\">PARSE_JSON</span><span class=\"p\">(</span><span class=\"s1\">'{\n    \"event_id\": \"evt_123\",\n    \"user_details\": { \"user_id\": \"usr_abc\", \"ip_address\": \"192.168.1.100\", \"email\": \"test@example.com\" },\n    \"location_details\": { \"city\": \"San Francisco\", \"country_code\": \"us\" },\n    \"event_properties\": { \"page_url\": \"/products/awesome-widget\" }\n  }'</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">payload</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span>\n  <span class=\"k\">SELECT</span> <span class=\"n\">PARSE_JSON</span><span class=\"p\">(</span><span class=\"s1\">'{\n    \"event_id\": \"evt_456\",\n    \"user_details\": { \"user_id\": \"usr_def\", \"ip_address\": \"10.0.0.5\" },\n    \"location_details\": { \"city\": \"London\", \"country_code\": \"gb\" },\n    \"event_properties\": null \n  }'</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">payload</span>\n<span class=\"p\">)</span>\n<span class=\"k\">SELECT</span>\n  <span class=\"n\">payload</span><span class=\"p\">:</span><span class=\"n\">event_id</span><span class=\"p\">::</span><span class=\"n\">STRING</span> <span class=\"k\">AS</span> <span class=\"n\">original_event_id</span><span class=\"p\">,</span>\n  <span class=\"n\">process_event_payload</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">processed_payload</span>\n<span class=\"k\">FROM</span> <span class=\"n\">raw_events</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  WASM UDFs: Near-Native Performance without sacrifice security\n</h3>\n\n<p>For computationally intensive operations requiring high performance, WebAssembly (WASM) UDFs enable near-native execution speeds within a secure, sandboxed environment. Unlike Python and JavaScript UDFs, which interpret source code at runtime, WASM UDFs are compiled to a binary format that executes efficiently and securely directly in the engine.</p>\n\n<p>At first, you need to setup your rust environment, and add <code>arrow-udf</code> as dependency, implement your udf function.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight rust\"><code><span class=\"c1\">// Rust code (compiled to WASM)</span>\n<span class=\"k\">use</span> <span class=\"nn\">arrow_udf</span><span class=\"p\">::</span><span class=\"n\">function</span><span class=\"p\">;</span>\n\n<span class=\"nd\">#[function(</span><span class=\"s\">\"fib(int) -&gt; int\"</span><span class=\"nd\">)]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">i32</span><span class=\"p\">)</span> <span class=\"k\">-&gt;</span> <span class=\"nb\">i32</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">mut</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">n</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">a</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Compile your Rust code to the <code>wasm32-wasip1</code> target:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>cargo build <span class=\"nt\">--release</span> <span class=\"nt\">--target</span> wasm32-wasip1\n</code></pre>\n\n</div>\n\n\n\n<p>Upload the compiled WASM file (e.g., <code>arrow_udf_example.wasm</code> found in <code>target/wasm32-wasip1/release/</code>) to a Databend stage and create the function:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"c1\">-- Create a stage if you don't have one</span>\n<span class=\"k\">CREATE</span> <span class=\"n\">STAGE</span> <span class=\"n\">IF</span> <span class=\"k\">NOT</span> <span class=\"k\">EXISTS</span> <span class=\"n\">my_wasm_stage</span><span class=\"p\">;</span>\n\n<span class=\"c1\">-- Upload the .wasm file to the stage (replace with your actual path and stage name)</span>\n<span class=\"c1\">-- Example: PUT fs:///path/to/your/project/target/wasm32-wasip1/release/arrow_udf_example.wasm @my_wasm_stage;</span>\n<span class=\"n\">PUT</span> <span class=\"n\">fs</span><span class=\"p\">:</span><span class=\"o\">///</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">arrow_udf_example</span><span class=\"p\">.</span><span class=\"n\">wasm</span> <span class=\"o\">@</span><span class=\"n\">my_wasm_stage</span><span class=\"p\">;</span>\n\n<span class=\"c1\">-- Create the WASM UDF</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">OR</span> <span class=\"k\">REPLACE</span> <span class=\"k\">FUNCTION</span> <span class=\"n\">fib_wasm</span> <span class=\"p\">(</span><span class=\"nb\">INT</span><span class=\"p\">)</span>\n<span class=\"k\">RETURNS</span> <span class=\"nb\">INT</span>\n<span class=\"k\">LANGUAGE</span> <span class=\"n\">wasm</span>\n<span class=\"k\">HANDLER</span> <span class=\"o\">=</span> <span class=\"s1\">'fib'</span>\n<span class=\"k\">AS</span> <span class=\"err\">$$</span><span class=\"o\">@</span><span class=\"n\">my_wasm_stage</span><span class=\"o\">/</span><span class=\"n\">arrow_udf_example</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">$$</span><span class=\"p\">;</span>\n\n<span class=\"c1\">-- Using the WASM UDF</span>\n<span class=\"k\">SELECT</span> <span class=\"n\">fib_wasm</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">fibonacci_number</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  External UDF Server: interact your data seamlessly with your existing services\n</h3>\n\n<p>If you want to use computed data to interact with your business services seamlessly, you definitely need to consider External UDF servers. These servers, communicating with Databend via the Arrow Flight protocol, allow you to decouple your UDF logic from the database and integrate with existing microservices or specialized computation engines. </p>\n\n<p>For instance, one of our biggest customers in the gaming industry leverages External UDF servers to process real-time, sub-second computed data. This data is crucial for their game matching algorithms and feature engineering services, handling over 1,000 QPS with a P99 latency of less than 200ms. This showcases the power and scalability of External UDFs for demanding, low-latency applications.</p>\n\n<p>Here's how you can set up and use an External UDF Server, using a Fibonacci example implemented in Python:</p>\n\n<p><strong>1. Implement and Run the External UDF Server (Python Example):</strong></p>\n\n<p>First, you'll need the <code>databend_udf</code> Python package. You can install it via pip:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>databend-udf\n</code></pre>\n\n</div>\n\n\n\n<p>Then, create a Python script (e.g., <code>my_udf_server.py</code>) with the following content:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">databend_udf</span> <span class=\"kn\">import</span> <span class=\"n\">udf</span><span class=\"p\">,</span> <span class=\"n\">UDFServer</span>\n<span class=\"kn\">import</span> <span class=\"n\">logging</span>\n\n<span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@udf</span><span class=\"p\">(</span>\n    <span class=\"n\">input_types</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">INT</span><span class=\"sh\">\"</span><span class=\"p\">],</span>  <span class=\"c1\"># Corresponds to Databend's INT type\n</span>    <span class=\"n\">result_type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">INT</span><span class=\"sh\">\"</span><span class=\"p\">,</span>    <span class=\"c1\"># Corresponds to Databend's INT type\n</span>    <span class=\"n\">skip_null</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>       <span class=\"c1\"># Optional: if True, null inputs won't be passed to the function\n</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"c1\"># The UDF server will listen on this address\n</span>    <span class=\"n\">udf_server</span> <span class=\"o\">=</span> <span class=\"nc\">UDFServer</span><span class=\"p\">(</span>\n        <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">0.0.0.0:8815</span><span class=\"sh\">\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"c1\"># Register the function with the server\n</span>    <span class=\"n\">udf_server</span><span class=\"p\">.</span><span class=\"nf\">add_function</span><span class=\"p\">(</span><span class=\"n\">fib</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Start the server\n</span>    <span class=\"n\">udf_server</span><span class=\"p\">.</span><span class=\"nf\">serve</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Run this Python script. It will start a server listening on <code>0.0.0.0:8815</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>python my_udf_server.py\n</code></pre>\n\n</div>\n\n\n\n<p><strong>2. Create the External Function in Databend:</strong></p>\n\n<p>Once your UDF server is running, you can register it in Databend:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"c1\">-- Create the external function, pointing to the running server</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">OR</span> <span class=\"k\">REPLACE</span> <span class=\"k\">FUNCTION</span> <span class=\"n\">fib_external</span> <span class=\"p\">(</span><span class=\"n\">val</span> <span class=\"nb\">INT</span><span class=\"p\">)</span>\n<span class=\"k\">RETURNS</span> <span class=\"nb\">INT</span>\n<span class=\"k\">LANGUAGE</span> <span class=\"n\">python</span>\n<span class=\"k\">HANDLER</span> <span class=\"o\">=</span> <span class=\"s1\">'fib'</span>  <span class=\"c1\">-- This must match the function name in your Python script</span>\n<span class=\"n\">ADDRESS</span> <span class=\"o\">=</span> <span class=\"s1\">'http://0.0.0.0:8815'</span><span class=\"p\">;</span> <span class=\"c1\">-- The address of your UDF server</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>3. Using the External UDF:</strong></p>\n\n<p>Now you can call this function in your SQL queries just like any other UDF:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"k\">SELECT</span> <span class=\"n\">fib_external</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">fibonacci_number</span><span class=\"p\">;</span>\n<span class=\"c1\">-- Expected output: 55</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Best Practices\n</h2>\n\n<p>Most Databend users don‚Äôt care about UDF theory‚Äîthey care about what works, what breaks, and what saves time. After seeing dozens of teams (and making plenty of mistakes myself), here‚Äôs the honest truth:</p>\n\n<p>If you can do it in SQL, do it in SQL. Lambda UDFs are instant, transparent, and you‚Äôll thank yourself later when you need to debug at 2am. But don‚Äôt force it‚Äîonce your logic starts looking like a regex contest or you‚Äôre copying the same formula everywhere, switch gears.</p>\n\n<p>Python and JavaScript UDFs are the real workhorses. Python is the default for anything that smells like business logic, validation, LLM, RAG, or data wrangling. JavaScript is the secret weapon for JSON or semi-structured messes‚Äîespecially if you‚Äôre coming from a web background. Both are easy to write, but don‚Äôt expect magic performance. If you‚Äôre processing millions of rows per second, you‚Äôll hit a wall. For most ETL, though? They‚Äôre perfect.</p>\n\n<p>WASM is for the performance-obsessed. If you‚Äôre building a recommendation engine, crunching numbers for a game, or your boss keeps asking ‚Äúcan this be faster?‚Äù‚Äîbite the bullet, learn some Rust, and ship a WASM UDF. It‚Äôs not easy, but it‚Äôs the only way to get close to native speed inside Databend. Most people never need it. If you do, you‚Äôll know.</p>\n\n<p>External UDF Servers are for teams with real infrastructure‚Äîwhen you already have a service, a model, or a matching engine you trust, and you want Databend to tap into it. There‚Äôs network overhead, but you get freedom: scale compute separately, deploy in your own stack, and keep business logic where it belongs. Just remember to batch requests, or you‚Äôll be debugging latency charts all day.</p>\n\n<p>We do have some basic benchmarking the average execution time per row for different Databend UDF types using the following SQL, but performance is not the only factor to consider when choosing a UDF type. It is recommended to measure the performance of your specific use case(like simplicity, ease of debugging, ease of maintenance, etc.) before making a decision.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"k\">SELECT</span> <span class=\"n\">fib</span><span class=\"p\">((</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"p\">)::</span><span class=\"n\">Int32</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"k\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">)</span> <span class=\"n\">t</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">IGNORE_RESULT</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Here are the results:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>UDF Type</th>\n<th>Avg. Time per Row (¬µs)</th>\n<th>Typical Use Case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Lambda UDF</td>\n<td>-</td>\n<td>Simple transforms, prototyping</td>\n</tr>\n<tr>\n<td>Python UDF</td>\n<td>0.18</td>\n<td>Complex logic, AI integration</td>\n</tr>\n<tr>\n<td>JavaScript UDF</td>\n<td>2.68</td>\n<td>Lightweight data processing</td>\n</tr>\n<tr>\n<td>WASM UDF</td>\n<td>0.11</td>\n<td>High-performance computation</td>\n</tr>\n<tr>\n<td>External UDF</td>\n<td>23.2</td>\n<td>Large-scale, distributed workloads</td>\n</tr>\n</tbody>\n</table></div>\n\n<p><em>Note: External UDF timing includes network overhead; actual compute time is often less.</em></p>\n\n<p>The best teams start simple, refactor when it hurts, and always measure before optimizing. Don‚Äôt overthink it. Every UDF type has its place‚Äîwhat matters is using the right one for your problem, not the fanciest one in the docs.</p>\n\n<p>If you‚Äôre still unsure, ask around‚Äîmost Databend users are happy to share what worked (and what didn‚Äôt) in production.</p>\n\n<h3>\n  \n  \n  Getting Started\n</h3>\n\n<ul>\n<li><a href=\"https://databend.com\" rel=\"noopener noreferrer\">Databend</a></li>\n<li><a href=\"https://docs.databend.com/guides/query/udf\" rel=\"noopener noreferrer\">Databend UDF Documentation</a></li>\n<li><a href=\"https://link.databend.com/join-slack\" rel=\"noopener noreferrer\">Community Slack</a></li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Iterator in Python (4)","url":"https://dev.to/hyperkai/iterator-in-python-4-3j8b","date":1750876795,"author":"Super Kai (Kazuya Ito)","guid":170927,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-1-3341\">My post</a> explains an iterator (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-2-3o4i\">My post</a> explains an iterator (2) and copy.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-3-2pj6\">My post</a> explains a generator.</li>\n</ul>\n\n<p>You can create a class-based iterator with <a href=\"https://docs.python.org/3.13/library/stdtypes.html#container.__iter__\" rel=\"noopener noreferrer\">__iter__()</a> and/or <a href=\"https://docs.python.org/3.13/library/stdtypes.html#iterator.__next__\" rel=\"noopener noreferrer\">__next__()</a> as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>Basically, <code>__iter__()</code> is used to return an iterator.</li>\n<li>Basically, <code>__next__()</code> is used to return the next element.</li>\n</ul>\n\n<h4>\n  \n  \n  &lt;<strong><strong>iter</strong>() &amp; <strong>next</strong>()</strong>&gt;\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Cls</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__next__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">):</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">raise</span> <span class=\"nb\">StopIteration</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;__main__.Cls object at 0x000001FCD688B350&gt;\n</span>\n<span class=\"c1\"># It gets an element but it's not necessary for \n# a `for` statement, `__next__()` and `next()`.\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;__main__.Cls object at 0x000001FCD688B350&gt;\n</span>\n<span class=\"c1\"># It gets an element but it's not necessary for \n# a `for` statement, `__next__()` and `next()`.\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;__main__.Cls object at 0x000001FCD688B350&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># a\n# b\n# c\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># StopIteration:\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  &lt;<strong><strong>next</strong>()</strong>&gt;\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Cls</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__next__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">):</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">raise</span> <span class=\"nb\">StopIteration</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;__main__.Cls object at 0x000001FCD8360440&gt;\n</span>\n<span class=\"c1\"># v = v.__iter__() # AttributeError: 'Cls' object has no attribute '__iter__'\n# v = iter(v) # TypeError: 'Cls' object is not iterable\n</span>\n<span class=\"c1\"># for x in v: # TypeError: 'Cls' object is not iterable\n#     print(x)\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># StopIteration:\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<p>*<code>__next__()</code> can be the generator with one or more <code>yield</code> statement.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Cls</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__next__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">):</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">yield</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"c1\"># yield from self.data[i]\n</span>        <span class=\"k\">raise</span> <span class=\"nb\">StopIteration</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;__main__.Cls object at 0x000001FCD2EE4E60&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">().</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">().</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">().</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">().</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># RuntimeError: generator raised StopIteration\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)))</span> <span class=\"c1\"># RuntimeError: generator raised StopIteration\n</span></code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  &lt;<strong><strong>iter</strong>()</strong>&gt;\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Cls</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;__main__.Cls object at 0x000001FCD6888F80&gt;\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span> <span class=\"c1\"># It gets an element but it's not necessary.\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;__main__.Cls object at 0x000001FCD6888F80&gt;\n</span>\n<span class=\"c1\"># v = iter(v) # TypeError: iter() returned non-iterator of type 'Cls'\n</span>\n<span class=\"c1\"># for x in v: # TypeError: iter() returned non-iterator of type 'Cls'\n#     print(x)\n</span>\n<span class=\"c1\"># print(v.__next__())\n# AttributeError: 'Cls' object has no attribute '__next__'\n</span>\n<span class=\"c1\"># print(next(v)) # TypeError: 'Cls' object is not an iterator\n</span></code></pre>\n\n</div>\n\n\n\n<p>*<code>__iter__()</code> can be the normal function which returns <code>'Hello'</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Cls</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sh\">'</span><span class=\"s\">Hello</span><span class=\"sh\">'</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;__main__.Cls object at 0x000001FCD2EE4E60&gt;\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span> <span class=\"c1\"># It gets an element to print.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># Hello\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># TypeError: iter() returned non-iterator of type 'list'\n</span></code></pre>\n\n</div>\n\n\n\n<p>*<code>__iter__()</code> can be the generator with one or more <code>yield</code> statement.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Cls</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># def __iter__(self): # It's a generator.\n</span>    <span class=\"c1\">#     yield 'a'       # It gets the same result.\n</span>    <span class=\"c1\">#     yield 'b'\n</span>    <span class=\"c1\">#     yield 'c'\n</span>\n    <span class=\"c1\"># def __iter__(self):            # It's a generator.\n</span>    <span class=\"c1\">#     yield from ['a', 'b', 'c'] # It gets the same result.\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;__main__.cls object at 0x000001FCD1A14E60&gt;\n</span>\n<span class=\"c1\"># It gets an element but it's not necessary for a `for` statement.\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;list_iterator object at 0x000001FCD1C42EF0&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span> <span class=\"c1\"># It gets an element for `__next__()`.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># StopIteration:\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nc\">Cls</span><span class=\"p\">()</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># It gets an element for `next()`.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Iterator in Python (3)","url":"https://dev.to/hyperkai/iterator-in-python-3-2pj6","date":1750876597,"author":"Super Kai (Kazuya Ito)","guid":170926,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-1-3341\">My post</a> explains an iterator (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-2-3o4i\">My post</a> explains an iterator (2) and copy.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-4-3j8b\">My post</a> explains a class-based iterator with <a href=\"https://docs.python.org/3.13/library/stdtypes.html#container.__iter__\" rel=\"noopener noreferrer\">__iter__()</a> and/or <a href=\"https://docs.python.org/3.13/library/stdtypes.html#iterator.__next__\" rel=\"noopener noreferrer\">__next__()</a>.</li>\n</ul>\n\n<p>A generator:</p>\n\n<ul>\n<li>is the function with one or more <code>yield</code> statements. *A <code>yield</code> statement is a <code>yield</code> or <code>yield from</code>.</li>\n<li>can return an iterator.</li>\n<li>'s iterator can be create by a generator comprehension.</li>\n<li>terminates if there is no element to return, if <a href=\"https://docs.python.org/3/reference/expressions.html#generator.close\" rel=\"noopener noreferrer\">close()</a> is called or of course if error occurs.</li>\n<li>'s iterator cannot be copied.</li>\n</ul>\n\n<p>You can create a generator with a function and one or more <code>yield</code> statements and access it with <code>next()</code> as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>A <code>yield</code> statements is a <code>yield</code> or <code>yield from</code>.</li>\n<li>A <code>yield</code> can return any types of an element.</li>\n<li>A <code>yield from</code> can only return an iterable.</li>\n</ul>\n\n<p>&lt;<strong><code>yield</code></strong>&gt;<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;function func at 0x000001FCD2FF93A0&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span> <span class=\"c1\"># &lt;class 'function'&gt;\n</span>\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"nf\">func</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;generator object func at 0x000001FCD3015220&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># &lt;class 'generator'&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<p>&lt;<strong><code>yield from</code></strong>&gt;<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"k\">from</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"k\">yield</span> <span class=\"k\">from</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;function func at 0x000001FCD640B1A0&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span> <span class=\"c1\"># &lt;class 'function'&gt;\n</span>\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"nf\">func</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;generator object func at 0x000001FCD661DD80&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># &lt;class 'generator'&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># d\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># e\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># f\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<p>This is how a generator works as shown below:</p>\n\n<p>&lt;<strong><code>yield</code></strong>&gt;<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">func() starts.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">\"</span><span class=\"s\">func() pauses.</span><span class=\"sh\">\"</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">func() resumes.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">\"</span><span class=\"s\">func() pauses again.</span><span class=\"sh\">\"</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">func() resumes again.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">\"</span><span class=\"s\">func() terminates.</span><span class=\"sh\">\"</span>\n\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"nf\">func</span><span class=\"p\">()</span> <span class=\"c1\"># `func()` doesn't start yet.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span>\n<span class=\"c1\"># func() starts.\n# func() pauses.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span>\n<span class=\"c1\"># func() resumes.\n# func() pauses again.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span>\n<span class=\"c1\"># func() resumes again.\n# func() terminates.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<p>&lt;<strong><code>yield from</code></strong>&gt;<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">func() starts.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"k\">from</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">func() pauses.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">func() resumes and pauses.</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">func() resumes.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"k\">from</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">func() pauses.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">func() resumes and terminates.</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"nf\">func</span><span class=\"p\">()</span> <span class=\"c1\"># `func()` doesn't start yet.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span>\n<span class=\"c1\"># func() starts.\n# func() pauses.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span>\n<span class=\"c1\"># func() resumes and pauses.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span>\n<span class=\"c1\"># func() resumes.\n# func() pauses.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span>\n<span class=\"c1\"># func() resumes and terminates.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration: \n</span></code></pre>\n\n</div>\n\n\n\n<p>This is the generator with a <code>for</code> statement as shown below:</p>\n\n<p>&lt;<strong><code>yield</code></strong>&gt;<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">]:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">x</span>\n\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"nf\">func</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<p>&lt;<strong><code>yield from</code></strong>&gt;<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">]]:</span>\n        <span class=\"k\">yield</span> <span class=\"k\">from</span> <span class=\"n\">x</span>\n\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"nf\">func</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># d\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># e\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># f\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<p>A generator comprehension can create a generator's iterator as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;generator object &lt;genexpr&gt; at 0x00000168B98E9080&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># &lt;class 'generator'&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># A\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># B\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># C\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/reference/expressions.html#generator.close\" rel=\"noopener noreferrer\">close()</a> can terminate a generator as shown below. *There are no arguments:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span>\n\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"nf\">func</span><span class=\"p\">()</span>\n\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span>\n\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"nf\">func</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span>\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span>\n\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"nf\">func</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span>\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<p>*<code>close()</code> should be used in a <code>finally</code> clause to terminate a generator for when error occurs.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span>\n\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"nf\">func</span><span class=\"p\">()</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>A generator's iterator cannot be copied as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://docs.python.org/3/tutorial/datastructures.html\" rel=\"noopener noreferrer\">copy()</a> can do shallow copy.</li>\n<li>\n<a href=\"https://docs.python.org/3/library/copy.html#copy.deepcopy\" rel=\"noopener noreferrer\">deepcopy()</a> can do deep copy.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">copy</span>\n<span class=\"kn\">from</span> <span class=\"n\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">deepcopy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span>\n\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"nf\">func</span><span class=\"p\">()</span>\n\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: cannot pickle 'generator' object\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Iterator in Python (2)","url":"https://dev.to/hyperkai/iterator-in-python-2-3o4i","date":1750876533,"author":"Super Kai (Kazuya Ito)","guid":170925,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-1-3341\">My post</a> explains an iterator (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-3-2pj6\">My post</a> explains a generator.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-4-3j8b\">My post</a> explains a class-based iterator with <a href=\"https://docs.python.org/3.13/library/stdtypes.html#container.__iter__\" rel=\"noopener noreferrer\">__iter__()</a> and/or <a href=\"https://docs.python.org/3.13/library/stdtypes.html#iterator.__next__\" rel=\"noopener noreferrer\">__next__()</a>.</li>\n</ul>\n\n<p><a href=\"https://docs.python.org/3/library/functions.html#iter\" rel=\"noopener noreferrer\">iter()</a> or <a href=\"https://docs.python.org/3.13/library/stdtypes.html#container.__iter__\" rel=\"noopener noreferrer\">__iter__()</a> can create an iterator with a list, tuple, set, dictionary, iterator, string or <code>range()</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"c1\"># List\n</span><span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;list_iterator object at 0x0000026906F3C460&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v2</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># a\n# b\n# c\n# d\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"c1\"># Tuple\n</span><span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;tuple_iterator object at 0x000002821F7695A0&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v2</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># a\n# b\n# c\n# d\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">}</span> <span class=\"c1\"># Set\n</span><span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;set_iterator object at 0x00000282203069C0&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v2</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># c\n# a\n# b\n# d\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">fname</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">lname</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">Smith</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">gender</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">Male</span><span class=\"sh\">'</span><span class=\"p\">}</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>                                            <span class=\"c1\"># Dictionary\n</span><span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">().</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;dict_keyiterator object at 0x0000028220423FB0&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v2</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># fname\n# lname\n# age\n# gender\n</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">())</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">().</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;dict_valueiterator object at 0x00000282204FEE80&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v2</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># John\n# Smith\n# 36\n# Male\n</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">())</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">().</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;dict_itemiterator object at 0x00000282202F1670&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v2</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># ('fname', 'John')\n# ('lname', 'Smith')\n# ('age', 36)\n# ('gender', 'Male')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">])</span> <span class=\"c1\"># Iterator\n</span><span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;list_iterator object at 0x0000026906E80760&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v2</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># a\n# b\n# c\n# d\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Hello</span><span class=\"sh\">'</span> <span class=\"c1\"># String\n</span><span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;str_ascii_iterator object at 0x0000026906CEA560&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v2</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># H\n# e\n# l\n# l\n# o\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;range_iterator object at 0x000001F954F52150&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v2</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0\n# 1\n# 2\n# 3\n# 4\n</span></code></pre>\n\n</div>\n\n\n\n<p>A generator can create an iterator as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span>\n    <span class=\"k\">yield</span> <span class=\"k\">from</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;function func at 0x000001FCD2E3CAE0&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span> <span class=\"c1\"># &lt;class 'function'&gt;\n</span>\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"nf\">func</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;generator object func at 0x00000282207E3CC0&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># &lt;class 'generator'&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v2</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># a\n# b\n# c\n# d\n</span></code></pre>\n\n</div>\n\n\n\n<p>A generator comprehension can create a generator's iterator as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;generator object func at 0x00000282207E3CC0&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># &lt;class 'generator'&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># A\n# B\n# C\n# D\n</span></code></pre>\n\n</div>\n\n\n\n<p>A huge iterator doesn't get <code>MemoryError</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">100000000</span><span class=\"p\">))</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># 0\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># 1\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">))</span> <span class=\"c1\"># 2\n# ...\n</span></code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a>(<a href=\"https://docs.python.org/3/library/itertools.html#itertools.repeat\" rel=\"noopener noreferrer\">repeat()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.pairwise\" rel=\"noopener noreferrer\">pairwise()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.combinations\" rel=\"noopener noreferrer\">combinations()</a>) can create iterators as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">repeat</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">repeat</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Hello</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">times</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># repeat('Hello')\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;class 'itertools.repeat'&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># Hello\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># Hello\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># Hello\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">pairwise</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">pairwise</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">pairwise</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.pairwise object at 0x000001BE9A1ABF70&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('C', 'D')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">combinations</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;itertools.combinations object at 0x000002690700D170&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'B')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('A', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># ('B', 'C')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<p>An iterator can be used through multiple variables continuously as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v2</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;list_iterator object at 0x000002821F75D240&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">))</span> <span class=\"c1\"># d\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<p>An iterator except the one created by a generator or generator comprehension can be copied as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://docs.python.org/3/library/copy.html#copy.copy\" rel=\"noopener noreferrer\">copy()</a> does shallow copy. *There are no arguments.</li>\n<li>\n<a href=\"https://docs.python.org/3/library/copy.html#copy.deepcopy\" rel=\"noopener noreferrer\">deepcopy()</a>  does deep copy. *There are no arguments.</li>\n<li>\n<code>iter()</code> cannot do shallow copy.</li>\n<li>\n<code>deepcopy()</code> should be used because it's safe, doing copy deeply while <code>copy()</code> isn't safe, doing copy shallowly.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">copy</span>\n<span class=\"kn\">from</span> <span class=\"n\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">deepcopy</span>\n\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"nf\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;list_iterator object at 0x000002821F75D240&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">))</span> <span class=\"c1\"># d\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">))</span> <span class=\"c1\"># d\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n\n\n<p>The variables <code>v1</code> and <code>v2</code> refer to the same iterator unless copied as shown below. *<code>is</code> keyword can check if <code>v1</code> and <code>v2</code> refer to the same iterator:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">copy</span>\n<span class=\"kn\">from</span> <span class=\"n\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">deepcopy</span>\n\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span> <span class=\"c1\"># v2 refers to the same iterator as v1.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;list_iterator object at 0x000001FCD6B64DC0&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;list_iterator object at 0x000001FCD6B64DC0&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># True\n</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>     <span class=\"c1\"># v2 refers the different iterator\n</span><span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"c1\"># from v1.\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;list_iterator object at 0x000001FCD6B64DC0&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;list_iterator object at 0x000001FCD6B66020&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Iterator in Python (1)","url":"https://dev.to/hyperkai/iterator-in-python-1-3341","date":1750876465,"author":"Super Kai (Kazuya Ito)","guid":170924,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-2-3o4i\">My post</a> explains an iterator (2) and copy.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-3-2pj6\">My post</a> explains a generator.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-4-3j8b\">My post</a> explains a class-based iterator with <a href=\"https://docs.python.org/3.13/library/stdtypes.html#container.__iter__\" rel=\"noopener noreferrer\">__iter__()</a> and/or <a href=\"https://docs.python.org/3.13/library/stdtypes.html#iterator.__next__\" rel=\"noopener noreferrer\">__next__()</a>.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/itertools-in-python-1-4a20\">My post</a> explains <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a> about <a href=\"https://docs.python.org/3/library/itertools.html#itertools.count\" rel=\"noopener noreferrer\">count()</a>, <a href=\"https://docs.python.org/3/library/itertools.html#itertools.cycle\" rel=\"noopener noreferrer\">cycle()</a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.repeat\" rel=\"noopener noreferrer\">repeat()</a>.</li>\n</ul>\n\n<p>An iterator:</p>\n\n<ul>\n<li>is the object which can return an element one by one to use huge data with low memory usage so it doesn't get <code>MemoryError</code>.</li>\n<li>is immutable so it cannot be changed.</li>\n<li>can be accessed by <a href=\"https://docs.python.org/3/library/functions.html#next\" rel=\"noopener noreferrer\">next()</a>, <a href=\"https://docs.python.org/3.13/library/stdtypes.html#iterator.__next__\" rel=\"noopener noreferrer\">__next__()</a> or <code>for</code> loop.</li>\n<li>can be used with <a href=\"https://docs.python.org/3/library/functions.html#len\" rel=\"noopener noreferrer\">len()</a> after using <a href=\"https://docs.python.org/3/library/functions.html#func-list\" rel=\"noopener noreferrer\">list()</a>, <a href=\"https://docs.python.org/3/library/functions.html#func-tuple\" rel=\"noopener noreferrer\">tuple()</a> or <a href=\"https://docs.python.org/3/library/functions.html#func-set\" rel=\"noopener noreferrer\">set()</a> or with <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.ilen\" rel=\"noopener noreferrer\">more_itertools.ilen()</a> to get the length. *<a href=\"https://more-itertools.readthedocs.io/en/stable/api.html\" rel=\"noopener noreferrer\">more-itertools</a> must be installed with <code>pip install more-itertools</code>.</li>\n<li>cannot be directly used with <code>len()</code> to get the length.</li>\n<li>cannot be accessed and changed by indexing or slicing.</li>\n<li>has <a href=\"https://docs.python.org/3.13/library/stdtypes.html#container.__iter__\" rel=\"noopener noreferrer\">__iter__()</a> and <code>__next__()</code>.</li>\n<li>raises <code>StopIteration:</code> if there is no element to return.</li>\n<li>can be created by <a href=\"https://docs.python.org/3/library/functions.html#iter\" rel=\"noopener noreferrer\">iter()</a> or <code>__iter__()</code> with a list, tuple, set, dictionary, iterator, string or <a href=\"https://docs.python.org/3/library/functions.html#func-range\" rel=\"noopener noreferrer\">range()</a>, by a generator or generator comprehension or by <a href=\"https://docs.python.org/3/library/itertools.html#module-itertools\" rel=\"noopener noreferrer\">itertools</a>:\n*Memos:\n\n<ul>\n<li>A generator is the function with one or more <code>yield</code> statements.</li>\n<li>A <code>yield</code> statement is <code>yield</code> or <code>yield from</code>.</li>\n<li>A generator comprehension is an expression.</li>\n</ul>\n\n\n</li>\n\n<li>can be used through multiple variables continuously.</li>\n\n<li>except the one created by a generator or generator comprehension can be copied to refer to the same iterator.</li>\n\n</ul>\n\n\n\n<h1>\n  \n  \n  <em>An iterator is for huge data so it doesn't get <code>MemoryError</code>.</em>\n</h1>\n\n\n\n\n<p>You can create an iterator as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<code>iter()</code> can create an iterator:\n*Memos:\n\n<ul>\n<li>The 1st argument is <code>object</code>(Required-Type:<code>iterable</code> or <code>callable</code>) for an iterator if <code>sentinel</code> isn't set or a callable if <code>sentinel</code> is set. *Don't use <code>object=</code>.</li>\n<li>The 2nd argument is <code>sentinel</code>(Optional) to raise error if <code>object</code> returns the same element as <code>sentinel</code>. *Don't use <code>sentinel=</code>.</li>\n</ul>\n</li>\n<li>\n<code>__iter__()</code> can also create an iterator. *There are no arguments.</li>\n<li>\n<code>next()</code> can get an element from an iterator:\n*Memos:\n\n<ul>\n<li>The 1st argument is <code>iterator</code>(Required-Type:<code>iterable</code>) for an iterator. *Don't use <code>iterator=</code>.</li>\n<li>The 2nd argument is <code>default</code>(Optional) to return its value if a iterator is terminated. *Don't use <code>default=</code>.</li>\n<li>Error occurs if default isn't set and if an iterator is terminated.</li>\n</ul>\n</li>\n<li>\n<code>__next__()</code> can also get an element from an iterator. *There are no arguments.</li>\n</ul>\n<h4>\n  \n  \n  &lt;<strong>iter(object) &amp; next(iterator)</strong>&gt;\n</h4>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;list_iterator object at 0x000002821F75D240&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># d\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># StopIteration:\n</span></code></pre>\n\n</div>\n\n<h4>\n  \n  \n  &lt;<strong>__iter__() &amp; __next__()</strong>&gt;\n</h4>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;list_iterator object at 0x000001FCD2883280&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># d\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__next__</span><span class=\"p\">())</span> <span class=\"c1\"># StopIteration: \n</span></code></pre>\n\n</div>\n\n<h4>\n  \n  \n  &lt;<strong>iter(object) &amp; next(iterator, default)</strong>&gt;\n</h4>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;list_iterator object at 0x000002821F75D240&gt;\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">No value</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># a\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">No value</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># b\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">No value</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># c\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">No value</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># d\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">No value</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># No value\n</span></code></pre>\n\n</div>\n\n<h4>\n  \n  \n  &lt;<strong>iter(object) &amp; for loop</strong>&gt;\n</h4>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;list_iterator object at 0x000001FCD2F90790&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># a\n# b\n# c\n# d\n</span></code></pre>\n\n</div>\n\n<h4>\n  \n  \n  &lt;<strong>iter(object, sentinel) &amp; for loop</strong>&gt;\n</h4>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">random</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_random_numbers</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">get_random_numbers</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;callable_iterator object at 0x000001FCD2F376A0&gt;\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># 10\n# 6\n# 2\n# 1\n# 6\n</span></code></pre>\n\n</div>\n\n\n<p>An iterator can be used with <code>len()</code> after using <code>list()</code>, <code>tuple()</code> or <code>set()</code> or with <code>more_itertools.ilen()</code> to get the length as shown below. *<code>more-itertools</code> must be installed with <code>pip install more-itertools</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">more_itertools</span> <span class=\"kn\">import</span> <span class=\"n\">ilen</span>\n\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v5</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"nf\">tuple</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">v4</span><span class=\"p\">)))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">ilen</span><span class=\"p\">(</span><span class=\"n\">v5</span><span class=\"p\">))</span>\n<span class=\"c1\"># 4\n</span></code></pre>\n\n</div>\n\n\n\n<p>An iterator cannot be directly used with <code>len()</code> to get the length as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"c1\"># TypeError: object of type 'list_iterator' has no len()\n</span></code></pre>\n\n</div>\n\n\n\n<p>An iterator cannot be accessed by indexing or slicing as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># TypeError: 'list_iterator' object is not subscriptable\n</span></code></pre>\n\n</div>\n\n\n\n<p>You cannot access and change an iterator by indexing or slicing because it's immutable as shown below. *A <a href=\"https://docs.python.org/3/tutorial/datastructures.html#the-del-statement\" rel=\"noopener noreferrer\">del statement</a> can still be used to remove a variable itself:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">X</span><span class=\"sh\">'</span>\n<span class=\"c1\"># v[-6] = 'X'\n</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Z</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"c1\"># TypeError: 'list_iterator' object does not support item assignment\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># del v[-6]\n</span><span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"c1\"># TypeError: 'list_iterator' object does not support item deletion\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"k\">del</span> <span class=\"n\">v</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># NameError: name 'v' is not defined\n</span></code></pre>\n\n</div>\n\n\n\n<p>If you really want to access and change an iterator, use <a href=\"https://docs.python.org/3/library/functions.html#func-list\" rel=\"noopener noreferrer\">list()</a> and <a href=\"https://docs.python.org/3/library/functions.html#iter\" rel=\"noopener noreferrer\">iter()</a> or <a href=\"https://docs.python.org/3.13/library/stdtypes.html#container.__iter__\" rel=\"noopener noreferrer\">__iter__()</a> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Here\n</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">X</span><span class=\"sh\">'</span>\n<span class=\"c1\"># v[-6] = 'X'\n</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Z</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Here\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span> <span class=\"c1\"># Here\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># X\n# b\n# Y\n# Z\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Here\n</span>\n<span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># del v[-6]\n</span><span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># Here\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">__iter__</span><span class=\"p\">()</span> <span class=\"c1\"># Here\n</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># b\n# c\n# d\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Behind the Underscores EP08: Length and iteration Methods (__len__, __iter__, __next__, __contains__)","url":"https://dev.to/hevalhazalkurt/behind-the-underscores-ep08-length-and-iteration-methods-len-iter-next-3acl","date":1750874787,"author":"Heval Hazal Kurt","guid":170923,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F0xuyopmfrjy93ruhsdrv.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F0xuyopmfrjy93ruhsdrv.jpg\" alt=\"Behind the Underscores EP08: Length and iteration Methods\" width=\"800\" height=\"533\"></a></p>\n\n<p>If you've ever used a <code>for</code> loop, checked if a value is in a list, or called <code>len()</code> on something, you've been using Python's data model. Specifically, special methods like <code>__len__</code>, <code>__iter__</code>, <code>__next__</code>, and <code>__contains__</code>. These ‚Äúdunder methods‚Äù let you make your own Python objects behave like built-in types. Want your custom class to work with <code>len()</code>, <code>in</code>, or a <code>for</code> loop? These methods are the key.</p>\n\n<p>Let‚Äôs break them down with examples, everyday explanations.</p>\n\n<h2>\n  \n  \n  1. <code>__len__</code>: Make <code>len()</code> Work on Your Object\n</h2>\n\n<h3>\n  \n  \n  What it does:\n</h3>\n\n<p>When you call <code>len(something)</code>, Python looks for a <code>__len__()</code> method under the hood.</p>\n\n<h3>\n  \n  \n  Why it matters:\n</h3>\n\n<p>If you build a class and want <code>len(my_obj)</code> to return something meaningful, like how many items are inside it, you define <code>__len__</code>.</p>\n\n<h3>\n  \n  \n  Example:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">ShoppingCart</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_item</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__len__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">cart</span> <span class=\"o\">=</span> <span class=\"nc\">ShoppingCart</span><span class=\"p\">()</span>\n<span class=\"n\">cart</span><span class=\"p\">.</span><span class=\"nf\">add_item</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">apple</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">cart</span><span class=\"p\">.</span><span class=\"nf\">add_item</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">banana</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">cart</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: 2\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  2. <code>__iter__</code>: Make Your Object Iterable\n</h2>\n\n<h3>\n  \n  \n  What it does:\n</h3>\n\n<p>This method lets Python know how to start looping over your object.</p>\n\n<h3>\n  \n  \n  Why it matters:\n</h3>\n\n<p>With <code>__iter__</code>, your object can be used in a <code>for</code> loop, list comprehensions, or anything that expects something iterable.</p>\n\n<h3>\n  \n  \n  Example:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Numbers</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>  <span class=\"c1\"># Could also return a custom iterator\n</span>\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"nc\">Numbers</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>  <span class=\"c1\"># 10 20 30\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  3. <code>__next__</code>: Define What Happens On Each Iteration Step\n</h2>\n\n<h3>\n  \n  \n  What it does:\n</h3>\n\n<p>This method returns the next item from your object. It‚Äôs usually paired with <code>__iter__</code>.</p>\n\n<h3>\n  \n  \n  Why it matters:\n</h3>\n\n<p>If you're building a custom iterator from scratch, <code>__next__</code> is where the actual ‚Äústep-by-step\" happens.</p>\n\n<h3>\n  \n  \n  Example:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Countdown</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">start</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span>  <span class=\"c1\"># The object is its own iterator\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__next__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"nb\">StopIteration</span>\n        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">val</span>\n\n<span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"nc\">Countdown</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>  <span class=\"c1\"># 3 2 1 0\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  4. <code>__contains__</code>: Control How <code>in</code> Works\n</h2>\n\n<h3>\n  \n  \n  What it does:\n</h3>\n\n<p>This method is triggered when you write something like:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">apple</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">cart</span><span class=\"p\">:</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Why it matters:\n</h3>\n\n<p>It lets you define what it means for an item to ‚Äúbe inside‚Äù your object.</p>\n\n<h3>\n  \n  \n  Example:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">ShoppingCart</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">apple</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">banana</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__contains__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span>\n\n<span class=\"n\">cart</span> <span class=\"o\">=</span> <span class=\"nc\">ShoppingCart</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">banana</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">cart</span><span class=\"p\">)</span>  <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">milk</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">cart</span><span class=\"p\">)</span>    <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n<p>If you don‚Äôt implement <code>__contains__</code>, Python will automatically fall back to looping over the object using <code>__iter__</code>. That‚Äôs helpful!</p>\n\n<h2>\n  \n  \n  How These Work Together\n</h2>\n\n<p>Let‚Äôs look at a bigger picture. When you do this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">something</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">my_obj</span><span class=\"p\">:</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Python tries the methods in this order:</p>\n\n<ol>\n<li>Try <code>__contains__</code>.</li>\n<li>If not available, try to iterate with <code>__iter__</code> and compare each item.</li>\n<li>If neither is available, it raises a <code>TypeError</code>.</li>\n</ol>\n\n<p>When you do this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">my_obj</span><span class=\"p\">:</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Python does this behind the scenes:</p>\n\n<ol>\n<li>Calls <code>__iter__()</code> to get an iterator.</li>\n<li>Repeatedly calls <code>__next__()</code> on the iterator.</li>\n<li>Stops when <code>StopIteration</code> is raised.</li>\n</ol>\n\n<h2>\n  \n  \n  Real-World Use Cases\n</h2>\n\n<ul>\n<li>\n<strong>Custom collections</strong>: Build your own data containers that behave like lists, sets, or queues.</li>\n<li>\n<strong>Data wrappers</strong>: Wrap API or database results in classes that are iterable and length-aware.</li>\n<li>\n<strong>Game states or UI systems</strong>: Control which components are active using <code>__contains__</code>.</li>\n</ul>\n\n<h2>\n  \n  \n  You Don‚Äôt Always Need All of Them\n</h2>\n\n<p>You might just need <code>__iter__</code> if you're building a class that behaves like a list.</p>\n\n<p>You might only need <code>__len__</code> if you're showing count in a UI or enforcing limits.</p>\n\n<p>And sometimes, using <code>yield</code> and generators is even easier for iteration than managing <code>__next__</code> manually.</p>\n\n<h2>\n  \n  \n  Summary\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th><strong>Method</strong></th>\n<th><strong>Purpose</strong></th>\n<th><strong>Used by...</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__len__</code></td>\n<td>Define what <code>len(obj)</code> returns</td>\n<td><code>len()</code></td>\n</tr>\n<tr>\n<td><code>__iter__</code></td>\n<td>Make object iterable</td>\n<td>\n<code>for</code>, <code>in</code>, list comps</td>\n</tr>\n<tr>\n<td><code>__next__</code></td>\n<td>Get the next item in a loop</td>\n<td>\n<code>next()</code>, <code>for</code>\n</td>\n</tr>\n<tr>\n<td><code>__contains__</code></td>\n<td>Define <code>in</code> behavior</td>\n<td><code>\"x\" in obj</code></td>\n</tr>\n</tbody>\n</table></div>\n\n<h2>\n  \n  \n  Wrapping Up\n</h2>\n\n<p>These special methods are like magic doors into Python‚Äôs built-in behavior. Once you learn to use them, you can make your classes feel like real native Python types. If you're building something reusable or preparing for interviews, mastering <code>__len__</code>, <code>__iter__</code>, <code>__next__</code>, and <code>__contains__</code> is a great move.</p>\n\n\n\n\n<p>The original post is <a href=\"https://hevalhazalkurt.com/blog/behind-the-underscores-ep08-length-and-iteration-methods-__len__-__iter__-__next__-__contains__/\" rel=\"noopener noreferrer\">here</a>.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hello DEV Community! Excited to Connect & Automate","url":"https://dev.to/premthewizard/hello-dev-community-excited-to-connect-automate-4lb2","date":1750872526,"author":"Prem Pise","guid":170889,"unread":true,"content":"<h1>\n  \n  \n  Hello, Developers! üëã\n</h1>\n\n<p>My name's <strong>Prem</strong>, and I‚Äôve just completed high school. </p>\n\n<p>While I was in school, I spent a lot of time on my laptop. I always wished there was a way to automate repetitive tasks, like doing 30 Bing searches for... well, for <strong>rewards</strong> of course! üòÖ</p>\n\n<p>Naturally, I turned to <strong>ChatGPT</strong> for help, and guess what? It gave me a ready-made Python script! Every day, I asked it to improve the script to avoid detection by Microsoft and surprisingly, it worked! </p>\n\n<p>But‚Ä¶ then came <strong>greed</strong>! I created <strong>20 accounts</strong>, applied the same script with delays, managing IDs and passwords through a JSON file. Within three days, all the accounts were banned. No regrets though, I expected it. But my <strong>main three</strong> accounts survived, and I kept the automation running.</p>\n\n<p>Unfortunately, the <strong>Amazon gift voucher</strong> I had my eyes on disappeared from the rewards, Karma, I guess! </p>\n\n<h2>\n  \n  \n  My Journey into Automation &amp; Python\n</h2>\n\n<p>After finishing my exams, I asked ChatGPT about automation tools and specific fields to explore. That‚Äôs when I discovered <strong>Zapier</strong>, <strong>Make.com</strong>, and the beast ‚Äî <strong>Python</strong>! </p>\n\n<p>I instantly jumped into Zapier, completed all <strong>three beginner certifications</strong> in a day, and started building workflows. It was surprisingly fun and easy, until I hit the <strong>\"Paths\"</strong> feature. IF/ELSE logic fried my brain at first, but I managed to crack it eventually. </p>\n\n<h2>\n  \n  \n  What's Next?\n</h2>\n\n<p>Now that I‚Äôm comfortable with Zapier, I‚Äôve started diving deeper into <strong>Python</strong>. I‚Äôve enrolled in:</p>\n\n<p><strong>100 Days of Code: The Complete Python Pro Bootcamp on Udemy</strong> </p>\n\n<p>It‚Äôs been exciting learning new things every day. I‚Äôll be sharing my journey and automation experiments here!</p>\n\n<h2>\n  \n  \n  Let‚Äôs Connect &amp; Automate!\n</h2>\n\n<p>Is anyone else working on <strong>automation projects</strong> or <strong>web scraping</strong>?<br><br>\nWould love to connect, learn, and share with fellow automation enthusiasts!  </p>\n\n<p><strong>Let‚Äôs automate the boring stuff and have fun along the way!</strong> </p>\n\n<h1>\n  \n  \n  python #automation #webscraping #nocode #ai #zapier #make #introductions\n</h1>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PHardwareITK","url":"https://dev.to/akshudev_36/phardwareitk-416k","date":1750870792,"author":"AkshuDev","guid":170845,"unread":true,"content":"<h1>\n  \n  \n  I'm 12 and Built a Python Hardware Interface Toolkit (Yes, It Works)\n</h1>\n\n<p>Hi, I‚Äôm AkshuDev (Can't disclose my name) üëã ‚Äî I‚Äôm 12 years old, and over the last 5 months, I built a full hardware interface, OS toolkit, and virtual BIOS in <strong>pure Python</strong>.</p>\n\n<p>No C. (Unless u like opengl, but I don't provide it in publishes)<br>\nNo <code>ctypes</code>. (Okay a little bit)<br>\nNo dependencies (unless you want them).<br>\nJust Python.</p>\n\n<p>And it‚Äôs live on GitHub and PyPI.</p>\n\n\n<h2>\n  \n  \n  üîß What I Built\n</h2>\n<h3>\n  \n  \n  üöÄ PHardwareITK: Phoenix Hardware Interface Toolkit\n</h3>\n\n<p>This module is a <strong>complete system</strong> for:</p>\n\n<ul>\n<li>üì¶ File systems (PBFS: Phoenix Block File System)</li>\n<li>üß† Virtual CPUs (PVCPU, runs <code>.vasm</code> files)</li>\n<li>üßÆ Memory simulation</li>\n<li>üíæ BIOS interrupts and booting logic</li>\n<li>üñºÔ∏è GUI rendering using <strong>pure Python</strong> (no SDL2 required)</li>\n<li>üéÆ HGame: my own graphics engine inspired by <code>pygame</code>, but written from scratch</li>\n<li>üîó Permission management</li>\n<li>üß∞ Tools for OS builders and experimenters</li>\n<li>And way way more</li>\n</ul>\n\n<p>Here‚Äôs the GitHub repo:<br><br>\nüëâ <a href=\"https://github.com/AkshuDev/PHardwareITK\" rel=\"noopener noreferrer\">PHardwareITK on GitHub</a></p>\n\n<p>And it‚Äôs installable on PyPI:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>phardwareitk\n</code></pre>\n\n</div>\n\n\n\n<h1>\n  \n  \n  How It All Started\n</h1>\n\n<p>My first module was PheonixAppAPI. It was a simple binary + cryptography module I built to support my app, Pheonix.</p>\n\n<p>Then I went to my hometown for a while and didn‚Äôt have my PC. I got bored.</p>\n\n<p>So I thought:<br>\n‚ÄúWhat if I make something that lets Python control hardware?‚Äù</p>\n\n<p>And that‚Äôs how PHardwareITK was born ‚Äî from a simple idea to now a 12,000-download module.</p>\n\n\n\n\n<h1>\n  \n  \n  How It Works\n</h1>\n\n<p>I wrote my own:</p>\n\n<p>BIOS (in Python)</p>\n\n<p>File system (PBFS)</p>\n\n<p>Bootloader logic</p>\n\n<p>Virtual assembly (.vasm) file format (planned)</p>\n\n<p>Virtual CPU architecture (PVCPU) (in development)</p>\n\n<p>Permission tables, RAM cache, and direct drive access </p>\n\n<p>GUI toolkit using just Python (or optional SDL2 if devs want it)</p>\n\n<p>And a million more things (not really million btw)</p>\n\n<p>Note: PBFS was first made in python and is also called Python Based File System but the official (again by me) is called Pheonix-Block-File-System and I am currently updating that so my current PBFS in this module has outdated layout and will be updated, here check it out -</p>\n\n<p><a href=\"https://github.com/AkshuDev/Pheonix-Block-File-System\" rel=\"noopener noreferrer\">https://github.com/AkshuDev/Pheonix-Block-File-System</a></p>\n\n\n\n\n<h1>\n  \n  \n  I Even Made a YouTube Video\n</h1>\n\n<p>I created a 4K video showing how PhoenixAppAPI works, including deep binary mapping and encryption tools. You can watch it on this channel-&gt; AkshobhyaEverything</p>\n\n\n\n\n<h1>\n  \n  \n  I'm Looking for Contributors\n</h1>\n\n<p>This is a HUGE project ‚Äî I lost count of how many files it has üòÖ</p>\n\n<p>I‚Äôm currently working on docs, and I‚Äôve tagged some help wanted issues on GitHub. I‚Äôd love if you could:</p>\n\n<p>Try it out</p>\n\n<p>Star the repo if you like it ‚≠ê</p>\n\n<p>Help with documentation or examples</p>\n\n<p>Share feedback</p>\n\n<p>It‚Äôs open source and 100% Python!</p>\n\n\n\n\n<h1>\n  \n  \n  Final Thoughts\n</h1>\n\n<p>If you‚Äôre:</p>\n\n<p>An OS dev</p>\n\n<p>A retro computing fan</p>\n\n<p>A Python developer who wants more control</p>\n\n<p>Or just someone curious how a 12-year-old built an entire OS environment in Python...</p>\n\n<p>Come check it out!</p>\n\n<p>Thanks for reading,<br>\n‚Äî AkshuDev<br>\nGitHub ‚Ä¢ Youtube</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"TestDriven.io: Building a Multi-tenant App with Django","url":"https://testdriven.io/blog/django-multi-tenant/","date":1750869692,"author":"","guid":170830,"unread":true,"content":"<article>This tutorial looks at how to implement multi-tenancy in Django.</article>","contentLength":64,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I finally figured out how to get the best out of MCP Servers as an AI Developer","url":"https://dev.to/composiodev/i-finally-figured-out-how-to-get-the-best-out-of-mcp-servers-as-an-ai-developer-3l07","date":1750865783,"author":"Developer Harsh","guid":170793,"unread":true,"content":"<h2>\n  \n  \n  A Brief Intro to MCP\n</h2>\n\n<p>MCP have been here for a while, but not many embrace it full potential by utilizing all its core components. Max tutorial / blog, I see are of using tools, none care for the rest.</p>\n\n<p>So, for one of my projects, after researching a lot, I found out how to use them the easy way, and in this blog, I will share my learning with you all!</p>\n\n<p>Let's begin by looking at Workspace Setup</p>\n\n<blockquote>\n<h2>\n  \n  \n  TL; DR\n</h2>\n\n<ul>\n<li>\n<strong>Setup</strong>: MCP projects are best handled in workspace.</li>\n<li>\n<strong>Tools</strong>: Let‚Äôs LLMs run code or perform actions.</li>\n<li>\n<strong>Prompts</strong>: Defines reusable, structured prompt templates for LLMs.</li>\n<li>\n<strong>Resources</strong>: Expose local or remote data to feed info into LLM context.</li>\n<li>\n<strong>Use Cases</strong>: Build smart agents‚ÄîCLIs, bots, assistants, analyzers‚Äîby combining tools + prompts + data.</li>\n</ul>\n</blockquote>\n\n<h2>\n  \n  \n  Workspace Setup (recommended)\n</h2>\n\n<p>MCP‚Äôs are unmoderated and can deal damage to original file systems. So, I prefer and recommend using it in separate workspace.  Let‚Äôs begin</p>\n\n<p>Creates a new directory mcp and cd into it!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">mkdir </span>mcp\n<span class=\"nb\">cd </span>mcp\n</code></pre>\n\n</div>\n\n\n\n<p>Install <a href=\"https://docs.astral.sh/uv/#scripts\" rel=\"noopener noreferrer\">UV</a> - modern &amp; fast alternative to pip with better package management<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># windows</span>\npowershell <span class=\"nt\">-ExecutionPolicy</span> ByPass <span class=\"nt\">-c</span> <span class=\"s2\">\"irm https://astral.sh/uv/install.ps1 | iex\"</span>\n\n<span class=\"c\">#ubuntu/mac</span>\ncurl <span class=\"nt\">-LsSf</span> https://astral.sh/uv/install.sh | sh\n</code></pre>\n\n</div>\n\n\n\n<p>Create a virtual environment<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># windows</span>\nuv venv .venv\n.venv<span class=\"se\">\\S</span>cripts<span class=\"se\">\\a</span>ctivate\n\n<span class=\"c\"># ubuntu / mac</span>\nuv venv .venv\n<span class=\"nb\">source</span> .venv/bin/activate\n</code></pre>\n\n</div>\n\n\n\n<p>Install MCP package - uses FastMCP under the hood<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># latest - ver 2.0</span>\nuv pip <span class=\"nb\">install </span>fastmcp\n\n<span class=\"c\"># ver 1.0 - can cause issue</span>\nuv pip <span class=\"nb\">install</span> <span class=\"s2\">\"mcp[cli]\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Ensure MCP library available<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight powershell\"><code><span class=\"n\">fastmcp</span><span class=\"w\"> </span><span class=\"nx\">version</span><span class=\"w\">\n</span></code></pre>\n\n</div>\n\n\n\n<p>Output üëá</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fscyxzvmtj4urcof5u69y.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fscyxzvmtj4urcof5u69y.png\" alt=\"image.png\" width=\"800\" height=\"119\"></a></p>\n\n<p>Remember the root path, will help a lot later üòÅ</p>\n\n<p>With workspace ready to go let's look at the 1st MCP Component, tools!</p>\n\n<h2>\n  \n  \n  Tools - The Action Takers\n</h2>\n\n<h3>\n  \n  \n  <strong>Overview</strong>\n</h3>\n\n<p>Tools enable LLM to perform tasks / action's through MCP servers. Think of it as an extra hand to LLM‚Äôs. </p>\n\n<p>With Tools + MCP, LLM / AI Agents can now: </p>\n\n<ul>\n<li>interact with external system,</li>\n<li>executes code and</li>\n<li>can access non training data.</li>\n</ul>\n\n<p>Tools have 3 key components:</p>\n\n<ul>\n<li>\n<strong>Discovery</strong>: Client can fetch list of available tools by sending a <code>tools/list</code> request to MCP server.</li>\n<li>\n<strong>Invocation</strong>: Any tool can be called by client via <code>tool/call</code> request. Once tool is exposed, server performs requested operation and return the result later to be used by AI Models.</li>\n<li>\n<strong>Flexibility</strong>:  Tools can be wrapped around a function / API interaction (opening up endless possibilities)</li>\n</ul>\n\n<p>Now let‚Äôs look at how to create tools!</p>\n\n<h3>\n  \n  \n  Code\n</h3>\n\n<p>Tools in MCPc are functions / methods wrapped withing <code>@mcp.tools(*kwargs)</code> decorator. Yes, this is all you need! </p>\n\n<p>Create a new file called <code>mcp_hello.py</code> and paste the following code<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">fastmcp</span> <span class=\"kn\">import</span> <span class=\"n\">FastMCP</span>\n\n<span class=\"n\">mcp</span> <span class=\"o\">=</span> <span class=\"nc\">FastMCP</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hello World</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># define the tool\n</span><span class=\"nd\">@mcp.tool</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Hello World. This is </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\"> üëã</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># entry point - not needed but suggested\n</span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">__main__</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"n\">mcp</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">transport</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">stdio</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>In terminal type<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>fastmcp dev mcp_hello.py\n</code></pre>\n\n</div>\n\n\n\n<p>Copy the provided session token, click on the provided link, paste in: <strong>Proxy Session Token</strong> and connect.</p>\n\n<p>This will open a MCP debugger - a shortcut to test MCP Servers. I used it in the past in one of my earlier <a href=\"https://composio.dev/blog/mcp-server-step-by-step-guide-to-building-from-scrtch/\" rel=\"noopener noreferrer\">blog</a>. </p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fwz2lrmikolbxih7xnrl2.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fwz2lrmikolbxih7xnrl2.png\" alt=\"image.png\" width=\"800\" height=\"449\"></a></p>\n\n<blockquote>\n<p><strong>Note</strong>: In case you are installing for 1st time, you will get a confirmation prompt. press <code>y</code>  and let installation happen</p>\n</blockquote>\n\n<p>Now head to the Tools in nav bar and select <code>list tools</code> and notice <strong>history</strong>, you will see <code>tools/list</code> call to the server. Remember discovery.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F02cllhpfoegolaxi6wow.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F02cllhpfoegolaxi6wow.png\" alt=\"image.png\" width=\"800\" height=\"563\"></a></p>\n\n<p>&amp; here is the response schema<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"tools\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"hello_world\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//name</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">mcp</span><span class=\"w\"> </span><span class=\"err\">server</span><span class=\"w\">\n      </span><span class=\"nl\">\"inputSchema\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">JSON</span><span class=\"w\"> </span><span class=\"err\">Schema</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">tool's</span><span class=\"w\"> </span><span class=\"err\">parameters</span><span class=\"w\">\n        </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"object\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"properties\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">Tool</span><span class=\"w\"> </span><span class=\"err\">Specific</span><span class=\"w\"> </span><span class=\"err\">Properties</span><span class=\"w\">\n          </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">input</span><span class=\"w\"> </span><span class=\"err\">parameter</span><span class=\"w\">\n            </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Name\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">name</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">parameter</span><span class=\"w\">\n            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"string\"</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">dtype</span><span class=\"w\">\n          </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"p\">},</span><span class=\"w\">\n        </span><span class=\"nl\">\"required\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">  \n          </span><span class=\"s2\">\"name\"</span><span class=\"w\"> \n        </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">required</span><span class=\"w\"> </span><span class=\"err\">parameter</span><span class=\"w\">\n      </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n\n</div>\n\n\n\n<p>You can learn more about tools schema <a href=\"https://modelcontextprotocol.io/docs/concepts/tools#python\" rel=\"noopener noreferrer\">here</a></p>\n\n<p>Next select <em>hello world</em> tool, enter your <em>name</em> and click <strong>Run Tool.</strong> I put <code>devloper_hs</code> and here is the output üëá</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F2njyecb6mo7sgi1he5iv.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F2njyecb6mo7sgi1he5iv.png\" alt=\"image.png\" width=\"800\" height=\"386\"></a></p>\n\n<p>If you notice history <code>tools/call</code> is made as part of tool invocation process. This is the request schema to MCP Server via client.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"method\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tools/call\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//method</span><span class=\"w\"> </span><span class=\"err\">type</span><span class=\"w\"> </span><span class=\"err\">-</span><span class=\"w\"> </span><span class=\"err\">here</span><span class=\"w\"> </span><span class=\"err\">tool_call</span><span class=\"w\">\n  </span><span class=\"nl\">\"params\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">required</span><span class=\"w\"> </span><span class=\"err\">parameter</span><span class=\"w\">\n    </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"hello_world\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">name</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">tool</span><span class=\"w\"> </span><span class=\"err\">/</span><span class=\"w\"> </span><span class=\"err\">fn</span><span class=\"w\">\n    </span><span class=\"nl\">\"arguments\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> \n      </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"devloper_hs\"</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">argument</span><span class=\"w\"> </span><span class=\"err\">provided</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"nl\">\"_meta\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">metadata</span><span class=\"w\"> </span><span class=\"err\">-</span><span class=\"w\"> </span><span class=\"err\">ignore</span><span class=\"w\">\n      </span><span class=\"nl\">\"progressToken\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n\n</div>\n\n\n\n<p>&amp; after tool is executed (via server), following response schema is generated!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"content\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">content</span><span class=\"w\"> </span><span class=\"err\">resource</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"text\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">content</span><span class=\"w\"> </span><span class=\"err\">type</span><span class=\"w\">\n      </span><span class=\"nl\">\"text\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Hello World. This is devloper_hs üëã\"</span><span class=\"w\"> </span><span class=\"err\">//actual</span><span class=\"w\"> </span><span class=\"err\">content</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">],</span><span class=\"w\">\n  </span><span class=\"nl\">\"isError\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"err\">//any</span><span class=\"w\"> </span><span class=\"err\">error?</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n\n</div>\n\n\n\n<p>Guess the best part?</p>\n\n<p>As MCP Tools are just function, a single mcp server can have any no of tools.  Refer to this quick <a href=\"https://dev.to/composiodev/connecting-100-mcp-servers-to-vs-code-in-5-easy-steps-1d4k\">guide</a> to learn more!</p>\n\n<p>However a question remains, what are use the cases?</p>\n\n<p>Here are some examples to get you started!</p>\n\n<h3>\n  \n  \n  Examples\n</h3>\n\n<p>I know there are lot of MCPc, and it keeps on increasing day by day, but niche down and you will find lot of custom use cases for MCP. Here are some to get started!</p>\n\n<p><strong>Utility MCP Server</strong></p>\n\n<ul>\n<li>Use tool wrapped functions to perform everyday task - create, read, move, update, search files and directories all using natural conversation.</li>\n</ul>\n\n<p><strong>Data Toolbox MCP Server</strong></p>\n\n<ul>\n<li>Expose all your data science tools wrapped functions to llm , provide data and get analytics done. Build once use anywhere.</li>\n</ul>\n\n<p><strong>IRCTC MCP Server</strong>:</p>\n\n<ul>\n<li>Build by one of my mentors for Hugging Face MCP hackathon, helps with handling IRCTC related tasks, except for ticket booking - uses multiple API as tools üòÅ</li>\n</ul>\n\n<p>For more ideas explore this <a href=\"https://dev.to/copilotkit/30-mcp-ideas-with-complete-source-code-d8e\">blog</a>.</p>\n\n<p>But not every time LLM call tools, especially for complex / ambiguous scenarios. To mitigate, MCP provide <strong>prompts.</strong></p>\n\n\n\n\n<h2>\n  \n  \n  Prompts - The Context Builder\n</h2>\n\n<h3>\n  \n  \n  Overview\n</h3>\n\n<p>Prompt enables LLM to generate structured and purposeful responses by enabling server to define reusable and parameterized messages, often use to start conversations.</p>\n\n<p>Prompts can be used for:</p>\n\n<ul>\n<li>Take and pass dynamic input from user.</li>\n<li>Include context using local data.</li>\n<li>Chain multiple interaction for memory building.</li>\n<li>Guide complex workflows</li>\n<li>Act as frontend using <code>/</code> command - personal favorite</li>\n</ul>\n\n<p>and all server needs is a <code>prompts/get</code> request from the client.</p>\n\n<p>Let's understand this by building a MCP with prompts support.</p>\n\n<h3>\n  \n  \n  Code\n</h3>\n\n<ul>\n<li>Like tools, prompts are wrapped around functions containing P*<em>rompt Templates as f-string, Prompt Messages</em>* using <code>@mcp.prompt(*kwargs)</code>.</li>\n<li>Additionally function definition may include type annotations (pydantic), optional parameters, and mcp metadata (override in decorator). Learn more <a href=\"https://gofastmcp.com/servers/prompts#return-values\" rel=\"noopener noreferrer\">here</a>.</li>\n</ul>\n\n<p>Here is a mcp prompt template that generates topic explanation prompt. Can be tested using MCP Inspector or cli.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># prompt_mcp.py\n</span>\n<span class=\"kn\">import</span> <span class=\"n\">asyncio</span> \n<span class=\"kn\">from</span> <span class=\"n\">fastmcp</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"n\">fastmcp</span> <span class=\"kn\">import</span> <span class=\"n\">FastMCP</span>\n\n<span class=\"c1\"># create a mcp object with name TopicExplainer\n</span><span class=\"n\">mcp</span> <span class=\"o\">=</span> <span class=\"nc\">FastMCP</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">TopicExplainerPrompt</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create prompt\n</span><span class=\"nd\">@mcp.prompt</span>\n<span class=\"k\">def</span> <span class=\"nf\">explain_topic</span><span class=\"p\">(</span><span class=\"n\">topic</span> <span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Generates a query prompt for explanation of topic</span><span class=\"sh\">\"</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Can you explain </span><span class=\"si\">{</span><span class=\"n\">topic</span><span class=\"si\">}</span><span class=\"s\"> in a beginner friendly manner with simple wordings and no technical jargon. Include Concept &amp; Examples.</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># create mcp client to test server directly (final prompt display)\n</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_prompt</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># create a aynschronus loop to run mcp client\n</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">Client</span><span class=\"p\">(</span><span class=\"n\">mcp</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># fetch all prompts\n</span>        <span class=\"n\">prompts</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">list_prompts</span><span class=\"p\">()</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Available prompts:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">prompts</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># Provide the topic to explain_topic for testing and check results\n</span>        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">get_prompt</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">explain_topic</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">topic</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">machine learning</span><span class=\"sh\">\"</span><span class=\"p\">})</span> <span class=\"c1\"># change topic\n</span>        <span class=\"c1\"># add more prompts here for testing multiple prompts\n</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Generated prompt:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">test_prompt</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>In terminal type<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">uv</span> <span class=\"n\">run</span> <span class=\"n\">prompt_mcp</span><span class=\"p\">.</span><span class=\"n\">py</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>Entire prompt template generated for topic - machine learning<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F49j6jrreunic9xr6zs8u.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F49j6jrreunic9xr6zs8u.png\" alt=\"Entire prompt template generated for topic - machine learning\" width=\"800\" height=\"96\"></a></p>\n</blockquote>\n\n<p>or use the mcp inspector with<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">fastmcp</span> <span class=\"n\">dev</span> <span class=\"n\">prompt_mcp</span><span class=\"p\">.</span><span class=\"n\">py</span>\n</code></pre>\n\n</div>\n\n\n\n<p>&amp; paste session token in config ‚Üí Proxy Session Token. Press Connect and wait for üü¢.</p>\n\n<ul>\n<li>Head to prompt ‚Üí list all prompts ‚Üí select <code>explain_topic</code> and pass the topic (dropdown have text input option)</li>\n<li>Hit <strong>Get Prompt</strong> and check out the text field. It will contain same output as  show in terminal image. If curios, in code <code>result.messages[0].content.text</code> index the same to get the prompt.</li>\n</ul>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdrc8tathagnfbwp6dfke.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdrc8tathagnfbwp6dfke.png\" alt=\"image.png\" width=\"800\" height=\"809\"></a></p>\n\n<p>Notice the history tab, you will see the following flow:</p>\n\n<blockquote>\n<p>prompt flow!<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fh6spuip2p7ca3bp80o9l.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fh6spuip2p7ca3bp80o9l.png\" alt=\"prompt flow!\" width=\"800\" height=\"411\"></a></p>\n</blockquote>\n\n<p>I highly encourage you to toggle each request. It will provide a good understanding of the schema followed internally. For reference on schema check out the <a href=\"https://modelcontextprotocol.io/docs/concepts/prompts\" rel=\"noopener noreferrer\">documentation</a>.</p>\n\n<p>So, what all you can build with prompt + resources in your arsenal for starters?</p>\n\n<h3>\n  \n  \n  Examples\n</h3>\n\n<p><strong>Data Analyzer MCP</strong>:</p>\n\n<ul>\n<li>Build a mcp server that uses prompt template to define <em>analysis type</em> and where to fetch data <em>(local / url).</em>\n</li>\n<li>Then use tool to <em>fetch</em> the data , <em>pass</em> it to llm, let llm do the <em>analysis</em> based on analysis type and <em>share</em> the results.</li>\n</ul>\n\n<p><strong>Prompt Enhancer MCP</strong></p>\n\n<ul>\n<li>Create a prompt enhancer that uses the prompt template to combine user input / context with predefined SYSTEM_INSTRUCTIONS and pass it to LLM.</li>\n<li>Then use LLM as tool (wrap LLLM calling into mcp tool) to create an optimsed prompt and return to user.</li>\n<li>Add optional enhancement like - character limit, prompt size, conversational tone, required information. - personally, would like to have this for my daily workflow.</li>\n<li>Code Converter MCP - MCP to handle code conversion - no tips here, let llm do the job üòÅ</li>\n</ul>\n\n<p>Now time to shift focus to resources - a very important component of mcp, but often overlooked (as per my research)</p>\n\n\n\n\n<h2>\n  \n  \n  Resources - The Data Providers\n</h2>\n\n<h3>\n  \n  \n  Overview\n</h3>\n\n<p>Resources allow MCP servers to expose private data to client and provide context to LLM‚Äôs. - think mcp version of partial rag.</p>\n\n<p>Resource can be of many types, following are common ones:</p>\n\n<ul>\n<li>File Content - Plain text</li>\n<li>Database / Model Records - Contains schema, relationship, methods and so on</li>\n<li>API Responses - response from server; often llm / other mcp server - a game changer for LLM</li>\n<li>Screenshot / Images - Yup, mcp supports multimodality</li>\n<li>Log files - log files generated like <code>server_uptime.log</code>\n</li>\n<li>and many more.</li>\n</ul>\n\n<p>All resources are identified using URI like :<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"p\">[</span><span class=\"n\">protocol</span><span class=\"p\">]:</span><span class=\"o\">//</span><span class=\"p\">[</span><span class=\"n\">host</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"p\">[</span><span class=\"n\">path</span><span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Some common examples are</p>\n\n<p><strong>File Resource</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nb\">file</span><span class=\"p\">:</span><span class=\"o\">///</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">Harsh</span><span class=\"o\">/</span><span class=\"n\">Documents</span><span class=\"o\">/</span><span class=\"n\">mcp</span><span class=\"o\">/</span><span class=\"n\">mcp_prompt</span><span class=\"p\">.</span><span class=\"n\">py</span> <span class=\"c1\"># /// - indicates empty host\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>DB Resource</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">postgres</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">database</span><span class=\"o\">/</span><span class=\"n\">customers</span><span class=\"o\">/</span><span class=\"n\">schema</span> <span class=\"c1\"># databade -&gt; host , customer/schema -&gt; path\n</span></code></pre>\n\n</div>\n\n\n\n<p>Screen Capture Resource<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">screen</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"o\">/</span><span class=\"n\">display1</span> <span class=\"c1\"># locahost -&gt; host , display1 -&gt; path\n</span></code></pre>\n\n</div>\n\n\n\n<p>Best part, servers can define their custom URI schema as well. Refer to resource's <a href=\"https://modelcontextprotocol.io/docs/concepts/resources\" rel=\"noopener noreferrer\">docs</a> to learn more!</p>\n\n<p>Anyway‚Äôs let now look at how to build resources supported mcp server!</p>\n\n<h3>\n  \n  \n  Code\n</h3>\n\n<p>Simplest way to define a resource is to wrap it within a function decorated with <code>@mcp.resource(*kargs)</code> .</p>\n\n<p>Copy and paste the following code in <code>mcp_resources.py</code> :</p>\n\n<blockquote>\n<p><strong>Note</strong>: The goal of code is to teach the usage, not use case. So, depending upon problem at hand, resources can have complex behaviors with returns type as well.</p>\n\n\n</blockquote>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">fastmcp</span> <span class=\"kn\">import</span> <span class=\"n\">FastMCP</span>\n<span class=\"kn\">from</span> <span class=\"n\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"c1\"># define mcp server name\n</span><span class=\"n\">mcp</span> <span class=\"o\">=</span> <span class=\"nc\">FastMCP</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Resource Server</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># basic resource\n</span><span class=\"nd\">@mcp.resource</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">resource://greeting</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Simple greet</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">Hey This Is Harshüëã</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># Image resource with URL - protocol://host//path\n</span><span class=\"nd\">@mcp.resource</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">images://img.jpg</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">mime_type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">image/jpeg</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"c1\"># defined uri -&gt; returns in json output for resource calls\n</span><span class=\"k\">def</span> <span class=\"nf\">fetch_image_bytes</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Returns Harsh</span><span class=\"sh\">'</span><span class=\"s\">s profile photo</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">img.jpg</span><span class=\"sh\">\"</span><span class=\"p\">).</span><span class=\"nf\">resolve</span><span class=\"p\">()</span>  <span class=\"c1\"># file must be present at script route\n</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">file_path</span><span class=\"p\">.</span><span class=\"nf\">exists</span><span class=\"p\">():</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">FileNotFoundError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Image file not found: </span><span class=\"si\">{</span><span class=\"n\">file_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">file_path</span><span class=\"p\">.</span><span class=\"nf\">read_bytes</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">mcp</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">transport</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">stdio</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The above script defines 2 mcp resources ‚Üí Simple greet ‚Üí greet message and profile photo ‚Üí returns the base64 format image uri. </p>\n\n<p>In general, you will aim to expose it to LLM, but here we will use mcp inspector. So, lets‚Äô pull up the inspector with:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">fastmcp</span> <span class=\"n\">dev</span> <span class=\"n\">mcp_resources</span><span class=\"p\">.</span><span class=\"n\">py</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Once loaded, repeat the previous <strong>copying token</strong> and <strong>connecting</strong> step, then</p>\n\n<ul>\n<li>Head to <strong>resources</strong> tab and click <strong>List Resouces</strong>\n</li>\n<li>For <code>greet</code> ‚Üí Click on it and check out <em>greet</em> tab ‚Üí it contains contents array with uri, mime_type and text.</li>\n<li>For <code>fetch_image_bytes</code> ‚Üí Ciick on it and check <em>fetch_image_bytes</em> tab in far right ‚Üí it contains content array with uri , <em>mime_type</em> and blob data ‚Üí base64 byte encoding value.</li>\n</ul>\n\n<p><em>(add images here!)</em></p>\n\n<p>Here is the server-client request flow for both:</p>\n\n<blockquote>\n<p>For Greet Flow<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fuiqj9wutc3bj5iht3z2d.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fuiqj9wutc3bj5iht3z2d.png\" alt=\"For Greet Flow \" width=\"800\" height=\"258\"></a></p>\n\n<p>For Fetch Image Bytes Flow<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8ukwdi38mil1bvy30hio.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8ukwdi38mil1bvy30hio.png\" alt=\"For Fetch Image Bytes Flow\" width=\"800\" height=\"258\"></a></p>\n</blockquote>\n\n<p>Highly encourage to toggle each request to understand the underlying flow, or I will cover later in another blog.</p>\n\n<p>But what all can you build with the new powerup ‚ö°? </p>\n\n<p>Here are some examples to get started with building MCP having TOOLS + PROMPTS + RESOURCES!</p>\n\n<h3>\n  \n  \n  Examples\n</h3>\n\n<p><strong>Research Assistant MCP</strong></p>\n\n<ul>\n<li>Build a mcp server that uses tools and  prompt and resources to <em>summarize</em> and <em>compare</em> academic papers.</li>\n<li>Define mcp tools like: <code>search</code>, <code>extract_data</code>, <code>citation_formatter</code>.</li>\n<li>Define mcp prompts like: <code>research_system_prompt_template</code>, <code>user_prompt_template</code>.</li>\n<li>Set default mcp resources links for: Google Scholar, arXiv, Papers with code.</li>\n</ul>\n\n<p>Here, tools ‚Üí <em>access, extract and format data, prompts</em> ‚Üí <em>define assistant behavior</em>, resources ‚Üí <em>provide raw search context.</em></p>\n\n<p><strong>Code Debugger MCP</strong></p>\n\n<ul>\n<li>Build a mcp server that uses prompt templates to <em>detect</em>, <em>explain</em>, and <em>fix</em> errors in code.</li>\n<li>Define mcp tools like: <code>python.run</code>, <code>syntax_checker</code>, <code>diff_tool</code>.</li>\n<li>Define mcp prompts like: <code>debugger_system_prompt_template</code>, <code>user_code_input_template</code>.</li>\n<li>Set default mcp resources links like: Python Docs, Stack Overflow, Bento.io.</li>\n</ul>\n\n<p>Here tools ‚Üí <em>run</em>, <em>analyze</em>, and <em>correct</em> code issues, prompts ‚Üí <em>guide step-by-step explanations</em> and fixes. resources ‚Üí <em>provide syntax rules</em>, <em>common issues</em>, and <em>examples</em>.</p>\n\n<p><strong>Business Strategy MCP</strong></p>\n\n<ul>\n<li>Build a mcp server that helps users create SWOT analysis, competitive research, and business model canvases.</li>\n<li>Define mcp tools like: <code>web.search</code>, <code>canvas_builder</code>, <code>chart_gen</code>.</li>\n<li>Define mcp prompts like: <code>strategy_system_prompt_template</code>, <code>user_business_query_template</code>.</li>\n<li>Point LLM to mcp resources: CB Insights, Statista, Strategyzer.</li>\n</ul>\n\n<p>Here tools ‚Üí <em>gather</em>, <em>visualize</em>, and <em>structure</em> business strategy data, prompts ‚Üí <em>simulate strategic consultant behavior,</em> resources ‚Üí <em>deliver market insight</em>, <em>competitive intel</em>, and <em>visual frameworks</em>.</p>\n\n<p>Now time to combine everything learnt and put it into action!</p>\n\n\n\n\n<h2>\n  \n  \n  Final Thoughts\n</h2>\n\n<p>Building MCP Servers and see them doing things on automation is fun. I personally love to experiment with them.  </p>\n\n<p>This blog just scratches the surface of what possible with MCP. So, it‚Äôs highly recommended to explore the resources shared; cause the best way is to learn by exploring.</p>\n\n<p>Happy Learning üëç</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From 500+ Lines to 150: How I Refactored My Amazon Scraper Into a Clean Scrapy Project","url":"https://dev.to/noorsimar/from-500-lines-to-150-how-i-refactored-my-amazon-scraper-into-a-clean-scrapy-project-14o3","date":1750864929,"author":"Noorsimar Singh","guid":170792,"unread":true,"content":"<h2>\n  \n  \n  The Messy Beginning\n</h2>\n\n<p>Like many developers, I started Amazon scraping with a single Python file. What began as a \"quick script\" quickly turned into 500+ lines of spaghetti code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># The old way - amazon_spider_old.py (don't do this!)\n</span><span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">from</span> <span class=\"n\">bs4</span> <span class=\"kn\">import</span> <span class=\"n\">BeautifulSoup</span>\n<span class=\"kn\">import</span> <span class=\"n\">csv</span>\n<span class=\"kn\">import</span> <span class=\"n\">time</span>\n<span class=\"kn\">import</span> <span class=\"n\">random</span>\n<span class=\"kn\">from</span> <span class=\"n\">fake_useragent</span> <span class=\"kn\">import</span> <span class=\"n\">UserAgent</span>\n\n<span class=\"c1\"># 50+ lines of proxy management\n# 100+ lines of parsing logic\n# 200+ lines of error handling\n# 150+ lines of data export\n# Complete nightmare to maintain!\n</span></code></pre>\n\n</div>\n\n\n\n<p>Sound familiar? Here's how I transformed this mess into a clean, maintainable Scrapy project.</p>\n\n\n\n\n<h2>\n  \n  \n  The Pain Points of DIY Scraping\n</h2>\n\n<h3>\n  \n  \n  Problem #1: IP Blocks Everywhere\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># My hacky solution (don't judge!)\n</span><span class=\"n\">proxies</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"sh\">\"</span><span class=\"s\">http://proxy1:8000</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">http://proxy2:8000</span><span class=\"sh\">\"</span><span class=\"p\">,</span> \n    <span class=\"c1\"># ... manually managing 20+ proxies\n</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">proxies</span><span class=\"p\">)):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">proxies</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">http</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">proxies</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]})</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">continue</span>  <span class=\"c1\"># Prayer-driven development üôè\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Problem #2: Fragile Selectors\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># This broke every week\n</span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">soup</span><span class=\"p\">.</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.a-price-whole</span><span class=\"sh\">'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">text</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">soup</span><span class=\"p\">.</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.a-offscreen</span><span class=\"sh\">'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">text</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">soup</span><span class=\"p\">.</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.a-price</span><span class=\"sh\">'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">text</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Not found</span><span class=\"sh\">\"</span>  <span class=\"c1\"># üò≠\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Problem #3: Zero Monitoring\n</h3>\n\n<p>When scraping failed (and it failed often), I had no idea why:</p>\n\n<ul>\n<li>Was it the proxy?</li>\n<li>Did Amazon change their layout?</li>\n<li>Network issues?</li>\n<li>Rate limiting?</li>\n</ul>\n\n<p>Debugging was pure guesswork.</p>\n\n\n\n\n<h2>\n  \n  \n  The Scrapy Transformation\n</h2>\n\n<p>After one too many 3 AM debugging sessions, I decided to rebuild using Scrapy. Here's the before/after:</p>\n\n<h3>\n  \n  \n  Before: Single Monolithic File\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>amazon_spider_old.py (534 lines)\n‚îú‚îÄ‚îÄ Proxy management (manual) \n‚îú‚îÄ‚îÄ User agent rotation (manual)\n‚îú‚îÄ‚îÄ Request retries (manual)\n‚îú‚îÄ‚îÄ Data parsing (fragile)\n‚îú‚îÄ‚îÄ CSV export (buggy)\n‚îî‚îÄ‚îÄ Error handling (prayer-based)\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  After: Clean Scrapy Architecture\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>amazon-scrapy-scraper/\n‚îú‚îÄ‚îÄ amazon_scraper/\n‚îÇ   ‚îú‚îÄ‚îÄ spiders/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ amazon_search.py      (72 lines)\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ amazon_product.py     (78 lines)\n‚îÇ   ‚îú‚îÄ‚îÄ settings.py               (31 lines)\n‚îÇ   ‚îî‚îÄ‚îÄ data/                     (auto-generated)\n‚îú‚îÄ‚îÄ requirements.txt              (3 lines)\n‚îî‚îÄ‚îÄ README.md                     (comprehensive docs)\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Result: 500+ lines ‚Üí 150 lines total! üéâ</strong></p>\n\n\n\n\n<h2>\n  \n  \n  Key Architectural Decisions\n</h2>\n\n<h3>\n  \n  \n  1. Single Responsibility Spiders\n</h3>\n\n<p>Instead of one spider doing everything, I created focused spiders:</p>\n\n<p><strong>Search Spider</strong> (<code>amazon_search.py</code>):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">AmazonSearchSpider</span><span class=\"p\">(</span><span class=\"n\">scrapy</span><span class=\"p\">.</span><span class=\"n\">Spider</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">amazon_search</span><span class=\"sh\">'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">start_requests</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">keyword_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">ipad</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">keyword</span> <span class=\"ow\">in</span> <span class=\"n\">keyword_list</span><span class=\"p\">:</span>\n            <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">https://www.amazon.com/s?k=</span><span class=\"si\">{</span><span class=\"n\">keyword</span><span class=\"si\">}</span><span class=\"sh\">'</span>\n            <span class=\"k\">yield</span> <span class=\"n\">scrapy</span><span class=\"p\">.</span><span class=\"nc\">Request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Extract search results\n</span>        <span class=\"n\">products</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">css</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">div[data-component-type=</span><span class=\"sh\">\"</span><span class=\"s\">s-search-result</span><span class=\"sh\">\"</span><span class=\"s\">]</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">product</span> <span class=\"ow\">in</span> <span class=\"n\">products</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"p\">{</span>\n                <span class=\"sh\">'</span><span class=\"s\">title</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"nf\">css</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">h2 a span::text</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">get</span><span class=\"p\">(),</span>\n                <span class=\"sh\">'</span><span class=\"s\">price</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"nf\">css</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.a-price-whole::text</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">get</span><span class=\"p\">(),</span>\n                <span class=\"sh\">'</span><span class=\"s\">url</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"nf\">css</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">h2 a::attr(href)</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">get</span><span class=\"p\">(),</span>\n            <span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Product Spider</strong> (<code>amazon_product.py</code>):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">AmazonProductSpider</span><span class=\"p\">(</span><span class=\"n\">scrapy</span><span class=\"p\">.</span><span class=\"n\">Spider</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">amazon_product</span><span class=\"sh\">'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse_product_data</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Detailed product extraction\n</span>        <span class=\"k\">yield</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">css</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">#productTitle::text</span><span class=\"sh\">\"</span><span class=\"p\">).</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"\"</span><span class=\"p\">).</span><span class=\"nf\">strip</span><span class=\"p\">(),</span>\n            <span class=\"sh\">\"</span><span class=\"s\">price</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">extract_price</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">),</span>\n            <span class=\"sh\">\"</span><span class=\"s\">features</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">extract_features</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">),</span>\n            <span class=\"sh\">\"</span><span class=\"s\">images</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">extract_images</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  2. Configuration Over Code\n</h3>\n\n<p>All settings in one place:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># settings.py\n</span><span class=\"n\">BOT_NAME</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">amazon_scraper</span><span class=\"sh\">'</span>\n<span class=\"n\">ROBOTSTXT_OBEY</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n<span class=\"n\">CONCURRENT_REQUESTS</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># ScrapeOps Integration (game changer!)\n</span><span class=\"n\">SCRAPEOPS_API_KEY</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">your-api-key</span><span class=\"sh\">'</span>\n<span class=\"n\">SCRAPEOPS_PROXY_ENABLED</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n<span class=\"n\">DOWNLOADER_MIDDLEWARES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">'</span><span class=\"s\">scrapeops_scrapy_proxy_sdk.scrapeops_scrapy_proxy_sdk.ScrapeOpsScrapyProxySdk</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">725</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Auto-export to CSV\n</span><span class=\"n\">FEEDS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">'</span><span class=\"s\">data/%(name)s_%(time)s.csv</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">format</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">csv</span><span class=\"sh\">'</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  3. Built-in Superpowers\n</h3>\n\n<p>Scrapy + ScrapeOps gives you so much for free:</p>\n\n<p><strong>Scrapy provides:</strong></p>\n\n<ul>\n<li>\n<strong>Automatic retries</strong> with exponential backoff</li>\n<li>\n<strong>Concurrent requests</strong> with rate limiting</li>\n<li>\n<strong>Robust selectors</strong> with fallbacks</li>\n<li>\n<strong>Multiple export formats</strong> (CSV, JSON, XML)</li>\n<li>\n<strong>Middleware system</strong> for custom logic</li>\n</ul>\n\n<p><strong>ScrapeOps provides:</strong></p>\n\n<ul>\n<li>\n<strong>Proxy rotation</strong> and IP management</li>\n<li>\n<strong>Real-time monitoring</strong> dashboard</li>\n<li><strong>Request success tracking</strong></li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  The ScrapeOps Game Changer\n</h2>\n\n<p>The biggest improvement wasn't Scrapy itself‚Äîit was integrating ScrapeOps:</p>\n\n<h3>\n  \n  \n  Before: Manual Proxy Hell\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># 50+ lines of proxy management code\n</span><span class=\"n\">proxies</span> <span class=\"o\">=</span> <span class=\"nf\">load_proxy_list</span><span class=\"p\">()</span>\n<span class=\"n\">current_proxy</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_next_proxy</span><span class=\"p\">():</span>\n    <span class=\"k\">global</span> <span class=\"n\">current_proxy</span>\n    <span class=\"k\">if</span> <span class=\"n\">current_proxy</span> <span class=\"o\">&gt;=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">proxies</span><span class=\"p\">):</span>\n        <span class=\"n\">current_proxy</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">)</span>  <span class=\"c1\"># Wait and pray\n</span>    <span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"n\">proxies</span><span class=\"p\">[</span><span class=\"n\">current_proxy</span><span class=\"p\">]</span>\n    <span class=\"n\">current_proxy</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">proxy</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  After: One Line Integration\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># settings.py\n</span><span class=\"n\">SCRAPEOPS_PROXY_ENABLED</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n</code></pre>\n\n</div>\n\n\n\n<p>That's it! ScrapeOps handles:</p>\n\n<ul>\n<li>Proxy rotation</li>\n<li>IP geolocation</li>\n<li>User agent rotation</li>\n<li>Request success monitoring</li>\n<li>Automatic retries</li>\n</ul>\n\n<h3>\n  \n  \n  Monitoring Dashboard\n</h3>\n\n<p>The ScrapeOps dashboard shows real-time metrics:</p>\n\n<ul>\n<li>Request success rates</li>\n<li>Response times</li>\n<li>Error patterns</li>\n<li>Bandwidth usage</li>\n</ul>\n\n<p>So.. No more guessing what went wrong.</p>\n\n\n\n\n<h2>\n  \n  \n  Performance Comparison\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Metric</th>\n<th>Old Script</th>\n<th>New Scrapy Project</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Lines of Code</strong></td>\n<td>534</td>\n<td>150</td>\n</tr>\n<tr>\n<td><strong>Success Rate</strong></td>\n<td>~70%</td>\n<td>~95%</td>\n</tr>\n<tr>\n<td><strong>Maintainability</strong></td>\n<td>Nightmare</td>\n<td>Easy</td>\n</tr>\n<tr>\n<td><strong>Debugging Time</strong></td>\n<td>Hours</td>\n<td>Minutes</td>\n</tr>\n<tr>\n<td><strong>Scalability</strong></td>\n<td>Limited</td>\n<td>Unlimited</td>\n</tr>\n<tr>\n<td><strong>Monitoring</strong></td>\n<td>None</td>\n<td>Full dashboard</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n<h2>\n  \n  \n  Real-World Usage Examples\n</h2>\n\n<h3>\n  \n  \n  Quick Product Search\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Search for iPads</span>\nscrapy crawl amazon_search\n\n<span class=\"c\"># Output: data/amazon_search_2024-01-15T10-30-45.csv</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Detailed Product Analysis\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Get comprehensive product data</span>\nscrapy crawl amazon_product\n\n<span class=\"c\"># Output includes features, images, variants</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Custom Keywords\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Edit amazon_search.py\n</span><span class=\"n\">keyword_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">mechanical keyboards</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">gaming mice</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">monitors</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  Lessons for Fellow Developers\n</h2>\n\n<h3>\n  \n  \n  1. Don't Reinvent the Wheel\n</h3>\n\n<p>I wasted months building retry logic and export functionality that Scrapy provides out of the box, plus proxy rotation that ScrapeOps handles.</p>\n\n<h3>\n  \n  \n  2. Monitoring is Essential\n</h3>\n\n<p>Without ScrapeOps monitoring, I was flying blind. Now I can optimize based on real data.</p>\n\n<h3>\n  \n  \n  3. Architecture Matters\n</h3>\n\n<p>Two focused spiders are infinitely more maintainable than one giant spider.</p>\n\n<h3>\n  \n  \n  4. Start with Free Tiers\n</h3>\n\n<p>ScrapeOps free tier (1,000 requests/month) is perfect for development and small projects.</p>\n\n\n\n\n<h2>\n  \n  \n  Getting Started (5 Minutes Setup)\n</h2>\n\n<ol>\n<li>\n<strong>Clone and setup:</strong>\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   git clone https://github.com/Simple-Python-Scrapy-Scrapers/amazon-scrapy-scraper.git\n   <span class=\"nb\">cd </span>amazon-scrapy-scraper\n   python <span class=\"nt\">-m</span> venv .venv\n   <span class=\"nb\">source</span> .venv/bin/activate  <span class=\"c\"># or .venv\\Scripts\\Activate.ps1 on Windows</span>\n   pip <span class=\"nb\">install</span> <span class=\"nt\">-r</span> requirements.txt\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>\n<p><strong>Get free ScrapeOps API key:</strong></p>\n\n<ul>\n<li>Visit <a href=\"https://scrapeops.io/app/register/main\" rel=\"noopener noreferrer\">ScrapeOps.io</a>\n</li>\n<li>1,000 free requests/month</li>\n</ul>\n</li>\n<li><p><strong>Configure and run:</strong><br>\n</p></li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   <span class=\"c\"># Add API key to amazon_scraper/settings.py</span>\n   <span class=\"nb\">cd </span>amazon_scraper\n   scrapy crawl amazon_search\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  What's Next?\n</h2>\n\n<p>This architecture scales beautifully. I'm already planning:</p>\n\n<ul>\n<li>\n<strong>Review scraper</strong> for sentiment analysis</li>\n<li>\n<strong>Price tracking</strong> with alerts</li>\n<li>\n<strong>Multi-marketplace</strong> support (eBay, Walmart)</li>\n<li>\n<strong>API endpoints</strong> for real-time data</li>\n</ul>\n\n<p>The clean foundation makes adding features straightforward.</p>\n\n\n\n\n<h2>\n  \n  \n  Repository &amp; Resources\n</h2>\n\n<p>üîó <strong>Full source code:</strong> <a href=\"https://github.com/Simple-Python-Scrapy-Scrapers/amazon-scrapy-scraper\" rel=\"noopener noreferrer\">amazon-scrapy-scraper</a></p>\n\n<p>üìö <strong>Helpful resources:</strong></p>\n\n<ul>\n<li><a href=\"https://docs.scrapy.org/en/latest/intro/tutorial.html\" rel=\"noopener noreferrer\">Scrapy Tutorial</a></li>\n<li><a href=\"https://scrapeops.io/docs/proxy/\" rel=\"noopener noreferrer\">ScrapeOps Proxy Docs</a></li>\n<li><a href=\"https://scrapeops.io/websites/amazon\" rel=\"noopener noreferrer\">Amazon Scraping Analyzer</a></li>\n<li><a href=\"https://scrapeops.io/monitoring-scheduling/\" rel=\"noopener noreferrer\">ScrapeOps Monitoring</a></li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Discussion\n</h2>\n\n<p>Have you refactored similar projects? What architectural patterns work best for web scraping?</p>\n\n<p><strong>Drop a comment with:</strong></p>\n\n<ul>\n<li>Your biggest scraping pain points</li>\n<li>Scrapy tips and tricks</li>\n<li>Alternative tools you've tried</li>\n</ul>\n\n<p>Let's help each other build better scrapers!</p>\n\n\n\n\n<p><em>P.S. - Web scraping should always respect robots.txt and rate limits. This project is for educational purposes.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dictionary in Python (4)","url":"https://dev.to/hyperkai/dictionary-in-python-4-3093","date":1750861581,"author":"Super Kai (Kazuya Ito)","guid":170747,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-1-2ofj\">My post</a> explains dictionary (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-2-23f0\">My post</a> explains dictionary (2).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-3-2gio\">My post</a> explains useful functions for a dictionary (1).</li>\n</ul>\n\n<p>You can use <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.get\" rel=\"noopener noreferrer\">get()</a> to get a value from a dictionary by a key as shown below:<br>\n*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>key</code>(Required) for a key.</li>\n<li>The 2nd argument is <code>default</code>(Optional-Default:<code>None</code>) to return a value when a key doesn't exist.</li>\n<li>Don't use <code>key=</code> and <code>default=</code>.\n</li>\n</ul>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># John\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">gender</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># None\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">gender</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Doesn</span><span class=\"sh\">'</span><span class=\"s\">t exist!</span><span class=\"sh\">\"</span><span class=\"p\">))</span> <span class=\"c1\"># Doesn't exist!\n</span></code></pre>\n\n</div>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n     <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># {'name': 'Anna', 'age': 24}\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># Anna\n</span></code></pre>\n\n</div>\n\n\n<p>You can use <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.update\" rel=\"noopener noreferrer\">update()</a> to update a dictionary as shown below:<br>\n*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>key</code>(Required) for a key.</li>\n<li>The 2nd argument is <code>default</code>(Optional-Default:<code>None</code>) to return a value when a key doesn't exist.</li>\n<li>Don't use <code>key=</code> and <code>default=</code>.\n</li>\n</ul>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">David</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">gender</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Male</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'name': 'David', 'age': 36, 'gender': 'Male'}\n</span></code></pre>\n\n</div>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n     <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">David</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">gender</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Male</span><span class=\"sh\">'</span><span class=\"p\">}})</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">update</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Tom</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">gender</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Male</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'person1': {'name': 'David', 'gender': 'Male'},\n#  'person2': {'name': 'Tom', 'age': 24, 'gender': 'Male'}}\n</span></code></pre>\n\n</div>\n\n\n<p>You can use a <a href=\"https://docs.python.org/3/tutorial/datastructures.html#the-del-statement\" rel=\"noopener noreferrer\">del statement</a> to remove a key and value from a dictionary by a key in each <code>[]</code> or to remove a variable itself as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'age': 36}\n</span>\n<span class=\"k\">del</span> <span class=\"n\">v</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># NameError: name 'v' is not defined\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n     <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'person2': {'name': 'Anna', 'age': 24}}\n</span>\n<span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'person2': {'age': 24}}\n</span>\n<span class=\"k\">del</span> <span class=\"n\">v</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># NameError: name 'v' is not defined\n</span></code></pre>\n\n</div>\n\n\n\n<p>You can use <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.pop\" rel=\"noopener noreferrer\">pop()</a> to remove a key and value from a dictionary by a key, throwing the value as shown below:<br>\n*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>key</code>(Required) for a key.</li>\n<li>The 2nd argument is <code>default</code>(Optional) to return a value when a key doesn't exist. *There is no default value.</li>\n<li>If <code>key</code> doesn't exist and <code>default</code> isn't set, there is error.</li>\n<li>Don't use <code>key=</code> and <code>default=</code>.\n</li>\n</ul>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># John\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'age': 36}\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">gender</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Doesn</span><span class=\"sh\">'</span><span class=\"s\">t exist!</span><span class=\"sh\">\"</span><span class=\"p\">))</span> <span class=\"c1\"># Doesn't exist!\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'age': 36}\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">gender</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># KeyError: 'gender'\n</span></code></pre>\n\n</div>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n     <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># {'name': 'John', 'age': 36}\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"c1\"># Anna\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'person2': {'age': 24}}\n</span></code></pre>\n\n</div>\n\n\n<p>You can use <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.popitem\" rel=\"noopener noreferrer\">popitem()</a> to remove the last key and value from a dictionary, throwing the value as shown below:<br>\n*Memos:</p>\n\n<ul>\n<li>There are no arguments.</li>\n<li>If a dictionary is empty, there is error.\n</li>\n</ul>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">gender</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Male</span><span class=\"sh\">'</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">popitem</span><span class=\"p\">())</span> <span class=\"c1\"># ('gender', 'Male')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'John', 'age': 36}\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">popitem</span><span class=\"p\">())</span> <span class=\"c1\"># ('age', 36)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'John'}\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">popitem</span><span class=\"p\">())</span> <span class=\"c1\"># ('name', 'John')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {}\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">popitem</span><span class=\"p\">())</span> <span class=\"c1\"># KeyError: 'popitem(): dictionary is empty'\n</span></code></pre>\n\n</div>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n     <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">popitem</span><span class=\"p\">())</span> <span class=\"c1\"># ('person2', {'name': 'Anna', 'age': 24})\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'person1': {'name': 'John', 'age': 36}}\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">popitem</span><span class=\"p\">())</span> <span class=\"c1\"># ('age', 36)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'person1': {'name': 'John'}}\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">popitem</span><span class=\"p\">())</span> <span class=\"c1\"># ('name', 'John')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'person1': {}}\n</span></code></pre>\n\n</div>\n\n\n<p>You can use <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.clear\" rel=\"noopener noreferrer\">clear()</a> to remove all keys and values from a dictionary as shown below. *There are no arguments:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">clear</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {}\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n     <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">clear</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'person1': {}, 'person2': {'name': 'Anna', 'age': 24}}\n</span>\n<span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">clear</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {} \n</span></code></pre>\n\n</div>\n\n\n\n<p>You can use <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.copy\" rel=\"noopener noreferrer\">copy()</a> to copy a dictionary as shown below:<br>\n*Memos:</p>\n\n<ul>\n<li>There are no arguments.</li>\n<li>\n<code>copy()</code> does shallow copy.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">()</span>\n\n<span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">David</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'John', 'age': 36}\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'David', 'age': 36}\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n      <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">()</span>\n\n<span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">David</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">48</span><span class=\"p\">}</span>\n<span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Tom</span><span class=\"sh\">'</span>\n<span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">18</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"c1\"># {'person1': {'name': 'John', 'age': 36},\n</span>          <span class=\"c1\">#  'person2': {'name': 'Tom', 'age': 18}} # Here\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># {'person1': {'name': 'David', 'age': 48},\n</span>          <span class=\"c1\">#  'person2': {'name': 'Tom', 'age': 18}} # Here\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Check out this blog about our hackathon winning project DreamOps!","url":"https://dev.to/incharajayaram/check-out-this-blog-about-our-hackathon-winning-project-dreamops-3gpb","date":1750861262,"author":"Inchara J","guid":170746,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/skysingh04\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F2305180%2F37572292-a0f8-48c5-8821-09ede2d8ad46.jpeg\" alt=\"skysingh04\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/skysingh04/dreamops-the-ai-agent-thats-fixes-the-oncall-circus-2apl\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>DreamOps: The AI Agent That's Fixes the Oncall Circus</h2>\n      <h3>Akash Singh „Éª Jun 25</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#ai</span>\n        <span class=\"ltag__link__tag\">#devops</span>\n        <span class=\"ltag__link__tag\">#programming</span>\n        <span class=\"ltag__link__tag\">#python</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dictionary in Python (3)","url":"https://dev.to/hyperkai/dictionary-in-python-3-2gio","date":1750860694,"author":"Super Kai (Kazuya Ito)","guid":170745,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-1-2ofj\">My post</a> explains dictionary (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-2-23f0\">My post</a> explains dictionary (2).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-4-3093\">My post</a> explains the useful functions for a dictionary (2).</li>\n</ul>\n\n<p>You can use <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.items\" rel=\"noopener noreferrer\">items()</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.keys\" rel=\"noopener noreferrer\">keys()</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.values\" rel=\"noopener noreferrer\">values()</a> as shown below:</p>\n\n<ul>\n<li>\n<code>items()</code> can get zero or more keys and values from a dictionary. *There are no arguments.</li>\n<li>\n<code>keys()</code> can get zero or more keys from a dictionary. *There are no arguments.</li>\n<li>\n<code>values()</code> can get zero or more values from a dictionary. *There are no arguments.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>\n<span class=\"c1\"># dict_keys(['name', 'age'])\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">())</span>\n<span class=\"c1\"># dict_values(['John', 36])\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">())</span>\n<span class=\"c1\"># dict_items([('name', 'John'), ('age', 36)])\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n     <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>\n<span class=\"c1\"># dict_keys(['person1', 'person2'])\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">())</span>\n<span class=\"c1\"># dict_values([{'name': 'John', 'age': 36},\n#              {'name': 'Anna', 'age': 24}])\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">())</span>\n<span class=\"c1\"># dict_items([('person1', {'name': 'John', 'age': 36}),\n#             ('person2', {'name': 'Anna', 'age': 24})])\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">keys</span><span class=\"p\">())</span>\n<span class=\"c1\"># dict_keys(['name', 'age'])\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">values</span><span class=\"p\">())</span>\n<span class=\"c1\"># dict_values(['Anna', 24])\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">items</span><span class=\"p\">())</span>\n<span class=\"c1\"># dict_items([('name', 'Anna'), ('age', 24)])\n</span></code></pre>\n\n</div>\n\n\n\n<p>By default, the one or more keys of a dictionary are used with an iterable unpacking as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span>\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># name\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># age\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">..</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># John\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># 36\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># ('name', 'John')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># ('age', 36)\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n      <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span>\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># person1\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># person2\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n      <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'John', 'age': 36}\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'Anna', 'age': 24}\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n      <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># ('person1', {'name': 'John', 'age': 36})\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># ('person2', {'name': 'Anna', 'age': 24})\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n      <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># name\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># age\n</span>\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># Anna\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># 24\n</span>\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># ('name', 'Anna')\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># ('age', 24)\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n      <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'John', 'age': 36}\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'Anna', 'age': 24}\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n      <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n<span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># ('person1', {'name': 'John', 'age': 36})\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># ('person2', {'name': 'Anna', 'age': 24})\n</span></code></pre>\n\n</div>\n\n\n\n<p>You can use <a href=\"https://docs.python.org/3/library/functions.html#sorted\" rel=\"noopener noreferrer\">sorted()</a> to sort the zero or more keys and/or values of a dictionary as a list as shown below:<br>\n*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Required) for an iterable. *Don't use <code>iterable=</code>.</li>\n<li>The 2nd argument is <code>key</code>(Optional-Default:<code>None</code>) for a function.</li>\n<li>The 3rd argument is <code>reverse</code>(Optional-Default:<code>False</code>) to reverse a dictionary as a list.</li>\n<li>By default, the zero or more keys of a dictionary are used with <code>sorted()</code>.</li>\n<li>\n<code>sorted()</code> creates a copy. *Be careful, <code>sorted()</code> does shallow copy instead of deep copy as <a href=\"https://github.com/python/cpython/issues/134470\" rel=\"noopener noreferrer\">my issue</a>.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span>\n<span class=\"c1\"># ['age', 'name']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)))</span>\n<span class=\"c1\"># [36, 'John']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">()))</span>\n<span class=\"c1\"># [('age', 36), ('name', 'John')]\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">(),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># ['name', 'age']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># ['John', 36]\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">(),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># [('name', 'John'), ('age', 36)]\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n     <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span>\n<span class=\"c1\"># ['person1', 'person2']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)))</span>\n<span class=\"c1\"># [{'name': 'Anna', 'age': 24},\n#  {'name': 'John', 'age': 36}]\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">()))</span>\n<span class=\"c1\"># [('person1', {'name': 'John', 'age': 36}),\n#  ('person2', {'name': 'Anna', 'age': 24})]\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">(),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># ['person2', 'person1']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># [{'name': 'John', 'age': 36},\n#  {'name': 'Anna', 'age': 24}]\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">(),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># [('person2', {'name': 'Anna', 'age': 24}),\n#  ('person1', {'name': 'John', 'age': 36})]\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">]))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">keys</span><span class=\"p\">()))</span>\n<span class=\"c1\"># ['age', 'name']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">values</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)))</span>\n<span class=\"c1\"># [24, 'Anna']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">items</span><span class=\"p\">()))</span>\n<span class=\"c1\"># [('age', 24), ('name', 'Anna')]\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">keys</span><span class=\"p\">(),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># ['name', 'age']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">values</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># ['Anna', 24]\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">items</span><span class=\"p\">(),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># [('name', 'Anna'), ('age', 24)]\n</span></code></pre>\n\n</div>\n\n\n\n<p>You can use <a href=\"https://docs.python.org/3/library/functions.html#reversed\" rel=\"noopener noreferrer\">reversed()</a> to reverse the zero or more keys and/or values of a dictionary as shown below:<br>\n*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>seq</code>(Required) for an iterable.</li>\n<li>*Don't use <code>seq=</code>:</li>\n<li>By default, the zero or more keys of a dictionary are used with <code>reversed()</code>.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">())))</span>\n<span class=\"c1\"># ['age', 'name']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">())))</span>\n<span class=\"c1\"># [36, 'John']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">())))</span>\n<span class=\"c1\"># [('age', 36), ('name', 'John')]\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span>\n     <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">())))</span>\n<span class=\"c1\"># ['person2', 'person1']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">())))</span>\n<span class=\"c1\"># [{'name': 'Anna', 'age': 24},\n#  {'name': 'John', 'age': 36}]\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">())))</span>\n<span class=\"c1\"># [('person2', {'name': 'Anna', 'age': 24}),\n#  ('person1', {'name': 'John', 'age': 36})]\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">])))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">keys</span><span class=\"p\">())))</span>\n<span class=\"c1\"># ['age', 'name']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">values</span><span class=\"p\">())))</span>\n<span class=\"c1\"># [24, 'Anna']\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">reversed</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">items</span><span class=\"p\">())))</span>\n<span class=\"c1\"># [('age', 24), ('name', 'Anna')]\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dictionary in Python (2)","url":"https://dev.to/hyperkai/dictionary-in-python-2-23f0","date":1750860387,"author":"Super Kai (Kazuya Ito)","guid":170744,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-1-2ofj\">My post</a> explains dictionary (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-3-2gio\">My post</a> explains the useful functions for a dictionary (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-4-3093\">My post</a> explains the useful functions for a dictionary (2).</li>\n</ul>\n\n<p><code>dict()</code> can create a dictionary with or without a dictonary as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>The 1st argument is <code>iterable</code>(Optional-Type:<code>iterable</code>). *Don't use <code>iterable=</code>.</li>\n<li>The 2nd or the later arguments are <code>**kwarg</code>(Optional). *Don't use any keywords like <code>**kwarg=</code>, <code>kwarg=</code>, <code>**kwargs=</code>, <code>kwargs=</code>, etc.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">dict</span><span class=\"p\">())</span> <span class=\"c1\"># []\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">dict</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}))</span> <span class=\"c1\"># Dictionary\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">dict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">)]))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">dict</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">},</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">36</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">dict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">)],</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">36</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">36</span><span class=\"p\">))</span>\n<span class=\"c1\"># {'name': 'John', 'age': 36}\n</span></code></pre>\n\n</div>\n\n\n\n<p><code>dict()</code> cannot create a dictionary with a list, tuple, set, iterator, string or <code>range()</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"c1\"># ValueError: dictionary update sequence element #0 has length 1; 2 is required\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"c1\"># ValueError: dictionary update sequence element #0 has length 1; 2 is required\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"c1\"># ValueError: dictionary update sequence element #0 has length 1; 2 is required\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">])</span> <span class=\"c1\"># Iterator\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"c1\"># ValueError: dictionary update sequence element #0 has length 1; 2 is required\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Hello</span><span class=\"sh\">'</span> <span class=\"c1\"># String\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"c1\"># ValueError: dictionary update sequence element #0 has length 1; 2 is required\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"c1\"># TypeError: cannot convert dictionary update sequence element #0 to a sequence\n</span></code></pre>\n\n</div>\n\n\n\n<p>Be careful, a huge dictionary gets <code>MemoryError</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">100000000</span><span class=\"p\">)}</span>\n<span class=\"c1\"># MemoryError\n</span></code></pre>\n\n</div>\n\n\n\n<p>You can access and change a dictionary by keying as shown below. *Keying can be done with one or more <code>[key]</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span> <span class=\"c1\"># 1D dictionary\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">36</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">dict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">)])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"c1\"># John 36\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"c1\"># KeyError: 0\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"c1\"># KeyError: slice(0, 2, None)\n</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">David</span><span class=\"sh\">'</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">gender</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Male</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'name': 'David', 'age': 36, 'gender': 'Male'}\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span> <span class=\"c1\"># 2D dictionary\n</span>     <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">person1</span><span class=\"o\">=</span><span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">36</span><span class=\"p\">),</span>\n         <span class=\"n\">person2</span><span class=\"o\">=</span><span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">))</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">dict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nf\">dict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">)])),</span>\n          <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nf\">dict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)]))])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"c1\"># {'name': 'John', 'age': 36} {'name': 'Anna', 'age': 24}\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n      <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"c1\"># John 36 Anna 24\n</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">David</span><span class=\"sh\">'</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">gender</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Female</span><span class=\"sh\">'</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">person3</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Tom</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">gender</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Male</span><span class=\"sh\">'</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'person1': {'name': 'David', 'age': 36},\n#  'person2': {'name': 'Anna', 'age': 24, 'gender': 'Female'},\n#  'person3': {'name': 'Tom', 'age': 18, 'gender': 'Male'}}\n</span></code></pre>\n\n</div>\n\n\n\n<p>The variables <code>v1</code> and <code>v2</code> refer to the same dictionary unless copied as shown below:</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<code>is</code> keyword can check if <code>v1</code> and <code>v2</code> refer to the same dictionary.</li>\n<li>\n<a href=\"https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\" rel=\"noopener noreferrer\">copy()</a> can do shallow copy. *There are no arguments.</li>\n<li>\n<a href=\"https://docs.python.org/3/library/copy.html#copy.deepcopy\" rel=\"noopener noreferrer\">deepcopy()</a> can do deep copy. *There are no arguments.</li>\n<li>\n<code>deepcopy()</code> should be used because it's safe, doing copy deeply while <code>copy()</code> isn't safe, doing copy shallowly.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">deepcopy</span>\n\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span> <span class=\"c1\"># v2 refers to the same dictionary as v1.\n</span>\n<span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">David</span><span class=\"sh\">'</span> <span class=\"c1\"># Changes the same dictionary as v1.\n</span>                   <span class=\"c1\"># ‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'David', 'age': 36}\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'David', 'age': 36}\n</span>                   <span class=\"c1\"># ‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># True\n</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">()</span>    <span class=\"c1\"># v2 refers to the different dictionary from v1.\n</span><span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"nf\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n\n<span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span> <span class=\"c1\"># Changes the different dictionary from v1.\n</span>                   <span class=\"c1\"># ‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'David', 'age': 36}\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'Anna', 'age': 36}\n</span>                   <span class=\"c1\"># ‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dictionary in Python (1)","url":"https://dev.to/hyperkai/dictionary-in-python-1-2ofj","date":1750860108,"author":"Super Kai (Kazuya Ito)","guid":170701,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>‚òï</p>\n\n<p>*Memos:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-2-23f0\">My post</a> explains dictionary (2).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-3-2gio\">My post</a> explains the useful functions for a dictionary (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-4-3093\">My post</a> explains the useful functions for a dictionary (2).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/list-in-python-1-n21\">My post</a> explains a list and the list with indexing.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/tuple-in-python-1-38bc\">My post</a> explains a tuple.</li>\n<li>\n<a href=\"https://dev.to/hyperkai/set-in-python-1-5f56\">My post</a> explains a set and copy.</li>\n</ul>\n\n<p>A dictionary:</p>\n\n<ul>\n<li>is the ordered collection with zero or more pairs of <code>key:value</code> to use non-huge data not to get <code>MemoryError</code>.</li>\n<li>doesn't allow duplicated keys (even with different types). *The values of the last duplicated keys are used.</li>\n<li>is mutable so it can be changed.</li>\n<li>can have any mixed types of keys and values except a list, set and dictionary for a key.</li>\n<li>can be used like a list.</li>\n<li>can be unpacked with <code>**</code>.</li>\n<li>cannot be enlarged with <code>*</code> and a number.</li>\n<li>can be created by a dictionary(dict) comprehension or <a href=\"https://docs.python.org/3/library/functions.html#func-set\" rel=\"noopener noreferrer\">dict()</a> with or without a dictionary. *<code>dict()</code> cannot create a dictionary with a list, tuple, set, iterator, string or <a href=\"https://docs.python.org/3/library/functions.html#func-range\" rel=\"noopener noreferrer\">range()</a>.</li>\n<li>can be accessed and changed by keying and indexing.</li>\n<li>cannot be accessed and changed by slicing properly.</li>\n<li>can be copied to refer to a different dictionary.</li>\n</ul>\n\n\n\n<h1>\n  \n  \n  <em>A dictionary is for non-huge data otherwise it gets <code>MemoryError</code>.</em>\n</h1>\n\n\n\n\n<p>You can create a dictionary as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{}</span> <span class=\"c1\"># Empty 1D dictionary\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">dict</span><span class=\"p\">()</span> <span class=\"c1\"># Empty 1D dictionary\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span> <span class=\"c1\"># 1D dictionary\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">36</span><span class=\"p\">)</span> <span class=\"c1\"># 1D dictionary\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">dict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">)])</span> <span class=\"c1\"># 1D dictionary\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}</span> <span class=\"c1\"># 1D dictionary\n</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">},</span> <span class=\"c1\"># 2D dictionary\n</span>     <span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}}</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">person1</span><span class=\"o\">=</span><span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">36</span><span class=\"p\">),</span> <span class=\"c1\"># 2D dictionary\n</span>         <span class=\"n\">person2</span><span class=\"o\">=</span><span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">))</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">dict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">person1</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nf\">dict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">)])),</span> <span class=\"c1\"># 2D dictionary\n</span>          <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">person2</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nf\">dict</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)]))])</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"o\">+</span><span class=\"mf\">0.0j</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">}</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mf\">2.3</span><span class=\"p\">:</span><span class=\"mf\">4.5</span><span class=\"p\">,</span> <span class=\"mf\">2.3</span><span class=\"o\">+</span><span class=\"mf\">4.5j</span><span class=\"p\">:</span><span class=\"mf\">6.7</span><span class=\"o\">+</span><span class=\"mf\">8.9j</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n     <span class=\"sh\">'</span><span class=\"s\">l</span><span class=\"sh\">'</span><span class=\"p\">:[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">):(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"sh\">'</span><span class=\"s\">s</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">},</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">}}</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">''</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">abc</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">():(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)}</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">apple</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">orange</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">kiwi</span><span class=\"sh\">'</span><span class=\"p\">}</span> <span class=\"c1\"># 1D dictionary\n# No error\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]:[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]}</span> \n<span class=\"c1\"># TypeError: unhashable type: 'list'\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{{</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">}:{</span><span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">}}</span>\n<span class=\"c1\"># TypeError: unhashable type: 'dict'\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">}:{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">}}</span>\n<span class=\"c1\"># TypeError: unhashable type: 'set'\n</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for *: 'dict' and 'int'\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary is the ordered collection with zero or more pairs of <code>key:value</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'John', 'age': 36}\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary doesn't allow duplicated keys (even with different types) as shown below. *The values of the last duplicated keys are used:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Anna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {'name': 'Anna', 'age': 24}\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"o\">+</span><span class=\"mf\">0.0j</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {1: 'd'}\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary can have any mixed types of values except a list, set and dictionary for a key as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mf\">2.3</span><span class=\"p\">:</span><span class=\"mf\">4.5</span><span class=\"p\">,</span> <span class=\"mf\">2.3</span><span class=\"o\">+</span><span class=\"mf\">4.5j</span><span class=\"p\">:</span><span class=\"mf\">6.7</span><span class=\"o\">+</span><span class=\"mf\">8.9j</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n     <span class=\"sh\">'</span><span class=\"s\">l</span><span class=\"sh\">'</span><span class=\"p\">:[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">):(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"sh\">'</span><span class=\"s\">s</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">},</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">}}</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'a': 'b', 2: 3, 2.3: 4.5, (2.3+4.5j): (6.7+8.9j), True: False,\n#  'l': [4, 5], (2, 3): (4, 5), 's': {4, 5}, 'd': {'c': 'd'}}\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mf\">2.3</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mf\">2.3</span><span class=\"o\">+</span><span class=\"mf\">4.5j</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)])</span>\n<span class=\"c1\"># 3 4.5 (6.7+8.9j) False (4, 5)\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">''</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">abc</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">():(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">''</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[()])</span>\n<span class=\"c1\"># abc (1, 2, 3)\n</span></code></pre>\n\n</div>\n\n\n\n<p>You can use a dictionary like a list by indexing but not by slicing properly as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">apple</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">orange</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">kiwi</span><span class=\"sh\">'</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"c1\"># Apple Orange Kiwi\n</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">APPLE</span><span class=\"sh\">'</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">ORANGE</span><span class=\"sh\">'</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">KIWI</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"c1\"># APPLE ORANGE KIWI\n</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">banana</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">peach</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># apple orange kiwi ['banana', 'peach']\n</span></code></pre>\n\n</div>\n\n\n\n<p><code>**</code> can unpack a dictionary as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">fname</span><span class=\"sh\">\"</span><span class=\"p\">:</span><span class=\"sh\">\"</span><span class=\"s\">John</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">lname</span><span class=\"sh\">\"</span><span class=\"p\">:</span><span class=\"sh\">\"</span><span class=\"s\">Smith</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">age</span><span class=\"sh\">\"</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">gender</span><span class=\"sh\">\"</span><span class=\"p\">:</span><span class=\"sh\">\"</span><span class=\"s\">Male</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">v2</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># {'fname': 'John', 'lname': 'Smith', 'age': 36, 'gender': 'Male'}\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary(dict) comprehension can create a dictionary as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\"># {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: Your Guide to the Python print() Function","url":"https://realpython.com/python-print/","date":1750860000,"author":"","guid":170725,"unread":true,"content":"<p>If you‚Äôre like most Python users, then you probably started your Python journey by learning about . It helped you write your very own ‚ÄúHello, World!‚Äù one-liner and brought your code to life on the screen. Beyond that, you can use it to format messages and even find some bugs. But if you think that‚Äôs all there is to know about Python‚Äôs  function, then you‚Äôre missing out on a lot!</p><p>Keep reading to take full advantage of this seemingly boring and unappreciated little function. This tutorial will get you up to speed with using Python  effectively. However, be prepared for a deep dive as you go through the sections. You may be surprised by how much  has to offer!</p><p><strong>By the end of this tutorial, you‚Äôll understand that:</strong></p><ul><li>The  function can handle  and  to format output effectively.</li><li>You can  output to  or  using the  argument, enhancing flexibility.</li><li> in  helps verify code behavior without altering the original function.</li><li>Using the  argument ensures immediate output, overcoming  in certain environments.</li><li> is achievable by implementing locks to prevent output interleaving.</li></ul><p>If you‚Äôre just <a href=\"https://realpython.com/python-beginner-tips/\">getting started with Python</a>, then you‚Äôll benefit most from reading the first part of this tutorial, which illustrates the essentials of printing in Python. Otherwise, feel free to skip ahead and explore the sections that interest you the most.</p><div><p> Test your knowledge with our interactive ‚ÄúThe Python print() Function‚Äù quiz. You‚Äôll receive a score upon completion to help you track your learning progress:</p><div><div><a href=\"https://realpython.com/quizzes/python-print-guide/\"></a><p>In this quiz, you'll test your understanding of Python's built-in print() function, covering how to format output, specify custom separators, and more.</p></div></div></div><p>It‚Äôs time to jump in by looking at a few real-life examples of printing in Python. By the end of this section, you‚Äôll know every possible way of calling .</p><p>The simplest example of using Python  requires just a few keystrokes:</p><p>This produces an invisible <a href=\"https://en.wikipedia.org/wiki/Newline\">newline character</a>, which in turn causes a  to appear on your screen. To add vertical space, you can call  multiple times in a row like this:</p><p>While you don‚Äôt pass any arguments to , you still need to put empty parentheses at the end of the line to tell Python to actually <a href=\"https://realpython.com/videos/example-function/\">execute that function</a> rather than just refer to it by name. Without parentheses, you‚Äôd obtain a <a href=\"https://en.wikipedia.org/wiki/Reference_(computer_science)\">reference</a> to the underlying function object:</p><p>The code snippet above runs within an interactive <a href=\"https://realpython.com/python-repl/\">Python REPL</a>, as indicated by the prompt (). Because the REPL executes each line of Python code immediately, you see a blank line right after calling . On the other hand, when you skip the trailing parentheses, you get to see a string representation of the  function itself.</p><p>As you just saw, calling  without arguments results in a blank line, which is a line comprised solely of the newline character. Don‚Äôt confuse this with an , which doesn‚Äôt contain any characters at all, not even the newline!</p><ul></ul><p>The first string literal is exactly one character long, whereas the second one has no content‚Äîit‚Äôs empty.</p><div><p> To remove the newline character from a string in Python, use its  method, like this:</p></div><p>Even though Python usually takes care of the newline character for you, it helps to understand how to deal with it yourself.</p>","contentLength":3191,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"DreamOps: The AI Agent That Fixes the Oncall Circus","url":"https://dev.to/skysingh04/dreamops-the-ai-agent-thats-fixes-the-oncall-circus-2apl","date":1750859382,"author":"Akash Singh","guid":170700,"unread":true,"content":"<h2>\n  \n  \n  The Circus of Being Oncall\n</h2>\n\n<p>Picture this: It's 3 AM. Your phone buzzes with that dreaded PagerDuty alert. Your production database is down, users are angry, and you're stumbling in the dark trying to diagnose what went wrong. Sound familiar?</p>\n\n<p><strong>This is the reality for thousands of on-call engineers worldwide:</strong></p>\n\n<ul>\n<li>Constant sleep interruptions and alert fatigue</li>\n<li>Manual log analysis across multiple systems under pressure\n</li>\n<li>30-60 minutes of stressful debugging for common issues</li>\n<li>Inconsistent remediation quality when you're exhausted</li>\n<li>Burnout from repetitive tasks that could be automated</li>\n</ul>\n\n<p>We built <strong>DreamOps</strong> to solve this exact problem. And the results? <strong>Mind-blowing.</strong></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fztjcouke790qu4saihmn.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fztjcouke790qu4saihmn.png\" alt=\"Image description\" width=\"800\" height=\"579\"></a></p>\n\n\n\n\n<h2>\n  \n  \n  Introduction\n</h2>\n\n<p>I am Akash Singh, a third year engineering student and Open Source Contributor from Bangalore.<br>\nHere is my <a href=\"https://www.linkedin.com/in/skysingh04/\" rel=\"noopener noreferrer\">LinkedIn</a>, <a href=\"https://github.com/SkySingh04\" rel=\"noopener noreferrer\">GitHub</a> and <a href=\"https://x.com/SkySingh04\" rel=\"noopener noreferrer\">Twitter</a></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4eayocft44kkbwoqpc8z.JPG\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4eayocft44kkbwoqpc8z.JPG\" alt=\"Sky Singh\" width=\"800\" height=\"533\"></a></p>\n\n<blockquote>\n<p>I go by the name SkySingh04 online.</p>\n</blockquote>\n\n\n<h2>\n  \n  \n  Meet DreamOps: Your AI-Powered On-Call Partner\n</h2>\n\n<p>DreamOps is an intelligent incident response platform that automatically triages and resolves infrastructure issues using Claude AI and advanced integrations. Think of it as having a senior DevOps engineer who never sleeps, never gets tired, and learns from every incident.</p>\n<h3>\n  \n  \n  üéØ <strong>The Impact</strong>\n</h3>\n\n<ul>\n<li>\n<strong>80% faster incident resolution</strong> (2-5 minutes vs 30-60 minutes)</li>\n<li><strong>2-4 hours saved per on-call shift</strong></li>\n<li>\n<strong>Zero 3 AM wake-up calls</strong> for routine issues</li>\n<li>\n<strong>Consistent remediation quality</strong> regardless of time of day</li>\n</ul>\n\n<p><iframe class=\"tweet-embed\" id=\"tweet-1936766682464428497-357\" src=\"https://platform.twitter.com/embed/Tweet.html?id=1936766682464428497\">\n</iframe>\n\n  // Detect dark theme\n  var iframe = document.getElementById('tweet-1936766682464428497-357');\n  if (document.body.className.includes('dark-theme')) {\n    iframe.src = \"https://platform.twitter.com/embed/Tweet.html?id=1936766682464428497&amp;theme=dark\"\n  }\n\n\n\n</p>\n\n<h3>\n  \n  \n  üîß <strong>How It Works</strong>\n</h3>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fonc06s0zv79qz6vnn3l7.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fonc06s0zv79qz6vnn3l7.png\" alt=\"Image description\" width=\"800\" height=\"431\"></a></p>\n\n<p>When PagerDuty sends an alert, our AI agent:</p>\n\n<ol>\n<li>\n<strong>Instantly analyzes</strong> the incident with full Kubernetes context</li>\n<li>\n<strong>Diagnoses root cause</strong> using logs, metrics, and documentation\n</li>\n<li>\n<strong>Executes remediation</strong> commands automatically (with safety checks)</li>\n<li>\n<strong>Only escalates</strong> truly complex issues that need human intervention</li>\n</ol>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxc4i4c1a3dbv3tod2myt.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxc4i4c1a3dbv3tod2myt.png\" alt=\"Image description\" width=\"800\" height=\"416\"></a></p>\n\n\n\n\n<h2>\n  \n  \n  The Tech Behind the Magic ‚ú®\n</h2>\n\n<h3>\n  \n  \n  <strong>AI-First Architecture</strong>\n</h3>\n\n<ul>\n<li>\n<strong>Claude AI Integration</strong>: Advanced reasoning for root cause analysis</li>\n<li>\n<strong>Model Context Protocol (MCP)</strong>: Seamless integration with 10+ tools</li>\n<li>\n<strong>Confidence Scoring</strong>: Only auto-executes actions with ‚â•80% confidence</li>\n<li>\n<strong>Risk Assessment</strong>: Categorizes commands as low/medium/high risk</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>Production-Ready Stack</strong>\n</h3>\n\n<ul>\n<li>\n<strong>Backend</strong>: Python FastAPI with async processing</li>\n<li>\n<strong>Frontend</strong>: Next.js SaaS interface with real-time dashboards</li>\n<li>\n<strong>Infrastructure</strong>: AWS ECS/EKS deployment ready</li>\n<li>\n<strong>Integrations</strong>: Kubernetes, PagerDuty, Grafana, GitHub, Slack, Notion</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>YOLO Mode</strong> üé¢\n</h3>\n\n<p>Yes, we actually called it YOLO mode. When enabled, DreamOps autonomously executes remediation commands for common issues like:</p>\n\n<ul>\n<li>Pod crashes (CrashLoopBackOff)</li>\n<li>Memory issues (OOMKilled)\n</li>\n<li>Configuration problems</li>\n<li>Deployment failures</li>\n</ul>\n\n<p><em>But don't worry - it's safer than it sounds. Every action is risk-assessed and confidence-scored.</em></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fpvpoil1i7svh96k6f2uo.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fpvpoil1i7svh96k6f2uo.png\" alt=\"Image description\" width=\"800\" height=\"355\"></a></p>\n\n\n\n\n<h2>\n  \n  \n  From Hackathon Glory to Production Reality\n</h2>\n\n<h3>\n  \n  \n  <strong>The Lightspeed Warpseed 2025 Victory</strong> üèÜ\n</h3>\n\n<p>This project didn't just emerge from our shared frustration with traditional incident response - it was born in the crucible of competition. At the <strong>Lightspeed Warpseed 2025 hackathon</strong>, we took our 3 AM debugging nightmares and turned them into a winning solution.</p>\n\n<p><strong>The result? We won $3,000 USD and validation that we'd struck gold.</strong> </p>\n\n<p>The hackathon judges were blown away by our approach to solving a problem that every engineer in the room had experienced. While other teams built incremental improvements, we reimagined incident response from the ground up with AI at the core.</p>\n\n<h3>\n  \n  \n  <strong>The Hackathon Journey</strong>\n</h3>\n\n<p>We've all been there - debugging production issues at ungodly hours, making critical decisions while sleep-deprived. During the hackathon, we:</p>\n\n<ul>\n<li>\n<strong>Identified the core pain point</strong> that affects millions of engineers worldwide</li>\n<li>\n<strong>Leveraged cutting-edge AI</strong> (Claude) in ways no one had attempted before</li>\n<li>\n<strong>Built a working prototype</strong> that actually resolved real Kubernetes issues</li>\n<li>\n<strong>Demonstrated measurable impact</strong> with our 80% faster resolution times</li>\n</ul>\n\n<p>The hackathon victory wasn't just about the prize money - it was proof that the developer community desperately needed this solution.</p>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/na-pxlHH4YE\">\n</iframe>\n</p>\n\n<h3>\n  \n  \n  <strong>From Prototype to Platform</strong>\n</h3>\n\n<p>What started as a 48-hour hackathon sprint has evolved into a comprehensive platform that's changing how teams handle incidents. The $3,000 prize was just the beginning - we've since invested every dollar back into making DreamOps production-ready.</p>\n\n<p>üîó <strong>Check out our journey:</strong></p>\n\n<ul>\n<li>\n<a href=\"https://github.com/SkySingh04/DreamOps\" rel=\"noopener noreferrer\">Project Repository</a> <em>(Currently private - building in stealth mode)</em>\n</li>\n<li><a href=\"https://docs.google.com/presentation/d/1He5Ncvms5sOkStNiyVPttFkGBc3-AcBxB80Mj5xuPMg/edit?slide=id.p1#slide=id.p1\" rel=\"noopener noreferrer\">Pitch Presentation</a></li>\n<li><a href=\"https://drive.google.com/file/d/1Wi18x748xkNHCe25qYMs4ejcrQWcJuOz/view\" rel=\"noopener noreferrer\">Demo Video</a></li>\n<li><a href=\"https://devfolio.co/projects/dreamops-9f20\" rel=\"noopener noreferrer\">Devfolio Project</a></li>\n</ul>\n\n<p><iframe class=\"tweet-embed\" id=\"tweet-1937087277215416359-930\" src=\"https://platform.twitter.com/embed/Tweet.html?id=1937087277215416359\">\n</iframe>\n\n  // Detect dark theme\n  var iframe = document.getElementById('tweet-1937087277215416359-930');\n  if (document.body.className.includes('dark-theme')) {\n    iframe.src = \"https://platform.twitter.com/embed/Tweet.html?id=1937087277215416359&amp;theme=dark\"\n  }\n\n\n\n</p>\n\n\n\n\n<h2>\n  \n  \n  Real-World Results That Speak Volumes\n</h2>\n\n<h3>\n  \n  \n  <strong>Before DreamOps:</strong>\n</h3>\n\n<ul>\n<li>45-minute average incident resolution time</li>\n<li>Engineers woken up 3-5 times per night</li>\n<li>Inconsistent fixes due to human error under pressure</li>\n<li>High on-call stress and burnout rates</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>After DreamOps:</strong>\n</h3>\n\n<ul>\n<li>5-minute average resolution for common issues\n</li>\n<li>90% reduction in middle-of-night escalations</li>\n<li>Standardized, tested remediation procedures</li>\n<li>Engineers actually getting sleep üò¥</li>\n</ul>\n\n<blockquote>\n<p><em>\"DreamOps doesn't just solve incidents faster - it learns from each one to prevent future occurrences. It's like having a senior engineer who gets smarter with every alert.\"</em> - The Team</p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  What's Next: Building the Future of Incident Response\n</h2>\n\n<p>We're not stopping here. The hackathon victory was just the beginning - DreamOps is evolving into the definitive platform for intelligent infrastructure management.</p>\n\n<h3>\n  \n  \n  <strong>Post-Hackathon Roadmap:</strong>\n</h3>\n\n<ul>\n<li>üîÆ <strong>Predictive Incident Prevention</strong>: Stop issues before they happen</li>\n<li>üåê <strong>Multi-Cloud Support</strong>: AWS, GCP, Azure integration\n</li>\n<li>üìä <strong>Advanced Analytics</strong>: Cost impact analysis and SLO tracking</li>\n<li>ü§ù <strong>Team Collaboration</strong>: Intelligent escalation and knowledge sharing</li>\n<li>üõ°Ô∏è <strong>Security Integration</strong>: Automated security incident response</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>Looking for Strategic Partners &amp; Investors</strong>\n</h3>\n\n<p><strong>Our hackathon victory proved market demand - now we're scaling.</strong></p>\n\n<p>We're actively seeking investors and strategic partners who understand the massive pain point we're solving. The incident response market is ripe for disruption, and early adopters are seeing transformational results.</p>\n\n<p><strong>Why invest in DreamOps?</strong></p>\n\n<ul>\n<li>üèÜ <strong>Proven concept</strong>: $3,000 hackathon winner with judge validation</li>\n<li>üìà <strong>Massive market</strong>: $2B+ incident management market growing 15% annually</li>\n<li>üéØ <strong>Demonstrated traction</strong>: Real results from early adopters</li>\n<li>üöÄ <strong>AI-first approach</strong>: Leveraging the latest advances in LLMs</li>\n<li>üë• <strong>Experienced team</strong>: Deep DevOps and AI expertise</li>\n<li>üîß <strong>Production-ready</strong>: Not just a prototype - full enterprise platform</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Experience DreamOps Today\n</h2>\n\n<p>Ready to revolutionize your incident response? Here's how to get started:</p>\n\n<h3>\n  \n  \n  <strong>For Teams:</strong>\n</h3>\n\n<ol>\n<li>\n<strong>Quick Setup</strong>: Deploy in under 30 minutes</li>\n<li>\n<strong>Pilot Program</strong>: Start with non-critical alerts\n</li>\n<li>\n<strong>Gradual Rollout</strong>: Expand to full production workloads</li>\n<li>\n<strong>Sleep Better</strong>: Enjoy uninterrupted nights</li>\n</ol>\n\n<h3>\n  \n  \n  <strong>For Investors:</strong>\n</h3>\n\n<ul>\n<li>Schedule a demo call with our team</li>\n<li>Review our pitch deck and financials\n</li>\n<li>Meet our early adopters and hear their stories</li>\n<li>Join us in transforming how the world handles incidents</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  The Team Behind the Magic\n</h2>\n\n<p><strong><a href=\"https://www.linkedin.com/in/skysingh04/\" rel=\"noopener noreferrer\">Sky Singh</a></strong> - Lead Developer<br><br>\n<strong><a href=\"https://www.linkedin.com/in/inchara-j-752050251/\" rel=\"noopener noreferrer\">Inchara J</a></strong> - AI/ML Engineer<br><br>\n<strong>Himanshu</strong> - Frontend Developer<br><br>\n<strong><a href=\"https://www.linkedin.com/in/harshkg23/\" rel=\"noopener noreferrer\">Harsh Kumar Gupta</a></strong> - Backend Systems<br><br>\n<strong><a href=\"https://www.linkedin.com/in/shubhangsinha/\" rel=\"noopener noreferrer\">Shubhang Sinha</a></strong> - Cancelled on us</p>\n\n<p><em>A diverse team united by a shared mission: making on-call duty humane again. Our hackathon victory proved we have the skills - now we're building the future.</em></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frkyx3eikp23i9ffdmfd3.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frkyx3eikp23i9ffdmfd3.png\" alt=\"Image description\" width=\"680\" height=\"680\"></a></p>\n\n\n<h2>\n  \n  \n  Get Involved\n</h2>\n\n<p>Whether you're an engineer tired of 3 AM alerts, a CTO looking to improve team productivity, or an investor seeking the next big DevOps breakthrough - we want to connect.</p>\n\n<p><strong>From hackathon winners to your production environment - let's build the future of incident response together.</strong></p>\n\n<p><strong>üìß Contact us</strong>: [Insert contact information]<br><br>\n<strong>üê¶ Follow our journey</strong>: <a href=\"https://x.com/SkySingh04\" rel=\"noopener noreferrer\">@SkySingh04</a><br><br>\n<strong>üíº Investment inquiries</strong>: [Insert investor contact]<br><br>\n<strong>üîß Early access</strong>: [Insert beta signup link]</p>\n\n\n\n<p><strong>The future of incident response is here. It's intelligent, it's automated, and it lets you sleep through the night.</strong></p>\n\n<p><em>Ready to dream easy while AI takes care of your on-call duty?</em></p>\n\n\n\n<p><em>DreamOps - Because 3 AM debugging sessions should be a thing of the past.</em> ‚ú®</p>\n\n<p><em>P.S. - We're still celebrating our Lightspeed Warpseed 2025 victory, but we're more excited about the problems we're solving for engineers worldwide. Join us on this journey!</em></p>\n\n<p><iframe class=\"tweet-embed\" id=\"tweet-1936766175125631017-54\" src=\"https://platform.twitter.com/embed/Tweet.html?id=1936766175125631017\">\n</iframe>\n\n  // Detect dark theme\n  var iframe = document.getElementById('tweet-1936766175125631017-54');\n  if (document.body.className.includes('dark-theme')) {\n    iframe.src = \"https://platform.twitter.com/embed/Tweet.html?id=1936766175125631017&amp;theme=dark\"\n  }\n\n\n\n</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"An Intro to ty ‚Äì The Extremely Fast Python type checker","url":"https://www.blog.pythonlibrary.org/2025/06/25/an-intro-to-ty-the-extremely-fast-python-type-checker/","date":1750855546,"author":"Mike","guid":170690,"unread":true,"content":"<p><a href=\"https://github.com/astral-sh/ty\">Ty is a brand new, extremely fast Python type checker</a> written in Rust from the fine folks at Astral, the makers of Ruff. Ty is in preview and is not ready for production use, but you can still try it out on your code base to see how it compares to Mypy or other popular Python type checkers.</p><p>If you prefer to install ty, you can use pip:</p><h2>Using the ty Type Checker</h2><p>Want to give ty a try? You can run it in much the same way as you would Ruff. Open up your terminal and navigate to your project‚Äôs top-level directory. Then run the following command:</p><p>If ty finds anything, you will quickly see the output in your terminal.</p><p>Astral has also provided a way to exclude files from type checking. By default, ty ignores files listed in an&nbsp;&nbsp;or&nbsp;&nbsp;file.</p><p>Ruff is a great tool and has been adopted by many teams since its release. Ty will likely follow a similar trajectory if it as fast and useful as Ruff has been. Only time will tell. However, these new developments in Python tooling are exciting and will be fun to try. If you have used ty, feel free to jump into the comments and let me know what you think.</p>","contentLength":1098,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Mike Driscoll: An Intro to ty ‚Äì The Extremely Fast Python type checker","url":"https://www.blog.pythonlibrary.org/2025/06/25/an-intro-to-ty-the-extremely-fast-python-type-checker/","date":1750855546,"author":"","guid":170686,"unread":true,"content":"<p><a href=\"https://github.com/astral-sh/ty\">Ty is a brand new, extremely fast Python type checker</a> written in Rust from the fine folks at Astral, the makers of Ruff. Ty is in preview and is not ready for production use, but you can still try it out on your code base to see how it compares to Mypy or other popular Python type checkers.</p><p>If you prefer to install ty, you can use pip:</p><h2>Using the ty Type Checker</h2><p>Want to give ty a try? You can run it in much the same way as you would Ruff. Open up your terminal and navigate to your project‚Äôs top-level directory. Then run the following command:</p><p>If ty finds anything, you will quickly see the output in your terminal.</p><p>Astral has also provided a way to exclude files from type checking. By default, ty ignores files listed in an&nbsp;&nbsp;or&nbsp;&nbsp;file.</p><p>Ruff is a great tool and has been adopted by many teams since its release. Ty will likely follow a similar trajectory if it as fast and useful as Ruff has been. Only time will tell. However, these new developments in Python tooling are exciting and will be fun to try. If you have used ty, feel free to jump into the comments and let me know what you think.</p>","contentLength":1098,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Fundamentals: asynchronous","url":"https://dev.to/devopsfundamentals/python-fundamentals-asynchronous-38d7","date":1750854333,"author":"DevOps Fundamental","guid":170662,"unread":true,"content":"<h2>\n  \n  \n  Asynchronous Python: Beyond the Basics ‚Äì A Production Deep Dive\n</h2>\n\n<h3>\n  \n  \n  Introduction\n</h3>\n\n<p>In late 2022, a critical data pipeline at my previous company, a financial technology firm, experienced intermittent failures during peak trading hours. The root cause wasn‚Äôt a database bottleneck or network issue, but a subtle deadlock within a complex asynchronous data transformation process. We were using <code>asyncio</code> to parallelize the processing of market data feeds, but a poorly designed dependency chain and lack of proper error handling led to tasks blocking each other indefinitely. This incident highlighted a crucial truth: asynchronous programming in Python isn‚Äôt just about speed; it‚Äôs about correctness, resilience, and understanding the intricate interplay of concurrency. This post dives deep into the practicalities of asynchronous Python in production, covering architecture, debugging, performance, and common pitfalls.</p>\n\n<h3>\n  \n  \n  What is \"asynchronous\" in Python?\n</h3>\n\n<p>Asynchronous programming in Python, formalized by <strong>PEP 3156</strong> and refined in subsequent PEPs (particularly <strong>PEP 492</strong> for coroutines), isn‚Äôt true parallelism in the traditional sense (unless combined with multiprocessing). It‚Äôs a concurrency model that allows a single thread to switch between multiple tasks that are <em>waiting</em> for external operations (I/O, network requests, etc.).  The core concept is the <code>async</code>/<code>await</code> syntax, built on top of coroutines.  </p>\n\n<p>From a CPython internals perspective, <code>async</code>/<code>await</code> leverages generators and the <code>asyncio</code> event loop.  <code>await</code> suspends the execution of a coroutine, yielding control back to the event loop, which then schedules other ready-to-run coroutines.  This is cooperative multitasking ‚Äì coroutines must explicitly yield control.  </p>\n\n<p>The Python typing system, enhanced by <code>typing.Coroutine</code> and <code>typing.Awaitable</code>, provides static type checking for asynchronous code, crucial for large-scale projects.  Tools like <code>mypy</code> can verify that <code>await</code> is only used on awaitable objects, preventing runtime errors.</p>\n\n<h3>\n  \n  \n  Real-World Use Cases\n</h3>\n\n<ol>\n<li><p><strong>FastAPI Request Handling:</strong>  We use FastAPI extensively for building microservices.  Asynchronous request handling allows us to serve a significantly higher number of concurrent requests compared to traditional synchronous frameworks like Flask or Django.  The performance gain is particularly noticeable with I/O-bound operations like database queries or external API calls.</p></li>\n<li><p><strong>Async Job Queues (Celery with Redis):</strong>  Long-running tasks (e.g., image processing, report generation) are offloaded to Celery workers using Redis as a broker.  We leverage <code>asyncio</code> within the Celery tasks to perform concurrent I/O operations, maximizing throughput.</p></li>\n<li><p><strong>Type-Safe Data Models with Pydantic:</strong> Pydantic models can be defined with asynchronous validation using <code>@validator(\"field\", mode=\"before\")</code>. This is essential when validating data fetched from external sources asynchronously, ensuring data integrity before processing.</p></li>\n<li><p><strong>CLI Tools with <code>rich</code> and <code>asyncio</code>:</strong>  Building interactive CLI tools that perform network requests or process large datasets benefits from asynchronous operations.  The <code>rich</code> library provides excellent asynchronous progress bars and output formatting.</p></li>\n<li><p><strong>ML Preprocessing Pipelines:</strong>  In our machine learning infrastructure, we use asynchronous tasks to preprocess data in parallel.  This involves fetching data from various sources, cleaning it, and transforming it into a format suitable for model training.</p></li>\n</ol>\n\n<h3>\n  \n  \n  Integration with Python Tooling\n</h3>\n\n<p>Here's a snippet from our <code>pyproject.toml</code> demonstrating configuration for asynchronous code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight toml\"><code><span class=\"nn\">[tool.mypy]</span>\n<span class=\"py\">python_version</span> <span class=\"p\">=</span> <span class=\"s\">\"3.11\"</span>\n<span class=\"py\">strict</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n<span class=\"py\">warn_unused_configs</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n<span class=\"py\">disallow_untyped_defs</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n<span class=\"py\">check_untyped_defs</span> <span class=\"p\">=</span> <span class=\"kc\">true</span>\n\n<span class=\"nn\">[tool.pytest.ini_options]</span>\n<span class=\"py\">asyncio_mode</span> <span class=\"p\">=</span> <span class=\"s\">\"strict\"</span> <span class=\"c\"># Enforces proper async test functions</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>We use runtime hooks within our FastAPI application to ensure proper shutdown of the <code>asyncio</code> event loop:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">fastapi</span> <span class=\"kn\">import</span> <span class=\"n\">FastAPI</span>\n<span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">FastAPI</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app.on_event</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">shutdown</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">shutdown_event</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Gracefully close database connections, etc.\n</span>\n    <span class=\"k\">pass</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Pydantic integrates seamlessly with <code>asyncio</code> for asynchronous validation:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">validator</span>\n<span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"nd\">@validator</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">data</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">before</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">validate_data</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Simulate an async operation\n</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Code Examples &amp; Patterns\n</h3>\n\n<p>Here's an example of a producer-consumer pattern using <code>asyncio.Queue</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">producer</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"n\">Queue</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]):</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Produced: </span><span class=\"si\">{</span><span class=\"n\">item</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># Signal consumer to exit\n</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">consumer</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"n\">Queue</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Consumed: </span><span class=\"si\">{</span><span class=\"n\">item</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">task_done</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nc\">Queue</span><span class=\"p\">()</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">a</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">b</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">c</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">d</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n    <span class=\"n\">producer_task</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">create_task</span><span class=\"p\">(</span><span class=\"nf\">producer</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">))</span>\n    <span class=\"n\">consumer_task</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">create_task</span><span class=\"p\">(</span><span class=\"nf\">consumer</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">))</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span><span class=\"n\">producer_task</span><span class=\"p\">,</span> <span class=\"n\">consumer_task</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This pattern is used in our data pipelines to decouple data ingestion from processing.  We use dependency injection to provide the <code>asyncio.Queue</code> to the producer and consumer tasks, improving testability.</p>\n\n<h3>\n  \n  \n  Failure Scenarios &amp; Debugging\n</h3>\n\n<p>A common issue is unhandled exceptions within asynchronous tasks. These exceptions don't propagate to the main thread by default, leading to silent failures.  We address this with a global exception handler:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">logging</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_exception</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Unhandled exception: </span><span class=\"si\">{</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">exception</span><span class=\"sh\">'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">get_running_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"p\">.</span><span class=\"nf\">set_exception_handler</span><span class=\"p\">(</span><span class=\"n\">handle_exception</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ... your async code ...\n</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Another frequent problem is async race conditions.  We encountered one where multiple tasks were attempting to update a shared resource concurrently, leading to inconsistent data.  Debugging involved using <code>pdb</code> within an <code>asyncio.run()</code> context and carefully stepping through the code to identify the conflicting operations.  We resolved it by using <code>asyncio.Lock</code> to synchronize access to the shared resource.</p>\n\n<h3>\n  \n  \n  Performance &amp; Scalability\n</h3>\n\n<p>We use <code>cProfile</code> and <code>asyncio.get_event_loop().time()</code> to profile our asynchronous code.  A key optimization is avoiding global state, as it can introduce contention and reduce concurrency.  Reducing allocations within asynchronous tasks is also crucial, as garbage collection can become a bottleneck.  We‚Äôve experimented with C extensions (Cython) for performance-critical sections of our code, achieving significant speedups.  </p>\n\n<p>We benchmark our asynchronous code using <code>asyncio.run(async_function())</code> and measuring the execution time.  We also use <code>memory_profiler</code> to identify memory leaks or excessive memory usage.</p>\n\n<h3>\n  \n  \n  Security Considerations\n</h3>\n\n<p>Asynchronous code introduces new security risks.  Insecure deserialization of data received from external sources can lead to code injection vulnerabilities.  We mitigate this by using trusted sources and validating all input data rigorously.  Improper sandboxing of asynchronous tasks can also allow malicious code to escalate privileges.  We use a combination of process isolation and resource limits to mitigate this risk.</p>\n\n<h3>\n  \n  \n  Testing, CI &amp; Validation\n</h3>\n\n<p>We use <code>pytest</code> with the <code>asyncio</code> plugin for testing our asynchronous code.  We write both unit tests and integration tests to verify the correctness of our code.  We also use property-based testing with <code>Hypothesis</code> to generate random test cases and uncover edge cases.  </p>\n\n<p>Our CI pipeline uses <code>tox</code> to run tests against multiple Python versions.  We also use <code>mypy</code> to perform static type checking and enforce type safety.  GitHub Actions automatically runs these checks on every pull request.  We use <code>pre-commit</code> hooks to enforce code style and linting.</p>\n\n<h3>\n  \n  \n  Common Pitfalls &amp; Anti-Patterns\n</h3>\n\n<ol>\n<li>\n<strong>Blocking Operations in Async Functions:</strong>  Using synchronous blocking calls (e.g., <code>time.sleep()</code>) within an <code>async</code> function defeats the purpose of asynchronicity. Use <code>asyncio.sleep()</code> instead.</li>\n<li>\n<strong>Ignoring Task Exceptions:</strong>  Unhandled exceptions in asynchronous tasks can lead to silent failures. Always handle exceptions within tasks or use a global exception handler.</li>\n<li>\n<strong>Overusing <code>asyncio.gather()</code>:</strong>  While convenient, <code>asyncio.gather()</code> can hide exceptions.  Consider using <code>asyncio.create_task()</code> and handling exceptions individually for better error reporting.</li>\n<li>\n<strong>Sharing Mutable State Without Synchronization:</strong>  Race conditions can occur when multiple tasks access and modify shared mutable state concurrently. Use <code>asyncio.Lock</code> or other synchronization primitives.</li>\n<li>\n<strong>Creating Too Many Tasks:</strong>  Creating an excessive number of tasks can overwhelm the event loop and lead to performance degradation.  Use task limiting or a worker pool.</li>\n</ol>\n\n<h3>\n  \n  \n  Best Practices &amp; Architecture\n</h3>\n\n<ul>\n<li>\n<strong>Type-Safety:</strong>  Embrace type hints and use <code>mypy</code> to enforce type safety.</li>\n<li>\n<strong>Separation of Concerns:</strong>  Design modular code with clear separation of concerns.</li>\n<li>\n<strong>Defensive Coding:</strong>  Validate all input data and handle exceptions gracefully.</li>\n<li>\n<strong>Configuration Layering:</strong>  Use a layered configuration approach to manage environment-specific settings.</li>\n<li>\n<strong>Dependency Injection:</strong>  Use dependency injection to improve testability and maintainability.</li>\n<li>\n<strong>Automation:</strong>  Automate testing, linting, and deployment using tools like <code>Makefile</code>, <code>Poetry</code>, and Docker.</li>\n</ul>\n\n<h3>\n  \n  \n  Conclusion\n</h3>\n\n<p>Mastering asynchronous programming in Python is essential for building robust, scalable, and maintainable systems. It‚Äôs not a silver bullet, but a powerful tool that, when used correctly, can significantly improve the performance and resilience of your applications.  The key is to understand the underlying principles, anticipate potential pitfalls, and adopt best practices for testing, debugging, and monitoring.  Start by refactoring legacy synchronous code to use <code>async</code>/<code>await</code>, measure the performance improvements, and write comprehensive tests to ensure correctness.  Enforce type checking and linting to maintain code quality and prevent regressions.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pull Real-Time SEC Filings and Stock Data in Python (and Analyze It With AI!)","url":"https://dev.to/adafromcoinapi/pull-real-time-sec-filings-and-stock-data-in-python-and-analyze-it-with-ai-efg","date":1750853221,"author":"Ada from CoinAPI","guid":170623,"unread":true,"content":"<p>Ever wanted to get real-time stock prices or fresh SEC filings straight into your Python scripts, without fighting CSVs or ugly web scraping? Let‚Äôs do it together, step by step, using FinFeedAPI (via API Bricks) and some AI magic!</p>\n\n<h2>\n  \n  \n  What You‚Äôll Build\n</h2>\n\n<ul>\n<li>A Python script (or notebook) that fetches live SEC filings and stock info for any ticker</li>\n<li>The ability to summarize those filings using Anthropic‚Äôs Claude AI</li>\n<li>A simple foundation for dashboards, alerts, or research tools</li>\n</ul>\n\n<p>Sample output:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Title: 10-K | Date: 2025-03-01\nTitle: 8-K | Date: 2025-02-15\nSummary: \"This 10-K filing details Apple's annual financial results, with significant growth in revenue and R&amp;D investments...\"\n</code></pre>\n\n</div>\n\n\n\n<p>Prerequisites</p>\n\n<ul>\n<li>Python 3.8+</li>\n<li>API key from FinFeedAPI SEC &amp; Stock MCP (free to start)</li>\n<li>Basic Python skills</li>\n<li>(Optional) Anthropic API key if you want AI-powered summaries</li>\n</ul>\n\n<h2>\n  \n  \n  1. Install Your Tools\n</h2>\n\n<p>Fire up your terminal and run:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pip install api-bricks-sdk anthropic\n</code></pre>\n\n</div>\n\n\n\n<p>üí° You only need anthropic if you want to add the AI summary step!</p>\n\n<h2>\n  \n  \n  2. Grab Your API Key\n</h2>\n\n<p>Go to apibricks.dev and sign up.</p>\n\n<p>Create a project and copy your API key somewhere safe.</p>\n\n<p>(Optional) Grab an Anthropic API key for LLM summaries.</p>\n\n<h2>\n  \n  \n  3. Set Up the API Bricks SDK\n</h2>\n\n<p>Let‚Äôs connect to the FinFeedAPI and fetch some data.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>from apibricks_sdk import FinFeedApiSecAndStockMcpApi\n\napi_key = \"YOUR_API_KEY\"  # paste your API key here\nclient = FinFeedApiSecAndStockMcpApi(api_key)\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  4. Fetch Stock Data (The Fun Begins!)\n</h2>\n\n<p>Let‚Äôs pull live data for Apple (AAPL):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>symbol_info = client.symbols_symbol_get(symbol='AAPL')\nprint(symbol_info)\n</code></pre>\n\n</div>\n\n\n\n<p>Output:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>{'symbol': 'AAPL', 'name': 'Apple Inc.', ...}\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  5. Get Recent SEC Filings\n</h2>\n\n<p>Let‚Äôs see Apple‚Äôs latest filings:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>sec_filings = client.sec_filings_filings_get(symbol='AAPL')\nfor filing in sec_filings['filings'][:5]:\n    print(f\"Title: {filing['formType']} | Date: {filing['filedAt']}\")\n</code></pre>\n\n</div>\n\n\n\n<p>Output:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Title: 10-K | Date: 2025-03-01\nTitle: 8-K | Date: 2025-02-15\n...\n</code></pre>\n\n</div>\n\n\n\n<p>This is real, live data!</p>\n\n<ol>\n<li>(Optional) Summarize a Filing With Claude AI\nReady for some generative AI? Let‚Äôs use Anthropic‚Äôs Claude to make sense of those filings:\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import anthropic\n\nclient_anthropic = anthropic.Client(api_key=\"YOUR_ANTHROPIC_API_KEY\")\nresponse = client_anthropic.completions.create(\n    prompt=f\"Summarize the following SEC filing:\\n{sec_filings['filings'][0]['text']}\",\n    model=\"claude-3-opus-20240229\",\n    max_tokens_to_sample=512,\n)\nprint(response.completion)\n</code></pre>\n\n</div>\n\n\n\n<p>Output:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\"This 10-K filing details Apple's annual financial results, with significant growth in revenue and R&amp;D investments...\"\n</code></pre>\n\n</div>\n\n\n\n<p>AI-powered analysis, no manual reading required!</p>\n\n<ol>\n<li>Error Handling (Because Stuff Happens)\nGood code checks for trouble:\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>try:\n    symbol_info = client.symbols_symbol_get(symbol='AAPL')\nexcept Exception as e:\n    print(\"Error fetching symbol info:\", e)\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  What Next? Build Something Cool!\n</h2>\n\n<p>You now have the basics to:</p>\n\n<ul>\n<li>Power a dashboard with live company data</li>\n<li>Build bots that summarize filings for your team</li>\n<li>Create alerts for new SEC documents</li>\n</ul>\n\n<p>The sky‚Äôs the limit. Try plugging in your own tickers, combining with other APIs, or visualizing the data in pandas/matplotlib.</p>\n\n<p>Useful Links</p>\n\n<p><a href=\"https://github.com/api-bricks/api-bricks-sdk\" rel=\"noopener noreferrer\">API Bricks SDK GitHub</a></p>\n\n<p><strong>Let‚Äôs Chat!</strong></p>\n\n<p><strong>What would you build with live SEC and stock data? Got questions or project ideas? Drop them in the comments - happy to help!</strong></p>\n\n<p>If you enjoyed this, follow for more practical API builds, fintech tools, and AI tricks.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: Quiz: The Python print() Function","url":"https://realpython.com/quizzes/python-print-guide/","date":1750852800,"author":"","guid":172217,"unread":true,"content":"<p>The  function outputs objects to the console or a specified file-like stream. You‚Äôll practice:</p><ul><li>Printing multiple values with custom separators</li><li>Changing the end-of-line character</li><li>Redirecting output using the  parameter</li><li>Forcing immediate output with the  parameter</li></ul><p>Work through these questions to reinforce your knowledge of ‚Äôs parameters and best practices for clear, formatted I/O.</p>","contentLength":380,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"What Role Do Frameworks Like Django and Flask Play in Python Development?","url":"https://dev.to/priya_yadav_f24ec65b0518b/what-role-do-frameworks-like-django-and-flask-play-in-python-development-4g6k","date":1750851596,"author":"priya yadav","guid":170622,"unread":true,"content":"<p>Frameworks like Django and Flask play a vital role in Python development by simplifying and speeding up the process of building web applications. Django is a high-level framework that follows the \"batteries-included\" philosophy, offering built-in features like authentication, database management, and security. It‚Äôs ideal for large, complex projects. On the other hand, Flask is lightweight and flexible, giving developers more control over components and design‚Äîperfect for smaller or customized applications. Both frameworks help developers write clean, maintainable code while reducing development time. Mastering these tools can significantly boost your programming skills. Enhance your web development expertise with a <a href=\"https://www.theiotacademy.co/python-training\" rel=\"noopener noreferrer\">Python Certification course</a>.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why Python Is Slow ‚Äî The Real Reasons and Practical Workarounds","url":"https://dev.to/gafoo/why-python-is-slow-the-real-reasons-and-practical-workarounds-4e2c","date":1750849613,"author":"gafoo","guid":170621,"unread":true,"content":"<h2>\n  \n  \n  Table of Contents\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Section</th>\n<th>Key Topics</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Introduction</strong></td>\n<td>Python's performance overview</td>\n</tr>\n<tr>\n<td><strong>Why Python is Slower</strong></td>\n<td>Interpreter, GIL, Dynamic Typing, Memory Consumption, Abstraction Layers</td>\n</tr>\n<tr>\n<td><strong>Interpreted vs Compiled Languages</strong></td>\n<td>Execution models, Advantages, Examples, Performance comparison</td>\n</tr>\n<tr>\n<td><strong>Solutions &amp; Libraries</strong></td>\n<td>Python extensions, Binding mechanisms, Performance gains</td>\n</tr>\n<tr>\n<td><strong>Python in Large Projects</strong></td>\n<td>Limitations, Real-world roles</td>\n</tr>\n<tr>\n<td><strong>Recommended C/C++ Libraries</strong></td>\n<td>Math, Arrays, Data Processing, ML</td>\n</tr>\n<tr>\n<td><strong>Conclusion</strong></td>\n<td>Key takeaways</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Python, a versatile and immensely popular programming language, has found its way into diverse domains such as web development, data analysis, artificial intelligence, and automation. Its ease of learning, flexibility, and rich ecosystem of libraries have made it a go-to choice for countless developers. However, a significant challenge often arises when leveraging Python in performance-critical applications: its inherent slowness compared to lower-level languages.</p>\n\n<h2>\n  \n  \n  Why Python is Slower: Understanding the Core Problem\n</h2>\n\n<h3>\n  \n  \n  The Interpreter and the Global Interpreter Lock (GIL)\n</h3>\n\n<p>Python is fundamentally an interpreted language. This means that the code you write isn't directly translated into machine code that your CPU can execute. Instead, it's translated and executed line by line by an interpreter program (most commonly CPython, the reference implementation written in C). This interpretation process introduces an overhead that compiled languages bypass.</p>\n\n<p>The most significant performance constraint in CPython, particularly for CPU-bound tasks, is the Global Interpreter Lock (GIL). The GIL is a mutex (mutual exclusion lock) that protects access to Python objects, preventing multiple native threads from executing Python bytecodes simultaneously.</p>\n\n<p><strong>How GIL impacts performance:</strong></p>\n\n<ul>\n<li>No True Parallelism for CPU-Bound Tasks</li>\n<li>Benefits: While a bottleneck, the GIL simplifies memory management</li>\n</ul>\n\n<h3>\n  \n  \n  Dynamic Typing Overhead\n</h3>\n\n<p>Python is a dynamically typed language. This means that the type of a variable is determined at runtime, not at the time you write the code.</p>\n\n<p><strong>Performance implications:</strong></p>\n\n<ul>\n<li>Runtime Type Checking</li>\n<li>Memory Allocation</li>\n<li>Optimization Challenges</li>\n</ul>\n\n<h3>\n  \n  \n  High Memory Consumption\n</h3>\n\n<p>As mentioned, everything in Python is an object, including seemingly simple data types like integers, floats, and strings. These objects are not just raw values; they are structures in memory that contain:</p>\n\n<ul>\n<li>A reference count (for garbage collection)</li>\n<li>A pointer to the object's type</li>\n<li>The actual value of the object</li>\n<li>Potentially other attributes</li>\n</ul>\n\n<h3>\n  \n  \n  Abstraction Layers\n</h3>\n\n<p>Python, being a high-level language, abstracts away many low-level details of memory management and hardware interaction. While this simplifies programming, it also means there are multiple layers of abstraction between your Python code and the actual machine instructions.</p>\n\n<h2>\n  \n  \n  Interpreted vs. Compiled Languages: The Performance Divide\n</h2>\n\n<h3>\n  \n  \n  Interpreted Languages\n</h3>\n\n<p><strong>Execution Model:</strong> Code is executed line by line by an intermediate program called an \"interpreter.\"</p>\n\n<p><strong>Advantages:</strong></p>\n\n<ul>\n<li>Portability</li>\n<li>Rapid Development &amp; Debugging</li>\n<li>Flexibility</li>\n</ul>\n\n<p><strong>Disadvantages:</strong></p>\n\n<ul>\n<li>Slower Execution</li>\n<li>Higher Resource Usage</li>\n</ul>\n\n<p><strong>Examples:</strong> Python, JavaScript, Ruby, PHP.</p>\n\n<h3>\n  \n  \n  Compiled Languages\n</h3>\n\n<p><strong>Execution Model:</strong> The entire source code is first translated into machine code by a \"compiler\" before the program runs.</p>\n\n<p><strong>Advantages:</strong></p>\n\n<ul>\n<li>Superior Performance</li>\n<li>Efficient Resource Usage</li>\n<li>Early Error Detection</li>\n</ul>\n\n<p><strong>Disadvantages:</strong></p>\n\n<ul>\n<li>Platform Dependency</li>\n<li>Longer Development Cycles</li>\n<li>Less Flexibility</li>\n</ul>\n\n<p><strong>Examples:</strong> C, C++, Rust, Go, Java, C#.</p>\n\n<h3>\n  \n  \n  Approximate Performance Comparison\n</h3>\n\n<p>For computationally intensive tasks, a compiled language like C or C++ can be tens to hundreds of times faster than pure Python.</p>\n\n<h2>\n  \n  \n  Solutions &amp; Libraries: Harnessing the Power of C or C++ in Python\n</h2>\n\n<h3>\n  \n  \n  How Python Extensions Work\n</h3>\n\n<p>The core idea is to write the performance-sensitive parts of your application in C or C++ and then compile them into a dynamic library file.</p>\n\n<h3>\n  \n  \n  Key Binding Mechanisms\n</h3>\n\n<p>Several tools and approaches facilitate this integration:</p>\n\n<ul>\n<li>Python C API</li>\n<li>Cython</li>\n<li>ctypes</li>\n<li>SWIG</li>\n</ul>\n\n<h3>\n  \n  \n  Performance Gains and Approximate Comparisons\n</h3>\n\n<p>When C/C++ extensions are employed, the performance gains can be dramatic:</p>\n\n<ul>\n<li>Numerical Operations &amp; Array Manipulations</li>\n<li>Binary Data Handling &amp; String Processing</li>\n<li>GIL Release</li>\n<li>Memory Efficiency</li>\n</ul>\n\n<h2>\n  \n  \n  Why Python Isn't Fully Relied On for Large, Real-World Projects (Performance Perspective)\n</h2>\n\n<h3>\n  \n  \n  Ultra Low-Latency Systems\n</h3>\n\n<p><strong>Examples:</strong> High-Frequency Trading (HFT) platforms, critical real-time embedded systems</p>\n\n<h3>\n  \n  \n  Extremely Low Memory Footprint Applications\n</h3>\n\n<p><strong>Examples:</strong> Firmware for microcontrollers, operating system kernels</p>\n\n<h3>\n  \n  \n  CPU-Bound Multithreaded Applications\n</h3>\n\n<p><strong>Examples:</strong> Highly parallel scientific simulations, complex image/video processing pipelines</p>\n\n<h3>\n  \n  \n  High-Performance Games &amp; Graphics Engines\n</h3>\n\n<p><strong>Examples:</strong> Triple-A video games, advanced 3D modeling software</p>\n\n<h3>\n  \n  \n  Python's True Role in Large Systems\n</h3>\n\n<p>Python is widely used in large enterprises and complex systems, often serving a vital role as:</p>\n\n<ul>\n<li>\"Glue Language\"</li>\n<li>API Backends &amp; Microservices</li>\n<li>Data Science &amp; Machine Learning Pipelines</li>\n<li>Automation &amp; Tooling</li>\n</ul>\n\n<h2>\n  \n  \n  Recommended Libraries Built with C/C++ for Python\n</h2>\n\n<h3>\n  \n  \n  Mathematical Libraries\n</h3>\n\n<h4>\n  \n  \n  math (Standard Library)\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">math</span>\n\n<span class=\"c1\"># Calculate square root\n</span><span class=\"n\">result_sqrt</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">144</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Square root of 144: </span><span class=\"si\">{</span><span class=\"n\">result_sqrt</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"c1\"># Output: 12.0\n</span></code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  calco\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">calco</span>\n\n<span class=\"c1\"># Basic arithmetic\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">calco.add(3.0, 4.5): </span><span class=\"si\">{</span><span class=\"n\">calco</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mf\">4.5</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  SciPy\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">scipy.optimize</span> <span class=\"kn\">import</span> <span class=\"n\">minimize</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">25</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nf\">minimize</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Minimum of f(x) at x = </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Array Libraries\n</h3>\n\n<h4>\n  \n  \n  NumPy\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n\n<span class=\"c1\"># Create two large NumPy arrays\n</span><span class=\"n\">numpy_a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">arange</span><span class=\"p\">(</span><span class=\"mi\">10_000_000</span><span class=\"p\">)</span>\n<span class=\"n\">numpy_b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">arange</span><span class=\"p\">(</span><span class=\"mi\">10_000_000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># NumPy Array Addition\n</span><span class=\"n\">result_numpy</span> <span class=\"o\">=</span> <span class=\"n\">numpy_a</span> <span class=\"o\">+</span> <span class=\"n\">numpy_b</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Other C-Based Libraries for Non-Mathematical Purposes\n</h3>\n\n<h4>\n  \n  \n  Pillow\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">RGB</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">red</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">resized_image</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"nf\">resize</span><span class=\"p\">((</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  lxml\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">lxml</span> <span class=\"kn\">import</span> <span class=\"n\">etree</span>\n\n<span class=\"n\">xml_string</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">&lt;root&gt;&lt;item id=</span><span class=\"sh\">'</span><span class=\"s\">1</span><span class=\"sh\">'</span><span class=\"s\">&gt;Value1&lt;/item&gt;&lt;/root&gt;</span><span class=\"sh\">\"</span>\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">etree</span><span class=\"p\">.</span><span class=\"nf\">fromstring</span><span class=\"p\">(</span><span class=\"n\">xml_string</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Pandas\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">({</span>\n    <span class=\"sh\">'</span><span class=\"s\">col1</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">rand</span><span class=\"p\">(</span><span class=\"mi\">1_000_000</span><span class=\"p\">),</span>\n    <span class=\"sh\">'</span><span class=\"s\">col2</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1_000_000</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">grouped_sum</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">col2</span><span class=\"sh\">'</span><span class=\"p\">)[</span><span class=\"sh\">'</span><span class=\"s\">col1</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">sum</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Scikit-learn\n</h4>\n\n<p>While not shown in code, scikit-learn leverages C/C++ for core algorithms.</p>\n\n<h4>\n  \n  \n  asyncio\n</h4>\n\n<p>For I/O bound performance improvements.</p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Python's remarkable ascendancy is rooted in its developer-friendliness, code readability, and a vibrant ecosystem. However, its architectural choices introduce performance trade-offs. The ingenious solution lies in Python's ability to seamlessly integrate with code written in lower-level, compiled languages like C and C++.</p>\n\n<p>In large-scale, real-world projects, Python often plays a strategic role as an orchestration layer or a \"glue language,\" connecting highly optimized components written in other languages. Understanding this dynamic is key to building high-performing and scalable applications in the modern software landscape.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Introducing oops2okay: AI-Powered Debugging for Developers","url":"https://dev.to/iampraveen/introducing-oops2okay-ai-powered-debugging-for-developers-1h6","date":1750849007,"author":"Praveen Rajamani","guid":170588,"unread":true,"content":"<blockquote>\n<p><em>Debugging just got smarter - Paste your code + error, get a fix. Powered by Google‚Äôs Gemini AI.</em></p>\n</blockquote>\n\n<h2>\n  \n  \n  üåü Intro\n</h2>\n\n<p>Debugging code can be tedious, especially when cryptic errors slow down your workflow. That is why I built <strong>oops2okay</strong>, an <em>open-source</em>, <em>full-stack</em> app that leverages AI to help you debug smarter, not harder.</p>\n\n<p>In this post, I will walk you through:</p>\n\n<ul>\n<li><p>What oops2okay does</p></li>\n<li><p>How it works (tech stack)</p></li>\n<li><p>How I integrated Gemini 2.0 Flash for AI debugging</p></li>\n<li><p>Lessons learned while building it</p></li>\n<li><p>Why I Built This</p></li>\n</ul>\n\n<h2>\n  \n  \n  üöÄ What is oops2okay?\n</h2>\n\n<p><strong>oops2okay</strong> is a web app where you can paste your code and error messages, and instantly get:</p>\n\n<ul>\n<li><p>The root cause of your bug</p></li>\n<li><p>Non-technical and technical explanations</p></li>\n<li><p>Suggested fixes (with code)</p></li>\n<li><p>Reference links for further reading</p></li>\n<li><p>A history of your debug sessions</p></li>\n</ul>\n\n<p>It is designed to be fast, user-friendly, and accessible on any device.</p>\n\n<h2>\n  \n  \n  üõ†Ô∏è Tech Stack\n</h2>\n\n<ul>\n<li><p><strong>Frontend:</strong> React (with Vite), Tailwind CSS, Lucide Icons, Axios</p></li>\n<li><p><strong>Backend:</strong> FastAPI (Python), Google Gemini 2.0 Flash API</p></li>\n</ul>\n\n<h2>\n  \n  \n  üîç How it works\n</h2>\n\n<p><strong>1. Frontend (/client)</strong></p>\n\n<ul>\n<li><p>Built with Vite + React</p></li>\n<li><p>User pastes code and error ‚Üí submits form</p></li>\n<li><p>Sends POST request to backend (/debug) with the inputs</p></li>\n<li><p>Displays AI-generated fix + stores history in local storage</p></li>\n</ul>\n\n<p><strong>2. Backend (/server)</strong></p>\n\n<ul>\n<li><p>Accepts the input via FastAPI</p></li>\n<li><p>Calls the Gemini 2.0 Flash API with a well-crafted prompt</p></li>\n<li><p>Returns the AI‚Äôs suggestion/fix</p></li>\n</ul>\n\n<p><strong>3. Gemini Integration</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import google.generativeai as genai\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\nGOOGLE_API_KEY = os.getenv(\"GOOGLE_AI_API_KEY\")\ngenai.configure(api_key=GOOGLE_API_KEY)\n\nmodel = genai.GenerativeModel(\"gemini-2.0-flash\")\n\ndef getGoogleaiResponse(prompt: str) -&gt; dict:\n    response = model.generate_content(prompt)\n    cleaned = cleanJsonResponse(response.text)\n    return json.loads(cleaned)\n\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li><p>The Gemini model used is \"gemini-2.0-flash\", chosen for its speed and lightweight performance.</p></li>\n<li><p>The response is expected to be structured JSON, returned inside markdown-style code blocks.</p></li>\n<li><p>Parses the cleaned response as JSON and returns it.<br>\n</p></li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def cleanJsonResponse(text: str) -&gt; str:\n    return re.sub(r\"^```\n\n(?:json)?\\n([\\s\\S]*?)\\n\n\n```$\", r\"\\1\", text.strip())\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  üåêHosting\n</h2>\n\n<ul>\n<li><p><strong>Frontend:</strong> Hosted on <a href=\"https://vercel.com/\" rel=\"noopener noreferrer\">Vercel</a></p></li>\n<li><p><strong>Backend:</strong> Hosted on <a href=\"https://render.com/\" rel=\"noopener noreferrer\">Render</a></p></li>\n</ul>\n\n<blockquote>\n<p>‚ö†Ô∏è <strong>Backend Cold Start:</strong><br><br>\nRender spins down the backend server to save resources.<br><br>\nThe first request after idling may take <strong>15‚Äì20 seconds</strong> to respond as the server spins back up.</p>\n</blockquote>\n\n<h2>\n  \n  \n  üí°Challenges Faced\n</h2>\n\n<ul>\n<li><p><strong>Cold Start Delays:</strong> Since the backend is hosted on Render‚Äôs free tier, it can take 15‚Äì20 seconds to respond after being idle, which impacts the initial user experience.</p></li>\n<li><p><strong>Parsing AI Responses:</strong> Gemini‚Äôs output sometimes included markdown or malformed JSON, so I built a cleaning function to reliably extract and parse the data.</p></li>\n<li><p><strong>History Management:</strong> Debug history is managed locally using localStorage, requiring careful handling to store, retrieve, and limit entries for a smooth user experience.</p></li>\n</ul>\n\n<h2>\n  \n  \n  üí≠ Future Plans\n</h2>\n\n<ul>\n<li><p>Show example prompts or error templates</p></li>\n<li><p>Version control for saved results</p></li>\n<li><p>Optional login with GitHub or Google</p></li>\n<li><p>Enhanced Reference &amp; Learning Links</p></li>\n</ul>\n\n<h2>\n  \n  \n  ‚ù§Ô∏è Why I Built This\n</h2>\n\n<p>I wanted a tool that could bridge the gap between cryptic error messages and actionable solutions, especially for newer developers or anyone learning a new stack. By combining a modern UI with powerful AI, oops2okay helps you understand and fix bugs faster, with less frustration.</p>\n\n<h2>\n  \n  \n  üñ•Ô∏è Try it yourself\n</h2>\n\n<p>üëâ <a href=\"https://oops2okay.vercel.app/\" rel=\"noopener noreferrer\">Live Demo</a><br>\nüîó <a href=\"https://github.com/praveenr-CodeCrafter/oops2okay\" rel=\"noopener noreferrer\">Source Code on GitHub</a></p>\n\n<h2>\n  \n  \n  üôå Let‚Äôs Connect\n</h2>\n\n<p>If you liked this project or have ideas to improve it:</p>\n\n<ul>\n<li><p>Drop a comment below</p></li>\n<li><p>Star ‚≠ê the <a href=\"https://github.com/praveenr-CodeCrafter\" rel=\"noopener noreferrer\">GitHub repo</a></p></li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Heart Disease Predictor using KNN(ML) algorithm","url":"https://dev.to/masteryug/heart-disease-predictor-using-knnml-algorithm-jk2","date":1750846995,"author":"yug","guid":170587,"unread":true,"content":"<p>Got a thought implemented as a code. It's finally working....YAAY. You could check it out on Github.<br>\n<a href=\"https://github.com/Master-yug/Cardiological-risk-predictor\" rel=\"noopener noreferrer\">GITHUB</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["python"]}